// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.container
{
    /// <summary>
	/// <para>The ScrollComposite is a extension of {@linkqx.ui.mobile.container.Composite},
	/// and makes it possible to scroll vertically, if content size is greater than
	/// scrollComposite&#8217;s size.</para>
	/// <para>Every widget will be added to child&#8217;s composite.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// // create the composite
	/// var scrollComposite = new qx.ui.mobile.container.ScrollComposite();
	/// scrollComposite.setLayout(new qx.ui.mobile.layout.HBox());
	/// // add some children
	/// scrollComposite.add(new qx.ui.mobile.basic.Label("Name: "), {flex:1});
	/// scrollComposite.add(new qx.ui.mobile.form.TextField());
	/// </code>
	/// <para>This example horizontally groups a label and text field by using a
	/// Composite configured with a horizontal box layout as a container.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.container.ScrollComposite", OmitOptionalParameters = true, Export = false)]
    public partial class ScrollComposite : qx.ui.mobile.container.Composite
    {
		#region Properties

		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public object DefaultCssClass { get; set; }

		#endregion Properties

		#region Methods

		public ScrollComposite() { throw new NotImplementedException(); }

		/// <param name="layout">The layout that should be used for this container</param>
		public ScrollComposite(qx.ui.mobile.layout.Abstract layout = null) { throw new NotImplementedException(); }

		[JsMethod(Name = "add")]
		public void Add(object child, object options) { throw new NotImplementedException(); }

		[JsMethod(Name = "addAfter")]
		public void AddAfter(object child, object after, object layoutProperties) { throw new NotImplementedException(); }

		[JsMethod(Name = "addAt")]
		public void AddAt(object child, object index, object options) { throw new NotImplementedException(); }

		[JsMethod(Name = "addBefore")]
		public void AddBefore(object child, object before, object layoutProperties) { throw new NotImplementedException(); }

		[JsMethod(Name = "getChildren")]
		public void GetChildren() { throw new NotImplementedException(); }

		[JsMethod(Name = "getLayout")]
		public void GetLayout() { throw new NotImplementedException(); }

		[JsMethod(Name = "hasChildren")]
		public void HasChildren() { throw new NotImplementedException(); }

		[JsMethod(Name = "indexOf")]
		public void IndexOf(object child) { throw new NotImplementedException(); }

		[JsMethod(Name = "remove")]
		public void Remove(object child) { throw new NotImplementedException(); }

		[JsMethod(Name = "removeAll")]
		public void RemoveAll() { throw new NotImplementedException(); }

		[JsMethod(Name = "removeAt")]
		public void RemoveAt(object index) { throw new NotImplementedException(); }

		[JsMethod(Name = "setLayout")]
		public void SetLayout(object layout) { throw new NotImplementedException(); }

		#endregion Methods
    }
}