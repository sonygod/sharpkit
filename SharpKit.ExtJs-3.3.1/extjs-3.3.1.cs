//***************************************************
//* This file was generated by tool
//* 28/01/2011 20:06:16
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
using SharpKit.Html4;
using Ext.menu;
using Ext.data;
using Ext.lib;
using Ext.dd;
using Ext.form;
#region Ext
namespace Ext
{
    #region AbstractManager
    /// <summary>
    /// @class Ext.AbstractManager
    /// @extends Object
    /// Base Manager class - extended by ComponentMgr and PluginMgr
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AbstractManager : JsObject
    {
        public AbstractManager() { }
        public AbstractManager(object config) { }
        /// <summary>
        /// Creates and returns an instance of whatever this manager manages, based on the supplied type and config object
        /// @param {Object} config The config object
        /// @param {String} defaultType If no type is discovered in the config object, we fall back to this type
        /// @return {Mixed} The instance of whatever this manager is managing
        /// </summary>
        public void create(JsObject config, JsString defaultType) { }
        /// <summary>
        /// Returns a component by {@link Ext.Component#id id}.
        /// For additional details see {@link Ext.util.MixedCollection#get}.
        /// @param {String} id The component {@link Ext.Component#id id}
        /// @return Ext.Component The Component, <code>undefined</code> if not found, or <code>null</code> if a
        /// Class was found.
        /// </summary>
        public void get(JsString id) { }
        /// <summary>
        /// Checks if a Component type is registered.
        /// @param {Ext.Component} xtype The mnemonic string by which the Component class may be looked up
        /// @return {Boolean} Whether the type is registered.
        /// </summary>
        public bool isRegistered(object type) { return false; }
        /// <summary>
        /// Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.
        /// @param {String} id The component {@link Ext.Component#id id}
        /// @param {Function} fn The callback function
        /// @param {Object} scope The scope (<code>this</code> reference) in which the callback is executed. Defaults to the Component.
        /// </summary>
        public void onAvailable(JsString id, JsAction fn, JsObject scope) { }
        /// <summary>
        /// Registers an item to be managed
        /// @param {Mixed} item The item to register
        /// </summary>
        public void register(object item) { }
        /// <summary>
        /// <p>Registers a new Component constructor, keyed by a new
        /// {@link Ext.Component#xtype}.</p>
        /// <p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new
        /// subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying
        /// child Components.
        /// see {@link Ext.Container#items}</p>
        /// @param {String} xtype The mnemonic string by which the Component class may be looked up.
        /// @param {Constructor} cls The new Component class.
        /// </summary>
        public void registerType(object type, object cls) { }
        /// <summary>
        /// Unregisters a component by removing it from this manager
        /// @param {Mixed} item The item to unregister
        /// </summary>
        public void unregister(object item) { }
        public JsString typeName { get; set; }
    }
    #endregion
    #region Action
    /// <summary>
    /// @class Ext.Action
    /// <p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
    /// can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
    /// updates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}
    /// and {@link Ext.menu.Menu} components).</p>
    /// <p>Aside from supporting the config object interface, any component that needs to use Actions must also support
    /// the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),
    /// setDisabled(boolean), setVisible(boolean) and setHandler(function).</p>
    /// Example usage:<br>
    /// <pre><code>
    /// // Define the shared action.  Each component below will have the same
    /// // display text and icon, and will display the same message on click.
    /// var action = new Ext.Action({
    /// {@link #text}: 'Do something',
    /// {@link #handler}: function(){
    /// Ext.Msg.alert('Click', 'You did something.');
    /// },
    /// {@link #iconCls}: 'do-something',
    /// {@link #itemId}: 'myAction'
    /// });
    /// var panel = new Ext.Panel({
    /// title: 'Actions',
    /// width: 500,
    /// height: 300,
    /// tbar: [
    /// // Add the action directly to a toolbar as a menu button
    /// action,
    /// {
    /// text: 'Action Menu',
    /// // Add the action to a menu as a text item
    /// menu: [action]
    /// }
    /// ],
    /// items: [
    /// // Add the action to the panel body as a standard button
    /// new Ext.Button(action)
    /// ],
    /// renderTo: Ext.getBody()
    /// });
    /// // Change the text for all components using the action
    /// action.setText('Something else');
    /// // Reference an action through a container using the itemId
    /// var btn = panel.getComponent('myAction');
    /// var aRef = btn.baseAction;
    /// aRef.setText('New text');
    /// </code></pre>
    /// @constructor
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Action : JsObject
    {
        public Action() { }
        public void addComponent(object comp) { }
        public void callEach(object fnName, object args) { }
        public Action(object config) { }
        /// <summary>
        /// Disables all components using this action.
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Executes the specified function once for each Component currently tied to this action.  The function passed
        /// in should accept a single argument that will be an object that supports the basic Action config/method interface.
        /// @param {Function} fn The function to execute for each component
        /// @param {Object} scope The scope (<code>this</code> reference) in which the function is executed.  Defaults to the Component.
        /// </summary>
        public void each(JsAction fn, JsObject scope) { }
        /// <summary>
        /// Enables all components using this action.
        /// </summary>
        public void enable() { }
        /// <summary>
        /// Executes this action manually using the handler function specified in the original config object
        /// or the handler function set with <code>{@link #setHandler}</code>.  Any arguments passed to this
        /// function will be passed on to the handler function.
        /// @param {Mixed} arg1 (optional) Variable number of arguments passed to the handler function
        /// @param {Mixed} arg2 (optional)
        /// @param {Mixed} etc... (optional)
        /// </summary>
        public void execute() { }
        /// <summary>
        /// Gets the icon CSS class currently used by all components using this action.
        /// </summary>
        public void getIconClass() { }
        /// <summary>
        /// Gets the text currently displayed by all components using this action.
        /// </summary>
        public void getText() { }
        /// <summary>
        /// Hides all components using this action.
        /// </summary>
        public void hide() { }
        /// <summary>
        /// Returns true if the components using this action are currently disabled, else returns false.
        /// </summary>
        public void isDisabled() { }
        /// <summary>
        /// Returns true if the components using this action are currently hidden, else returns false.
        /// </summary>
        public void isHidden() { }
        public void removeComponent(object comp) { }
        /// <summary>
        /// Sets the disabled state of all components using this action.  Shortcut method
        /// for {@link #enable} and {@link #disable}.
        /// @param {Boolean} disabled True to disable the component, false to enable it
        /// </summary>
        public void setDisabled(object v) { }
        /// <summary>
        /// Sets the function that will be called by each Component using this action when its primary event is triggered.
        /// @param {Function} fn The function that will be invoked by the action's components.  The function
        /// will be called with no arguments.
        /// @param {Object} scope The scope (<code>this</code> reference) in which the function is executed. Defaults to the Component firing the event.
        /// </summary>
        public void setHandler(JsAction fn, JsObject scope) { }
        /// <summary>
        /// Sets the hidden state of all components using this action.  Shortcut method
        /// for <code>{@link #hide}</code> and <code>{@link #show}</code>.
        /// @param {Boolean} hidden True to hide the component, false to show it
        /// </summary>
        public void setHidden(object v) { }
        /// <summary>
        /// Sets the icon CSS class for all components using this action.  The class should supply
        /// a background image that will be used as the icon image.
        /// @param {String} cls The CSS class supplying the icon image
        /// </summary>
        public void setIconClass(JsString cls) { }
        /// <summary>
        /// Sets the text to be displayed by all components using this action.
        /// @param {String} text The text to display
        /// </summary>
        public void setText(JsString text) { }
        /// <summary>
        /// Shows all components using this action.
        /// </summary>
        public void show() { }
        public bool isAction { get; set; }
    }
    #endregion
    #region Ajax
    /// <summary>
    /// @class Ext.Ajax
    /// @extends Ext.data.Connection
    /// <p>The global Ajax request class that provides a simple way to make Ajax requests
    /// with maximum flexibility.</p>
    /// <p>Since Ext.Ajax is a singleton, you can set common properties/events for it once
    /// and override them at the request function level only if necessary.</p>
    /// <p>Common <b>Properties</b> you may want to set are:<div class="mdetail-params"><ul>
    /// <li><b><tt>{@link #method}</tt></b><p class="sub-desc"></p></li>
    /// <li><b><tt>{@link #extraParams}</tt></b><p class="sub-desc"></p></li>
    /// <li><b><tt>{@link #url}</tt></b><p class="sub-desc"></p></li>
    /// </ul></div>
    /// <pre><code>
    /// // Default headers to pass in every request
    /// Ext.Ajax.defaultHeaders = {
    /// 'Powered-By': 'Ext'
    /// };
    /// </code></pre>
    /// </p>
    /// <p>Common <b>Events</b> you may want to set are:<div class="mdetail-params"><ul>
    /// <li><b><tt>{@link Ext.data.Connection#beforerequest beforerequest}</tt></b><p class="sub-desc"></p></li>
    /// <li><b><tt>{@link Ext.data.Connection#requestcomplete requestcomplete}</tt></b><p class="sub-desc"></p></li>
    /// <li><b><tt>{@link Ext.data.Connection#requestexception requestexception}</tt></b><p class="sub-desc"></p></li>
    /// </ul></div>
    /// <pre><code>
    /// // Example: show a spinner during all Ajax requests
    /// Ext.Ajax.on('beforerequest', this.showSpinner, this);
    /// Ext.Ajax.on('requestcomplete', this.hideSpinner, this);
    /// Ext.Ajax.on('requestexception', this.hideSpinner, this);
    /// </code></pre>
    /// </p>
    /// <p>An example request:</p>
    /// <pre><code>
    /// // Basic request
    /// Ext.Ajax.{@link Ext.data.Connection#request request}({
    /// url: 'foo.php',
    /// success: someFn,
    /// failure: otherFn,
    /// headers: {
    /// 'my-header': 'foo'
    /// },
    /// params: { foo: 'bar' }
    /// });
    /// // Simple ajax form submission
    /// Ext.Ajax.{@link Ext.data.Connection#request request}({
    /// form: 'some-form',
    /// params: 'foo=bar'
    /// });
    /// </code></pre>
    /// </p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Ajax
    {
    }
    #endregion
    #region BoxComponent
    /// <summary>
    /// @class Ext.BoxComponent
    /// @extends Ext.Component
    /// <p>Base class for any {@link Ext.Component Component} that is to be sized as a box, using width and height.</p>
    /// <p>BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly
    /// within the Component rendering model.</p>
    /// <p>A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing
    /// element, or one that is created to your specifications at render time. Usually, to participate in layouts,
    /// a Component will need to be a <b>Box</b>Component in order to have its width and height managed.</p>
    /// <p>To use a pre-existing element as a BoxComponent, configure it so that you preset the <b>el</b> property to the
    /// element to reference:<pre><code>
    /// var pageHeader = new Ext.BoxComponent({
    /// el: 'my-header-div'
    /// });</code></pre>
    /// This may then be {@link Ext.Container#add added} to a {@link Ext.Container Container} as a child item.</p>
    /// <p>To create a BoxComponent based around a HTML element to be created at render time, use the
    /// {@link Ext.Component#autoEl autoEl} config option which takes the form of a
    /// {@link Ext.DomHelper DomHelper} specification:<pre><code>
    /// var myImage = new Ext.BoxComponent({
    /// autoEl: {
    /// tag: 'img',
    /// src: '/images/my-image.jpg'
    /// }
    /// });</code></pre></p>
    /// @constructor
    /// @param {Ext.Element/String/Object} config The configuration options.
    /// @xtype box
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BoxComponent : Ext.Component
    {
        public void adjustPosition(object x, object y) { }
        public void adjustSize(object w, object h) { }
        public void afterRender() { }
        /// <summary>
        /// Gets the current box measurements of the component's underlying element.
        /// @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
        /// @return {Object} box An object in the format {x, y, width, height}
        /// </summary>
        public JsObject getBox(bool local) { return null; }
        /// <summary>
        /// Gets the current height of the component's underlying element.
        /// @return {Number}
        /// </summary>
        public void getHeight() { }
        /// <summary>
        /// Gets the current size of the component's underlying element, including space taken by its margins.
        /// @return {Object} An object containing the element's size {width: (element width + left/right margins), height: (element height + top/bottom margins)}
        /// </summary>
        public JsObject getOuterSize() { return null; }
        /// <summary>
        /// Gets the current XY position of the component's underlying element.
        /// @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
        /// @return {Array} The XY position of the element (e.g., [100, 200])
        /// </summary>
        public JsArray getPosition(bool local) { return null; }
        /// <summary>
        /// <p>Returns the outermost Element of this Component which defines the Components overall size.</p>
        /// <p><i>Usually</i> this will return the same Element as <code>{@link #getEl}</code>,
        /// but in some cases, a Component may have some more wrapping Elements around its main
        /// active Element.</p>
        /// <p>An example is a ComboBox. It is encased in a <i>wrapping</i> Element which
        /// contains both the <code>&lt;input></code> Element (which is what would be returned
        /// by its <code>{@link #getEl}</code> method, <i>and</i> the trigger button Element.
        /// This Element is returned as the <code>resizeEl</code>.
        /// @return {Ext.Element} The Element which is to be resized by size managing layouts.
        /// </summary>
        public Element getResizeEl() { return null; }
        /// <summary>
        /// Gets the current size of the component's underlying element.
        /// @return {Object} An object containing the element's size {width: (element width), height: (element height)}
        /// </summary>
        public JsObject getSize() { return null; }
        /// <summary>
        /// Gets the current width of the component's underlying element.
        /// @return {Number}
        /// </summary>
        public void getWidth() { }
        public void initComponent() { }
        /// <summary>
        /// Force the component's size to recalculate based on the underlying element's current height and width.
        /// @return {Ext.BoxComponent} this
        /// */
        /// syncSize : function(){
        /// delete this.lastSize;
        /// this.setSize(this.autoWidth ? undefined : this.getResizeEl().getWidth(), this.autoHeight ? undefined : this.getResizeEl().getHeight());
        /// return this;
        /// },
        /// /* // protected
        /// Called after the component is resized, this method is empty by default but can be implemented by any
        /// subclass that needs to perform custom logic after a resize occurs.
        /// @param {Number} adjWidth The box-adjusted width that was set
        /// @param {Number} adjHeight The box-adjusted height that was set
        /// @param {Number} rawWidth The width that was originally specified
        /// @param {Number} rawHeight The height that was originally specified
        /// */
        /// onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){
        /// },
        /// /* // protected
        /// Called after the component is moved, this method is empty by default but can be implemented by any
        /// subclass that needs to perform custom logic after a move occurs.
        /// @param {Number} x The new x position
        /// @param {Number} y The new y position
        /// </summary>
        public BoxComponent onPosition(JsNumber x, JsNumber y) { return null; }
        /// <summary>
        /// Force the component's size to recalculate based on the underlying element's current height and width.
        /// @return {Ext.BoxComponent} this
        /// */
        /// syncSize : function(){
        /// delete this.lastSize;
        /// this.setSize(this.autoWidth ? undefined : this.getResizeEl().getWidth(), this.autoHeight ? undefined : this.getResizeEl().getHeight());
        /// return this;
        /// },
        /// /* // protected
        /// Called after the component is resized, this method is empty by default but can be implemented by any
        /// subclass that needs to perform custom logic after a resize occurs.
        /// @param {Number} adjWidth The box-adjusted width that was set
        /// @param {Number} adjHeight The box-adjusted height that was set
        /// @param {Number} rawWidth The width that was originally specified
        /// @param {Number} rawHeight The height that was originally specified
        /// </summary>
        public BoxComponent onResize(JsNumber adjWidth, JsNumber adjHeight, JsNumber rawWidth, JsNumber rawHeight) { return null; }
        /// <summary>
        /// Sets the overflow on the content element of the component.
        /// @param {Boolean} scroll True to allow the Component to auto scroll.
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setAutoScroll(bool scroll) { return null; }
        /// <summary>
        /// Sets the height of the component.  This method fires the {@link #resize} event.
        /// @param {Mixed} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style.</li>
        /// <li><i>undefined</i> to leave the height unchanged.</li>
        /// </ul></div>
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setHeight(object height) { return null; }
        /// <summary>
        /// Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.
        /// This method fires the {@link #move} event.
        /// @param {Number} x The new x position
        /// @param {Number} y The new y position
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setPagePosition(JsNumber x, JsNumber y) { return null; }
        /// <summary>
        /// Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
        /// This method fires the {@link #move} event.
        /// @param {Number} left The new left
        /// @param {Number} top The new top
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setPosition(object x, object y) { return null; }
        /// <summary>
        /// Sets the width and height of this BoxComponent. This method fires the {@link #resize} event. This method can accept
        /// either width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.
        /// @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// <li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
        /// <li><code>undefined</code> to leave the width unchanged.</li>
        /// </ul></div>
        /// @param {Mixed} height The new height to set (not required if a size object is passed as the first arg).
        /// This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
        /// <li><code>undefined</code> to leave the height unchanged.</li>
        /// </ul></div>
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setSize(object w, object h) { return null; }
        /// <summary>
        /// Sets the width of the component.  This method fires the {@link #resize} event.
        /// @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// </ul></div>
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent setWidth(object width) { return null; }
        /// <summary>
        /// Force the component's size to recalculate based on the underlying element's current height and width.
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent syncSize() { return null; }
        /// <summary>
        /// Sets the current box measurements of the component's underlying element.
        /// @param {Object} box An object in the format {x, y, width, height}
        /// @return {Ext.BoxComponent} this
        /// </summary>
        public BoxComponent updateBox(JsObject box) { return null; }
        public bool boxReady { get; set; }
        public bool deferHeight { get; set; }
    }
    #endregion
    #region Button
    /// <summary>
    /// @class Ext.Button
    /// @extends Ext.BoxComponent
    /// Simple Button class
    /// @cfg {String} text The button text to be used as innerHTML (html tags are accepted)
    /// @cfg {String} icon The path to an image to display in the button (the image will be set as the background-image
    /// CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
    /// @cfg {Function} handler A function called when the button is clicked (can be used instead of click event).
    /// The handler is passed the following parameters:<div class="mdetail-params"><ul>
    /// <li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
    /// <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
    /// </ul></div>
    /// @cfg {Number} minWidth The minimum width for this button (used to give a set of buttons a common width).
    /// See also {@link Ext.Panel}.<tt>{@link Ext.Panel#minButtonWidth minButtonWidth}</tt>.
    /// @cfg {String/Object} tooltip The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object
    /// @cfg {Boolean} hidden True to start hidden (defaults to false)
    /// @cfg {Boolean} disabled True to start disabled (defaults to false)
    /// @cfg {Boolean} pressed True to start pressed (only if enableToggle = true)
    /// @cfg {String} toggleGroup The group this toggle button is a member of (only 1 per group can be pressed)
    /// @cfg {Boolean/Object} repeat True to repeat fire the click event while the mouse is down. This can also be
    /// a {@link Ext.util.ClickRepeater ClickRepeater} config object (defaults to false).
    /// @constructor
    /// Create a new button
    /// @param {Object} config The config object
    /// @xtype button
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Button : Ext.BoxComponent
    {
        public Button(ButtonConfig config) { }
        public new void afterRender() { }
        public void beforeDestroy() { }
        public void blur() { }
        public void clearTip() { }
        public void doAutoWidth() { }
        public void doToggle() { }
        public void focus() { }
        public void getClickEl(object e, object isUp) { }
        public void getMenuClass() { }
        /// <summary>
        /// <p>This method returns an Array which provides substitution parameters for the {@link #template Template} used
        /// to create this Button's DOM structure.</p>
        /// <p>Instances or subclasses which use a different Template to create a different DOM structure may need to provide their
        /// own implementation of this method.</p>
        /// <p>The default implementation which provides data for the default {@link #template} returns an Array containing the
        /// following items:</p><div class="mdetail-params"><ul>
        /// <li>The &lt;button&gt;'s {@link #type}</li>
        /// <li>A CSS class name applied to the Button's main &lt;tbody&gt; element which determines the button's scale and icon alignment.</li>
        /// <li>A CSS class to determine the presence and position of an arrow icon. (<code>'x-btn-arrow'</code> or <code>'x-btn-arrow-bottom'</code> or <code>''</code>)</li>
        /// <li>The {@link #cls} CSS class name applied to the button's wrapping &lt;table&gt; element.</li>
        /// <li>The Component id which is applied to the button's wrapping &lt;table&gt; element.</li>
        /// </ul></div>
        /// @return {Array} Substitution data for a Template.
        /// </summary>
        public JsArray getTemplateArgs() { return null; }
        /// <summary>
        /// Gets the text for this Button
        /// @return {String} The button text
        /// </summary>
        public JsString getText() { return null; }
        /// <summary>
        /// Returns true if the button has a menu and it is visible
        /// @return {Boolean}
        /// </summary>
        public void hasVisibleMenu() { }
        /// <summary>
        /// Hide this button's menu (if it has one)
        /// </summary>
        public void hideMenu() { }
        public void initButtonEl(object btn, object btnEl) { }
        public new void initComponent() { }
        public void isMenuTriggerOut(object e, object @internal) { }
        public void isMenuTriggerOver(object e, object @internal) { }
        public void monitorMouseOver(object e) { }
        public void onBlur(object e) { }
        public void onClick(object e) { }
        public void onDestroy() { }
        public void onDisable() { }
        public void onDisableChange(object disabled) { }
        public void onEnable() { }
        public void onFocus(object e) { }
        public void onMenuHide(object e) { }
        public void onMenuShow(object e) { }
        public void onMouseDown(object e) { }
        public void onMouseOut(object e) { }
        public void onMouseOver(object e) { }
        public void onMouseUp(object e) { }
        public void onRender(object ct, object position) { }
        public void onRepeatClick(object repeat, object e) { }
        public void restoreClick() { }
        public void setButtonClass() { }
        /// <summary>
        /// Assigns this Button's click handler
        /// @param {Function} handler The function to call when the button is clicked
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function is executed.
        /// Defaults to this Button.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setHandler(JsAction handler, JsObject scope) { return null; }
        /// <summary>
        /// Sets the background image (inline style) of the button.  This method also changes
        /// the value of the {@link icon} config internally.
        /// @param {String} icon The path to an image to display in the button
        /// @return {Ext.Button} this
        /// </summary>
        public Button setIcon(JsString icon) { return null; }
        /// <summary>
        /// Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
        /// the value of the {@link iconCls} config internally.
        /// @param {String} cls The CSS class providing the icon image
        /// @return {Ext.Button} this
        /// </summary>
        public Button setIconClass(JsString cls) { return null; }
        /// <summary>
        /// Sets this Button's text
        /// @param {String} text The button text
        /// @return {Ext.Button} this
        /// </summary>
        public Button setText(JsString text) { return null; }
        /// <summary>
        /// Sets the tooltip for this Button.
        /// @param {String/Object} tooltip. This may be:<div class="mdesc-details"><ul>
        /// <li><b>String</b> : A string to be used as innerHTML (html tags are accepted) to show in a tooltip</li>
        /// <li><b>Object</b> : A configuration object for {@link Ext.QuickTips#register}.</li>
        /// </ul></div>
        /// @return {Ext.Button} this
        /// </summary>
        public Button setTooltip(object tooltip, object initial) { return null; }
        /// <summary>
        /// Show this button's menu (if it has one)
        /// </summary>
        public void showMenu() { }
        /// <summary>
        /// If a state it passed, it becomes the pressed state otherwise the current state is toggled.
        /// @param {Boolean} state (optional) Force a particular state
        /// @param {Boolean} supressEvent (optional) True to stop events being fired when calling this method.
        /// @return {Ext.Button} this
        /// </summary>
        public Button toggle(bool state, object suppressEvent) { return null; }
        /// <summary>
        /// @cfg {String} arrowAlign
        /// <p>(Optional) The side of the Button box to render the arrow if the button has an associated {@link #menu}.
        /// Two values are allowed:</p>
        /// <ul class="mdetail-params">
        /// <li>'right'<div class="sub-desc"></div></li>
        /// <li>'bottom'<div class="sub-desc"></div></li>
        /// </ul>
        /// <p>Defaults to <b><tt>'right'</tt></b>.</p>
        /// </summary>
        public JsString arrowAlign { get; set; }
        /// <summary>
        /// @cfg {String} buttonSelector
        /// <p>(Optional) A {@link Ext.DomQuery DomQuery} selector which is used to extract the active, clickable element from the
        /// DOM structure created.</p>
        /// <p>When a custom {@link #template} is used, you  must ensure that this selector results in the selection of
        /// a focussable element.</p>
        /// <p>Defaults to <b><tt>'button:first-child'</tt></b>.</p>
        /// </summary>
        public JsString buttonSelector { get; set; }
        /// <summary>
        /// @cfg {String} clickEvent
        /// The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to <tt>'click'</tt>.
        /// </summary>
        public JsString clickEvent { get; set; }
        /// <summary>
        /// Read-only. True if this button is disabled
        /// @type Boolean
        /// </summary>
        public bool disabled { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableToggle
        /// True to enable pressed/not pressed toggling (defaults to false)
        /// </summary>
        public bool enableToggle { get; set; }
        /// <summary>
        /// @cfg {Boolean} handleMouseEvents
        /// False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)
        /// </summary>
        public bool handleMouseEvents { get; set; }
        /// <summary>
        /// Read-only. True if this button is hidden
        /// @type Boolean
        /// </summary>
        public bool hidden { get; set; }
        /// <summary>
        /// @cfg {String} iconAlign
        /// <p>(Optional) The side of the Button box to render the icon. Four values are allowed:</p>
        /// <ul class="mdetail-params">
        /// <li>'top'<div class="sub-desc"></div></li>
        /// <li>'right'<div class="sub-desc"></div></li>
        /// <li>'bottom'<div class="sub-desc"></div></li>
        /// <li>'left'<div class="sub-desc"></div></li>
        /// </ul>
        /// <p>Defaults to <b><tt>'left'</tt></b>.</p>
        /// </summary>
        public JsString iconAlign { get; set; }
        /// <summary>
        /// @cfg {String} menuAlign
        /// The position to align the menu to (see {@link Ext.Element#alignTo} for more details, defaults to 'tl-bl?').
        /// </summary>
        public JsString menuAlign { get; set; }
        public JsString menuClassTarget { get; set; }
        /// <summary>
        /// Read-only. True if this button is pressed (only if enableToggle = true)
        /// @type Boolean
        /// </summary>
        public bool pressed { get; set; }
        /// <summary>
        /// @cfg {String} scale
        /// <p>(Optional) The size of the Button. Three values are allowed:</p>
        /// <ul class="mdetail-params">
        /// <li>'small'<div class="sub-desc">Results in the button element being 16px high.</div></li>
        /// <li>'medium'<div class="sub-desc">Results in the button element being 24px high.</div></li>
        /// <li>'large'<div class="sub-desc">Results in the button element being 32px high.</div></li>
        /// </ul>
        /// <p>Defaults to <b><tt>'small'</tt></b>.</p>
        /// </summary>
        public JsString scale { get; set; }
        /// <summary>
        /// @cfg {String} tooltipType
        /// The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
        /// </summary>
        public JsString tooltipType { get; set; }
        /// <summary>
        /// @cfg {String} type
        /// submit, reset or button - defaults to 'button'
        /// </summary>
        public JsString type { get; set; }
    }
    #endregion
    #region ButtonConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class ButtonConfig
    {
        /// <summary>
        /// True to start disabled (defaults to false)
        /// </summary>
        public bool disabled { get; set; }
        /// <summary>
        /// A function called when the button is clicked (can be used instead of click event).
        /// </summary>
        public JsAction handler { get; set; }
        /// <summary>
        /// True to start hidden (defaults to false)
        /// </summary>
        public bool hidden { get; set; }
        /// <summary>
        /// The path to an image to display in the button (the image will be set as the background-image
        /// </summary>
        public JsString icon { get; set; }
        /// <summary>
        /// The minimum width for this button (used to give a set of buttons a common width).
        /// </summary>
        public JsNumber minWidth { get; set; }
        /// <summary>
        /// True to start pressed (only if enableToggle = true)
        /// </summary>
        public bool pressed { get; set; }
        /// <summary>
        /// True to repeat fire the click event while the mouse is down. This can also be
        /// </summary>
        public object repeat { get; set; }
        /// <summary>
        /// The button text to be used as innerHTML (html tags are accepted)
        /// </summary>
        public JsString text { get; set; }
        /// <summary>
        /// The group this toggle button is a member of (only 1 per group can be pressed)
        /// </summary>
        public JsString toggleGroup { get; set; }
        /// <summary>
        /// The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object
        /// </summary>
        public object tooltip { get; set; }
    }
    #endregion
    #region ButtonGroup
    /// <summary>
    /// @class Ext.ButtonGroup
    /// @extends Ext.Panel
    /// Container for a group of buttons. Example usage:
    /// <pre><code>
    /// var p = new Ext.Panel({
    /// title: 'Panel with Button Group',
    /// width: 300,
    /// height:200,
    /// renderTo: document.body,
    /// html: 'whatever',
    /// tbar: [{
    /// xtype: 'buttongroup',
    /// {@link #columns}: 3,
    /// title: 'Clipboard',
    /// items: [{
    /// text: 'Paste',
    /// scale: 'large',
    /// rowspan: 3, iconCls: 'add',
    /// iconAlign: 'top',
    /// cls: 'x-btn-as-arrow'
    /// },{
    /// xtype:'splitbutton',
    /// text: 'Menu Button',
    /// scale: 'large',
    /// rowspan: 3,
    /// iconCls: 'add',
    /// iconAlign: 'top',
    /// arrowAlign:'bottom',
    /// menu: [{text: 'Menu Item 1'}]
    /// },{
    /// xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]
    /// },{
    /// text: 'Copy', iconCls: 'add16'
    /// },{
    /// text: 'Format', iconCls: 'add16'
    /// }]
    /// }]
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new ButtonGroup.
    /// @param {Object} config The config object
    /// @xtype buttongroup
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ButtonGroup : Ext.Panel
    {
        public new void applyDefaults(object c) { }
        public new void initComponent() { }
        public void onAfterLayout() { }
        /// <summary>
        /// @cfg {String} baseCls  Defaults to <tt>'x-btn-group'</tt>.  See {@link Ext.Panel#baseCls}.
        /// </summary>
        public new JsString baseCls { get; set; }
        public new JsString defaultType { get; set; }
        /// <summary>
        /// @cfg {Boolean} frame  Defaults to <tt>true</tt>.  See {@link Ext.Panel#frame}.
        /// </summary>
        public bool frame { get; set; }
        /// <summary>
        /// @cfg {String} layout  Defaults to <tt>'table'</tt>.  See {@link Ext.Container#layout}.
        /// </summary>
        public JsString layout { get; set; }
    }
    #endregion
    #region ColorPalette
    /// <summary>
    /// @class Ext.ColorPalette
    /// @extends Ext.Component
    /// Simple color palette class for choosing colors.  The palette can be rendered to any container.<br />
    /// Here's an example of typical usage:
    /// <pre><code>
    /// var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color
    /// cp.render('my-div');
    /// cp.on('select', function(palette, selColor){
    /// // do something with selColor
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new ColorPalette
    /// @param {Object} config The config object
    /// @xtype colorpalette
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColorPalette : Ext.Component
    {
        public void afterRender() { }
        public void handleClick(object e, object t) { }
        public void initComponent() { }
        public void onRender(object container, object position) { }
        /// <summary>
        /// Selects the specified color in the palette (fires the {@link #select} event)
        /// @param {String} color A valid 6-digit color hex code (# will be stripped if included)
        /// @param {Boolean} suppressEvent (optional) True to stop the select event from firing. Defaults to <tt>false</tt>.
        /// </summary>
        public void select(JsString color, bool suppressEvent) { }
        /// <summary>
        /// @cfg {Boolean} allowReselect If set to true then reselecting a color that is already selected fires the {@link #select} event
        /// </summary>
        public bool allowReselect { get; set; }
        /// <summary>
        /// @cfg {String} clickEvent
        /// The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to <tt>'click'</tt>.
        /// </summary>
        public JsString clickEvent { get; set; }
        public JsString ctype { get; set; }
        /// <summary>
        /// @cfg {String} itemCls
        /// The CSS class to apply to the containing element (defaults to 'x-color-palette')
        /// </summary>
        public JsString itemCls { get; set; }
        /// <summary>
        /// @cfg {String} value
        /// The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that
        /// the hex codes are case-sensitive.
        /// </summary>
        public object value { get; set; }
    }
    #endregion
    #region Component
    /// <summary>
    /// @class Ext.Component
    /// @extends Ext.util.Observable
    /// <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
    /// Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
    /// Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
    /// or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
    /// <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
    /// <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
    /// {@link Ext#getCmp}, passing the {@link #id}.</p>
    /// <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
    /// {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
    /// <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
    /// and to either extend or augment ExtJs base classes to create custom Components.</p>
    /// <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
    /// xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
    /// <pre>
    /// xtype            Class
    /// -------------    ------------------
    /// box              {@link Ext.BoxComponent}
    /// button           {@link Ext.Button}
    /// buttongroup      {@link Ext.ButtonGroup}
    /// colorpalette     {@link Ext.ColorPalette}
    /// component        {@link Ext.Component}
    /// container        {@link Ext.Container}
    /// cycle            {@link Ext.CycleButton}
    /// dataview         {@link Ext.DataView}
    /// datepicker       {@link Ext.DatePicker}
    /// editor           {@link Ext.Editor}
    /// editorgrid       {@link Ext.grid.EditorGridPanel}
    /// flash            {@link Ext.FlashComponent}
    /// grid             {@link Ext.grid.GridPanel}
    /// listview         {@link Ext.ListView}
    /// multislider      {@link Ext.slider.MultiSlider}
    /// panel            {@link Ext.Panel}
    /// progress         {@link Ext.ProgressBar}
    /// propertygrid     {@link Ext.grid.PropertyGrid}
    /// slider           {@link Ext.slider.SingleSlider}
    /// spacer           {@link Ext.Spacer}
    /// splitbutton      {@link Ext.SplitButton}
    /// tabpanel         {@link Ext.TabPanel}
    /// treepanel        {@link Ext.tree.TreePanel}
    /// viewport         {@link Ext.ViewPort}
    /// window           {@link Ext.Window}
    /// Toolbar components
    /// ---------------------------------------
    /// paging           {@link Ext.PagingToolbar}
    /// toolbar          {@link Ext.Toolbar}
    /// tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)
    /// tbfill           {@link Ext.Toolbar.Fill}
    /// tbitem           {@link Ext.Toolbar.Item}
    /// tbseparator      {@link Ext.Toolbar.Separator}
    /// tbspacer         {@link Ext.Toolbar.Spacer}
    /// tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)
    /// tbtext           {@link Ext.Toolbar.TextItem}
    /// Menu components
    /// ---------------------------------------
    /// menu             {@link Ext.menu.Menu}
    /// colormenu        {@link Ext.menu.ColorMenu}
    /// datemenu         {@link Ext.menu.DateMenu}
    /// menubaseitem     {@link Ext.menu.BaseItem}
    /// menucheckitem    {@link Ext.menu.CheckItem}
    /// menuitem         {@link Ext.menu.Item}
    /// menuseparator    {@link Ext.menu.Separator}
    /// menutextitem     {@link Ext.menu.TextItem}
    /// Form components
    /// ---------------------------------------
    /// form             {@link Ext.form.FormPanel}
    /// checkbox         {@link Ext.form.Checkbox}
    /// checkboxgroup    {@link Ext.form.CheckboxGroup}
    /// combo            {@link Ext.form.ComboBox}
    /// compositefield   {@link Ext.form.CompositeField}
    /// datefield        {@link Ext.form.DateField}
    /// displayfield     {@link Ext.form.DisplayField}
    /// field            {@link Ext.form.Field}
    /// fieldset         {@link Ext.form.FieldSet}
    /// hidden           {@link Ext.form.Hidden}
    /// htmleditor       {@link Ext.form.HtmlEditor}
    /// label            {@link Ext.form.Label}
    /// numberfield      {@link Ext.form.NumberField}
    /// radio            {@link Ext.form.Radio}
    /// radiogroup       {@link Ext.form.RadioGroup}
    /// textarea         {@link Ext.form.TextArea}
    /// textfield        {@link Ext.form.TextField}
    /// timefield        {@link Ext.form.TimeField}
    /// trigger          {@link Ext.form.TriggerField}
    /// Chart components
    /// ---------------------------------------
    /// chart            {@link Ext.chart.Chart}
    /// barchart         {@link Ext.chart.BarChart}
    /// cartesianchart   {@link Ext.chart.CartesianChart}
    /// columnchart      {@link Ext.chart.ColumnChart}
    /// linechart        {@link Ext.chart.LineChart}
    /// piechart         {@link Ext.chart.PieChart}
    /// Store xtypes
    /// ---------------------------------------
    /// arraystore       {@link Ext.data.ArrayStore}
    /// directstore      {@link Ext.data.DirectStore}
    /// groupingstore    {@link Ext.data.GroupingStore}
    /// jsonstore        {@link Ext.data.JsonStore}
    /// simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)
    /// store            {@link Ext.data.Store}
    /// xmlstore         {@link Ext.data.XmlStore}
    /// </pre>
    /// @constructor
    /// @param {Ext.Element/String/Object} config The configuration options may be specified as either:
    /// <div class="mdetail-params"><ul>
    /// <li><b>an element</b> :
    /// <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
    /// <li><b>a string</b> :
    /// <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
    /// <li><b>anything else</b> :
    /// <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
    /// </ul></div>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Component
    {
        public Component() { }
        /// <summary>
        /// @class Ext.Component
        /// @extends Ext.util.Observable
        /// <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
        /// Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
        /// Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
        /// or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
        /// <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
        /// <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
        /// {@link Ext#getCmp}, passing the {@link #id}.</p>
        /// <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
        /// {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
        /// <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
        /// and to either extend or augment ExtJs base classes to create custom Components.</p>
        /// <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
        /// xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
        /// <pre>
        /// xtype            Class
        /// -------------    ------------------
        /// box              {@link Ext.BoxComponent}
        /// button           {@link Ext.Button}
        /// buttongroup      {@link Ext.ButtonGroup}
        /// colorpalette     {@link Ext.ColorPalette}
        /// component        {@link Ext.Component}
        /// container        {@link Ext.Container}
        /// cycle            {@link Ext.CycleButton}
        /// dataview         {@link Ext.DataView}
        /// datepicker       {@link Ext.DatePicker}
        /// editor           {@link Ext.Editor}
        /// editorgrid       {@link Ext.grid.EditorGridPanel}
        /// flash            {@link Ext.FlashComponent}
        /// grid             {@link Ext.grid.GridPanel}
        /// listview         {@link Ext.ListView}
        /// multislider      {@link Ext.slider.MultiSlider}
        /// panel            {@link Ext.Panel}
        /// progress         {@link Ext.ProgressBar}
        /// propertygrid     {@link Ext.grid.PropertyGrid}
        /// slider           {@link Ext.slider.SingleSlider}
        /// spacer           {@link Ext.Spacer}
        /// splitbutton      {@link Ext.SplitButton}
        /// tabpanel         {@link Ext.TabPanel}
        /// treepanel        {@link Ext.tree.TreePanel}
        /// viewport         {@link Ext.ViewPort}
        /// window           {@link Ext.Window}
        /// Toolbar components
        /// ---------------------------------------
        /// paging           {@link Ext.PagingToolbar}
        /// toolbar          {@link Ext.Toolbar}
        /// tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)
        /// tbfill           {@link Ext.Toolbar.Fill}
        /// tbitem           {@link Ext.Toolbar.Item}
        /// tbseparator      {@link Ext.Toolbar.Separator}
        /// tbspacer         {@link Ext.Toolbar.Spacer}
        /// tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)
        /// tbtext           {@link Ext.Toolbar.TextItem}
        /// Menu components
        /// ---------------------------------------
        /// menu             {@link Ext.menu.Menu}
        /// colormenu        {@link Ext.menu.ColorMenu}
        /// datemenu         {@link Ext.menu.DateMenu}
        /// menubaseitem     {@link Ext.menu.BaseItem}
        /// menucheckitem    {@link Ext.menu.CheckItem}
        /// menuitem         {@link Ext.menu.Item}
        /// menuseparator    {@link Ext.menu.Separator}
        /// menutextitem     {@link Ext.menu.TextItem}
        /// Form components
        /// ---------------------------------------
        /// form             {@link Ext.form.FormPanel}
        /// checkbox         {@link Ext.form.Checkbox}
        /// checkboxgroup    {@link Ext.form.CheckboxGroup}
        /// combo            {@link Ext.form.ComboBox}
        /// compositefield   {@link Ext.form.CompositeField}
        /// datefield        {@link Ext.form.DateField}
        /// displayfield     {@link Ext.form.DisplayField}
        /// field            {@link Ext.form.Field}
        /// fieldset         {@link Ext.form.FieldSet}
        /// hidden           {@link Ext.form.Hidden}
        /// htmleditor       {@link Ext.form.HtmlEditor}
        /// label            {@link Ext.form.Label}
        /// numberfield      {@link Ext.form.NumberField}
        /// radio            {@link Ext.form.Radio}
        /// radiogroup       {@link Ext.form.RadioGroup}
        /// textarea         {@link Ext.form.TextArea}
        /// textfield        {@link Ext.form.TextField}
        /// timefield        {@link Ext.form.TimeField}
        /// trigger          {@link Ext.form.TriggerField}
        /// Chart components
        /// ---------------------------------------
        /// chart            {@link Ext.chart.Chart}
        /// barchart         {@link Ext.chart.BarChart}
        /// cartesianchart   {@link Ext.chart.CartesianChart}
        /// columnchart      {@link Ext.chart.ColumnChart}
        /// linechart        {@link Ext.chart.LineChart}
        /// piechart         {@link Ext.chart.PieChart}
        /// Store xtypes
        /// ---------------------------------------
        /// arraystore       {@link Ext.data.ArrayStore}
        /// directstore      {@link Ext.data.DirectStore}
        /// groupingstore    {@link Ext.data.GroupingStore}
        /// jsonstore        {@link Ext.data.JsonStore}
        /// simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)
        /// store            {@link Ext.data.Store}
        /// xmlstore         {@link Ext.data.XmlStore}
        /// </pre>
        /// @constructor
        /// @param {Ext.Element/String/Object} config The configuration options may be specified as either:
        /// <div class="mdetail-params"><ul>
        /// <li><b>an element</b> :
        /// <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
        /// <li><b>a string</b> :
        /// <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
        /// <li><b>anything else</b> :
        /// <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
        /// </ul></div>
        /// </summary>
        public Component(object config) { }
    }
    #endregion
    #region CompositeElement
    /// <summary>
    /// @class Ext.CompositeElement
    /// @extends Ext.CompositeElementLite
    /// <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
    /// members, or to perform collective actions upon the whole set.</p>
    /// <p>Although they are not listed, this class supports all of the methods of {@link Ext.Element} and
    /// {@link Ext.Fx}. The methods from these classes will be performed on all the elements in this collection.</p>
    /// <p>All methods return <i>this</i> and can be chained.</p>
    /// Usage:
    /// <pre><code>
    /// var els = Ext.select("#some-el div.some-class", true);
    /// // or select directly from an existing element
    /// var el = Ext.get('some-el');
    /// el.select('div.some-class', true);
    /// els.setWidth(100); // all elements become 100 width
    /// els.hide(true); // all elements fade out and hide
    /// // or
    /// els.setWidth(100).hide(true);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CompositeElement : Ext.CompositeElementLite
    {
        public CompositeElement() { }
        public CompositeElement(object els, object root) { }
        public new void getElement(object el) { }
        public new void transformElement(object el) { }
    }
    #endregion
    #region CompositeElementLite
    /// <summary>
    /// @class Ext.CompositeElementLite
    /// <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
    /// members, or to perform collective actions upon the whole set.</p>
    /// <p>Although they are not listed, this class supports all of the methods of {@link Ext.Element} and
    /// {@link Ext.Fx}. The methods from these classes will be performed on all the elements in this collection.</p>
    /// Example:<pre><code>
    /// var els = Ext.select("#some-el div.some-class");
    /// // or select directly from an existing element
    /// var el = Ext.get('some-el');
    /// el.select('div.some-class');
    /// els.setWidth(100); // all elements become 100 width
    /// els.hide(true); // all elements fade out and hide
    /// // or
    /// els.setWidth(100).hide(true);
    /// </code>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CompositeElementLite
    {
        public CompositeElementLite() { }
        /// <summary>
        /// Adds elements to this Composite object.
        /// @param {Mixed} els Either an Array of DOM elements to add, or another Composite object who's elements should be added.
        /// @return {CompositeElement} This Composite object.
        /// </summary>
        public void add(object els, object root) { }
        public void addListener(object eventName, object handler, object scope, object opt) { }
        /// <summary>
        /// Removes all elements.
        /// </summary>
        public void clear() { }
        /// <summary>
        /// @class Ext.CompositeElementLite
        /// <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
        /// members, or to perform collective actions upon the whole set.</p>
        /// <p>Although they are not listed, this class supports all of the methods of {@link Ext.Element} and
        /// {@link Ext.Fx}. The methods from these classes will be performed on all the elements in this collection.</p>
        /// Example:<pre><code>
        /// var els = Ext.select("#some-el div.some-class");
        /// // or select directly from an existing element
        /// var el = Ext.get('some-el');
        /// el.select('div.some-class');
        /// els.setWidth(100); // all elements become 100 width
        /// els.hide(true); // all elements fade out and hide
        /// // or
        /// els.setWidth(100).hide(true);
        /// </code>
        /// </summary>
        public CompositeElementLite(object els, object root) { }
        /// <summary>
        /// <p>Calls the passed function for each element in this composite.</p>
        /// @param {Function} fn The function to call. The function is passed the following parameters:<ul>
        /// <li><b>el</b> : Element<div class="sub-desc">The current Element in the iteration.
        /// <b>This is the flyweight (shared) Ext.Element instance, so if you require a
        /// a reference to the dom node, use el.dom.</b></div></li>
        /// <li><b>c</b> : Composite<div class="sub-desc">This Composite object.</div></li>
        /// <li><b>idx</b> : Number<div class="sub-desc">The zero-based index in the iteration.</div></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<i>this</i> reference) in which the function is executed. (defaults to the Element)
        /// @return {CompositeElement} this
        /// </summary>
        public void each(JsAction fn, JsObject scope) { }
        /// <summary>
        /// Clears this Composite and adds the elements passed.
        /// @param {Mixed} els Either an array of DOM elements, or another Composite from which to fill this Composite.
        /// @return {CompositeElement} this
        /// </summary>
        public void fill(object els) { }
        /// <summary>
        /// Filters this composite to only elements that match the passed selector.
        /// @param {String/Function} selector A string CSS selector or a comparison function.
        /// The comparison function will be called with the following arguments:<ul>
        /// <li><code>el</code> : Ext.Element<div class="sub-desc">The current DOM element.</div></li>
        /// <li><code>index</code> : Number<div class="sub-desc">The current index within the collection.</div></li>
        /// </ul>
        /// @return {CompositeElement} this
        /// </summary>
        public void filter(object selector) { }
        /// <summary>
        /// Returns the number of elements in this Composite.
        /// @return Number
        /// </summary>
        public void getCount() { }
        public void getElement(object el) { }
        /// <summary>
        /// @private
        /// Copies all of the functions from Ext.Element's prototype onto CompositeElementLite's prototype.
        /// This is called twice - once immediately below, and once again after additional Ext.Element
        /// are added in Ext JS
        /// </summary>
        public static void importElementMethods() { }
        /// <summary>
        /// Find the index of the passed element within the composite collection.
        /// @param el {Mixed} The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
        /// @return Number The index of the passed Ext.Element in the composite collection, or -1 if not found.
        /// </summary>
        public void indexOf(object el) { }
        public void invoke(object fn, object args) { }
        /// <summary>
        /// Returns a flyweight Element of the dom element object at the specified index
        /// @param {Number} index
        /// @return {Ext.Element}
        /// </summary>
        public void item(object index) { }
        /// <summary>
        /// Replaces the specified element with the passed element.
        /// @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
        /// to replace.
        /// @param {Mixed} replacement The id of an element or the Element itself.
        /// @param {Boolean} domReplace (Optional) True to remove and replace the element in the document too.
        /// @return {CompositeElement} this
        /// </summary>
        public void replaceElement(object el, object replacement, bool domReplace) { }
        public void transformElement(object el) { }
        public bool isComposite { get; set; }
    }
    #endregion
    #region Container
    /// <summary>
    /// @class Ext.Container
    /// @extends Ext.BoxComponent
    /// <p>Base class for any {@link Ext.BoxComponent} that may contain other Components. Containers handle the
    /// basic behavior of containing items, namely adding, inserting and removing items.</p>
    /// *
    /// <p>The most commonly used Container classes are {@link Ext.Panel}, {@link Ext.Window} and {@link Ext.TabPanel}.
    /// If you do not need the capabilities offered by the aforementioned classes you can create a lightweight
    /// Container to be encapsulated by an HTML element to your specifications by using the
    /// <code><b>{@link Ext.Component#autoEl autoEl}</b></code> config option. This is a useful technique when creating
    /// embedded {@link Ext.layout.ColumnLayout column} layouts inside {@link Ext.form.FormPanel FormPanels}
    /// for example.</p>
    /// *
    /// <p>The code below illustrates both how to explicitly create a Container, and how to implicitly
    /// create one using the <b><code>'container'</code></b> xtype:<pre><code>
    /// // explicitly create a Container
    /// var embeddedColumns = new Ext.Container({
    /// autoEl: 'div',  // This is the default
    /// layout: 'column',
    /// defaults: {
    /// // implicitly create Container by specifying xtype
    /// xtype: 'container',
    /// autoEl: 'div', // This is the default.
    /// layout: 'form',
    /// columnWidth: 0.5,
    /// style: {
    /// padding: '10px'
    /// }
    /// },
    /// //  The two items below will be Ext.Containers, each encapsulated by a &lt;DIV> element.
    /// items: [{
    /// items: {
    /// xtype: 'datefield',
    /// name: 'startDate',
    /// fieldLabel: 'Start date'
    /// }
    /// }, {
    /// items: {
    /// xtype: 'datefield',
    /// name: 'endDate',
    /// fieldLabel: 'End date'
    /// }
    /// }]
    /// });</code></pre></p>
    /// *
    /// <p><u><b>Layout</b></u></p>
    /// <p>Container classes delegate the rendering of child Components to a layout
    /// manager class which must be configured into the Container using the
    /// <code><b>{@link #layout}</b></code> configuration property.</p>
    /// <p>When either specifying child <code>{@link #items}</code> of a Container,
    /// or dynamically {@link #add adding} Components to a Container, remember to
    /// consider how you wish the Container to arrange those child elements, and
    /// whether those child elements need to be sized using one of Ext's built-in
    /// <b><code>{@link #layout}</code></b> schemes. By default, Containers use the
    /// {@link Ext.layout.ContainerLayout ContainerLayout} scheme which only
    /// renders child components, appending them one after the other inside the
    /// Container, and <b>does not apply any sizing</b> at all.</p>
    /// <p>A common mistake is when a developer neglects to specify a
    /// <b><code>{@link #layout}</code></b> (e.g. widgets like GridPanels or
    /// TreePanels are added to Containers for which no <code><b>{@link #layout}</b></code>
    /// has been specified). If a Container is left to use the default
    /// {@link Ext.layout.ContainerLayout ContainerLayout} scheme, none of its
    /// child components will be resized, or changed in any way when the Container
    /// is resized.</p>
    /// <p>Certain layout managers allow dynamic addition of child components.
    /// Those that do include {@link Ext.layout.CardLayout},
    /// {@link Ext.layout.AnchorLayout}, {@link Ext.layout.FormLayout}, and
    /// {@link Ext.layout.TableLayout}. For example:<pre><code>
    /// //  Create the GridPanel.
    /// var myNewGrid = new Ext.grid.GridPanel({
    /// store: myStore,
    /// columns: myColumnModel,
    /// title: 'Results', // the title becomes the title of the tab
    /// });
    /// myTabPanel.add(myNewGrid); // {@link Ext.TabPanel} implicitly uses {@link Ext.layout.CardLayout CardLayout}
    /// myTabPanel.{@link Ext.TabPanel#setActiveTab setActiveTab}(myNewGrid);
    /// </code></pre></p>
    /// <p>The example above adds a newly created GridPanel to a TabPanel. Note that
    /// a TabPanel uses {@link Ext.layout.CardLayout} as its layout manager which
    /// means all its child items are sized to {@link Ext.layout.FitLayout fit}
    /// exactly into its client area.
    /// <p><b><u>Overnesting is a common problem</u></b>.
    /// An example of overnesting occurs when a GridPanel is added to a TabPanel
    /// by wrapping the GridPanel <i>inside</i> a wrapping Panel (that has no
    /// <code><b>{@link #layout}</b></code> specified) and then add that wrapping Panel
    /// to the TabPanel. The point to realize is that a GridPanel <b>is</b> a
    /// Component which can be added directly to a Container. If the wrapping Panel
    /// has no <code><b>{@link #layout}</b></code> configuration, then the overnested
    /// GridPanel will not be sized as expected.<p>
    /// *
    /// <p><u><b>Adding via remote configuration</b></u></p>
    /// *
    /// <p>A server side script can be used to add Components which are generated dynamically on the server.
    /// An example of adding a GridPanel to a TabPanel where the GridPanel is generated by the server
    /// based on certain parameters:
    /// </p><pre><code>
    /// // execute an Ajax request to invoke server side script:
    /// Ext.Ajax.request({
    /// url: 'gen-invoice-grid.php',
    /// // send additional parameters to instruct server script
    /// params: {
    /// startDate: Ext.getCmp('start-date').getValue(),
    /// endDate: Ext.getCmp('end-date').getValue()
    /// },
    /// // process the response object to add it to the TabPanel:
    /// success: function(xhr) {
    /// var newComponent = eval(xhr.responseText); // see discussion below
    /// myTabPanel.add(newComponent); // add the component to the TabPanel
    /// myTabPanel.setActiveTab(newComponent);
    /// },
    /// failure: function() {
    /// Ext.Msg.alert("Grid create failed", "Server communication failure");
    /// }
    /// });
    /// </code></pre>
    /// <p>The server script needs to return an executable Javascript statement which, when processed
    /// using <code>eval()</code>, will return either a config object with an {@link Ext.Component#xtype xtype},
    /// or an instantiated Component. The server might return this for example:</p><pre><code>
    /// (function() {
    /// function formatDate(value){
    /// return value ? value.dateFormat('M d, Y') : '';
    /// };
    /// var store = new Ext.data.Store({
    /// url: 'get-invoice-data.php',
    /// baseParams: {
    /// startDate: '01/01/2008',
    /// endDate: '01/31/2008'
    /// },
    /// reader: new Ext.data.JsonReader({
    /// record: 'transaction',
    /// idProperty: 'id',
    /// totalRecords: 'total'
    /// }, [
    /// 'customer',
    /// 'invNo',
    /// {name: 'date', type: 'date', dateFormat: 'm/d/Y'},
    /// {name: 'value', type: 'float'}
    /// ])
    /// });
    /// var grid = new Ext.grid.GridPanel({
    /// title: 'Invoice Report',
    /// bbar: new Ext.PagingToolbar(store),
    /// store: store,
    /// columns: [
    /// {header: "Customer", width: 250, dataIndex: 'customer', sortable: true},
    /// {header: "Invoice Number", width: 120, dataIndex: 'invNo', sortable: true},
    /// {header: "Invoice Date", width: 100, dataIndex: 'date', renderer: formatDate, sortable: true},
    /// {header: "Value", width: 120, dataIndex: 'value', renderer: 'usMoney', sortable: true}
    /// ],
    /// });
    /// store.load();
    /// return grid;  // return instantiated component
    /// })();
    /// </code></pre>
    /// <p>When the above code fragment is passed through the <code>eval</code> function in the success handler
    /// of the Ajax request, the code is executed by the Javascript processor, and the anonymous function
    /// runs, and returns the instantiated grid component.</p>
    /// <p>Note: since the code above is <i>generated</i> by a server script, the <code>baseParams</code> for
    /// the Store, the metadata to allow generation of the Record layout, and the ColumnModel
    /// can all be generated into the code since these are all known on the server.</p>
    /// *
    /// @xtype container
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Container : Ext.BoxComponent
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class LAYOUTS
        {
        }
        /// <summary>
        /// <p>Adds {@link Ext.Component Component}(s) to this Container.</p>
        /// <br><p><b>Description</b></u> :
        /// <div><ul class="mdetail-params">
        /// <li>Fires the {@link #beforeadd} event before adding</li>
        /// <li>The Container's {@link #defaults default config values} will be applied
        /// accordingly (see <code>{@link #defaults}</code> for details).</li>
        /// <li>Fires the {@link #add} event after the component has been added.</li>
        /// </ul></div>
        /// <br><p><b>Notes</b></u> :
        /// <div><ul class="mdetail-params">
        /// <li>If the Container is <i>already rendered</i> when <code>add</code>
        /// is called, you may need to call {@link #doLayout} to refresh the view which causes
        /// any unrendered child Components to be rendered. This is required so that you can
        /// <code>add</code> multiple child components if needed while only refreshing the layout
        /// once. For example:<pre><code>
        /// var tb = new {@link Ext.Toolbar}();
        /// tb.render(document.body);  // toolbar is rendered
        /// tb.add({text:'Button 1'}); // add multiple items ({@link #defaultType} for {@link Ext.Toolbar Toolbar} is 'button')
        /// tb.add({text:'Button 2'});
        /// tb.{@link #doLayout}();             // refresh the layout
        /// </code></pre></li>
        /// <li><i>Warning:</i> Containers directly managed by the BorderLayout layout manager
        /// may not be removed or added.  See the Notes for {@link Ext.layout.BorderLayout BorderLayout}
        /// for more details.</li>
        /// </ul></div>
        /// @param {...Object/Array} component
        /// <p>Either one or more Components to add or an Array of Components to add.  See
        /// <code>{@link #items}</code> for additional information.</p>
        /// @return {Ext.Component/Array} The Components that were added.
        /// </summary>
        public object add(object comp) { return null; }
        public new void afterRender() { }
        public void applyDefaults(object c) { }
        public void beforeDestroy() { }
        /// <summary>
        /// @private
        /// We can only lay out if there is a view area in which to layout.
        /// display:none on the layout target, *or any of its parent elements* will mean it has no view area.
        /// </summary>
        public void canLayout() { }
        /// <summary>
        /// Cascades down the component/container heirarchy from this component (called first), calling the specified function with
        /// each component. The scope (<i>this</i>) of
        /// function call will be the scope provided or the current component. The arguments to the function
        /// will be the args provided or the current component. If the function returns false at any point,
        /// the cascade is stopped on that branch.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope of the function (defaults to current component)
        /// @param {Array} args (optional) The args to call the function with (defaults to passing the current component)
        /// @return {Ext.Container} this
        /// </summary>
        public Container cascade(JsAction fn, JsObject scope, JsArray args) { return null; }
        public void createComponent(object config, object defaultType) { }
        public void doLayout(object shallow, object force) { }
        public void doRemove(object c, object autoDestroy) { }
        /// <summary>
        /// Find a component under this container at any level by property
        /// @param {String} prop
        /// @param {String} value
        /// @return {Array} Array of Ext.Components
        /// </summary>
        public JsArray find(object prop, object value) { return null; }
        /// <summary>
        /// Find a component under this container at any level by a custom function. If the passed function returns
        /// true, the component will be included in the results. The passed function is called with the arguments (component, this container).
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional)
        /// @return {Array} Array of Ext.Components
        /// </summary>
        public JsArray findBy(JsAction fn, JsObject scope) { return null; }
        /// <summary>
        /// Find a component under this container at any level by id
        /// @param {String} id
        /// @deprecated Fairly useless method, since you can just use Ext.getCmp. Should be removed for 4.0
        /// If you need to test if an id belongs to a container, you can use getCmp and findParent*.
        /// @return Ext.Component
        /// </summary>
        public void findById(object id) { }
        /// <summary>
        /// Find a component under this container at any level by xtype or class
        /// @param {String/Class} xtype The xtype string for a component, or the class of the component directly
        /// @param {Boolean} shallow (optional) False to check whether this Component is descended from the xtype (this is
        /// the default), or true to check whether this Component is directly of the specified xtype.
        /// @return {Array} Array of Ext.Components
        /// </summary>
        public JsArray findByType(object xtype, bool shallow) { return null; }
        /// <summary>
        /// Get a component contained by this container (alias for items.get(key))
        /// @param {String/Number} key The index or id of the component
        /// @deprecated Should be removed in 4.0, since getComponent does the same thing.
        /// @return {Ext.Component} Ext.Component
        /// </summary>
        public Component get(object key) { return null; }
        /// <summary>
        /// Examines this container's <code>{@link #items}</code> <b>property</b>
        /// and gets a direct child component of this container.
        /// @param {String/Number} comp This parameter may be any of the following:
        /// <div><ul class="mdetail-params">
        /// <li>a <b><code>String</code></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>
        /// or <code>{@link Ext.Component#id id}</code> of the child component </li>
        /// <li>a <b><code>Number</code></b> : representing the position of the child component
        /// within the <code>{@link #items}</code> <b>property</b></li>
        /// </ul></div>
        /// <p>For additional information see {@link Ext.util.MixedCollection#get}.
        /// @return Ext.Component The component (if found).
        /// </summary>
        public void getComponent(object comp) { }
        public void getComponentId(object comp) { }
        /// <summary>
        /// Returns the layout currently in use by the container.  If the container does not currently have a layout
        /// set, a default {@link Ext.layout.ContainerLayout} will be created and set as the container's layout.
        /// @return {ContainerLayout} layout The container's layout
        /// </summary>
        public void getLayout() { }
        /// <summary>
        /// <p>Returns the Element to be used to contain the child Components of this Container.</p>
        /// <p>An implementation is provided which returns the Container's {@link #getEl Element}, but
        /// if there is a more complex structure to a Container, this may be overridden to return
        /// the element into which the {@link #layout layout} renders child Components.</p>
        /// @return {Ext.Element} The Element to render child Components into.
        /// </summary>
        public Element getLayoutTarget() { return null; }
        public void hasLayoutPending() { }
        public new void initComponent() { }
        public void initItems() { }
        /// <summary>
        /// Inserts a Component into this Container at a specified index. Fires the
        /// {@link #beforeadd} event before inserting, then fires the {@link #add} event after the
        /// Component has been inserted.
        /// @param {Number} index The index at which the Component will be inserted
        /// into the Container's items collection
        /// @param {Ext.Component} component The child Component to insert.<br><br>
        /// Ext uses lazy rendering, and will only render the inserted Component should
        /// it become necessary.<br><br>
        /// A Component config object may be passed in order to avoid the overhead of
        /// constructing a real Component object if lazy rendering might mean that the
        /// inserted Component will not be rendered immediately. To take advantage of
        /// this 'lazy instantiation', set the {@link Ext.Component#xtype} config
        /// property to the registered type of the Component wanted.<br><br>
        /// For a list of all available xtypes, see {@link Ext.Component}.
        /// @return {Ext.Component} component The Component (or config object) that was
        /// inserted with the Container's default config values applied.
        /// </summary>
        public Component insert(JsNumber index, object comp) { return null; }
        public void lookupComponent(object comp) { }
        public void onAdd(object c) { }
        public void onAdded(object container, object pos) { }
        public void onBeforeAdd(object item) { }
        public void onRemove(object c) { }
        public void onShow() { }
        /// <summary>
        /// Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
        /// the {@link #remove} event after the component has been removed.
        /// @param {Component/String} component The component reference or id to remove.
        /// @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
        /// Defaults to the value of this Container's {@link #autoDestroy} config.
        /// @return {Ext.Component} component The Component that was removed.
        /// </summary>
        public Component remove(object comp, bool autoDestroy) { return null; }
        /// <summary>
        /// Removes all components from this container.
        /// @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
        /// Defaults to the value of this Container's {@link #autoDestroy} config.
        /// @return {Array} Array of the destroyed components
        /// </summary>
        public JsArray removeAll(bool autoDestroy) { return null; }
        public void setLayout(object layout) { }
        public void shouldBufferLayout() { }
        /// <summary>
        /// If true the container will automatically destroy any contained component that is removed from it, else
        /// destruction must be handled manually (defaults to true).
        /// </summary>
        public bool autoDestroy { get; set; }
        /// <summary>
        /// @cfg {Boolean/Number} bufferResize
        /// When set to true (50 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer
        /// the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers
        /// with a large quantity of sub-components for which frequent layout calls would be expensive. Defaults to <code>50</code>.
        /// </summary>
        public object bufferResize { get; set; }
        /// <summary>
        /// <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
        /// a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
        /// <p>Defaults to <code>'panel'</code>, except {@link Ext.menu.Menu} which defaults to <code>'menuitem'</code>,
        /// and {@link Ext.Toolbar} and {@link Ext.ButtonGroup} which default to <code>'button'</code>.</p>
        /// </summary>
        public JsString defaultType { get; set; }
        /// <summary>
        /// If true the container will force a layout initially even if hidden or collapsed. This option
        /// is useful for forcing forms to render in collapsed or hidden containers. (defaults to false).
        /// </summary>
        public bool forceLayout { get; set; }
        /// <summary>
        /// The event to listen to for resizing in layouts. Defaults to <code>'resize'</code>.
        /// </summary>
        public JsString resizeEvent { get; set; }
    }
    #endregion
    #region CycleButton
    /// <summary>
    /// @class Ext.CycleButton
    /// @extends Ext.SplitButton
    /// A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically
    /// cycles through each menu item on click, raising the button's {@link #change} event (or calling the button's
    /// {@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the
    /// button displays the dropdown menu just like a normal SplitButton.  Example usage:
    /// <pre><code>
    /// var btn = new Ext.CycleButton({
    /// showText: true,
    /// prependText: 'View as ',
    /// items: [{
    /// text:'text only',
    /// iconCls:'view-text',
    /// checked:true
    /// },{
    /// text:'HTML',
    /// iconCls:'view-html'
    /// }],
    /// changeHandler:function(btn, item){
    /// Ext.Msg.alert('Change View', item.text);
    /// }
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new split button
    /// @param {Object} config The config object
    /// @xtype cycle
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CycleButton : Ext.SplitButton
    {
        public CycleButton(SplitButtonConfig config) : base(null) { }
        public void checkHandler(object item, object pressed) { }
        /// <summary>
        /// Gets the currently active menu item.
        /// @return {Ext.menu.CheckItem} The active item
        /// </summary>
        public CheckItem getActiveItem() { return null; }
        public void getItemText(object item) { }
        public new void initComponent() { }
        /// <summary>
        /// Sets the button's active menu item.
        /// @param {Ext.menu.CheckItem} item The item to activate
        /// @param {Boolean} suppressEvent True to prevent the button's change event from firing (defaults to false)
        /// </summary>
        public void setActiveItem(CheckItem item, bool suppressEvent) { }
        /// <summary>
        /// This is normally called internally on button click, but can be called externally to advance the button's
        /// active item programmatically to the next one in the menu.  If the current item is the last one in the menu
        /// the active item will be set to the first item in the menu.
        /// </summary>
        public void toggleSelected() { }
    }
    #endregion
    #region DataView
    /// <summary>
    /// @class Ext.DataView
    /// @extends Ext.BoxComponent
    /// A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}
    /// as its internal templating mechanism, and is bound to an {@link Ext.data.Store}
    /// so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
    /// provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
    /// mouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}
    /// config must be provided for the DataView to determine what nodes it will be working with.</b>
    /// *
    /// <p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>
    /// <pre><code>
    /// var store = new Ext.data.JsonStore({
    /// url: 'get-images.php',
    /// root: 'images',
    /// fields: [
    /// 'name', 'url',
    /// {name:'size', type: 'float'},
    /// {name:'lastmod', type:'date', dateFormat:'timestamp'}
    /// ]
    /// });
    /// store.load();
    /// var tpl = new Ext.XTemplate(
    /// '&lt;tpl for="."&gt;',
    /// '&lt;div class="thumb-wrap" id="{name}"&gt;',
    /// '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
    /// '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;div class="x-clear"&gt;&lt;/div&gt;'
    /// );
    /// var panel = new Ext.Panel({
    /// id:'images-view',
    /// frame:true,
    /// width:535,
    /// autoHeight:true,
    /// collapsible:true,
    /// layout:'fit',
    /// title:'Simple DataView',
    /// items: new Ext.DataView({
    /// store: store,
    /// tpl: tpl,
    /// autoHeight:true,
    /// multiSelect: true,
    /// overClass:'x-view-over',
    /// itemSelector:'div.thumb-wrap',
    /// emptyText: 'No images to display'
    /// })
    /// });
    /// panel.render(document.body);
    /// </code></pre>
    /// @constructor
    /// Create a new DataView
    /// @param {Object} config The config object
    /// @xtype dataview
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DataView : Ext.BoxComponent
    {
        public new void afterRender() { }
        /// <summary>
        /// Changes the data store bound to this view and refreshes it.
        /// @param {Store} store The store to bind to this view
        /// </summary>
        public void bindStore(object store, object initial) { }
        public void bufferRender(object records, object index) { }
        /// <summary>
        /// Clears all selections.
        /// @param {Boolean} suppressEvent (optional) True to skip firing of the selectionchange event
        /// </summary>
        public void clearSelections(bool suppressEvent, object skipUpdate) { }
        /// <summary>
        /// <p>Function which can be overridden which returns the data object passed to this
        /// DataView's {@link #tpl template} to render the whole DataView.</p>
        /// <p>This is usually an Array of data objects, each element of which is processed by an
        /// {@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
        /// data object as an Array. However, <i>named</i> properties may be placed into the data object to
        /// provide non-repeating data such as headings, totals etc.</p>
        /// @param {Array} records An Array of {@link Ext.data.Record}s to be rendered into the DataView.
        /// @param {Number} startIndex the index number of the Record being prepared for rendering.
        /// @return {Array} An Array of data objects to be processed by a repeating XTemplate. May also
        /// contain <i>named</i> properties.
        /// </summary>
        public JsArray collectData(JsArray records, JsNumber startIndex) { return null; }
        /// <summary>
        /// Deselects a node.
        /// @param {HTMLElement/Number/Record} node The node, node index or record to deselect
        /// </summary>
        public void deselect(object node) { }
        public void doMultiSelection(object item, object index, object e) { }
        public void doSingleSelection(object item, object index, object e) { }
        /// <summary>
        /// Returns the template node the passed child belongs to, or null if it doesn't belong to one.
        /// @param {HTMLElement} node
        /// @return {HTMLElement} The template node
        /// </summary>
        public HtmlElement findItemFromChild(object node) { return null; }
        /// <summary>
        /// Gets a template node.
        /// @param {HTMLElement/String/Number/Ext.data.Record} nodeInfo An HTMLElement template node, index of a template node,
        /// the id of a template node or the record associated with the node.
        /// @return {HTMLElement} The node or null if it wasn't found
        /// </summary>
        public HtmlElement getNode(object nodeInfo) { return null; }
        /// <summary>
        /// Gets a range nodes.
        /// @param {Number} start (optional) The index of the first node in the range
        /// @param {Number} end (optional) The index of the last node in the range
        /// @return {Array} An array of nodes
        /// </summary>
        public JsArray getNodes(JsNumber start, JsNumber end) { return null; }
        /// <summary>
        /// Gets a record from a node
        /// @param {HTMLElement} node The node to evaluate
        /// @return {Record} record The {@link Ext.data.Record} object
        /// </summary>
        public void getRecord(HtmlElement node) { }
        /// <summary>
        /// Gets an array of the records from an array of nodes
        /// @param {Array} nodes The nodes to evaluate
        /// @return {Array} records The {@link Ext.data.Record} objects
        /// </summary>
        public JsArray getRecords(JsArray nodes) { return null; }
        /// <summary>
        /// Gets the indexes of the selected nodes.
        /// @return {Array} An array of numeric indexes
        /// </summary>
        public JsArray getSelectedIndexes() { return null; }
        /// <summary>
        /// Gets the currently selected nodes.
        /// @return {Array} An array of HTMLElements
        /// </summary>
        public JsArray getSelectedNodes() { return null; }
        /// <summary>
        /// Gets an array of the selected records
        /// @return {Array} An array of {@link Ext.data.Record} objects
        /// </summary>
        public JsArray getSelectedRecords() { return null; }
        /// <summary>
        /// Gets the number of selected nodes.
        /// @return {Number} The node count
        /// </summary>
        public JsNumber getSelectionCount() { return null; }
        /// <summary>
        /// Returns the store associated with this DataView.
        /// @return {Ext.data.Store} The store
        /// </summary>
        public Store getStore() { return null; }
        public void getTemplateTarget() { }
        /// <summary>
        /// Finds the index of the passed node.
        /// @param {HTMLElement/String/Number/Record} nodeInfo An HTMLElement template node, index of a template node, the id of a template node
        /// or a record associated with a node.
        /// @return {Number} The index of the node or -1
        /// </summary>
        public JsNumber indexOf(object node) { return null; }
        public new void initComponent() { }
        /// <summary>
        /// Returns true if the passed node is selected, else false.
        /// @param {HTMLElement/Number/Ext.data.Record} node The node, node index or record to check
        /// @return {Boolean} True if selected, else false
        /// </summary>
        public bool isSelected(object node) { return false; }
        public void onAdd(object ds, object records, object index) { }
        public void onBeforeLoad() { }
        public void onClick(object e) { }
        public void onContainerClick(object e) { }
        public void onContextMenu(object e) { }
        /// <summary>
        /// @private
        /// Calls this.refresh if this.blockRefresh is not true
        /// </summary>
        public void onDataChanged() { }
        public void onDblClick(object e) { }
        public void onDestroy() { }
        public void onItemClick(object item, object index, object e) { }
        public void onMouseOut(object e) { }
        public void onMouseOver(object e) { }
        public void onRemove(object ds, object record, object index) { }
        public void onUpdate(object ds, object record) { }
        /// <summary>
        /// Function which can be overridden to provide custom formatting for each Record that is used by this
        /// DataView's {@link #tpl template} to render each node.
        /// @param {Array/Object} data The raw data object that was used to create the Record.
        /// @param {Number} recordIndex the index number of the Record being prepared for rendering.
        /// @param {Record} record The Record being prepared for rendering.
        /// @return {Array/Object} The formatted data in a format expected by the internal {@link #tpl template}'s overwrite() method.
        /// (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
        /// </summary>
        public object prepareData(object data) { return null; }
        /// <summary>
        /// Refreshes the view by reloading the data from the store and re-rendering the template.
        /// </summary>
        public void refresh() { }
        /// <summary>
        /// Refreshes an individual node's data from the store.
        /// @param {Number} index The item's data index in the store
        /// </summary>
        public void refreshNode(JsNumber index) { }
        /// <summary>
        /// Selects a set of nodes.
        /// @param {Array/HTMLElement/String/Number/Ext.data.Record} nodeInfo An HTMLElement template node, index of a template node,
        /// id of a template node, record associated with a node or an array of any of those to select
        /// @param {Boolean} keepExisting (optional) true to keep existing selections
        /// @param {Boolean} suppressEvent (optional) true to skip firing of the selectionchange vent
        /// </summary>
        public void select(object nodeInfo, bool keepExisting, bool suppressEvent) { }
        /// <summary>
        /// Selects a range of nodes. All nodes between start and end are selected.
        /// @param {Number} start The index of the first node in the range
        /// @param {Number} end The index of the last node in the range
        /// @param {Boolean} keepExisting (optional) True to retain existing selections
        /// </summary>
        public void selectRange(JsNumber start, JsNumber end, bool keepExisting) { }
        public void updateIndexes(object startIndex, object endIndex) { }
        /// <summary>
        /// @cfg {Boolean} blockRefresh Set this to true to ignore datachanged events on the bound store. This is useful if
        /// you wish to provide custom transition animations via a plugin (defaults to false)
        /// </summary>
        public bool blockRefresh { get; set; }
        /// <summary>
        /// @cfg {Boolean} deferEmptyText True to defer emptyText being applied until the store's first load
        /// </summary>
        public bool deferEmptyText { get; set; }
        /// <summary>
        /// @cfg {String} emptyText
        /// The text to display in the view when there is no data to display (defaults to '').
        /// </summary>
        public JsString emptyText { get; set; }
        public bool last { get; set; }
        /// <summary>
        /// @cfg {String} selectedClass
        /// A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
        /// </summary>
        public JsString selectedClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} trackOver True to enable mouseenter and mouseleave events
        /// </summary>
        public bool trackOver { get; set; }
    }
    #endregion
    #region DatePicker
    /// <summary>
    /// @class Ext.DatePicker
    /// @extends Ext.Component
    /// <p>A popup date picker. This class is used by the {@link Ext.form.DateField DateField} class
    /// to allow browsing and selection of valid dates.</p>
    /// <p>All the string values documented below may be overridden by including an Ext locale file in
    /// your page.</p>
    /// @constructor
    /// Create a new DatePicker
    /// @param {Object} config The config object
    /// @xtype datepicker
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DatePicker : Ext.BoxComponent
    {
        public void beforeDestroy() { }
        public void createMonthPicker() { }
        public void doDisabled(object disabled) { }
        public void focus() { }
        /// <summary>
        /// Gets the current selected value of the date field
        /// @return {Date} The selected date
        /// </summary>
        public JsDate getValue() { return null; }
        public void handleDateClick(object e, object t) { }
        public void handleMouseWheel(object e) { }
        public void hideMonthPicker(object disableAnim) { }
        public new void initComponent() { }
        public void initDisabledDays() { }
        public void onDisable() { }
        public void onEnable(object initial) { }
        public void onMonthClick(object e, object t) { }
        public void onMonthDblClick(object e, object t) { }
        public void onRender(object container, object position) { }
        public void selectMPMonth(object m) { }
        public void selectToday() { }
        /// <summary>
        /// Replaces any existing disabled dates with new values and refreshes the DatePicker.
        /// @param {Array/RegExp} disabledDates An array of date strings (see the {@link #disabledDates} config
        /// for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.
        /// </summary>
        public void setDisabledDates(object dd) { }
        /// <summary>
        /// Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
        /// @param {Array} disabledDays An array of disabled day indexes. See the {@link #disabledDays} config
        /// for details on supported values.
        /// </summary>
        public void setDisabledDays(object dd) { }
        /// <summary>
        /// Replaces any existing {@link #maxDate} with the new value and refreshes the DatePicker.
        /// @param {Date} value The maximum date that can be selected
        /// </summary>
        public void setMaxDate(object dt) { }
        /// <summary>
        /// Replaces any existing {@link #minDate} with the new value and refreshes the DatePicker.
        /// @param {Date} value The minimum date that can be selected
        /// </summary>
        public void setMinDate(object dt) { }
        /// <summary>
        /// Sets the value of the date field
        /// @param {Date} value The date to set
        /// </summary>
        public void setValue(JsDate value) { }
        public void showMonthPicker() { }
        public void showNextMonth(object e) { }
        public void showNextYear() { }
        public void showPrevMonth(object e) { }
        public void showPrevYear() { }
        public void update(object date, object forceRefresh) { }
        public void updateMPMonth(object sm) { }
        public void updateMPYear(object y) { }
        /// <summary>
        /// @cfg {String} cancelText
        /// The text to display on the cancel button (defaults to <code>'Cancel'</code>)
        /// </summary>
        public JsString cancelText { get; set; }
        /// <summary>
        /// @cfg {String} disabledDatesText
        /// The tooltip text to display when the date falls on a disabled date (defaults to <code>'Disabled'</code>)
        /// </summary>
        public JsString disabledDatesText { get; set; }
        /// <summary>
        /// @cfg {String} disabledDaysText
        /// The tooltip to display when the date falls on a disabled day (defaults to <code>'Disabled'</code>)
        /// </summary>
        public JsString disabledDaysText { get; set; }
        public bool focusOnSelect { get; set; }
        /// <summary>
        /// @cfg {String} format
        /// The default date format string which can be overriden for localization support.  The format must be
        /// valid according to {@link Date#parseDate} (defaults to <code>'m/d/y'</code>).
        /// </summary>
        public JsString format { get; set; }
        public object initHour { get; set; }
        /// <summary>
        /// @cfg {String} maxText
        /// The error text to display if the maxDate validation fails (defaults to <code>'This date is after the maximum date'</code>)
        /// </summary>
        public JsString maxText { get; set; }
        /// <summary>
        /// @cfg {String} minText
        /// The error text to display if the minDate validation fails (defaults to <code>'This date is before the minimum date'</code>)
        /// </summary>
        public JsString minText { get; set; }
        /// <summary>
        /// @cfg {String} monthYearText
        /// The header month selector tooltip (defaults to <code>'Choose a month (Control+Up/Down to move years)'</code>)
        /// </summary>
        public JsString monthYearText { get; set; }
        /// <summary>
        /// @cfg {String} nextText
        /// The next month navigation button tooltip (defaults to <code>'Next Month (Control+Right)'</code>)
        /// </summary>
        public JsString nextText { get; set; }
        /// <summary>
        /// @cfg {String} okText
        /// The text to display on the ok button (defaults to <code>'&#160;OK&#160;'</code> to give the user extra clicking room)
        /// </summary>
        public JsString okText { get; set; }
        /// <summary>
        /// @cfg {String} prevText
        /// The previous month navigation button tooltip (defaults to <code>'Previous Month (Control+Left)'</code>)
        /// </summary>
        public JsString prevText { get; set; }
        /// <summary>
        /// @cfg {Boolean} showToday
        /// False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
        /// that selects the current date (defaults to <code>true</code>).
        /// </summary>
        public bool showToday { get; set; }
        /// <summary>
        /// @cfg {Number} startDay
        /// Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
        /// </summary>
        public object startDay { get; set; }
        /// <summary>
        /// @cfg {String} todayText
        /// The text to display on the button that selects the current date (defaults to <code>'Today'</code>)
        /// </summary>
        public JsString todayText { get; set; }
        /// <summary>
        /// @cfg {String} todayTip
        /// A string used to format the message for displaying in a tooltip over the button that
        /// selects the current date. Defaults to <code>'{0} (Spacebar)'</code> where
        /// the <code>{0}</code> token is replaced by today's date.
        /// </summary>
        public JsString todayTip { get; set; }
    }
    #endregion
    #region Direct
    /// <summary>
    /// @class Ext.Direct
    /// @extends Ext.util.Observable
    /// <p><b><u>Overview</u></b></p>
    /// *
    /// <p>Ext.Direct aims to streamline communication between the client and server
    /// by providing a single interface that reduces the amount of common code
    /// typically required to validate data and handle returned data packets
    /// (reading data, error conditions, etc).</p>
    /// *
    /// <p>The Ext.direct namespace includes several classes for a closer integration
    /// with the server-side. The Ext.data namespace also includes classes for working
    /// with Ext.data.Stores which are backed by data from an Ext.Direct method.</p>
    /// *
    /// <p><b><u>Specification</u></b></p>
    /// *
    /// <p>For additional information consult the
    /// <a href="http://extjs.com/products/extjs/direct.php">Ext.Direct Specification</a>.</p>
    /// *
    /// <p><b><u>Providers</u></b></p>
    /// *
    /// <p>Ext.Direct uses a provider architecture, where one or more providers are
    /// used to transport data to and from the server. There are several providers
    /// that exist in the core at the moment:</p><div class="mdetail-params"><ul>
    /// *
    /// <li>{@link Ext.direct.JsonProvider JsonProvider} for simple JSON operations</li>
    /// <li>{@link Ext.direct.PollingProvider PollingProvider} for repeated requests</li>
    /// <li>{@link Ext.direct.RemotingProvider RemotingProvider} exposes server side
    /// on the client.</li>
    /// </ul></div>
    /// *
    /// <p>A provider does not need to be invoked directly, providers are added via
    /// {@link Ext.Direct}.{@link Ext.Direct#add add}.</p>
    /// *
    /// <p><b><u>Router</u></b></p>
    /// *
    /// <p>Ext.Direct utilizes a "router" on the server to direct requests from the client
    /// to the appropriate server-side method. Because the Ext.Direct API is completely
    /// platform-agnostic, you could completely swap out a Java based server solution
    /// and replace it with one that uses C# without changing the client side JavaScript
    /// at all.</p>
    /// *
    /// <p><b><u>Server side events</u></b></p>
    /// *
    /// <p>Custom events from the server may be handled by the client by adding
    /// listeners, for example:</p>
    /// <pre><code>
    /// {"type":"event","name":"message","data":"Successfully polled at: 11:19:30 am"}
    /// // add a handler for a 'message' event sent by the server
    /// Ext.Direct.on('message', function(e){
    /// out.append(String.format('&lt;p>&lt;i>{0}&lt;/i>&lt;/p>', e.data));
    /// out.el.scrollTo('t', 100000, true);
    /// });
    /// </code></pre>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Direct : Ext.util.Observable
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class eventTypes
        {
        }
        [JsType(JsMode.Prototype, Export = false)]
        public partial class ExceptionEvent : RemotingEvent
        {
            public bool status { get; set; }
            public new JsString type { get; set; }
        }
        [JsType(JsMode.Prototype, Export = false)]
        public partial class PROVIDERS
        {
        }
        [JsType(JsMode.Prototype, Export = false)]
        public partial class RemotingEvent
        {
            public void getTransaction() { }
            public JsString type { get; set; }
        }
        /// <summary>
        /// Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods.
        /// If the provider is not already connected, it will auto-connect.
        /// <pre><code>
        /// var pollProv = new Ext.direct.PollingProvider({
        /// url: 'php/poll2.php'
        /// });
        /// Ext.Direct.addProvider(
        /// {
        /// "type":"remoting",       // create a {@link Ext.direct.RemotingProvider}
        /// "url":"php\/router.php", // url to connect to the Ext.Direct server-side router.
        /// "actions":{              // each property within the actions object represents a Class
        /// "TestAction":[       // array of methods within each server side Class
        /// {
        /// "name":"doEcho", // name of method
        /// "len":1
        /// },{
        /// "name":"multiply",
        /// "len":1
        /// },{
        /// "name":"doForm",
        /// "formHandler":true, // handle form on server with Ext.Direct.Transaction
        /// "len":1
        /// }]
        /// },
        /// "namespace":"myApplication",// namespace to create the Remoting Provider in
        /// },{
        /// type: 'polling', // create a {@link Ext.direct.PollingProvider}
        /// url:  'php/poll.php'
        /// },
        /// pollProv // reference to previously created instance
        /// );
        /// </code></pre>
        /// @param {Object/Array} provider Accepts either an Array of Provider descriptions (an instance
        /// or config object for a Provider) or any number of Provider descriptions as arguments.  Each
        /// Provider description instructs Ext.Direct how to create client-side stub methods.
        /// </summary>
        public void addProvider(object provider) { }
        public void addTransaction(object t) { }
        public Direct() { }
        public void createEvent(object response, object extraProps) { }
        /// <summary>
        /// Retrieve a {@link Ext.direct.Provider provider} by the
        /// <b><tt>{@link Ext.direct.Provider#id id}</tt></b> specified when the provider is
        /// {@link #addProvider added}.
        /// @param {String} id Unique identifier assigned to the provider when calling {@link #addProvider}
        /// </summary>
        public void getProvider(JsString id) { }
        public void getTransaction(object tid) { }
        public void onProviderData(object provider, object e) { }
        public void removeProvider(object id) { }
        public void removeTransaction(object t) { }
    }
    #endregion
    #region Editor
    /// <summary>
    /// @class Ext.Editor
    /// @extends Ext.Component
    /// A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
    /// @constructor
    /// Create a new Editor
    /// @param {Object} config The config object
    /// @xtype editor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Editor
    {
        public Editor() { }
        /// <summary>
        /// @class Ext.Editor
        /// @extends Ext.Component
        /// A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
        /// @constructor
        /// Create a new Editor
        /// @param {Object} config The config object
        /// @xtype editor
        /// </summary>
        public Editor(object field, JsObject config) { }
    }
    #endregion
    #region Element
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Element
    {
        public Element() { }
        /// <summary>
        /// Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
        /// @param {String/Array} className The CSS class to add, or an array of classes
        /// @return {Ext.Element} this
        /// </summary>
        public Element addClass(object className) { return null; }
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
        /// @param {String} className
        /// @return {Ext.Element} this
        /// </summary>
        public Element addClassOnClick(object className) { return null; }
        /// <summary>
        /// Sets up event handlers to add and remove a css class when this element has the focus
        /// @param {String} className
        /// @return {Ext.Element} this
        /// </summary>
        public Element addClassOnFocus(object className) { return null; }
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is over this element
        /// @param {String} className
        /// @return {Ext.Element} this
        /// </summary>
        public Element addClassOnOver(object className) { return null; }
        /// <summary>
        /// Convenience method for constructing a KeyMap
        /// @param {Number/Array/Object/String} key Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
        /// <code>{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</code>
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the specified function is executed. Defaults to this Element.
        /// @return {Ext.KeyMap} The KeyMap created
        /// </summary>
        public KeyMap addKeyListener(object key, JsAction fn, JsObject scope) { return null; }
        /// <summary>
        /// Creates a KeyMap for this element
        /// @param {Object} config The KeyMap config. See {@link Ext.KeyMap} for more details
        /// @return {Ext.KeyMap} The KeyMap created
        /// </summary>
        public KeyMap addKeyMap(JsObject config) { return null; }
        /// <summary>
        /// Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.
        /// @param {String} eventName The name of event to handle.
        /// @param {Function} fn The handler function the event invokes. This function is passed
        /// the following parameters:<ul>
        /// <li><b>evt</b> : EventObject<div class="sub-desc">The {@link Ext.EventObject EventObject} describing the event.</div></li>
        /// <li><b>el</b> : HtmlElement<div class="sub-desc">The DOM element which was the target of the event.
        /// Note that this may be filtered by using the <tt>delegate</tt> option.</div></li>
        /// <li><b>o</b> : Object<div class="sub-desc">The options object from the addListener call.</div></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to this Element.</b>.
        /// @param {Object} options (optional) An object containing handler configuration properties.
        /// This may contain any of the following properties:<ul>
        /// <li><b>scope</b> Object : <div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to this Element.</b></div></li>
        /// <li><b>delegate</b> String: <div class="sub-desc">A simple selector to filter the target or look for a descendant of the target. See below for additional details.</div></li>
        /// <li><b>stopEvent</b> Boolean: <div class="sub-desc">True to stop the event. That is stop propagation, and prevent the default action.</div></li>
        /// <li><b>preventDefault</b> Boolean: <div class="sub-desc">True to prevent the default action</div></li>
        /// <li><b>stopPropagation</b> Boolean: <div class="sub-desc">True to prevent event propagation</div></li>
        /// <li><b>normalized</b> Boolean: <div class="sub-desc">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>
        /// <li><b>target</b> Ext.Element: <div class="sub-desc">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>
        /// <li><b>delay</b> Number: <div class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>
        /// <li><b>single</b> Boolean: <div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
        /// <li><b>buffer</b> Number: <div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
        /// by the specified number of milliseconds. If the event fires again within that time, the original
        /// handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
        /// </ul><br>
        /// <p>
        /// <b>Combining Options</b><br>
        /// In the following examples, the shorthand form {@link #on} is used rather than the more verbose
        /// addListener.  The two are equivalent.  Using the options argument, it is possible to combine different
        /// types of listeners:<br>
        /// <br>
        /// A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the
        /// options object. The options object is available as the third parameter in the handler function.<div style="margin: 5px 20px 20px;">
        /// Code:<pre><code>
        /// el.on('click', this.onClick, this, {
        /// single: true,
        /// delay: 100,
        /// stopEvent : true,
        /// forumId: 4
        /// });</code></pre></p>
        /// <p>
        /// <b>Attaching multiple handlers in 1 call</b><br>
        /// The method also allows for a single argument to be passed which is a config object containing properties
        /// which specify multiple handlers.</p>
        /// <p>
        /// Code:<pre><code>
        /// el.on({
        /// 'click' : {
        /// fn: this.onClick,
        /// scope: this,
        /// delay: 100
        /// },
        /// 'mouseover' : {
        /// fn: this.onMouseOver,
        /// scope: this
        /// },
        /// 'mouseout' : {
        /// fn: this.onMouseOut,
        /// scope: this
        /// }
        /// });</code></pre>
        /// <p>
        /// Or a shorthand syntax:<br>
        /// Code:<pre><code></p>
        /// el.on({
        /// 'click' : this.onClick,
        /// 'mouseover' : this.onMouseOver,
        /// 'mouseout' : this.onMouseOut,
        /// scope: this
        /// });
        /// </code></pre></p>
        /// <p><b>delegate</b></p>
        /// <p>This is a configuration option that you can pass along when registering a handler for
        /// an event to assist with event delegation. Event delegation is a technique that is used to
        /// reduce memory consumption and prevent exposure to memory-leaks. By registering an event
        /// for a container element as opposed to each element within a container. By setting this
        /// configuration option to a simple selector, the target element will be filtered to look for
        /// a descendant of the target.
        /// For example:<pre><code>
        /// // using this markup:
        /// &lt;div id='elId'>
        /// &lt;p id='p1'>paragraph one&lt;/p>
        /// &lt;p id='p2' class='clickable'>paragraph two&lt;/p>
        /// &lt;p id='p3'>paragraph three&lt;/p>
        /// &lt;/div>
        /// // utilize event delegation to registering just one handler on the container element:
        /// el = Ext.get('elId');
        /// el.on(
        /// 'click',
        /// function(e,t) {
        /// // handle click
        /// console.info(t.id); // 'p2'
        /// },
        /// this,
        /// {
        /// // filter the target element to be a descendant with the class 'clickable'
        /// delegate: '.clickable'
        /// }
        /// );
        /// </code></pre></p>
        /// @return {Ext.Element} this
        /// </summary>
        public Element addListener(JsString eventName, JsAction fn, JsObject scope, JsObject options) { return null; }
        public static void addMethods(object o) { }
        public void addStyles(object sides, object styles) { }
        public static void addToCache(object el, object id) { }
        /// <summary>
        /// @private Test if size has a unit, otherwise appends the default
        /// </summary>
        public void addUnits(object size) { }
        public void adjustForConstraints(object xy, object parent, object offsets) { }
        public void adjustHeight(object height) { }
        public void adjustWidth(object width) { }
        /// <summary>
        /// Aligns this element with another element relative to the specified anchor points. If the other element is the
        /// document it aligns it to the viewport.
        /// The position parameter is optional, and can be specified in any one of the following formats:
        /// <ul>
        /// <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").</li>
        /// <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.
        /// The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been
        /// deprecated in favor of the newer two anchor syntax below</i>.</li>
        /// <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the
        /// element's anchor point, and the second value is used as the target's anchor point.</li>
        /// </ul>
        /// In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
        /// the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
        /// the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
        /// that specified in order to enforce the viewport constraints.
        /// Following are all of the supported anchor positions:
        /// <pre>
        /// Value  Description
        /// -----  -----------------------------
        /// tl     The top left corner (default)
        /// t      The center of the top edge
        /// tr     The top right corner
        /// l      The center of the left edge
        /// c      In the center of the element
        /// r      The center of the right edge
        /// bl     The bottom left corner
        /// b      The center of the bottom edge
        /// br     The bottom right corner
        /// </pre>
        /// Example Usage:
        /// <pre><code>
        /// // align el to other-el using the default positioning ("tl-bl", non-constrained)
        /// el.alignTo("other-el");
        /// // align the top left corner of el with the top right corner of other-el (constrained to viewport)
        /// el.alignTo("other-el", "tr?");
        /// // align the bottom right corner of el with the center left edge of other-el
        /// el.alignTo("other-el", "br-l?");
        /// // align the center of el with the bottom left corner of other-el and
        /// // adjust the x position by -6 pixels (and the y position by 0)
        /// el.alignTo("other-el", "c-bl", [-6, 0]);
        /// </code></pre>
        /// @param {Mixed} element The element to align to.
        /// @param {String} position (optional, defaults to "tl-bl?") The position to align to.
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element alignTo(object element, JsString position, JsArray offsets, object animate) { return null; }
        /// <summary>
        /// Anchors an element to another element and realigns it when the window is resized.
        /// @param {Mixed} element The element to align to.
        /// @param {String} position The position to align to.
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @param {Boolean/Object} animate (optional) True for the default animation or a standard Element animation config object
        /// @param {Boolean/Number} monitorScroll (optional) True to monitor body scroll and reposition. If this parameter
        /// is a number, it is used as the buffer delay (defaults to 50ms).
        /// @param {Function} callback The function to call after the animation finishes
        /// @return {Ext.Element} this
        /// </summary>
        public Element anchorTo(object el, object alignment, JsArray offsets, object animate, object monitorScroll, JsAction callback) { return null; }
        /// <summary>
        /// Perform custom animation on this element.
        /// <div><ul class="mdetail-params">
        /// <li><u>Animation Properties</u></li>
        /// *
        /// <p>The Animation Control Object enables gradual transitions for any member of an
        /// element's style object that takes a numeric value including but not limited to
        /// these properties:</p><div><ul class="mdetail-params">
        /// <li><tt>bottom, top, left, right</tt></li>
        /// <li><tt>height, width</tt></li>
        /// <li><tt>margin, padding</tt></li>
        /// <li><tt>borderWidth</tt></li>
        /// <li><tt>opacity</tt></li>
        /// <li><tt>fontSize</tt></li>
        /// <li><tt>lineHeight</tt></li>
        /// </ul></div>
        /// *
        /// *
        /// <li><u>Animation Property Attributes</u></li>
        /// *
        /// <p>Each Animation Property is a config object with optional properties:</p>
        /// <div><ul class="mdetail-params">
        /// <li><tt>by</tt>*  : relative change - start at current value, change by this value</li>
        /// <li><tt>from</tt> : ignore current value, start from this value</li>
        /// <li><tt>to</tt>*  : start at current value, go to this value</li>
        /// <li><tt>unit</tt> : any allowable unit specification</li>
        /// <p>* do not specify both <tt>to</tt> and <tt>by</tt> for an animation property</p>
        /// </ul></div>
        /// *
        /// <li><u>Animation Types</u></li>
        /// *
        /// <p>The supported animation types:</p><div><ul class="mdetail-params">
        /// <li><tt>'run'</tt> : Default
        /// <pre><code>
        /// var el = Ext.get('complexEl');
        /// el.animate(
        /// // animation control object
        /// {
        /// borderWidth: {to: 3, from: 0},
        /// opacity: {to: .3, from: 1},
        /// height: {to: 50, from: el.getHeight()},
        /// width: {to: 300, from: el.getWidth()},
        /// top  : {by: - 100, unit: 'px'},
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'run'      // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// <li><tt>'color'</tt>
        /// <p>Animates transition of background, text, or border colors.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// color: { to: '#06e' },
        /// backgroundColor: { to: '#e06' }
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'color'    // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// *
        /// <li><tt>'motion'</tt>
        /// <p>Animates the motion of an element to/from specific points using optional bezier
        /// way points during transit.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// borderWidth: {to: 3, from: 0},
        /// opacity: {to: .3, from: 1},
        /// height: {to: 50, from: el.getHeight()},
        /// width: {to: 300, from: el.getWidth()},
        /// top  : {by: - 100, unit: 'px'},
        /// points: {
        /// to: [50, 100],  // go to this point
        /// control: [      // optional bezier way points
        /// [ 600, 800],
        /// [-100, 200]
        /// ]
        /// }
        /// },
        /// 3000,      // animation duration (milliseconds!)
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'motion'   // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// <li><tt>'scroll'</tt>
        /// <p>Animate horizontal or vertical scrolling of an overflowing page element.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// scroll: {to: [400, 300]}
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'scroll'   // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// </ul></div>
        /// *
        /// </ul></div>
        /// *
        /// @param {Object} args The animation control args
        /// @param {Float} duration (optional) How long the animation lasts in seconds (defaults to <tt>.35</tt>)
        /// @param {Function} onComplete (optional) Function to call when animation completes
        /// @param {String} easing (optional) {@link Ext.Fx#easing} method to use (defaults to <tt>'easeOut'</tt>)
        /// @param {String} animType (optional) <tt>'run'</tt> is the default. Can also be <tt>'color'</tt>,
        /// <tt>'motion'</tt>, or <tt>'scroll'</tt>
        /// @return {Ext.Element} this
        /// */
        /// animate : function(args, duration, onComplete, easing, animType){
        /// this.anim(args, {duration: duration, callback: onComplete, easing: easing}, animType);
        /// return this;
        /// },
        /// /*
        /// @private Internal animation call
        /// </summary>
        public Element anim(JsObject args, object opt, JsString animType, object defaultDur, object defaultEase, object cb) { return null; }
        /// <summary>
        /// Perform custom animation on this element.
        /// <div><ul class="mdetail-params">
        /// <li><u>Animation Properties</u></li>
        /// *
        /// <p>The Animation Control Object enables gradual transitions for any member of an
        /// element's style object that takes a numeric value including but not limited to
        /// these properties:</p><div><ul class="mdetail-params">
        /// <li><tt>bottom, top, left, right</tt></li>
        /// <li><tt>height, width</tt></li>
        /// <li><tt>margin, padding</tt></li>
        /// <li><tt>borderWidth</tt></li>
        /// <li><tt>opacity</tt></li>
        /// <li><tt>fontSize</tt></li>
        /// <li><tt>lineHeight</tt></li>
        /// </ul></div>
        /// *
        /// *
        /// <li><u>Animation Property Attributes</u></li>
        /// *
        /// <p>Each Animation Property is a config object with optional properties:</p>
        /// <div><ul class="mdetail-params">
        /// <li><tt>by</tt>*  : relative change - start at current value, change by this value</li>
        /// <li><tt>from</tt> : ignore current value, start from this value</li>
        /// <li><tt>to</tt>*  : start at current value, go to this value</li>
        /// <li><tt>unit</tt> : any allowable unit specification</li>
        /// <p>* do not specify both <tt>to</tt> and <tt>by</tt> for an animation property</p>
        /// </ul></div>
        /// *
        /// <li><u>Animation Types</u></li>
        /// *
        /// <p>The supported animation types:</p><div><ul class="mdetail-params">
        /// <li><tt>'run'</tt> : Default
        /// <pre><code>
        /// var el = Ext.get('complexEl');
        /// el.animate(
        /// // animation control object
        /// {
        /// borderWidth: {to: 3, from: 0},
        /// opacity: {to: .3, from: 1},
        /// height: {to: 50, from: el.getHeight()},
        /// width: {to: 300, from: el.getWidth()},
        /// top  : {by: - 100, unit: 'px'},
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'run'      // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// <li><tt>'color'</tt>
        /// <p>Animates transition of background, text, or border colors.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// color: { to: '#06e' },
        /// backgroundColor: { to: '#e06' }
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'color'    // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// *
        /// <li><tt>'motion'</tt>
        /// <p>Animates the motion of an element to/from specific points using optional bezier
        /// way points during transit.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// borderWidth: {to: 3, from: 0},
        /// opacity: {to: .3, from: 1},
        /// height: {to: 50, from: el.getHeight()},
        /// width: {to: 300, from: el.getWidth()},
        /// top  : {by: - 100, unit: 'px'},
        /// points: {
        /// to: [50, 100],  // go to this point
        /// control: [      // optional bezier way points
        /// [ 600, 800],
        /// [-100, 200]
        /// ]
        /// }
        /// },
        /// 3000,      // animation duration (milliseconds!)
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'motion'   // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// <li><tt>'scroll'</tt>
        /// <p>Animate horizontal or vertical scrolling of an overflowing page element.</p>
        /// <pre><code>
        /// el.animate(
        /// // animation control object
        /// {
        /// scroll: {to: [400, 300]}
        /// },
        /// 0.35,      // animation duration
        /// null,      // callback
        /// 'easeOut', // easing method
        /// 'scroll'   // animation type ('run','color','motion','scroll')
        /// );
        /// </code></pre>
        /// </li>
        /// </ul></div>
        /// *
        /// </ul></div>
        /// *
        /// @param {Object} args The animation control args
        /// @param {Float} duration (optional) How long the animation lasts in seconds (defaults to <tt>.35</tt>)
        /// @param {Function} onComplete (optional) Function to call when animation completes
        /// @param {String} easing (optional) {@link Ext.Fx#easing} method to use (defaults to <tt>'easeOut'</tt>)
        /// @param {String} animType (optional) <tt>'run'</tt> is the default. Can also be <tt>'color'</tt>,
        /// <tt>'motion'</tt>, or <tt>'scroll'</tt>
        /// @return {Ext.Element} this
        /// </summary>
        public Element animate(JsObject args, object duration, JsAction onComplete, JsString easing, JsString animType) { return null; }
        public void animTest(object args, object animate, object i) { }
        /// <summary>
        /// Appends the passed element(s) to this element
        /// @param {String/HTMLElement/Array/Element/CompositeElement} el
        /// @return {Ext.Element} this
        /// </summary>
        public Element appendChild(object el) { return null; }
        /// <summary>
        /// Appends this element to the passed element
        /// @param {Mixed} el The new parent element
        /// @return {Ext.Element} this
        /// </summary>
        public Element appendTo(object el) { return null; }
        /// <summary>
        /// More flexible version of {@link #setStyle} for setting style properties.
        /// @param {String/Object/Function} styles A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
        /// a function which returns such a specification.
        /// @return {Ext.Element} this
        /// </summary>
        public Element applyStyles(object style) { return null; }
        /// <summary>
        /// Tries to blur the element. Any exceptions are caught and ignored.
        /// @return {Ext.Element} this
        /// </summary>
        public Element blur() { return null; }
        /// <summary>
        /// <p>Wraps the specified element with a special 9 element markup/CSS block that renders by default as
        /// a gray container with a gradient background, rounded corners and a 4-way shadow.</p>
        /// <p>This special markup is used throughout Ext when box wrapping elements ({@link Ext.Button},
        /// {@link Ext.Panel} when <tt>{@link Ext.Panel#frame frame=true}</tt>, {@link Ext.Window}).  The markup
        /// is of this form:</p>
        /// <pre><code>
        /// Ext.Element.boxMarkup =
        /// &#39;&lt;div class="{0}-tl">&lt;div class="{0}-tr">&lt;div class="{0}-tc">&lt;/div>&lt;/div>&lt;/div>
        /// &lt;div class="{0}-ml">&lt;div class="{0}-mr">&lt;div class="{0}-mc">&lt;/div>&lt;/div>&lt;/div>
        /// &lt;div class="{0}-bl">&lt;div class="{0}-br">&lt;div class="{0}-bc">&lt;/div>&lt;/div>&lt;/div>&#39;;
        /// </code></pre>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// // Basic box wrap
        /// Ext.get("foo").boxWrap();
        /// // You can also add a custom class and use CSS inheritance rules to customize the box look.
        /// // 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
        /// // for how to create a custom box wrap style.
        /// Ext.get("foo").boxWrap().addClass("x-box-blue");
        /// </code></pre>
        /// @param {String} class (optional) A base CSS class to apply to the containing wrapper element
        /// (defaults to <tt>'x-box'</tt>). Note that there are a number of CSS rules that are dependent on
        /// this name to make the overall effect work, so if you supply an alternate base class, make sure you
        /// also supply all of the necessary rules.
        /// @return {Ext.Element} The outermost wrapping element of the created box structure.
        /// </summary>
        public Element boxWrap(object cls) { return null; }
        /// <summary>
        /// Centers the Element in either the viewport, or another Element.
        /// @param {Mixed} centerIn (optional) The element in which to center the element.
        /// </summary>
        public void center(object centerIn) { }
        /// <summary>
        /// Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
        /// </summary>
        public object child(JsString selector, bool returnDom) { return null; }
        /// <summary>
        /// Removes worthless text nodes
        /// @param {Boolean} forceReclean (optional) By default the element
        /// keeps track if it has been cleaned already so
        /// you can call this over and over. However, if you update the element and
        /// need to force a reclean, you can pass true.
        /// </summary>
        public void clean(bool forceReclean) { }
        /// <summary>
        /// Clears any opacity settings from this element. Required in some cases for IE.
        /// @return {Ext.Element} this
        /// </summary>
        public Element clearOpacity() { return null; }
        /// <summary>
        /// Clear positioning back to the default when the document was loaded
        /// @param {String} value (optional) The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.
        /// @return {Ext.Element} this
        /// </summary>
        public Element clearPositioning(JsString value) { return null; }
        /// <summary>
        /// Store the current overflow setting and clip overflow on the element - use <tt>{@link #unclip}</tt> to remove
        /// @return {Ext.Element} this
        /// </summary>
        public Element clip() { return null; }
        /// <summary>
        /// Returns true if this element is an ancestor of the passed element
        /// @param {HTMLElement/String} el The element to check
        /// @return {Boolean} True if this element is an ancestor of el, else false
        /// </summary>
        public bool contains(object el) { return false; }
        /// <summary>
        /// Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
        /// @param {Object} config DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
        /// automatically generated with the specified attributes.
        /// @param {HTMLElement} insertBefore (optional) a child element of this element
        /// @param {Boolean} returnDom (optional) true to return the dom node instead of creating an Element
        /// @return {Ext.Element} The new child element
        /// </summary>
        public Element createChild(JsObject config, HtmlElement insertBefore, bool returnDom) { return null; }
        /// <summary>
        /// Creates a proxy element of this element
        /// @param {String/Object} config The class name of the proxy element or a DomHelper config object
        /// @param {String/HTMLElement} renderTo (optional) The element or element id to render the proxy to (defaults to document.body)
        /// @param {Boolean} matchBox (optional) True to align and size the proxy to this element now (defaults to false)
        /// @return {Ext.Element} The new proxy element
        /// </summary>
        public Element createProxy(object config, object renderTo, bool matchBox) { return null; }
        /// <summary>
        /// Creates an iframe shim for this element to keep selects and other windowed objects from
        /// showing through.
        /// @return {Ext.Element} The new shim element
        /// </summary>
        public Element createShim() { return null; }
        public static void data(object el, object key, object value) { }
        /// <summary>
        /// Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
        /// </summary>
        public object down(JsString selector, bool returnDom) { return null; }
        public Element(object element, object forceNew) { }
        /// <summary>
        /// Convenience method for setVisibilityMode(Element.DISPLAY)
        /// @param {String} display (optional) What to set display to when visible
        /// @return {Ext.Element} this
        /// </summary>
        public Element enableDisplayMode(JsString display) { return null; }
        /// <summary>
        /// Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to search as a number or element (defaults to 50 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLElement} The matching DOM node (or null if no match was found)
        /// </summary>
        public HtmlElement findParent(object simpleSelector, object maxDepth, bool returnEl) { return null; }
        /// <summary>
        /// Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLElement} The matching DOM node (or null if no match was found)
        /// </summary>
        public HtmlElement findParentNode(object simpleSelector, object maxDepth, bool returnEl) { return null; }
        /// <summary>
        /// Gets the first child, skipping text nodes
        /// @param {String} selector (optional) Find the next sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The first child or null
        /// </summary>
        public object first(JsString selector, bool returnDom) { return null; }
        public void fixDisplay() { }
        /// <summary>
        /// <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
        /// the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
        /// <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
        /// application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
        /// will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
        /// @param {String/HTMLElement} el The dom node or id
        /// @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
        /// (e.g. internally Ext uses "_global")
        /// @return {Element} The shared Element object (or null if no matching element was found)
        /// @member Ext.Element
        /// @method fly
        /// </summary>
        public static Element fly(object el, JsString named) { return null; }
        public static void Flyweight(object dom) { }
        /// <summary>
        /// Tries to focus the element. Any exceptions are caught and ignored.
        /// @param {Number} defer (optional) Milliseconds to defer the focus
        /// @return {Ext.Element} this
        /// </summary>
        public Element focus(JsNumber defer, object dom) { return null; }
        /// <summary>
        /// Retrieves Ext.Element objects.
        /// <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
        /// retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
        /// its ID, use {@link Ext.ComponentMgr#get}.</p>
        /// <p>Uses simple caching to consistently return the same object. Automatically fixes if an
        /// object was recreated with the same id via AJAX or DOM.</p>
        /// @param {Mixed} el The id of the node, a DOM Node or an existing Element.
        /// @return {Element} The Element object (or null if no matching element was found)
        /// @static
        /// @member Ext.Element
        /// @method get
        /// </summary>
        public static Element get(object el) { return null; }
        /// <summary>
        /// Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
        /// supported position values.
        /// @param {Mixed} element The element to align to.
        /// @param {String} position (optional, defaults to "tl-bl?") The position to align to.
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @return {Array} [x, y]
        /// </summary>
        public JsArray getAlignToXY(object el, object p, object o) { return null; }
        public void getAnchor() { }
        /// <summary>
        /// Gets the x,y coordinates specified by the anchor position on the element.
        /// @param {String} anchor (optional) The specified anchor position (defaults to "c").  See {@link #alignTo}
        /// for details on supported anchor positions.
        /// @param {Boolean} local (optional) True to get the local (element top/left-relative) anchor position instead
        /// of page coordinates
        /// @param {Object} size (optional) An object containing the size to use for calculating anchor position
        /// {width: (target width), height: (target height)} (defaults to the element's current size)
        /// @return {Array} [x, y] An array containing the element's x and y coordinates
        /// </summary>
        public JsArray getAnchorXY(JsString anchor, bool local, object s) { return null; }
        /// <summary>
        /// Returns the value of a namespaced attribute from the element's underlying DOM node.
        /// @param {String} namespace The namespace in which to look for the attribute
        /// @param {String} name The attribute name
        /// @return {String} The attribute value
        /// @deprecated
        /// </summary>
        public JsString getAttributeNS(object ns, JsString name) { return null; }
        /// <summary>
        /// Gets the width of the border(s) for the specified side(s)
        /// @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
        /// passing <tt>'lr'</tt> would get the border <b><u>l</u></b>eft width + the border <b><u>r</u></b>ight width.
        /// @return {Number} The width of the sides passed added together
        /// </summary>
        public JsNumber getBorderWidth(JsString side) { return null; }
        /// <summary>
        /// Gets the bottom Y coordinate of the element (element Y position + element height)
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getBottom(bool local) { }
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to {@link #setBox} to
        /// set another Element's size/location to match this element.
        /// @param {Boolean} contentBox (optional) If true a box for the content of the element is returned.
        /// @param {Boolean} local (optional) If true the element's left and top are returned instead of page x/y.
        /// @return {Object} box An object in the format<pre><code>
        /// {
        /// x: &lt;Element's X position>,
        /// y: &lt;Element's Y position>,
        /// width: &lt;Element's width>,
        /// height: &lt;Element's height>,
        /// bottom: &lt;Element's lower bound>,
        /// right: &lt;Element's rightmost bound>
        /// }
        /// </code></pre>
        /// The returned object may also be addressed as an Array where index 0 contains the X position
        /// and index 1 contains the Y position. So the result may also be used for {@link #setXY}
        /// </summary>
        public JsObject getBox(bool contentBox, bool local) { return null; }
        /// <summary>
        /// Calculates the x, y to center this element on the screen
        /// @return {Array} The x, y values [x, y]
        /// </summary>
        public JsArray getCenterXY() { return null; }
        /// <summary>
        /// Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
        /// are convert to standard 6 digit hex color.
        /// @param {String} attr The css attribute
        /// @param {String} defaultValue The default value to use when a valid color isn't found
        /// @param {String} prefix (optional) defaults to #. Use an empty string when working with
        /// color anims.
        /// </summary>
        public void getColor(JsString attr, JsString defaultValue, JsString prefix) { }
        /// <summary>
        /// Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
        /// when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
        /// if a height has not been set using CSS.
        /// @return {Number}
        /// </summary>
        public void getComputedHeight() { }
        /// <summary>
        /// Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
        /// when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
        /// if a width has not been set using CSS.
        /// @return {Number}
        /// </summary>
        public void getComputedWidth() { }
        public void getConstrainOffset() { }
        /// <summary>
        /// Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
        /// for more information about the sides.
        /// @param {String} sides
        /// @return {Number}
        /// </summary>
        public void getFrameWidth(object sides, object onlyContentBox) { }
        /// <summary>
        /// Returns the offset height of the element
        /// @param {Boolean} contentHeight (optional) true to get the height minus borders and padding
        /// @return {Number} The element's height
        /// </summary>
        public JsNumber getHeight(bool contentHeight) { return null; }
        /// <summary>
        /// Gets the left X coordinate
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getLeft(bool local) { }
        /// <summary>
        /// Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
        /// then it returns the calculated width of the sides (see getPadding)
        /// @param {String} sides (optional) Any combination of l, r, t, b to get the sum of those sides
        /// @return {Object/Number}
        /// </summary>
        public void getMargins(object side) { }
        /// <summary>
        /// Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
        /// @param {Mixed} element The element to get the offsets from.
        /// @return {Array} The XY page offsets (e.g. [100, -200])
        /// </summary>
        public JsArray getOffsetsTo(object el) { return null; }
        /// <summary>
        /// Gets the width of the padding(s) for the specified side(s)
        /// @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
        /// passing <tt>'lr'</tt> would get the padding <b><u>l</u></b>eft + the padding <b><u>r</u></b>ight.
        /// @return {Number} The padding of the sides passed added together
        /// </summary>
        public JsNumber getPadding(JsString side) { return null; }
        /// <summary>
        /// Gets an object with all CSS positioning properties. Useful along with setPostioning to get
        /// snapshot before performing an update and then restoring the element.
        /// @return {Object}
        /// </summary>
        public void getPositioning() { }
        /// <summary>
        /// Returns the region of the given element.
        /// The element must be part of the DOM tree to have a region (display:none or elements not appended return false).
        /// @return {Region} A Ext.lib.Region containing "top, left, bottom, right" member data.
        /// </summary>
        public void getRegion() { }
        /// <summary>
        /// Gets the right X coordinate of the element (element X position + element width)
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getRight(bool local) { }
        /// <summary>
        /// Returns the current scroll position of the element.
        /// @return {Object} An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
        /// </summary>
        public JsObject getScroll() { return null; }
        /// <summary>
        /// Returns the size of the element.
        /// @param {Boolean} contentSize (optional) true to get the width/size minus borders and padding
        /// @return {Object} An object containing the element's size {width: (element width), height: (element height)}
        /// </summary>
        public JsObject getSize(bool contentSize) { return null; }
        /// <summary>
        /// Returns an object with properties matching the styles requested.
        /// For example, el.getStyles('color', 'font-size', 'width') might return
        /// {'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.
        /// @param {String} style1 A style name
        /// @param {String} style2 A style name
        /// @param {String} etc.
        /// @return {Object} The style object
        /// </summary>
        public JsObject getStyles() { return null; }
        public void getStyleSize() { }
        /// <summary>
        /// Returns the width in pixels of the passed text, or the width of the text in this Element.
        /// @param {String} text The text to measure. Defaults to the innerHTML of the element.
        /// @param {Number} min (Optional) The minumum value to return.
        /// @param {Number} max (Optional) The maximum value to return.
        /// @return {Number} The text width in pixels.
        /// @member Ext.Element getTextWidth
        /// </summary>
        public JsNumber getTextWidth(JsString text, JsNumber min, JsNumber max) { return null; }
        /// <summary>
        /// Gets the top Y coordinate
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getTop(bool local) { }
        /// <summary>
        /// Gets this element's {@link Ext.Updater Updater}
        /// @return {Ext.Updater} The Updater
        /// </summary>
        public Updater getUpdater() { return null; }
        /// <summary>
        /// Returns the value of the "value" attribute
        /// @param {Boolean} asNumber true to parse the value as a number
        /// @return {String/Number}
        /// </summary>
        public void getValue(bool asNumber) { }
        public void getViewSize() { }
        /// <summary>
        /// Returns the offset width of the element
        /// @param {Boolean} contentWidth (optional) true to get the width minus borders and padding
        /// @return {Number} The element's width
        /// </summary>
        public JsNumber getWidth(bool contentWidth) { return null; }
        /// <summary>
        /// Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Number} The X position of the element
        /// </summary>
        public JsNumber getX() { return null; }
        /// <summary>
        /// Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Array} The XY position of the element
        /// </summary>
        public JsArray getXY() { return null; }
        /// <summary>
        /// Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Number} The Y position of the element
        /// </summary>
        public JsNumber getY() { return null; }
        /// <summary>
        /// Checks if the specified CSS class exists on this element's DOM node.
        /// @param {String} className The CSS class to check for
        /// @return {Boolean} True if the class exists, else false
        /// </summary>
        public bool hasClass(JsString className) { return false; }
        /// <summary>
        /// @private
        /// Determine if the Element has a relevant height and width available based
        /// upon current logical visibility state
        /// </summary>
        public void hasMetrics() { }
        /// <summary>
        /// Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element hide(object animate) { return null; }
        /// <summary>
        /// Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
        /// @param {Function} overFn The function to call when the mouse enters the Element.
        /// @param {Function} outFn The function to call when the mouse leaves the Element.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the functions are executed. Defaults to the Element's DOM element.
        /// @param {Object} options (optional) Options for the listener. See {@link Ext.util.Observable#addListener the <tt>options</tt> parameter}.
        /// @return {Ext.Element} this
        /// </summary>
        public Element hover(JsAction overFn, JsAction outFn, JsObject scope, JsObject options) { return null; }
        /// <summary>
        /// Initializes a {@link Ext.dd.DD} drag drop object for this element.
        /// @param {String} group The group the DD object is member of
        /// @param {Object} config The DD config object
        /// @param {Object} overrides An object containing methods to override/implement on the DD object
        /// @return {Ext.dd.DD} The DD object
        /// </summary>
        public DD initDD(JsString group, JsObject config, JsObject overrides) { return null; }
        /// <summary>
        /// Initializes a {@link Ext.dd.DDProxy} object for this element.
        /// @param {String} group The group the DDProxy object is member of
        /// @param {Object} config The DDProxy config object
        /// @param {Object} overrides An object containing methods to override/implement on the DDProxy object
        /// @return {Ext.dd.DDProxy} The DDProxy object
        /// </summary>
        public DDProxy initDDProxy(JsString group, JsObject config, JsObject overrides) { return null; }
        /// <summary>
        /// Initializes a {@link Ext.dd.DDTarget} object for this element.
        /// @param {String} group The group the DDTarget object is member of
        /// @param {Object} config The DDTarget config object
        /// @param {Object} overrides An object containing methods to override/implement on the DDTarget object
        /// @return {Ext.dd.DDTarget} The DDTarget object
        /// </summary>
        public DDTarget initDDTarget(JsString group, JsObject config, JsObject overrides) { return null; }
        /// <summary>
        /// Inserts this element after the passed element in the DOM
        /// @param {Mixed} el The element to insert after
        /// @return {Ext.Element} this
        /// </summary>
        public Element insertAfter(object el) { return null; }
        /// <summary>
        /// Inserts this element before the passed element in the DOM
        /// @param {Mixed} el The element before which this element will be inserted
        /// @return {Ext.Element} this
        /// </summary>
        public Element insertBefore(object el) { return null; }
        /// <summary>
        /// Inserts (or creates) an element (or DomHelper config) as the first child of this element
        /// @param {Mixed/Object} el The id or element to insert or a DomHelper config to create and insert
        /// @return {Ext.Element} The new child
        /// </summary>
        public Element insertFirst(object el, object returnDom) { return null; }
        /// <summary>
        /// Inserts an html fragment into this element
        /// @param {String} where Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
        /// @param {String} html The HTML fragment
        /// @param {Boolean} returnEl (optional) True to return an Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The inserted node (or nearest related if more than 1 inserted)
        /// </summary>
        public object insertHtml(JsString where, JsString html, bool returnEl) { return null; }
        /// <summary>
        /// Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @return {Boolean} True if this element matches the selector, else false
        /// </summary>
        public bool @is(object simpleSelector) { return false; }
        /// <summary>
        /// Tests various css rules/browsers to determine if this element uses a border box
        /// @return {Boolean}
        /// </summary>
        public void isBorderBox() { }
        /// <summary>
        /// Returns true if display is not "none"
        /// @return {Boolean}
        /// </summary>
        public void isDisplayed() { }
        /// <summary>
        /// Returns true if this element is masked
        /// @return {Boolean}
        /// </summary>
        public void isMasked() { }
        /// <summary>
        /// Returns true if this element is scrollable.
        /// @return {Boolean}
        /// </summary>
        public void isScrollable() { }
        public void isStyle(object style, object val) { }
        /// <summary>
        /// Checks whether the element is currently visible using both visibility and display properties.
        /// @return {Boolean} True if the element is currently visible, else false
        /// </summary>
        public bool isVisible() { return false; }
        /// <summary>
        /// Checks whether the element is currently visible using both visibility and display properties.
        /// @param {Boolean} deep (optional) True to walk the dom and see if parent elements are hidden (defaults to false)
        /// @return {Boolean} True if the element is currently visible, else false
        /// </summary>
        public bool isVisible(bool deep) { return false; }
        /// <summary>
        /// Gets the last child, skipping text nodes
        /// @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The last child or null
        /// </summary>
        public object last(JsString selector, bool returnDom) { return null; }
        /// <summary>
        /// Direct access to the Updater {@link Ext.Updater#update} method. The method takes the same object
        /// parameter as {@link Ext.Updater#update}
        /// @return {Ext.Element} this
        /// </summary>
        public Element load() { return null; }
        /// <summary>
        /// <p>Updates the <a href="http://developer.mozilla.org/en/DOM/element.innerHTML">innerHTML</a> of this Element
        /// from a specified URL. Note that this is subject to the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">Same Origin Policy</a></p>
        /// <p>Updating innerHTML of an element will <b>not</b> execute embedded <tt>&lt;script></tt> elements. This is a browser restriction.</p>
        /// @param {Mixed} options. Either a sring containing the URL from which to load the HTML, or an {@link Ext.Ajax#request} options object specifying
        /// exactly how to request the HTML.
        /// @return {Ext.Element} this
        /// </summary>
        public Element load(object url, object @params, object cb) { return null; }
        /// <summary>
        /// Puts a mask over this element to disable user interaction. Requires core.css.
        /// This method can only be applied to elements which accept child nodes.
        /// @param {String} msg (optional) A message to display in the mask
        /// @param {String} msgCls (optional) A css class to apply to the msg element
        /// @return {Element} The mask element
        /// </summary>
        public Element mask(JsString msg, JsString msgCls) { return null; }
        public void matchNode(object dir, object start, object selector, object returnDom) { }
        /// <summary>
        /// Move this element relative to its current position.
        /// @param {String} direction Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").
        /// @param {Number} distance How far to move the element in pixels
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element move(JsString direction, JsNumber distance, object animate) { return null; }
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} x X value for new position (coordinates are page-based)
        /// @param {Number} y Y value for new position (coordinates are page-based)
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element moveTo(JsNumber x, JsNumber y, object animate) { return null; }
        /// <summary>
        /// Gets the next sibling, skipping text nodes
        /// @param {String} selector (optional) Find the next sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The next sibling or null
        /// </summary>
        public object next(JsString selector, bool returnDom) { return null; }
        /// <summary>
        /// Gets the parent node for this element, optionally chaining up trying to match a selector
        /// @param {String} selector (optional) Find a parent node that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The parent node or null
        /// </summary>
        public object parent(JsString selector, bool returnDom) { return null; }
        /// <summary>
        /// Initializes positioning on this element. If a desired position is not passed, it will make the
        /// the element positioned relative IF it is not already positioned.
        /// @param {String} pos (optional) Positioning to use "relative", "absolute" or "fixed"
        /// @param {Number} zIndex (optional) The zIndex to apply
        /// @param {Number} x (optional) Set the page X position
        /// @param {Number} y (optional) Set the page Y position
        /// </summary>
        public void position(JsString pos, JsNumber zIndex, JsNumber x, JsNumber y) { }
        public void preanim(object a, object i) { }
        /// <summary>
        /// Gets the previous sibling, skipping text nodes
        /// @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The previous sibling or null
        /// </summary>
        public object prev(JsString selector, bool returnDom) { return null; }
        /// <summary>
        /// Recursively removes all previous added listeners from this element and its children
        /// @return {Ext.Element} this
        /// </summary>
        public Element purgeAllListeners() { return null; }
        /// <summary>
        /// Selects child nodes based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @return {Array} An array of the matched nodes
        /// </summary>
        public JsArray query(JsString selector) { return null; }
        /// <summary>
        /// Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
        /// @param {String/Array} className The CSS class to add, or an array of classes
        /// @return {Ext.Element} this
        /// </summary>
        public Element radioClass(object className) { return null; }
        /// <summary>
        /// Create an event handler on this element such that when the event fires and is handled by this element,
        /// it will be relayed to another object (i.e., fired again as if it originated from that object instead).
        /// @param {String} eventName The type of event to relay
        /// @param {Object} object Any object that extends {@link Ext.util.Observable} that will provide the context
        /// for firing the relayed event
        /// </summary>
        public void relayEvent(JsString eventName, object observable) { }
        /// <summary>
        /// <p>Removes this element's dom reference.  Note that event and cache removal is handled at {@link Ext#removeNode}</p>
        /// </summary>
        public void remove() { }
        /// <summary>
        /// Remove any anchor to this element. See {@link #anchorTo}.
        /// @return {Ext.Element} this
        /// </summary>
        public Element removeAnchor() { return null; }
        /// <summary>
        /// Removes one or more CSS classes from the element.
        /// @param {String/Array} className The CSS class to remove, or an array of classes
        /// @return {Ext.Element} this
        /// </summary>
        public Element removeClass(object className) { return null; }
        /// <summary>
        /// Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.
        /// <b>Note</b>: if a <i>scope</i> was explicitly specified when {@link #addListener adding} the
        /// listener, the same scope must be specified here.
        /// Example:
        /// <pre><code>
        /// el.removeListener('click', this.handlerFn);
        /// // or
        /// el.un('click', this.handlerFn);
        /// </code></pre>
        /// @param {String} eventName The name of the event from which to remove the handler.
        /// @param {Function} fn The handler function to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
        /// @param {Object} scope If a scope (<b><code>this</code></b> reference) was specified when the listener was added,
        /// then this must refer to the same object.
        /// @return {Ext.Element} this
        /// </summary>
        public Element removeListener(JsString eventName, JsAction fn, JsObject scope) { return null; }
        /// <summary>
        /// Forces the browser to repaint this element
        /// @return {Ext.Element} this
        /// </summary>
        public Element repaint() { return null; }
        /// <summary>
        /// Replaces the passed element with this element
        /// @param {Mixed} el The element to replace
        /// @return {Ext.Element} this
        /// </summary>
        public Element replace(object el) { return null; }
        /// <summary>
        /// Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.
        /// @param {String} oldClassName The CSS class to replace
        /// @param {String} newClassName The replacement CSS class
        /// @return {Ext.Element} this
        /// </summary>
        public Element replaceClass(JsString oldClassName, JsString newClassName) { return null; }
        /// <summary>
        /// Replaces this element with the passed element
        /// @param {Mixed/Object} el The new element or a DomHelper config of an element to create
        /// @return {Ext.Element} this
        /// </summary>
        public Element replaceWith(object el) { return null; }
        /// <summary>
        /// Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
        /// within this element's scrollable range.
        /// @param {String} direction Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").
        /// @param {Number} distance How far to scroll the element in pixels
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Boolean} Returns true if a scroll was triggered or false if the element
        /// was scrolled as far as it could go.
        /// </summary>
        public bool scroll(JsString direction, JsNumber distance, object animate) { return false; }
        public void scrollChildIntoView(object child, object hscroll) { }
        /// <summary>
        /// Scrolls this element into view within the passed container.
        /// @param {Mixed} container (optional) The container element to scroll (defaults to document.body).  Should be a
        /// string (id), dom node, or Ext.Element.
        /// @param {Boolean} hscroll (optional) False to disable horizontal scroll (defaults to true)
        /// @return {Ext.Element} this
        /// </summary>
        public Element scrollIntoView(object container, bool hscroll) { return null; }
        /// <summary>
        /// Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
        /// @param {String} side Either "left" for scrollLeft values or "top" for scrollTop values.
        /// @param {Number} value The new scroll value.
        /// @return {Element} this
        /// </summary>
        public Element scrollTo(JsString side, JsNumber value) { return null; }
        /// <summary>
        /// Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
        /// @param {String} side Either "left" for scrollLeft values or "top" for scrollTop values.
        /// @param {Number} value The new scroll value
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Element} this
        /// </summary>
        public Element scrollTo(JsString side, JsNumber value, object animate) { return null; }
        /// <summary>
        /// Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @return {CompositeElement/CompositeElementLite} The composite element
        /// </summary>
        public object select(JsString selector) { return null; }
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
        /// to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
        /// {@link Ext.CompositeElementLite CompositeElementLite} object.
        /// @param {String/Array} selector The CSS selector or an array of elements
        /// @param {HTMLElement/String} root (optional) The root element of the query or id of the root
        /// @return {CompositeElementLite/CompositeElement}
        /// @member Ext.Element
        /// @method select
        /// </summary>
        public static void select(object selector, object root) { }
        /// <summary>
        /// Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @param {Boolean} unique (optional) True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)
        /// @return {CompositeElement/CompositeElementLite} The composite element
        /// </summary>
        public object select(JsString selector, bool unique) { return null; }
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
        /// to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
        /// {@link Ext.CompositeElementLite CompositeElementLite} object.
        /// @param {String/Array} selector The CSS selector or an array of elements
        /// @param {Boolean} unique (optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object)
        /// @param {HTMLElement/String} root (optional) The root element of the query or id of the root
        /// @return {CompositeElementLite/CompositeElement}
        /// @member Ext.Element
        /// @method select
        /// </summary>
        public static void select(object selector, bool unique, object root) { }
        /// <summary>
        /// Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
        /// @param {Object} o The object with the attributes
        /// @param {Boolean} useSet (optional) false to override the default setAttribute to use expandos.
        /// @return {Ext.Element} this
        /// </summary>
        public Element set(JsObject o, bool useSet) { return null; }
        /// <summary>
        /// Sets the element's CSS bottom style.
        /// @param {String} bottom The bottom CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setBottom(JsString bottom) { return null; }
        /// <summary>
        /// Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
        /// @param {Number} x X value for new position (coordinates are page-based)
        /// @param {Number} y Y value for new position (coordinates are page-based)
        /// @param {Mixed} width The new width. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels)</li>
        /// <li>A String used to set the CSS width style. Animation may <b>not</b> be used.
        /// </ul></div>
        /// @param {Mixed} height The new height. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels)</li>
        /// <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
        /// </ul></div>
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setBounds(JsNumber x, JsNumber y, object width, object height, object animate) { return null; }
        /// <summary>
        /// Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
        /// @param {Object} box The box to fill {x, y, width, height}
        /// @param {Boolean} adjust (optional) Whether to adjust for box-model issues automatically
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setBox(JsObject box, bool adjust, object animate) { return null; }
        /// <summary>
        /// Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
        /// @param {Mixed} value Boolean value to display the element using its default display, or a string to set the display directly.
        /// @return {Ext.Element} this
        /// </summary>
        public Element setDisplayed(object value) { return null; }
        /// <summary>
        /// Set the height of this Element.
        /// <pre><code>
        /// // change the height to 200px and animate with default configuration
        /// Ext.fly('elementId').setHeight(200, true);
        /// // change the height to 150px and animate with a custom configuration
        /// Ext.fly('elId').setHeight(150, {
        /// duration : .5, // animation will have a duration of .5 seconds
        /// // will change the content to "finished"
        /// callback: function(){ this.{@link #update}("finished"); }
        /// });
        /// </code></pre>
        /// @param {Mixed} height The new height. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels.)</li>
        /// <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
        /// </ul></div>
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setHeight(object height, object animate) { return null; }
        /// <summary>
        /// Sets the element's left position directly using CSS style (instead of {@link #setX}).
        /// @param {String} left The left CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setLeft(JsString left) { return null; }
        /// <summary>
        /// Quick set left and top adding default units
        /// @param {String} left The left CSS property value
        /// @param {String} top The top CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setLeftTop(JsString left, JsString top) { return null; }
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} x X value for new position (coordinates are page-based)
        /// @param {Number} y Y value for new position (coordinates are page-based)
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setLocation(JsNumber x, JsNumber y, object animate) { return null; }
        /// <summary>
        /// Set the opacity of the element
        /// @param {Float} opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
        /// @param {Boolean/Object} animate (optional) a standard Element animation config object or <tt>true</tt> for
        /// the default animation (<tt>{duration: .35, easing: 'easeIn'}</tt>)
        /// @return {Ext.Element} this
        /// </summary>
        public Element setOpacity(object opacity, object animate) { return null; }
        public void setOverflow(object v) { }
        /// <summary>
        /// Set positioning with an object returned by getPositioning().
        /// @param {Object} posCfg
        /// @return {Ext.Element} this
        /// </summary>
        public Element setPositioning(object pc) { return null; }
        /// <summary>
        /// Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.
        /// @param {Ext.lib.Region} region The region to fill
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setRegion(Region region, object animate) { return null; }
        /// <summary>
        /// Sets the element's CSS right style.
        /// @param {String} right The right CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setRight(JsString right) { return null; }
        /// <summary>
        /// Set the size of this Element. If animation is true, both width and height will be animated concurrently.
        /// @param {Mixed} width The new width. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style. Animation may <b>not</b> be used.
        /// <li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
        /// </ul></div>
        /// @param {Mixed} height The new height. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
        /// </ul></div>
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setSize(object width, object height, object animate) { return null; }
        /// <summary>
        /// Wrapper for setting style properties, also takes single object parameter of multiple styles.
        /// @param {String/Object} property The style property to be set, or an object of multiple styles.
        /// @param {String} value (optional) The value to apply to the given property, or null if an object was passed.
        /// @return {Ext.Element} this
        /// </summary>
        public Element setStyle(object prop, JsString value) { return null; }
        /// <summary>
        /// Sets the element's top position directly using CSS style (instead of {@link #setY}).
        /// @param {String} top The top CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setTop(JsString top) { return null; }
        /// <summary>
        /// Sets the element's visibility mode. When setVisible() is called it
        /// will use this to determine whether to set the visibility or the display property.
        /// @param {Number} visMode Ext.Element.VISIBILITY or Ext.Element.DISPLAY
        /// @return {Ext.Element} this
        /// </summary>
        public Element setVisibilityMode(JsNumber visMode) { return null; }
        /// <summary>
        /// Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
        /// the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
        /// @param {Boolean} visible Whether the element is visible
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setVisible(bool visible, object animate) { return null; }
        /// <summary>
        /// Set the width of this Element.
        /// @param {Mixed} width The new width. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style. Animation may <b>not</b> be used.
        /// </ul></div>
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setWidth(object width, object animate) { return null; }
        /// <summary>
        /// Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The X position of the element
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setX(object x, object animate) { return null; }
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Array} pos Contains X & Y [x, y] values for new position (coordinates are page-based)
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setXY(JsArray pos, object animate) { return null; }
        /// <summary>
        /// Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The Y position of the element
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setY(object y, object animate) { return null; }
        /// <summary>
        /// Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element show(object animate) { return null; }
        /// <summary>
        /// Stops the specified event(s) from bubbling and optionally prevents the default action
        /// @param {String/Array} eventName an event / array of events to stop from bubbling
        /// @param {Boolean} preventDefault (optional) true to prevent the default action too
        /// @return {Ext.Element} this
        /// </summary>
        public Element swallowEvent(object eventName, bool preventDefault) { return null; }
        /// <summary>
        /// Toggles the element's visibility or display, depending on visibility mode.
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element toggle(object animate) { return null; }
        /// <summary>
        /// Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
        /// @param {String} className The CSS class to toggle
        /// @return {Ext.Element} this
        /// </summary>
        public Element toggleClass(JsString className) { return null; }
        /// <summary>
        /// Translates the passed page coordinates into left/top css values for this element
        /// @param {Number/Array} x The page x or an array containing [x, y]
        /// @param {Number} y (optional) The page y, required if x is not an array
        /// @return {Object} An object with left and top properties. e.g. {left: (value), top: (value)}
        /// </summary>
        public JsObject translatePoints(object x, JsNumber y) { return null; }
        /// <summary>
        /// Return clipping (overflow) to original clipping before <tt>{@link #clip}</tt> was called
        /// @return {Ext.Element} this
        /// </summary>
        public Element unclip() { return null; }
        /// <summary>
        /// Removes a previously applied mask.
        /// </summary>
        public void unmask() { }
        /// <summary>
        /// Disables text selection for this element (normalized across browsers)
        /// @return {Ext.Element} this
        /// </summary>
        public Element unselectable() { return null; }
        /// <summary>
        /// Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
        /// This is a shortcut for findParentNode() that always returns an Ext.Element.
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @return {Ext.Element} The matching DOM node (or null if no match was found)
        /// </summary>
        public Element up(object simpleSelector, object maxDepth) { return null; }
        /// <summary>
        /// Update the innerHTML of this element, optionally searching for and processing scripts
        /// @param {String} html The new HTML
        /// @param {Boolean} loadScripts (optional) True to look for and process scripts (defaults to false)
        /// @param {Function} callback (optional) For async script loading you can be notified when the update completes
        /// @return {Ext.Element} this
        /// </summary>
        public Element update(JsString html, bool loadScripts, JsAction callback) { return null; }
        /// <summary>
        /// Update the innerHTML of this element
        /// @param {String} html The new HTML
        /// @return {Ext.Element} this
        /// </summary>
        public Element update(JsString html) { return null; }
        /// <summary>
        /// Creates and wraps this element with another element
        /// @param {Object} config (optional) DomHelper element config object for the wrapper element or null for an empty div
        /// @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Ext.Element
        /// @return {HTMLElement/Element} The newly created wrapper element
        /// </summary>
        public object wrap(JsObject config, bool returnDom) { return null; }
        /// <summary>
        /// The default unit to append to CSS values where a unit isn't provided (defaults to px).
        /// @type String
        /// </summary>
        public JsString defaultUnit { get; set; }
        /// <summary>
        /// The element's default display mode  (defaults to "")
        /// @type String
        /// </summary>
        public JsString originalDisplay { get; set; }
        public object visibilityMode { get; set; }
    }
    #endregion
    #region Error
    /// <summary>
    /// @class Ext.Error
    /// @extends Error
    /// <p>A base error class. Future implementations are intended to provide more
    /// robust error handling throughout the framework (<b>in the debug build only</b>)
    /// to check for common errors and problems. The messages issued by this class
    /// will aid error checking. Error checks will be automatically removed in the
    /// production build so that performance is not negatively impacted.</p>
    /// <p>Some sample messages currently implemented:</p><pre>
    /// "DataProxy attempted to execute an API-action but found an undefined
    /// url / function. Please review your Proxy url/api-configuration."
    /// </pre><pre>
    /// "Could not locate your "root" property in your server response.
    /// Please review your JsonReader config to ensure the config-property
    /// "root" matches the property your server-response.  See the JsonReader
    /// docs for additional assistance."
    /// </pre>
    /// <p>An example of the code used for generating error messages:</p><pre><code>
    /// try {
    /// generateError({
    /// foo: 'bar'
    /// });
    /// }
    /// catch (e) {
    /// console.error(e);
    /// }
    /// function generateError(data) {
    /// throw new Ext.Error('foo-error', data);
    /// }
    /// </code></pre>
    /// @param {String} message
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Error
    {
        public Error() { }
        /// <summary>
        /// @class Ext.Error
        /// @extends Error
        /// <p>A base error class. Future implementations are intended to provide more
        /// robust error handling throughout the framework (<b>in the debug build only</b>)
        /// to check for common errors and problems. The messages issued by this class
        /// will aid error checking. Error checks will be automatically removed in the
        /// production build so that performance is not negatively impacted.</p>
        /// <p>Some sample messages currently implemented:</p><pre>
        /// "DataProxy attempted to execute an API-action but found an undefined
        /// url / function. Please review your Proxy url/api-configuration."
        /// </pre><pre>
        /// "Could not locate your "root" property in your server response.
        /// Please review your JsonReader config to ensure the config-property
        /// "root" matches the property your server-response.  See the JsonReader
        /// docs for additional assistance."
        /// </pre>
        /// <p>An example of the code used for generating error messages:</p><pre><code>
        /// try {
        /// generateError({
        /// foo: 'bar'
        /// });
        /// }
        /// catch (e) {
        /// console.error(e);
        /// }
        /// function generateError(data) {
        /// throw new Ext.Error('foo-error', data);
        /// }
        /// </code></pre>
        /// @param {String} message
        /// </summary>
        public Error(object message) { }
    }
    #endregion
    #region FlashComponent
    /// <summary>
    /// @class Ext.FlashComponent
    /// @extends Ext.BoxComponent
    /// @constructor
    /// @xtype flash
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FlashComponent : Ext.BoxComponent
    {
        public void beforeDestroy() { }
        public void getId() { }
        public void getSwfId() { }
        public new void initComponent() { }
        public void initSwf() { }
        public void onFlashEvent(object e) { }
        public void onRender() { }
        /// <summary>
        /// @cfg {String} backgroundColor
        /// The background color of the chart. Defaults to <tt>'#ffffff'</tt>.
        /// </summary>
        public JsString backgroundColor { get; set; }
        /// <summary>
        /// @cfg {Boolean} expressInstall
        /// True to prompt the user to install flash if not installed. Note that this uses
        /// Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.
        /// </summary>
        public bool expressInstall { get; set; }
        /// <summary>
        /// @cfg {String} flashVersion
        /// Indicates the version the flash content was published for. Defaults to <tt>'9.0.115'</tt>.
        /// </summary>
        public JsString flashVersion { get; set; }
        public JsString swfHeight { get; set; }
        public JsString swfWidth { get; set; }
        /// <summary>
        /// @cfg {String} wmode
        /// The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.
        /// </summary>
        public JsString wmode { get; set; }
    }
    #endregion
    #region FlashEventProxy
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FlashEventProxy
    {
        public static void onEvent(object id, object e) { }
    }
    #endregion
    #region FormPanel
    /// <summary>
    /// @class Ext.form.FormPanel
    /// @extends Ext.Panel
    /// <p>Standard form container.</p>
    /// *
    /// <p><b><u>Layout</u></b></p>
    /// <p>By default, FormPanel is configured with <tt>layout:'form'</tt> to use an {@link Ext.layout.FormLayout}
    /// layout manager, which styles and renders fields and labels correctly. When nesting additional Containers
    /// within a FormPanel, you should ensure that any descendant Containers which host input Fields use the
    /// {@link Ext.layout.FormLayout} layout manager.</p>
    /// *
    /// <p><b><u>BasicForm</u></b></p>
    /// <p>Although <b>not listed</b> as configuration options of FormPanel, the FormPanel class accepts all
    /// of the config options required to configure its internal {@link Ext.form.BasicForm} for:
    /// <div class="mdetail-params"><ul>
    /// <li>{@link Ext.form.BasicForm#fileUpload file uploads}</li>
    /// <li>functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form</li>
    /// </ul></div>
    /// *
    /// <p><b>Note</b>: If subclassing FormPanel, any configuration options for the BasicForm must be applied to
    /// the <tt><b>initialConfig</b></tt> property of the FormPanel. Applying {@link Ext.form.BasicForm BasicForm}
    /// configuration settings to <b><tt>this</tt></b> will <b>not</b> affect the BasicForm's configuration.</p>
    /// *
    /// <p><b><u>Form Validation</u></b></p>
    /// <p>For information on form validation see the following:</p>
    /// <div class="mdetail-params"><ul>
    /// <li>{@link Ext.form.TextField}</li>
    /// <li>{@link Ext.form.VTypes}</li>
    /// <li>{@link Ext.form.BasicForm#doAction BasicForm.doAction <b>clientValidation</b> notes}</li>
    /// <li><tt>{@link Ext.form.FormPanel#monitorValid monitorValid}</tt></li>
    /// </ul></div>
    /// *
    /// <p><b><u>Form Submission</u></b></p>
    /// <p>By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}. To enable normal browser
    /// submission of the {@link Ext.form.BasicForm BasicForm} contained in this FormPanel, see the
    /// <tt><b>{@link Ext.form.BasicForm#standardSubmit standardSubmit}</b></tt> option.</p>
    /// *
    /// @constructor
    /// @param {Object} config Configuration options
    /// @xtype form
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FormPanel : Ext.Panel
    {
        public void applySettings(object c) { }
        public new void beforeDestroy() { }
        public void bindHandler() { }
        public void createForm() { }
        /// <summary>
        /// Provides access to the {@link Ext.form.BasicForm Form} which this Panel contains.
        /// @return {Ext.form.BasicForm} The {@link Ext.form.BasicForm Form} which this Panel contains.
        /// </summary>
        public BasicForm getForm() { return null; }
        public new void getLayoutTarget() { }
        public new void initComponent() { }
        public new void initEvents() { }
        public void initFields() { }
        public void isField(object c) { }
        /// <summary>
        /// This is a proxy for the underlying BasicForm's {@link Ext.form.BasicForm#load} call.
        /// @param {Object} options The options to pass to the action (see {@link Ext.form.BasicForm#doAction} for details)
        /// </summary>
        public void load() { }
        public new void onAdd(object c) { }
        public void onAddEvent(object ct, object c) { }
        public new void onDisable() { }
        public new void onEnable() { }
        public new void onRemove(object c) { }
        public void onRemoveEvent(object ct, object c) { }
        public new void onRender(object ct, object position) { }
        public void processAdd(object c) { }
        public void processRemove(object c) { }
        /// <summary>
        /// Starts monitoring of the valid state of this form. Usually this is done by passing the config
        /// option "monitorValid"
        /// </summary>
        public void startMonitoring() { }
        /// <summary>
        /// Stops monitoring of the valid state of this form
        /// </summary>
        public void stopMonitoring() { }
        /// <summary>
        /// @cfg {String} labelAlign The label alignment value used for the <tt>text-align</tt> specification
        /// for the <b>container</b>. Valid values are <tt>"left</tt>", <tt>"top"</tt> or <tt>"right"</tt>
        /// (defaults to <tt>"left"</tt>). This property cascades to child <b>containers</b> and can be
        /// overridden on any child <b>container</b> (e.g., a fieldset can specify a different <tt>labelAlign</tt>
        /// for its fields).
        /// </summary>
        public JsString labelAlign { get; set; }
        /// <summary>
        /// @cfg {String} layout Defaults to <tt>'form'</tt>.  Normally this configuration property should not be altered.
        /// For additional details see {@link Ext.layout.FormLayout} and {@link Ext.Container#layout Ext.Container.layout}.
        /// </summary>
        public JsString layout { get; set; }
        /// <summary>
        /// @cfg {Number} minButtonWidth Minimum width of all buttons in pixels (defaults to <tt>75</tt>).
        /// </summary>
        public JsNumber minButtonWidth { get; set; }
        /// <summary>
        /// @cfg {Number} monitorPoll The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
        /// </summary>
        public JsNumber monitorPoll { get; set; }
        /// <summary>
        /// @cfg {Boolean} monitorValid If <tt>true</tt>, the form monitors its valid state <b>client-side</b> and
        /// regularly fires the {@link #clientvalidation} event passing that state.<br>
        /// <p>When monitoring valid state, the FormPanel enables/disables any of its configured
        /// {@link #buttons} which have been configured with <code>formBind: true</code> depending
        /// on whether the {@link Ext.form.BasicForm#isValid form is valid} or not. Defaults to <tt>false</tt></p>
        /// </summary>
        public bool monitorValid { get; set; }
    }
    #endregion
    #region Fx
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Fx
    {
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// /* @private */
        /// queueFx : function(o, fn){
        /// var me = fly(this.dom);
        /// if(!me.hasFxBlock()){
        /// Ext.applyIf(o, me.fxDefaults);
        /// if(!o.concurrent){
        /// var run = me.beforeFx(o);
        /// fn.block = o.block;
        /// getQueue(me.dom.id).push(fn);
        /// if(run){
        /// me.nextFx();
        /// }
        /// }else{
        /// fn.call(me);
        /// }
        /// }
        /// return me;
        /// },
        /// /* @private */
        /// fxWrap : function(pos, o, vis){
        /// var dom = this.dom,
        /// wrap,
        /// wrapXY;
        /// if(!o.wrap || !(wrap = Ext.getDom(o.wrap))){
        /// if(o.fixPosition){
        /// wrapXY = fly(dom).getXY();
        /// }
        /// var div = document.createElement("div");
        /// div.style.visibility = vis;
        /// wrap = dom.parentNode.insertBefore(div, dom);
        /// fly(wrap).setPositioning(pos);
        /// if(fly(wrap).isStyle(POSITION, "static")){
        /// fly(wrap).position("relative");
        /// }
        /// fly(dom).clearPositioning('auto');
        /// fly(wrap).clip();
        /// wrap.appendChild(dom);
        /// if(wrapXY){
        /// fly(wrap).setXY(wrapXY);
        /// }
        /// }
        /// return wrap;
        /// },
        /// /* @private */
        /// fxUnwrap : function(wrap, pos, o){
        /// var dom = this.dom;
        /// fly(dom).clearPositioning();
        /// fly(dom).setPositioning(pos);
        /// if(!o.wrap){
        /// var pn = fly(wrap).dom.parentNode;
        /// pn.insertBefore(dom, wrap);
        /// fly(wrap).remove();
        /// }
        /// },
        /// /* @private */
        /// getFxRestore : function(){
        /// var st = this.dom.style;
        /// return {pos: this.getPositioning(), width: st.width, height : st.height};
        /// },
        /// </summary>
        public static bool afterFx(object o) { return false; }
        /// <summary>
        /// Stops any running effects and clears the element's internal effects queue if it contains
        /// any additional effects that haven't started yet.
        /// @return {Ext.Element} The Element
        /// */
        /// stopFx : function(finish){
        /// var me = this,
        /// id = me.dom.id;
        /// if(me.hasActiveFx()){
        /// var cur = getQueue(id)[0];
        /// if(cur && cur.anim){
        /// if(cur.anim.isAnimated){
        /// setQueue(id, [cur]); //clear
        /// cur.anim.stop(finish !== undefined ? finish : TRUE);
        /// }else{
        /// setQueue(id, []);
        /// }
        /// }
        /// }
        /// return me;
        /// },
        /// </summary>
        public static Element beforeFx(object o) { return null; }
        /// <summary>
        /// Fade an element in (from transparent to opaque).  The ending opacity can be specified
        /// using the <tt>{@link #endOpacity}</tt> config option.
        /// Usage:
        /// <pre><code>
        /// // default: fade in from opacity 0 to 100%
        /// el.fadeIn();
        /// // custom: fade in from opacity 0 to 75% over 2 seconds
        /// el.fadeIn({ endOpacity: .75, duration: 2});
        /// // common config options shown with default values
        /// el.fadeIn({
        /// endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
        /// easing: 'easeOut',
        /// duration: .5
        /// });
        /// </code></pre>
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element fadeIn(object o) { return null; }
        /// <summary>
        /// Fade an element out (from opaque to transparent).  The ending opacity can be specified
        /// using the <tt>{@link #endOpacity}</tt> config option.  Note that IE may require
        /// <tt>{@link #useDisplay}:true</tt> in order to redisplay correctly.
        /// Usage:
        /// <pre><code>
        /// // default: fade out from the element's current opacity to 0
        /// el.fadeOut();
        /// // custom: fade out from the element's current opacity to 25% over 2 seconds
        /// el.fadeOut({ endOpacity: .25, duration: 2});
        /// // common config options shown with default values
        /// el.fadeOut({
        /// endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
        /// easing: 'easeOut',
        /// duration: .5,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code></pre>
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element fadeOut(object o) { return null; }
        /// <summary>
        /// Shows a ripple of exploding, attenuating borders to draw attention to an Element.
        /// Usage:
        /// <pre><code>
        /// // default: a single light blue ripple
        /// el.frame();
        /// // custom: 3 red ripples lasting 3 seconds total
        /// el.frame("ff0000", 3, { duration: 3 });
        /// // common config options shown with default values
        /// el.frame("C3DAF9", 1, {
        /// duration: 1 //duration of each individual ripple.
        /// // Note: Easing is not configurable and will be ignored if included
        /// });
        /// </code></pre>
        /// @param {String} color (optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').
        /// @param {Number} count (optional) The number of ripples to display (defaults to 1)
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element frame(JsString color, JsNumber count, object o) { return null; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// /* @private */
        /// queueFx : function(o, fn){
        /// var me = fly(this.dom);
        /// if(!me.hasFxBlock()){
        /// Ext.applyIf(o, me.fxDefaults);
        /// if(!o.concurrent){
        /// var run = me.beforeFx(o);
        /// fn.block = o.block;
        /// getQueue(me.dom.id).push(fn);
        /// if(run){
        /// me.nextFx();
        /// }
        /// }else{
        /// fn.call(me);
        /// }
        /// }
        /// return me;
        /// },
        /// /* @private */
        /// fxWrap : function(pos, o, vis){
        /// var dom = this.dom,
        /// wrap,
        /// wrapXY;
        /// if(!o.wrap || !(wrap = Ext.getDom(o.wrap))){
        /// if(o.fixPosition){
        /// wrapXY = fly(dom).getXY();
        /// }
        /// var div = document.createElement("div");
        /// div.style.visibility = vis;
        /// wrap = dom.parentNode.insertBefore(div, dom);
        /// fly(wrap).setPositioning(pos);
        /// if(fly(wrap).isStyle(POSITION, "static")){
        /// fly(wrap).position("relative");
        /// }
        /// fly(dom).clearPositioning('auto');
        /// fly(wrap).clip();
        /// wrap.appendChild(dom);
        /// if(wrapXY){
        /// fly(wrap).setXY(wrapXY);
        /// }
        /// }
        /// return wrap;
        /// },
        /// /* @private */
        /// fxUnwrap : function(wrap, pos, o){
        /// var dom = this.dom;
        /// fly(dom).clearPositioning();
        /// fly(dom).setPositioning(pos);
        /// if(!o.wrap){
        /// var pn = fly(wrap).dom.parentNode;
        /// pn.insertBefore(dom, wrap);
        /// fly(wrap).remove();
        /// }
        /// },
        /// /* @private */
        /// getFxRestore : function(){
        /// var st = this.dom.style;
        /// return {pos: this.getPositioning(), width: st.width, height : st.height};
        /// },
        /// /* @private */
        /// afterFx : function(o){
        /// var dom = this.dom,
        /// id = dom.id;
        /// if(o.afterStyle){
        /// fly(dom).setStyle(o.afterStyle);
        /// }
        /// if(o.afterCls){
        /// fly(dom).addClass(o.afterCls);
        /// }
        /// if(o.remove == TRUE){
        /// fly(dom).remove();
        /// }
        /// if(o.callback){
        /// o.callback.call(o.scope, fly(dom));
        /// }
        /// if(!o.concurrent){
        /// getQueue(id).shift();
        /// fly(dom).nextFx();
        /// }
        /// },
        /// </summary>
        public static bool fxanim(object args, object opt, object animType, object defaultDur, object defaultEase, object cb) { return false; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// /* @private */
        /// queueFx : function(o, fn){
        /// var me = fly(this.dom);
        /// if(!me.hasFxBlock()){
        /// Ext.applyIf(o, me.fxDefaults);
        /// if(!o.concurrent){
        /// var run = me.beforeFx(o);
        /// fn.block = o.block;
        /// getQueue(me.dom.id).push(fn);
        /// if(run){
        /// me.nextFx();
        /// }
        /// }else{
        /// fn.call(me);
        /// }
        /// }
        /// return me;
        /// },
        /// /* @private */
        /// fxWrap : function(pos, o, vis){
        /// var dom = this.dom,
        /// wrap,
        /// wrapXY;
        /// if(!o.wrap || !(wrap = Ext.getDom(o.wrap))){
        /// if(o.fixPosition){
        /// wrapXY = fly(dom).getXY();
        /// }
        /// var div = document.createElement("div");
        /// div.style.visibility = vis;
        /// wrap = dom.parentNode.insertBefore(div, dom);
        /// fly(wrap).setPositioning(pos);
        /// if(fly(wrap).isStyle(POSITION, "static")){
        /// fly(wrap).position("relative");
        /// }
        /// fly(dom).clearPositioning('auto');
        /// fly(wrap).clip();
        /// wrap.appendChild(dom);
        /// if(wrapXY){
        /// fly(wrap).setXY(wrapXY);
        /// }
        /// }
        /// return wrap;
        /// },
        /// </summary>
        public static bool fxUnwrap(object wrap, object pos, object o) { return false; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// /* @private */
        /// queueFx : function(o, fn){
        /// var me = fly(this.dom);
        /// if(!me.hasFxBlock()){
        /// Ext.applyIf(o, me.fxDefaults);
        /// if(!o.concurrent){
        /// var run = me.beforeFx(o);
        /// fn.block = o.block;
        /// getQueue(me.dom.id).push(fn);
        /// if(run){
        /// me.nextFx();
        /// }
        /// }else{
        /// fn.call(me);
        /// }
        /// }
        /// return me;
        /// },
        /// </summary>
        public static bool fxWrap(object pos, object o, object vis) { return false; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// /* @private */
        /// queueFx : function(o, fn){
        /// var me = fly(this.dom);
        /// if(!me.hasFxBlock()){
        /// Ext.applyIf(o, me.fxDefaults);
        /// if(!o.concurrent){
        /// var run = me.beforeFx(o);
        /// fn.block = o.block;
        /// getQueue(me.dom.id).push(fn);
        /// if(run){
        /// me.nextFx();
        /// }
        /// }else{
        /// fn.call(me);
        /// }
        /// }
        /// return me;
        /// },
        /// /* @private */
        /// fxWrap : function(pos, o, vis){
        /// var dom = this.dom,
        /// wrap,
        /// wrapXY;
        /// if(!o.wrap || !(wrap = Ext.getDom(o.wrap))){
        /// if(o.fixPosition){
        /// wrapXY = fly(dom).getXY();
        /// }
        /// var div = document.createElement("div");
        /// div.style.visibility = vis;
        /// wrap = dom.parentNode.insertBefore(div, dom);
        /// fly(wrap).setPositioning(pos);
        /// if(fly(wrap).isStyle(POSITION, "static")){
        /// fly(wrap).position("relative");
        /// }
        /// fly(dom).clearPositioning('auto');
        /// fly(wrap).clip();
        /// wrap.appendChild(dom);
        /// if(wrapXY){
        /// fly(wrap).setXY(wrapXY);
        /// }
        /// }
        /// return wrap;
        /// },
        /// /* @private */
        /// fxUnwrap : function(wrap, pos, o){
        /// var dom = this.dom;
        /// fly(dom).clearPositioning();
        /// fly(dom).setPositioning(pos);
        /// if(!o.wrap){
        /// var pn = fly(wrap).dom.parentNode;
        /// pn.insertBefore(dom, wrap);
        /// fly(wrap).remove();
        /// }
        /// },
        /// </summary>
        public static bool getFxRestore() { return false; }
        /// <summary>
        /// Slides the element while fading it out of view.  An anchor point can be optionally passed to set the
        /// ending point of the effect.
        /// Usage:
        /// *<pre><code>
        /// // default: slide the element downward while fading out
        /// el.ghost();
        /// // custom: slide the element out to the right with a 2-second duration
        /// el.ghost('r', { duration: 2 });
        /// // common config options shown with default values
        /// el.ghost('b', {
        /// easing: 'easeOut',
        /// duration: .5,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code></pre>
        /// @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to bottom: 'b')
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element ghost(JsString anchor, object o) { return null; }
        /// <summary>
        /// Returns true if the element has any effects actively running or queued, else returns false.
        /// @return {Boolean} True if element has active effects, else false
        /// </summary>
        public static bool hasActiveFx() { return false; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// </summary>
        public static bool hasFxBlock() { return false; }
        /// <summary>
        /// Highlights the Element by setting a color (applies to the background-color by default, but can be
        /// changed using the "attr" config option) and then fading back to the original color. If no original
        /// color is available, you should provide the "endColor" config option which will be cleared after the animation.
        /// Usage:
        /// <pre><code>
        /// // default: highlight background to yellow
        /// el.highlight();
        /// // custom: highlight foreground text to blue for 2 seconds
        /// el.highlight("0000ff", { attr: 'color', duration: 2 });
        /// // common config options shown with default values
        /// el.highlight("ffff9c", {
        /// attr: "background-color", //can be any valid CSS property (attribute) that supports a color value
        /// endColor: (current color) or "ffffff",
        /// easing: 'easeIn',
        /// duration: 1
        /// });
        /// </code></pre>
        /// @param {String} color (optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element highlight(JsString color, object o) { return null; }
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on the element are
        /// run in sequence.  This is the opposite of {@link #syncFx}.
        /// @return {Ext.Element} The Element
        /// */
        /// sequenceFx : function(){
        /// var me = this;
        /// me.fxDefaults = Ext.apply(me.fxDefaults || {}, {
        /// block : FALSE,
        /// concurrent : FALSE,
        /// stopFx : FALSE
        /// });
        /// return me;
        /// },
        /// </summary>
        public static Element nextFx() { return null; }
        /// <summary>
        /// Creates a pause before any subsequent queued effects begin.  If there are
        /// no effects queued after the pause it will have no effect.
        /// Usage:
        /// <pre><code>
        /// el.pause(1);
        /// </code></pre>
        /// @param {Number} seconds The length of time to pause (in seconds)
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element pause(JsNumber seconds) { return null; }
        /// <summary>
        /// Fades the element out while slowly expanding it in all directions.  When the effect is completed, the
        /// element will be hidden (visibility = 'hidden') but block elements will still take up space in the document.
        /// The element must be removed from the DOM using the 'remove' config option if desired.
        /// Usage:
        /// *<pre><code>
        /// // default
        /// el.puff();
        /// // common config options shown with default values
        /// el.puff({
        /// easing: 'easeOut',
        /// duration: .5,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code></pre>
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element puff(object o) { return null; }
        /// <summary>
        /// Returns true if the element is currently blocking so that no other effect can be queued
        /// until this effect is finished, else returns false if blocking is not set.  This is commonly
        /// used to ensure that an effect initiated by a user action runs to completion prior to the
        /// same effect being restarted (e.g., firing only one effect even if the user clicks several times).
        /// @return {Boolean} True if blocking, else false
        /// */
        /// hasFxBlock : function(){
        /// var q = getQueue(this.dom.id);
        /// return q && q[0] && q[0].block;
        /// },
        /// </summary>
        public static bool queueFx(object o, object fn) { return false; }
        /// <summary>
        /// Animates the transition of an element's dimensions from a starting height/width
        /// to an ending height/width.  This method is a convenience implementation of {@link shift}.
        /// Usage:
        /// <pre><code>
        /// // change height and width to 100x100 pixels
        /// el.scale(100, 100);
        /// // common config options shown with default values.  The height and width will default to
        /// // the element&#39;s existing values if passed as null.
        /// el.scale(
        /// [element&#39;s width],
        /// [element&#39;s height], {
        /// easing: 'easeOut',
        /// duration: .35
        /// }
        /// );
        /// </code></pre>
        /// @param {Number} width  The new width (pass undefined to keep the original width)
        /// @param {Number} height  The new height (pass undefined to keep the original height)
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element scale(object w, object h, object o) { return null; }
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on the element are
        /// run in sequence.  This is the opposite of {@link #syncFx}.
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element sequenceFx() { return null; }
        /// <summary>
        /// Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
        /// Any of these properties not specified in the config object will not be changed.  This effect
        /// requires that at least one new dimension, position or opacity setting must be passed in on
        /// the config object in order for the function to have any effect.
        /// Usage:
        /// <pre><code>
        /// // slide the element horizontally to x position 200 while changing the height and opacity
        /// el.shift({ x: 200, height: 50, opacity: .8 });
        /// // common config options shown with default values.
        /// el.shift({
        /// width: [element&#39;s width],
        /// height: [element&#39;s height],
        /// x: [element&#39;s x position],
        /// y: [element&#39;s y position],
        /// opacity: [element&#39;s opacity],
        /// easing: 'easeOut',
        /// duration: .35
        /// });
        /// </code></pre>
        /// @param {Object} options  Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element shift(object o) { return null; }
        /// <summary>
        /// Slides the element into view.  An anchor point can be optionally passed to set the point of
        /// origin for the slide effect.  This function automatically handles wrapping the element with
        /// a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
        /// Usage:
        /// *<pre><code>
        /// // default: slide the element in from the top
        /// el.slideIn();
        /// // custom: slide the element in from the right with a 2-second duration
        /// el.slideIn('r', { duration: 2 });
        /// // common config options shown with default values
        /// el.slideIn('t', {
        /// easing: 'easeOut',
        /// duration: .5
        /// });
        /// </code></pre>
        /// @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element slideIn(JsString anchor, object o) { return null; }
        /// <summary>
        /// Slides the element out of view.  An anchor point can be optionally passed to set the end point
        /// for the slide effect.  When the effect is completed, the element will be hidden (visibility =
        /// 'hidden') but block elements will still take up space in the document.  The element must be removed
        /// from the DOM using the 'remove' config option if desired.  This function automatically handles
        /// wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
        /// Usage:
        /// *<pre><code>
        /// // default: slide the element out to the top
        /// el.slideOut();
        /// // custom: slide the element out to the right with a 2-second duration
        /// el.slideOut('r', { duration: 2 });
        /// // common config options shown with default values
        /// el.slideOut('t', {
        /// easing: 'easeOut',
        /// duration: .5,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code></pre>
        /// @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element slideOut(JsString anchor, object o) { return null; }
        /// <summary>
        /// Stops any running effects and clears the element's internal effects queue if it contains
        /// any additional effects that haven't started yet.
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element stopFx(object finish) { return null; }
        /// <summary>
        /// Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
        /// When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
        /// take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
        /// Usage:
        /// *<pre><code>
        /// // default
        /// el.switchOff();
        /// // all config options shown with default values
        /// el.switchOff({
        /// easing: 'easeIn',
        /// duration: .3,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code></pre>
        /// @param {Object} options (optional) Object literal with any of the Fx config options
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element switchOff(object o) { return null; }
        public static void switchStatements(object key, object fn, object argHash) { }
        /// <summary>
        /// Ensures that all effects queued after syncFx is called on the element are
        /// run concurrently.  This is the opposite of {@link #sequenceFx}.
        /// @return {Ext.Element} The Element
        /// </summary>
        public static Element syncFx() { return null; }
    }
    #endregion
    #region handleError
    /// <summary>
    /// Framework-wide error-handler.  Developers can override this method to provide
    /// custom exception-handling.  Framework errors will often extend from the base
    /// Ext.Error class.
    /// @param {Object/Error} e The thrown exception object.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class handleError
    {
        public handleError() { }
        /// <summary>
        /// Framework-wide error-handler.  Developers can override this method to provide
        /// custom exception-handling.  Framework errors will often extend from the base
        /// Ext.Error class.
        /// @param {Object/Error} e The thrown exception object.
        /// </summary>
        public handleError(object e) { }
    }
    #endregion
    #region KeyMap
    /// <summary>
    /// @class Ext.KeyMap
    /// Handles mapping keys to actions for an element. One key map can be used for multiple actions.
    /// The constructor accepts the same config object as defined by {@link #addBinding}.
    /// If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
    /// combination it will call the function with this signature (if the match is a multi-key
    /// combination the callback will still be called only once): (String key, Ext.EventObject e)
    /// A KeyMap can also handle a string representation of keys.<br />
    /// Usage:
    /// <pre><code>
    /// // map one key by key code
    /// var map = new Ext.KeyMap("my-element", {
    /// key: 13, // or Ext.EventObject.ENTER
    /// fn: myHandler,
    /// scope: myObject
    /// });
    /// // map multiple keys to one action by string
    /// var map = new Ext.KeyMap("my-element", {
    /// key: "a\r\n\t",
    /// fn: myHandler,
    /// scope: myObject
    /// });
    /// // map multiple keys to multiple actions by strings and array of codes
    /// var map = new Ext.KeyMap("my-element", [
    /// {
    /// key: [10,13],
    /// fn: function(){ alert("Return was pressed"); }
    /// }, {
    /// key: "abc",
    /// fn: function(){ alert('a, b or c was pressed'); }
    /// }, {
    /// key: "\t",
    /// ctrl:true,
    /// shift:true,
    /// fn: function(){ alert('Control + shift + tab was pressed.'); }
    /// }
    /// ]);
    /// </code></pre>
    /// <b>Note: A KeyMap starts enabled</b>
    /// @constructor
    /// @param {Mixed} el The element to bind to
    /// @param {Object} config The config (see {@link #addBinding})
    /// @param {String} eventName (optional) The event to bind to (defaults to "keydown")
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class KeyMap
    {
        public KeyMap() { }
        /// <summary>
        /// Add a new binding to this KeyMap. The following config object properties are supported:
        /// <pre>
        /// Property    Type             Description
        /// ----------  ---------------  ----------------------------------------------------------------------
        /// key         String/Array     A single keycode or an array of keycodes to handle
        /// shift       Boolean          True to handle key only when shift is pressed, False to handle the key only when shift is not pressed (defaults to undefined)
        /// ctrl        Boolean          True to handle key only when ctrl is pressed, False to handle the key only when ctrl is not pressed (defaults to undefined)
        /// alt         Boolean          True to handle key only when alt is pressed, False to handle the key only when alt is not pressed (defaults to undefined)
        /// handler     Function         The function to call when KeyMap finds the expected key combination
        /// fn          Function         Alias of handler (for backwards-compatibility)
        /// scope       Object           The scope of the callback function
        /// stopEvent   Boolean          True to stop the event from bubbling and prevent the default browser action if the key was handled by the KeyMap (defaults to false)
        /// </pre>
        /// *
        /// Usage:
        /// <pre><code>
        /// // Create a KeyMap
        /// var map = new Ext.KeyMap(document, {
        /// key: Ext.EventObject.ENTER,
        /// fn: handleKey,
        /// scope: this
        /// });
        /// //Add a new binding to the existing KeyMap later
        /// map.addBinding({
        /// key: 'abc',
        /// shift: true,
        /// fn: handleKey,
        /// scope: this
        /// });
        /// </code></pre>
        /// @param {Object/Array} config A single KeyMap config or an array of configs
        /// </summary>
        public void addBinding(object config) { }
        public void checkModifiers(object config, object e) { }
        /// <summary>
        /// Disable this KeyMap
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Enables this KeyMap
        /// </summary>
        public void enable() { }
        public void handleKeyDown(object e) { }
        /// <summary>
        /// Returns true if this KeyMap is enabled
        /// @return {Boolean}
        /// </summary>
        public void isEnabled() { }
        /// <summary>
        /// @class Ext.KeyMap
        /// Handles mapping keys to actions for an element. One key map can be used for multiple actions.
        /// The constructor accepts the same config object as defined by {@link #addBinding}.
        /// If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
        /// combination it will call the function with this signature (if the match is a multi-key
        /// combination the callback will still be called only once): (String key, Ext.EventObject e)
        /// A KeyMap can also handle a string representation of keys.<br />
        /// Usage:
        /// <pre><code>
        /// // map one key by key code
        /// var map = new Ext.KeyMap("my-element", {
        /// key: 13, // or Ext.EventObject.ENTER
        /// fn: myHandler,
        /// scope: myObject
        /// });
        /// // map multiple keys to one action by string
        /// var map = new Ext.KeyMap("my-element", {
        /// key: "a\r\n\t",
        /// fn: myHandler,
        /// scope: myObject
        /// });
        /// // map multiple keys to multiple actions by strings and array of codes
        /// var map = new Ext.KeyMap("my-element", [
        /// {
        /// key: [10,13],
        /// fn: function(){ alert("Return was pressed"); }
        /// }, {
        /// key: "abc",
        /// fn: function(){ alert('a, b or c was pressed'); }
        /// }, {
        /// key: "\t",
        /// ctrl:true,
        /// shift:true,
        /// fn: function(){ alert('Control + shift + tab was pressed.'); }
        /// }
        /// ]);
        /// </code></pre>
        /// <b>Note: A KeyMap starts enabled</b>
        /// @constructor
        /// @param {Mixed} el The element to bind to
        /// @param {Object} config The config (see {@link #addBinding})
        /// @param {String} eventName (optional) The event to bind to (defaults to "keydown")
        /// </summary>
        public KeyMap(object el, JsObject config, JsString eventName) { }
        /// <summary>
        /// Shorthand for adding a single key listener
        /// @param {Number/Array/Object} key Either the numeric key code, array of key codes or an object with the
        /// following options:
        /// {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
        /// </summary>
        public void on(object key, JsAction fn, JsObject scope) { }
        /// <summary>
        /// Convenience function for setting disabled/enabled by boolean.
        /// @param {Boolean} disabled
        /// </summary>
        public void setDisabled(object disabled) { }
        /// <summary>
        /// True to stop the event from bubbling and prevent the default browser action if the
        /// key was handled by the KeyMap (defaults to false)
        /// @type Boolean
        /// </summary>
        public bool stopEvent { get; set; }
    }
    #endregion
    #region KeyNav
    /// <summary>
    /// @class Ext.KeyNav
    /// <p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
    /// navigation keys to function calls that will get called when the keys are pressed, providing an easy
    /// way to implement custom navigation schemes for any UI component.</p>
    /// <p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
    /// pageUp, pageDown, del, home, end.  Usage:</p>
    /// <pre><code>
    /// var nav = new Ext.KeyNav("my-element", {
    /// "left" : function(e){
    /// this.moveLeft(e.ctrlKey);
    /// },
    /// "right" : function(e){
    /// this.moveRight(e.ctrlKey);
    /// },
    /// "enter" : function(e){
    /// this.save();
    /// },
    /// scope : this
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {Mixed} el The element to bind to
    /// @param {Object} config The config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class KeyNav
    {
        public KeyNav() { }
        /// <summary>
        /// Destroy this KeyNav (this is the same as calling disable).
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// Disable this KeyNav
        /// </summary>
        public void disable() { }
        public void doRelay(object e, object h, object hname) { }
        /// <summary>
        /// Enable this KeyNav
        /// </summary>
        public void enable() { }
        public void isKeydown() { }
        /// <summary>
        /// @class Ext.KeyNav
        /// <p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
        /// navigation keys to function calls that will get called when the keys are pressed, providing an easy
        /// way to implement custom navigation schemes for any UI component.</p>
        /// <p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
        /// pageUp, pageDown, del, home, end.  Usage:</p>
        /// <pre><code>
        /// var nav = new Ext.KeyNav("my-element", {
        /// "left" : function(e){
        /// this.moveLeft(e.ctrlKey);
        /// },
        /// "right" : function(e){
        /// this.moveRight(e.ctrlKey);
        /// },
        /// "enter" : function(e){
        /// this.save();
        /// },
        /// scope : this
        /// });
        /// </code></pre>
        /// @constructor
        /// @param {Mixed} el The element to bind to
        /// @param {Object} config The config
        /// </summary>
        public KeyNav(object el, JsObject config) { }
        public void relay(object e) { }
        /// <summary>
        /// Convenience function for setting disabled/enabled by boolean.
        /// @param {Boolean} disabled
        /// </summary>
        public void setDisabled(object disabled) { }
        public void stopKeyUp(object e) { }
        /// <summary>
        /// @cfg {String} defaultEventAction
        /// The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are
        /// {@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and
        /// {@link Ext.EventObject#stopPropagation} (defaults to 'stopEvent')
        /// </summary>
        public JsString defaultEventAction { get; set; }
        public bool del { get; set; }
        /// <summary>
        /// @cfg {Boolean} disabled
        /// True to disable this KeyNav instance (defaults to false)
        /// </summary>
        public bool disabled { get; set; }
        public bool down { get; set; }
        public bool end { get; set; }
        public bool enter { get; set; }
        public bool esc { get; set; }
        /// <summary>
        /// @cfg {Boolean} forceKeyDown
        /// Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since
        /// IE does not propagate special keys on keypress, but setting this to true will force other browsers to also
        /// handle keydown instead of keypress.
        /// </summary>
        public bool forceKeyDown { get; set; }
        public bool home { get; set; }
        public bool left { get; set; }
        public bool pageDown { get; set; }
        public bool pageUp { get; set; }
        public bool right { get; set; }
        public bool tab { get; set; }
        public bool up { get; set; }
    }
    #endregion
    #region Layer
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Layer
    {
        public Layer() { }
        public Layer(object config, object existingEl) { }
    }
    #endregion
    #region Loader
    /// <summary>
    /// @class Ext.Loader
    /// @singleton
    /// Simple class to help load JavaScript files on demand
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Loader
    {
    }
    #endregion
    #region LoadMask
    /// <summary>
    /// @class Ext.LoadMask
    /// A simple utility class for generically masking elements while loading data.  If the {@link #store}
    /// config option is specified, the masking will be automatically synchronized with the store's loading
    /// process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
    /// element's Updater load indicator and will be destroyed after the initial load.
    /// <p>Example usage:</p>
    /// *<pre><code>
    /// // Basic mask:
    /// var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
    /// myMask.show();
    /// </code></pre>
    /// @constructor
    /// Create a new LoadMask
    /// @param {Mixed} el The element or DOM node, or its id
    /// @param {Object} config The config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class LoadMask
    {
        public LoadMask() { }
        public void destroy() { }
        /// <summary>
        /// Disables the mask to prevent it from being displayed
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Enables the mask so that it can be displayed
        /// </summary>
        public void enable() { }
        /// <summary>
        /// Hide this LoadMask.
        /// </summary>
        public void hide() { }
        /// <summary>
        /// @class Ext.LoadMask
        /// A simple utility class for generically masking elements while loading data.  If the {@link #store}
        /// config option is specified, the masking will be automatically synchronized with the store's loading
        /// process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
        /// element's Updater load indicator and will be destroyed after the initial load.
        /// <p>Example usage:</p>
        /// *<pre><code>
        /// // Basic mask:
        /// var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
        /// myMask.show();
        /// </code></pre>
        /// @constructor
        /// Create a new LoadMask
        /// @param {Mixed} el The element or DOM node, or its id
        /// @param {Object} config The config object
        /// </summary>
        public LoadMask(object el, JsObject config) { }
        public void onBeforeLoad() { }
        public void onLoad() { }
        /// <summary>
        /// Show this LoadMask over the configured Element.
        /// </summary>
        public void show() { }
        /// <summary>
        /// Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
        /// @type Boolean
        /// </summary>
        public bool disabled { get; set; }
        /// <summary>
        /// @cfg {String} msg
        /// The text to display in a centered loading message box (defaults to 'Loading...')
        /// </summary>
        public JsString msg { get; set; }
        /// <summary>
        /// @cfg {String} msgCls
        /// The CSS class to apply to the loading message element (defaults to "x-mask-loading")
        /// </summary>
        public JsString msgCls { get; set; }
    }
    #endregion
    #region PagingToolbar
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PagingToolbar : Ext.Toolbar
    {
        public void beforeLoad() { }
        /// <summary>
        /// Binds the paging toolbar to the specified {@link Ext.data.Store} <b>(deprecated)</b>
        /// @param {Ext.data.Store} store The data store to bind
        /// </summary>
        public void bind(Store store) { }
        /// <summary>
        /// Binds the paging toolbar to the specified {@link Ext.data.Store}
        /// @param {Store} store The store to bind to this toolbar
        /// @param {Boolean} initial (Optional) true to not remove listeners
        /// </summary>
        public void bindStore(object store, bool initial) { }
        /// <summary>
        /// Change the active page
        /// @param {Integer} page The page to display
        /// </summary>
        public void changePage(object page) { }
        public void doLoad(object start) { }
        /// <summary>
        /// Refresh the current page, has the same effect as clicking the 'refresh' button.
        /// </summary>
        public void doRefresh() { }
        public void getPageData() { }
        public void getParams() { }
        public void initComponent() { }
        /// <summary>
        /// Move to the first page, has the same effect as clicking the 'first' button.
        /// </summary>
        public void moveFirst() { }
        /// <summary>
        /// Move to the last page, has the same effect as clicking the 'last' button.
        /// </summary>
        public void moveLast() { }
        /// <summary>
        /// Move to the next page, has the same effect as clicking the 'next' button.
        /// </summary>
        public void moveNext() { }
        /// <summary>
        /// Move to the previous page, has the same effect as clicking the 'previous' button.
        /// </summary>
        public void movePrevious() { }
        public void onDestroy() { }
        public void onFirstLayout() { }
        public void onLoad(object store, object r, object o) { }
        public void onLoadError() { }
        public void onPagingBlur(object e) { }
        public void onPagingFocus() { }
        public void onPagingKeyDown(object field, object e) { }
        public void readPage(object d) { }
        /// <summary>
        /// Unbinds the paging toolbar from the specified {@link Ext.data.Store} <b>(deprecated)</b>
        /// @param {Ext.data.Store} store The data store to unbind
        /// </summary>
        public void unbind(Store store) { }
        public void updateInfo() { }
        /// <summary>
        /// @cfg {String} afterPageText
        /// Customizable piece of the default paging text (defaults to <tt>'of {0}'</tt>). Note that
        /// this string is formatted using <tt>{0}</tt> as a token that is replaced by the number of
        /// total pages. This token should be preserved when overriding this string if showing the
        /// total page count is desired.
        /// </summary>
        public JsString afterPageText { get; set; }
        /// <summary>
        /// @cfg {String} beforePageText
        /// The text displayed before the input item (defaults to <tt>'Page'</tt>).
        /// </summary>
        public JsString beforePageText { get; set; }
        /// <summary>
        /// @cfg {String} displayMsg
        /// The paging status message to display (defaults to <tt>'Displaying {0} - {1} of {2}'</tt>).
        /// Note that this string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens
        /// that are replaced by the values for start, end and total respectively. These tokens should
        /// be preserved when overriding this string if showing those values is desired.
        /// </summary>
        public JsString displayMsg { get; set; }
        /// <summary>
        /// @cfg {String} emptyMsg
        /// The message to display when no records are found (defaults to 'No data to display')
        /// </summary>
        public JsString emptyMsg { get; set; }
        /// <summary>
        /// @cfg {String} firstText
        /// The quicktip text displayed for the first page button (defaults to <tt>'First Page'</tt>).
        /// <b>Note</b>: quick tips must be initialized for the quicktip to show.
        /// </summary>
        public JsString firstText { get; set; }
        /// <summary>
        /// @cfg {String} lastText
        /// The quicktip text displayed for the last page button (defaults to <tt>'Last Page'</tt>).
        /// <b>Note</b>: quick tips must be initialized for the quicktip to show.
        /// </summary>
        public JsString lastText { get; set; }
        /// <summary>
        /// @cfg {String} nextText
        /// The quicktip text displayed for the next page button (defaults to <tt>'Next Page'</tt>).
        /// <b>Note</b>: quick tips must be initialized for the quicktip to show.
        /// </summary>
        public JsString nextText { get; set; }
        /// <summary>
        /// @cfg {Number} pageSize
        /// The number of records to display per page (defaults to <tt>20</tt>)
        /// </summary>
        public object pageSize { get; set; }
        /// <summary>
        /// @cfg {String} prevText
        /// The quicktip text displayed for the previous page button (defaults to <tt>'Previous Page'</tt>).
        /// <b>Note</b>: quick tips must be initialized for the quicktip to show.
        /// </summary>
        public JsString prevText { get; set; }
        /// <summary>
        /// @cfg {String} refreshText
        /// The quicktip text displayed for the Refresh button (defaults to <tt>'Refresh'</tt>).
        /// <b>Note</b>: quick tips must be initialized for the quicktip to show.
        /// </summary>
        public JsString refreshText { get; set; }
    }
    #endregion
    #region Panel
    /// <summary>
    /// @class Ext.Panel
    /// @extends Ext.Container
    /// <p>Panel is a container that has specific functionality and structural components that make
    /// it the perfect building block for application-oriented user interfaces.</p>
    /// <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
    /// of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
    /// <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
    /// to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
    /// those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
    /// default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
    /// child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
    /// at all.</p>
    /// <p>A Panel may also contain {@link #bbar bottom} and {@link #tbar top} toolbars, along with separate
    /// {@link #header}, {@link #footer} and {@link #body} sections (see {@link #frame} for additional
    /// information).</p>
    /// <p>Panel also provides built-in {@link #collapsible expandable and collapsible behavior}, along with
    /// a variety of {@link #tools prebuilt tool buttons} that can be wired up to provide other customized
    /// behavior.  Panels can be easily dropped into any {@link Ext.Container Container} or layout, and the
    /// layout and rendering pipeline is {@link Ext.Container#add completely managed by the framework}.</p>
    /// @constructor
    /// @param {Object} config The config object
    /// @xtype panel
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Panel : Ext.Container
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class DD : Ext.dd.DragSource
        {
            public DD() { }
            public void autoOffset(object x, object y) { }
            public void b4MouseDown(object e) { }
            public void b4StartDrag(object x, object y) { }
            public DD(object panel, object cfg) { }
            public void endDrag(object e) { }
            public void getDragEl(object e) { }
            public void onInitDrag(object x, object y) { }
        }
        /// <summary>
        /// Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
        /// approach is to add buttons via the {@link #buttons} config.
        /// @param {String/Object} config A valid {@link Ext.Button} config.  A string will become the text for a default
        /// button config, an object will be treated as a button config object.
        /// @param {Function} handler The function to be called on button {@link Ext.Button#click}
        /// @param {Object} scope The scope (<code>this</code> reference) in which the button handler function is executed. Defaults to the Button.
        /// @return {Ext.Button} The button that was added
        /// </summary>
        public Button addButton(object config, JsAction handler, JsObject scope) { return null; }
        public void addTool() { }
        public void adjustBodyHeight(object h) { }
        public void adjustBodyWidth(object w) { }
        public void afterCollapse(object anim) { }
        public void afterEffect(object anim) { }
        public void afterExpand(object anim) { }
        public new void afterRender() { }
        public new void beforeDestroy() { }
        public void beforeEffect(object anim) { }
        /// <summary>
        /// Collapses the panel body so that it becomes hidden.  Fires the {@link #beforecollapse} event which will
        /// cancel the collapse action if it returns false.
        /// @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
        /// {@link #animCollapse} panel config)
        /// @return {Ext.Panel} this
        /// </summary>
        public Panel collapse(bool animate) { return null; }
        public void createClasses() { }
        public void createEffect(object a, object cb, object scope) { }
        public void createElement(object name, object pnode) { }
        public void createFbar(object fbar) { }
        public void createGhost(object cls, object useShim, object appendTo) { }
        public void createToolbar(object tb, object options) { }
        public void createToolHandler(object t, object tc, object overCls, object panel) { }
        public void doAutoLoad() { }
        /// <summary>
        /// Expands the panel body so that it becomes visible.  Fires the {@link #beforeexpand} event which will
        /// cancel the expand action if it returns false.
        /// @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
        /// {@link #animCollapse} panel config)
        /// @return {Ext.Panel} this
        /// </summary>
        public Panel expand(bool animate) { return null; }
        /// <summary>
        /// Returns the {@link Ext.Toolbar toolbar} from the bottom (<code>{@link #bbar}</code>) section of the panel.
        /// @return {Ext.Toolbar} The toolbar
        /// </summary>
        public Toolbar getBottomToolbar() { return null; }
        public void getContentTarget() { }
        /// <summary>
        /// Returns the {@link Ext.Toolbar toolbar} from the footer (<code>{@link #fbar}</code>) section of the panel.
        /// @return {Ext.Toolbar} The toolbar
        /// </summary>
        public Toolbar getFooterToolbar() { return null; }
        /// <summary>
        /// Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
        /// header and footer elements, but not including the body height).  To retrieve the body height see {@link #getInnerHeight}.
        /// @return {Number} The frame height
        /// </summary>
        public JsNumber getFrameHeight() { return null; }
        /// <summary>
        /// Returns the width in pixels of the framing elements of this panel (not including the body width).  To
        /// retrieve the body width see {@link #getInnerWidth}.
        /// @return {Number} The frame width
        /// </summary>
        public JsNumber getFrameWidth() { return null; }
        /// <summary>
        /// Returns the height in pixels of the body element (not including the height of any framing elements).
        /// For the frame height see {@link #getFrameHeight}.
        /// @return {Number} The body height
        /// </summary>
        public JsNumber getInnerHeight() { return null; }
        /// <summary>
        /// Returns the width in pixels of the body element (not including the width of any framing elements).
        /// For the frame width see {@link #getFrameWidth}.
        /// @return {Number} The body width
        /// </summary>
        public JsNumber getInnerWidth() { return null; }
        public void getKeyMap() { }
        public void getLayoutTarget() { }
        /// <summary>
        /// Retrieve a tool by id.
        /// @param {String} id
        /// @return {Object} tool
        /// </summary>
        public JsObject getTool(object id) { return null; }
        public void getToolbarHeight() { }
        /// <summary>
        /// Returns the {@link Ext.Toolbar toolbar} from the top (<code>{@link #tbar}</code>) section of the panel.
        /// @return {Ext.Toolbar} The toolbar
        /// </summary>
        public Toolbar getTopToolbar() { return null; }
        /// <summary>
        /// Get the {@link Ext.Updater} for this panel. Enables you to perform Ajax updates of this panel's body.
        /// @return {Ext.Updater} The Updater
        /// </summary>
        public Updater getUpdater() { return null; }
        public new void initComponent() { }
        public void initDraggable() { }
        public void initEvents() { }
        /// <summary>
        /// Loads this content panel immediately with content returned from an XHR call.
        /// @param {Object/String/Function} config A config object containing any of the following options:
        /// <pre><code>
        /// panel.load({
        /// url: 'your-url.php',
        /// params: {param1: 'foo', param2: 'bar'}, // or a URL encoded string
        /// callback: yourFunction,
        /// scope: yourObject, // optional scope for the callback
        /// discardUrl: false,
        /// nocache: false,
        /// text: 'Loading...',
        /// timeout: 30,
        /// scripts: false
        /// });
        /// </code></pre>
        /// The only required property is url. The optional properties nocache, text and scripts
        /// are shorthand for disableCaching, indicatorText and loadScripts and are used to set their
        /// associated property on this panel Updater instance.
        /// @return {Ext.Panel} this
        /// </summary>
        public Panel load() { return null; }
        public void makeFloating(object cfg) { }
        public void onBodyResize(object w, object h) { }
        public void onCollapse(object doAnim, object animArg) { }
        public void onDisable() { }
        public void onEnable() { }
        public void onExpand(object doAnim, object animArg) { }
        public void onHide() { }
        public void onLayout(object shallow, object force) { }
        public void onPosition() { }
        public void onRender(object ct, object position) { }
        public void onResize(object adjWidth, object adjHeight, object rawWidth, object rawHeight) { }
        public new void onShow() { }
        /// <summary>
        /// Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
        /// icon class if one has already been set and fire the {@link #iconchange} event after completion.
        /// @param {String} cls The new CSS class name
        /// </summary>
        public void setIconClass(JsString cls) { }
        /// <summary>
        /// <p>Sets the title text for the panel and optionally the {@link #iconCls icon class}.</p>
        /// <p>In order to be able to set the title, a header element must have been created
        /// for the Panel. This is triggered either by configuring the Panel with a non-blank <code>{@link #title}</code>,
        /// or configuring it with <code><b>{@link #header}: true</b></code>.</p>
        /// @param {String} title The title text to set
        /// @param {String} iconCls (optional) {@link #iconCls iconCls} A user-defined CSS class that provides the icon image for this panel
        /// </summary>
        public void setTitle(JsString title, JsString iconCls) { }
        public void syncHeight() { }
        public void syncShadow() { }
        /// <summary>
        /// Shortcut for performing an {@link #expand} or {@link #collapse} based on the current state of the panel.
        /// @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
        /// {@link #animCollapse} panel config)
        /// @return {Ext.Panel} this
        /// </summary>
        public Panel toggleCollapse(bool animate) { return null; }
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
        /// <p>Another option available by default is to specify <code>'x-plain'</code> which strips all styling
        /// except for required attributes for Ext layouts to function (e.g. overflow:hidden).
        /// See <code>{@link #unstyled}</code> also.</p>
        /// </summary>
        public JsString baseCls { get; set; }
        /// <summary>
        /// @cfg {String} buttonAlign
        /// The alignment of any {@link #buttons} added to this panel.  Valid values are <code>'right'</code>,
        /// <code>'left'</code> and <code>'center'</code> (defaults to <code>'right'</code>).
        /// </summary>
        public JsString buttonAlign { get; set; }
        /// <summary>
        /// @cfg {Boolean} collapsed
        /// <code>true</code> to render the panel collapsed, <code>false</code> to render it expanded (defaults to
        /// <code>false</code>).
        /// </summary>
        public bool collapsed { get; set; }
        /// <summary>
        /// @cfg {String} collapsedCls
        /// A CSS class to add to the panel's element after it has been collapsed (defaults to
        /// <code>'x-panel-collapsed'</code>).
        /// </summary>
        public JsString collapsedCls { get; set; }
        public JsString collapseEl { get; set; }
        /// <summary>
        /// @cfg {Boolean} collapseFirst
        /// <code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of)
        /// any other tools in the panel's title bar, <code>false</code> to render it last (defaults to <code>true</code>).
        /// </summary>
        public bool collapseFirst { get; set; }
        public new bool deferHeight { get; set; }
        public JsString disabledClass { get; set; }
        /// <summary>
        /// @cfg {String} elements
        /// A comma-delimited list of panel elements to initialize when the panel is rendered.  Normally, this list will be
        /// generated automatically based on the items added to the panel at config time, but sometimes it might be useful to
        /// make sure a structural element is rendered even if not specified at config time (for example, you may want
        /// to add a button or toolbar dynamically after the panel has been rendered).  Adding those elements to this
        /// list will allocate the required placeholders in the panel when it is rendered.  Valid values are<div class="mdetail-params"><ul>
        /// <li><code>header</code></li>
        /// <li><code>tbar</code> (top bar)</li>
        /// <li><code>body</code></li>
        /// <li><code>bbar</code> (bottom bar)</li>
        /// <li><code>footer</code></li>
        /// </ul></div>
        /// Defaults to '<code>body</code>'.
        /// </summary>
        public JsString elements { get; set; }
        /// <summary>
        /// @cfg {Boolean} headerAsText
        /// <code>true</code> to display the panel <code>{@link #title}</code> in the <code>{@link #header}</code>,
        /// <code>false</code> to hide it (defaults to <code>true</code>).
        /// </summary>
        public bool headerAsText { get; set; }
        /// <summary>
        /// @cfg {Boolean} maskDisabled
        /// <code>true</code> to mask the panel when it is {@link #disabled}, <code>false</code> to not mask it (defaults
        /// to <code>true</code>).  Either way, the panel will always tell its contained elements to disable themselves
        /// when it is disabled, but masking the panel can provide an additional visual cue that the panel is
        /// disabled.
        /// </summary>
        public bool maskDisabled { get; set; }
        /// <summary>
        /// @cfg {Number} minButtonWidth
        /// Minimum width in pixels of all {@link #buttons} in this panel (defaults to <code>75</code>)
        /// </summary>
        public object minButtonWidth { get; set; }
        /// <summary>
        /// @cfg {Boolean} preventBodyReset
        /// Defaults to <code>false</code>.  When set to <code>true</code>, an extra css class <code>'x-panel-normal'</code>
        /// will be added to the panel's element, effectively applying css styles suggested by the W3C
        /// (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b> element (not the header,
        /// footer, etc.).
        /// </summary>
        public bool preventBodyReset { get; set; }
        /// <summary>
        /// The event to listen to for resizing in layouts. Defaults to <tt>'bodyresize'</tt>.
        /// </summary>
        public new JsString resizeEvent { get; set; }
        public JsString slideAnchor { get; set; }
        public JsString toolTarget { get; set; }
    }
    #endregion
    #region ProgressBar
    /// <summary>
    /// @class Ext.ProgressBar
    /// @extends Ext.BoxComponent
    /// <p>An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.</p>
    /// <p>In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the
    /// progress bar as needed from your own code.  This method is most appropriate when you want to show progress
    /// throughout an operation that has predictable points of interest at which you can update the control.</p>
    /// <p>In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it
    /// once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
    /// and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in
    /// which you have no need for indicating intermediate progress.</p>
    /// @cfg {Float} value A floating point value between 0 and 1 (e.g., .5, defaults to 0)
    /// @cfg {String} text The progress bar text (defaults to '')
    /// @cfg {Mixed} textEl The element to render the progress text to (defaults to the progress
    /// bar's internal text element)
    /// @cfg {String} id The progress bar element's id (defaults to an auto-generated id)
    /// @xtype progress
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ProgressBar : Ext.BoxComponent
    {
        public ProgressBar(ProgressBarConfig config) { }
        public new void afterRender() { }
        public void clearTimer() { }
        public new void initComponent() { }
        /// <summary>
        /// Returns true if the progress bar is currently in a {@link #wait} operation
        /// @return {Boolean} True if waiting, else false
        /// </summary>
        public bool isWaiting() { return false; }
        public void onDestroy() { }
        public void onRender(object ct, object position) { }
        /// <summary>
        /// Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
        /// bar will also be hidden (using the {@link #hideMode} property internally).
        /// @param {Boolean} hide (optional) True to hide the progress bar (defaults to false)
        /// @return {Ext.ProgressBar} this
        /// </summary>
        public ProgressBar reset(bool hide) { return null; }
        /// <summary>
        /// Sets the size of the progress bar.
        /// @param {Number} width The new width in pixels
        /// @param {Number} height The new height in pixels
        /// @return {Ext.ProgressBar} this
        /// </summary>
        public ProgressBar setSize(object w, object h) { return null; }
        /// <summary>
        /// Synchronizes the inner bar width to the proper proportion of the total componet width based
        /// on the current progress {@link #value}.  This will be called automatically when the ProgressBar
        /// is resized by a layout, but if it is rendered auto width, this method can be called from
        /// another resize handler to sync the ProgressBar if necessary.
        /// </summary>
        public void syncProgressBar() { }
        /// <summary>
        /// Updates the progress bar value, and optionally its text.  If the text argument is not specified,
        /// any existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even
        /// if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for
        /// determining when the progress is complete and calling {@link #reset} to clear and/or hide the control.
        /// @param {Float} value (optional) A floating point value between 0 and 1 (e.g., .5, defaults to 0)
        /// @param {String} text (optional) The string to display in the progress text element (defaults to '')
        /// @param {Boolean} animate (optional) Whether to animate the transition of the progress bar. If this value is
        /// not specified, the default for the class is used (default to false)
        /// @return {Ext.ProgressBar} this
        /// </summary>
        public ProgressBar updateProgress(object value, JsString text, bool animate) { return null; }
        /// <summary>
        /// Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
        /// bar itself will display the updated text.
        /// @param {String} text (optional) The string to display in the progress text element (defaults to '')
        /// @return {Ext.ProgressBar} this
        /// </summary>
        public ProgressBar updateText(JsString text) { return null; }
        /// <summary>
        /// Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
        /// bar will automatically reset after a fixed amount of time and optionally call a callback function
        /// if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
        /// be manually cleared by calling {@link #reset}.  The wait method accepts a config object with
        /// the following properties:
        /// <pre>
        /// Property   Type          Description
        /// ---------- ------------  ----------------------------------------------------------------------
        /// duration   Number        The length of time in milliseconds that the progress bar should
        /// run before resetting itself (defaults to undefined, in which case it
        /// will run indefinitely until reset is called)
        /// interval   Number        The length of time in milliseconds between each progress update
        /// (defaults to 1000 ms)
        /// animate    Boolean       Whether to animate the transition of the progress bar. If this value is
        /// not specified, the default for the class is used.
        /// increment  Number        The number of progress update segments to display within the progress
        /// bar (defaults to 10).  If the bar reaches the end and is still
        /// updating, it will automatically wrap back to the beginning.
        /// text       String        Optional text to display in the progress bar element (defaults to '').
        /// fn         Function      A callback function to execute after the progress bar finishes auto-
        /// updating.  The function will be called with no arguments.  This function
        /// will be ignored if duration is not specified since in that case the
        /// progress bar can only be stopped programmatically, so any required function
        /// should be called by the same code after it resets the progress bar.
        /// scope      Object        The scope that is passed to the callback function (only applies when
        /// duration and fn are both passed).
        /// </pre>
        /// *
        /// Example usage:
        /// <pre><code>
        /// var p = new Ext.ProgressBar({
        /// renderTo: 'my-el'
        /// });
        /// //Wait for 5 seconds, then update the status el (progress bar will auto-reset)
        /// p.wait({
        /// interval: 100, //bar will move fast!
        /// duration: 5000,
        /// increment: 15,
        /// text: 'Updating...',
        /// scope: this,
        /// fn: function(){
        /// Ext.fly('status').update('Done!');
        /// }
        /// });
        /// //Or update indefinitely until some async action completes, then reset manually
        /// p.wait();
        /// myAction.on('complete', function(){
        /// p.reset();
        /// Ext.fly('status').update('Done!');
        /// });
        /// </code></pre>
        /// @param {Object} config (optional) Configuration options
        /// @return {Ext.ProgressBar} this
        /// </summary>
        public ProgressBar wait(object o) { return null; }
        /// <summary>
        /// @cfg {Boolean} animate
        /// True to animate the progress bar during transitions (defaults to false)
        /// </summary>
        public bool animate { get; set; }
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
        /// </summary>
        public JsString baseCls { get; set; }
        public object waitTimer { get; set; }
    }
    #endregion
    #region ProgressBarConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class ProgressBarConfig
    {
        /// <summary>
        /// The progress bar element's id (defaults to an auto-generated id)
        /// </summary>
        public JsString id { get; set; }
        /// <summary>
        /// The progress bar text (defaults to '')
        /// </summary>
        public JsString text { get; set; }
        /// <summary>
        /// The element to render the progress text to (defaults to the progress
        /// </summary>
        public object textEl { get; set; }
        /// <summary>
        /// A floating point value between 0 and 1 (e.g., .5, defaults to 0)
        /// </summary>
        public object value { get; set; }
    }
    #endregion
    #region QuickTip
    /// <summary>
    /// @class Ext.QuickTip
    /// @extends Ext.ToolTip
    /// @xtype quicktip
    /// A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
    /// {@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples.
    /// @constructor
    /// Create a new Tip
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class QuickTip : Ext.ToolTip
    {
        /// <summary>
        /// Hides a visible tip or cancels an impending show for a particular element.
        /// @param {String/HTMLElement/Element} el The element that is the target of the tip.
        /// </summary>
        public void cancelShow(object el) { }
        public void getTipCfg(object e) { }
        public new void hide() { }
        public new void initComponent() { }
        public new void onTargetOut(object e) { }
        public new void onTargetOver(object e) { }
        /// <summary>
        /// Configures a new quick tip instance and assigns it to a target element.  The following config values are
        /// supported (for example usage, see the {@link Ext.QuickTips} class header):
        /// <div class="mdetail-params"><ul>
        /// <li>autoHide</li>
        /// <li>cls</li>
        /// <li>dismissDelay (overrides the singleton value)</li>
        /// <li>target (required)</li>
        /// <li>text (required)</li>
        /// <li>title</li>
        /// <li>width</li></ul></div>
        /// @param {Object} config The config object
        /// </summary>
        public void register(JsObject config) { }
        public new void showAt(object xy) { }
        /// <summary>
        /// Removes this quick tip from its element and destroys it.
        /// @param {String/HTMLElement/Element} el The element from which the quick tip is to be removed.
        /// </summary>
        public void unregister(object el) { }
        /// <summary>
        /// @cfg {Boolean} interceptTitles True to automatically use the element's DOM title value if available (defaults to false).
        /// </summary>
        public bool interceptTitles { get; set; }
    }
    #endregion
    #region Resizable
    /// <summary>
    /// @class Ext.Resizable
    /// @extends Ext.util.Observable
    /// <p>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
    /// and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
    /// the textarea in a div and set 'resizeChild' to true (or to the id of the element), <b>or</b> set wrap:true in your config and
    /// the element will be wrapped for you automatically.</p>
    /// <p>Here is the list of valid resize handles:</p>
    /// <pre>
    /// Value   Description
    /// ------  -------------------
    /// 'n'     north
    /// 's'     south
    /// 'e'     east
    /// 'w'     west
    /// 'nw'    northwest
    /// 'sw'    southwest
    /// 'se'    southeast
    /// 'ne'    northeast
    /// 'all'   all
    /// </pre>
    /// <p>Here's an example showing the creation of a typical Resizable:</p>
    /// <pre><code>
    /// var resizer = new Ext.Resizable('element-id', {
    /// handles: 'all',
    /// minWidth: 200,
    /// minHeight: 100,
    /// maxWidth: 500,
    /// maxHeight: 400,
    /// pinned: true
    /// });
    /// resizer.on('resize', myHandler);
    /// </code></pre>
    /// <p>To hide a particular handle, set its display to none in CSS, or through script:<br>
    /// resizer.east.setDisplayed(false);</p>
    /// @constructor
    /// Create a new resizable component
    /// @param {Mixed} el The id or element to resize
    /// @param {Object} config configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Resizable : Ext.util.Observable
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Handle : JsObject
        {
            public Handle() { }
            public void afterResize(object rz) { }
            public Handle(object rz, object pos, object disableTrackOver, object transparent, object cls) { }
            public void destroy() { }
            public void onMouseDown(object e) { }
            public void onMouseOut(object e) { }
            public void onMouseOver(object e) { }
        }
        [JsType(JsMode.Prototype, Export = false)]
        public partial class positions
        {
            public static JsString e { get; set; }
            public static JsString n { get; set; }
            public static JsString ne { get; set; }
            public static JsString nw { get; set; }
            public static JsString s { get; set; }
            public static JsString se { get; set; }
            public static JsString sw { get; set; }
            public static JsString w { get; set; }
        }
        public Resizable() { }
        public void constrain(object v, object diff, object m, object mx) { }
        public Resizable(object el, object config) { }
        /// <summary>
        /// Destroys this resizable. If the element was wrapped and
        /// removeEl is not true then the element remains.
        /// @param {Boolean} removeEl (optional) true to remove the element from the DOM
        /// </summary>
        public void destroy(bool removeEl) { }
        /// <summary>
        /// Returns the element this component is bound to.
        /// @return {Ext.Element}
        /// </summary>
        public void getEl() { }
        /// <summary>
        /// Returns the resizeChild element (or null).
        /// @return {Ext.Element}
        /// </summary>
        public void getResizeChild() { }
        public void handleOut() { }
        public void handleOver() { }
        public void onMouseDown(object handle, object e) { }
        public void onMouseMove(object e) { }
        public void onMouseUp(object e) { }
        /// <summary>
        /// <p>Performs resizing of the associated Element. This method is called internally by this
        /// class, and should not be called by user code.</p>
        /// <p>If a Resizable is being used to resize an Element which encapsulates a more complex UI
        /// component such as a Panel, this method may be overridden by specifying an implementation
        /// as a config option to provide appropriate behaviour at the end of the resize operation on
        /// mouseup, for example resizing the Panel, and relaying the Panel's content.</p>
        /// <p>The new area to be resized to is available by examining the state of the {@link #proxy}
        /// Element. Example:
        /// <pre><code>
        /// new Ext.Panel({
        /// title: 'Resize me',
        /// x: 100,
        /// y: 100,
        /// renderTo: Ext.getBody(),
        /// floating: true,
        /// frame: true,
        /// width: 400,
        /// height: 200,
        /// listeners: {
        /// render: function(p) {
        /// new Ext.Resizable(p.getEl(), {
        /// handles: 'all',
        /// pinned: true,
        /// transparent: true,
        /// resizeElement: function() {
        /// var box = this.proxy.getBox();
        /// p.updateBox(box);
        /// if (p.layout) {
        /// p.doLayout();
        /// }
        /// return box;
        /// }
        /// });
        /// }
        /// }
        /// }).show();
        /// </code></pre>
        /// </summary>
        public void resizeElement() { }
        /// <summary>
        /// Perform a manual resize and fires the 'resize' event.
        /// @param {Number} width
        /// @param {Number} height
        /// </summary>
        public void resizeTo(object width, object height) { }
        public void snap(object value, object inc, object min) { }
        public void startSizing(object e, object handle) { }
        public void syncHandleHeight() { }
        public void updateChildSize() { }
        /// <summary>
        /// @cfg {Boolean} animate True to animate the resize (not compatible with dynamic sizing, defaults to false)
        /// </summary>
        public bool animate { get; set; }
        /// <summary>
        /// @cfg {Boolean} disableTrackOver True to disable mouse tracking. This is only applied at config time. (defaults to false)
        /// </summary>
        public bool disableTrackOver { get; set; }
        /// <summary>
        /// @cfg {Boolean} draggable Convenience to initialize drag drop (defaults to false)
        /// </summary>
        public bool draggable { get; set; }
        /// <summary>
        /// @cfg {Number} duration Animation duration if animate = true (defaults to 0.35)
        /// </summary>
        public JsNumber duration { get; set; }
        /// <summary>
        /// @cfg {Boolean} dynamic True to resize the element while dragging instead of using a proxy (defaults to false)
        /// </summary>
        public bool dynamic { get; set; }
        /// <summary>
        /// @cfg {String} easing Animation easing if animate = true (defaults to <tt>'easingOutStrong'</tt>)
        /// </summary>
        public JsString easing { get; set; }
        /// <summary>
        /// @cfg {Boolean} enabled False to disable resizing (defaults to true)
        /// </summary>
        public bool enabled { get; set; }
        /// <summary>
        /// @cfg {String} handles String consisting of the resize handles to display (defaults to undefined).
        /// Specify either <tt>'all'</tt> or any of <tt>'n s e w ne nw se sw'</tt>.
        /// </summary>
        public JsString handles { get; set; }
        /// <summary>
        /// @cfg {Number} height The height of the element in pixels (defaults to null)
        /// </summary>
        public JsNumber height { get; set; }
        /// <summary>
        /// @cfg {Number} heightIncrement The increment to snap the height resize in pixels
        /// (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
        /// </summary>
        public JsNumber heightIncrement { get; set; }
        /// <summary>
        /// @cfg {Number} maxHeight The maximum height for the element (defaults to 10000)
        /// </summary>
        public JsNumber maxHeight { get; set; }
        /// <summary>
        /// @cfg {Number} maxWidth The maximum width for the element (defaults to 10000)
        /// </summary>
        public JsNumber maxWidth { get; set; }
        /// <summary>
        /// @cfg {Number} minHeight The minimum height for the element (defaults to 5)
        /// </summary>
        public JsNumber minHeight { get; set; }
        /// <summary>
        /// @cfg {Number} minWidth The minimum width for the element (defaults to 5)
        /// </summary>
        public JsNumber minWidth { get; set; }
        /// <summary>
        /// @cfg {Number} minX The minimum x for the element (defaults to 0)
        /// </summary>
        public JsNumber minX { get; set; }
        /// <summary>
        /// @cfg {Number} minY The minimum x for the element (defaults to 0)
        /// </summary>
        public JsNumber minY { get; set; }
        /// <summary>
        /// @cfg {Boolean} multiDirectional <b>Deprecated</b>.  Deprecated style of adding multi-direction resize handles.
        /// </summary>
        public bool multiDirectional { get; set; }
        /// <summary>
        /// @cfg {Boolean} pinned True to ensure that the resize handles are always visible, false to display them only when the
        /// user mouses over the resizable borders. This is only applied at config time. (defaults to false)
        /// </summary>
        public bool pinned { get; set; }
        /// <summary>
        /// @cfg {Boolean} preserveRatio True to preserve the original ratio between height
        /// and width during resize (defaults to false)
        /// </summary>
        public bool preserveRatio { get; set; }
        /// <summary>
        /// @cfg {Boolean/String/Element} resizeChild True to resize the first child, or id/element to resize (defaults to false)
        /// </summary>
        public object resizeChild { get; set; }
        /// <summary>
        /// @cfg {Boolean} transparent True for transparent handles. This is only applied at config time. (defaults to false)
        /// </summary>
        public bool transparent { get; set; }
        /// <summary>
        /// @cfg {Number} width The width of the element in pixels (defaults to null)
        /// </summary>
        public JsNumber width { get; set; }
        /// <summary>
        /// @cfg {Number} widthIncrement The increment to snap the width resize in pixels
        /// (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
        /// </summary>
        public JsNumber widthIncrement { get; set; }
    }
    #endregion
    #region Shadow
    /// <summary>
    /// @class Ext.Shadow
    /// Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
    /// and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
    /// functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.
    /// @constructor
    /// Create a new Shadow
    /// @param {Object} config The config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Shadow
    {
        public Shadow() { }
        /// <summary>
        /// Hides this shadow
        /// </summary>
        public void hide() { }
        /// <summary>
        /// Returns true if the shadow is visible, else false
        /// </summary>
        public void isVisible() { }
        /// <summary>
        /// Direct alignment when values are already available. Show must be called at least once before
        /// calling this method to ensure it is initialized.
        /// @param {Number} left The target element left position
        /// @param {Number} top The target element top position
        /// @param {Number} width The target element width
        /// @param {Number} height The target element height
        /// </summary>
        public void realign(object l, object t, object w, object h) { }
        /// <summary>
        /// Adjust the z-index of this shadow
        /// @param {Number} zindex The new z-index
        /// </summary>
        public void setZIndex(object z) { }
        /// <summary>
        /// @class Ext.Shadow
        /// Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
        /// and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
        /// functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.
        /// @constructor
        /// Create a new Shadow
        /// @param {Object} config The config object
        /// </summary>
        public Shadow(JsObject config) { }
        /// <summary>
        /// Displays the shadow under the target element
        /// @param {Mixed} targetEl The id or element under which the shadow should display
        /// </summary>
        public void show(object target) { }
        public JsString defaultMode { get; set; }
        /// <summary>
        /// @cfg {String} offset
        /// The number of pixels to offset the shadow from the element (defaults to <tt>4</tt>)
        /// </summary>
        public object offset { get; set; }
    }
    #endregion
    #region Spacer
    /// <summary>
    /// @class Ext.Spacer
    /// @extends Ext.BoxComponent
    /// <p>Used to provide a sizable space in a layout.</p>
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Spacer : Ext.BoxComponent
    {
        public JsString autoEl { get; set; }
    }
    #endregion
    #region SplitBar
    /// <summary>
    /// @class Ext.SplitBar
    /// @extends Ext.util.Observable
    /// Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
    /// <br><br>
    /// Usage:
    /// <pre><code>
    /// var split = new Ext.SplitBar("elementToDrag", "elementToSize",
    /// Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);
    /// split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter("container"));
    /// split.minSize = 100;
    /// split.maxSize = 600;
    /// split.animate = true;
    /// split.on('moved', splitterMoved);
    /// </code></pre>
    /// @constructor
    /// Create a new SplitBar
    /// @param {Mixed} dragElement The element to be dragged and act as the SplitBar.
    /// @param {Mixed} resizingElement The element to be resized based on where the SplitBar element is dragged
    /// @param {Number} orientation (optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)
    /// @param {Number} placement (optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or
    /// Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial
    /// position of the SplitBar).
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SplitBar
    {
        public SplitBar() { }
        /// <summary>
        /// @private static Create our own proxy element element. So it will be the same same size on all browsers, we won't use borders. Instead we use a background color.
        /// </summary>
        public static void createProxy(object dir) { }
        /// <summary>
        /// @class Ext.SplitBar
        /// @extends Ext.util.Observable
        /// Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
        /// <br><br>
        /// Usage:
        /// <pre><code>
        /// var split = new Ext.SplitBar("elementToDrag", "elementToSize",
        /// Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);
        /// split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter("container"));
        /// split.minSize = 100;
        /// split.maxSize = 600;
        /// split.animate = true;
        /// split.on('moved', splitterMoved);
        /// </code></pre>
        /// @constructor
        /// Create a new SplitBar
        /// @param {Mixed} dragElement The element to be dragged and act as the SplitBar.
        /// @param {Mixed} resizingElement The element to be resized based on where the SplitBar element is dragged
        /// @param {Number} orientation (optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)
        /// @param {Number} placement (optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or
        /// Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial
        /// position of the SplitBar).
        /// </summary>
        public SplitBar(object dragElement, object resizingElement, JsNumber orientation, JsNumber placement, object existingProxy) { }
    }
    #endregion
    #region SplitButton
    /// <summary>
    /// @class Ext.SplitButton
    /// @extends Ext.Button
    /// A split button that provides a built-in dropdown arrow that can fire an event separately from the default
    /// click event of the button.  Typically this would be used to display a dropdown menu that provides additional
    /// options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
    /// <pre><code>
    /// // display a dropdown menu:
    /// new Ext.SplitButton({
    /// renderTo: 'button-ct', // the container id
    /// text: 'Options',
    /// handler: optionsHandler, // handle a click on the button itself
    /// menu: new Ext.menu.Menu({
    /// items: [
    /// // these items will render as dropdown menu items when the arrow is clicked:
    /// {text: 'Item 1', handler: item1Handler},
    /// {text: 'Item 2', handler: item2Handler}
    /// ]
    /// })
    /// });
    /// // Instead of showing a menu, you provide any type of custom
    /// // functionality you want when the dropdown arrow is clicked:
    /// new Ext.SplitButton({
    /// renderTo: 'button-ct',
    /// text: 'Options',
    /// handler: optionsHandler,
    /// arrowHandler: myCustomHandler
    /// });
    /// </code></pre>
    /// @cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)
    /// @cfg {String} arrowTooltip The title attribute of the arrow
    /// @constructor
    /// Create a new menu button
    /// @param {Object} config The config object
    /// @xtype splitbutton
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SplitButton : Ext.Button
    {
        public SplitButton(SplitButtonConfig config) : base(null) { }
        public new void getMenuClass() { }
        public new void initComponent() { }
        public void isClickOnArrow(object e) { }
        public new void isMenuTriggerOut(object e, object @internal) { }
        public void isMenuTriggerOver(object e) { }
        public void onClick(object e, object t) { }
        public void onRender() { }
        /// <summary>
        /// Sets this button's arrow click handler.
        /// @param {Function} handler The function to call when the arrow is clicked
        /// @param {Object} scope (optional) Scope for the function passed above
        /// </summary>
        public void setArrowHandler(JsAction handler, JsObject scope) { }
        public JsString arrowSelector { get; set; }
        public bool split { get; set; }
    }
    #endregion
    #region SplitButtonConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class SplitButtonConfig
    {
        /// <summary>
        /// A function called when the arrow button is clicked (can be used instead of click event)
        /// </summary>
        public JsAction arrowHandler { get; set; }
        /// <summary>
        /// The title attribute of the arrow
        /// </summary>
        public JsString arrowTooltip { get; set; }
    }
    #endregion
    #region StoreMgr
    /// <summary>
    /// @class Ext.StoreMgr
    /// @extends Ext.util.MixedCollection
    /// The default global group of stores.
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class StoreMgr
    {
    }
    #endregion
    #region TabPanel
    /// <summary>
    /// @class Ext.TabPanel
    /// <p>A basic tab container. TabPanels can be used exactly like a standard {@link Ext.Panel}
    /// for layout purposes, but also have special support for containing child Components
    /// (<tt>{@link Ext.Container#items items}</tt>) that are managed using a
    /// {@link Ext.layout.CardLayout CardLayout layout manager}, and displayed as separate tabs.</p>
    /// *
    /// <b>Note:</b> By default, a tab's close tool <i>destroys</i> the child tab Component
    /// and all its descendants. This makes the child tab Component, and all its descendants <b>unusable</b>. To enable
    /// re-use of a tab, configure the TabPanel with <b><code>{@link #autoDestroy autoDestroy: false}</code></b>.
    /// *
    /// <p><b><u>TabPanel header/footer elements</u></b></p>
    /// <p>TabPanels use their {@link Ext.Panel#header header} or {@link Ext.Panel#footer footer} element
    /// (depending on the {@link #tabPosition} configuration) to accommodate the tab selector buttons.
    /// This means that a TabPanel will not display any configured title, and will not display any
    /// configured header {@link Ext.Panel#tools tools}.</p>
    /// <p>To display a header, embed the TabPanel in a {@link Ext.Panel Panel} which uses
    /// <b><tt>{@link Ext.Container#layout layout:'fit'}</tt></b>.</p>
    /// *
    /// <p><b><u>Tab Events</u></b></p>
    /// <p>There is no actual tab class &mdash; each tab is simply a {@link Ext.BoxComponent Component}
    /// such as a {@link Ext.Panel Panel}. However, when rendered in a TabPanel, each child Component
    /// can fire additional events that only exist for tabs and are not available from other Components.
    /// These events are:</p>
    /// <div><ul class="mdetail-params">
    /// <li><tt><b>{@link Ext.Panel#activate activate}</b></tt> : Fires when this Component becomes
    /// the active tab.</li>
    /// <li><tt><b>{@link Ext.Panel#deactivate deactivate}</b></tt> : Fires when the Component that
    /// was the active tab becomes deactivated.</li>
    /// <li><tt><b>{@link Ext.Panel#beforeclose beforeclose}</b></tt> : Fires when the user clicks on the close tool of a closeable tab.
    /// May be vetoed by returning <code>false</code> from a handler.</li>
    /// <li><tt><b>{@link Ext.Panel#close close}</b></tt> : Fires a closeable tab has been closed by the user.</li>
    /// </ul></div>
    /// <p><b><u>Creating TabPanels from Code</u></b></p>
    /// <p>TabPanels can be created and rendered completely in code, as in this example:</p>
    /// <pre><code>
    /// var tabs = new Ext.TabPanel({
    /// renderTo: Ext.getBody(),
    /// activeTab: 0,
    /// items: [{
    /// title: 'Tab 1',
    /// html: 'A simple tab'
    /// },{
    /// title: 'Tab 2',
    /// html: 'Another one'
    /// }]
    /// });
    /// </code></pre>
    /// <p><b><u>Creating TabPanels from Existing Markup</u></b></p>
    /// <p>TabPanels can also be rendered from pre-existing markup in a couple of ways.</p>
    /// <div><ul class="mdetail-params">
    /// *
    /// <li>Pre-Structured Markup</li>
    /// <div class="sub-desc">
    /// <p>A container div with one or more nested tab divs with class <tt>'x-tab'</tt> can be rendered entirely
    /// from existing markup (See the {@link #autoTabs} example).</p>
    /// </div>
    /// *
    /// <li>Un-Structured Markup</li>
    /// <div class="sub-desc">
    /// <p>A TabPanel can also be rendered from markup that is not strictly structured by simply specifying by id
    /// which elements should be the container and the tabs. Using this method tab content can be pulled from different
    /// elements within the page by id regardless of page structure. For example:</p>
    /// <pre><code>
    /// var tabs = new Ext.TabPanel({
    /// renderTo: 'my-tabs',
    /// activeTab: 0,
    /// items:[
    /// {contentEl:'tab1', title:'Tab 1'},
    /// {contentEl:'tab2', title:'Tab 2'}
    /// ]
    /// });
    /// // Note that the tabs do not have to be nested within the container (although they can be)
    /// &lt;div id="my-tabs">&lt;/div>
    /// &lt;div id="tab1" class="x-hide-display">A simple tab&lt;/div>
    /// &lt;div id="tab2" class="x-hide-display">Another one&lt;/div>
    /// </code></pre>
    /// Note that the tab divs in this example contain the class <tt>'x-hide-display'</tt> so that they can be rendered
    /// deferred without displaying outside the tabs. You could alternately set <tt>{@link #deferredRender} = false </tt>
    /// to render all content tabs on page load.
    /// </div>
    /// *
    /// </ul></div>
    /// *
    /// @extends Ext.Panel
    /// @constructor
    /// @param {Object} config The configuration options
    /// @xtype tabpanel
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TabPanel : Ext.Panel
    {
        public static void AccessStack() { }
        public new void adjustBodyWidth(object w) { }
        public new void afterRender() { }
        public void autoScrollTabs() { }
        public void autoSizeTabs() { }
        public new void beforeDestroy() { }
        /// <summary>
        /// Suspends any internal calculations or scrolling while doing a bulk operation. See {@link #endUpdate}
        /// </summary>
        public void beginUpdate() { }
        public void createScrollers() { }
        public void delegateUpdates() { }
        /// <summary>
        /// Resumes calculations and scrolling at the end of a bulk operation. See {@link #beginUpdate}
        /// </summary>
        public void endUpdate() { }
        public void findTargets(object e) { }
        /// <summary>
        /// Returns the Component which is the currently active tab. <b>Note that before the TabPanel
        /// first activates a child Component, this method will return whatever was configured in the
        /// {@link #activeTab} config option.</b>
        /// @return {BoxComponent} The currently active child Component if one <i>is</i> active, or the {@link #activeTab} config value.
        /// </summary>
        public void getActiveTab() { }
        /// <summary>
        /// Gets the specified tab by id.
        /// @param {String} id The tab id
        /// @return {Panel} The tab
        /// </summary>
        public void getItem(object item) { }
        public void getScrollAnim() { }
        public void getScrollArea() { }
        public void getScrollIncrement() { }
        public void getScrollPos() { }
        public void getScrollWidth() { }
        /// <summary>
        /// Gets the DOM element for the tab strip item which activates the child panel with the specified
        /// ID. Access this to change the visual treatment of the item, for example by changing the CSS class name.
        /// @param {Panel/Number/String} tab The tab component, or the tab's index, or the tabs id or itemId.
        /// @return {HTMLElement} The DOM node
        /// </summary>
        public HtmlElement getTabEl(object item) { return null; }
        /// <summary>
        /// <p>Provides template arguments for rendering a tab selector item in the tab strip.</p>
        /// <p>This method returns an object hash containing properties used by the TabPanel's <tt>{@link #itemTpl}</tt>
        /// to create a formatted, clickable tab selector element. The properties which must be returned
        /// are:</p><div class="mdetail-params"><ul>
        /// <li><b>id</b> : String<div class="sub-desc">A unique identifier which links to the item</div></li>
        /// <li><b>text</b> : String<div class="sub-desc">The text to display</div></li>
        /// <li><b>cls</b> : String<div class="sub-desc">The CSS class name</div></li>
        /// <li><b>iconCls</b> : String<div class="sub-desc">A CSS class to provide appearance for an icon.</div></li>
        /// </ul></div>
        /// @param {Ext.BoxComponent} item The {@link Ext.BoxComponent BoxComponent} for which to create a selector element in the tab strip.
        /// @return {Object} An object hash containing the properties required to render the selector element.
        /// </summary>
        public JsObject getTemplateArgs(BoxComponent item) { return null; }
        /// <summary>
        /// Hides the tab strip item for the passed tab
        /// @param {Number/String/Panel} item The tab index, id or item
        /// </summary>
        public void hideTabStripItem(object item) { }
        public new void initComponent() { }
        public new void initEvents() { }
        public void initTab(object item, object index) { }
        public new void onAdd(object c) { }
        public new void onBeforeAdd(object item) { }
        public void onBeforeShowItem(object item) { }
        public void onItemDisabled(object item) { }
        public void onItemEnabled(object item) { }
        public void onItemIconChanged(object item, object iconCls, object oldCls) { }
        public void onItemTitleChanged(object item) { }
        public new void onRemove(object c) { }
        public new void onRender(object ct, object position) { }
        public void onResize() { }
        public void onScrollLeft() { }
        public void onScrollRight() { }
        public void onStripContextMenu(object e) { }
        public void onStripMouseDown(object e) { }
        public void onWheel(object e) { }
        /// <summary>
        /// True to scan the markup in this tab panel for <tt>{@link #autoTabs}</tt> using the
        /// <tt>{@link #autoTabSelector}</tt>
        /// @param {Boolean} removeExisting True to remove existing tabs
        /// </summary>
        public void readTabs(bool removeExisting) { }
        public void scrollTo(object pos, object animate) { }
        public void scrollToTab(object item, object animate) { }
        /// <summary>
        /// Sets the specified tab as the active tab. This method fires the {@link #beforetabchange} event which
        /// can <tt>return false</tt> to cancel the tab change.
        /// @param {String/Number} item
        /// The id or tab Panel to activate. This parameter may be any of the following:
        /// <div><ul class="mdetail-params">
        /// <li>a <b><tt>String</tt></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>
        /// or <code>{@link Ext.Component#id id}</code> of the child component </li>
        /// <li>a <b><tt>Number</tt></b> : representing the position of the child component
        /// within the <code>{@link Ext.Container#items items}</code> <b>property</b></li>
        /// </ul></div>
        /// <p>For additional information see {@link Ext.util.MixedCollection#get}.
        /// </summary>
        public void setActiveTab(object item) { }
        /// <summary>
        /// Unhides the tab strip item for the passed tab
        /// @param {Number/String/Panel} item The tab index, id or item
        /// </summary>
        public void unhideTabStripItem(object item) { }
        public void updateScrollButtons() { }
        /// <summary>
        /// @cfg {Boolean} animScroll True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults
        /// to <tt>true</tt>).  Only applies when <tt>{@link #enableTabScroll} = true</tt>.
        /// </summary>
        public bool animScroll { get; set; }
        /// <summary>
        /// @cfg {Boolean} autoTabs
        /// <p><tt>true</tt> to query the DOM for any divs with a class of 'x-tab' to be automatically converted
        /// to tabs and added to this panel (defaults to <tt>false</tt>).  Note that the query will be executed within
        /// the scope of the container element only (so that multiple tab panels from markup can be supported via this
        /// method).</p>
        /// <p>This method is only possible when the markup is structured correctly as a container with nested divs
        /// containing the class <tt>'x-tab'</tt>. To create TabPanels without these limitations, or to pull tab content
        /// from other elements on the page, see the example at the top of the class for generating tabs from markup.</p>
        /// <p>There are a couple of things to note when using this method:<ul>
        /// <li>When using the <tt>autoTabs</tt> config (as opposed to passing individual tab configs in the TabPanel's
        /// {@link #items} collection), you must use <tt>{@link #applyTo}</tt> to correctly use the specified <tt>id</tt>
        /// as the tab container. The <tt>autoTabs</tt> method <em>replaces</em> existing content with the TabPanel
        /// components.</li>
        /// <li>Make sure that you set <tt>{@link #deferredRender}: false</tt> so that the content elements for each
        /// tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed
        /// until each tab is activated and will be visible outside the TabPanel.</li>
        /// </ul>Example usage:</p>
        /// <pre><code>
        /// var tabs = new Ext.TabPanel({
        /// applyTo: 'my-tabs',
        /// activeTab: 0,
        /// deferredRender: false,
        /// autoTabs: true
        /// });
        /// // This markup will be converted to a TabPanel from the code above
        /// &lt;div id="my-tabs">
        /// &lt;div class="x-tab" title="Tab 1">A simple tab&lt;/div>
        /// &lt;div class="x-tab" title="Tab 2">Another one&lt;/div>
        /// &lt;/div>
        /// </code></pre>
        /// </summary>
        public bool autoTabs { get; set; }
        /// <summary>
        /// @cfg {String} autoTabSelector The CSS selector used to search for tabs in existing markup when
        /// <tt>{@link #autoTabs} = true</tt> (defaults to <tt>'div.x-tab'</tt>).  This can be any valid selector
        /// supported by {@link Ext.DomQuery#select}. Note that the query will be executed within the scope of this
        /// tab panel only (so that multiple tab panels from markup can be supported on a page).
        /// </summary>
        public JsString autoTabSelector { get; set; }
        /// <summary>
        /// @cfg {String} baseCls The base CSS class applied to the panel (defaults to <tt>'x-tab-panel'</tt>).
        /// </summary>
        public new JsString baseCls { get; set; }
        /// <summary>
        /// @cfg {Boolean} deferredRender
        /// <p><tt>true</tt> by default to defer the rendering of child <tt>{@link Ext.Container#items items}</tt>
        /// to the browsers DOM until a tab is activated. <tt>false</tt> will render all contained
        /// <tt>{@link Ext.Container#items items}</tt> as soon as the {@link Ext.layout.CardLayout layout}
        /// is rendered. If there is a significant amount of content or a lot of heavy controls being
        /// rendered into panels that are not displayed by default, setting this to <tt>true</tt> might
        /// improve performance.</p>
        /// <br><p>The <tt>deferredRender</tt> property is internally passed to the layout manager for
        /// TabPanels ({@link Ext.layout.CardLayout}) as its {@link Ext.layout.CardLayout#deferredRender}
        /// configuration value.</p>
        /// <br><p><b>Note</b>: leaving <tt>deferredRender</tt> as <tt>true</tt> means that the content
        /// within an unactivated tab will not be available. For example, this means that if the TabPanel
        /// is within a {@link Ext.form.FormPanel form}, then until a tab is activated, any Fields within
        /// unactivated tabs will not be rendered, and will therefore not be submitted and will not be
        /// available to either {@link Ext.form.BasicForm#getValues getValues} or
        /// {@link Ext.form.BasicForm#setValues setValues}.</p>
        /// </summary>
        public bool deferredRender { get; set; }
        public new JsString elements { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableTabScroll True to enable scrolling to tabs that may be invisible due to overflowing the
        /// overall TabPanel width. Only available with tabPosition:'top' (defaults to false).
        /// </summary>
        public bool enableTabScroll { get; set; }
        public bool frame { get; set; }
        public new bool headerAsText { get; set; }
        public bool hideBorders { get; set; }
        /// <summary>
        /// @cfg {Number} wheelIncrement For scrolling tabs, the number of pixels to increment on mouse wheel
        /// scrolling (defaults to <tt>20</tt>).
        /// */
        /// wheelIncrement : 20,
        /// /*
        /// This is a protected property used when concatenating tab ids to the TabPanel id for internal uniqueness.
        /// It does not generally need to be changed, but can be if external code also uses an id scheme that can
        /// potentially clash with this one.
        /// </summary>
        public JsString idDelimiter { get; set; }
        public JsString itemCls { get; set; }
        /// <summary>
        /// @cfg {Number} minTabWidth The minimum width in pixels for each tab when {@link #resizeTabs} = true (defaults to 30).
        /// </summary>
        public JsNumber minTabWidth { get; set; }
        /// <summary>
        /// @cfg {Boolean} plain </tt>true</tt> to render the tab strip without a background container image
        /// (defaults to <tt>false</tt>).
        /// </summary>
        public bool plain { get; set; }
        /// <summary>
        /// @cfg {Boolean} resizeTabs True to automatically resize each tab so that the tabs will completely fill the
        /// tab strip (defaults to false).  Setting this to true may cause specific widths that might be set per tab to
        /// be overridden in order to fit them all into view (although {@link #minTabWidth} will always be honored).
        /// </summary>
        public bool resizeTabs { get; set; }
        /// <summary>
        /// @cfg {Float} scrollDuration The number of milliseconds that each scroll animation should last (defaults
        /// to <tt>.35</tt>). Only applies when <tt>{@link #animScroll} = true</tt>.
        /// </summary>
        public object scrollDuration { get; set; }
        /// <summary>
        /// @cfg {Number} scrollIncrement The number of pixels to scroll each time a tab scroll button is pressed
        /// (defaults to <tt>100</tt>, or if <tt>{@link #resizeTabs} = true</tt>, the calculated tab width).  Only
        /// applies when <tt>{@link #enableTabScroll} = true</tt>.
        /// </summary>
        public JsNumber scrollIncrement { get; set; }
        /// <summary>
        /// @cfg {Number} scrollRepeatInterval Number of milliseconds between each scroll while a tab scroll button is
        /// continuously pressed (defaults to <tt>400</tt>).
        /// </summary>
        public JsNumber scrollRepeatInterval { get; set; }
        /// <summary>
        /// @cfg {Number} tabMargin The number of pixels of space to calculate into the sizing and scrolling of
        /// tabs. If you change the margin in CSS, you will need to update this value so calculations are correct
        /// with either <tt>{@link #resizeTabs}</tt> or scrolling tabs. (defaults to <tt>2</tt>)
        /// </summary>
        public JsNumber tabMargin { get; set; }
        /// <summary>
        /// @cfg {String} tabPosition The position where the tab strip should be rendered (defaults to <tt>'top'</tt>).
        /// The only other supported value is <tt>'bottom'</tt>.  <b>Note</b>: tab scrolling is only supported for
        /// <tt>tabPosition: 'top'</tt>.
        /// </summary>
        public JsString tabPosition { get; set; }
        /// <summary>
        /// @cfg {Number} tabWidth The initial width in pixels of each new tab (defaults to 120).
        /// </summary>
        public JsNumber tabWidth { get; set; }
        /// <summary>
        /// @cfg {Number} wheelIncrement For scrolling tabs, the number of pixels to increment on mouse wheel
        /// scrolling (defaults to <tt>20</tt>).
        /// </summary>
        public JsNumber wheelIncrement { get; set; }
    }
    #endregion
    #region Template
    /// <summary>
    /// @class Ext.Template
    /// <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
    /// for greater performance.</p>
    /// <p>For example usage {@link #Template see the constructor}.</p>
    /// *
    /// @constructor
    /// An instance of this class may be created by passing to the constructor either
    /// a single argument, or multiple arguments:
    /// <div class="mdetail-params"><ul>
    /// <li><b>single argument</b> : String/Array
    /// <div class="sub-desc">
    /// The single argument may be either a String or an Array:<ul>
    /// <li><tt>String</tt> : </li><pre><code>
    /// var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
    /// t.{@link #append}('some-element', ['foo']);
    /// </code></pre>
    /// <li><tt>Array</tt> : </li>
    /// An Array will be combined with <code>join('')</code>.
    /// <pre><code>
    /// var t = new Ext.Template([
    /// '&lt;div name="{id}"&gt;',
    /// '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
    /// '&lt;/div&gt;',
    /// ]);
    /// t.{@link #compile}();
    /// t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
    /// </code></pre>
    /// </ul></div></li>
    /// <li><b>multiple arguments</b> : String, Object, Array, ...
    /// <div class="sub-desc">
    /// Multiple arguments will be combined with <code>join('')</code>.
    /// <pre><code>
    /// var t = new Ext.Template(
    /// '&lt;div name="{id}"&gt;',
    /// '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
    /// '&lt;/div&gt;',
    /// // a configuration object:
    /// {
    /// compiled: true,      // {@link #compile} immediately
    /// disableFormats: true // See Notes below.
    /// }
    /// );
    /// </code></pre>
    /// <p><b>Notes</b>:</p>
    /// <div class="mdetail-params"><ul>
    /// <li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
    /// <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
    /// <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
    /// when no formatting is required.</li>
    /// </ul></div>
    /// </div></li>
    /// </ul></div>
    /// @param {Mixed} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Template
    {
        public Template() { }
        /// <summary>
        /// Applies the supplied <code>values</code> to the template and appends
        /// the new node(s) to the specified <code>el</code>.
        /// <p>For example usage {@link #Template see the constructor}.</p>
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values
        /// The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
        /// or an object (i.e. <code>{foo: 'bar'}</code>).
        /// @param {Boolean} returnElement (optional) true to return an Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object append(object el, object values, bool returnElement) { return null; }
        /// <summary>
        /// Returns an HTML fragment of this template with the specified <code>values</code> applied.
        /// @param {Object/Array} values
        /// The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
        /// or an object (i.e. <code>{foo: 'bar'}</code>).
        /// @return {String} The HTML fragment
        /// </summary>
        public JsString applyTemplate(object values) { return null; }
        /// <summary>
        /// Compiles the template into an internal function, eliminating the RegEx overhead.
        /// @return {Ext.Template} this
        /// </summary>
        public Template compile() { return null; }
        public void doInsert(object where, object el, object values, object returnEl) { }
        /// <summary>
        /// Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
        /// @param {String/HTMLElement} el A DOM element or its id
        /// @param {Object} config A configuration object
        /// @return {Ext.Template} The created template
        /// @static
        /// </summary>
        public static Template from(object el, JsObject config) { return null; }
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) after el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertAfter(object el, object values, bool returnElement) { return null; }
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) before el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertBefore(object el, object values, bool returnElement) { return null; }
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) as the first child of el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertFirst(object el, object values, bool returnElement) { return null; }
        /// <summary>
        /// Applies the supplied values to the template and overwrites the content of el with the new node(s).
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object overwrite(object el, object values, bool returnElement) { return null; }
        /// <summary>
        /// Sets the HTML used as the template and optionally compiles it.
        /// @param {String} html
        /// @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
        /// @return {Ext.Template} this
        /// </summary>
        public Template set(object html, bool compile) { return null; }
        /// <summary>
        /// @class Ext.Template
        /// <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
        /// for greater performance.</p>
        /// <p>For example usage {@link #Template see the constructor}.</p>
        /// *
        /// @constructor
        /// An instance of this class may be created by passing to the constructor either
        /// a single argument, or multiple arguments:
        /// <div class="mdetail-params"><ul>
        /// <li><b>single argument</b> : String/Array
        /// <div class="sub-desc">
        /// The single argument may be either a String or an Array:<ul>
        /// <li><tt>String</tt> : </li><pre><code>
        /// var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
        /// t.{@link #append}('some-element', ['foo']);
        /// </code></pre>
        /// <li><tt>Array</tt> : </li>
        /// An Array will be combined with <code>join('')</code>.
        /// <pre><code>
        /// var t = new Ext.Template([
        /// '&lt;div name="{id}"&gt;',
        /// '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
        /// '&lt;/div&gt;',
        /// ]);
        /// t.{@link #compile}();
        /// t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
        /// </code></pre>
        /// </ul></div></li>
        /// <li><b>multiple arguments</b> : String, Object, Array, ...
        /// <div class="sub-desc">
        /// Multiple arguments will be combined with <code>join('')</code>.
        /// <pre><code>
        /// var t = new Ext.Template(
        /// '&lt;div name="{id}"&gt;',
        /// '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
        /// '&lt;/div&gt;',
        /// // a configuration object:
        /// {
        /// compiled: true,      // {@link #compile} immediately
        /// disableFormats: true // See Notes below.
        /// }
        /// );
        /// </code></pre>
        /// <p><b>Notes</b>:</p>
        /// <div class="mdetail-params"><ul>
        /// <li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
        /// <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
        /// <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
        /// when no formatting is required.</li>
        /// </ul></div>
        /// </div></li>
        /// </ul></div>
        /// @param {Mixed} config
        /// </summary>
        public Template(object html) { }
        /// <summary>
        /// @cfg {RegExp} re The regular expression used to match template variables.
        /// Defaults to:<pre><code>
        /// re : /\{([\w-]+)\}/g                                     // for Ext Core
        /// re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g      // for Ext JS
        /// </code></pre>
        /// </summary>
        public JsRegExp re { get; set; }
    }
    #endregion
    #region Tip
    /// <summary>
    /// @class Ext.Tip
    /// @extends Ext.Panel
    /// @xtype tip
    /// This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and
    /// positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
    /// tips that are displayed programmatically, or it can be extended to provide custom tip implementations.
    /// @constructor
    /// Create a new Tip
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Tip : Ext.Panel
    {
        public new void afterRender() { }
        public static void DD(object tip, object config) { }
        public void doAutoWidth(object adjust) { }
        public new void initComponent() { }
        public new void initDraggable() { }
        /// <summary>
        /// Shows this tip at the specified XY position.  Example usage:
        /// <pre><code>
        /// // Show the tip at x:50 and y:100
        /// tip.showAt([50,100]);
        /// </code></pre>
        /// @param {Array} xy An array containing the x and y coordinates
        /// </summary>
        public void showAt(JsArray xy) { }
        /// <summary>
        /// <b>Experimental</b>. Shows this tip at a position relative to another element using a standard {@link Ext.Element#alignTo}
        /// anchor position value.  Example usage:
        /// <pre><code>
        /// // Show the tip at the default position ('tl-br?')
        /// tip.showBy('my-el');
        /// // Show the tip's top-left corner anchored to the element's top-right corner
        /// tip.showBy('my-el', 'tl-tr');
        /// </code></pre>
        /// @param {Mixed} el An HTMLElement, Ext.Element or string id of the target element to align to
        /// @param {String} position (optional) A valid {@link Ext.Element#alignTo} anchor position (defaults to 'tl-br?' or
        /// {@link #defaultAlign} if specified).
        /// </summary>
        public void showBy(object el, object pos) { }
        public bool autoHeight { get; set; }
        public bool autoRender { get; set; }
        public new JsString baseCls { get; set; }
        public JsString closeAction { get; set; }
        /// <summary>
        /// @cfg {String} defaultAlign <b>Experimental</b>. The default {@link Ext.Element#alignTo} anchor position value
        /// for this tip relative to its element of origin (defaults to "tl-bl?").
        /// </summary>
        public JsString defaultAlign { get; set; }
        public bool frame { get; set; }
        public bool hidden { get; set; }
        /// <summary>
        /// @cfg {Number} maxWidth The maximum width of the tip in pixels (defaults to 300).  The maximum supported value is 500.
        /// </summary>
        public JsNumber maxWidth { get; set; }
        /// <summary>
        /// @cfg {Number} minWidth The minimum width of the tip in pixels (defaults to 40).
        /// </summary>
        public JsNumber minWidth { get; set; }
        public object quickShowInterval { get; set; }
        /// <summary>
        /// @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop"
        /// for bottom-right shadow (defaults to "sides").
        /// </summary>
        public object shadow { get; set; }
    }
    #endregion
    #region Toolbar
    /// <summary>
    /// @class Ext.Toolbar
    /// @extends Ext.Container
    /// <p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar
    /// is <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may
    /// be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,
    /// or implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>
    /// <p>Some items have shortcut strings for creation:</p>
    /// <pre>
    /// <u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>
    /// '->'      'tbfill'       {@link Ext.Toolbar.Fill}       begin using the right-justified button container
    /// '-'       'tbseparator'  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items
    /// ' '       'tbspacer'     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements
    /// </pre>
    /// *
    /// Example usage of various elements:
    /// <pre><code>
    /// var tb = new Ext.Toolbar({
    /// renderTo: document.body,
    /// width: 600,
    /// height: 100,
    /// items: [
    /// {
    /// // xtype: 'button', // default for Toolbars, same as 'tbbutton'
    /// text: 'Button'
    /// },
    /// {
    /// xtype: 'splitbutton', // same as 'tbsplitbutton'
    /// text: 'Split Button'
    /// },
    /// // begin using the right-justified button container
    /// '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill
    /// {
    /// xtype: 'textfield',
    /// name: 'field1',
    /// emptyText: 'enter search term'
    /// },
    /// // add a vertical separator bar between toolbar items
    /// '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator
    /// 'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem
    /// {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer
    /// 'text 2',
    /// {xtype: 'tbspacer', width: 50}, // add a 50px space
    /// 'text 3'
    /// ]
    /// });
    /// </code></pre>
    /// Example adding a ComboBox within a menu of a button:
    /// <pre><code>
    /// // ComboBox creation
    /// var combo = new Ext.form.ComboBox({
    /// store: new Ext.data.ArrayStore({
    /// autoDestroy: true,
    /// fields: ['initials', 'fullname'],
    /// data : [
    /// ['FF', 'Fred Flintstone'],
    /// ['BR', 'Barney Rubble']
    /// ]
    /// }),
    /// displayField: 'fullname',
    /// typeAhead: true,
    /// mode: 'local',
    /// forceSelection: true,
    /// triggerAction: 'all',
    /// emptyText: 'Select a name...',
    /// selectOnFocus: true,
    /// width: 135,
    /// getListParent: function() {
    /// return this.el.up('.x-menu');
    /// },
    /// iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
    /// });
    /// // put ComboBox in a Menu
    /// var menu = new Ext.menu.Menu({
    /// id: 'mainMenu',
    /// items: [
    /// combo // A Field in a Menu
    /// ]
    /// });
    /// // add a Button with the menu
    /// tb.add({
    /// text:'Button w/ Menu',
    /// menu: menu  // assign menu by instance
    /// });
    /// tb.doLayout();
    /// </code></pre>
    /// @constructor
    /// Creates a new Toolbar
    /// @param {Object/Array} config A config object or an array of buttons to <tt>{@link #add}</tt>
    /// @xtype toolbar
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Toolbar
    {
        public Toolbar() { }
        /// <summary>
        /// @class Ext.Toolbar
        /// @extends Ext.Container
        /// <p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar
        /// is <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may
        /// be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,
        /// or implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>
        /// <p>Some items have shortcut strings for creation:</p>
        /// <pre>
        /// <u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>
        /// '->'      'tbfill'       {@link Ext.Toolbar.Fill}       begin using the right-justified button container
        /// '-'       'tbseparator'  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items
        /// ' '       'tbspacer'     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements
        /// </pre>
        /// *
        /// Example usage of various elements:
        /// <pre><code>
        /// var tb = new Ext.Toolbar({
        /// renderTo: document.body,
        /// width: 600,
        /// height: 100,
        /// items: [
        /// {
        /// // xtype: 'button', // default for Toolbars, same as 'tbbutton'
        /// text: 'Button'
        /// },
        /// {
        /// xtype: 'splitbutton', // same as 'tbsplitbutton'
        /// text: 'Split Button'
        /// },
        /// // begin using the right-justified button container
        /// '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill
        /// {
        /// xtype: 'textfield',
        /// name: 'field1',
        /// emptyText: 'enter search term'
        /// },
        /// // add a vertical separator bar between toolbar items
        /// '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator
        /// 'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem
        /// {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer
        /// 'text 2',
        /// {xtype: 'tbspacer', width: 50}, // add a 50px space
        /// 'text 3'
        /// ]
        /// });
        /// </code></pre>
        /// Example adding a ComboBox within a menu of a button:
        /// <pre><code>
        /// // ComboBox creation
        /// var combo = new Ext.form.ComboBox({
        /// store: new Ext.data.ArrayStore({
        /// autoDestroy: true,
        /// fields: ['initials', 'fullname'],
        /// data : [
        /// ['FF', 'Fred Flintstone'],
        /// ['BR', 'Barney Rubble']
        /// ]
        /// }),
        /// displayField: 'fullname',
        /// typeAhead: true,
        /// mode: 'local',
        /// forceSelection: true,
        /// triggerAction: 'all',
        /// emptyText: 'Select a name...',
        /// selectOnFocus: true,
        /// width: 135,
        /// getListParent: function() {
        /// return this.el.up('.x-menu');
        /// },
        /// iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
        /// });
        /// // put ComboBox in a Menu
        /// var menu = new Ext.menu.Menu({
        /// id: 'mainMenu',
        /// items: [
        /// combo // A Field in a Menu
        /// ]
        /// });
        /// // add a Button with the menu
        /// tb.add({
        /// text:'Button w/ Menu',
        /// menu: menu  // assign menu by instance
        /// });
        /// tb.doLayout();
        /// </code></pre>
        /// @constructor
        /// Creates a new Toolbar
        /// @param {Object/Array} config A config object or an array of buttons to <tt>{@link #add}</tt>
        /// @xtype toolbar
        /// </summary>
        public Toolbar(object config) { }
    }
    #endregion
    #region ToolTip
    /// <summary>
    /// @class Ext.ToolTip
    /// @extends Ext.Tip
    /// A standard tooltip implementation for providing additional information when hovering over a target element.
    /// @xtype tooltip
    /// @constructor
    /// Create a new Tooltip
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ToolTip : Ext.Tip
    {
        public new void adjustPosition(object x, object y) { }
        public new void afterRender() { }
        public new void beforeDestroy() { }
        public void clearTimer(object name) { }
        public void clearTimers() { }
        public void delayHide() { }
        public void delayShow() { }
        public void doEnable() { }
        public void getAnchorAlign() { }
        public void getAnchorPosition() { }
        public void getMouseOffset() { }
        public void getOffsets() { }
        public void getTargetXY() { }
        /// <summary>
        /// Hides this tooltip if visible.
        /// </summary>
        public void hide() { }
        public new void initComponent() { }
        /// <summary>
        /// Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.
        /// @param {Mixed} t The Element, HtmlElement, or ID of an element to bind to
        /// </summary>
        public void initTarget(object target) { }
        public void onDestroy() { }
        public new void onDisable() { }
        public void onDocMouseDown(object e) { }
        public new void onHide() { }
        public void onMouseMove(object e) { }
        public new void onRender(object ct, object position) { }
        public new void onShow() { }
        public void onTargetOut(object e) { }
        public void onTargetOver(object e) { }
        public void setPagePosition(object x, object y) { }
        /// <summary>
        /// Shows this tooltip at the current event target XY position.
        /// </summary>
        public void show() { }
        public void showAt(object xy) { }
        public void syncAnchor() { }
        /// <summary>
        /// @cfg {Number} anchorOffset A numeric pixel value used to offset the
        /// default position of the anchor arrow (defaults to 0).  When the anchor
        /// position is on the top or bottom of the tooltip, <code>anchorOffset</code>
        /// will be used as a horizontal offset.  Likewise, when the anchor position
        /// is on the left or right side, <code>anchorOffset</code> will be used as
        /// a vertical offset.
        /// </summary>
        public JsNumber anchorOffset { get; set; }
        /// <summary>
        /// @cfg {Boolean} anchorToTarget True to anchor the tooltip to the target
        /// element, false to anchor it relative to the mouse coordinates (defaults
        /// to true).  When <code>anchorToTarget</code> is true, use
        /// <code>{@link #defaultAlign}</code> to control tooltip alignment to the
        /// target element.  When <code>anchorToTarget</code> is false, use
        /// <code>{@link #anchorPosition}</code> instead to control alignment.
        /// </summary>
        public bool anchorToTarget { get; set; }
        public bool constrainPosition { get; set; }
        /// <summary>
        /// @cfg {Number} dismissDelay Delay in milliseconds before the tooltip
        /// automatically hides (defaults to 5000). To disable automatic hiding, set
        /// dismissDelay = 0.
        /// </summary>
        public JsNumber dismissDelay { get; set; }
        /// <summary>
        /// @cfg {Number} hideDelay Delay in milliseconds after the mouse exits the
        /// target element but before the tooltip actually hides (defaults to 200).
        /// Set to 0 for the tooltip to hide immediately.
        /// </summary>
        public JsNumber hideDelay { get; set; }
        /// <summary>
        /// @cfg {Number} showDelay Delay in milliseconds before the tooltip displays
        /// after the mouse enters the target element (defaults to 500)
        /// </summary>
        public JsNumber showDelay { get; set; }
        public object targetCounter { get; set; }
        /// <summary>
        /// @cfg {Boolean} trackMouse True to have the tooltip follow the mouse as it
        /// moves over the target element (defaults to false).
        /// </summary>
        public bool trackMouse { get; set; }
    }
    #endregion
    #region Updater
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Updater
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class defaults
        {
            /// <summary>
            /// True to append a unique parameter to GET requests to disable caching (defaults to false).
            /// @type Boolean
            /// </summary>
            public static bool disableCaching { get; set; }
            /// <summary>
            /// Text for loading indicator (defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').
            /// @type String
            /// </summary>
            public static JsString indicatorText { get; set; }
            /// <summary>
            /// True to process scripts by default (defaults to false).
            /// @type Boolean
            /// </summary>
            public static bool loadScripts { get; set; }
            /// <summary>
            /// Whether or not to show {@link #indicatorText} during loading (defaults to true).
            /// @type Boolean
            /// </summary>
            public static bool showLoadIndicator { get; set; }
            /// <summary>
            /// Timeout for requests or form posts in seconds (defaults to 30 seconds).
            /// @type Number
            /// </summary>
            public static object timeout { get; set; }
        }
        /// <summary>
        /// Static convenience method. <b>This method is deprecated in favor of el.load({url:'foo.php', ...})</b>.
        /// Usage:
        /// <pre><code>Ext.Updater.updateElement("my-div", "stuff.php");</code></pre>
        /// @param {Mixed} el The element to update
        /// @param {String} url The url
        /// @param {String/Object} params (optional) Url encoded param string or an object of name/value pairs
        /// @param {Object} options (optional) A config object with any of the Updater properties you want to set - for
        /// example: {disableCaching:true, indicatorText: "Loading data..."}
        /// @static
        /// @deprecated
        /// @member Ext.Updater
        /// </summary>
        public static void updateElement(object el, JsString url, object @params, JsObject options) { }
    }
    #endregion
    #region Viewport
    /// <summary>
    /// @class Ext.Viewport
    /// @extends Ext.Container
    /// <p>A specialized container representing the viewable application area (the browser viewport).</p>
    /// <p>The Viewport renders itself to the document body, and automatically sizes itself to the size of
    /// the browser viewport and manages window resizing. There may only be one Viewport created
    /// in a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s
    /// added to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}
    /// method of any of its child Panels may themselves have a layout.</p>
    /// <p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide
    /// for scrolling if needed using the {@link #autoScroll} config.</p>
    /// <p>An example showing a classic application border layout:</p><pre><code>
    /// new Ext.Viewport({
    /// layout: 'border',
    /// items: [{
    /// region: 'north',
    /// html: '&lt;h1 class="x-panel-header">Page Title&lt;/h1>',
    /// autoHeight: true,
    /// border: false,
    /// margins: '0 0 5 0'
    /// }, {
    /// region: 'west',
    /// collapsible: true,
    /// title: 'Navigation',
    /// width: 200
    /// // the west region might typically utilize a {@link Ext.tree.TreePanel TreePanel} or a Panel with {@link Ext.layout.AccordionLayout Accordion layout}
    /// }, {
    /// region: 'south',
    /// title: 'Title for Panel',
    /// collapsible: true,
    /// html: 'Information goes here',
    /// split: true,
    /// height: 100,
    /// minHeight: 100
    /// }, {
    /// region: 'east',
    /// title: 'Title for the Grid Panel',
    /// collapsible: true,
    /// split: true,
    /// width: 200,
    /// xtype: 'grid',
    /// // remaining grid configuration not shown ...
    /// // notice that the GridPanel is added directly as the region
    /// // it is not "overnested" inside another Panel
    /// }, {
    /// region: 'center',
    /// xtype: 'tabpanel', // TabPanel itself has no title
    /// items: {
    /// title: 'Default Tab',
    /// html: 'The first tab\'s content. Others may be added dynamically'
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new Viewport
    /// @param {Object} config The config object
    /// @xtype viewport
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Viewport : Ext.Container
    {
        public void fireResize(object w, object h) { }
        public new void initComponent() { }
    }
    #endregion
    #region Window
    /// <summary>
    /// @class Ext.Window
    /// @extends Ext.Panel
    /// <p>A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and
    /// {@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,
    /// restored to their prior size, and can be {@link #minimize}d.</p>
    /// <p>Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide
    /// grouping, activation, to front, to back and other application-specific behavior.</p>
    /// <p>By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element
    /// specify {@link Ext.Component#renderTo renderTo}.</p>
    /// <p><b>Note:</b> By default, the <code>{@link #closable close}</code> header tool <i>destroys</i> the Window resulting in
    /// destruction of any child Components. This makes the Window object, and all its descendants <b>unusable</b>. To enable
    /// re-use of a Window, use <b><code>{@link #closeAction closeAction: 'hide'}</code></b>.</p>
    /// @constructor
    /// @param {Object} config The config object
    /// @xtype window
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Window : Ext.Panel
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class DD : Ext.dd.DD
        {
            public DD() { }
            public DD(object win) { }
            public void endDrag(object e) { }
            public void onDrag(object e) { }
            public void startDrag() { }
            public bool moveOnly { get; set; }
        }
        public void afterHide() { }
        public void afterShow(object isAnim) { }
        /// <summary>
        /// Aligns the window to the specified element
        /// @param {Mixed} element The element to align to.
        /// @param {String} position (optional, defaults to "tl-bl?") The position to align to (see {@link Ext.Element#alignTo} for more details).
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @return {Ext.Window} this
        /// </summary>
        public Window alignTo(object element, JsString position, JsArray offsets) { return null; }
        /// <summary>
        /// Anchors this window to another element and realigns it when the window is resized or scrolled.
        /// @param {Mixed} element The element to align to.
        /// @param {String} position The position to align to (see {@link Ext.Element#alignTo} for more details)
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @param {Boolean/Number} monitorScroll (optional) true to monitor body scroll and reposition. If this parameter
        /// is a number, it is used as the buffer delay (defaults to 50ms).
        /// @return {Ext.Window} this
        /// </summary>
        public Window anchorTo(object el, object alignment, JsArray offsets, object monitorScroll) { return null; }
        public void animHide() { }
        public void animShow() { }
        public new void beforeDestroy() { }
        public void beforeResize() { }
        public void beforeShow() { }
        /// <summary>
        /// Centers this window in the viewport
        /// @return {Ext.Window} this
        /// </summary>
        public Window center() { return null; }
        /// <summary>
        /// Removes any existing anchor from this window. See {@link #anchorTo}.
        /// @return {Ext.Window} this
        /// </summary>
        public Window clearAnchor() { return null; }
        /// <summary>
        /// <p>Closes the Window, removes it from the DOM, {@link Ext.Component#destroy destroy}s
        /// the Window object and all its descendant Components. The {@link Ext.Panel#beforeclose beforeclose}
        /// event is fired before the close happens and will cancel the close action if it returns false.<p>
        /// <p><b>Note:</b> This method is not affected by the {@link #closeAction} setting which
        /// only affects the action triggered when clicking the {@link #closable 'close' tool in the header}.
        /// To hide the Window without destroying it, call {@link #hide}.</p>
        /// </summary>
        public void close() { }
        /// <summary>
        /// Performs the anchor, using the saved anchorTarget property.
        /// @return {Ext.Window} this
        /// @private
        /// </summary>
        public Window doAnchor() { return null; }
        public void doClose() { }
        public void doConstrain() { }
        public void fitContainer() { }
        /// <summary>
        /// Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
        /// window itself will receive focus.
        /// </summary>
        public void focus() { }
        public void getState() { }
        public void ghost(object cls) { }
        public void handleResize(object box) { }
        /// <summary>
        /// Hides the window, setting it to invisible and applying negative offsets.
        /// @param {String/Element} animateTarget (optional) The target element or id to which the window should
        /// animate while hiding (defaults to null with no animation)
        /// @param {Function} callback (optional) A callback function to call after the window is hidden
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this Window.
        /// @return {Ext.Window} this
        /// </summary>
        public Window hide(object animateTarget, object cb, JsObject scope) { return null; }
        public new void initComponent() { }
        public new void initDraggable() { }
        public new void initEvents() { }
        public void initTools() { }
        /// <summary>
        /// Fits the window within its current container and automatically replaces
        /// the {@link #maximizable 'maximize' tool button} with the 'restore' tool button.
        /// Also see {@link #toggleMaximize}.
        /// @return {Ext.Window} this
        /// </summary>
        public Window maximize() { return null; }
        /// <summary>
        /// Placeholder method for minimizing the window.  By default, this method simply fires the {@link #minimize} event
        /// since the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,
        /// either the minimize event can be handled or this method can be overridden.
        /// @return {Ext.Window} this
        /// </summary>
        public Window minimize() { return null; }
        public void onDestroy() { }
        public void onEsc(object k, object e) { }
        public new void onRender(object ct, object position) { }
        public void onWindowResize() { }
        public void resizerAction() { }
        /// <summary>
        /// Restores a {@link #maximizable maximized}  window back to its original
        /// size and position prior to being maximized and also replaces
        /// the 'restore' tool button with the 'maximize' tool button.
        /// Also see {@link #toggleMaximize}.
        /// @return {Ext.Window} this
        /// </summary>
        public Window restore() { return null; }
        /// <summary>
        /// Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
        /// fires the {@link #activate} or {@link #deactivate} event depending on which action occurred. This method is
        /// called internally by {@link Ext.WindowMgr}.
        /// @param {Boolean} active True to activate the window, false to deactivate it (defaults to false)
        /// </summary>
        public void setActive(bool active) { }
        /// <summary>
        /// Sets the target element from which the window should animate while opening.
        /// @param {String/Element} el The target element or id
        /// </summary>
        public void setAnimateTarget(object el) { }
        public void setZIndex(object index) { }
        /// <summary>
        /// Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
        /// @param {String/Element} animateTarget (optional) The target element or id from which the window should
        /// animate while opening (defaults to null with no animation)
        /// @param {Function} callback (optional) A callback function to call after the window is displayed
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this Window.
        /// @return {Ext.Window} this
        /// </summary>
        public Window show(object animateTarget, object cb, JsObject scope) { return null; }
        /// <summary>
        /// Sends this window to the back of (lower z-index than) any other visible windows
        /// @return {Ext.Window} this
        /// </summary>
        public Window toBack() { return null; }
        /// <summary>
        /// Brings this window to the front of any other visible windows
        /// @param {Boolean} e (optional) Specify <tt>false</tt> to prevent the window from being focused.
        /// @return {Ext.Window} this
        /// </summary>
        public Window toFront(bool e) { return null; }
        /// <summary>
        /// A shortcut method for toggling between {@link #maximize} and {@link #restore} based on the current maximized
        /// state of the window.
        /// @return {Ext.Window} this
        /// </summary>
        public Window toggleMaximize() { return null; }
        public void unghost(object show, object matchPosition) { }
        public void updateHandles() { }
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to this panel's element (defaults to 'x-window').
        /// </summary>
        public new JsString baseCls { get; set; }
        /// <summary>
        /// @cfg {Boolean} closable
        /// <p>True to display the 'close' tool button and allow the user to close the window, false to
        /// hide the button and disallow closing the window (defaults to true).</p>
        /// <p>By default, when close is requested by either clicking the close button in the header
        /// or pressing ESC when the Window has focus, the {@link #close} method will be called. This
        /// will <i>{@link Ext.Component#destroy destroy}</i> the Window and its content meaning that
        /// it may not be reused.</p>
        /// <p>To make closing a Window <i>hide</i> the Window so that it may be reused, set
        /// {@link #closeAction} to 'hide'.
        /// </summary>
        public bool closable { get; set; }
        /// <summary>
        /// @cfg {String} closeAction
        /// <p>The action to take when the close header tool is clicked:
        /// <div class="mdetail-params"><ul>
        /// <li><b><code>'{@link #close}'</code></b> : <b>Default</b><div class="sub-desc">
        /// {@link #close remove} the window from the DOM and {@link Ext.Component#destroy destroy}
        /// it and all descendant Components. The window will <b>not</b> be available to be
        /// redisplayed via the {@link #show} method.
        /// </div></li>
        /// <li><b><code>'{@link #hide}'</code></b> : <div class="sub-desc">
        /// {@link #hide} the window by setting visibility to hidden and applying negative offsets.
        /// The window will be available to be redisplayed via the {@link #show} method.
        /// </div></li>
        /// </ul></div>
        /// <p><b>Note:</b> This setting does not affect the {@link #close} method
        /// which will always {@link Ext.Component#destroy destroy} the window. To
        /// programatically <i>hide</i> a window, call {@link #hide}.</p>
        /// </summary>
        public JsString closeAction { get; set; }
        public bool collapsible { get; set; }
        /// <summary>
        /// @cfg {Boolean} constrain
        /// True to constrain the window within its containing element, false to allow it to fall outside of its
        /// containing element. By default the window will be rendered to document.body.  To render and constrain the
        /// window within another element specify {@link #renderTo}.
        /// (defaults to false).  Optionally the header only can be constrained using {@link #constrainHeader}.
        /// </summary>
        public bool constrain { get; set; }
        /// <summary>
        /// @cfg {Boolean} constrainHeader
        /// True to constrain the window header within its containing element (allowing the window body to fall outside
        /// of its containing element) or false to allow the header to fall outside its containing element (defaults to
        /// false). Optionally the entire window can be constrained using {@link #constrain}.
        /// </summary>
        public bool constrainHeader { get; set; }
        /// <summary>
        /// @cfg {Boolean} draggable
        /// True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true).  Note
        /// that by default the window will be centered in the viewport, so if dragging is disabled the window may need
        /// to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
        /// </summary>
        public bool draggable { get; set; }
        /// <summary>
        /// @cfg {Boolean} hidden
        /// Render this component hidden (default is <tt>true</tt>). If <tt>true</tt>, the
        /// {@link #hide} method will be called internally.
        /// */
        /// hidden : true,
        /// // The following configs are set to provide the basic functionality of a window.
        /// // Changing them would require additional code to handle correctly and should
        /// // usually only be done in subclasses that can provide custom behavior.  Changing them
        /// // may have unexpected or undesirable results.
        /// </summary>
        public new JsString elements { get; set; }
        /// <summary>
        /// @cfg {Boolean} expandOnShow
        /// True to always expand the window when it is displayed, false to keep it in its current state (which may be
        /// {@link #collapsed}) when displayed (defaults to true).
        /// </summary>
        public bool expandOnShow { get; set; }
        /// <summary>
        /// frame : true,
        /// </summary>
        public bool floating { get; set; }
        /// <summary>
        /// elements : 'header,body',
        /// </summary>
        public bool frame { get; set; }
        /// <summary>
        /// @cfg {Boolean} hidden
        /// Render this component hidden (default is <tt>true</tt>). If <tt>true</tt>, the
        /// {@link #hide} method will be called internally.
        /// </summary>
        public bool hidden { get; set; }
        /// <summary>
        /// @cfg {Number} hideAnimDuration The number of seconds that the window hide animation takes if enabled.
        /// Defaults to 0.25
        /// </summary>
        public JsNumber hideAnimDuration { get; set; }
        /// <summary>
        /// @cfg {Boolean} maximizable
        /// True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
        /// and disallow maximizing the window (defaults to false).  Note that when a window is maximized, the tool button
        /// will automatically change to a 'restore' button with the appropriate behavior already built-in that will
        /// restore the window to its previous size.
        /// </summary>
        public bool maximizable { get; set; }
        /// <summary>
        /// @cfg {Number} minHeight
        /// The minimum height in pixels allowed for this window (defaults to 100).  Only applies when resizable = true.
        /// </summary>
        public object minHeight { get; set; }
        /// <summary>
        /// @cfg {Boolean} minimizable
        /// True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
        /// and disallow minimizing the window (defaults to false).  Note that this button provides no implementation --
        /// the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a
        /// custom minimize behavior implemented for this option to be useful.
        /// </summary>
        public bool minimizable { get; set; }
        /// <summary>
        /// @cfg {Number} minWidth
        /// The minimum width in pixels allowed for this window (defaults to 200).  Only applies when resizable = true.
        /// </summary>
        public object minWidth { get; set; }
        /// <summary>
        /// @cfg {Boolean} plain
        /// True to render the window body with a transparent background so that it will blend into the framing
        /// elements, false to add a lighter background color to visually highlight the body element and separate it
        /// more distinctly from the surrounding frame (defaults to false).
        /// </summary>
        public bool plain { get; set; }
        /// <summary>
        /// @cfg {Boolean} resizable
        /// True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
        /// </summary>
        public bool resizable { get; set; }
        /// <summary>
        /// @cfg {Number} showAnimDuration The number of seconds that the window show animation takes if enabled.
        /// Defaults to 0.25
        /// </summary>
        public JsNumber showAnimDuration { get; set; }
    }
    #endregion
    #region WindowGroup
    /// <summary>
    /// @class Ext.WindowGroup
    /// An object that manages a group of {@link Ext.Window} instances and provides z-order management
    /// and window activation behavior.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class WindowGroup
    {
        /// <summary>
        /// @class Ext.WindowGroup
        /// An object that manages a group of {@link Ext.Window} instances and provides z-order management
        /// and window activation behavior.
        /// @constructor
        /// </summary>
        public WindowGroup() { }
    }
    #endregion
    #region WindowMgr
    /// <summary>
    /// @class Ext.WindowMgr
    /// @extends Ext.WindowGroup
    /// The default global window group that is available automatically.  To have more than one group of windows
    /// with separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed.
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class WindowMgr
    {
    }
    #endregion
    #region XTemplate
    /// <summary>
    /// @class Ext.XTemplate
    /// @extends Ext.Template
    /// <p>A template class that supports advanced functionality like:<div class="mdetail-params"><ul>
    /// <li>Autofilling arrays using templates and sub-templates</li>
    /// <li>Conditional processing with basic comparison operators</li>
    /// <li>Basic math function support</li>
    /// <li>Execute arbitrary inline code with special built-in template variables</li>
    /// <li>Custom member functions</li>
    /// <li>Many special tags and built-in operators that aren't defined as part of
    /// the API, but are supported in the templates that can be created</li>
    /// </ul></div></p>
    /// <p>XTemplate provides the templating mechanism built into:<div class="mdetail-params"><ul>
    /// <li>{@link Ext.DataView}</li>
    /// <li>{@link Ext.ListView}</li>
    /// <li>{@link Ext.form.ComboBox}</li>
    /// <li>{@link Ext.grid.TemplateColumn}</li>
    /// <li>{@link Ext.grid.GroupingView}</li>
    /// <li>{@link Ext.menu.Item}</li>
    /// <li>{@link Ext.layout.MenuLayout}</li>
    /// <li>{@link Ext.ColorPalette}</li>
    /// </ul></div></p>
    /// *
    /// <p>For example usage {@link #XTemplate see the constructor}.</p>
    /// *
    /// @constructor
    /// The {@link Ext.Template#Template Ext.Template constructor} describes
    /// the acceptable parameters to pass to the constructor. The following
    /// examples demonstrate all of the supported features.</p>
    /// *
    /// <div class="mdetail-params"><ul>
    /// *
    /// <li><b><u>Sample Data</u></b>
    /// <div class="sub-desc">
    /// <p>This is the data object used for reference in each code example:</p>
    /// <pre><code>
    /// var data = {
    /// name: 'Jack Slocum',
    /// title: 'Lead Developer',
    /// company: 'Ext JS, LLC',
    /// email: 'jack@extjs.com',
    /// address: '4 Red Bulls Drive',
    /// city: 'Cleveland',
    /// state: 'Ohio',
    /// zip: '44102',
    /// drinks: ['Red Bull', 'Coffee', 'Water'],
    /// kids: [{
    /// name: 'Sara Grace',
    /// age:3
    /// },{
    /// name: 'Zachary',
    /// age:2
    /// },{
    /// name: 'John James',
    /// age:0
    /// }]
    /// };
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Auto filling of arrays</u></b>
    /// <div class="sub-desc">
    /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used
    /// to process the provided data object:
    /// <ul>
    /// <li>If the value specified in <tt>for</tt> is an array, it will auto-fill,
    /// repeating the template block inside the <tt>tpl</tt> tag for each item in the
    /// array.</li>
    /// <li>If <tt>for="."</tt> is specified, the data object provided is examined.</li>
    /// <li>While processing an array, the special variable <tt>{#}</tt>
    /// will provide the current array index + 1 (starts at 1, not 0).</li>
    /// </ul>
    /// </p>
    /// <pre><code>
    /// &lt;tpl <b>for</b>=".">...&lt;/tpl>       // loop through array at root node
    /// &lt;tpl <b>for</b>="foo">...&lt;/tpl>     // loop through array at foo node
    /// &lt;tpl <b>for</b>="foo.bar">...&lt;/tpl> // loop through array at foo.bar node
    /// </code></pre>
    /// Using the sample data above:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Kids: ',
    /// '&lt;tpl <b>for</b>=".">',       // process the data.kids node
    /// '&lt;p>{#}. {name}&lt;/p>',  // use current array index to autonumber
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
    /// </code></pre>
    /// <p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged
    /// to access specified members of the provided data object to populate the template:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Title: {title}&lt;/p>',
    /// '&lt;p>Company: {company}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl <b>for="kids"</b>>',     // interrogate the kids property within the data
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
    /// </code></pre>
    /// <p>Flat arrays that contain values (and not objects) can be auto-rendered
    /// using the special <b><tt>{.}</tt></b> variable inside a loop.  This variable
    /// will represent the value of the array at the current index:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>{name}\&#39;s favorite beverages:&lt;/p>',
    /// '&lt;tpl for="drinks">',
    /// '&lt;div> - {.}&lt;/div>',
    /// '&lt;/tpl>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <p>When processing a sub-template, for example while looping through a child array,
    /// you can access the parent object's members via the <b><tt>parent</tt></b> object:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age > 1">',
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Conditional processing with basic comparison operators</u></b>
    /// <div class="sub-desc">
    /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used
    /// to provide conditional checks for deciding whether or not to render specific
    /// parts of the template. Notes:<div class="sub-desc"><ul>
    /// <li>Double quotes must be encoded if used within the conditional</li>
    /// <li>There is no <tt>else</tt> operator &mdash; if needed, two opposite
    /// <tt>if</tt> statements should be used.</li>
    /// </ul></div>
    /// <pre><code>
    /// &lt;tpl if="age &gt; 1 &amp;&amp; age &lt; 10">Child&lt;/tpl>
    /// &lt;tpl if="age >= 10 && age < 18">Teenager&lt;/tpl>
    /// &lt;tpl <b>if</b>="this.isGirl(name)">...&lt;/tpl>
    /// &lt;tpl <b>if</b>="id==\'download\'">...&lt;/tpl>
    /// &lt;tpl <b>if</b>="needsIcon">&lt;img src="{icon}" class="{iconCls}"/>&lt;/tpl>
    /// // no good:
    /// &lt;tpl if="name == "Jack"">Hello&lt;/tpl>
    /// // encode &#34; if it is part of the condition, e.g.
    /// &lt;tpl if="name == &#38;quot;Jack&#38;quot;">Hello&lt;/tpl>
    /// </code></pre>
    /// Using the sample data above:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age > 1">',
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Basic math support</u></b>
    /// <div class="sub-desc">
    /// <p>The following basic math operators may be applied directly on numeric
    /// data values:</p><pre>
    /// + - * /
    /// </pre>
    /// For example:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age &amp;gt; 1">',  // <-- Note that the &gt; is encoded
    /// '&lt;p>{#}: {name}&lt;/p>',  // <-- Auto-number each item
    /// '&lt;p>In 5 Years: {age+5}&lt;/p>',  // <-- Basic math
    /// '&lt;p>Dad: {parent.name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>
    /// <div class="sub-desc">
    /// <p>Anything between <code>{[ ... ]}</code> is considered code to be executed
    /// in the scope of the template. There are some special variables available in that code:
    /// <ul>
    /// <li><b><tt>values</tt></b>: The values in the current scope. If you are using
    /// scope changing sub-templates, you can change what <tt>values</tt> is.</li>
    /// <li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>
    /// <li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the
    /// loop you are in (1-based).</li>
    /// <li><b><tt>xcount</tt></b>: If you are in a looping template, the total length
    /// of the array you are looping.</li>
    /// <li><b><tt>fm</tt></b>: An alias for <tt>Ext.util.Format</tt>.</li>
    /// </ul>
    /// This example demonstrates basic row striping using an inline code block and the
    /// <tt>xindex</tt> variable:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
    /// '{name}',
    /// '&lt;/div>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// <li><b><u>Template member functions</u></b>
    /// <div class="sub-desc">
    /// <p>One or more member functions can be specified in a configuration
    /// object passed into the XTemplate constructor for more complex processing:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="this.isGirl(name)">',
    /// '&lt;p>Girl: {name} - {age}&lt;/p>',
    /// '&lt;/tpl>',
    /// // use opposite if statement to simulate 'else' processing:
    /// '&lt;tpl if="this.isGirl(name) == false">',
    /// '&lt;p>Boy: {name} - {age}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;tpl if="this.isBaby(age)">',
    /// '&lt;p>{name} is a baby!&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>',
    /// {
    /// // XTemplate configuration:
    /// compiled: true,
    /// disableFormats: true,
    /// // member functions:
    /// isGirl: function(name){
    /// return name == 'Sara Grace';
    /// },
    /// isBaby: function(age){
    /// return age < 1;
    /// }
    /// }
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// </ul></div>
    /// *
    /// @param {Mixed} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class XTemplate
    {
        /// <summary>
        /// Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
        /// @param {String/HTMLElement} el A DOM element or its id
        /// @return {Ext.Template} The created template
        /// @static
        /// </summary>
        public static Template from(object el) { return null; }
        /// <summary>
        /// @class Ext.XTemplate
        /// @extends Ext.Template
        /// <p>A template class that supports advanced functionality like:<div class="mdetail-params"><ul>
        /// <li>Autofilling arrays using templates and sub-templates</li>
        /// <li>Conditional processing with basic comparison operators</li>
        /// <li>Basic math function support</li>
        /// <li>Execute arbitrary inline code with special built-in template variables</li>
        /// <li>Custom member functions</li>
        /// <li>Many special tags and built-in operators that aren't defined as part of
        /// the API, but are supported in the templates that can be created</li>
        /// </ul></div></p>
        /// <p>XTemplate provides the templating mechanism built into:<div class="mdetail-params"><ul>
        /// <li>{@link Ext.DataView}</li>
        /// <li>{@link Ext.ListView}</li>
        /// <li>{@link Ext.form.ComboBox}</li>
        /// <li>{@link Ext.grid.TemplateColumn}</li>
        /// <li>{@link Ext.grid.GroupingView}</li>
        /// <li>{@link Ext.menu.Item}</li>
        /// <li>{@link Ext.layout.MenuLayout}</li>
        /// <li>{@link Ext.ColorPalette}</li>
        /// </ul></div></p>
        /// *
        /// <p>For example usage {@link #XTemplate see the constructor}.</p>
        /// *
        /// @constructor
        /// The {@link Ext.Template#Template Ext.Template constructor} describes
        /// the acceptable parameters to pass to the constructor. The following
        /// examples demonstrate all of the supported features.</p>
        /// *
        /// <div class="mdetail-params"><ul>
        /// *
        /// <li><b><u>Sample Data</u></b>
        /// <div class="sub-desc">
        /// <p>This is the data object used for reference in each code example:</p>
        /// <pre><code>
        /// var data = {
        /// name: 'Jack Slocum',
        /// title: 'Lead Developer',
        /// company: 'Ext JS, LLC',
        /// email: 'jack@extjs.com',
        /// address: '4 Red Bulls Drive',
        /// city: 'Cleveland',
        /// state: 'Ohio',
        /// zip: '44102',
        /// drinks: ['Red Bull', 'Coffee', 'Water'],
        /// kids: [{
        /// name: 'Sara Grace',
        /// age:3
        /// },{
        /// name: 'Zachary',
        /// age:2
        /// },{
        /// name: 'John James',
        /// age:0
        /// }]
        /// };
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Auto filling of arrays</u></b>
        /// <div class="sub-desc">
        /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used
        /// to process the provided data object:
        /// <ul>
        /// <li>If the value specified in <tt>for</tt> is an array, it will auto-fill,
        /// repeating the template block inside the <tt>tpl</tt> tag for each item in the
        /// array.</li>
        /// <li>If <tt>for="."</tt> is specified, the data object provided is examined.</li>
        /// <li>While processing an array, the special variable <tt>{#}</tt>
        /// will provide the current array index + 1 (starts at 1, not 0).</li>
        /// </ul>
        /// </p>
        /// <pre><code>
        /// &lt;tpl <b>for</b>=".">...&lt;/tpl>       // loop through array at root node
        /// &lt;tpl <b>for</b>="foo">...&lt;/tpl>     // loop through array at foo node
        /// &lt;tpl <b>for</b>="foo.bar">...&lt;/tpl> // loop through array at foo.bar node
        /// </code></pre>
        /// Using the sample data above:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Kids: ',
        /// '&lt;tpl <b>for</b>=".">',       // process the data.kids node
        /// '&lt;p>{#}. {name}&lt;/p>',  // use current array index to autonumber
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
        /// </code></pre>
        /// <p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged
        /// to access specified members of the provided data object to populate the template:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Title: {title}&lt;/p>',
        /// '&lt;p>Company: {company}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl <b>for="kids"</b>>',     // interrogate the kids property within the data
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
        /// </code></pre>
        /// <p>Flat arrays that contain values (and not objects) can be auto-rendered
        /// using the special <b><tt>{.}</tt></b> variable inside a loop.  This variable
        /// will represent the value of the array at the current index:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>{name}\&#39;s favorite beverages:&lt;/p>',
        /// '&lt;tpl for="drinks">',
        /// '&lt;div> - {.}&lt;/div>',
        /// '&lt;/tpl>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// <p>When processing a sub-template, for example while looping through a child array,
        /// you can access the parent object's members via the <b><tt>parent</tt></b> object:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age > 1">',
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Conditional processing with basic comparison operators</u></b>
        /// <div class="sub-desc">
        /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used
        /// to provide conditional checks for deciding whether or not to render specific
        /// parts of the template. Notes:<div class="sub-desc"><ul>
        /// <li>Double quotes must be encoded if used within the conditional</li>
        /// <li>There is no <tt>else</tt> operator &mdash; if needed, two opposite
        /// <tt>if</tt> statements should be used.</li>
        /// </ul></div>
        /// <pre><code>
        /// &lt;tpl if="age &gt; 1 &amp;&amp; age &lt; 10">Child&lt;/tpl>
        /// &lt;tpl if="age >= 10 && age < 18">Teenager&lt;/tpl>
        /// &lt;tpl <b>if</b>="this.isGirl(name)">...&lt;/tpl>
        /// &lt;tpl <b>if</b>="id==\'download\'">...&lt;/tpl>
        /// &lt;tpl <b>if</b>="needsIcon">&lt;img src="{icon}" class="{iconCls}"/>&lt;/tpl>
        /// // no good:
        /// &lt;tpl if="name == "Jack"">Hello&lt;/tpl>
        /// // encode &#34; if it is part of the condition, e.g.
        /// &lt;tpl if="name == &#38;quot;Jack&#38;quot;">Hello&lt;/tpl>
        /// </code></pre>
        /// Using the sample data above:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age > 1">',
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Basic math support</u></b>
        /// <div class="sub-desc">
        /// <p>The following basic math operators may be applied directly on numeric
        /// data values:</p><pre>
        /// + - * /
        /// </pre>
        /// For example:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age &amp;gt; 1">',  // <-- Note that the &gt; is encoded
        /// '&lt;p>{#}: {name}&lt;/p>',  // <-- Auto-number each item
        /// '&lt;p>In 5 Years: {age+5}&lt;/p>',  // <-- Basic math
        /// '&lt;p>Dad: {parent.name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>
        /// <div class="sub-desc">
        /// <p>Anything between <code>{[ ... ]}</code> is considered code to be executed
        /// in the scope of the template. There are some special variables available in that code:
        /// <ul>
        /// <li><b><tt>values</tt></b>: The values in the current scope. If you are using
        /// scope changing sub-templates, you can change what <tt>values</tt> is.</li>
        /// <li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>
        /// <li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the
        /// loop you are in (1-based).</li>
        /// <li><b><tt>xcount</tt></b>: If you are in a looping template, the total length
        /// of the array you are looping.</li>
        /// <li><b><tt>fm</tt></b>: An alias for <tt>Ext.util.Format</tt>.</li>
        /// </ul>
        /// This example demonstrates basic row striping using an inline code block and the
        /// <tt>xindex</tt> variable:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
        /// '{name}',
        /// '&lt;/div>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// <li><b><u>Template member functions</u></b>
        /// <div class="sub-desc">
        /// <p>One or more member functions can be specified in a configuration
        /// object passed into the XTemplate constructor for more complex processing:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="this.isGirl(name)">',
        /// '&lt;p>Girl: {name} - {age}&lt;/p>',
        /// '&lt;/tpl>',
        /// // use opposite if statement to simulate 'else' processing:
        /// '&lt;tpl if="this.isGirl(name) == false">',
        /// '&lt;p>Boy: {name} - {age}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;tpl if="this.isBaby(age)">',
        /// '&lt;p>{name} is a baby!&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>',
        /// {
        /// // XTemplate configuration:
        /// compiled: true,
        /// disableFormats: true,
        /// // member functions:
        /// isGirl: function(name){
        /// return name == 'Sara Grace';
        /// },
        /// isBaby: function(age){
        /// return age < 1;
        /// }
        /// }
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// </ul></div>
        /// *
        /// @param {Mixed} config
        /// </summary>
        public XTemplate() { }
    }
    #endregion
}
#endregion
#region Ext.chart
namespace Ext.chart
{
    #region Axis
    /// <summary>
    /// @class Ext.chart.Axis
    /// Defines a CartesianChart's vertical or horizontal axis.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Axis
    {
        public Axis() { }
        /// <summary>
        /// @class Ext.chart.Axis
        /// Defines a CartesianChart's vertical or horizontal axis.
        /// @constructor
        /// </summary>
        public Axis(object config) { }
        /// <summary>
        /// If true, labels that overlap previously drawn labels on the axis will be hidden.
        /// *
        /// @property hideOverlappingLabels
        /// @type Boolean
        /// </summary>
        public bool hideOverlappingLabels { get; set; }
        /// <summary>
        /// A string reference to the globally-accessible function that may be called to
        /// determine each of the label values for this axis.
        /// *
        /// @property labelFunction
        /// @type String
        /// </summary>
        public object labelFunction { get; set; }
        /// <summary>
        /// The space, in pixels, between labels on an axis.
        /// *
        /// @property labelSpacing
        /// @type Number
        /// </summary>
        public object labelSpacing { get; set; }
        /// <summary>
        /// The direction in which the axis is drawn. May be "horizontal" or "vertical".
        /// *
        /// @property orientation
        /// @type String
        /// </summary>
        public JsString orientation { get; set; }
        /// <summary>
        /// If true, the items on the axis will be drawn in opposite direction.
        /// *
        /// @property reverse
        /// @type Boolean
        /// </summary>
        public bool reverse { get; set; }
        /// <summary>
        /// The type of axis.
        /// *
        /// @property type
        /// @type String
        /// </summary>
        public object type { get; set; }
    }
    #endregion
    #region BarChart
    /// <summary>
    /// @class Ext.chart.BarChart
    /// @extends Ext.chart.CartesianChart
    /// @constructor
    /// @xtype barchart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BarChart : Ext.chart.CartesianChart
    {
        public JsString type { get; set; }
    }
    #endregion
    #region BarSeries
    /// <summary>
    /// @class Ext.chart.BarSeries
    /// @extends Ext.chart.CartesianSeries
    /// BarSeries class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BarSeries : Ext.chart.CartesianSeries
    {
        public JsString type { get; set; }
    }
    #endregion
    #region CartesianChart
    /// <summary>
    /// @class Ext.chart.CartesianChart
    /// @extends Ext.chart.Chart
    /// @constructor
    /// @xtype cartesianchart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CartesianChart : Ext.chart.Chart
    {
        public void createAxis(object axis, object value) { }
        public new void onDestroy() { }
        public new void onSwfReady(object isReset) { }
        public void setXAxes(object value) { }
        public void setXAxis(object value) { }
        public void setXField(object value) { }
        public void setYAxes(object value) { }
        public void setYAxis(object value) { }
        public void setYField(object value) { }
    }
    #endregion
    #region CartesianSeries
    /// <summary>
    /// @class Ext.chart.CartesianSeries
    /// @extends Ext.chart.Series
    /// CartesianSeries class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CartesianSeries : Ext.chart.Series
    {
        /// <summary>
        /// Indicates which axis the series will bind to
        /// *
        /// @property axis
        /// @type String
        /// </summary>
        public JsString axis { get; set; }
        /// <summary>
        /// False to not show this series in the legend. Defaults to <tt>true</tt>.
        /// *
        /// @property showInLegend
        /// @type Boolean
        /// </summary>
        public bool showInLegend { get; set; }
        /// <summary>
        /// The field used to access the x-axis value from the items from the data
        /// source.
        /// *
        /// @property xField
        /// @type String
        /// </summary>
        public object xField { get; set; }
        /// <summary>
        /// The field used to access the y-axis value from the items from the data
        /// source.
        /// *
        /// @property yField
        /// @type String
        /// </summary>
        public object yField { get; set; }
    }
    #endregion
    #region CategoryAxis
    /// <summary>
    /// @class Ext.chart.CategoryAxis
    /// @extends Ext.chart.Axis
    /// A type of axis that displays items in categories.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CategoryAxis : Ext.chart.Axis
    {
        /// <summary>
        /// Indicates whether or not to calculate the number of categories (ticks and
        /// labels) when there is not enough room to display all labels on the axis.
        /// If set to true, the axis will determine the number of categories to plot.
        /// If not, all categories will be plotted.
        /// *
        /// @property calculateCategoryCount
        /// @type Boolean
        /// </summary>
        public bool calculateCategoryCount { get; set; }
        /// <summary>
        /// A list of category names to display along this axis.
        /// *
        /// @property categoryNames
        /// @type Array
        /// </summary>
        public object categoryNames { get; set; }
        public JsString type { get; set; }
    }
    #endregion
    #region Chart
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Chart : Ext.FlashComponent
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class proxyFunction
        {
        }
        /// <summary>
        /// Changes the data store bound to this chart and refreshes it.
        /// @param {Store} store The store to bind to this chart
        /// </summary>
        public void bindStore(object store, object initial) { }
        public void createFnProxy(object fn) { }
        public void delayRefresh() { }
        public void getFunctionRef(object val) { }
        public new void initComponent() { }
        public void onDestroy() { }
        public void onSwfReady(object isReset) { }
        public void refresh() { }
        public void removeFnProxy(object fn) { }
        public void setCategoryNames(object names) { }
        public void setLegendRenderer(object fn, object scope) { }
        public void setSeries(object series) { }
        /// <summary>
        /// Sets the styles on all series in the Chart.
        /// *
        /// @param styles {Array} Initializer for all Chart series styles.
        /// </summary>
        public void setSeriesStyles(object styles) { }
        /// <summary>
        /// Sets a single style value on the Chart instance.
        /// *
        /// @param name {String} Name of the Chart style value to change.
        /// @param value {Object} New value to pass to the Chart style.
        /// </summary>
        public void setStyle(object name, object value) { }
        /// <summary>
        /// Resets all styles on the Chart instance.
        /// *
        /// @param styles {Object} Initializer for all Chart styles.
        /// </summary>
        public void setStyles(object styles) { }
        public void setTipRenderer(object fn, object scope) { }
        public JsString disableCacheParam { get; set; }
        /// <summary>
        /// @cfg {Object} extraStyle
        /// Contains extra styles that will be added or overwritten to the default chartStyle. Defaults to <tt>null</tt>.
        /// For a detailed list of the options available, visit the YUI Charts site
        /// at <a href="http://developer.yahoo.com/yui/charts/#basicstyles">http://developer.yahoo.com/yui/charts/#basicstyles</a><br/>
        /// Some of the options availabe:<br />
        /// <ul style="padding:5px;padding-left:16px;list-style-type:inherit;">
        /// <li><b>padding</b> - The space around the edge of the chart's contents. Padding does not increase the size of the chart.</li>
        /// <li><b>animationEnabled</b> - A Boolean value that specifies whether marker animations are enabled or not. Enabled by default.</li>
        /// <li><b>font</b> - An Object defining the font style to be used in the chart. Defaults to <tt>{ name: 'Tahoma', color: 0x444444, size: 11 }</tt><br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>name</b> - font name</li>
        /// <li><b>color</b> - font color (hex code, ie: "#ff0000", "ff0000" or 0xff0000)</li>
        /// <li><b>size</b> - font size in points (numeric portion only, ie: 11)</li>
        /// <li><b>bold</b> - boolean</li>
        /// <li><b>italic</b> - boolean</li>
        /// <li><b>underline</b> - boolean</li>
        /// </ul>
        /// </li>
        /// <li><b>border</b> - An object defining the border style around the chart. The chart itself will decrease in dimensions to accomodate the border.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color</b> - border color (hex code, ie: "#ff0000", "ff0000" or 0xff0000)</li>
        /// <li><b>size</b> - border size in pixels (numeric portion only, ie: 1)</li>
        /// </ul>
        /// </li>
        /// <li><b>background</b> - An object defining the background style of the chart.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color</b> - border color (hex code, ie: "#ff0000", "ff0000" or 0xff0000)</li>
        /// <li><b>image</b> - an image URL. May be relative to the current document or absolute.</li>
        /// </ul>
        /// </li>
        /// <li><b>legend</b> - An object defining the legend style<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>display</b> - location of the legend. Possible values are "none", "left", "right", "top", and "bottom".</li>
        /// <li><b>spacing</b> - an image URL. May be relative to the current document or absolute.</li>
        /// <li><b>padding, border, background, font</b> - same options as described above.</li>
        /// </ul></li>
        /// <li><b>dataTip</b> - An object defining the style of the data tip (tooltip).<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>padding, border, background, font</b> - same options as described above.</li>
        /// </ul></li>
        /// <li><b>xAxis and yAxis</b> - An object defining the style of the style of either axis.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color</b> - same option as described above.</li>
        /// <li><b>size</b> - same option as described above.</li>
        /// <li><b>showLabels</b> - boolean</li>
        /// <li><b>labelRotation</b> - a value in degrees from -90 through 90. Default is zero.</li>
        /// </ul></li>
        /// <li><b>majorGridLines and minorGridLines</b> - An object defining the style of the style of the grid lines.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color, size</b> - same options as described above.</li>
        /// </ul></li></li>
        /// <li><b>zeroGridLine</b> - An object defining the style of the style of the zero grid line.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color, size</b> - same options as described above.</li>
        /// </ul></li></li>
        /// <li><b>majorTicks and minorTicks</b> - An object defining the style of the style of ticks in the chart.<br/>
        /// <ul style="padding:5px;padding-left:26px;list-style-type:circle;">
        /// <li><b>color, size</b> - same options as described above.</li>
        /// <li><b>length</b> - the length of each tick in pixels extending from the axis.</li>
        /// <li><b>display</b> - how the ticks are drawn. Possible values are "none", "inside", "outside", and "cross".</li>
        /// </ul></li></li>
        /// </ul>
        /// </summary>
        public object extraStyle { get; set; }
        public object refreshBuffer { get; set; }
        /// <summary>
        /// @cfg {Object} seriesStyles
        /// Contains styles to apply to the series after a refresh. Defaults to <tt>null</tt>.
        /// </summary>
        public object seriesStyles { get; set; }
    }
    #endregion
    #region ColumnChart
    /// <summary>
    /// @class Ext.chart.ColumnChart
    /// @extends Ext.chart.CartesianChart
    /// @constructor
    /// @xtype columnchart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColumnChart : Ext.chart.CartesianChart
    {
        public JsString type { get; set; }
    }
    #endregion
    #region ColumnSeries
    /// <summary>
    /// @class Ext.chart.ColumnSeries
    /// @extends Ext.chart.CartesianSeries
    /// ColumnSeries class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColumnSeries : Ext.chart.CartesianSeries
    {
        public JsString type { get; set; }
    }
    #endregion
    #region LineChart
    /// <summary>
    /// @class Ext.chart.LineChart
    /// @extends Ext.chart.CartesianChart
    /// @constructor
    /// @xtype linechart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class LineChart : Ext.chart.CartesianChart
    {
        public JsString type { get; set; }
    }
    #endregion
    #region LineSeries
    /// <summary>
    /// @class Ext.chart.LineSeries
    /// @extends Ext.chart.CartesianSeries
    /// LineSeries class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class LineSeries : Ext.chart.CartesianSeries
    {
        public JsString type { get; set; }
    }
    #endregion
    #region NumericAxis
    /// <summary>
    /// @class Ext.chart.NumericAxis
    /// @extends Ext.chart.Axis
    /// A type of axis whose units are measured in numeric values.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class NumericAxis : Ext.chart.Axis
    {
        /// <summary>
        /// Indicates whether to extend maximum beyond data's maximum to the nearest
        /// majorUnit.
        /// *
        /// @property adjustMaximumByMajorUnit
        /// @type Boolean
        /// </summary>
        public bool adjustMaximumByMajorUnit { get; set; }
        /// <summary>
        /// Indicates whether to extend the minimum beyond data's minimum to the
        /// nearest majorUnit.
        /// *
        /// @property adjustMinimumByMajorUnit
        /// @type Boolean
        /// </summary>
        public bool adjustMinimumByMajorUnit { get; set; }
        /// <summary>
        /// If true, and the bounds are calculated automatically, either the minimum
        /// or maximum will be set to zero.
        /// *
        /// @property alwaysShowZero
        /// @type Boolean
        /// </summary>
        public bool alwaysShowZero { get; set; }
        /// <summary>
        /// Indicates whether to factor in the size of the labels when calculating a
        /// major unit.
        /// *
        /// @property calculateByLabelSize
        /// @type Boolean
        /// </summary>
        public bool calculateByLabelSize { get; set; }
        /// <summary>
        /// Indicates the position of the axis relative to the chart
        /// *
        /// @property position
        /// @type String
        /// </summary>
        public JsString position { get; set; }
        /// <summary>
        /// Indicates whether to round the major unit.
        /// *
        /// @property roundMajorUnit
        /// @type Boolean
        /// </summary>
        public bool roundMajorUnit { get; set; }
        /// <summary>
        /// The scaling algorithm to use on this axis. May be "linear" or
        /// "logarithmic".
        /// *
        /// @property scale
        /// @type String
        /// </summary>
        public JsString scale { get; set; }
        /// <summary>
        /// If true, the labels, ticks, gridlines, and other objects will snap to the
        /// nearest major or minor unit. If false, their position will be based on
        /// the minimum value.
        /// *
        /// @property snapToUnits
        /// @type Boolean
        /// </summary>
        public bool snapToUnits { get; set; }
        public JsString type { get; set; }
    }
    #endregion
    #region PieChart
    /// <summary>
    /// @class Ext.chart.PieChart
    /// @extends Ext.chart.Chart
    /// @constructor
    /// @xtype piechart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PieChart : Ext.chart.Chart
    {
        public new void onSwfReady(object isReset) { }
        public void setCategoryField(object field) { }
        public void setDataField(object field) { }
        public JsString type { get; set; }
    }
    #endregion
    #region PieSeries
    /// <summary>
    /// @class Ext.chart.PieSeries
    /// @extends Ext.chart.Series
    /// PieSeries class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PieSeries : Ext.chart.Series
    {
        public object categoryField { get; set; }
        public object dataField { get; set; }
        public JsString type { get; set; }
    }
    #endregion
    #region Series
    /// <summary>
    /// @class Ext.chart.Series
    /// Series class for the charts widget.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Series
    {
        public Series() { }
        /// <summary>
        /// @class Ext.chart.Series
        /// Series class for the charts widget.
        /// @constructor
        /// </summary>
        public Series(object config) { }
        /// <summary>
        /// The human-readable name of the series.
        /// *
        /// @property displayName
        /// @type String
        /// </summary>
        public object displayName { get; set; }
        /// <summary>
        /// The type of series.
        /// *
        /// @property type
        /// @type String
        /// </summary>
        public object type { get; set; }
    }
    #endregion
    #region StackedBarChart
    /// <summary>
    /// @class Ext.chart.StackedBarChart
    /// @extends Ext.chart.CartesianChart
    /// @constructor
    /// @xtype stackedbarchart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class StackedBarChart : Ext.chart.CartesianChart
    {
        public JsString type { get; set; }
    }
    #endregion
    #region StackedColumnChart
    /// <summary>
    /// @class Ext.chart.StackedColumnChart
    /// @extends Ext.chart.CartesianChart
    /// @constructor
    /// @xtype stackedcolumnchart
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class StackedColumnChart : Ext.chart.CartesianChart
    {
        public JsString type { get; set; }
    }
    #endregion
    #region TimeAxis
    /// <summary>
    /// @class Ext.chart.TimeAxis
    /// @extends Ext.chart.Axis
    /// A type of axis whose units are measured in time-based values.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TimeAxis : Ext.chart.Axis
    {
        /// <summary>
        /// Indicates whether to factor in the size of the labels when calculating a
        /// major unit.
        /// *
        /// @property calculateByLabelSize
        /// @type Boolean
        /// </summary>
        public bool calculateByLabelSize { get; set; }
        /// <summary>
        /// The time unit used by the majorUnit.
        /// *
        /// @property majorTimeUnit
        /// @type String
        /// </summary>
        public object majorTimeUnit { get; set; }
        /// <summary>
        /// The maximum value drawn by the axis. If not set explicitly, the axis
        /// maximum will be calculated automatically.
        /// *
        /// @property maximum
        /// @type Number
        /// </summary>
        public object maximum { get; set; }
        /// <summary>
        /// The minimum value drawn by the axis. If not set explicitly, the axis
        /// minimum will be calculated automatically.
        /// *
        /// @property minimum
        /// @type Date
        /// </summary>
        public object minimum { get; set; }
        /// <summary>
        /// The time unit used by the minorUnit.
        /// *
        /// @property majorTimeUnit
        /// @type String
        /// </summary>
        public object minorTimeUnit { get; set; }
        /// <summary>
        /// If true, the labels, ticks, gridlines, and other objects will snap to the
        /// nearest major or minor unit. If false, their position will be based on
        /// the minimum value.
        /// *
        /// @property snapToUnits
        /// @type Boolean
        /// </summary>
        public bool snapToUnits { get; set; }
        /// <summary>
        /// Series that are stackable will only stack when this value is set to true.
        /// *
        /// @property stackingEnabled
        /// @type Boolean
        /// </summary>
        public bool stackingEnabled { get; set; }
        public JsString type { get; set; }
    }
    #endregion
}
#endregion
#region Ext.data
namespace Ext.data
{
    #region ArrayReader
    /// <summary>
    /// @class Ext.data.ArrayReader
    /// @extends Ext.data.JsonReader
    /// <p>Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.
    /// Each element of that Array represents a row of data fields. The
    /// fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
    /// of the field definition if it exists, or the field's ordinal position in the definition.</p>
    /// <p>Example code:</p>
    /// <pre><code>
    /// var Employee = Ext.data.Record.create([
    /// {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
    /// {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
    /// ]);
    /// var myReader = new Ext.data.ArrayReader({
    /// {@link #idIndex}: 0
    /// }, Employee);
    /// </code></pre>
    /// <p>This would consume an Array like this:</p>
    /// <pre><code>
    /// [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
    /// </code></pre>
    /// @constructor
    /// Create a new ArrayReader
    /// @param {Object} meta Metadata configuration options.
    /// @param {Array/Object} recordType
    /// <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
    /// will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
    /// constructor created from {@link Ext.data.Record#create}.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ArrayReader : Ext.data.JsonReader
    {
        /// <summary>
        /// Create a data block containing Ext.data.Records from an Array.
        /// @param {Object} o An Array of row objects which represents the dataset.
        /// @return {Object} data A data block which is used by an Ext.data.Store object as
        /// a cache of Ext.data.Records.
        /// </summary>
        public JsObject readRecords(JsObject o) { return null; }
    }
    #endregion
    #region ArrayStore
    /// <summary>
    /// @class Ext.data.ArrayStore
    /// @extends Ext.data.Store
    /// <p>Formerly known as "SimpleStore".</p>
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from Array data easier.
    /// An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.</p>
    /// <p>A store configuration would be something like:<pre><code>
    /// var store = new Ext.data.ArrayStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore',
    /// // reader configs
    /// idIndex: 0,
    /// fields: [
    /// 'company',
    /// {name: 'price', type: 'float'},
    /// {name: 'change', type: 'float'},
    /// {name: 'pctChange', type: 'float'},
    /// {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
    /// ]
    /// });
    /// </code></pre></p>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// var myData = [
    /// ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
    /// ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
    /// ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
    /// ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
    /// ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
    /// ];
    /// </code></pre>
    /// An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.ArrayReader ArrayReader}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype arraystore
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ArrayStore : Ext.data.Store
    {
        public ArrayStore() { }
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public ArrayStore(object config) { }
        public void loadData(object data, object append) { }
    }
    #endregion
    #region Connection
    /// <summary>
    /// @class Ext.data.Connection
    /// @extends Ext.util.Observable
    /// <p>The class encapsulates a connection to the page's originating domain, allowing requests to be made
    /// either to a configured URL, or to a URL specified at request time.</p>
    /// <p>Requests made by this class are asynchronous, and will return immediately. No data from
    /// the server will be available to the statement immediately following the {@link #request} call.
    /// To process returned data, use a
    /// <a href="#request-option-success" ext:member="request-option-success" ext:cls="Ext.data.Connection">success callback</a>
    /// in the request options object,
    /// or an {@link #requestcomplete event listener}.</p>
    /// <p><h3>File Uploads</h3><a href="#request-option-isUpload" ext:member="request-option-isUpload" ext:cls="Ext.data.Connection">File uploads</a> are not performed using normal "Ajax" techniques, that
    /// is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
    /// manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
    /// <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
    /// to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
    /// but removed after the return data has been gathered.</p>
    /// <p>The server response is parsed by the browser to create the document for the IFRAME. If the
    /// server is using JSON to send the return object, then the
    /// <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
    /// must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
    /// <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
    /// "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
    /// <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
    /// is created containing a <tt>responseText</tt> property in order to conform to the
    /// requirements of event handlers and callbacks.</p>
    /// <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
    /// and some server technologies (notably JEE) may require some custom processing in order to
    /// retrieve parameter names and parameter values from the packet content.</p>
    /// <p>Also note that it's not possible to check the response code of the hidden iframe, so the success handler will ALWAYS fire.</p>
    /// @constructor
    /// @param {Object} config a configuration object.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Connection
    {
        public Connection() { }
        /// <summary>
        /// @class Ext.data.Connection
        /// @extends Ext.util.Observable
        /// <p>The class encapsulates a connection to the page's originating domain, allowing requests to be made
        /// either to a configured URL, or to a URL specified at request time.</p>
        /// <p>Requests made by this class are asynchronous, and will return immediately. No data from
        /// the server will be available to the statement immediately following the {@link #request} call.
        /// To process returned data, use a
        /// <a href="#request-option-success" ext:member="request-option-success" ext:cls="Ext.data.Connection">success callback</a>
        /// in the request options object,
        /// or an {@link #requestcomplete event listener}.</p>
        /// <p><h3>File Uploads</h3><a href="#request-option-isUpload" ext:member="request-option-isUpload" ext:cls="Ext.data.Connection">File uploads</a> are not performed using normal "Ajax" techniques, that
        /// is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
        /// manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
        /// <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
        /// to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
        /// but removed after the return data has been gathered.</p>
        /// <p>The server response is parsed by the browser to create the document for the IFRAME. If the
        /// server is using JSON to send the return object, then the
        /// <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
        /// must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
        /// <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
        /// "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
        /// <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
        /// is created containing a <tt>responseText</tt> property in order to conform to the
        /// requirements of event handlers and callbacks.</p>
        /// <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
        /// and some server technologies (notably JEE) may require some custom processing in order to
        /// retrieve parameter names and parameter values from the packet content.</p>
        /// <p>Also note that it's not possible to check the response code of the hidden iframe, so the success handler will ALWAYS fire.</p>
        /// @constructor
        /// @param {Object} config a configuration object.
        /// </summary>
        public Connection(JsObject config) { }
    }
    #endregion
    #region DataProxy
    /// <summary>
    /// @class Ext.data.DataProxy
    /// @extends Ext.util.Observable
    /// <p>Abstract base class for implementations which provide retrieval of unformatted data objects.
    /// This class is intended to be extended and should not be created directly. For existing implementations,
    /// see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and
    /// {@link Ext.data.MemoryProxy}.</p>
    /// <p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}
    /// (of the appropriate type which knows how to parse the data object) to provide a block of
    /// {@link Ext.data.Records} to an {@link Ext.data.Store}.</p>
    /// <p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the
    /// config object to an {@link Ext.data.Connection}.</p>
    /// <p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the
    /// <code>load</code> method (deprecated). See
    /// {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or
    /// {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>
    /// <p><b><u>Example 1</u></b></p>
    /// <pre><code>
    /// proxy: new Ext.data.ScriptTagProxy({
    /// {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'
    /// }),
    /// </code></pre>
    /// <p><b><u>Example 2</u></b></p>
    /// <pre><code>
    /// proxy : new Ext.data.HttpProxy({
    /// {@link Ext.data.Connection#method method}: 'GET',
    /// {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,
    /// {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}
    /// {@link #api}: {
    /// // all actions except the following will use above url
    /// create  : 'local/new.php',
    /// update  : 'local/update.php'
    /// }
    /// }),
    /// </code></pre>
    /// <p>And <b>new in Ext version 3</b>, attach centralized event-listeners upon the DataProxy class itself!  This is a great place
    /// to implement a <i>messaging system</i> to centralize your application's user-feedback and error-handling.</p>
    /// <pre><code>
    /// // Listen to all "beforewrite" event fired by all proxies.
    /// Ext.data.DataProxy.on('beforewrite', function(proxy, action) {
    /// console.log('beforewrite: ', action);
    /// });
    /// // Listen to "write" event fired by all proxies
    /// Ext.data.DataProxy.on('write', function(proxy, action, data, res, rs) {
    /// console.info('write: ', action);
    /// });
    /// // Listen to "exception" event fired by all proxies
    /// Ext.data.DataProxy.on('exception', function(proxy, type, action, exception) {
    /// console.error(type + action + ' exception);
    /// });
    /// </code></pre>
    /// <b>Note:</b> These three events are all fired with the signature of the corresponding <i>DataProxy instance</i> event {@link #beforewrite beforewrite}, {@link #write write} and {@link #exception exception}.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DataProxy
    {
        /// <summary>
        /// @class Ext.data.DataProxy.Error
        /// @extends Ext.Error
        /// DataProxy Error extension.
        /// constructor
        /// @param {String} message Message describing the error.
        /// @param {Record/Record[]} arg
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Error : Ext.Error
        {
            public Error() { }
            public Error(object message, object arg) { }
            public JsString name { get; set; }
        }
        public DataProxy() { }
        /// <summary>
        /// @class Ext.data.DataProxy
        /// @extends Ext.util.Observable
        /// <p>Abstract base class for implementations which provide retrieval of unformatted data objects.
        /// This class is intended to be extended and should not be created directly. For existing implementations,
        /// see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and
        /// {@link Ext.data.MemoryProxy}.</p>
        /// <p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}
        /// (of the appropriate type which knows how to parse the data object) to provide a block of
        /// {@link Ext.data.Records} to an {@link Ext.data.Store}.</p>
        /// <p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the
        /// config object to an {@link Ext.data.Connection}.</p>
        /// <p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the
        /// <code>load</code> method (deprecated). See
        /// {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or
        /// {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>
        /// <p><b><u>Example 1</u></b></p>
        /// <pre><code>
        /// proxy: new Ext.data.ScriptTagProxy({
        /// {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'
        /// }),
        /// </code></pre>
        /// <p><b><u>Example 2</u></b></p>
        /// <pre><code>
        /// proxy : new Ext.data.HttpProxy({
        /// {@link Ext.data.Connection#method method}: 'GET',
        /// {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,
        /// {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}
        /// {@link #api}: {
        /// // all actions except the following will use above url
        /// create  : 'local/new.php',
        /// update  : 'local/update.php'
        /// }
        /// }),
        /// </code></pre>
        /// <p>And <b>new in Ext version 3</b>, attach centralized event-listeners upon the DataProxy class itself!  This is a great place
        /// to implement a <i>messaging system</i> to centralize your application's user-feedback and error-handling.</p>
        /// <pre><code>
        /// // Listen to all "beforewrite" event fired by all proxies.
        /// Ext.data.DataProxy.on('beforewrite', function(proxy, action) {
        /// console.log('beforewrite: ', action);
        /// });
        /// // Listen to "write" event fired by all proxies
        /// Ext.data.DataProxy.on('write', function(proxy, action, data, res, rs) {
        /// console.info('write: ', action);
        /// });
        /// // Listen to "exception" event fired by all proxies
        /// Ext.data.DataProxy.on('exception', function(proxy, type, action, exception) {
        /// console.error(type + action + ' exception);
        /// });
        /// </code></pre>
        /// <b>Note:</b> These three events are all fired with the signature of the corresponding <i>DataProxy instance</i> event {@link #beforewrite beforewrite}, {@link #write write} and {@link #exception exception}.
        /// </summary>
        public DataProxy(object conn) { }
    }
    #endregion
    #region DataReader
    /// <summary>
    /// @class Ext.data.DataReader
    /// Abstract base class for reading structured data from a data source and converting
    /// it into an object containing {@link Ext.data.Record} objects and metadata for use
    /// by an {@link Ext.data.Store}.  This class is intended to be extended and should not
    /// be created directly. For existing implementations, see {@link Ext.data.ArrayReader},
    /// {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.
    /// @constructor Create a new DataReader
    /// @param {Object} meta Metadata configuration options (implementation-specific).
    /// @param {Array/Object} recordType
    /// <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
    /// will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
    /// constructor created using {@link Ext.data.Record#create}.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DataReader
    {
        /// <summary>
        /// @class Ext.data.DataReader.Error
        /// @extends Ext.Error
        /// General error class for Ext.data.DataReader
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Error : Ext.Error
        {
            public Error() { }
            public Error(object message, object arg) { }
            public JsString name { get; set; }
        }
        public DataReader() { }
        /// <summary>
        /// @class Ext.data.DataReader
        /// Abstract base class for reading structured data from a data source and converting
        /// it into an object containing {@link Ext.data.Record} objects and metadata for use
        /// by an {@link Ext.data.Store}.  This class is intended to be extended and should not
        /// be created directly. For existing implementations, see {@link Ext.data.ArrayReader},
        /// {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.
        /// @constructor Create a new DataReader
        /// @param {Object} meta Metadata configuration options (implementation-specific).
        /// @param {Array/Object} recordType
        /// <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
        /// will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
        /// constructor created using {@link Ext.data.Record#create}.</p>
        /// </summary>
        public DataReader(JsObject meta, object recordType) { }
        /// <summary>
        /// returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
        /// @param {Object[]/Object} data-root from server response
        /// @param {Boolean} returnRecords [false] Set true to return instances of Ext.data.Record
        /// @private
        /// </summary>
        public void extractData(object root, bool returnRecords) { }
        /// <summary>
        /// Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key
        /// corresponding to idProperty defined in your DataReader config containing non-empty pk.
        /// @param {Object} data
        /// @return {Boolean}
        /// </summary>
        public void isData(object data) { }
        public void onMetaChange(object meta) { }
        /// <summary>
        /// Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.
        /// You <b>must</b> return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming
        /// data from server will be merged with the data in the local record.
        /// In addition, you <b>must</b> return record-data from the server in the same order received.
        /// Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be suppressed.
        /// @param {Record/Record[]} record The phantom record to be realized.
        /// @param {Object/Object[]} data The new record data to apply.  Must include the primary-key from database defined in idProperty field.
        /// </summary>
        public void realize(object rs, object data) { }
        /// <summary>
        /// Used for updating a non-phantom or "real" record's data with fresh data from server after remote-save.
        /// If returning data from multiple-records after a batch-update, you <b>must</b> return record-data from the server in
        /// the same order received.  Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be
        /// suppressed as the record receives fresh new data-hash
        /// @param {Record/Record[]} rs
        /// @param {Object/Object[]} data
        /// </summary>
        public void update(object rs, object data) { }
    }
    #endregion
    #region DataWriter
    /// <summary>
    /// @class Ext.data.DataWriter
    /// <p>Ext.data.DataWriter facilitates create, update, and destroy actions between
    /// an Ext.data.Store and a server-side framework. A Writer enabled Store will
    /// automatically manage the Ajax requests to perform CRUD actions on a Store.</p>
    /// <p>Ext.data.DataWriter is an abstract base class which is intended to be extended
    /// and should not be created directly. For existing implementations, see
    /// {@link Ext.data.JsonWriter}.</p>
    /// <p>Creating a writer is simple:</p>
    /// <pre><code>
    /// var writer = new Ext.data.JsonWriter({
    /// encode: false   // &lt;--- false causes data to be printed to jsonData config-property of Ext.Ajax#reqeust
    /// });
    /// </code></pre>
    /// * <p>Same old JsonReader as Ext-2.x:</p>
    /// <pre><code>
    /// var reader = new Ext.data.JsonReader({idProperty: 'id'}, [{name: 'first'}, {name: 'last'}, {name: 'email'}]);
    /// </code></pre>
    /// *
    /// <p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>
    /// <pre><code>
    /// // Create a standard HttpProxy instance.
    /// var proxy = new Ext.data.HttpProxy({
    /// url: 'app.php/users'    // &lt;--- Supports "provides"-type urls, such as '/users.json', '/products.xml' (Hello Rails/Merb)
    /// });
    /// </code></pre>
    /// <p>For finer grained control, the proxy may also be configured with an <code>API</code>:</p>
    /// <pre><code>
    /// // Maximum flexibility with the API-configuration
    /// var proxy = new Ext.data.HttpProxy({
    /// api: {
    /// read    : 'app.php/users/read',
    /// create  : 'app.php/users/create',
    /// update  : 'app.php/users/update',
    /// destroy : {  // &lt;--- Supports object-syntax as well
    /// url: 'app.php/users/destroy',
    /// method: "DELETE"
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>Pulling it all together into a Writer-enabled Store:</p>
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// proxy: proxy,
    /// reader: reader,
    /// writer: writer,
    /// autoLoad: true,
    /// autoSave: true  // -- Cell-level updates.
    /// });
    /// </code></pre>
    /// <p>Initiating write-actions <b>automatically</b>, using the existing Ext2.0 Store/Record API:</p>
    /// <pre><code>
    /// var rec = store.getAt(0);
    /// rec.set('email', 'foo@bar.com');  // &lt;--- Immediately initiates an UPDATE action through configured proxy.
    /// store.remove(rec);  // &lt;---- Immediately initiates a DESTROY action through configured proxy.
    /// </code></pre>
    /// <p>For <b>record/batch</b> updates, use the Store-configuration {@link Ext.data.Store#autoSave autoSave:false}</p>
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// proxy: proxy,
    /// reader: reader,
    /// writer: writer,
    /// autoLoad: true,
    /// autoSave: false  // -- disable cell-updates
    /// });
    /// var urec = store.getAt(0);
    /// urec.set('email', 'foo@bar.com');
    /// var drec = store.getAt(1);
    /// store.remove(drec);
    /// // Push the button!
    /// store.save();
    /// </code></pre>
    /// @constructor Create a new DataWriter
    /// @param {Object} meta Metadata configuration options (implementation-specific)
    /// @param {Object} recordType Either an Array of field definition objects as specified
    /// in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created
    /// using {@link Ext.data.Record#create}.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DataWriter
    {
        public DataWriter() { }
        /// <summary>
        /// Compiles a Store recordset into a data-format defined by an extension such as {@link Ext.data.JsonWriter} or {@link Ext.data.XmlWriter} in preparation for a {@link Ext.data.Api#actions server-write action}.  The first two params are similar similar in nature to {@link Ext#apply},
        /// Where the first parameter is the <i>receiver</i> of paramaters and the second, baseParams, <i>the source</i>.
        /// @param {Object} params The request-params receiver.
        /// @param {Object} baseParams as defined by {@link Ext.data.Store#baseParams}.  The baseParms must be encoded by the extending class, eg: {@link Ext.data.JsonWriter}, {@link Ext.data.XmlWriter}.
        /// @param {String} action [{@link Ext.data.Api#actions create|update|destroy}]
        /// @param {Record/Record[]} rs The recordset to write, the subject(s) of the write action.
        /// </summary>
        public void apply(JsObject @params, JsObject baseParams, JsString action, object rs) { }
        /// <summary>
        /// @class Ext.data.DataWriter
        /// <p>Ext.data.DataWriter facilitates create, update, and destroy actions between
        /// an Ext.data.Store and a server-side framework. A Writer enabled Store will
        /// automatically manage the Ajax requests to perform CRUD actions on a Store.</p>
        /// <p>Ext.data.DataWriter is an abstract base class which is intended to be extended
        /// and should not be created directly. For existing implementations, see
        /// {@link Ext.data.JsonWriter}.</p>
        /// <p>Creating a writer is simple:</p>
        /// <pre><code>
        /// var writer = new Ext.data.JsonWriter({
        /// encode: false   // &lt;--- false causes data to be printed to jsonData config-property of Ext.Ajax#reqeust
        /// });
        /// </code></pre>
        /// * <p>Same old JsonReader as Ext-2.x:</p>
        /// <pre><code>
        /// var reader = new Ext.data.JsonReader({idProperty: 'id'}, [{name: 'first'}, {name: 'last'}, {name: 'email'}]);
        /// </code></pre>
        /// *
        /// <p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>
        /// <pre><code>
        /// // Create a standard HttpProxy instance.
        /// var proxy = new Ext.data.HttpProxy({
        /// url: 'app.php/users'    // &lt;--- Supports "provides"-type urls, such as '/users.json', '/products.xml' (Hello Rails/Merb)
        /// });
        /// </code></pre>
        /// <p>For finer grained control, the proxy may also be configured with an <code>API</code>:</p>
        /// <pre><code>
        /// // Maximum flexibility with the API-configuration
        /// var proxy = new Ext.data.HttpProxy({
        /// api: {
        /// read    : 'app.php/users/read',
        /// create  : 'app.php/users/create',
        /// update  : 'app.php/users/update',
        /// destroy : {  // &lt;--- Supports object-syntax as well
        /// url: 'app.php/users/destroy',
        /// method: "DELETE"
        /// }
        /// }
        /// });
        /// </code></pre>
        /// <p>Pulling it all together into a Writer-enabled Store:</p>
        /// <pre><code>
        /// var store = new Ext.data.Store({
        /// proxy: proxy,
        /// reader: reader,
        /// writer: writer,
        /// autoLoad: true,
        /// autoSave: true  // -- Cell-level updates.
        /// });
        /// </code></pre>
        /// <p>Initiating write-actions <b>automatically</b>, using the existing Ext2.0 Store/Record API:</p>
        /// <pre><code>
        /// var rec = store.getAt(0);
        /// rec.set('email', 'foo@bar.com');  // &lt;--- Immediately initiates an UPDATE action through configured proxy.
        /// store.remove(rec);  // &lt;---- Immediately initiates a DESTROY action through configured proxy.
        /// </code></pre>
        /// <p>For <b>record/batch</b> updates, use the Store-configuration {@link Ext.data.Store#autoSave autoSave:false}</p>
        /// <pre><code>
        /// var store = new Ext.data.Store({
        /// proxy: proxy,
        /// reader: reader,
        /// writer: writer,
        /// autoLoad: true,
        /// autoSave: false  // -- disable cell-updates
        /// });
        /// var urec = store.getAt(0);
        /// urec.set('email', 'foo@bar.com');
        /// var drec = store.getAt(1);
        /// store.remove(drec);
        /// // Push the button!
        /// store.save();
        /// </code></pre>
        /// @constructor Create a new DataWriter
        /// @param {Object} meta Metadata configuration options (implementation-specific)
        /// @param {Object} recordType Either an Array of field definition objects as specified
        /// in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created
        /// using {@link Ext.data.Record#create}.
        /// </summary>
        public DataWriter(object config) { }
        /// <summary>
        /// Converts a {@link Ext.data.DataWriter#toHash Hashed} {@link Ext.data.Record} to fields-array array suitable
        /// for encoding to xml via XTemplate, eg:
        /// <code><pre>&lt;tpl for=".">&lt;{name}>{value}&lt;/{name}&lt;/tpl></pre></code>
        /// eg, <b>non-phantom</b>:
        /// <code><pre>{id: 1, first: 'foo', last: 'bar'} --> [{name: 'id', value: 1}, {name: 'first', value: 'foo'}, {name: 'last', value: 'bar'}]</pre></code>
        /// {@link Ext.data.Record#phantom Phantom} records will have had their idProperty omitted in {@link #toHash} if determined to be auto-generated.
        /// Non AUTOINCREMENT pks should have been protected.
        /// @param {Hash} data Hashed by Ext.data.DataWriter#toHash
        /// @return {[Object]} Array of attribute-objects.
        /// @protected
        /// </summary>
        public void toArray(object data) { }
        /// <summary>
        /// Converts a Record to a hash, taking into account the state of the Ext.data.Record along with configuration properties
        /// related to its rendering, such as {@link #writeAllFields}, {@link Ext.data.Record#phantom phantom}, {@link Ext.data.Record#getChanges getChanges} and
        /// {@link Ext.data.DataReader#idProperty idProperty}
        /// @param {Ext.data.Record} rec The Record from which to create a hash.
        /// @param {Object} config <b>NOT YET IMPLEMENTED</b>.  Will implement an exlude/only configuration for fine-control over which fields do/don't get rendered.
        /// @return {Object}
        /// @protected
        /// TODO Implement excludes/only configuration with 2nd param?
        /// </summary>
        public void toHash(Record rec, JsObject config) { }
        /// <summary>
        /// @cfg {Boolean} listful
        /// <tt>false</tt> by default.  Set <tt>true</tt> to have the DataWriter <b>always</b> write HTTP params as a list,
        /// even when acting upon a single record.
        /// </summary>
        public bool listful { get; set; }
        /// <summary>
        /// @cfg {Boolean} writeAllFields
        /// <tt>false</tt> by default.  Set <tt>true</tt> to have DataWriter return ALL fields of a modified
        /// record -- not just those that changed.
        /// <tt>false</tt> to have DataWriter only request modified fields from a record.
        /// </summary>
        public bool writeAllFields { get; set; }
    }
    #endregion
    #region DirectProxy
    /// <summary>
    /// @class Ext.data.DirectProxy
    /// @extends Ext.data.DataProxy
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DirectProxy
    {
        public DirectProxy() { }
        /// <summary>
        /// @class Ext.data.DirectProxy
        /// @extends Ext.data.DataProxy
        /// </summary>
        public DirectProxy(object config) { }
    }
    #endregion
    #region DirectStore
    /// <summary>
    /// @class Ext.data.DirectStore
    /// @extends Ext.data.Store
    /// <p>Small helper class to create an {@link Ext.data.Store} configured with an
    /// {@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting
    /// with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.
    /// To create a different proxy/reader combination create a basic {@link Ext.data.Store}
    /// configured as needed.</p>
    /// *
    /// <p><b>*Note:</b> Although they are not listed, this class inherits all of the config options of:</p>
    /// <div><ul class="mdetail-params">
    /// <li><b>{@link Ext.data.Store Store}</b></li>
    /// <div class="sub-desc"><ul class="mdetail-params">
    /// *
    /// </ul></div>
    /// <li><b>{@link Ext.data.JsonReader JsonReader}</b></li>
    /// <div class="sub-desc"><ul class="mdetail-params">
    /// <li><tt><b>{@link Ext.data.JsonReader#root root}</b></tt></li>
    /// <li><tt><b>{@link Ext.data.JsonReader#idProperty idProperty}</b></tt></li>
    /// <li><tt><b>{@link Ext.data.JsonReader#totalProperty totalProperty}</b></tt></li>
    /// </ul></div>
    /// *
    /// <li><b>{@link Ext.data.DirectProxy DirectProxy}</b></li>
    /// <div class="sub-desc"><ul class="mdetail-params">
    /// <li><tt><b>{@link Ext.data.DirectProxy#directFn directFn}</b></tt></li>
    /// <li><tt><b>{@link Ext.data.DirectProxy#paramOrder paramOrder}</b></tt></li>
    /// <li><tt><b>{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}</b></tt></li>
    /// </ul></div>
    /// </ul></div>
    /// *
    /// @xtype directstore
    /// *
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DirectStore : Ext.data.Store
    {
        public DirectStore() { }
        public DirectStore(object config) { }
    }
    #endregion
    #region Field
    /// <summary>
    /// @class Ext.data.Field
    /// <p>This class encapsulates the field definition information specified in the field definition objects
    /// passed to {@link Ext.data.Record#create}.</p>
    /// <p>Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}
    /// and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor's <b>prototype.</b></p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Field : JsObject
    {
        public Field() { }
        public Field(object config) { }
        /// <summary>
        /// @cfg {Boolean} allowBlank
        /// (Optional) Used for validating a {@link Ext.data.Record record}, defaults to <code>true</code>.
        /// An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}
        /// to evaluate to <code>false</code>.
        /// </summary>
        public bool allowBlank { get; set; }
        /// <summary>
        /// @cfg {String} dateFormat
        /// <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
        /// <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
        /// value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
        /// javascript millisecond timestamp. See {@link Date}</p>
        /// </summary>
        public object dateFormat { get; set; }
        /// <summary>
        /// @cfg {Mixed} defaultValue
        /// (Optional) The default value used <b>when a Record is being created by a {@link Ext.data.Reader Reader}</b>
        /// when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
        /// object (i.e. undefined). (defaults to "")
        /// </summary>
        public JsString defaultValue { get; set; }
        /// <summary>
        /// @cfg {String/Number} mapping
        /// <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
        /// that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.
        /// If the path expression is the same as the field name, the mapping may be omitted.</p>
        /// <p>The form of the mapping expression depends on the Reader being used.</p>
        /// <div class="mdetail-params"><ul>
        /// <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
        /// expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
        /// item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
        /// of the field's value. Defaults to the field specification's Array position.</div></li>
        /// </ul></div>
        /// <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.</p>
        /// </summary>
        public object mapping { get; set; }
        /// <summary>
        /// @cfg {String} sortDir
        /// (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
        /// <code>"ASC"</code>.
        /// </summary>
        public JsString sortDir { get; set; }
        /// <summary>
        /// @cfg {Function} sortType
        /// (Optional) A function which converts a Field's value to a comparable value in order to ensure
        /// correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
        /// sort example:<pre><code>
        /// // current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </code></pre>
        /// </summary>
        public object sortType { get; set; }
        /// <summary>
        /// @cfg {Boolean} useNull
        /// <p>(Optional) Use when converting received data into a Number type (either int or float). If the value cannot be parsed,
        /// null will be used if useNull is true, otherwise the value will be 0. Defaults to <tt>false</tt>
        /// </summary>
        public bool useNull { get; set; }
    }
    #endregion
    #region GroupingStore
    /// <summary>
    /// @class Ext.data.GroupingStore
    /// @extends Ext.data.Store
    /// A specialized store implementation that provides for grouping records by one of the available fields. This
    /// is usually used in conjunction with an {@link Ext.grid.GroupingView} to provide the data model for
    /// a grouped GridPanel.
    /// *
    /// Internally, GroupingStore is simply a normal Store with multi sorting enabled from the start. The grouping field
    /// and direction are always injected as the first sorter pair. GroupingView picks up on the configured groupField and
    /// builds grid rows appropriately.
    /// *
    /// @constructor
    /// Creates a new GroupingStore.
    /// @param {Object} config A config object containing the objects needed for the Store to access data,
    /// and read the data into Records.
    /// @xtype groupingstore
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GroupingStore : Ext.data.Store
    {
        public GroupingStore() { }
        /// <summary>
        /// @private
        /// Saves the current grouping field and direction to this.baseParams and this.lastOptions.params
        /// if we're using remote grouping. Does not actually perform any grouping - just stores values
        /// </summary>
        public void applyGroupField() { }
        /// <summary>
        /// @private
        /// TODO: This function is apparently never invoked anywhere in the framework. It has no documentation
        /// and should be considered for deletion
        /// </summary>
        public void applyGrouping(object alwaysFireChange) { }
        /// <summary>
        /// Clears any existing grouping and refreshes the data using the default sort.
        /// </summary>
        public void clearGrouping() { }
        public GroupingStore(object config) { }
        /// <summary>
        /// @private
        /// Returns the grouping field that should be used. If groupOnSort is used this will be sortInfo's field,
        /// otherwise it will be this.groupField
        /// @return {String} The group field
        /// </summary>
        public JsString getGroupState() { return null; }
        /// <summary>
        /// Groups the data by the specified field.
        /// @param {String} field The field name by which to sort the store's data
        /// @param {Boolean} forceRegroup (optional) True to force the group to be refreshed even if the field passed
        /// in is the same as the current grouping field, false to skip grouping on the same field (defaults to false)
        /// </summary>
        public void groupBy(JsString field, bool forceRegroup, object direction) { }
        public void sort(object fieldName, object dir) { }
        /// <summary>
        /// @cfg {String} groupDir
        /// The direction to sort the groups. Defaults to <tt>'ASC'</tt>.
        /// </summary>
        public JsString groupDir { get; set; }
        /// <summary>
        /// @cfg {Boolean} groupOnSort
        /// True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the
        /// existing sort info (defaults to false).
        /// </summary>
        public bool groupOnSort { get; set; }
        /// <summary>
        /// @cfg {Boolean} remoteGroup
        /// True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
        /// grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
        /// helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
        /// </summary>
        public bool remoteGroup { get; set; }
    }
    #endregion
    #region HttpProxy
    /// <summary>
    /// @class Ext.data.HttpProxy
    /// @extends Ext.data.DataProxy
    /// <p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same
    /// domain of the originating page.</p>
    /// <p><b>Note</b>: this class cannot be used to retrieve data from a domain other
    /// than the domain from which the running page was served. For cross-domain requests, use a
    /// {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
    /// <p>Be aware that to enable the browser to parse an XML document, the server must set
    /// the Content-Type header in the HTTP response to "<tt>text/xml</tt>".</p>
    /// @constructor
    /// @param {Object} conn
    /// An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.
    /// <p>Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the
    /// Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt>
    /// options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters,
    /// or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be
    /// used to pass parameters known at instantiation time.</p>
    /// <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make
    /// the request.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HttpProxy
    {
        public HttpProxy() { }
        /// <summary>
        /// @class Ext.data.HttpProxy
        /// @extends Ext.data.DataProxy
        /// <p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same
        /// domain of the originating page.</p>
        /// <p><b>Note</b>: this class cannot be used to retrieve data from a domain other
        /// than the domain from which the running page was served. For cross-domain requests, use a
        /// {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
        /// <p>Be aware that to enable the browser to parse an XML document, the server must set
        /// the Content-Type header in the HTTP response to "<tt>text/xml</tt>".</p>
        /// @constructor
        /// @param {Object} conn
        /// An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.
        /// <p>Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the
        /// Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt>
        /// options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters,
        /// or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be
        /// used to pass parameters known at instantiation time.</p>
        /// <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make
        /// the request.</p>
        /// </summary>
        public HttpProxy(object conn) { }
    }
    #endregion
    #region JsonReader
    /// <summary>
    /// @class Ext.data.JsonReader
    /// @extends Ext.data.DataReader
    /// <p>Data reader class to create an Array of {@link Ext.data.Record} objects
    /// from a JSON packet based on mappings in a provided {@link Ext.data.Record}
    /// constructor.</p>
    /// <p>Example code:</p>
    /// <pre><code>
    /// var myReader = new Ext.data.JsonReader({
    /// // metadata configuration options:
    /// {@link #idProperty}: 'id'
    /// {@link #root}: 'rows',
    /// {@link #totalProperty}: 'results',
    /// {@link Ext.data.DataReader#messageProperty}: "msg"  // The element within the response that provides a user-feedback message (optional)
    /// // the fields config option will internally create an {@link Ext.data.Record}
    /// // constructor that provides mapping for reading the record data objects
    /// {@link Ext.data.DataReader#fields fields}: [
    /// // map Record&#39;s 'firstname' field to data object&#39;s key of same name
    /// {name: 'name', mapping: 'firstname'},
    /// // map Record&#39;s 'job' field to data object&#39;s 'occupation' key
    /// {name: 'job', mapping: 'occupation'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>This would consume a JSON data object of the form:</p><pre><code>
    /// {
    /// results: 2000, // Reader&#39;s configured {@link #totalProperty}
    /// rows: [        // Reader&#39;s configured {@link #root}
    /// // record data objects:
    /// { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },
    /// { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
    /// ...
    /// ]
    /// }
    /// </code></pre>
    /// <p><b><u>Automatic configuration using metaData</u></b></p>
    /// <p>It is possible to change a JsonReader's metadata at any time by including
    /// a <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
    /// object has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}
    /// object using this Reader will reconfigure itself to use the newly provided
    /// field definition and fire its {@link Ext.data.Store#metachange metachange}
    /// event. The metachange event handler may interrogate the <b><tt>metaData</tt></b>
    /// property to perform any configuration required.</p>
    /// <p>Note that reconfiguring a Store potentially invalidates objects which may
    /// refer to Fields or Records which no longer exist.</p>
    /// <p>To use this facility you would create the JsonReader like this:</p><pre><code>
    /// var myReader = new Ext.data.JsonReader();
    /// </code></pre>
    /// <p>The first data packet from the server would configure the reader by
    /// containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
    /// example, the JSON data object might take the form:</p><pre><code>
    /// {
    /// metaData: {
    /// "{@link #idProperty}": "id",
    /// "{@link #root}": "rows",
    /// "{@link #totalProperty}": "results"
    /// "{@link #successProperty}": "success",
    /// "{@link Ext.data.DataReader#fields fields}": [
    /// {"name": "name"},
    /// {"name": "job", "mapping": "occupation"}
    /// ],
    /// // used by store to set its sortInfo
    /// "sortInfo":{
    /// "field": "name",
    /// "direction": "ASC"
    /// },
    /// // {@link Ext.PagingToolbar paging data} (if applicable)
    /// "start": 0,
    /// "limit": 2,
    /// // custom property
    /// "foo": "bar"
    /// },
    /// // Reader&#39;s configured {@link #successProperty}
    /// "success": true,
    /// // Reader&#39;s configured {@link #totalProperty}
    /// "results": 2000,
    /// // Reader&#39;s configured {@link #root}
    /// // (this data simulates 2 results {@link Ext.PagingToolbar per page})
    /// "rows": [ // <b>*Note:</b> this must be an Array
    /// { "id": 1, "name": "Bill", "occupation": "Gardener" },
    /// { "id": 2, "name":  "Ben", "occupation": "Horticulturalist" }
    /// ]
    /// }
    /// </code></pre>
    /// <p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>
    /// <div class="mdetail-params"><ul>
    /// <li>any of the configuration options for this class</li>
    /// <li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which
    /// the JsonReader will use as an argument to the
    /// {@link Ext.data.Record#create data Record create method} in order to
    /// configure the layout of the Records it will produce.</li>
    /// <li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property
    /// which the JsonReader will use to set the {@link Ext.data.Store}'s
    /// {@link Ext.data.Store#sortInfo sortInfo} property</li>
    /// <li>any custom properties needed</li>
    /// </ul></div>
    /// *
    /// @constructor
    /// Create a new JsonReader
    /// @param {Object} meta Metadata configuration options.
    /// @param {Array/Object} recordType
    /// <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
    /// will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
    /// constructor created from {@link Ext.data.Record#create}.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class JsonReader
    {
        /// <summary>
        /// @class Ext.data.JsonReader.Error
        /// Error class for JsonReader
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Error : Ext.Error
        {
            public Error() { }
            public Error(object message, object arg) { }
            public JsString name { get; set; }
        }
        public JsonReader() { }
        /// <summary>
        /// @class Ext.data.JsonReader
        /// @extends Ext.data.DataReader
        /// <p>Data reader class to create an Array of {@link Ext.data.Record} objects
        /// from a JSON packet based on mappings in a provided {@link Ext.data.Record}
        /// constructor.</p>
        /// <p>Example code:</p>
        /// <pre><code>
        /// var myReader = new Ext.data.JsonReader({
        /// // metadata configuration options:
        /// {@link #idProperty}: 'id'
        /// {@link #root}: 'rows',
        /// {@link #totalProperty}: 'results',
        /// {@link Ext.data.DataReader#messageProperty}: "msg"  // The element within the response that provides a user-feedback message (optional)
        /// // the fields config option will internally create an {@link Ext.data.Record}
        /// // constructor that provides mapping for reading the record data objects
        /// {@link Ext.data.DataReader#fields fields}: [
        /// // map Record&#39;s 'firstname' field to data object&#39;s key of same name
        /// {name: 'name', mapping: 'firstname'},
        /// // map Record&#39;s 'job' field to data object&#39;s 'occupation' key
        /// {name: 'job', mapping: 'occupation'}
        /// ]
        /// });
        /// </code></pre>
        /// <p>This would consume a JSON data object of the form:</p><pre><code>
        /// {
        /// results: 2000, // Reader&#39;s configured {@link #totalProperty}
        /// rows: [        // Reader&#39;s configured {@link #root}
        /// // record data objects:
        /// { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },
        /// { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
        /// ...
        /// ]
        /// }
        /// </code></pre>
        /// <p><b><u>Automatic configuration using metaData</u></b></p>
        /// <p>It is possible to change a JsonReader's metadata at any time by including
        /// a <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
        /// object has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}
        /// object using this Reader will reconfigure itself to use the newly provided
        /// field definition and fire its {@link Ext.data.Store#metachange metachange}
        /// event. The metachange event handler may interrogate the <b><tt>metaData</tt></b>
        /// property to perform any configuration required.</p>
        /// <p>Note that reconfiguring a Store potentially invalidates objects which may
        /// refer to Fields or Records which no longer exist.</p>
        /// <p>To use this facility you would create the JsonReader like this:</p><pre><code>
        /// var myReader = new Ext.data.JsonReader();
        /// </code></pre>
        /// <p>The first data packet from the server would configure the reader by
        /// containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
        /// example, the JSON data object might take the form:</p><pre><code>
        /// {
        /// metaData: {
        /// "{@link #idProperty}": "id",
        /// "{@link #root}": "rows",
        /// "{@link #totalProperty}": "results"
        /// "{@link #successProperty}": "success",
        /// "{@link Ext.data.DataReader#fields fields}": [
        /// {"name": "name"},
        /// {"name": "job", "mapping": "occupation"}
        /// ],
        /// // used by store to set its sortInfo
        /// "sortInfo":{
        /// "field": "name",
        /// "direction": "ASC"
        /// },
        /// // {@link Ext.PagingToolbar paging data} (if applicable)
        /// "start": 0,
        /// "limit": 2,
        /// // custom property
        /// "foo": "bar"
        /// },
        /// // Reader&#39;s configured {@link #successProperty}
        /// "success": true,
        /// // Reader&#39;s configured {@link #totalProperty}
        /// "results": 2000,
        /// // Reader&#39;s configured {@link #root}
        /// // (this data simulates 2 results {@link Ext.PagingToolbar per page})
        /// "rows": [ // <b>*Note:</b> this must be an Array
        /// { "id": 1, "name": "Bill", "occupation": "Gardener" },
        /// { "id": 2, "name":  "Ben", "occupation": "Horticulturalist" }
        /// ]
        /// }
        /// </code></pre>
        /// <p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>
        /// <div class="mdetail-params"><ul>
        /// <li>any of the configuration options for this class</li>
        /// <li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which
        /// the JsonReader will use as an argument to the
        /// {@link Ext.data.Record#create data Record create method} in order to
        /// configure the layout of the Records it will produce.</li>
        /// <li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property
        /// which the JsonReader will use to set the {@link Ext.data.Store}'s
        /// {@link Ext.data.Store#sortInfo sortInfo} property</li>
        /// <li>any custom properties needed</li>
        /// </ul></div>
        /// *
        /// @constructor
        /// Create a new JsonReader
        /// @param {Object} meta Metadata configuration options.
        /// @param {Array/Object} recordType
        /// <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
        /// will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
        /// constructor created from {@link Ext.data.Record#create}.</p>
        /// </summary>
        public JsonReader(JsObject meta, object recordType) { }
    }
    #endregion
    #region JsonStore
    /// <summary>
    /// @class Ext.data.JsonStore
    /// @extends Ext.data.Store
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
    /// A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.</p>
    /// <p>A store configuration would be something like:<pre><code>
    /// var store = new Ext.data.JsonStore({
    /// // store configs
    /// autoDestroy: true,
    /// url: 'get-images.php',
    /// storeId: 'myStore',
    /// // reader configs
    /// root: 'images',
    /// idProperty: 'name',
    /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
    /// });
    /// </code></pre></p>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// {
    /// images: [
    /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
    /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
    /// ]
    /// }
    /// </code></pre>
    /// An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.JsonReader JsonReader}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype jsonstore
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class JsonStore : Ext.data.Store
    {
        public JsonStore() { }
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public JsonStore(object config) { }
    }
    #endregion
    #region JsonWriter
    /// <summary>
    /// @class Ext.data.JsonWriter
    /// @extends Ext.data.DataWriter
    /// DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class JsonWriter : Ext.data.DataWriter
    {
        public JsonWriter() { }
        public JsonWriter(object config) { }
        /// <summary>
        /// Implements abstract Ext.data.DataWriter#createRecord
        /// @protected
        /// @param {Ext.data.Record} rec
        /// @return {Object}
        /// </summary>
        public void createRecord(object rec) { }
        /// <summary>
        /// Implements abstract Ext.data.DataWriter#destroyRecord
        /// @protected
        /// @param {Ext.data.Record} rec
        /// @return {Object}
        /// </summary>
        public void destroyRecord(object rec) { }
        /// <summary>
        /// <p>This method should not need to be called by application code, however it may be useful on occasion to
        /// override it, or augment it with an {@link Function#createInterceptor interceptor} or {@link Function#createSequence sequence}.</p>
        /// <p>The provided implementation encodes the serialized data representing the Store's modified Records into the Ajax request's
        /// <code>params</code> according to the <code>{@link #encode}</code> setting.</p>
        /// @param {Object} Ajax request params object to write into.
        /// @param {Object} baseParams as defined by {@link Ext.data.Store#baseParams}.  The baseParms must be encoded by the extending class, eg: {@link Ext.data.JsonWriter}, {@link Ext.data.XmlWriter}.
        /// @param {Object/Object[]} data Data object representing the serialized modified records from the Store. May be either a single object,
        /// or an Array of objects - user implementations must handle both cases.
        /// </summary>
        public void render(object @params, JsObject baseParams, object data) { }
        /// <summary>
        /// Implements abstract Ext.data.DataWriter#updateRecord
        /// @protected
        /// @param {Ext.data.Record} rec
        /// @return {Object}
        /// </summary>
        public void updateRecord(object rec) { }
        /// <summary>
        /// @cfg {Boolean} encode <p><tt>true</tt> to {@link Ext.util.JSON#encode JSON encode} the
        /// {@link Ext.data.DataWriter#toHash hashed data} into a standard HTTP parameter named after this
        /// Reader's <code>meta.root</code> property which, by default is imported from the associated Reader. Defaults to <tt>true</tt>.</p>
        /// <p>If set to <code>false</code>, the hashed data is {@link Ext.util.JSON#encode JSON encoded}, along with
        /// the associated {@link Ext.data.Store}'s {@link Ext.data.Store#baseParams baseParams}, into the POST body.</p>
        /// <p>When using {@link Ext.data.DirectProxy}, set this to <tt>false</tt> since Ext.Direct.JsonProvider will perform
        /// its own json-encoding.  In addition, if you're using {@link Ext.data.HttpProxy}, setting to <tt>false</tt>
        /// will cause HttpProxy to transmit data using the <b>jsonData</b> configuration-params of {@link Ext.Ajax#request}
        /// instead of <b>params</b>.</p>
        /// <p>When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are
        /// tuned to expect data through the jsonData mechanism.  In those cases, one will want to set <b>encode: <tt>false</tt></b>, as in
        /// let the lower-level connection object (eg: Ext.Ajax) do the encoding.</p>
        /// </summary>
        public bool encode { get; set; }
        /// <summary>
        /// @cfg {Boolean} encodeDelete False to send only the id to the server on delete, true to encode it in an object
        /// literal, eg: <pre><code>
        /// {id: 1}
        /// </code></pre> Defaults to <tt>false</tt>
        /// </summary>
        public bool encodeDelete { get; set; }
    }
    #endregion
    #region MemoryProxy
    /// <summary>
    /// @class Ext.data.MemoryProxy
    /// @extends Ext.data.DataProxy
    /// An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
    /// to the Reader when its load method is called.
    /// @constructor
    /// @param {Object} data The data object which the Reader uses to construct a block of Ext.data.Records.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MemoryProxy
    {
        public MemoryProxy() { }
        /// <summary>
        /// @class Ext.data.MemoryProxy
        /// @extends Ext.data.DataProxy
        /// An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
        /// to the Reader when its load method is called.
        /// @constructor
        /// @param {Object} data The data object which the Reader uses to construct a block of Ext.data.Records.
        /// </summary>
        public MemoryProxy(JsObject data) { }
    }
    #endregion
    #region Node
    /// <summary>
    /// @class Ext.data.Node
    /// @extends Ext.util.Observable
    /// @cfg {Boolean} leaf true if this node is a leaf and does not have children
    /// @cfg {String} id The id for this node. If one is not specified, one is generated.
    /// @constructor
    /// @param {Object} attributes The attributes/config for the node
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Node : Ext.util.Observable
    {
        public Node() { }
        public Node(NodeConfig config) { }
        /// <summary>
        /// Insert node(s) as the last child node of this node.
        /// @param {Node/Array} node The node or Array of nodes to append
        /// @return {Node} The appended node if single append, or null if an array was passed
        /// </summary>
        public void appendChild(object node) { }
        /// <summary>
        /// Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the bubble is stopped.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void bubble(JsAction fn, JsObject scope, JsArray args) { }
        /// <summary>
        /// Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the cascade is stopped on that branch.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void cascade(JsAction fn, JsObject scope, JsArray args) { }
        public void clear(object destroy) { }
        public Node(object attributes) { }
        /// <summary>
        /// Returns true if this node is an ancestor (at any point) of the passed node.
        /// @param {Node} node
        /// @return {Boolean}
        /// </summary>
        public void contains(object node) { }
        /// <summary>
        /// Destroys the node.
        /// </summary>
        public void destroy(object silent) { }
        /// <summary>
        /// Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the iteration stops.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node in the iteration.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void eachChild(JsAction fn, JsObject scope, JsArray args) { }
        /// <summary>
        /// Finds the first child that has the attribute with the specified value.
        /// @param {String} attribute The attribute name
        /// @param {Mixed} value The value to search for
        /// @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
        /// @return {Node} The found child or null if none was found
        /// </summary>
        public void findChild(JsString attribute, object value, bool deep) { }
        /// <summary>
        /// Finds the first child by a custom function. The child matches if the function passed returns <code>true</code>.
        /// @param {Function} fn A function which must return <code>true</code> if the passed Node is the required Node.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Node being tested.
        /// @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
        /// @return {Node} The found child or null if none was found
        /// </summary>
        public void findChildBy(JsAction fn, JsObject scope, bool deep) { }
        public void fireEvent(object evtName) { }
        /// <summary>
        /// Returns depth of this node (the root node has a depth of 0)
        /// @return {Number}
        /// </summary>
        public void getDepth() { }
        /// <summary>
        /// Returns the tree this node is in.
        /// @return {Tree}
        /// </summary>
        public void getOwnerTree() { }
        /// <summary>
        /// Returns the path for this node. The path can be used to expand or select this node programmatically.
        /// @param {String} attr (optional) The attr to use for the path (defaults to the node's id)
        /// @return {String} The path
        /// </summary>
        public JsString getPath(JsString attr) { return null; }
        /// <summary>
        /// Returns true if this node has one or more child nodes, else false.
        /// @return {Boolean}
        /// </summary>
        public void hasChildNodes() { }
        /// <summary>
        /// Returns the index of a child node
        /// @param {Node} node
        /// @return {Number} The index of the node or -1 if it was not found
        /// </summary>
        public JsNumber indexOf(object child) { return null; }
        /// <summary>
        /// Inserts the first node before the second node in this nodes childNodes collection.
        /// @param {Node} node The node to insert
        /// @param {Node} refNode The node to insert before (if null the node is appended)
        /// @return {Node} The inserted node
        /// </summary>
        public void insertBefore(object node, object refNode) { }
        /// <summary>
        /// Returns true if the passed node is an ancestor (at any point) of this node.
        /// @param {Node} node
        /// @return {Boolean}
        /// </summary>
        public void isAncestor(object node) { }
        /// <summary>
        /// Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
        /// node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.
        /// @return {Boolean}
        /// </summary>
        public void isExpandable() { }
        /// <summary>
        /// Returns true if this node is the first child of its parent
        /// @return {Boolean}
        /// </summary>
        public void isFirst() { }
        /// <summary>
        /// Returns true if this node is the last child of its parent
        /// @return {Boolean}
        /// </summary>
        public void isLast() { }
        /// <summary>
        /// Returns true if this node is a leaf
        /// @return {Boolean}
        /// </summary>
        public void isLeaf() { }
        /// <summary>
        /// Returns the child node at the specified index.
        /// @param {Number} index
        /// @return {Node}
        /// </summary>
        public void item(object index) { }
        /// <summary>
        /// Removes this node from its parent
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} this
        /// </summary>
        public void remove(bool destroy) { }
        /// <summary>
        /// Removes all child nodes from this node.
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} this
        /// </summary>
        public void removeAll(bool destroy) { }
        /// <summary>
        /// Removes a child node from this node.
        /// @param {Node} node The node to remove
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} The removed node
        /// </summary>
        public void removeChild(object node, bool destroy) { }
        /// <summary>
        /// Replaces one child node in this node with another.
        /// @param {Node} newChild The replacement node
        /// @param {Node} oldChild The node to replace
        /// @return {Node} The replaced node
        /// </summary>
        public void replaceChild(object newChild, object oldChild) { }
        public void setFirstChild(object node) { }
        /// <summary>
        /// Changes the id of this node.
        /// @param {String} id The new id for the node.
        /// </summary>
        public void setId(JsString id) { }
        public void setLastChild(object node) { }
        public void setOwnerTree(object tree, object destroy) { }
        /// <summary>
        /// Sorts this nodes children using the supplied sort function.
        /// @param {Function} fn A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
        /// @param {Object} scope (optional)The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
        /// </summary>
        public void sort(JsAction fn, JsObject scope) { }
        public void toString() { }
    }
    #endregion
    #region NodeConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class NodeConfig
    {
        /// <summary>
        /// The id for this node. If one is not specified, one is generated.
        /// </summary>
        public JsString id { get; set; }
        /// <summary>
        /// true if this node is a leaf and does not have children
        /// </summary>
        public bool leaf { get; set; }
    }
    #endregion
    #region Record
    /// <summary>
    /// @class Ext.data.Record
    /// <p>Instances of this class encapsulate both Record <em>definition</em> information, and Record
    /// <em>value</em> information for use in {@link Ext.data.Store} objects, or any code which needs
    /// to access Records cached in an {@link Ext.data.Store} object.</p>
    /// <p>Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.
    /// Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data
    /// objects.</p>
    /// <p>Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.
    /// In order to copy data from one Store to another, use the {@link #copy} method to create an exact
    /// copy of the Record, and insert the new instance into the other Store.</p>
    /// <p>When serializing a Record for submission to the server, be aware that it contains many private
    /// properties, and also a reference to its owning Store which in turn holds references to its Records.
    /// This means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the
    /// <code>{@link #data}</code> and <code>{@link #id}</code> properties.</p>
    /// <p>Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</p>
    /// @constructor
    /// <p>This constructor should not be used to create Record objects. Instead, use {@link #create} to
    /// generate a subclass of Ext.data.Record configured with information about its constituent fields.<p>
    /// <p><b>The generated constructor has the same signature as this constructor.</b></p>
    /// @param {Object} data (Optional) An object, the properties of which provide values for the new Record's
    /// fields. If not specified the <code>{@link Ext.data.Field#defaultValue defaultValue}</code>
    /// for each field will be assigned.
    /// @param {Object} id (Optional) The id of the Record. The id is used by the
    /// {@link Ext.data.Store} object which owns the Record to index its collection
    /// of Records (therefore this id should be unique within each store). If an
    /// <code>id</code> is not specified a <b><code>{@link #phantom}</code></b>
    /// Record will be created with an {@link #Record.id automatically generated id}.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Record
    {
        public Record() { }
        public void afterCommit() { }
        public void afterEdit() { }
        public void afterReject() { }
        /// <summary>
        /// Begin an edit. While in edit mode, no events (e.g.. the <code>update</code> event)
        /// are relayed to the containing store.
        /// See also: <code>{@link #endEdit}</code> and <code>{@link #cancelEdit}</code>.
        /// </summary>
        public void beginEdit() { }
        /// <summary>
        /// Cancels all changes made in the current edit operation.
        /// </summary>
        public void cancelEdit() { }
        public void clearError() { }
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} which owns the Record.
        /// Commits all changes made to the Record since either creation, or the last commit operation.
        /// <p>Developers should subscribe to the {@link Ext.data.Store#update} event
        /// to have their code notified of commit operations.</p>
        /// @param {Boolean} silent (optional) True to skip notification of the owning
        /// store of the change (defaults to false)
        /// </summary>
        public void commit(bool silent) { }
        /// <summary>
        /// Creates a copy (clone) of this Record.
        /// @param {String} id (optional) A new Record id, defaults to the id
        /// of the record being copied. See <code>{@link #id}</code>.
        /// To generate a phantom record with a new id use:<pre><code>
        /// var rec = record.copy(); // clone the record
        /// Ext.data.Record.id(rec); // automatically generate a unique sequential id
        /// </code></pre>
        /// @return {Record}
        /// </summary>
        public void copy(object newId) { }
        /// <summary>
        /// Generate a constructor for a specific Record layout.
        /// @param {Array} o An Array of <b>{@link Ext.data.Field Field}</b> definition objects.
        /// The constructor generated by this method may be used to create new Record instances. The data
        /// object must contain properties named after the {@link Ext.data.Field field}
        /// <b><tt>{@link Ext.data.Field#name}s</tt></b>.  Example usage:<pre><code>
        /// // create a Record constructor from a description of the fields
        /// var TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record
        /// {{@link Ext.data.Field#name name}: 'title', {@link Ext.data.Field#mapping mapping}: 'topic_title'},
        /// {name: 'author', mapping: 'username', allowBlank: false},
        /// {name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
        /// {name: 'lastPost', mapping: 'post_time', type: 'date'},
        /// {name: 'lastPoster', mapping: 'user2'},
        /// {name: 'excerpt', mapping: 'post_text', allowBlank: false},
        /// // In the simplest case, if no properties other than <tt>name</tt> are required,
        /// // a field definition may consist of just a String for the field name.
        /// 'signature'
        /// ]);
        /// // create Record instance
        /// var myNewRecord = new TopicRecord(
        /// {
        /// title: 'Do my job please',
        /// author: 'noobie',
        /// totalPosts: 1,
        /// lastPost: new Date(),
        /// lastPoster: 'Animal',
        /// excerpt: 'No way dude!',
        /// signature: ''
        /// },
        /// id // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}
        /// );
        /// myStore.{@link Ext.data.Store#add add}(myNewRecord);
        /// </code></pre>
        /// @method create
        /// @return {Function} A constructor which is used to create new Records according
        /// to the definition. The constructor has the same signature as {@link #Record}.
        /// @static
        /// </summary>
        public static JsAction create(JsArray o) { return null; }
        /// <summary>
        /// End an edit. If any data was modified, the containing store is notified
        /// (ie, the store's <code>update</code> event will fire).
        /// </summary>
        public void endEdit() { }
        /// <summary>
        /// Get the value of the {@link Ext.data.Field#name named field}.
        /// @param {String} name The {@link Ext.data.Field#name name of the field} to get the value of.
        /// @return {Object} The value of the field.
        /// </summary>
        public JsObject get(JsString name) { return null; }
        /// <summary>
        /// Gets a hash of only the fields that have been modified since this Record was created or commited.
        /// @return Object
        /// </summary>
        public void getChanges() { }
        public void hasError() { }
        /// <summary>
        /// Generates a sequential id. This method is typically called when a record is {@link #create}d
        /// and {@link #Record no id has been specified}. The returned id takes the form:
        /// <tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class="mdetail-params"><ul>
        /// <li><b><tt>PREFIX</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.PREFIX</tt>
        /// (defaults to <tt>'ext-record'</tt>)</p></li>
        /// <li><b><tt>AUTO_ID</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.AUTO_ID</tt>
        /// (defaults to <tt>1</tt> initially)</p></li>
        /// </ul></div>
        /// @param {Record} rec The record being created.  The record does not exist, it's a {@link #phantom}.
        /// @return {String} auto-generated string id, <tt>"ext-record-i++'</tt>;
        /// </summary>
        public static JsString id(object rec) { return null; }
        /// <summary>
        /// Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
        /// since the load or last commit.
        /// @param {String} fieldName {@link Ext.data.Field.{@link Ext.data.Field#name}
        /// @return {Boolean}
        /// </summary>
        public void isModified(JsString fieldName) { }
        /// <summary>
        /// By default returns <tt>false</tt> if any {@link Ext.data.Field field} within the
        /// record configured with <tt>{@link Ext.data.Field#allowBlank} = false</tt> returns
        /// <tt>true</tt> from an {@link Ext}.{@link Ext#isEmpty isempty} test.
        /// @return {Boolean}
        /// </summary>
        public void isValid() { }
        public void join(object store) { }
        /// <summary>
        /// <p>Marks this <b>Record</b> as <code>{@link #dirty}</code>.  This method
        /// is used interally when adding <code>{@link #phantom}</code> records to a
        /// {@link Ext.data.Store#writer writer enabled store}.</p>
        /// <br><p>Marking a record <code>{@link #dirty}</code> causes the phantom to
        /// be returned by {@link Ext.data.Store#getModifiedRecords} where it will
        /// have a create action composed for it during {@link Ext.data.Store#save store save}
        /// operations.</p>
        /// </summary>
        public void markDirty() { }
        /// <summary>
        /// @class Ext.data.Record
        /// <p>Instances of this class encapsulate both Record <em>definition</em> information, and Record
        /// <em>value</em> information for use in {@link Ext.data.Store} objects, or any code which needs
        /// to access Records cached in an {@link Ext.data.Store} object.</p>
        /// <p>Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.
        /// Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data
        /// objects.</p>
        /// <p>Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.
        /// In order to copy data from one Store to another, use the {@link #copy} method to create an exact
        /// copy of the Record, and insert the new instance into the other Store.</p>
        /// <p>When serializing a Record for submission to the server, be aware that it contains many private
        /// properties, and also a reference to its owning Store which in turn holds references to its Records.
        /// This means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the
        /// <code>{@link #data}</code> and <code>{@link #id}</code> properties.</p>
        /// <p>Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</p>
        /// @constructor
        /// <p>This constructor should not be used to create Record objects. Instead, use {@link #create} to
        /// generate a subclass of Ext.data.Record configured with information about its constituent fields.<p>
        /// <p><b>The generated constructor has the same signature as this constructor.</b></p>
        /// @param {Object} data (Optional) An object, the properties of which provide values for the new Record's
        /// fields. If not specified the <code>{@link Ext.data.Field#defaultValue defaultValue}</code>
        /// for each field will be assigned.
        /// @param {Object} id (Optional) The id of the Record. The id is used by the
        /// {@link Ext.data.Store} object which owns the Record to index its collection
        /// of Records (therefore this id should be unique within each store). If an
        /// <code>id</code> is not specified a <b><code>{@link #phantom}</code></b>
        /// Record will be created with an {@link #Record.id automatically generated id}.
        /// </summary>
        public Record(JsObject data, JsObject id) { }
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} which owns the Record.
        /// Rejects all changes made to the Record since either creation, or the last commit operation.
        /// Modified fields are reverted to their original values.
        /// <p>Developers should subscribe to the {@link Ext.data.Store#update} event
        /// to have their code notified of reject operations.</p>
        /// @param {Boolean} silent (optional) True to skip notification of the owning
        /// store of the change (defaults to false)
        /// </summary>
        public void reject(bool silent) { }
        /// <summary>
        /// Set the {@link Ext.data.Field#name named field} to the specified value.  For example:
        /// <pre><code>
        /// // record has a field named 'firstname'
        /// var Employee = Ext.data.Record.{@link #create}([
        /// {name: 'firstname'},
        /// ...
        /// ]);
        /// // update the 2nd record in the store:
        /// var rec = myStore.{@link Ext.data.Store#getAt getAt}(1);
        /// // set the value (shows dirty flag):
        /// rec.set('firstname', 'Betty');
        /// // commit the change (removes dirty flag):
        /// rec.{@link #commit}();
        /// // update the record in the store, bypass setting dirty flag,
        /// // and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}
        /// rec.{@link #data}['firstname'] = 'Wilma'; // updates record, but not the view
        /// rec.{@link #commit}(); // updates the view
        /// </code></pre>
        /// <b>Notes</b>:<div class="mdetail-params"><ul>
        /// <li>If the store has a writer and <code>autoSave=true</code>, each set()
        /// will execute an XHR to the server.</li>
        /// <li>Use <code>{@link #beginEdit}</code> to prevent the store's <code>update</code>
        /// event firing while using set().</li>
        /// <li>Use <code>{@link #endEdit}</code> to have the store's <code>update</code>
        /// event fire.</li>
        /// </ul></div>
        /// @param {String} name The {@link Ext.data.Field#name name of the field} to set.
        /// @param {String/Object/Array} value The value to set the field to.
        /// </summary>
        public void set(JsString name, object value) { }
        /// <summary>
        /// Readonly flag - true if this Record has been modified.
        /// @type Boolean
        /// </summary>
        public bool dirty { get; set; }
        public bool editing { get; set; }
        public object error { get; set; }
        /// <summary>
        /// This object contains a key and value storing the original values of all modified
        /// fields or is null if no fields have been modified.
        /// @property modified
        /// @type {Object}
        /// </summary>
        public object modified { get; set; }
        /// <summary>
        /// <tt>true</tt> when the record does not yet exist in a server-side database (see
        /// {@link #markDirty}).  Any record which has a real database pk set as its id property
        /// is NOT a phantom -- it's real.
        /// @property phantom
        /// @type {Boolean}
        /// </summary>
        public bool phantom { get; set; }
    }
    #endregion
    #region Request
    /// <summary>
    /// @class Ext.data.Request
    /// A simple Request class used internally to the data package to provide more generalized remote-requests
    /// to a DataProxy.
    /// TODO Not yet implemented.  Implement in Ext.data.Store#execute
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Request
    {
        public Request() { }
        /// <summary>
        /// @class Ext.data.Request
        /// A simple Request class used internally to the data package to provide more generalized remote-requests
        /// to a DataProxy.
        /// TODO Not yet implemented.  Implement in Ext.data.Store#execute
        /// </summary>
        public Request(object @params) { }
    }
    #endregion
    #region Response
    /// <summary>
    /// @class Ext.data.Response
    /// A generic response class to normalize response-handling internally to the framework.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Response
    {
        public Response() { }
        public void getMessage() { }
        public void getRawResponse() { }
        public void getRoot() { }
        public void getStatus() { }
        public void getSuccess() { }
        /// <summary>
        /// Ext.data.Response
        /// Experimental.  Do not use directly.
        /// </summary>
        public Response(object @params, object response) { }
        /// <summary>
        /// @class Ext.data.Response
        /// A generic response class to normalize response-handling internally to the framework.
        /// </summary>
        public Response(object @params) { }
        public object message { get; set; }
        public object raw { get; set; }
        public object root { get; set; }
        public object status { get; set; }
        public bool success { get; set; }
    }
    #endregion
    #region ScriptTagProxy
    /// <summary>
    /// @class Ext.data.ScriptTagProxy
    /// @extends Ext.data.DataProxy
    /// An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
    /// other than the originating domain of the running page.<br>
    /// <p>
    /// <b>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
    /// of the running page, you must use this class, rather than HttpProxy.</b><br>
    /// <p>
    /// The content passed back from a server resource requested by a ScriptTagProxy <b>must</b> be executable JavaScript
    /// source code because it is used as the source inside a &lt;script> tag.<br>
    /// <p>
    /// In order for the browser to process the returned data, the server must wrap the data object
    /// with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
    /// Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
    /// depending on whether the callback name was passed:
    /// <p>
    /// <pre><code>
    /// boolean scriptTag = false;
    /// String cb = request.getParameter("callback");
    /// if (cb != null) {
    /// scriptTag = true;
    /// response.setContentType("text/javascript");
    /// } else {
    /// response.setContentType("application/x-json");
    /// }
    /// Writer out = response.getWriter();
    /// if (scriptTag) {
    /// out.write(cb + "(");
    /// }
    /// out.print(dataBlock.toJsonString());
    /// if (scriptTag) {
    /// out.write(");");
    /// }
    /// </code></pre>
    /// <p>Below is a PHP example to do the same thing:</p><pre><code>
    /// $callback = $_REQUEST['callback'];
    /// // Create the output object.
    /// $output = array('a' => 'Apple', 'b' => 'Banana');
    /// //start output
    /// if ($callback) {
    /// header('Content-Type: text/javascript');
    /// echo $callback . '(' . json_encode($output) . ');';
    /// } else {
    /// header('Content-Type: application/x-json');
    /// echo json_encode($output);
    /// }
    /// </code></pre>
    /// <p>Below is the ASP.Net code to do the same thing:</p><pre><code>
    /// String jsonString = "{success: true}";
    /// String cb = Request.Params.Get("callback");
    /// String responseString = "";
    /// if (!String.IsNullOrEmpty(cb)) {
    /// responseString = cb + "(" + jsonString + ")";
    /// } else {
    /// responseString = jsonString;
    /// }
    /// Response.Write(responseString);
    /// </code></pre>
    /// *
    /// @constructor
    /// @param {Object} config A configuration object.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ScriptTagProxy
    {
        public ScriptTagProxy() { }
        /// <summary>
        /// @class Ext.data.ScriptTagProxy
        /// @extends Ext.data.DataProxy
        /// An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
        /// other than the originating domain of the running page.<br>
        /// <p>
        /// <b>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
        /// of the running page, you must use this class, rather than HttpProxy.</b><br>
        /// <p>
        /// The content passed back from a server resource requested by a ScriptTagProxy <b>must</b> be executable JavaScript
        /// source code because it is used as the source inside a &lt;script> tag.<br>
        /// <p>
        /// In order for the browser to process the returned data, the server must wrap the data object
        /// with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
        /// Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
        /// depending on whether the callback name was passed:
        /// <p>
        /// <pre><code>
        /// boolean scriptTag = false;
        /// String cb = request.getParameter("callback");
        /// if (cb != null) {
        /// scriptTag = true;
        /// response.setContentType("text/javascript");
        /// } else {
        /// response.setContentType("application/x-json");
        /// }
        /// Writer out = response.getWriter();
        /// if (scriptTag) {
        /// out.write(cb + "(");
        /// }
        /// out.print(dataBlock.toJsonString());
        /// if (scriptTag) {
        /// out.write(");");
        /// }
        /// </code></pre>
        /// <p>Below is a PHP example to do the same thing:</p><pre><code>
        /// $callback = $_REQUEST['callback'];
        /// // Create the output object.
        /// $output = array('a' => 'Apple', 'b' => 'Banana');
        /// //start output
        /// if ($callback) {
        /// header('Content-Type: text/javascript');
        /// echo $callback . '(' . json_encode($output) . ');';
        /// } else {
        /// header('Content-Type: application/x-json');
        /// echo json_encode($output);
        /// }
        /// </code></pre>
        /// <p>Below is the ASP.Net code to do the same thing:</p><pre><code>
        /// String jsonString = "{success: true}";
        /// String cb = Request.Params.Get("callback");
        /// String responseString = "";
        /// if (!String.IsNullOrEmpty(cb)) {
        /// responseString = cb + "(" + jsonString + ")";
        /// } else {
        /// responseString = jsonString;
        /// }
        /// Response.Write(responseString);
        /// </code></pre>
        /// *
        /// @constructor
        /// @param {Object} config A configuration object.
        /// </summary>
        public ScriptTagProxy(JsObject config) { }
    }
    #endregion
    #region SortTypes
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SortTypes
    {
        /// <summary>
        /// Date sorting
        /// @param {Mixed} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public static JsNumber asDate(object s) { return null; }
        /// <summary>
        /// Float sorting
        /// @param {Mixed} s The value being converted
        /// @return {Float} The comparison value
        /// </summary>
        public static void asFloat(object s) { }
        /// <summary>
        /// Integer sorting
        /// @param {Mixed} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public static JsNumber asInt(object s) { return null; }
        /// <summary>
        /// Strips all HTML tags to sort on text only
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asText(object s) { return null; }
        /// <summary>
        /// Case insensitive string
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asUCString(object s) { return null; }
        /// <summary>
        /// Strips all HTML tags to sort on text only - Case insensitive
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asUCText(object s) { return null; }
        /// <summary>
        /// Default sort that does nothing
        /// @param {Mixed} s The value being converted
        /// @return {Mixed} The comparison value
        /// </summary>
        public static void none(object s) { }
        /// <summary>
        /// The regular expression used to strip tags
        /// @type {RegExp}
        /// @property
        /// </summary>
        public JsRegExp stripTagsRE { get; set; }
    }
    #endregion
    #region Store
    /// <summary>
    /// @class Ext.data.Store
    /// @extends Ext.util.Observable
    /// <p>The Store class encapsulates a client side cache of {@link Ext.data.Record Record}
    /// objects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},
    /// the {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}.</p>
    /// <p><u>Retrieving Data</u></p>
    /// <p>A Store object may access a data object using:<div class="mdetail-params"><ul>
    /// <li>{@link #proxy configured implementation} of {@link Ext.data.DataProxy DataProxy}</li>
    /// <li>{@link #data} to automatically pass in data</li>
    /// <li>{@link #loadData} to manually pass in data</li>
    /// </ul></div></p>
    /// <p><u>Reading Data</u></p>
    /// <p>A Store object has no inherent knowledge of the format of the data object (it could be
    /// an Array, XML, or JSON). A Store object uses an appropriate {@link #reader configured implementation}
    /// of a {@link Ext.data.DataReader DataReader} to create {@link Ext.data.Record Record} instances from the data
    /// object.</p>
    /// <p><u>Store Types</u></p>
    /// <p>There are several implementations of Store available which are customized for use with
    /// a specific DataReader implementation.  Here is an example using an ArrayStore which implicitly
    /// creates a reader commensurate to an Array data object.</p>
    /// <pre><code>
    /// var myStore = new Ext.data.ArrayStore({
    /// fields: ['fullname', 'first'],
    /// idIndex: 0 // id for each record will be the first element
    /// });
    /// </code></pre>
    /// <p>For custom implementations create a basic {@link Ext.data.Store} configured as needed:</p>
    /// <pre><code>
    /// // create a {@link Ext.data.Record Record} constructor:
    /// var rt = Ext.data.Record.create([
    /// {name: 'fullname'},
    /// {name: 'first'}
    /// ]);
    /// var myStore = new Ext.data.Store({
    /// // explicitly create reader
    /// reader: new Ext.data.ArrayReader(
    /// {
    /// idIndex: 0  // id for each record will be the first element
    /// },
    /// rt // recordType
    /// )
    /// });
    /// </code></pre>
    /// <p>Load some data into store (note the data object is an array which corresponds to the reader):</p>
    /// <pre><code>
    /// var myData = [
    /// [1, 'Fred Flintstone', 'Fred'],  // note that id for the record is the first element
    /// [2, 'Barney Rubble', 'Barney']
    /// ];
    /// myStore.loadData(myData);
    /// </code></pre>
    /// <p>Records are cached and made available through accessor functions.  An example of adding
    /// a record to the store:</p>
    /// <pre><code>
    /// var defaultData = {
    /// fullname: 'Full Name',
    /// first: 'First Name'
    /// };
    /// var recId = 100; // provide unique id for the record
    /// var r = new myStore.recordType(defaultData, ++recId); // create new record
    /// myStore.{@link #insert}(0, r); // insert a new record into the store (also see {@link #add})
    /// </code></pre>
    /// <p><u>Writing Data</u></p>
    /// <p>And <b>new in Ext version 3</b>, use the new {@link Ext.data.DataWriter DataWriter} to create an automated, <a href="http://extjs.com/deploy/dev/examples/writer/writer.html">Writable Store</a>
    /// along with <a href="http://extjs.com/deploy/dev/examples/restful/restful.html">RESTful features.</a>
    /// @constructor
    /// Creates a new Store.
    /// @param {Object} config A config object containing the objects needed for the Store to access data,
    /// and read the data into Records.
    /// @xtype store
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Store : Ext.util.Observable
    {
        /// <summary>
        /// @class Ext.data.Store.Error
        /// @extends Ext.Error
        /// Store Error extension.
        /// @param {String} name
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Error : Ext.Error
        {
            public JsString name { get; set; }
        }
        public Store() { }
        /// <summary>
        /// Add Records to the Store and fires the {@link #add} event.  To add Records
        /// to the store from a remote source use <code>{@link #load}({add:true})</code>.
        /// See also <code>{@link #recordType}</code> and <code>{@link #insert}</code>.
        /// @param {Ext.data.Record[]} records An Array of Ext.data.Record objects
        /// to add to the cache. See {@link #recordType}.
        /// </summary>
        public void add(object records) { }
        /// <summary>
        /// (Local sort only) Inserts the passed Record into the Store at the index where it
        /// should go based on the current sort information.
        /// @param {Ext.data.Record} record
        /// </summary>
        public void addSorted(object record) { }
        public void addToBatch(object batch) { }
        public void afterCommit(object record) { }
        public void afterEdit(object record) { }
        public void afterReject(object record) { }
        /// <summary>
        /// @private
        /// Invokes sortData if we have sortInfo to sort on and are not sorting remotely
        /// </summary>
        public void applySort() { }
        /// <summary>
        /// builds a DataWriter instance when Store constructor is provided with a writer config-object instead of an instace.
        /// @param {Object} config Writer configuration
        /// @return {Ext.data.DataWriter}
        /// @private
        /// </summary>
        public void buildWriter(JsObject config) { }
        public void clearData() { }
        /// <summary>
        /// Revert to a view of the Record cache with no filtering applied.
        /// @param {Boolean} suppressEvent If <tt>true</tt> the filter is cleared silently without firing the
        /// {@link #datachanged} event.
        /// </summary>
        public void clearFilter(bool suppressEvent) { }
        public void clearModified(object rs) { }
        /// <summary>
        /// Collects unique values for a particular dataIndex from this store.
        /// @param {String} dataIndex The property to collect
        /// @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
        /// @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
        /// @return {Array} An array of the unique values
        /// </summary>
        public JsArray collect(JsString dataIndex, bool allowNull, bool bypassFilter) { return null; }
        /// <summary>
        /// Commit all Records with {@link #getModifiedRecords outstanding changes}. To handle updates for changes,
        /// subscribe to the Store's {@link #update update event}, and perform updating when the third parameter is
        /// Ext.data.Record.COMMIT.
        /// </summary>
        public void commitChanges() { }
        public Store(object config) { }
        public void createCallback(object action, object rs, object batch) { }
        /// <summary>
        /// @private
        /// Returns a filter function used to test a the given property's value. Defers most of the work to
        /// Ext.util.MixedCollection's createValueMatcher function
        /// @param {String} property The property to create the filter function for
        /// @param {String/RegExp} value The string/regex to compare the property value to
        /// @param {Boolean} anyMatch True if we don't care if the filter value is not the full value (defaults to false)
        /// @param {Boolean} caseSensitive True to create a case-sensitive regex (defaults to false)
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.
        /// </summary>
        public void createFilterFn(JsString property, object value, bool anyMatch, bool caseSensitive, bool exactMatch) { }
        /// <summary>
        /// @private
        /// Given an array of filter functions (each with optional scope), constructs and returns a single function that returns
        /// the result of all of the filters ANDed together
        /// @param {Array} filters The array of filter objects (each object should contain an 'fn' and optional scope)
        /// @return {Function} The multiple filter function
        /// </summary>
        public JsAction createMultipleFilterFn(JsArray filters) { return null; }
        /// <summary>
        /// @private
        /// Should not be used directly.  Store#add will call this automatically if a Writer is set
        /// @param {Object} store
        /// @param {Object} records
        /// @param {Object} index
        /// </summary>
        public void createRecords(object store, object records, object index) { }
        /// <summary>
        /// @private
        /// Creates and returns a function which sorts an array by the given field and direction
        /// @param {String} field The field to create the sorter for
        /// @param {String} direction The direction to sort by (defaults to "ASC")
        /// @return {Function} A function which sorts by the field/direction combination provided
        /// </summary>
        public JsAction createSortFunction(JsString field, JsString direction) { return null; }
        /// <summary>
        /// Destroys the store.
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// Destroys a Record.  Should not be used directly.  It's called by Store#remove if a Writer is set.
        /// @param {Store} store this
        /// @param {Ext.data.Record} record
        /// @param {Number} index
        /// @private
        /// </summary>
        public void destroyRecord(object store, object record, object index) { }
        public void doTransaction(object action, object rs, object batch) { }
        /// <summary>
        /// @private
        /// Update a record within the store with a new reference
        /// </summary>
        public void doUpdate(object rec) { }
        /// <summary>
        /// Calls the specified function for each of the {@link Ext.data.Record Records} in the cache.
        /// @param {Function} fn The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.
        /// Returning <tt>false</tt> aborts and exits the iteration.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed.
        /// Defaults to the current {@link Ext.data.Record Record} in the iteration.
        /// </summary>
        public void each(JsAction fn, JsObject scope) { }
        /// <summary>
        /// This method should generally not be used directly.  This method is called internally
        /// by {@link #load}, or if a Writer is set will be called automatically when {@link #add},
        /// {@link #remove}, or {@link #update} events fire.
        /// @param {String} action Action name ('read', 'create', 'update', or 'destroy')
        /// @param {Record/Record[]} rs
        /// @param {Object} options
        /// @throws Error
        /// @private
        /// </summary>
        public void execute(JsString action, object rs, object options, object batch) { }
        /// <summary>
        /// Filter the {@link Ext.data.Record records} by a specified property. Alternatively, pass an array of filter
        /// options to filter by more than one property.
        /// Single filter example:
        /// store.filter('name', 'Ed', true, true); //finds all records containing the substring 'Ed'
        /// Multiple filter example:
        /// <pre><code>
        /// store.filter([
        /// {
        /// property     : 'name',
        /// value        : 'Ed',
        /// anyMatch     : true, //optional, defaults to true
        /// caseSensitive: true  //optional, defaults to true
        /// },
        /// *
        /// //filter functions can also be passed
        /// {
        /// fn   : function(record) {
        /// return record.get('age') == 24
        /// },
        /// scope: this
        /// }
        /// ]);
        /// </code></pre>
        /// @param {String|Array} field A field on your records, or an array containing multiple filter options
        /// @param {String/RegExp} value Either a string that the field should begin with, or a RegExp to test
        /// against the field.
        /// @param {Boolean} anyMatch (optional) <tt>true</tt> to match any part not just the beginning
        /// @param {Boolean} caseSensitive (optional) <tt>true</tt> for case sensitive comparison
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.
        /// </summary>
        public void filter(object property, object value, bool anyMatch, bool caseSensitive, bool exactMatch) { }
        /// <summary>
        /// Filter by a function. The specified function will be called for each
        /// Record in this Store. If the function returns <tt>true</tt> the Record is included,
        /// otherwise it is filtered out.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// </summary>
        public void filterBy(JsAction fn, JsObject scope) { }
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {String/RegExp} value Either a string that the field value
        /// should begin with, or a RegExp to test against the field.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber find(object property, object value, object start, bool anyMatch, bool caseSensitive) { return null; }
        /// <summary>
        /// Find the index of the first matching Record in this Store by a function.
        /// If the function returns <tt>true</tt> it is considered a match.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findBy(JsAction fn, JsObject scope, object start) { return null; }
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {Mixed} value The value to match the field against.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findExact(object property, object value, object start) { return null; }
        public void findInsertIndex(object record) { }
        /// <summary>
        /// Get the Record at the specified index.
        /// @param {Number} index The index of the Record to find.
        /// @return {Ext.data.Record} The Record at the passed index. Returns undefined if not found.
        /// </summary>
        public Record getAt(JsNumber index) { return null; }
        /// <summary>
        /// Get the Record with the specified id.
        /// @param {String} id The id of the Record to find.
        /// @return {Ext.data.Record} The Record with the passed id. Returns undefined if not found.
        /// </summary>
        public Record getById(JsString id) { return null; }
        /// <summary>
        /// Gets the number of cached records.
        /// <p>If using paging, this may not be the total size of the dataset. If the data object
        /// used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
        /// the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records in the Store's cache.
        /// </summary>
        public JsNumber getCount() { return null; }
        /// <summary>
        /// Gets all {@link Ext.data.Record records} modified since the last commit.  Modified records are
        /// persisted across load operations (e.g., during paging). <b>Note</b>: deleted records are not
        /// included.  See also <tt>{@link #pruneModifiedRecords}</tt> and
        /// {@link Ext.data.Record}<tt>{@link Ext.data.Record#markDirty markDirty}.</tt>.
        /// @return {Ext.data.Record[]} An array of {@link Ext.data.Record Records} containing outstanding
        /// modifications.  To obtain modified fields within a modified record see
        /// *{@link Ext.data.Record}<tt>{@link Ext.data.Record#modified modified}.</tt>.
        /// </summary>
        public void getModifiedRecords() { }
        /// <summary>
        /// Returns a range of Records between specified indices.
        /// @param {Number} startIndex (optional) The starting index (defaults to 0)
        /// @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
        /// @return {Ext.data.Record[]} An array of Records
        /// </summary>
        public void getRange(object start, object end) { }
        /// <summary>
        /// Returns an object describing the current sort state of this Store.
        /// @return {Object} The sort state of the Store. An object with two properties:<ul>
        /// <li><b>field : String<p class="sub-desc">The name of the field by which the Records are sorted.</p></li>
        /// <li><b>direction : String<p class="sub-desc">The sort order, 'ASC' or 'DESC' (case-sensitive).</p></li>
        /// </ul>
        /// See <tt>{@link #sortInfo}</tt> for additional details.
        /// </summary>
        public JsObject getSortState() { return null; }
        /// <summary>
        /// Gets the total number of records in the dataset as returned by the server.
        /// <p>If using paging, for this to be accurate, the data object used by the {@link #reader Reader}
        /// must contain the dataset size. For remote data sources, the value for this property
        /// (<tt>totalProperty</tt> for {@link Ext.data.JsonReader JsonReader},
        /// <tt>totalRecords</tt> for {@link Ext.data.XmlReader XmlReader}) shall be returned by a query on the server.
        /// <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records as specified in the data object passed to the Reader
        /// by the Proxy.
        /// <p><b>Note</b>: this value is not updated when changing the contents of the Store locally.</p>
        /// </summary>
        public JsNumber getTotalCount() { return null; }
        public void handleException(object e) { }
        /// <summary>
        /// Get the index within the cache of the passed Record.
        /// @param {Ext.data.Record} record The Ext.data.Record object to find.
        /// @return {Number} The index of the passed Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOf(Record record) { return null; }
        /// <summary>
        /// Get the index within the cache of the Record with the passed id.
        /// @param {String} id The id of the Record to find.
        /// @return {Number} The index of the Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOfId(JsString id) { return null; }
        /// <summary>
        /// Inserts Records into the Store at the given index and fires the {@link #add} event.
        /// See also <code>{@link #add}</code> and <code>{@link #addSorted}</code>.
        /// @param {Number} index The start index at which to insert the passed Records.
        /// @param {Ext.data.Record[]} records An Array of Ext.data.Record objects to add to the cache.
        /// </summary>
        public void insert(JsNumber index, object records) { }
        /// <summary>
        /// Returns true if this store is currently filtered
        /// @return {Boolean}
        /// </summary>
        public void isFiltered() { }
        /// <summary>
        /// <p>Loads the Record cache from the configured <tt>{@link #proxy}</tt> using the configured <tt>{@link #reader}</tt>.</p>
        /// <br><p>Notes:</p><div class="mdetail-params"><ul>
        /// <li><b><u>Important</u></b>: loading is asynchronous! This call will return before the new data has been
        /// loaded. To perform any post-processing where information from the load call is required, specify
        /// the <tt>callback</tt> function to be called, or use a {@link Ext.util.Observable#listeners a 'load' event handler}.</li>
        /// <li>If using {@link Ext.PagingToolbar remote paging}, the first load call must specify the <tt>start</tt> and <tt>limit</tt>
        /// properties in the <code>options.params</code> property to establish the initial position within the
        /// dataset, and the number of Records to cache on each read from the Proxy.</li>
        /// <li>If using {@link #remoteSort remote sorting}, the configured <code>{@link #sortInfo}</code>
        /// will be automatically included with the posted parameters according to the specified
        /// <code>{@link #paramNames}</code>.</li>
        /// </ul></div>
        /// @param {Object} options An object containing properties which control loading options:<ul>
        /// <li><b><tt>params</tt></b> :Object<div class="sub-desc"><p>An object containing properties to pass as HTTP
        /// parameters to a remote data source. <b>Note</b>: <code>params</code> will override any
        /// <code>{@link #baseParams}</code> of the same name.</p>
        /// <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>
        /// <li><b>callback</b> : Function<div class="sub-desc"><p>A function to be called after the Records
        /// have been loaded. The callback is called after the load event is fired, and is passed the following arguments:<ul>
        /// <li>r : Ext.data.Record[] An Array of Records loaded.</li>
        /// <li>options : Options object from the load call.</li>
        /// <li>success : Boolean success indicator.</li></ul></p></div></li>
        /// <li><b>scope</b> : Object<div class="sub-desc"><p>Scope with which to call the callback (defaults
        /// to the Store object)</p></div></li>
        /// <li><b>add</b> : Boolean<div class="sub-desc"><p>Indicator to append loaded records rather than
        /// replace the current cache.  <b>Note</b>: see note for <tt>{@link #loadData}</tt></p></div></li>
        /// </ul>
        /// @return {Boolean} If the <i>developer</i> provided <tt>{@link #beforeload}</tt> event handler returns
        /// <tt>false</tt>, the load call will abort and will return <tt>false</tt>; otherwise will return <tt>true</tt>.
        /// </summary>
        public bool load(JsObject options) { return false; }
        /// <summary>
        /// Loads data from a passed data block and fires the {@link #load} event. A {@link Ext.data.Reader Reader}
        /// which understands the format of the data must have been configured in the constructor.
        /// @param {Object} data The data block from which to read the Records.  The format of the data expected
        /// is dependent on the type of {@link Ext.data.Reader Reader} that is configured and should correspond to
        /// that {@link Ext.data.Reader Reader}'s <tt>{@link Ext.data.Reader#readRecords}</tt> parameter.
        /// @param {Boolean} append (Optional) <tt>true</tt> to append the new Records rather the default to replace
        /// the existing cache.
        /// <b>Note</b>: that Records in a Store are keyed by their {@link Ext.data.Record#id id}, so added Records
        /// with ids which are already present in the Store will <i>replace</i> existing Records. Only Records with
        /// new, unique ids will be added.
        /// </summary>
        public void loadData(object o, bool append) { }
        public void loadRecords(object o, object options, object success) { }
        /// <summary>
        /// Sorts the contents of this store by multiple field/direction sorters. This is called internally by {@link sort}
        /// and would not usually be called manually.
        /// Multi sorting only currently applies to local datasets - multiple sort data is not currently sent to a proxy
        /// if remoteSort is used.
        /// @param {Array} sorters Array of sorter objects (field and direction)
        /// @param {String} direction Overall direction to sort the ordered results by (defaults to "ASC")
        /// </summary>
        public void multiSort(JsArray sorters, JsString direction) { }
        public void onClear(object store, object records) { }
        public void onCreateRecords(object success, object rs, object data) { }
        public void onDestroyRecords(object success, object rs, object data) { }
        public void onMetaChange(object meta) { }
        public void onUpdateRecords(object success, object rs, object data) { }
        /// <summary>
        /// Query the records by a specified property.
        /// @param {String} field A field on your records
        /// @param {String/RegExp} value Either a string that the field
        /// should begin with, or a RegExp to test against the field.
        /// @param {Boolean} anyMatch (optional) True to match any part not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
        /// </summary>
        public void query(object property, object value, bool anyMatch, bool caseSensitive) { }
        /// <summary>
        /// Query the cached records in this Store using a filtering function. The specified function
        /// will be called with each record in this Store. If the function returns <tt>true</tt> the record is
        /// included in the results.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
        /// </summary>
        public void queryBy(JsAction fn, JsObject scope) { }
        /// <summary>
        /// {@link Ext.data.Record#reject Reject} outstanding changes on all {@link #getModifiedRecords modified records}.
        /// </summary>
        public void rejectChanges() { }
        /// <summary>
        /// <p>Reloads the Record cache from the configured Proxy using the configured
        /// {@link Ext.data.Reader Reader} and the options from the last load operation
        /// performed.</p>
        /// <p><b>Note</b>: see the Important note in {@link #load}.</p>
        /// @param {Object} options <p>(optional) An <tt>Object</tt> containing
        /// {@link #load loading options} which may override the {@link #lastOptions options}
        /// used in the last {@link #load} operation. See {@link #load} for details
        /// (defaults to <tt>null</tt>, in which case the {@link #lastOptions} are
        /// used).</p>
        /// <br><p>To add new params to the existing params:</p><pre><code>
        /// lastOptions = myStore.lastOptions;
        /// Ext.apply(lastOptions.params, {
        /// myNewParam: true
        /// });
        /// myStore.reload(lastOptions);
        /// </code></pre>
        /// </summary>
        public void reload(JsObject options) { }
        public void reMap(object record) { }
        /// <summary>
        /// Remove Records from the Store and fires the {@link #remove} event.
        /// @param {Ext.data.Record/Ext.data.Record[]} record The record object or array of records to remove from the cache.
        /// </summary>
        public void remove(object record) { }
        /// <summary>
        /// Remove all Records from the Store and fires the {@link #clear} event.
        /// @param {Boolean} silent [false] Defaults to <tt>false</tt>.  Set <tt>true</tt> to not fire clear event.
        /// </summary>
        public void removeAll(bool silent) { }
        /// <summary>
        /// Remove a Record from the Store at the specified index. Fires the {@link #remove} event.
        /// @param {Number} index The index of the record to remove.
        /// </summary>
        public void removeAt(JsNumber index) { }
        public void removeFromBatch(object batch, object action, object data) { }
        /// <summary>
        /// Saves all pending changes to the store.  If the commensurate Ext.data.Api.actions action is not configured, then
        /// the configured <code>{@link #url}</code> will be used.
        /// <pre>
        /// change            url
        /// ---------------   --------------------
        /// removed records   Ext.data.Api.actions.destroy
        /// phantom records   Ext.data.Api.actions.create
        /// {@link #getModifiedRecords modified records}  Ext.data.Api.actions.update
        /// </pre>
        /// @TODO:  Create extensions of Error class and send associated Record with thrown exceptions.
        /// e.g.:  Ext.data.DataReader.Error or Ext.data.Error or Ext.data.DataProxy.Error, etc.
        /// @return {Number} batch Returns a number to uniquely identify the "batch" of saves occurring. -1 will be returned
        /// if there are no items to save or the save was cancelled.
        /// </summary>
        public JsNumber save() { return null; }
        /// <summary>
        /// Set the value for a property name in this store's {@link #baseParams}.  Usage:</p><pre><code>
        /// myStore.setBaseParam('foo', {bar:3});
        /// </code></pre>
        /// @param {String} name Name of the property to assign
        /// @param {Mixed} value Value to assign the <tt>name</tt>d property
        /// </summary>
        public void setBaseParam(JsString name, object value) { }
        /// <summary>
        /// Sets the default sort column and order to be used by the next {@link #load} operation.
        /// @param {String} fieldName The name of the field to sort by.
        /// @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
        /// </summary>
        public void setDefaultSort(object field, JsString dir) { }
        /// <summary>
        /// Sorts the store contents by a single field and direction. This is called internally by {@link sort} and would
        /// not usually be called manually
        /// @param {String} fieldName The name of the field to sort by.
        /// @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
        /// </summary>
        public void singleSort(JsString fieldName, JsString dir) { }
        /// <summary>
        /// Sort the Records.
        /// If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local
        /// sorting is used, the cache is sorted internally. See also {@link #remoteSort} and {@link #paramNames}.
        /// This function accepts two call signatures - pass in a field name as the first argument to sort on a single
        /// field, or pass in an array of sort configuration objects to sort by multiple fields.
        /// Single sort example:
        /// store.sort('name', 'ASC');
        /// Multi sort example:
        /// store.sort([
        /// {
        /// field    : 'name',
        /// direction: 'ASC'
        /// },
        /// {
        /// field    : 'salary',
        /// direction: 'DESC'
        /// }
        /// ], 'ASC');
        /// In this second form, the sort configs are applied in order, with later sorters sorting within earlier sorters' results.
        /// For example, if two records with the same name are present they will also be sorted by salary if given the sort configs
        /// above. Any number of sort configs can be added.
        /// @param {String/Array} fieldName The name of the field to sort by, or an array of ordered sort configs
        /// @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
        /// </summary>
        public void sort(object fieldName, JsString dir) { }
        /// <summary>
        /// @private
        /// Performs the actual sorting of data. This checks to see if we currently have a multi sort or not. It applies
        /// each sorter field/direction pair in turn by building an OR'ed master sorting function and running it against
        /// the full dataset
        /// </summary>
        public void sortData() { }
        public void storeOptions(object o) { }
        /// <summary>
        /// Sums the value of <tt>property</tt> for each {@link Ext.data.Record record} between <tt>start</tt>
        /// and <tt>end</tt> and returns the result.
        /// @param {String} property A field in each record
        /// @param {Number} start (optional) The record index to start at (defaults to <tt>0</tt>)
        /// @param {Number} end (optional) The last record index to include (defaults to length - 1)
        /// @return {Number} The sum
        /// </summary>
        public JsNumber sum(JsString property, JsNumber start, JsNumber end) { return null; }
        /// <summary>
        /// updateRecord  Should not be used directly.  This method will be called automatically if a Writer is set.
        /// Listens to 'update' event.
        /// @param {Object} store
        /// @param {Object} record
        /// @param {Object} action
        /// @private
        /// </summary>
        public void updateRecord(object store, object record, object action) { }
        /// <summary>
        /// @cfg {Boolean} autoDestroy <tt>true</tt> to destroy the store when the component the store is bound
        /// to is destroyed (defaults to <tt>false</tt>).
        /// <p><b>Note</b>: this should be set to true when using stores that are bound to only 1 component.</p>
        /// </summary>
        public bool autoDestroy { get; set; }
        /// <summary>
        /// @cfg {Boolean} autoSave
        /// <p>Defaults to <tt>true</tt> causing the store to automatically {@link #save} records to
        /// the server when a record is modified (ie: becomes 'dirty'). Specify <tt>false</tt> to manually call {@link #save}
        /// to send all modifiedRecords to the server.</p>
        /// <br><p><b>Note</b>: each CRUD action will be sent as a separate request.</p>
        /// </summary>
        public bool autoSave { get; set; }
        /// <summary>
        /// @cfg {Boolean} batch
        /// <p>Defaults to <tt>true</tt> (unless <code>{@link #restful}:true</code>). Multiple
        /// requests for each CRUD action (CREATE, READ, UPDATE and DESTROY) will be combined
        /// and sent as one transaction. Only applies when <code>{@link #autoSave}</code> is set
        /// to <tt>false</tt>.</p>
        /// <br><p>If Store is RESTful, the DataProxy is also RESTful, and a unique transaction is
        /// generated for each record.</p>
        /// </summary>
        public bool batch { get; set; }
        public JsString batchKey { get; set; }
        public bool hasMultiSort { get; set; }
        public bool isDestroyed { get; set; }
        /// <summary>
        /// Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}
        /// for the details of what this may contain. This may be useful for accessing any params which were used
        /// to load the current Record cache.
        /// @property
        /// </summary>
        public object lastOptions { get; set; }
        /// <summary>
        /// @cfg {Boolean} pruneModifiedRecords <tt>true</tt> to clear all modified record information each time
        /// the store is loaded or when a record is removed (defaults to <tt>false</tt>). See {@link #getModifiedRecords}
        /// for the accessor method to retrieve the modified records.
        /// </summary>
        public bool pruneModifiedRecords { get; set; }
        /// <summary>
        /// @cfg {boolean} remoteSort <tt>true</tt> if sorting is to be handled by requesting the <tt>{@link #proxy Proxy}</tt>
        /// to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache
        /// in place (defaults to <tt>false</tt>).
        /// <p>If <tt>remoteSort</tt> is <tt>true</tt>, then clicking on a {@link Ext.grid.Column Grid Column}'s
        /// {@link Ext.grid.Column#header header} causes the current page to be requested from the server appending
        /// the following two parameters to the <b><tt>{@link #load params}</tt></b>:<div class="mdetail-params"><ul>
        /// <li><b><tt>sort</tt></b> : String<p class="sub-desc">The <tt>name</tt> (as specified in the Record's
        /// {@link Ext.data.Field Field definition}) of the field to sort on.</p></li>
        /// <li><b><tt>dir</tt></b> : String<p class="sub-desc">The direction of the sort, 'ASC' or 'DESC' (case-sensitive).</p></li>
        /// </ul></div></p>
        /// </summary>
        public object remoteSort { get; set; }
        /// <summary>
        /// @cfg {Boolean} restful
        /// Defaults to <tt>false</tt>.  Set to <tt>true</tt> to have the Store and the set
        /// Proxy operate in a RESTful manner. The store will automatically generate GET, POST,
        /// PUT and DELETE requests to the server. The HTTP method used for any given CRUD
        /// action is described in {@link Ext.data.Api#restActions}.  For additional information
        /// see {@link Ext.data.DataProxy#restful}.
        /// <p><b>Note</b>: if <code>{@link #restful}:true</code> <code>batch</code> will
        /// internally be set to <tt>false</tt>.</p>
        /// </summary>
        public bool restful { get; set; }
    }
    #endregion
    #region Tree
    /// <summary>
    /// @class Ext.data.Tree
    /// @extends Ext.util.Observable
    /// Represents a tree data structure and bubbles all the events for its nodes. The nodes
    /// in the tree have most standard DOM functionality.
    /// @constructor
    /// @param {Node} root (optional) The root node
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Tree : Ext.util.Observable
    {
        public Tree() { }
        public Tree(object root) { }
        /// <summary>
        /// Gets a node in this tree by its id.
        /// @param {String} id
        /// @return {Node}
        /// </summary>
        public void getNodeById(object id) { }
        /// <summary>
        /// Returns the root node for this tree.
        /// @return {Node}
        /// </summary>
        public void getRootNode() { }
        public void proxyNodeEvent() { }
        public void registerNode(object node) { }
        /// <summary>
        /// Sets the root node for this tree.
        /// @param {Node} node
        /// @return {Node}
        /// </summary>
        public void setRootNode(object node) { }
        public void toString() { }
        public void unregisterNode(object node) { }
        /// <summary>
        /// @cfg {String} pathSeparator
        /// The token used to separate paths in node ids (defaults to '/').
        /// </summary>
        public JsString pathSeparator { get; set; }
    }
    #endregion
    #region XmlReader
    /// <summary>
    /// @class Ext.data.XmlReader
    /// @extends Ext.data.DataReader
    /// <p>Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document
    /// based on mappings in a provided {@link Ext.data.Record} constructor.</p>
    /// <p><b>Note</b>: that in order for the browser to parse a returned XML document, the Content-Type
    /// header in the HTTP response must be set to "text/xml" or "application/xml".</p>
    /// <p>Example code:</p>
    /// <pre><code>
    /// var Employee = Ext.data.Record.create([
    /// {name: 'name', mapping: 'name'},     // "mapping" property not needed if it is the same as "name"
    /// {name: 'occupation'}                 // This field will use "occupation" as the mapping.
    /// ]);
    /// var myReader = new Ext.data.XmlReader({
    /// totalProperty: "results", // The element which contains the total dataset size (optional)
    /// record: "row",           // The repeated element which contains row information
    /// idProperty: "id"         // The element within the row that provides an ID for the record (optional)
    /// messageProperty: "msg"   // The element within the response that provides a user-feedback message (optional)
    /// }, Employee);
    /// </code></pre>
    /// <p>
    /// This would consume an XML file like this:
    /// <pre><code>
    /// &lt;?xml version="1.0" encoding="UTF-8"?>
    /// &lt;dataset>
    /// &lt;results>2&lt;/results>
    /// &lt;row>
    /// &lt;id>1&lt;/id>
    /// &lt;name>Bill&lt;/name>
    /// &lt;occupation>Gardener&lt;/occupation>
    /// &lt;/row>
    /// &lt;row>
    /// &lt;id>2&lt;/id>
    /// &lt;name>Ben&lt;/name>
    /// &lt;occupation>Horticulturalist&lt;/occupation>
    /// &lt;/row>
    /// &lt;/dataset>
    /// </code></pre>
    /// @cfg {String} totalProperty The DomQuery path from which to retrieve the total number of records
    /// in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
    /// paged from the remote server.
    /// @cfg {String} record The DomQuery path to the repeated element which contains record information.
    /// @cfg {String} record The DomQuery path to the repeated element which contains record information.
    /// @cfg {String} successProperty The DomQuery path to the success attribute used by forms.
    /// @cfg {String} idPath The DomQuery path relative from the record element to the element that contains
    /// a record identifier value.
    /// @constructor
    /// Create a new XmlReader.
    /// @param {Object} meta Metadata configuration options
    /// @param {Object} recordType Either an Array of field definition objects as passed to
    /// {@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class XmlReader
    {
        public XmlReader() { }
        public XmlReader(XmlReaderConfig config) { }
        /// <summary>
        /// @class Ext.data.XmlReader
        /// @extends Ext.data.DataReader
        /// <p>Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document
        /// based on mappings in a provided {@link Ext.data.Record} constructor.</p>
        /// <p><b>Note</b>: that in order for the browser to parse a returned XML document, the Content-Type
        /// header in the HTTP response must be set to "text/xml" or "application/xml".</p>
        /// <p>Example code:</p>
        /// <pre><code>
        /// var Employee = Ext.data.Record.create([
        /// {name: 'name', mapping: 'name'},     // "mapping" property not needed if it is the same as "name"
        /// {name: 'occupation'}                 // This field will use "occupation" as the mapping.
        /// ]);
        /// var myReader = new Ext.data.XmlReader({
        /// totalProperty: "results", // The element which contains the total dataset size (optional)
        /// record: "row",           // The repeated element which contains row information
        /// idProperty: "id"         // The element within the row that provides an ID for the record (optional)
        /// messageProperty: "msg"   // The element within the response that provides a user-feedback message (optional)
        /// }, Employee);
        /// </code></pre>
        /// <p>
        /// This would consume an XML file like this:
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?>
        /// &lt;dataset>
        /// &lt;results>2&lt;/results>
        /// &lt;row>
        /// &lt;id>1&lt;/id>
        /// &lt;name>Bill&lt;/name>
        /// &lt;occupation>Gardener&lt;/occupation>
        /// &lt;/row>
        /// &lt;row>
        /// &lt;id>2&lt;/id>
        /// &lt;name>Ben&lt;/name>
        /// &lt;occupation>Horticulturalist&lt;/occupation>
        /// &lt;/row>
        /// &lt;/dataset>
        /// </code></pre>
        /// @cfg {String} totalProperty The DomQuery path from which to retrieve the total number of records
        /// in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
        /// paged from the remote server.
        /// @cfg {String} record The DomQuery path to the repeated element which contains record information.
        /// @cfg {String} record The DomQuery path to the repeated element which contains record information.
        /// @cfg {String} successProperty The DomQuery path to the success attribute used by forms.
        /// @cfg {String} idPath The DomQuery path relative from the record element to the element that contains
        /// a record identifier value.
        /// @constructor
        /// Create a new XmlReader.
        /// @param {Object} meta Metadata configuration options
        /// @param {Object} recordType Either an Array of field definition objects as passed to
        /// {@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}.
        /// </summary>
        public XmlReader(JsObject meta, JsObject recordType) { }
    }
    #endregion
    #region XmlReaderConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class XmlReaderConfig
    {
        /// <summary>
        /// The DomQuery path relative from the record element to the element that contains
        /// </summary>
        public JsString idPath { get; set; }
        /// <summary>
        /// The DomQuery path to the success attribute used by forms.
        /// </summary>
        public JsString successProperty { get; set; }
        /// <summary>
        /// The DomQuery path from which to retrieve the total number of records
        /// </summary>
        public JsString totalProperty { get; set; }
    }
    #endregion
    #region XmlStore
    /// <summary>
    /// @class Ext.data.XmlStore
    /// @extends Ext.data.Store
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.
    /// A XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.</p>
    /// <p>A store configuration would be something like:<pre><code>
    /// var store = new Ext.data.XmlStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore',
    /// url: 'sheldon.xml', // automatically configures a HttpProxy
    /// // reader configs
    /// record: 'Item', // records will have an "Item" tag
    /// idPath: 'ASIN',
    /// totalRecords: '@TotalResults'
    /// fields: [
    /// // set up the fields mapping into the xml doc
    /// // The first needs mapping, the others are very basic
    /// {name: 'Author', mapping: 'ItemAttributes > Author'},
    /// 'Title', 'Manufacturer', 'ProductGroup'
    /// ]
    /// });
    /// </code></pre></p>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// &#60?xml version="1.0" encoding="UTF-8"?>
    /// &#60ItemSearchResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2009-05-15">
    /// &#60Items>
    /// &#60Request>
    /// &#60IsValid>True&#60/IsValid>
    /// &#60ItemSearchRequest>
    /// &#60Author>Sidney Sheldon&#60/Author>
    /// &#60SearchIndex>Books&#60/SearchIndex>
    /// &#60/ItemSearchRequest>
    /// &#60/Request>
    /// &#60TotalResults>203&#60/TotalResults>
    /// &#60TotalPages>21&#60/TotalPages>
    /// &#60Item>
    /// &#60ASIN>0446355453&#60/ASIN>
    /// &#60DetailPageURL>
    /// http://www.amazon.com/
    /// &#60/DetailPageURL>
    /// &#60ItemAttributes>
    /// &#60Author>Sidney Sheldon&#60/Author>
    /// &#60Manufacturer>Warner Books&#60/Manufacturer>
    /// &#60ProductGroup>Book&#60/ProductGroup>
    /// &#60Title>Master of the Game&#60/Title>
    /// &#60/ItemAttributes>
    /// &#60/Item>
    /// &#60/Items>
    /// &#60/ItemSearchResponse>
    /// </code></pre>
    /// An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.XmlReader XmlReader}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype xmlstore
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class XmlStore : Ext.data.Store
    {
        public XmlStore() { }
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public XmlStore(object config) { }
    }
    #endregion
    #region XmlWriter
    /// <summary>
    /// @class Ext.data.XmlWriter
    /// @extends Ext.data.DataWriter
    /// DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.
    /// XmlWriter uses an instance of {@link Ext.XTemplate} for maximum flexibility in defining your own custom XML schema if the default schema is not appropriate for your needs.
    /// See the {@link #tpl} configuration-property.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class XmlWriter
    {
        public XmlWriter() { }
        /// <summary>
        /// @class Ext.data.XmlWriter
        /// @extends Ext.data.DataWriter
        /// DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.
        /// XmlWriter uses an instance of {@link Ext.XTemplate} for maximum flexibility in defining your own custom XML schema if the default schema is not appropriate for your needs.
        /// See the {@link #tpl} configuration-property.
        /// </summary>
        public XmlWriter(object @params) { }
    }
    #endregion
}
#endregion
#region Ext.data.Api
namespace Ext.data.Api
{
    #region Error
    /// <summary>
    /// @class Ext.data.Api.Error
    /// @extends Ext.Error
    /// Error class for Ext.data.Api errors
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Error : Ext.Error
    {
        public Error() { }
        public Error(object message, object arg) { }
        public JsString name { get; set; }
    }
    #endregion
}
#endregion
#region Ext.dd
namespace Ext.dd
{
    #region DD
    /// <summary>
    /// @class Ext.dd.DD
    /// A DragDrop implementation where the linked element follows the
    /// mouse cursor during a drag.
    /// @extends Ext.dd.DragDrop
    /// @constructor
    /// @param {String} id the id of the linked element
    /// @param {String} sGroup the group of related DragDrop items
    /// @param {object} config an object containing configurable attributes
    /// Valid properties for DD:
    /// scroll
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DD
    {
        public DD() { }
        /// <summary>
        /// @class Ext.dd.DD
        /// A DragDrop implementation where the linked element follows the
        /// mouse cursor during a drag.
        /// @extends Ext.dd.DragDrop
        /// @constructor
        /// @param {String} id the id of the linked element
        /// @param {String} sGroup the group of related DragDrop items
        /// @param {object} config an object containing configurable attributes
        /// Valid properties for DD:
        /// scroll
        /// </summary>
        public DD(JsString id, JsString sGroup, object config) { }
    }
    #endregion
    #region DDProxy
    /// <summary>
    /// @class Ext.dd.DDProxy
    /// A DragDrop implementation that inserts an empty, bordered div into
    /// the document that follows the cursor during drag operations.  At the time of
    /// the click, the frame div is resized to the dimensions of the linked html
    /// element, and moved to the exact location of the linked element.
    /// *
    /// References to the "frame" element refer to the single proxy element that
    /// was created to be dragged in place of all DDProxy elements on the
    /// page.
    /// *
    /// @extends Ext.dd.DD
    /// @constructor
    /// @param {String} id the id of the linked html element
    /// @param {String} sGroup the group of related DragDrop objects
    /// @param {object} config an object containing configurable attributes
    /// Valid properties for DDProxy in addition to those in DragDrop:
    /// resizeFrame, centerFrame, dragElId
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DDProxy
    {
        public DDProxy() { }
        /// <summary>
        /// @class Ext.dd.DDProxy
        /// A DragDrop implementation that inserts an empty, bordered div into
        /// the document that follows the cursor during drag operations.  At the time of
        /// the click, the frame div is resized to the dimensions of the linked html
        /// element, and moved to the exact location of the linked element.
        /// *
        /// References to the "frame" element refer to the single proxy element that
        /// was created to be dragged in place of all DDProxy elements on the
        /// page.
        /// *
        /// @extends Ext.dd.DD
        /// @constructor
        /// @param {String} id the id of the linked html element
        /// @param {String} sGroup the group of related DragDrop objects
        /// @param {object} config an object containing configurable attributes
        /// Valid properties for DDProxy in addition to those in DragDrop:
        /// resizeFrame, centerFrame, dragElId
        /// </summary>
        public DDProxy(JsString id, JsString sGroup, object config) { }
    }
    #endregion
    #region DDTarget
    /// <summary>
    /// @class Ext.dd.DDTarget
    /// A DragDrop implementation that does not move, but can be a drop
    /// target.  You would get the same result by simply omitting implementation
    /// for the event callbacks, but this way we reduce the processing cost of the
    /// event listener and the callbacks.
    /// @extends Ext.dd.DragDrop
    /// @constructor
    /// @param {String} id the id of the element that is a drop target
    /// @param {String} sGroup the group of related DragDrop objects
    /// @param {object} config an object containing configurable attributes
    /// Valid properties for DDTarget in addition to those in
    /// DragDrop:
    /// none
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DDTarget
    {
        public DDTarget() { }
        /// <summary>
        /// @class Ext.dd.DDTarget
        /// A DragDrop implementation that does not move, but can be a drop
        /// target.  You would get the same result by simply omitting implementation
        /// for the event callbacks, but this way we reduce the processing cost of the
        /// event listener and the callbacks.
        /// @extends Ext.dd.DragDrop
        /// @constructor
        /// @param {String} id the id of the element that is a drop target
        /// @param {String} sGroup the group of related DragDrop objects
        /// @param {object} config an object containing configurable attributes
        /// Valid properties for DDTarget in addition to those in
        /// DragDrop:
        /// none
        /// </summary>
        public DDTarget(JsString id, JsString sGroup, object config) { }
    }
    #endregion
    #region DragDrop
    /// <summary>
    /// @class Ext.dd.DragDrop
    /// Defines the interface and base operation of items that that can be
    /// dragged or can be drop targets.  It was designed to be extended, overriding
    /// the event handlers for startDrag, onDrag, onDragOver and onDragOut.
    /// Up to three html elements can be associated with a DragDrop instance:
    /// <ul>
    /// <li>linked element: the element that is passed into the constructor.
    /// This is the element which defines the boundaries for interaction with
    /// other DragDrop objects.</li>
    /// <li>handle element(s): The drag operation only occurs if the element that
    /// was clicked matches a handle element.  By default this is the linked
    /// element, but there are times that you will want only a portion of the
    /// linked element to initiate the drag operation, and the setHandleElId()
    /// method provides a way to define this.</li>
    /// <li>drag element: this represents the element that would be moved along
    /// with the cursor during a drag operation.  By default, this is the linked
    /// element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define
    /// a separate element that would be moved, as in {@link Ext.dd.DDProxy}.
    /// </li>
    /// </ul>
    /// This class should not be instantiated until the onload event to ensure that
    /// the associated elements are available.
    /// The following would define a DragDrop obj that would interact with any
    /// other DragDrop obj in the "group1" group:
    /// <pre>
    /// dd = new Ext.dd.DragDrop("div1", "group1");
    /// </pre>
    /// Since none of the event handlers have been implemented, nothing would
    /// actually happen if you were to run the code above.  Normally you would
    /// override this class or one of the default implementations, but you can
    /// also override the methods you want on an instance of the class...
    /// <pre>
    /// dd.onDragDrop = function(e, id) {
    /// &nbsp;&nbsp;alert("dd was dropped on " + id);
    /// }
    /// </pre>
    /// @constructor
    /// @param {String} id of the element that is linked to this instance
    /// @param {String} sGroup the group of related DragDrop objects
    /// @param {object} config an object containing configurable attributes
    /// Valid properties for DragDrop:
    /// padding, isTarget, maintainOffset, primaryButtonOnly
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DragDrop
    {
        public DragDrop() { }
        /// <summary>
        /// Lets you specify a css class of elements that will not initiate a drag
        /// @method addInvalidHandleClass
        /// @param {string} cssClass the class of the elements you wish to ignore
        /// </summary>
        public void addInvalidHandleClass(object cssClass) { }
        /// <summary>
        /// Lets you to specify an element id for a child of a drag handle
        /// that should not initiate a drag
        /// @method addInvalidHandleId
        /// @param {string} id the element id of the element you wish to ignore
        /// </summary>
        public void addInvalidHandleId(object id) { }
        /// <summary>
        /// Allows you to specify a tag name that should not start a drag operation
        /// when clicked.  This is designed to facilitate embedding links within a
        /// drag handle that do something other than start the drag.
        /// @method addInvalidHandleType
        /// @param {string} tagName the type of element to exclude
        /// </summary>
        public void addInvalidHandleType(object tagName) { }
        /// <summary>
        /// Add this instance to a group of related drag/drop objects.  All
        /// instances belong to at least one group, and can belong to as many
        /// groups as needed.
        /// @method addToGroup
        /// @param sGroup {string} the name of the group
        /// </summary>
        public void addToGroup(object sGroup) { }
        /// <summary>
        /// Applies the configuration parameters that were passed into the constructor.
        /// This is supposed to happen at each level through the inheritance chain.  So
        /// a DDProxy implentation will execute apply config on DDProxy, DD, and
        /// DragDrop in order to get all of the parameters that are available in
        /// each object.
        /// @method applyConfig
        /// </summary>
        public void applyConfig() { }
        /// <summary>
        /// Code that executes immediately before the onDrag event
        /// @method b4Drag
        /// @private
        /// </summary>
        public void b4Drag(object e) { }
        /// <summary>
        /// Code that executes immediately before the onDragDrop event
        /// @method b4DragDrop
        /// @private
        /// </summary>
        public void b4DragDrop(object e) { }
        /// <summary>
        /// Code that executes immediately before the onDragOut event
        /// @method b4DragOut
        /// @private
        /// </summary>
        public void b4DragOut(object e) { }
        /// <summary>
        /// Code that executes immediately before the onDragOver event
        /// @method b4DragOver
        /// @private
        /// </summary>
        public void b4DragOver(object e) { }
        /// <summary>
        /// Code that executes immediately before the endDrag event
        /// @method b4EndDrag
        /// @private
        /// </summary>
        public void b4EndDrag(object e) { }
        /// <summary>
        /// Code executed immediately before the onMouseDown event
        /// @method b4MouseDown
        /// @param {Event} e the mousedown event
        /// @private
        /// </summary>
        public void b4MouseDown(object e) { }
        /// <summary>
        /// Code that executes immediately before the startDrag event
        /// @method b4StartDrag
        /// @private
        /// </summary>
        public void b4StartDrag(object x, object y) { }
        /// <summary>
        /// Clears any constraints applied to this instance.  Also clears ticks
        /// since they can't exist independent of a constraint at this time.
        /// @method clearConstraints
        /// </summary>
        public void clearConstraints() { }
        /// <summary>
        /// Clears any tick interval defined for this instance
        /// @method clearTicks
        /// </summary>
        public void clearTicks() { }
        public void clickValidator(object e) { }
        /// <summary>
        /// Initializes the drag drop object's constraints to restrict movement to a certain element.
        /// *
        /// Usage:
        /// <pre><code>
        /// var dd = new Ext.dd.DDProxy("dragDiv1", "proxytest",
        /// { dragElId: "existingProxyDiv" });
        /// dd.startDrag = function(){
        /// this.constrainTo("parent-id");
        /// };
        /// </code></pre>
        /// Or you can initalize it using the {@link Ext.Element} object:
        /// <pre><code>
        /// Ext.get("dragDiv1").initDDProxy("proxytest", {dragElId: "existingProxyDiv"}, {
        /// startDrag : function(){
        /// this.constrainTo("parent-id");
        /// }
        /// });
        /// </code></pre>
        /// @param {Mixed} constrainTo The element to constrain to.
        /// @param {Object/Number} pad (optional) Pad provides a way to specify "padding" of the constraints,
        /// and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or
        /// an object containing the sides to pad. For example: {right:10, bottom:10}
        /// @param {Boolean} inContent (optional) Constrain the draggable in the content box of the element (inside padding and borders)
        /// </summary>
        public void constrainTo(object constrainTo, object pad, bool inContent) { }
        public void destroy() { }
        /// <summary>
        /// @class Ext.dd.DragDrop
        /// Defines the interface and base operation of items that that can be
        /// dragged or can be drop targets.  It was designed to be extended, overriding
        /// the event handlers for startDrag, onDrag, onDragOver and onDragOut.
        /// Up to three html elements can be associated with a DragDrop instance:
        /// <ul>
        /// <li>linked element: the element that is passed into the constructor.
        /// This is the element which defines the boundaries for interaction with
        /// other DragDrop objects.</li>
        /// <li>handle element(s): The drag operation only occurs if the element that
        /// was clicked matches a handle element.  By default this is the linked
        /// element, but there are times that you will want only a portion of the
        /// linked element to initiate the drag operation, and the setHandleElId()
        /// method provides a way to define this.</li>
        /// <li>drag element: this represents the element that would be moved along
        /// with the cursor during a drag operation.  By default, this is the linked
        /// element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define
        /// a separate element that would be moved, as in {@link Ext.dd.DDProxy}.
        /// </li>
        /// </ul>
        /// This class should not be instantiated until the onload event to ensure that
        /// the associated elements are available.
        /// The following would define a DragDrop obj that would interact with any
        /// other DragDrop obj in the "group1" group:
        /// <pre>
        /// dd = new Ext.dd.DragDrop("div1", "group1");
        /// </pre>
        /// Since none of the event handlers have been implemented, nothing would
        /// actually happen if you were to run the code above.  Normally you would
        /// override this class or one of the default implementations, but you can
        /// also override the methods you want on an instance of the class...
        /// <pre>
        /// dd.onDragDrop = function(e, id) {
        /// &nbsp;&nbsp;alert("dd was dropped on " + id);
        /// }
        /// </pre>
        /// @constructor
        /// @param {String} id of the element that is linked to this instance
        /// @param {String} sGroup the group of related DragDrop objects
        /// @param {object} config an object containing configurable attributes
        /// Valid properties for DragDrop:
        /// padding, isTarget, maintainOffset, primaryButtonOnly
        /// </summary>
        public DragDrop(JsString id, JsString sGroup, object config) { }
        /// <summary>
        /// Fired when we are done dragging the object
        /// @method endDrag
        /// @param {Event} e the mouseup event
        /// </summary>
        public void endDrag(object e) { }
        /// <summary>
        /// Returns a reference to the actual element to drag.  By default this is
        /// the same as the html element, but it can be assigned to another
        /// element. An example of this can be found in Ext.dd.DDProxy
        /// @method getDragEl
        /// @return {HTMLElement} the html element
        /// </summary>
        public HtmlElement getDragEl() { return null; }
        /// <summary>
        /// Returns a reference to the linked element
        /// @method getEl
        /// @return {HTMLElement} the html element
        /// </summary>
        public HtmlElement getEl() { return null; }
        /// <summary>
        /// Normally the drag element is moved pixel by pixel, but we can specify
        /// that it move a number of pixels at a time.  This method resolves the
        /// location when we have it set up like this.
        /// @method getTick
        /// @param {int} val where we want to place the object
        /// @param {int[]} tickArray sorted array of valid points
        /// @return {int} the closest tick
        /// @private
        /// </summary>
        public void getTick(object val, object tickArray) { }
        /// <summary>
        /// Fired when this object is clicked
        /// @method handleMouseDown
        /// @param {Event} e
        /// @param {Ext.dd.DragDrop} oDD the clicked dd object (this dd obj)
        /// @private
        /// </summary>
        public void handleMouseDown(object e, DragDrop oDD) { }
        /// <summary>
        /// Executed when the linked element is available
        /// @method handleOnAvailable
        /// @private
        /// </summary>
        public void handleOnAvailable() { }
        /// <summary>
        /// Sets up the DragDrop object.  Must be called in the constructor of any
        /// Ext.dd.DragDrop subclass
        /// @method init
        /// @param id the id of the linked element
        /// @param {String} sGroup the group of related items
        /// @param {object} config configuration attributes
        /// </summary>
        public void init(object id, JsString sGroup, object config) { }
        /// <summary>
        /// Initializes Targeting functionality only... the object does not
        /// get a mousedown handler.
        /// @method initTarget
        /// @param id the id of the linked element
        /// @param {String} sGroup the group of related items
        /// @param {object} config configuration attributes
        /// </summary>
        public void initTarget(object id, JsString sGroup, object config) { }
        /// <summary>
        /// Returns true if this instance is locked, or the drag drop mgr is locked
        /// (meaning that all drag/drop is disabled on the page.)
        /// @method isLocked
        /// @return {boolean} true if this obj or all drag/drop is locked, else
        /// false
        /// </summary>
        public void isLocked() { }
        /// <summary>
        /// Checks the tag exclusion list to see if this click should be ignored
        /// @method isValidHandleChild
        /// @param {HTMLElement} node the HTMLElement to evaluate
        /// @return {boolean} true if this is a valid tag type, false if not
        /// </summary>
        public void isValidHandleChild(HtmlElement node) { }
        /// <summary>
        /// Lock this instance
        /// @method lock
        /// </summary>
        public void @lock() { }
        /// <summary>
        /// Override the onAvailable method to do what is needed after the initial
        /// position was determined.
        /// @method onAvailable
        /// </summary>
        public void onAvailable() { }
        /// <summary>
        /// Abstract method called during the onMouseMove event while dragging an
        /// object.
        /// @method onDrag
        /// @param {Event} e the mousemove event
        /// </summary>
        public void onDrag(object e) { }
        /// <summary>
        /// Abstract method called when this item is dropped on another DragDrop
        /// obj
        /// @method onDragDrop
        /// @param {Event} e the mouseup event
        /// @param {String|DragDrop[]} id In POINT mode, the element
        /// id this was dropped on.  In INTERSECT mode, an array of dd items this
        /// was dropped on.
        /// </summary>
        public void onDragDrop(object e, object id) { }
        /// <summary>
        /// Abstract method called when this element fist begins hovering over
        /// another DragDrop obj
        /// @method onDragEnter
        /// @param {Event} e the mousemove event
        /// @param {String|DragDrop[]} id In POINT mode, the element
        /// id this is hovering over.  In INTERSECT mode, an array of one or more
        /// dragdrop items being hovered over.
        /// </summary>
        public void onDragEnter(object e, object id) { }
        /// <summary>
        /// Abstract method called when we are no longer hovering over an element
        /// @method onDragOut
        /// @param {Event} e the mousemove event
        /// @param {String|DragDrop[]} id In POINT mode, the element
        /// id this was hovering over.  In INTERSECT mode, an array of dd items
        /// that the mouse is no longer over.
        /// </summary>
        public void onDragOut(object e, object id) { }
        /// <summary>
        /// Abstract method called when this element is hovering over another
        /// DragDrop obj
        /// @method onDragOver
        /// @param {Event} e the mousemove event
        /// @param {String|DragDrop[]} id In POINT mode, the element
        /// id this is hovering over.  In INTERSECT mode, an array of dd items
        /// being hovered over.
        /// </summary>
        public void onDragOver(object e, object id) { }
        /// <summary>
        /// Abstract method called when this item is dropped on an area with no
        /// drop target
        /// @method onInvalidDrop
        /// @param {Event} e the mouseup event
        /// </summary>
        public void onInvalidDrop(object e) { }
        /// <summary>
        /// Event handler that fires when a drag/drop obj gets a mousedown
        /// @method onMouseDown
        /// @param {Event} e the mousedown event
        /// </summary>
        public void onMouseDown(object e) { }
        /// <summary>
        /// Event handler that fires when a drag/drop obj gets a mouseup
        /// @method onMouseUp
        /// @param {Event} e the mouseup event
        /// </summary>
        public void onMouseUp(object e) { }
        /// <summary>
        /// Remove's this instance from the supplied interaction group
        /// @method removeFromGroup
        /// @param {string}  sGroup  The group to drop
        /// </summary>
        public void removeFromGroup(object sGroup) { }
        /// <summary>
        /// Unsets an invalid css class
        /// @method removeInvalidHandleClass
        /// @param {string} cssClass the class of the element(s) you wish to
        /// re-enable
        /// </summary>
        public void removeInvalidHandleClass(object cssClass) { }
        /// <summary>
        /// Unsets an invalid handle id
        /// @method removeInvalidHandleId
        /// @param {string} id the id of the element to re-enable
        /// </summary>
        public void removeInvalidHandleId(object id) { }
        /// <summary>
        /// Unsets an excluded tag name set by addInvalidHandleType
        /// @method removeInvalidHandleType
        /// @param {string} tagName the type of element to unexclude
        /// </summary>
        public void removeInvalidHandleType(object tagName) { }
        /// <summary>
        /// resetConstraints must be called if you manually reposition a dd element.
        /// @method resetConstraints
        /// @param {boolean} maintainOffset
        /// </summary>
        public void resetConstraints() { }
        /// <summary>
        /// Allows you to specify that an element other than the linked element
        /// will be moved with the cursor during a drag
        /// @method setDragElId
        /// @param id {string} the id of the element that will be used to initiate the drag
        /// </summary>
        public void setDragElId(object id) { }
        /// <summary>
        /// Allows you to specify a child of the linked element that should be
        /// used to initiate the drag operation.  An example of this would be if
        /// you have a content div with text and links.  Clicking anywhere in the
        /// content area would normally start the drag operation.  Use this method
        /// to specify that an element inside of the content div is the element
        /// that starts the drag operation.
        /// @method setHandleElId
        /// @param id {string} the id of the element that will be used to
        /// initiate the drag.
        /// </summary>
        public void setHandleElId(object id) { }
        /// <summary>
        /// Stores the initial placement of the linked element.
        /// @method setInitPosition
        /// @param {int} diffX   the X offset, default 0
        /// @param {int} diffY   the Y offset, default 0
        /// </summary>
        public void setInitPosition(object diffX, object diffY) { }
        /// <summary>
        /// Allows you to set an element outside of the linked element as a drag
        /// handle
        /// @method setOuterHandleElId
        /// @param id the id of the element that will be used to initiate the drag
        /// </summary>
        public void setOuterHandleElId(object id) { }
        /// <summary>
        /// Configures the padding for the target zone in px.  Effectively expands
        /// (or reduces) the virtual object size for targeting calculations.
        /// Supports css-style shorthand; if only one parameter is passed, all sides
        /// will have that padding, and if only two are passed, the top and bottom
        /// will have the first param, the left and right the second.
        /// @method setPadding
        /// @param {int} iTop    Top pad
        /// @param {int} iRight  Right pad
        /// @param {int} iBot    Bot pad
        /// @param {int} iLeft   Left pad
        /// </summary>
        public void setPadding(object iTop, object iRight, object iBot, object iLeft) { }
        /// <summary>
        /// Sets the start position of the element.  This is set when the obj
        /// is initialized, the reset when a drag is started.
        /// @method setStartPosition
        /// @param pos current position (from previous lookup)
        /// @private
        /// </summary>
        public void setStartPosition(object pos) { }
        /// <summary>
        /// By default, the element can be dragged any place on the screen.  Use
        /// this method to limit the horizontal travel of the element.  Pass in
        /// 0,0 for the parameters if you want to lock the drag to the y axis.
        /// @method setXConstraint
        /// @param {int} iLeft the number of pixels the element can move to the left
        /// @param {int} iRight the number of pixels the element can move to the
        /// right
        /// @param {int} iTickSize optional parameter for specifying that the
        /// element
        /// should move iTickSize pixels at a time.
        /// </summary>
        public void setXConstraint(object iLeft, object iRight, object iTickSize) { }
        /// <summary>
        /// Create the array of horizontal tick marks if an interval was specified
        /// in setXConstraint().
        /// @method setXTicks
        /// @private
        /// </summary>
        public void setXTicks(object iStartX, object iTickSize) { }
        /// <summary>
        /// By default, the element can be dragged any place on the screen.  Set
        /// this to limit the vertical travel of the element.  Pass in 0,0 for the
        /// parameters if you want to lock the drag to the x axis.
        /// @method setYConstraint
        /// @param {int} iUp the number of pixels the element can move up
        /// @param {int} iDown the number of pixels the element can move down
        /// @param {int} iTickSize optional parameter for specifying that the
        /// element should move iTickSize pixels at a time.
        /// </summary>
        public void setYConstraint(object iUp, object iDown, object iTickSize) { }
        /// <summary>
        /// Create the array of vertical tick marks if an interval was specified in
        /// setYConstraint().
        /// @method setYTicks
        /// @private
        /// </summary>
        public void setYTicks(object iStartY, object iTickSize) { }
        /// <summary>
        /// Abstract method called after a drag/drop object is clicked
        /// and the drag or mousedown time thresholds have beeen met.
        /// @method startDrag
        /// @param {int} X click location
        /// @param {int} Y click location
        /// </summary>
        public void startDrag(object x, object y) { }
        /// <summary>
        /// toString method
        /// @method toString
        /// @return {string} string representation of the dd obj
        /// </summary>
        public void toString() { }
        /// <summary>
        /// Unlock this instace
        /// @method unlock
        /// </summary>
        public void unlock() { }
        /// <summary>
        /// Remove all drag and drop hooks for this element
        /// @method unreg
        /// </summary>
        public void unreg() { }
        /// <summary>
        /// Internal typeof flag
        /// @property __ygDragDrop
        /// @private
        /// </summary>
        public bool __ygDragDrop { get; set; }
        /// <summary>
        /// Cached reference to the linked element
        /// @property _domRef
        /// @private
        /// </summary>
        public object _domRef { get; set; }
        /// <summary>
        /// The available property is false until the linked dom element is accessible.
        /// @property available
        /// @type boolean
        /// </summary>
        public bool available { get; set; }
        /// <summary>
        /// Configuration attributes passed into the constructor
        /// @property config
        /// @type object
        /// </summary>
        public object config { get; set; }
        /// <summary>
        /// Set to true when horizontal contraints are applied
        /// @property constrainX
        /// @type boolean
        /// @private
        /// </summary>
        public bool constrainX { get; set; }
        /// <summary>
        /// Set to true when vertical contraints are applied
        /// @property constrainY
        /// @type boolean
        /// @private
        /// </summary>
        public bool constrainY { get; set; }
        /// <summary>
        /// The id of the element that will be dragged.  By default this is same
        /// as the linked element, but could be changed to another element. Ex:
        /// Ext.dd.DDProxy
        /// @property dragElId
        /// @type String
        /// @private
        /// </summary>
        public object dragElId { get; set; }
        /// <summary>
        /// The group defines a logical collection of DragDrop objects that are
        /// related.  Instances only get events when interacting with other
        /// DragDrop object in the same group.  This lets us define multiple
        /// groups using a single DragDrop subclass if we want.
        /// @property groups
        /// @type object An object in the format {'group1':true, 'group2':true}
        /// </summary>
        public object groups { get; set; }
        /// <summary>
        /// The ID of the element that initiates the drag operation.  By default
        /// this is the linked element, but could be changed to be a child of this
        /// element.  This lets us do things like only starting the drag when the
        /// header element within the linked html element is clicked.
        /// @property handleElId
        /// @type String
        /// @private
        /// </summary>
        public object handleElId { get; set; }
        /// <summary>
        /// By default, drags can only be initiated if the mousedown occurs in the
        /// region the linked element is.  This is done in part to work around a
        /// bug in some browsers that mis-report the mousedown if the previous
        /// mouseup happened outside of the window.  This property is set to true
        /// if outer handles are defined.
        /// *
        /// @property hasOuterHandles
        /// @type boolean
        /// @default false
        /// </summary>
        public bool hasOuterHandles { get; set; }
        /// <summary>
        /// The id of the element associated with this object.  This is what we
        /// refer to as the "linked element" because the size and position of
        /// this element is used to determine when the drag and drop objects have
        /// interacted.
        /// @property id
        /// @type String
        /// </summary>
        public object id { get; set; }
        /// <summary>
        /// An Array of CSS class names for elements to be considered in valid as drag handles.
        /// @property invalidHandleClasses
        /// @type Array
        /// </summary>
        public object invalidHandleClasses { get; set; }
        /// <summary>
        /// An object who's property names identify the IDs of elements to be considered invalid as drag handles.
        /// A non-null property value identifies the ID as invalid. For example, to prevent
        /// dragging from being initiated on element ID "foo", use:<pre><code>
        /// {
        /// foo: true
        /// }</code></pre>
        /// @property invalidHandleIds
        /// @type Object
        /// </summary>
        public object invalidHandleIds { get; set; }
        /// <summary>
        /// An object who's property names identify HTML tags to be considered invalid as drag handles.
        /// A non-null property value identifies the tag as invalid. Defaults to the
        /// following value which prevents drag operations from being initiated by &lt;a> elements:<pre><code>
        /// {
        /// A: "A"
        /// }</code></pre>
        /// @property invalidHandleTypes
        /// @type Object
        /// </summary>
        public object invalidHandleTypes { get; set; }
        /// <summary>
        /// By default, all instances can be a drop target.  This can be disabled by
        /// setting isTarget to false.
        /// @property isTarget
        /// @type boolean
        /// </summary>
        public bool isTarget { get; set; }
        /// <summary>
        /// Individual drag/drop instances can be locked.  This will prevent
        /// onmousedown start drag.
        /// @property locked
        /// @type boolean
        /// @private
        /// </summary>
        public bool locked { get; set; }
        /// <summary>
        /// Maintain offsets when we resetconstraints.  Set to true when you want
        /// the position of the element relative to its parent to stay the same
        /// when the page changes
        /// *
        /// @property maintainOffset
        /// @type boolean
        /// </summary>
        public bool maintainOffset { get; set; }
        /// <summary>
        /// The right constraint
        /// @property maxX
        /// @type int
        /// @private
        /// </summary>
        public object maxX { get; set; }
        /// <summary>
        /// The down constraint
        /// @property maxY
        /// @type int
        /// @private
        /// </summary>
        public object maxY { get; set; }
        /// <summary>
        /// The left constraint
        /// @property minX
        /// @type int
        /// @private
        /// </summary>
        public object minX { get; set; }
        /// <summary>
        /// The up constraint
        /// @property minY
        /// @type int
        /// @private
        /// </summary>
        public object minY { get; set; }
        /// <summary>
        /// When set to true, other DD objects in cooperating DDGroups do not receive
        /// notification events when this DD object is dragged over them. Defaults to false.
        /// @property moveOnly
        /// @type boolean
        /// </summary>
        public bool moveOnly { get; set; }
        /// <summary>
        /// The padding configured for this drag and drop object for calculating
        /// the drop zone intersection with this object.
        /// @property padding
        /// @type int[] An array containing the 4 padding values: [top, right, bottom, left]
        /// </summary>
        public object padding { get; set; }
        /// <summary>
        /// By default the drag and drop instance will only respond to the primary
        /// button click (left button for a right-handed mouse).  Set to true to
        /// allow drag and drop to start with any mouse click that is propogated
        /// by the browser
        /// @property primaryButtonOnly
        /// @type boolean
        /// </summary>
        public bool primaryButtonOnly { get; set; }
        /// <summary>
        /// The linked element's absolute X position at the time the drag was
        /// started
        /// @property startPageX
        /// @type int
        /// @private
        /// </summary>
        public object startPageX { get; set; }
        /// <summary>
        /// The linked element's absolute X position at the time the drag was
        /// started
        /// @property startPageY
        /// @type int
        /// @private
        /// </summary>
        public object startPageY { get; set; }
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// horizontal graduation/interval.  This array is generated automatically
        /// when you define a tick interval.
        /// @property xTicks
        /// @type int[]
        /// </summary>
        public object xTicks { get; set; }
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// vertical graduation/interval.  This array is generated automatically
        /// when you define a tick interval.
        /// @property yTicks
        /// @type int[]
        /// </summary>
        public object yTicks { get; set; }
    }
    #endregion
    #region DragSource
    /// <summary>
    /// @class Ext.dd.DragSource
    /// @extends Ext.dd.DDProxy
    /// A simple class that provides the basic implementation needed to make any element draggable.
    /// @constructor
    /// @param {Mixed} el The container element
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DragSource
    {
        public DragSource() { }
        /// <summary>
        /// @class Ext.dd.DragSource
        /// @extends Ext.dd.DDProxy
        /// A simple class that provides the basic implementation needed to make any element draggable.
        /// @constructor
        /// @param {Mixed} el The container element
        /// @param {Object} config
        /// </summary>
        public DragSource(object el, object config) { }
    }
    #endregion
    #region DragTracker
    /// <summary>
    /// @class Ext.dd.DragTracker
    /// @extends Ext.util.Observable
    /// A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,
    /// as well as during the drag. This is useful for components such as {@link Ext.slider.MultiSlider}, where there is
    /// an element that can be dragged around to change the Slider's value.
    /// DragTracker provides a series of template methods that should be overridden to provide functionality
    /// in response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.
    /// See {@link Ext.slider.MultiSlider}'s initEvents function for an example implementation.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DragTracker : Ext.util.Observable
    {
        public DragTracker() { }
        public void clearStart() { }
        public DragTracker(object config) { }
        public void destroy() { }
        public void getDragCt() { }
        /// <summary>
        /// Returns the drag target
        /// @return {Ext.Element} The element currently being tracked
        /// </summary>
        public Element getDragTarget() { return null; }
        public void getOffset(object constrain) { }
        public void getXY(object constrain) { }
        public void initEl(object el) { }
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. Called when the user first clicks and
        /// holds the mouse button down. Return false to disallow the drag
        /// @param {Ext.EventObject} e The event object
        /// </summary>
        public void onBeforeStart(object e) { }
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. Called whenever a drag has been detected.
        /// @param {Ext.EventObject} e The event object
        /// </summary>
        public void onDrag(object e) { }
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. Called when a drag operation has been completed
        /// (e.g. the user clicked and held the mouse down, dragged the element and then released the mouse button)
        /// @param {Ext.EventObject} e The event object
        /// </summary>
        public void onEnd(object e) { }
        public void onMouseDown(object e, object target) { }
        public void onMouseMove(object e, object target) { }
        public void onMouseUp(object e) { }
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. Called when a drag operation starts
        /// (e.g. the user has moved the tracked element beyond the specified tolerance)
        /// @param {Ext.EventObject} e The event object
        /// </summary>
        public void onStart(object xy) { }
        public void stopSelect(object e) { }
        public void triggerStart(object e) { }
        /// <summary>
        /// @cfg {Boolean} active
        /// Defaults to <tt>false</tt>.
        /// </summary>
        public bool active { get; set; }
        /// <summary>
        /// @cfg {Boolean/Number} autoStart
        /// Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.
        /// Specify a Number for the number of milliseconds to defer trigger start.
        /// </summary>
        public bool autoStart { get; set; }
        /// <summary>
        /// @cfg {Number} tolerance
        /// Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to <tt>5</tt>.
        /// </summary>
        public object tolerance { get; set; }
    }
    #endregion
    #region DragZone
    /// <summary>
    /// @class Ext.dd.DragZone
    /// @extends Ext.dd.DragSource
    /// <p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>
    /// <p>This class does not move the drag target nodes, but a proxy element which may contain
    /// any DOM structure you wish. The DOM element to show in the proxy is provided by either a
    /// provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}</p>
    /// <p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some
    /// application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class
    /// is the most efficient way to "activate" those nodes.</p>
    /// <p>By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.
    /// However a simpler way to allow a DragZone to manage any number of draggable elements is to configure
    /// the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed
    /// mouse event to see if it has taken place within an element, or class of elements. This is easily done
    /// by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
    /// {@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following
    /// technique. Knowledge of the use of the DataView is required:</p><pre><code>
    /// myDataView.on('render', function(v) {
    /// myDataView.dragZone = new Ext.dd.DragZone(v.getEl(), {
    /// //      On receipt of a mousedown event, see if it is within a DataView node.
    /// //      Return a drag data object if so.
    /// getDragData: function(e) {
    /// //          Use the DataView's own itemSelector (a mandatory property) to
    /// //          test if the mousedown is within one of the DataView's nodes.
    /// var sourceEl = e.getTarget(v.itemSelector, 10);
    /// //          If the mousedown is within a DataView node, clone the node to produce
    /// //          a ddel element for use by the drag proxy. Also add application data
    /// //          to the returned data object.
    /// if (sourceEl) {
    /// d = sourceEl.cloneNode(true);
    /// d.id = Ext.id();
    /// return {
    /// ddel: d,
    /// sourceEl: sourceEl,
    /// repairXY: Ext.fly(sourceEl).getXY(),
    /// sourceStore: v.store,
    /// draggedRecord: v.{@link Ext.DataView#getRecord getRecord}(sourceEl)
    /// }
    /// }
    /// },
    /// //      Provide coordinates for the proxy to slide back to on failed drag.
    /// //      This is the original XY coordinates of the draggable element captured
    /// //      in the getDragData method.
    /// getRepairXY: function() {
    /// return this.dragData.repairXY;
    /// }
    /// });
    /// });</code></pre>
    /// See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which
    /// cooperates with this DragZone.
    /// @constructor
    /// @param {Mixed} el The container element
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DragZone : Ext.dd.DragSource
    {
        public DragZone() { }
        /// <summary>
        /// Called after a repair of an invalid drop. By default, highlights this.dragData.ddel
        /// </summary>
        public void afterRepair() { }
        public DragZone(object el, object config) { }
        public void destroy() { }
        /// <summary>
        /// Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}
        /// for a valid target to drag based on the mouse down. Override this method
        /// to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
        /// object has a "ddel" attribute (with an HTML Element) for other functions to work.
        /// @param {EventObject} e The mouse down event
        /// @return {Object} The dragData
        /// </summary>
        public JsObject getDragData(object e) { return null; }
        /// <summary>
        /// Called before a repair of an invalid drop to get the XY to animate to. By default returns
        /// the XY of this.dragData.ddel
        /// @param {EventObject} e The mouse up event
        /// @return {Array} The xy location (e.g. [100, 200])
        /// </summary>
        public JsArray getRepairXY(object e) { return null; }
        /// <summary>
        /// Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
        /// this.dragData.ddel
        /// @param {Number} x The x position of the click on the dragged object
        /// @param {Number} y The y position of the click on the dragged object
        /// @return {Boolean} true to continue the drag, false to cancel
        /// </summary>
        public bool onInitDrag(JsNumber x, JsNumber y) { return false; }
    }
    #endregion
    #region DropTarget
    /// <summary>
    /// @class Ext.dd.DropTarget
    /// @extends Ext.dd.DDTarget
    /// A simple class that provides the basic implementation needed to make any element a drop target that can have
    /// draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.
    /// @constructor
    /// @param {Mixed} el The container element
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DropTarget : Ext.dd.DDTarget
    {
        public DropTarget() { }
        public DropTarget(object el, object config) { }
        public void destroy() { }
        /// <summary>
        /// The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has
        /// been dropped on it.  This method has no default implementation and returns false, so you must provide an
        /// implementation that does something to process the drop event and returns true so that the drag source's
        /// repair action does not run.
        /// @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
        /// @param {Event} e The event
        /// @param {Object} data An object containing arbitrary data supplied by the drag source
        /// @return {Boolean} True if the drop was valid, else false
        /// </summary>
        public bool notifyDrop(object dd, object e, JsObject data) { return false; }
        /// <summary>
        /// The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the
        /// target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
        /// and returns the dropAllowed config value.  This method should be overridden if drop validation is required.
        /// @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
        /// @param {Event} e The event
        /// @param {Object} data An object containing arbitrary data supplied by the drag source
        /// @return {String} status The CSS class that communicates the drop status back to the source so that the
        /// underlying {@link Ext.dd.StatusProxy} can be updated
        /// </summary>
        public JsString notifyEnter(object dd, object e, JsObject data) { return null; }
        /// <summary>
        /// The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged
        /// out of the target without dropping.  This default implementation simply removes the CSS class specified by
        /// overClass (if any) from the drop element.
        /// @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
        /// @param {Event} e The event
        /// @param {Object} data An object containing arbitrary data supplied by the drag source
        /// </summary>
        public void notifyOut(object dd, object e, JsObject data) { }
        /// <summary>
        /// The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.
        /// This method will be called on every mouse movement while the drag source is over the drop target.
        /// This default implementation simply returns the dropAllowed config value.
        /// @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
        /// @param {Event} e The event
        /// @param {Object} data An object containing arbitrary data supplied by the drag source
        /// @return {String} status The CSS class that communicates the drop status back to the source so that the
        /// underlying {@link Ext.dd.StatusProxy} can be updated
        /// </summary>
        public JsString notifyOver(object dd, object e, JsObject data) { return null; }
        /// <summary>
        /// @cfg {String} dropAllowed
        /// The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
        /// </summary>
        public JsString dropAllowed { get; set; }
        /// <summary>
        /// @cfg {String} dropNotAllowed
        /// The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
        /// </summary>
        public JsString dropNotAllowed { get; set; }
        public bool isNotifyTarget { get; set; }
        public bool isTarget { get; set; }
    }
    #endregion
    #region DropZone
    /// <summary>
    /// @class Ext.dd.DropZone
    /// @extends Ext.dd.DropTarget
    /// <p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>
    /// <p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
    /// However a simpler way to allow a DropZone to manage any number of target elements is to configure the
    /// DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
    /// mouse event to see if it has taken place within an element, or class of elements. This is easily done
    /// by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
    /// {@link Ext.DomQuery} selector.</p>
    /// <p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
    /// a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
    /// {@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
    /// of these methods to provide application-specific behaviour for these events to update both
    /// application state, and UI state.</p>
    /// <p>For example to make a GridPanel a cooperating target with the example illustrated in
    /// {@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>
    /// myGridPanel.on('render', function() {
    /// myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
    /// //      If the mouse is over a grid row, return that node. This is
    /// //      provided as the "target" parameter in all "onNodeXXXX" node event handling functions
    /// getTargetFromEvent: function(e) {
    /// return e.getTarget(myGridPanel.getView().rowSelector);
    /// },
    /// //      On entry into a target node, highlight that node.
    /// onNodeEnter : function(target, dd, e, data){
    /// Ext.fly(target).addClass('my-row-highlight-class');
    /// },
    /// //      On exit from a target node, unhighlight that node.
    /// onNodeOut : function(target, dd, e, data){
    /// Ext.fly(target).removeClass('my-row-highlight-class');
    /// },
    /// //      While over a target node, return the default drop allowed class which
    /// //      places a "tick" icon into the drag proxy.
    /// onNodeOver : function(target, dd, e, data){
    /// return Ext.dd.DropZone.prototype.dropAllowed;
    /// },
    /// //      On node drop we can interrogate the target to find the underlying
    /// //      application object that is the real target of the dragged data.
    /// //      In this case, it is a Record in the GridPanel's Store.
    /// //      We can use the data set up by the DragZone's getDragData method to read
    /// //      any data we decided to attach in the DragZone's getDragData method.
    /// onNodeDrop : function(target, dd, e, data){
    /// var rowIndex = myGridPanel.getView().findRowIndex(target);
    /// var r = myGridPanel.getStore().getAt(rowIndex);
    /// Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
    /// ' on Record id ' + r.id);
    /// return true;
    /// }
    /// });
    /// }
    /// </code></pre>
    /// See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
    /// cooperates with this DropZone.
    /// @constructor
    /// @param {Mixed} el The container element
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DropZone
    {
        public DropZone() { }
        /// <summary>
        /// @class Ext.dd.DropZone
        /// @extends Ext.dd.DropTarget
        /// <p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>
        /// <p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
        /// However a simpler way to allow a DropZone to manage any number of target elements is to configure the
        /// DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
        /// mouse event to see if it has taken place within an element, or class of elements. This is easily done
        /// by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
        /// {@link Ext.DomQuery} selector.</p>
        /// <p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
        /// a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
        /// {@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
        /// of these methods to provide application-specific behaviour for these events to update both
        /// application state, and UI state.</p>
        /// <p>For example to make a GridPanel a cooperating target with the example illustrated in
        /// {@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>
        /// myGridPanel.on('render', function() {
        /// myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
        /// //      If the mouse is over a grid row, return that node. This is
        /// //      provided as the "target" parameter in all "onNodeXXXX" node event handling functions
        /// getTargetFromEvent: function(e) {
        /// return e.getTarget(myGridPanel.getView().rowSelector);
        /// },
        /// //      On entry into a target node, highlight that node.
        /// onNodeEnter : function(target, dd, e, data){
        /// Ext.fly(target).addClass('my-row-highlight-class');
        /// },
        /// //      On exit from a target node, unhighlight that node.
        /// onNodeOut : function(target, dd, e, data){
        /// Ext.fly(target).removeClass('my-row-highlight-class');
        /// },
        /// //      While over a target node, return the default drop allowed class which
        /// //      places a "tick" icon into the drag proxy.
        /// onNodeOver : function(target, dd, e, data){
        /// return Ext.dd.DropZone.prototype.dropAllowed;
        /// },
        /// //      On node drop we can interrogate the target to find the underlying
        /// //      application object that is the real target of the dragged data.
        /// //      In this case, it is a Record in the GridPanel's Store.
        /// //      We can use the data set up by the DragZone's getDragData method to read
        /// //      any data we decided to attach in the DragZone's getDragData method.
        /// onNodeDrop : function(target, dd, e, data){
        /// var rowIndex = myGridPanel.getView().findRowIndex(target);
        /// var r = myGridPanel.getStore().getAt(rowIndex);
        /// Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
        /// ' on Record id ' + r.id);
        /// return true;
        /// }
        /// });
        /// }
        /// </code></pre>
        /// See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
        /// cooperates with this DropZone.
        /// @constructor
        /// @param {Mixed} el The container element
        /// @param {Object} config
        /// </summary>
        public DropZone(object el, object config) { }
    }
    #endregion
    #region PanelProxy
    /// <summary>
    /// @class Ext.dd.PanelProxy
    /// A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally
    /// for the Panel's drag drop implementation, and should never need to be created directly.
    /// @constructor
    /// @param panel The {@link Ext.Panel} to proxy for
    /// @param config Configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PanelProxy : JsObject
    {
        public PanelProxy() { }
        public PanelProxy(object panel, object config) { }
        /// <summary>
        /// Gets the proxy's element
        /// @return {Element} The proxy's element
        /// </summary>
        public Element getEl() { return null; }
        /// <summary>
        /// Gets the proxy's ghost element
        /// @return {Element} The proxy's ghost element
        /// </summary>
        public Element getGhost() { return null; }
        /// <summary>
        /// Gets the proxy's element
        /// @return {Element} The proxy's element
        /// </summary>
        public Element getProxy() { return null; }
        /// <summary>
        /// Hides the proxy
        /// </summary>
        public void hide() { }
        /// <summary>
        /// Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel
        /// to keep the proxy sync'd to the Panel's location.
        /// @param {HTMLElement} parentNode The proxy's parent DOM node
        /// @param {HTMLElement} before (optional) The sibling node before which the proxy should be inserted (defaults
        /// to the parent's last child if not specified)
        /// </summary>
        public void moveProxy(HtmlElement parentNode, HtmlElement before) { }
        public void repair(object xy, object callback, object scope) { }
        /// <summary>
        /// Shows the proxy
        /// </summary>
        public void show() { }
        /// <summary>
        /// @cfg {Boolean} insertProxy True to insert a placeholder proxy element while dragging the panel,
        /// false to drag with no proxy (defaults to true).
        /// </summary>
        public bool insertProxy { get; set; }
    }
    #endregion
    #region StatusProxy
    /// <summary>
    /// @class Ext.dd.StatusProxy
    /// A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the
    /// default drag proxy used by all Ext.dd components.
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class StatusProxy
    {
        public StatusProxy() { }
        public void afterRepair() { }
        public void destroy() { }
        /// <summary>
        /// Returns the underlying proxy {@link Ext.Layer}
        /// @return {Ext.Layer} el
        /// </summary>
        public Layer getEl() { return null; }
        /// <summary>
        /// Returns the ghost element
        /// @return {Ext.Element} el
        /// </summary>
        public Element getGhost() { return null; }
        /// <summary>
        /// Hides the proxy
        /// @param {Boolean} clear True to reset the status and clear the ghost contents, false to preserve them
        /// </summary>
        public void hide(bool clear) { }
        /// <summary>
        /// Causes the proxy to return to its position of origin via an animation.  Should be called after an
        /// invalid drop operation by the item being dragged.
        /// @param {Array} xy The XY position of the element ([x, y])
        /// @param {Function} callback The function to call after the repair is complete.
        /// @param {Object} scope The scope (<code>this</code> reference) in which the callback function is executed. Defaults to the browser window.
        /// </summary>
        public void repair(JsArray xy, JsAction callback, JsObject scope) { }
        /// <summary>
        /// Resets the status indicator to the default dropNotAllowed value
        /// @param {Boolean} clearGhost True to also remove all content from the ghost, false to preserve it
        /// </summary>
        public void reset(bool clearGhost) { }
        /// <summary>
        /// Updates the proxy's visual element to indicate the status of whether or not drop is allowed
        /// over the current target element.
        /// @param {String} cssClass The css class for the new drop status indicator image
        /// </summary>
        public void setStatus(JsString cssClass) { }
        /// <summary>
        /// Displays this proxy
        /// </summary>
        public void show() { }
        /// <summary>
        /// @class Ext.dd.StatusProxy
        /// A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the
        /// default drag proxy used by all Ext.dd components.
        /// @constructor
        /// @param {Object} config
        /// </summary>
        public StatusProxy(object config) { }
        /// <summary>
        /// Stops the repair animation if it's currently running
        /// </summary>
        public void stop() { }
        /// <summary>
        /// Force the Layer to sync its shadow and shim positions to the element
        /// </summary>
        public void sync() { }
        /// <summary>
        /// Updates the contents of the ghost element
        /// @param {String/HTMLElement} html The html that will replace the current innerHTML of the ghost element, or a
        /// DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first).
        /// </summary>
        public void update(object html) { }
        /// <summary>
        /// @cfg {String} dropAllowed
        /// The CSS class to apply to the status element when drop is allowed (defaults to "x-dd-drop-ok").
        /// </summary>
        public JsString dropAllowed { get; set; }
        /// <summary>
        /// @cfg {String} dropNotAllowed
        /// The CSS class to apply to the status element when drop is not allowed (defaults to "x-dd-drop-nodrop").
        /// </summary>
        public JsString dropNotAllowed { get; set; }
    }
    #endregion
}
#endregion
#region Ext.direct
namespace Ext.direct
{
    #region JsonProvider
    /// <summary>
    /// @class Ext.direct.JsonProvider
    /// @extends Ext.direct.Provider
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class JsonProvider : Ext.direct.Provider
    {
        public void getEvents(object xhr) { }
        public void parseResponse(object xhr) { }
    }
    #endregion
    #region PollingProvider
    /// <summary>
    /// @class Ext.direct.PollingProvider
    /// @extends Ext.direct.JsonProvider
    /// *
    /// <p>Provides for repetitive polling of the server at distinct {@link #interval intervals}.
    /// The initial request for data originates from the client, and then is responded to by the
    /// server.</p>
    /// <p>All configurations for the PollingProvider should be generated by the server-side
    /// API portion of the Ext.Direct stack.</p>
    /// *
    /// <p>An instance of PollingProvider may be created directly via the new keyword or by simply
    /// specifying <tt>type = 'polling'</tt>.  For example:</p>
    /// <pre><code>
    /// var pollA = new Ext.direct.PollingProvider({
    /// type:'polling',
    /// url: 'php/pollA.php',
    /// });
    /// Ext.Direct.addProvider(pollA);
    /// pollA.disconnect();
    /// Ext.Direct.addProvider(
    /// {
    /// type:'polling',
    /// url: 'php/pollB.php',
    /// id: 'pollB-provider'
    /// }
    /// );
    /// var pollB = Ext.Direct.getProvider('pollB-provider');
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PollingProvider : Ext.direct.JsonProvider
    {
        public PollingProvider() { }
        /// <summary>
        /// Connect to the server-side and begin the polling process. To handle each
        /// response subscribe to the data event.
        /// </summary>
        public void connect() { }
        public PollingProvider(object config) { }
        /// <summary>
        /// Disconnect from the server-side and stop the polling process. The disconnect
        /// event will be fired on a successful disconnect.
        /// </summary>
        public void disconnect() { }
        public new void isConnected() { }
        public void onData(object opt, object success, object xhr) { }
        /// <summary>
        /// @cfg {Number} interval
        /// How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
        /// 3 seconds).
        /// </summary>
        public object interval { get; set; }
        public new object priority { get; set; }
    }
    #endregion
    #region Provider
    /// <summary>
    /// @class Ext.direct.Provider
    /// @extends Ext.util.Observable
    /// <p>Ext.direct.Provider is an abstract class meant to be extended.</p>
    /// <p>For example ExtJs implements the following subclasses:</p>
    /// <pre><code>
    /// Provider
    /// |
    /// +---{@link Ext.direct.JsonProvider JsonProvider}
    /// |
    /// +---{@link Ext.direct.PollingProvider PollingProvider}
    /// |
    /// +---{@link Ext.direct.RemotingProvider RemotingProvider}
    /// </code></pre>
    /// @abstract
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Provider : Ext.util.Observable
    {
        public Provider() { }
        public Provider(object config) { }
        /// <summary>
        /// Returns whether or not the server-side is currently connected.
        /// Abstract method for subclasses to implement.
        /// </summary>
        public void isConnected() { }
        /// <summary>
        /// @cfg {Number} priority
        /// Priority of the request. Lower is higher priority, <tt>0</tt> means "duplex" (always on).
        /// All Providers default to <tt>1</tt> except for PollingProvider which defaults to <tt>3</tt>.
        /// </summary>
        public object priority { get; set; }
    }
    #endregion
    #region RemotingProvider
    /// <summary>
    /// @class Ext.direct.RemotingProvider
    /// @extends Ext.direct.JsonProvider
    /// <p>The {@link Ext.direct.RemotingProvider RemotingProvider} exposes access to
    /// server side methods on the client (a remote procedure call (RPC) type of
    /// connection where the client can initiate a procedure on the server).</p>
    /// <p>This allows for code to be organized in a fashion that is maintainable,
    /// while providing a clear path between client and server, something that is
    /// not always apparent when using URLs.</p>
    /// <p>To accomplish this the server-side needs to describe what classes and methods
    /// are available on the client-side. This configuration will typically be
    /// outputted by the server-side Ext.Direct stack when the API description is built.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class RemotingProvider : Ext.direct.JsonProvider
    {
        public RemotingProvider() { }
        public void combineAndSend() { }
        public void connect() { }
        public RemotingProvider(object config) { }
        public void createMethod(object c, object m) { }
        public void disconnect() { }
        public void doCall(object c, object m, object args) { }
        public void doCallback(object t, object e) { }
        public void doForm(object c, object m, object form, object callback, object scope) { }
        public void doSend(object data) { }
        public void getCallData(object t) { }
        public void getTransaction(object opt) { }
        public void initAPI() { }
        public new void isConnected() { }
        public void onData(object opt, object success, object xhr) { }
        public void processForm(object t) { }
        public void queueTransaction(object t) { }
        /// <summary>
        /// @cfg {Number/Boolean} enableBuffer
        /// <p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method
        /// calls. If a number is specified this is the amount of time in milliseconds
        /// to wait before sending a batched request (defaults to <tt>10</tt>).</p>
        /// <br><p>Calls which are received within the specified timeframe will be
        /// concatenated together and sent in a single request, optimizing the
        /// application by reducing the amount of round trips that have to be made
        /// to the server.</p>
        /// </summary>
        public object enableBuffer { get; set; }
        /// <summary>
        /// @cfg {Number} maxRetries
        /// Number of times to re-attempt delivery on failure of a call. Defaults to <tt>1</tt>.
        /// </summary>
        public object maxRetries { get; set; }
    }
    #endregion
}
#endregion
#region Ext.form
namespace Ext.form
{
    #region Action
    /// <summary>
    /// @class Ext.form.Action
    /// <p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>
    /// <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
    /// the Form needs to perform an action such as submit or load. The Configuration options
    /// listed for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},
    /// {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>
    /// <p>The instance of Action which performed the action is passed to the success
    /// and failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},
    /// {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),
    /// and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and
    /// {@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Action
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class ACTION_TYPES
        {
        }
        /// <summary>
        /// @class Ext.form.Action.DirectLoad
        /// @extends Ext.form.Action.Load
        /// <p>Provides Ext.direct support for loading form data.</p>
        /// <p>This example illustrates usage of Ext.Direct to <b>load</b> a form through Ext.Direct.</p>
        /// <pre><code>
        /// var myFormPanel = new Ext.form.FormPanel({
        /// // configs for FormPanel
        /// title: 'Basic Information',
        /// renderTo: document.body,
        /// width: 300, height: 160,
        /// padding: 10,
        /// // configs apply to child items
        /// defaults: {anchor: '100%'},
        /// defaultType: 'textfield',
        /// items: [{
        /// fieldLabel: 'Name',
        /// name: 'name'
        /// },{
        /// fieldLabel: 'Email',
        /// name: 'email'
        /// },{
        /// fieldLabel: 'Company',
        /// name: 'company'
        /// }],
        /// // configs for BasicForm
        /// api: {
        /// // The server-side method to call for load() requests
        /// load: Profile.getBasicInfo,
        /// // The server-side must mark the submit handler as a 'formHandler'
        /// submit: Profile.updateBasicInfo
        /// },
        /// // specify the order for the passed params
        /// paramOrder: ['uid', 'foo']
        /// });
        /// // load the form
        /// myFormPanel.getForm().load({
        /// // pass 2 arguments to server side getBasicInfo method (len=2)
        /// params: {
        /// foo: 'bar',
        /// uid: 34
        /// }
        /// });
        /// </code></pre>
        /// The data packet sent to the server will resemble something like:
        /// <pre><code>
        /// [
        /// {
        /// "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
        /// "data":[34,"bar"] // note the order of the params
        /// }
        /// ]
        /// </code></pre>
        /// The form will process a data packet returned by the server that is similar
        /// to the following format:
        /// <pre><code>
        /// [
        /// {
        /// "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
        /// "result":{
        /// "success":true,
        /// "data":{
        /// "name":"Fred Flintstone",
        /// "company":"Slate Rock and Gravel",
        /// "email":"fred.flintstone@slaterg.com"
        /// }
        /// }
        /// }
        /// ]
        /// </code></pre>
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class DirectLoad
        {
            public DirectLoad() { }
            public DirectLoad(object form, object opts) { }
            public void getParams() { }
            public void processResponse(object result) { }
            public void run() { }
            public void success(object response, object trans) { }
            public JsString type { get; set; }
        }
        /// <summary>
        /// @class Ext.form.Action.DirectSubmit
        /// @extends Ext.form.Action.Submit
        /// <p>Provides Ext.direct support for submitting form data.</p>
        /// <p>This example illustrates usage of Ext.Direct to <b>submit</b> a form through Ext.Direct.</p>
        /// <pre><code>
        /// var myFormPanel = new Ext.form.FormPanel({
        /// // configs for FormPanel
        /// title: 'Basic Information',
        /// renderTo: document.body,
        /// width: 300, height: 160,
        /// padding: 10,
        /// buttons:[{
        /// text: 'Submit',
        /// handler: function(){
        /// myFormPanel.getForm().submit({
        /// params: {
        /// foo: 'bar',
        /// uid: 34
        /// }
        /// });
        /// }
        /// }],
        /// // configs apply to child items
        /// defaults: {anchor: '100%'},
        /// defaultType: 'textfield',
        /// items: [{
        /// fieldLabel: 'Name',
        /// name: 'name'
        /// },{
        /// fieldLabel: 'Email',
        /// name: 'email'
        /// },{
        /// fieldLabel: 'Company',
        /// name: 'company'
        /// }],
        /// // configs for BasicForm
        /// api: {
        /// // The server-side method to call for load() requests
        /// load: Profile.getBasicInfo,
        /// // The server-side must mark the submit handler as a 'formHandler'
        /// submit: Profile.updateBasicInfo
        /// },
        /// // specify the order for the passed params
        /// paramOrder: ['uid', 'foo']
        /// });
        /// </code></pre>
        /// The data packet sent to the server will resemble something like:
        /// <pre><code>
        /// {
        /// "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
        /// "result":{
        /// "success":true,
        /// "id":{
        /// "extAction":"Profile","extMethod":"updateBasicInfo",
        /// "extType":"rpc","extTID":"6","extUpload":"false",
        /// "name":"Aaron Conran","email":"aaron@extjs.com","company":"Ext JS, LLC"
        /// }
        /// }
        /// }
        /// </code></pre>
        /// The form will process a data packet returned by the server that is similar
        /// to the following:
        /// <pre><code>
        /// // sample success packet (batched requests)
        /// [
        /// {
        /// "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":3,
        /// "result":{
        /// "success":true
        /// }
        /// }
        /// ]
        /// // sample failure packet (one request)
        /// {
        /// "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
        /// "result":{
        /// "errors":{
        /// "email":"already taken"
        /// },
        /// "success":false,
        /// "foo":"bar"
        /// }
        /// }
        /// </code></pre>
        /// Also see the discussion in {@link Ext.form.Action.DirectLoad}.
        /// </summary>
        [JsType(JsMode.Prototype, Export = false)]
        public partial class DirectSubmit
        {
            public DirectSubmit() { }
            public DirectSubmit(object form, object opts) { }
            public void getParams() { }
            public void processResponse(object result) { }
            public void run() { }
            public void success(object response, object trans) { }
            public JsString type { get; set; }
        }
        public Action() { }
        /// <summary>
        /// @class Ext.form.Action
        /// <p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>
        /// <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
        /// the Form needs to perform an action such as submit or load. The Configuration options
        /// listed for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},
        /// {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>
        /// <p>The instance of Action which performed the action is passed to the success
        /// and failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},
        /// {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),
        /// and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and
        /// {@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>
        /// </summary>
        public Action(object form, object options) { }
        public void createCallback(object opts) { }
        public void failure(object response) { }
        public void getMethod() { }
        public void getParams() { }
        public void getUrl(object appendParams) { }
        public void handleResponse(object response) { }
        /// <summary>
        /// @class Ext.form.Action.Load
        /// @extends Ext.form.Action
        /// <p>A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.</p>
        /// <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
        /// {@link Ext.form.BasicForm#load load}ing.</p>
        /// <p><u><b>Response Packet Criteria</b></u></p>
        /// <p>A response packet <b>must</b> contain:
        /// <div class="mdetail-params"><ul>
        /// <li><b><code>success</code></b> property : Boolean</li>
        /// <li><b><code>data</code></b> property : Object</li>
        /// <div class="sub-desc">The <code>data</code> property contains the values of Fields to load.
        /// The individual value object for each Field is passed to the Field's
        /// {@link Ext.form.Field#setValue setValue} method.</div></li>
        /// </ul></div>
        /// <p><u><b>JSON Packets</b></u></p>
        /// <p>By default, response packets are assumed to be JSON, so for the following form load call:<pre><code>
        /// var myFormPanel = new Ext.form.FormPanel({
        /// title: 'Client and routing info',
        /// items: [{
        /// fieldLabel: 'Client',
        /// name: 'clientName'
        /// }, {
        /// fieldLabel: 'Port of loading',
        /// name: 'portOfLoading'
        /// }, {
        /// fieldLabel: 'Port of discharge',
        /// name: 'portOfDischarge'
        /// }]
        /// });
        /// myFormPanel.{@link Ext.form.FormPanel#getForm getForm}().{@link Ext.form.BasicForm#load load}({
        /// url: '/getRoutingInfo.php',
        /// params: {
        /// consignmentRef: myConsignmentRef
        /// },
        /// failure: function(form, action) {
        /// Ext.Msg.alert("Load failed", action.result.errorMessage);
        /// }
        /// });
        /// </code></pre>
        /// a <b>success response</b> packet may look like this:</p><pre><code>
        /// {
        /// success: true,
        /// data: {
        /// clientName: "Fred. Olsen Lines",
        /// portOfLoading: "FXT",
        /// portOfDischarge: "OSL"
        /// }
        /// }</code></pre>
        /// while a <b>failure response</b> packet may look like this:</p><pre><code>
        /// {
        /// success: false,
        /// errorMessage: "Consignment reference not found"
        /// }</code></pre>
        /// <p>Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}'s
        /// callback or event handler methods. The object decoded from this JSON is available in the
        /// {@link Ext.form.Action#result result} property.</p>
        /// </summary>
        public static void Load(object form, object options) { }
        public void processResponse(object response) { }
        public void run(object options) { }
        /// <summary>
        /// @class Ext.form.Action.Submit
        /// @extends Ext.form.Action
        /// <p>A class which handles submission of data from {@link Ext.form.BasicForm Form}s
        /// and processes the returned response.</p>
        /// <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
        /// {@link Ext.form.BasicForm#submit submit}ting.</p>
        /// <p><u><b>Response Packet Criteria</b></u></p>
        /// <p>A response packet may contain:
        /// <div class="mdetail-params"><ul>
        /// <li><b><code>success</code></b> property : Boolean
        /// <div class="sub-desc">The <code>success</code> property is required.</div></li>
        /// <li><b><code>errors</code></b> property : Object
        /// <div class="sub-desc"><div class="sub-desc">The <code>errors</code> property,
        /// which is optional, contains error messages for invalid fields.</div></li>
        /// </ul></div>
        /// <p><u><b>JSON Packets</b></u></p>
        /// <p>By default, response packets are assumed to be JSON, so a typical response
        /// packet may look like this:</p><pre><code>
        /// {
        /// success: false,
        /// errors: {
        /// clientCode: "Client not found",
        /// portOfLoading: "This field must not be null"
        /// }
        /// }</code></pre>
        /// <p>Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}'s callback
        /// or event handler methods. The object decoded from this JSON is available in the
        /// {@link Ext.form.Action#result result} property.</p>
        /// <p>Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:</p><pre><code>
        /// errorReader: new Ext.data.XmlReader({
        /// record : 'field',
        /// success: '@success'
        /// }, [
        /// 'id', 'msg'
        /// ]
        /// )
        /// </code></pre>
        /// <p>then the results may be sent back in XML format:</p><pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;message success="false"&gt;
        /// &lt;errors&gt;
        /// &lt;field&gt;
        /// &lt;id&gt;clientCode&lt;/id&gt;
        /// &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
        /// &lt;/field&gt;
        /// &lt;field&gt;
        /// &lt;id&gt;portOfLoading&lt;/id&gt;
        /// &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
        /// &lt;/field&gt;
        /// &lt;/errors&gt;
        /// &lt;/message&gt;
        /// </code></pre>
        /// <p>Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}'s callback
        /// or event handler methods. The XML document is available in the {@link #errorReader}'s {@link Ext.data.XmlReader#xmlData xmlData} property.</p>
        /// </summary>
        public static void Submit(object form, object options) { }
        public void success(object response) { }
        /// <summary>
        /// The type of action this Action instance performs.
        /// Currently only "submit" and "load" are supported.
        /// @type {String}
        /// </summary>
        public JsString type { get; set; }
    }
    #endregion
    #region BasicForm
    /// <summary>
    /// @class Ext.form.BasicForm
    /// @extends Ext.util.Observable
    /// <p>Encapsulates the DOM &lt;form> element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides
    /// input field management, validation, submission, and form loading services.</p>
    /// <p>By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.
    /// To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.</p>
    /// <p><b><u>File Uploads</u></b></p>
    /// <p>{@link #fileUpload File uploads} are not performed using Ajax submission, that
    /// is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
    /// manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
    /// <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
    /// to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
    /// but removed after the return data has been gathered.</p>
    /// <p>The server response is parsed by the browser to create the document for the IFRAME. If the
    /// server is using JSON to send the return object, then the
    /// <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
    /// must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
    /// <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
    /// "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
    /// <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
    /// is created containing a <tt>responseText</tt> property in order to conform to the
    /// requirements of event handlers and callbacks.</p>
    /// <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
    /// and some server technologies (notably JEE) may require some custom processing in order to
    /// retrieve parameter names and parameter values from the packet content.</p>
    /// @constructor
    /// @param {Mixed} el The form element or its id
    /// @param {Object} config Configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BasicForm : Ext.util.Observable
    {
        public BasicForm() { }
        /// <summary>
        /// Add Ext.form Components to this form's Collection. This does not result in rendering of
        /// the passed Component, it just enables the form to validate Fields, and distribute values to
        /// Fields.
        /// <p><b>You will not usually call this function. In order to be rendered, a Field must be added
        /// to a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.
        /// The FormPanel to which the field is added takes care of adding the Field to the BasicForm's
        /// collection.</b></p>
        /// @param {Field} field1
        /// @param {Field} field2 (optional)
        /// @param {Field} etc (optional)
        /// @return {BasicForm} this
        /// </summary>
        public void add() { }
        public void afterAction(object action, object success) { }
        /// <summary>
        /// Calls {@link Ext#applyIf} for all field in this form with the passed object.
        /// @param {Object} values
        /// @return {BasicForm} this
        /// </summary>
        public void applyIfToFields(object o) { }
        /// <summary>
        /// Calls {@link Ext#apply} for all fields in this form with the passed object.
        /// @param {Object} values
        /// @return {BasicForm} this
        /// </summary>
        public void applyToFields(object o) { }
        public void beforeAction(object action) { }
        public void callFieldMethod(object fnName, object args) { }
        /// <summary>
        /// Removes all fields from the collection that have been destroyed.
        /// </summary>
        public void cleanDestroyed() { }
        /// <summary>
        /// Clears all invalid messages in this form.
        /// @return {BasicForm} this
        /// </summary>
        public void clearInvalid() { }
        public BasicForm(object el, object config) { }
        /// <summary>
        /// Destroys this object.
        /// @private
        /// @param {Boolean} bound true if the object is bound to a form panel. If this is the case
        /// the FormPanel will take care of destroying certain things, so we're just doubling up.
        /// </summary>
        public void destroy(bool bound) { }
        /// <summary>
        /// Performs a predefined action ({@link Ext.form.Action.Submit} or
        /// {@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}
        /// to perform application-specific processing.
        /// @param {String/Object} actionName The name of the predefined action type,
        /// or instance of {@link Ext.form.Action} to perform.
        /// @param {Object} options (optional) The options to pass to the {@link Ext.form.Action}.
        /// All of the config options listed below are supported by both the
        /// {@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
        /// actions unless otherwise noted (custom actions could also accept
        /// other config options):<ul>
        /// *
        /// <li><b>url</b> : String<div class="sub-desc">The url for the action (defaults
        /// to the form's {@link #url}.)</div></li>
        /// *
        /// <li><b>method</b> : String<div class="sub-desc">The form method to use (defaults
        /// to the form's method, or POST if not defined)</div></li>
        /// *
        /// <li><b>params</b> : String/Object<div class="sub-desc"><p>The params to pass
        /// (defaults to the form's baseParams, or none if not defined)</p>
        /// <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>
        /// *
        /// <li><b>headers</b> : Object<div class="sub-desc">Request headers to set for the action
        /// (defaults to the form's default headers)</div></li>
        /// *
        /// <li><b>success</b> : Function<div class="sub-desc">The callback that will
        /// be invoked after a successful response (see top of
        /// {@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
        /// for a description of what constitutes a successful response).
        /// The function is passed the following parameters:<ul>
        /// <li><tt>form</tt> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
        /// <li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
        /// <div class="sub-desc">The action object contains these properties of interest:<ul>
        /// <li><tt>{@link Ext.form.Action#response response}</tt></li>
        /// <li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
        /// <li><tt>{@link Ext.form.Action#type type}</tt></li>
        /// </ul></div></li></ul></div></li>
        /// *
        /// <li><b>failure</b> : Function<div class="sub-desc">The callback that will be invoked after a
        /// failed transaction attempt. The function is passed the following parameters:<ul>
        /// <li><tt>form</tt> : The {@link Ext.form.BasicForm} that requested the action.</li>
        /// <li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
        /// <div class="sub-desc">The action object contains these properties of interest:<ul>
        /// <li><tt>{@link Ext.form.Action#failureType failureType}</tt></li>
        /// <li><tt>{@link Ext.form.Action#response response}</tt></li>
        /// <li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
        /// <li><tt>{@link Ext.form.Action#type type}</tt></li>
        /// </ul></div></li></ul></div></li>
        /// *
        /// <li><b>scope</b> : Object<div class="sub-desc">The scope in which to call the
        /// callback functions (The <tt>this</tt> reference for the callback functions).</div></li>
        /// *
        /// <li><b>clientValidation</b> : Boolean<div class="sub-desc">Submit Action only.
        /// Determines whether a Form's fields are validated in a final call to
        /// {@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to <tt>false</tt>
        /// to prevent this. If undefined, pre-submission field validation is performed.</div></li></ul>
        /// *
        /// @return {BasicForm} this
        /// </summary>
        public void doAction(object action, JsObject options) { }
        /// <summary>
        /// Find a {@link Ext.form.Field} in this form.
        /// @param {String} id The value to search for (specify either a {@link Ext.Component#id id},
        /// {@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName}).
        /// @return Field
        /// </summary>
        public void findField(JsString id) { }
        /// <summary>
        /// Get the HTML form Element
        /// @return Ext.Element
        /// </summary>
        public void getEl() { }
        /// <summary>
        /// Retrieves the fields in the form as a set of key/value pairs, using the {@link Ext.form.Field#getValue getValue()} method.
        /// If multiple fields exist with the same name they are returned as an array.
        /// @param {Boolean} dirtyOnly (optional) True to return only fields that are dirty.
        /// @return {Object} The values in the form
        /// </summary>
        public JsObject getFieldValues(bool dirtyOnly) { return null; }
        /// <summary>
        /// <p>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
        /// If multiple fields exist with the same name they are returned as an array.</p>
        /// <p><b>Note:</b> The values are collected from all enabled HTML input elements within the form, <u>not</u> from
        /// the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the
        /// value can potentially be the emptyText of a field.</p>
        /// @param {Boolean} asString (optional) Pass true to return the values as a string. (defaults to false, returning an Object)
        /// @return {String/Object}
        /// </summary>
        public void getValues(bool asString) { }
        public void initEl(object el) { }
        /// <summary>
        /// <p>Returns true if any fields in this form have changed from their original values.</p>
        /// <p>Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the
        /// Fields' <i>original values</i> are updated when the values are loaded by {@link #setValues}
        /// or {@link #loadRecord}.</p>
        /// @return Boolean
        /// </summary>
        public void isDirty() { }
        /// <summary>
        /// Returns true if client-side validation on the form is successful.
        /// @return Boolean
        /// </summary>
        public void isValid() { }
        /// <summary>
        /// Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}.
        /// @param {Object} options The options to pass to the action (see {@link #doAction} for details)
        /// @return {BasicForm} this
        /// </summary>
        public void load(JsObject options) { }
        /// <summary>
        /// Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the
        /// {@link Ext.data.Record#data record data}.
        /// See also {@link #trackResetOnLoad}.
        /// @param {Record} record The record to load
        /// @return {BasicForm} this
        /// </summary>
        public void loadRecord(object record) { }
        /// <summary>
        /// Mark fields in this form invalid in bulk.
        /// @param {Array/Object} errors Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}
        /// @return {BasicForm} this
        /// </summary>
        public void markInvalid(object errors) { }
        public void onSubmit(object e) { }
        /// <summary>
        /// Removes a field from the items collection (does NOT remove its markup).
        /// @param {Field} field
        /// @return {BasicForm} this
        /// </summary>
        public void remove(object field) { }
        /// <summary>
        /// Iterates through the {@link Ext.form.Field Field}s which have been {@link #add add}ed to this BasicForm,
        /// checks them for an id attribute, and calls {@link Ext.form.Field#applyToMarkup} on the existing dom element with that id.
        /// @return {BasicForm} this
        /// </summary>
        public void render() { }
        /// <summary>
        /// Resets this form.
        /// @return {BasicForm} this
        /// </summary>
        public void reset() { }
        /// <summary>
        /// Set values for fields in this form in bulk.
        /// @param {Array/Object} values Either an array in the form:<pre><code>
        /// [{id:'clientName', value:'Fred. Olsen Lines'},
        /// {id:'portOfLoading', value:'FXT'},
        /// {id:'portOfDischarge', value:'OSL'} ]</code></pre>
        /// or an object hash of the form:<pre><code>
        /// {
        /// clientName: 'Fred. Olsen Lines',
        /// portOfLoading: 'FXT',
        /// portOfDischarge: 'OSL'
        /// }</code></pre>
        /// @return {BasicForm} this
        /// </summary>
        public void setValues(object values) { }
        /// <summary>
        /// Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.
        /// @param {Object} options The options to pass to the action (see {@link #doAction} for details).<br>
        /// <p><b>Note:</b> this is ignored when using the {@link #standardSubmit} option.</p>
        /// <p>The following code:</p><pre><code>
        /// myFormPanel.getForm().submit({
        /// clientValidation: true,
        /// url: 'updateConsignment.php',
        /// params: {
        /// newStatus: 'delivered'
        /// },
        /// success: function(form, action) {
        /// Ext.Msg.alert('Success', action.result.msg);
        /// },
        /// failure: function(form, action) {
        /// switch (action.failureType) {
        /// case Ext.form.Action.CLIENT_INVALID:
        /// Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        /// break;
        /// case Ext.form.Action.CONNECT_FAILURE:
        /// Ext.Msg.alert('Failure', 'Ajax communication failed');
        /// break;
        /// case Ext.form.Action.SERVER_INVALID:
        /// Ext.Msg.alert('Failure', action.result.msg);
        /// }
        /// }
        /// });
        /// </code></pre>
        /// would process the following server response for a successful submission:<pre><code>
        /// {
        /// "success":true, // note this is Boolean, not string
        /// "msg":"Consignment updated"
        /// }
        /// </code></pre>
        /// and the following server response for a failed submission:<pre><code>
        /// {
        /// "success":false, // note this is Boolean, not string
        /// "msg":"You do not have permission to perform this operation"
        /// }
        /// </code></pre>
        /// @return {BasicForm} this
        /// </summary>
        public void submit(JsObject options) { }
        /// <summary>
        /// Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block.
        /// @param {Record} record The record to edit
        /// @return {BasicForm} this
        /// </summary>
        public void updateRecord(object record) { }
        public object activeAction { get; set; }
        /// <summary>
        /// @cfg {Boolean} paramsAsHash Only used for the <code>{@link #api}</code>
        /// <code>load</code> configuration. Send parameters as a collection of named
        /// arguments (defaults to <tt>false</tt>). Providing a
        /// <tt>{@link #paramOrder}</tt> nullifies this configuration.
        /// </summary>
        public bool paramsAsHash { get; set; }
        /// <summary>
        /// @cfg {Number} timeout Timeout for form actions in seconds (default is 30 seconds).
        /// </summary>
        public JsNumber timeout { get; set; }
        /// <summary>
        /// @cfg {Boolean} trackResetOnLoad If set to <tt>true</tt>, {@link #reset}() resets to the last loaded
        /// or {@link #setValues}() data instead of when the form was first created.  Defaults to <tt>false</tt>.
        /// </summary>
        public bool trackResetOnLoad { get; set; }
        /// <summary>
        /// @cfg {String} waitTitle
        /// The default title to show for the waiting message box (defaults to <tt>'Please Wait...'</tt>)
        /// </summary>
        public JsString waitTitle { get; set; }
    }
    #endregion
    #region Checkbox
    /// <summary>
    /// @class Ext.form.Checkbox
    /// @extends Ext.form.Field
    /// Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.
    /// @constructor
    /// Creates a new Checkbox
    /// @param {Object} config Configuration options
    /// @xtype checkbox
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Checkbox : Ext.form.Field
    {
        /// <summary>
        /// Returns the checked state of the checkbox.
        /// @return {Boolean} True if checked, else false
        /// </summary>
        public bool getValue() { return false; }
        public new void initComponent() { }
        public new void initEvents() { }
        public new void initValue() { }
        public void onClick() { }
        public void onDestroy() { }
        public new void onRender(object ct, object position) { }
        public void onResize() { }
        /// <summary>
        /// Sets the checked state of the checkbox, fires the 'check' event, and calls a
        /// <code>{@link #handler}</code> (if configured).
        /// @param {Boolean/String} checked The following values will check the checkbox:
        /// <code>true, 'true', '1', or 'on'</code>. Any other value will uncheck the checkbox.
        /// @return {Ext.form.Field} this
        /// </summary>
        public new Field setValue(object v) { return null; }
        public JsString actionMode { get; set; }
        /// <summary>
        /// @cfg {String} boxLabel The text that appears beside the checkbox
        /// </summary>
        public JsString boxLabel { get; set; }
        /// <summary>
        /// @cfg {Boolean} checked <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
        /// </summary>
        public bool @checked { get; set; }
        /// <summary>
        /// @cfg {String} fieldClass The default CSS class for the checkbox (defaults to 'x-form-field')
        /// </summary>
        public new JsString fieldClass { get; set; }
    }
    #endregion
    #region CheckboxGroup
    /// <summary>
    /// @class Ext.form.CheckboxGroup
    /// @extends Ext.form.Field
    /// <p>A grouping container for {@link Ext.form.Checkbox} controls.</p>
    /// <p>Sample usage:</p>
    /// <pre><code>
    /// var myCheckboxGroup = new Ext.form.CheckboxGroup({
    /// id:'myGroup',
    /// xtype: 'checkboxgroup',
    /// fieldLabel: 'Single Column',
    /// itemCls: 'x-check-group-alt',
    /// // Put all controls in a single column with width 100%
    /// columns: 1,
    /// items: [
    /// {boxLabel: 'Item 1', name: 'cb-col-1'},
    /// {boxLabel: 'Item 2', name: 'cb-col-2', checked: true},
    /// {boxLabel: 'Item 3', name: 'cb-col-3'}
    /// ]
    /// });
    /// </code></pre>
    /// @constructor
    /// Creates a new CheckboxGroup
    /// @param {Object} config Configuration options
    /// @xtype checkboxgroup
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CheckboxGroup : Ext.form.Field
    {
        public new void afterRender() { }
        public void beforeDestroy() { }
        public void doLayout() { }
        /// <summary>
        /// @private
        /// Convenience function which passes the given function to every item in the composite
        /// @param {Function} fn The function to call
        /// @param {Object} scope Optional scope object
        /// </summary>
        public void eachItem(JsAction fn, JsObject scope) { }
        public void fireChecked() { }
        public void getBox(object id) { }
        /// <summary>
        /// Runs CheckboxGroup's validations and returns an array of any errors. The only error by default
        /// is if allowBlank is set to true and no items are checked.
        /// @return {Array} Array of all validation errors
        /// </summary>
        public new JsArray getErrors() { return null; }
        /// <summary>
        /// Gets an array of the selected {@link Ext.form.Checkbox} in the group.
        /// @return {Array} An array of the selected checkboxes.
        /// </summary>
        public JsArray getValue() { return null; }
        public new void initComponent() { }
        public new void initValue() { }
        public void isDirty() { }
        public void onDisable() { }
        public void onEnable() { }
        public new void onRender(object ct, object position) { }
        public void onResize(object w, object h) { }
        /// <summary>
        /// @private
        /// Sets the values of one or more of the items within the CheckboxGroup
        /// @param {String|Array|Object} id Can take multiple forms. Can be optionally:
        /// <ul>
        /// <li>An ID string to be used with a second argument</li>
        /// <li>An array of the form ['some', 'list', 'of', 'ids', 'to', 'mark', 'checked']</li>
        /// <li>An array in the form [true, true, false, true, false] etc, where each item relates to the check status of
        /// the checkbox at the same index</li>
        /// <li>An object containing ids of the checkboxes as keys and check values as properties</li>
        /// </ul>
        /// @param {String} value The value to set the field to if the first argument was a string
        /// </summary>
        public void onSetValue(object id, JsString value) { }
        public new void reset() { }
        public void setReadOnly(object readOnly) { }
        /// <summary>
        /// {@link Ext.form.Checkbox#setValue Set the value(s)} of an item or items
        /// in the group. Examples illustrating how this method may be called:
        /// <pre><code>
        /// // call with name and value
        /// myCheckboxGroup.setValue('cb-col-1', true);
        /// // call with an array of boolean values
        /// myCheckboxGroup.setValue([true, false, false]);
        /// // call with an object literal specifying item:value pairs
        /// myCheckboxGroup.setValue({
        /// 'cb-col-2': false,
        /// 'cb-col-3': true
        /// });
        /// // use comma separated string to set items with name to true (checked)
        /// myCheckboxGroup.setValue('cb-col-1,cb-col-3');
        /// </code></pre>
        /// See {@link Ext.form.Checkbox#setValue} for additional information.
        /// @param {Mixed} id The checkbox to check, or as described by example shown.
        /// @param {Boolean} value (optional) The value to set the item.
        /// @return {Ext.form.CheckboxGroup} this
        /// </summary>
        public CheckboxGroup setValue() { return null; }
        public void setValueForItem(object val) { }
        /// <summary>
        /// @cfg {Boolean} allowBlank False to validate that at least one item in the group is checked (defaults to true).
        /// If no items are selected at validation time, {@link @blankText} will be used as the error text.
        /// </summary>
        public bool allowBlank { get; set; }
        /// <summary>
        /// @cfg {String} blankText Error text to display if the {@link #allowBlank} validation fails (defaults to "You must
        /// select at least one item in this group")
        /// </summary>
        public JsString blankText { get; set; }
        /// <summary>
        /// @cfg {String/Number/Array} columns Specifies the number of columns to use when displaying grouped
        /// checkbox/radio controls using automatic layout.  This config can take several types of values:
        /// <ul><li><b>'auto'</b> : <p class="sub-desc">The controls will be rendered one per column on one row and the width
        /// of each column will be evenly distributed based on the width of the overall field container. This is the default.</p></li>
        /// <li><b>Number</b> : <p class="sub-desc">If you specific a number (e.g., 3) that number of columns will be
        /// created and the contained controls will be automatically distributed based on the value of {@link #vertical}.</p></li>
        /// <li><b>Array</b> : Object<p class="sub-desc">You can also specify an array of column widths, mixing integer
        /// (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will
        /// be rendered first, then any float values will be calculated as a percentage of the remaining space. Float
        /// values do not have to add up to 1 (100%) although if you want the controls to take up the entire field
        /// container you should do so.</p></li></ul>
        /// </summary>
        public object columns { get; set; }
        public JsString defaultType { get; set; }
        public JsString groupCls { get; set; }
        /// <summary>
        /// @cfg {Boolean} vertical True to distribute contained controls across columns, completely filling each column
        /// top to bottom before starting on the next column.  The number of controls in each column will be automatically
        /// calculated to keep columns as even as possible.  The default value is false, so that controls will be added
        /// to columns one at a time, completely filling each row left to right before starting on the next row.
        /// </summary>
        public bool vertical { get; set; }
    }
    #endregion
    #region ComboBox
    /// <summary>
    /// @class Ext.form.ComboBox
    /// @extends Ext.form.TriggerField
    /// <p>A combobox control with support for autocomplete, remote-loading, paging and many other features.</p>
    /// <p>A ComboBox works in a similar manner to a traditional HTML &lt;select> field. The difference is
    /// that to submit the {@link #valueField}, you must specify a {@link #hiddenName} to create a hidden input
    /// field to hold the value of the valueField. The <i>{@link #displayField}</i> is shown in the text field
    /// which is named according to the {@link #name}.</p>
    /// <p><b><u>Events</u></b></p>
    /// <p>To do something when something in ComboBox is selected, configure the select event:<pre><code>
    /// var cb = new Ext.form.ComboBox({
    /// // all of your config options
    /// listeners:{
    /// scope: yourScope,
    /// 'select': yourFunction
    /// }
    /// });
    /// // Alternatively, you can assign events after the object is created:
    /// var cb = new Ext.form.ComboBox(yourOptions);
    /// cb.on('select', yourFunction, yourScope);
    /// </code></pre></p>
    /// *
    /// <p><b><u>ComboBox in Grid</u></b></p>
    /// <p>If using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a {@link Ext.grid.Column#renderer renderer}
    /// will be needed to show the displayField when the editor is not active.  Set up the renderer manually, or implement
    /// a reusable render, for example:<pre><code>
    /// // create reusable renderer
    /// Ext.util.Format.comboRenderer = function(combo){
    /// return function(value){
    /// var record = combo.findRecord(combo.{@link #valueField}, value);
    /// return record ? record.get(combo.{@link #displayField}) : combo.{@link #valueNotFoundText};
    /// }
    /// }
    /// // create the combo instance
    /// var combo = new Ext.form.ComboBox({
    /// {@link #typeAhead}: true,
    /// {@link #triggerAction}: 'all',
    /// {@link #lazyRender}:true,
    /// {@link #mode}: 'local',
    /// {@link #store}: new Ext.data.ArrayStore({
    /// id: 0,
    /// fields: [
    /// 'myId',
    /// 'displayText'
    /// ],
    /// data: [[1, 'item1'], [2, 'item2']]
    /// }),
    /// {@link #valueField}: 'myId',
    /// {@link #displayField}: 'displayText'
    /// });
    /// // snippet of column model used within grid
    /// var cm = new Ext.grid.ColumnModel([{
    /// ...
    /// },{
    /// header: "Some Header",
    /// dataIndex: 'whatever',
    /// width: 130,
    /// editor: combo, // specify reference to combo instance
    /// renderer: Ext.util.Format.comboRenderer(combo) // pass combo instance to reusable renderer
    /// },
    /// ...
    /// ]);
    /// </code></pre></p>
    /// *
    /// <p><b><u>Filtering</u></b></p>
    /// <p>A ComboBox {@link #doQuery uses filtering itself}, for information about filtering the ComboBox
    /// store manually see <tt>{@link #lastQuery}</tt>.</p>
    /// @constructor
    /// Create a new ComboBox.
    /// @param {Object} config Configuration options
    /// @xtype combo
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ComboBox : Ext.form.TriggerField
    {
        public void assertValue() { }
        public void beforeBlur() { }
        public void bindStore(object store, object initial) { }
        /// <summary>
        /// Clears any text/value currently set in the field
        /// </summary>
        public void clearValue() { }
        /// <summary>
        /// Hides the dropdown list if it is currently expanded. Fires the {@link #collapse} event on completion.
        /// </summary>
        public void collapse() { }
        public void collapseIf(object e) { }
        /// <summary>
        /// Execute a query to filter the dropdown list.  Fires the {@link #beforequery} event prior to performing the
        /// query allowing the query action to be canceled if needed.
        /// @param {String} query The SQL query to execute
        /// @param {Boolean} forceAll <tt>true</tt> to force the query to execute even if there are currently fewer
        /// characters in the field than the minimum specified by the <tt>{@link #minChars}</tt> config option.  It
        /// also clears any filter previously saved in the current store (defaults to <tt>false</tt>)
        /// </summary>
        public void doQuery(object q, bool forceAll) { }
        public void doResize(object w) { }
        /// <summary>
        /// Expands the dropdown list if it is currently hidden. Fires the {@link #expand} event on completion.
        /// </summary>
        public void expand() { }
        public void findRecord(object prop, object value) { }
        public new void fireKey(object e) { }
        /// <summary>
        /// <p>Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.</p>
        /// A custom implementation may be provided as a configuration option if the floating list needs to be rendered
        /// to a different Element. An example might be rendering the list inside a Menu so that clicking
        /// the list does not hide the Menu:<pre><code>
        /// var store = new Ext.data.ArrayStore({
        /// autoDestroy: true,
        /// fields: ['initials', 'fullname'],
        /// data : [
        /// ['FF', 'Fred Flintstone'],
        /// ['BR', 'Barney Rubble']
        /// ]
        /// });
        /// var combo = new Ext.form.ComboBox({
        /// store: store,
        /// displayField: 'fullname',
        /// emptyText: 'Select a name...',
        /// forceSelection: true,
        /// getListParent: function() {
        /// return this.el.up('.x-menu');
        /// },
        /// iconCls: 'no-icon', //use iconCls if placing within menu to shift to right side of menu
        /// mode: 'local',
        /// selectOnFocus: true,
        /// triggerAction: 'all',
        /// typeAhead: true,
        /// width: 135
        /// });
        /// var menu = new Ext.menu.Menu({
        /// id: 'mainMenu',
        /// items: [
        /// combo // A Field in a Menu
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public void getListParent() { }
        public void getName() { }
        public void getParams(object q) { }
        public void getParentZIndex() { }
        /// <summary>
        /// Returns the store associated with this combo.
        /// @return {Ext.data.Store} The store
        /// </summary>
        public Store getStore() { return null; }
        /// <summary>
        /// Returns the currently selected field value or empty string if no value is set.
        /// @return {String} value The selected value
        /// </summary>
        public JsString getValue() { return null; }
        public void getZIndex(object listParent) { }
        public new void initComponent() { }
        public new void initEvents() { }
        public void initList() { }
        public void initQuery() { }
        public new void initValue() { }
        /// <summary>
        /// Returns true if the dropdown list is expanded, else false.
        /// </summary>
        public void isExpanded() { }
        public void onBeforeLoad() { }
        public new void onDestroy() { }
        public new void onDisable() { }
        public new void onEnable() { }
        public new void onKeyUp(object e) { }
        public void onLoad() { }
        public new void onRender(object ct, object position) { }
        public new void onResize(object w, object h) { }
        public void onSelect(object record, object index) { }
        public void onTriggerClick() { }
        public void onTypeAhead() { }
        public void onViewClick(object doFocus) { }
        public void onViewMove(object e, object t) { }
        public void onViewOver(object e, object t) { }
        public new void postBlur() { }
        public new void reset() { }
        public void restrictHeight() { }
        /// <summary>
        /// Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
        /// The store must be loaded and the list expanded for this function to work, otherwise use setValue.
        /// @param {Number} index The zero-based index of the list item to select
        /// @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
        /// selected item if it is not currently in view (defaults to true)
        /// </summary>
        public void select(JsNumber index, bool scrollIntoView) { }
        /// <summary>
        /// Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
        /// The store must be loaded and the list expanded for this function to work, otherwise use setValue.
        /// @param {String} value The data value of the item to select
        /// @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
        /// selected item if it is not currently in view (defaults to true)
        /// @return {Boolean} True if the value matched an item in the list, else false
        /// </summary>
        public bool selectByValue(object v, bool scrollIntoView) { return false; }
        public void selectNext() { }
        public void selectPrev() { }
        /// <summary>
        /// Sets the specified value into the field.  If the value finds a match, the corresponding record text
        /// will be displayed in the field.  If the value does not match the data value of an existing item,
        /// and the valueNotFoundText config option is defined, it will be displayed as the default field text.
        /// Otherwise the field will be blank (although the value will still be set).
        /// @param {String} value The value to match
        /// @return {Ext.form.Field} this
        /// </summary>
        public new Field setValue(object v) { return null; }
        public void validateBlur() { }
        /// <summary>
        /// @cfg {String} allQuery The text query to send to the server to return all records for the list
        /// with no filtering (defaults to '')
        /// </summary>
        public JsString allQuery { get; set; }
        /// <summary>
        /// @cfg {Boolean} autoSelect <tt>true</tt> to select the first result gathered by the data store (defaults
        /// to <tt>true</tt>).  A false value would require a manual selection from the dropdown list to set the components value
        /// unless the value of ({@link #typeAheadDelay}) were true.
        /// </summary>
        public bool autoSelect { get; set; }
        /// <summary>
        /// @cfg {Boolean} clearFilterOnReset <tt>true</tt> to clear any filters on the store (when in local mode) when reset is called
        /// (defaults to <tt>true</tt>)
        /// </summary>
        public bool clearFilterOnReset { get; set; }
        /// <summary>
        /// @cfg {Boolean} forceSelection <tt>true</tt> to restrict the selected value to one of the values in the list,
        /// <tt>false</tt> to allow the user to set arbitrary text into the field (defaults to <tt>false</tt>)
        /// </summary>
        public bool forceSelection { get; set; }
        /// <summary>
        /// @cfg {Number} handleHeight The height in pixels of the dropdown list resize handle if
        /// <tt>{@link #resizable} = true</tt> (defaults to <tt>8</tt>)
        /// </summary>
        public JsNumber handleHeight { get; set; }
        /// <summary>
        /// @cfg {Boolean} lazyInit <tt>true</tt> to not initialize the list for this combo until the field is focused
        /// (defaults to <tt>true</tt>)
        /// </summary>
        public bool lazyInit { get; set; }
        /// <summary>
        /// @cfg {String/Array} listAlign A valid anchor position value. See <tt>{@link Ext.Element#alignTo}</tt> for details
        /// on supported anchor positions and offsets. To specify x/y offsets as well, this value
        /// may be specified as an Array of <tt>{@link Ext.Element#alignTo}</tt> method arguments.</p>
        /// <pre><code>[ 'tl-bl?', [6,0] ]</code></pre>(defaults to <tt>'tl-bl?'</tt>)
        /// </summary>
        public object listAlign { get; set; }
        /// <summary>
        /// @cfg {String} listClass The CSS class to add to the predefined <tt>'x-combo-list'</tt> class
        /// applied the dropdown list element (defaults to '').
        /// </summary>
        public JsString listClass { get; set; }
        /// <summary>
        /// @cfg {String} listEmptyText The empty text to display in the data view if no items are found.
        /// (defaults to '')
        /// </summary>
        public JsString listEmptyText { get; set; }
        /// <summary>
        /// @cfg {String} loadingText The text to display in the dropdown list while data is loading.  Only applies
        /// when <tt>{@link #mode} = 'remote'</tt> (defaults to <tt>'Loading...'</tt>)
        /// </summary>
        public JsString loadingText { get; set; }
        /// <summary>
        /// @cfg {Number} maxHeight The maximum height in pixels of the dropdown list before scrollbars are shown
        /// (defaults to <tt>300</tt>)
        /// </summary>
        public JsNumber maxHeight { get; set; }
        /// <summary>
        /// @cfg {Number} minChars The minimum number of characters the user must type before autocomplete and
        /// {@link #typeAhead} activate (defaults to <tt>4</tt> if <tt>{@link #mode} = 'remote'</tt> or <tt>0</tt> if
        /// <tt>{@link #mode} = 'local'</tt>, does not apply if
        /// <tt>{@link Ext.form.TriggerField#editable editable} = false</tt>).
        /// </summary>
        public JsNumber minChars { get; set; }
        /// <summary>
        /// @cfg {Number} minHeight The minimum height in pixels of the dropdown list when the list is constrained by its
        /// distance to the viewport edges (defaults to <tt>90</tt>)
        /// </summary>
        public JsNumber minHeight { get; set; }
        /// <summary>
        /// @cfg {Number} minListWidth The minimum width of the dropdown list in pixels (defaults to <tt>70</tt>, will
        /// be ignored if <tt>{@link #listWidth}</tt> has a higher value)
        /// </summary>
        public JsNumber minListWidth { get; set; }
        /// <summary>
        /// @cfg {String} mode Acceptable values are:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>'remote'</tt></b> : <b>Default</b>
        /// <p class="sub-desc">Automatically loads the <tt>{@link #store}</tt> the <b>first</b> time the trigger
        /// is clicked. If you do not want the store to be automatically loaded the first time the trigger is
        /// clicked, set to <tt>'local'</tt> and manually load the store.  To force a requery of the store
        /// <b>every</b> time the trigger is clicked see <tt>{@link #lastQuery}</tt>.</p></li>
        /// <li><b><tt>'local'</tt></b> :
        /// <p class="sub-desc">ComboBox loads local data</p>
        /// <pre><code>
        /// var combo = new Ext.form.ComboBox({
        /// renderTo: document.body,
        /// mode: 'local',
        /// store: new Ext.data.ArrayStore({
        /// id: 0,
        /// fields: [
        /// 'myId',  // numeric value is the key
        /// 'displayText'
        /// ],
        /// data: [[1, 'item1'], [2, 'item2']]  // data is local
        /// }),
        /// valueField: 'myId',
        /// displayField: 'displayText',
        /// triggerAction: 'all'
        /// });
        /// </code></pre></li>
        /// </ul></div>
        /// </summary>
        public JsString mode { get; set; }
        /// <summary>
        /// @cfg {Number} pageSize If greater than <tt>0</tt>, a {@link Ext.PagingToolbar} is displayed in the
        /// footer of the dropdown list and the {@link #doQuery filter queries} will execute with page start and
        /// {@link Ext.PagingToolbar#pageSize limit} parameters. Only applies when <tt>{@link #mode} = 'remote'</tt>
        /// (defaults to <tt>0</tt>).
        /// </summary>
        public JsNumber pageSize { get; set; }
        /// <summary>
        /// @cfg {Number} queryDelay The length of time in milliseconds to delay between the start of typing and
        /// sending the query to filter the dropdown list (defaults to <tt>500</tt> if <tt>{@link #mode} = 'remote'</tt>
        /// or <tt>10</tt> if <tt>{@link #mode} = 'local'</tt>)
        /// </summary>
        public JsNumber queryDelay { get; set; }
        /// <summary>
        /// @cfg {String} queryParam Name of the query ({@link Ext.data.Store#baseParam baseParam} name for the store)
        /// as it will be passed on the querystring (defaults to <tt>'query'</tt>)
        /// </summary>
        public JsString queryParam { get; set; }
        /// <summary>
        /// @cfg {Boolean} resizable <tt>true</tt> to add a resize handle to the bottom of the dropdown list
        /// (creates an {@link Ext.Resizable} with 'se' {@link Ext.Resizable#pinned pinned} handles).
        /// Defaults to <tt>false</tt>.
        /// </summary>
        public bool resizable { get; set; }
        /// <summary>
        /// @cfg {String} selectedClass CSS class to apply to the selected item in the dropdown list
        /// (defaults to <tt>'x-combo-selected'</tt>)
        /// </summary>
        public JsString selectedClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} selectOnFocus <tt>true</tt> to select any existing text in the field immediately on focus.
        /// Only applies when <tt>{@link Ext.form.TriggerField#editable editable} = true</tt> (defaults to
        /// <tt>false</tt>).
        /// </summary>
        public new bool selectOnFocus { get; set; }
        /// <summary>
        /// @cfg {Boolean/String} shadow <tt>true</tt> or <tt>"sides"</tt> for the default effect, <tt>"frame"</tt> for
        /// 4-way shadow, and <tt>"drop"</tt> for bottom-right
        /// </summary>
        public object shadow { get; set; }
        /// <summary>
        /// @cfg {String} triggerAction The action to execute when the trigger is clicked.
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>'query'</tt></b> : <b>Default</b>
        /// <p class="sub-desc">{@link #doQuery run the query} using the {@link Ext.form.Field#getRawValue raw value}.</p></li>
        /// <li><b><tt>'all'</tt></b> :
        /// <p class="sub-desc">{@link #doQuery run the query} specified by the <tt>{@link #allQuery}</tt> config option</p></li>
        /// </ul></div>
        /// <p>See also <code>{@link #queryParam}</code>.</p>
        /// </summary>
        public JsString triggerAction { get; set; }
        /// <summary>
        /// @cfg {String} triggerClass An additional CSS class used to style the trigger button.  The trigger will always
        /// get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
        /// (defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward arrow icon).
        /// </summary>
        public JsString triggerClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} typeAhead <tt>true</tt> to populate and autoselect the remainder of the text being
        /// typed after a configurable delay ({@link #typeAheadDelay}) if it matches a known value (defaults
        /// to <tt>false</tt>)
        /// </summary>
        public bool typeAhead { get; set; }
        /// <summary>
        /// @cfg {Number} typeAheadDelay The length of time in milliseconds to wait until the typeahead text is displayed
        /// if <tt>{@link #typeAhead} = true</tt> (defaults to <tt>250</tt>)
        /// </summary>
        public JsNumber typeAheadDelay { get; set; }
    }
    #endregion
    #region CompositeField
    /// <summary>
    /// @class Ext.form.CompositeField
    /// @extends Ext.form.Field
    /// Composite field allowing a number of form Fields to be rendered on the same row. The fields are rendered
    /// using an hbox layout internally, so all of the normal HBox layout config items are available. Example usage:
    /// <pre>
    /// {
    /// xtype: 'compositefield',
    /// labelWidth: 120
    /// items: [
    /// {
    /// xtype     : 'textfield',
    /// fieldLabel: 'Title',
    /// width     : 20
    /// },
    /// {
    /// xtype     : 'textfield',
    /// fieldLabel: 'First',
    /// flex      : 1
    /// },
    /// {
    /// xtype     : 'textfield',
    /// fieldLabel: 'Last',
    /// flex      : 1
    /// }
    /// ]
    /// }
    /// </pre>
    /// In the example above the composite's fieldLabel will be set to 'Title, First, Last' as it groups the fieldLabels
    /// of each of its children. This can be overridden by setting a fieldLabel on the compositefield itself:
    /// <pre>
    /// {
    /// xtype: 'compositefield',
    /// fieldLabel: 'Custom label',
    /// items: [...]
    /// }
    /// </pre>
    /// Any Ext.form.* component can be placed inside a composite field.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CompositeField : Ext.form.Field
    {
        /// <summary>
        /// @private
        /// </summary>
        public void beforeDestroy() { }
        /// <summary>
        /// Takes an object containing error messages for contained fields, returning a combined error
        /// string (defaults to just placing each item on a new line). This can be overridden to provide
        /// custom combined error message handling.
        /// @param {Array} errors Array of errors in format: [{field: 'title', error: 'some error'}]
        /// @return {String} The combined error message
        /// </summary>
        public JsString buildCombinedErrorMessage(JsArray errors) { return null; }
        /// <summary>
        /// Builds a label string from an array of subfield labels.
        /// By default this just joins the labels together with a comma
        /// @param {Array} segments Array of each of the labels in the composite field's subfields
        /// @return {String} The built label
        /// </summary>
        public JsString buildLabel(JsArray segments) { return null; }
        /// <summary>
        /// Calls clearInvalid on all child fields. This is a convenience function and should not often need to be called
        /// as fields usually take care of clearing themselves
        /// </summary>
        public void clearInvalidChildren() { }
        /// <summary>
        /// @private
        /// Forces the internal container to be laid out again
        /// </summary>
        public void doLayout(object shallow, object force) { }
        /// <summary>
        /// @private
        /// Convenience function which passes the given function to every item in the composite
        /// @param {Function} fn The function to call
        /// @param {Object} scope Optional scope object
        /// </summary>
        public void eachItem(JsAction fn, JsObject scope) { }
        public new void initComponent() { }
        /// <summary>
        /// Checks each field in the composite and returns true if any is dirty
        /// @return {Boolean} True if any field is dirty
        /// </summary>
        public new bool isDirty() { return false; }
        public void onDisable() { }
        public void onEnable() { }
        /// <summary>
        /// Called if combineErrors is true and a subfield's clearInvalid method is called.
        /// By default this just updates the internal fieldErrors MixedCollection.
        /// @param {Ext.form.Field} field The field that was marked invalid
        /// </summary>
        public void onFieldClearInvalid(Field field) { }
        /// <summary>
        /// Called if combineErrors is true and a subfield's markInvalid method is called.
        /// By default this just adds the subfield's error to the internal fieldErrors MixedCollection
        /// @param {Ext.form.Field} field The field that was marked invalid
        /// @param {String} message The error message
        /// </summary>
        public void onFieldMarkInvalid(Field field, JsString message) { }
        /// <summary>
        /// @private
        /// Creates an internal container using hbox and renders the fields to it
        /// </summary>
        public new void onRender(object ct, object position) { }
        /// <summary>
        /// @private
        /// Passes the resize call through to the inner panel
        /// </summary>
        public void onResize(object adjWidth, object adjHeight, object rawWidth, object rawHeight) { }
        public void onShow() { }
        /// <summary>
        /// Resets each field in the composite to their previous value
        /// </summary>
        public new void reset() { }
        public void setReadOnly(object readOnly) { }
        /// <summary>
        /// Sorts the internal fieldErrors MixedCollection by the order in which the fields are defined.
        /// This is called before displaying errors to ensure that the errors are presented in the expected order.
        /// This function can be overridden to provide a custom sorting order if needed.
        /// </summary>
        public void sortErrors() { }
        /// <summary>
        /// @private
        /// Called after a subfield is marked valid or invalid, this checks to see if any of the subfields are
        /// currently invalid. If any subfields are invalid it builds a combined error message marks the composite
        /// invalid, otherwise clearInvalid is called
        /// </summary>
        public void updateInvalidMark() { }
        /// <summary>
        /// Performs validation checks on each subfield and returns false if any of them fail validation.
        /// @return {Boolean} False if any subfield failed validation
        /// </summary>
        public bool validateValue() { return false; }
        /// <summary>
        /// @property combineErrors
        /// @type Boolean
        /// True to combine errors from the individual fields into a single error message at the CompositeField level (defaults to true)
        /// </summary>
        public bool combineErrors { get; set; }
        /// <summary>
        /// @property defaultMargins
        /// @type String
        /// The margins to apply by default to each field in the composite
        /// </summary>
        public JsString defaultMargins { get; set; }
        /// <summary>
        /// @property isComposite
        /// @type Boolean
        /// Signifies that this is a Composite field
        /// </summary>
        public bool isComposite { get; set; }
        /// <summary>
        /// @cfg {String} labelConnector The string to use when joining segments of the built label together (defaults to ', ')
        /// </summary>
        public JsString labelConnector { get; set; }
        /// <summary>
        /// @property skipLastItemMargin
        /// @type Boolean
        /// If true, the defaultMargins are not applied to the last item in the composite field set (defaults to true)
        /// </summary>
        public bool skipLastItemMargin { get; set; }
    }
    #endregion
    #region DateField
    /// <summary>
    /// @class Ext.form.DateField
    /// @extends Ext.form.TriggerField
    /// Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation.
    /// @constructor
    /// Create a new DateField
    /// @param {Object} config
    /// @xtype datefield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DateField : Ext.form.TriggerField
    {
        public void beforeBlur() { }
        public void formatDate(object date) { }
        /// <summary>
        /// Runs all of NumberFields validations and returns an array of any errors. Note that this first
        /// runs TextField's validations, so the returned array is an amalgamation of all field errors.
        /// The additional validation checks are testing that the date format is valid, that the chosen
        /// date is within the min and max date constraints set, that the date chosen is not in the disabledDates
        /// regex and that the day chosed is not one of the disabledDays.
        /// @param {Mixed} value The value to get errors for (defaults to the current field value)
        /// @return {Array} All validation errors for this field
        /// </summary>
        public new JsArray getErrors(object value) { return null; }
        /// <summary>
        /// Returns the current date value of the date field.
        /// @return {Date} The date value
        /// </summary>
        public JsDate getValue() { return null; }
        public new void initComponent() { }
        public void initDisabledDays() { }
        public new void initEvents() { }
        public void menuEvents(object method) { }
        public new void onDestroy() { }
        public void onMenuHide() { }
        public void onSelect(object m, object d) { }
        public void onTriggerClick() { }
        public void parseDate(object value) { }
        public void safeParse(object value, object format) { }
        /// <summary>
        /// Replaces any existing disabled dates with new values and refreshes the DatePicker.
        /// @param {Array} disabledDates An array of date strings (see the <tt>{@link #disabledDates}</tt> config
        /// for details on supported values) used to disable a pattern of dates.
        /// </summary>
        public void setDisabledDates(object dd) { }
        /// <summary>
        /// Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
        /// @param {Array} disabledDays An array of disabled day indexes. See the <tt>{@link #disabledDays}</tt>
        /// config for details on supported values.
        /// </summary>
        public void setDisabledDays(object dd) { }
        /// <summary>
        /// Replaces any existing <tt>{@link #maxValue}</tt> with the new value and refreshes the DatePicker.
        /// @param {Date} value The maximum date that can be selected
        /// </summary>
        public void setMaxValue(object dt) { }
        /// <summary>
        /// Replaces any existing <tt>{@link #minValue}</tt> with the new value and refreshes the DatePicker.
        /// @param {Date} value The minimum date that can be selected
        /// </summary>
        public void setMinValue(object dt) { }
        /// <summary>
        /// Sets the value of the date field.  You can pass a date object or any string that can be
        /// parsed into a valid date, using <tt>{@link #format}</tt> as the date format, according
        /// to the same rules as {@link Date#parseDate} (the default format used is <tt>"m/d/Y"</tt>).
        /// <br />Usage:
        /// <pre><code>
        /// //All of these calls set the same date value (May 4, 2006)
        /// //Pass a date object:
        /// var dt = new Date('5/4/2006');
        /// dateField.setValue(dt);
        /// //Pass a date string (default format):
        /// dateField.setValue('05/04/2006');
        /// //Pass a date string (custom format):
        /// dateField.format = 'Y-m-d';
        /// dateField.setValue('2006-05-04');
        /// </code></pre>
        /// @param {String/Date} date The date or valid date string
        /// @return {Ext.form.Field} this
        /// </summary>
        public new Field setValue(object date) { return null; }
        public void validateBlur() { }
        /// <summary>
        /// @cfg {String} altFormats
        /// Multiple date formats separated by "<tt>|</tt>" to try when parsing a user input value and it
        /// does not match the defined format (defaults to
        /// <tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j'</tt>).
        /// </summary>
        public JsString altFormats { get; set; }
        /// <summary>
        /// @cfg {String} disabledDatesText
        /// The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)
        /// </summary>
        public JsString disabledDatesText { get; set; }
        /// <summary>
        /// @cfg {String} disabledDaysText
        /// The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)
        /// </summary>
        public JsString disabledDaysText { get; set; }
        /// <summary>
        /// @cfg {String} format
        /// The default date format string which can be overriden for localization support.  The format must be
        /// valid according to {@link Date#parseDate} (defaults to <tt>'m/d/Y'</tt>).
        /// </summary>
        public JsString format { get; set; }
        public JsString initTime { get; set; }
        public JsString initTimeFormat { get; set; }
        /// <summary>
        /// @cfg {String} invalidText
        /// The error text to display when the date in the field is invalid (defaults to
        /// <tt>'{value} is not a valid date - it must be in the format {format}'</tt>).
        /// </summary>
        public new JsString invalidText { get; set; }
        /// <summary>
        /// @cfg {String} maxText
        /// The error text to display when the date in the cell is after <tt>{@link #maxValue}</tt> (defaults to
        /// <tt>'The date in this field must be before {maxValue}'</tt>).
        /// </summary>
        public JsString maxText { get; set; }
        /// <summary>
        /// @cfg {String} minText
        /// The error text to display when the date in the cell is before <tt>{@link #minValue}</tt> (defaults to
        /// <tt>'The date in this field must be after {minValue}'</tt>).
        /// </summary>
        public JsString minText { get; set; }
        /// <summary>
        /// @cfg {Boolean} showToday
        /// <tt>false</tt> to hide the footer area of the DatePicker containing the Today button and disable
        /// the keyboard handler for spacebar that selects the current date (defaults to <tt>true</tt>).
        /// </summary>
        public bool showToday { get; set; }
        /// <summary>
        /// @cfg {Number} startDay
        /// Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
        /// </summary>
        public object startDay { get; set; }
        /// <summary>
        /// @cfg {String} triggerClass
        /// An additional CSS class used to style the trigger button.  The trigger will always get the
        /// class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
        /// (defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar icon).
        /// </summary>
        public JsString triggerClass { get; set; }
    }
    #endregion
    #region DisplayField
    /// <summary>
    /// @class Ext.form.DisplayField
    /// @extends Ext.form.Field
    /// A display-only text field which is not validated and not submitted.
    /// @constructor
    /// Creates a new DisplayField.
    /// @param {Object} config Configuration options
    /// @xtype displayfield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DisplayField : Ext.form.Field
    {
        public void getName() { }
        public new void getRawValue() { }
        public new void getValue() { }
        public void isValid() { }
        public new void setRawValue(object v) { }
        public void setValue(object v) { }
        public void validate() { }
        /// <summary>
        /// @cfg {String} fieldClass The default CSS class for the field (defaults to <tt>"x-form-display-field"</tt>)
        /// </summary>
        public new JsString fieldClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} htmlEncode <tt>false</tt> to skip HTML-encoding the text when rendering it (defaults to
        /// <tt>false</tt>). This might be useful if you want to include tags in the field's innerHTML rather than
        /// rendering them as string literals per the default logic.
        /// </summary>
        public bool htmlEncode { get; set; }
        public new bool validateOnBlur { get; set; }
        public bool validationEvent { get; set; }
    }
    #endregion
    #region Field
    /// <summary>
    /// @class Ext.form.Field
    /// @extends Ext.BoxComponent
    /// Base class for form fields that provides default event handling, sizing, value handling and other functionality.
    /// @constructor
    /// Creates a new Field
    /// @param {Object} config Configuration options
    /// @xtype field
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Field : Ext.BoxComponent
    {
        public new void afterRender() { }
        public void alignErrorEl() { }
        public void alignErrorIcon() { }
        public void append(object v) { }
        /// <summary>
        /// Clear any invalid styles/messages for this field
        /// </summary>
        public void clearInvalid() { }
        public void fireKey(object e) { }
        /// <summary>
        /// Gets the active error message for this field.
        /// @return {String} Returns the active error message on the field, if there is no error, an empty string is returned.
        /// </summary>
        public JsString getActiveError() { return null; }
        public void getErrorCt() { }
        /// <summary>
        /// Runs this field's validators and returns an array of error messages for any validation failures.
        /// This is called internally during validation and would not usually need to be used manually.
        /// Each subclass should override or augment the return value to provide their own errors
        /// @return {Array} All error messages for this field
        /// </summary>
        public JsArray getErrors() { return null; }
        public void getItemCt() { }
        public void getMessageHandler() { }
        /// <summary>
        /// Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// attribute of the field if available.
        /// @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// </summary>
        public JsString getName() { return null; }
        /// <summary>
        /// Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
        /// @return {Mixed} value The field value
        /// </summary>
        public void getRawValue() { }
        /// <summary>
        /// Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.
        /// @return {Mixed} value The field value
        /// </summary>
        public void getValue() { }
        public new void initComponent() { }
        public void initEvents() { }
        public void initValue() { }
        /// <summary>
        /// <p>Returns true if the value of this Field has been changed from its original value.
        /// Will return false if the field is disabled or has not been rendered yet.</p>
        /// <p>Note that if the owning {@link Ext.form.BasicForm form} was configured with
        /// {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
        /// then the <i>original value</i> is updated when the values are loaded by
        /// {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>
        /// @return {Boolean} True if this field has been changed from its original value (and
        /// is not disabled), false otherwise.
        /// </summary>
        public bool isDirty() { return false; }
        /// <summary>
        /// Returns whether or not the field value is currently valid by
        /// {@link #validateValue validating} the {@link #processValue processed value}
        /// of the field. <b>Note</b>: {@link #disabled} fields are ignored.
        /// @param {Boolean} preventMark True to disable marking the field invalid
        /// @return {Boolean} True if the value is valid, else false
        /// </summary>
        public bool isValid(bool preventMark) { return false; }
        /// <summary>
        /// <p>Display an error message associated with this field, using {@link #msgTarget} to determine how to
        /// display the message and applying {@link #invalidClass} to the field's UI element.</p>
        /// <p><b>Note</b>: this method does not cause the Field's {@link #validate} method to return <code>false</code>
        /// if the value does <i>pass</i> validation. So simply marking a Field as invalid will not prevent
        /// submission of forms submitted with the {@link Ext.form.Action.Submit#clientValidation} option set.</p>
        /// {@link #isValid invalid}.
        /// @param {String} msg (optional) The validation message (defaults to {@link #invalidText})
        /// </summary>
        public void markInvalid(JsString msg) { }
        public void onBlur() { }
        public void onFocus() { }
        public void onRender(object ct, object position) { }
        /// <summary>
        /// This method should only be overridden if necessary to prepare raw values
        /// for validation (see {@link #validate} and {@link #isValid}).  This method
        /// is expected to return the processed value for the field which will
        /// be used for validation (see validateValue method).
        /// @param {Mixed} value
        /// </summary>
        public void processValue(object value) { }
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages.
        /// See {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
        /// </summary>
        public void reset() { }
        /// <summary>
        /// Sets the current activeError to the given string. Fires the 'invalid' event.
        /// This does not set up the error icon, only sets the message and fires the event. To show the error icon,
        /// use markInvalid instead, which calls this method internally
        /// @param {String} msg The error message
        /// @param {Boolean} suppressEvent True to suppress the 'invalid' event from being fired
        /// </summary>
        public void setActiveError(JsString msg, bool suppressEvent) { }
        /// <summary>
        /// Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.
        /// @param {Mixed} value The value to set
        /// @return {Mixed} value The field value that is set
        /// </summary>
        public void setRawValue(object v) { }
        /// <summary>
        /// Sets the read only state of this field.
        /// @param {Boolean} readOnly Whether the field should be read only.
        /// </summary>
        public void setReadOnly(bool readOnly) { }
        /// <summary>
        /// Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.
        /// @param {Mixed} value The value to set
        /// @return {Ext.form.Field} this
        /// </summary>
        public Field setValue(object v) { return null; }
        /// <summary>
        /// Clears the activeError and fires the 'valid' event. This is called internally by clearInvalid and would not
        /// usually need to be called manually
        /// @param {Boolean} suppressEvent True to suppress the 'invalid' event from being fired
        /// </summary>
        public void unsetActiveError(bool suppressEvent) { }
        /// <summary>
        /// Validates the field value
        /// @return {Boolean} True if the value is valid, else false
        /// </summary>
        public bool validate() { return false; }
        /// <summary>
        /// Uses getErrors to build an array of validation errors. If any errors are found, markInvalid is called
        /// with the first and false is returned, otherwise true is returned. Previously, subclasses were invited
        /// to provide an implementation of this to process validations - from 3.2 onwards getErrors should be
        /// overridden instead.
        /// @param {Mixed} The current value of the field
        /// @return {Boolean} True if all validations passed, false if one or more failed
        /// </summary>
        public bool validateValue(object value) { return false; }
        /// <summary>
        /// @cfg {Boolean} disabled True to disable the field (defaults to false).
        /// <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
        /// disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
        /// </summary>
        public bool disabled { get; set; }
        /// <summary>
        /// @cfg {String} fieldClass The default CSS class for the field (defaults to 'x-form-field')
        /// </summary>
        public JsString fieldClass { get; set; }
        /// <summary>
        /// @cfg {String} focusClass The CSS class to use when the field receives focus (defaults to 'x-form-focus')
        /// </summary>
        public JsString focusClass { get; set; }
        public bool hasFocus { get; set; }
        /// <summary>
        /// @cfg {String} invalidClass The CSS class to use when marking a field invalid (defaults to 'x-form-invalid')
        /// </summary>
        public JsString invalidClass { get; set; }
        /// <summary>
        /// @cfg {String} invalidText The error text to use when marking a field invalid and no message is provided
        /// (defaults to 'The value in this field is invalid')
        /// </summary>
        public JsString invalidText { get; set; }
        public bool isFormField { get; set; }
        public JsString msgDisplay { get; set; }
        /// <summary>
        /// @cfg {String} msgTarget <p>The location where the message text set through {@link #markInvalid} should display.
        /// Must be one of the following values:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><code>qtip</code> Display a quick tip containing the message when the user hovers over the field. This is the default.
        /// <div class="subdesc"><b>{@link Ext.QuickTips#init Ext.QuickTips.init} must have been called for this setting to work.</b></div</li>
        /// <li><code>title</code> Display the message in a default browser title attribute popup.</li>
        /// <li><code>under</code> Add a block div beneath the field containing the error message.</li>
        /// <li><code>side</code> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>
        /// <li><code>[element id]</code> Add the error message directly to the innerHTML of the specified element.</li>
        /// </ul></div>
        /// </summary>
        public JsString msgTarget { get; set; }
        /// <summary>
        /// @cfg {Boolean} readOnly <tt>true</tt> to mark the field as readOnly in HTML
        /// (defaults to <tt>false</tt>).
        /// <br><p><b>Note</b>: this only sets the element's readOnly DOM attribute.
        /// Setting <code>readOnly=true</code>, for example, will not disable triggering a
        /// ComboBox or DateField; it gives you the option of forcing the user to choose
        /// via the trigger without typing in the text box. To hide the trigger use
        /// <code>{@link Ext.form.TriggerField#hideTrigger hideTrigger}</code>.</p>
        /// </summary>
        public bool readOnly { get; set; }
        /// <summary>
        /// @cfg {Boolean} submitValue False to clear the name attribute on the field so that it is not submitted during a form post.
        /// Defaults to <tt>true</tt>.
        /// </summary>
        public bool submitValue { get; set; }
        /// <summary>
        /// @cfg {Boolean} validateOnBlur Whether the field should validate when it loses focus (defaults to true).
        /// </summary>
        public bool validateOnBlur { get; set; }
        /// <summary>
        /// @cfg {Number} validationDelay The length of time in milliseconds after user input begins until validation
        /// is initiated (defaults to 250)
        /// </summary>
        public JsNumber validationDelay { get; set; }
        /// <summary>
        /// @cfg {String/Boolean} validationEvent The event that should initiate field validation. Set to false to disable
        /// automatic validation (defaults to 'keyup').
        /// </summary>
        public object validationEvent { get; set; }
    }
    #endregion
    #region FieldSet
    /// <summary>
    /// @class Ext.form.FieldSet
    /// @extends Ext.Panel
    /// Standard container used for grouping items within a {@link Ext.form.FormPanel form}.
    /// <pre><code>
    /// var form = new Ext.FormPanel({
    /// title: 'Simple Form with FieldSets',
    /// labelWidth: 75, // label settings here cascade unless overridden
    /// url: 'save-form.php',
    /// frame:true,
    /// bodyStyle:'padding:5px 5px 0',
    /// width: 700,
    /// renderTo: document.body,
    /// layout:'column', // arrange items in columns
    /// defaults: {      // defaults applied to items
    /// layout: 'form',
    /// border: false,
    /// bodyStyle: 'padding:4px'
    /// },
    /// items: [{
    /// // Fieldset in Column 1
    /// xtype:'fieldset',
    /// columnWidth: 0.5,
    /// title: 'Fieldset 1',
    /// collapsible: true,
    /// autoHeight:true,
    /// defaults: {
    /// anchor: '-20' // leave room for error icon
    /// },
    /// defaultType: 'textfield',
    /// items :[{
    /// fieldLabel: 'Field 1'
    /// }, {
    /// fieldLabel: 'Field 2'
    /// }, {
    /// fieldLabel: 'Field 3'
    /// }
    /// ]
    /// },{
    /// // Fieldset in Column 2 - Panel inside
    /// xtype:'fieldset',
    /// title: 'Show Panel', // title, header, or checkboxToggle creates fieldset header
    /// autoHeight:true,
    /// columnWidth: 0.5,
    /// checkboxToggle: true,
    /// collapsed: true, // fieldset initially collapsed
    /// layout:'anchor',
    /// items :[{
    /// xtype: 'panel',
    /// anchor: '100%',
    /// title: 'Panel inside a fieldset',
    /// frame: true,
    /// height: 100
    /// }]
    /// }]
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {Object} config Configuration options
    /// @xtype fieldset
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FieldSet : Ext.Panel
    {
        /// <summary>
        /// This function is called by the fieldset's checkbox when it is toggled (only applies when
        /// checkboxToggle = true).  This method should never be called externally, but can be
        /// overridden to provide custom behavior when the checkbox is toggled if needed.
        /// </summary>
        public void onCheckClick() { }
        public new void onCollapse(object doAnim, object animArg) { }
        public new void onExpand(object doAnim, object animArg) { }
        public new void onRender(object ct, object position) { }
        /// <summary>
        /// @cfg {Boolean} animCollapse
        /// <tt>true</tt> to animate the transition when the panel is collapsed, <tt>false</tt> to skip the
        /// animation (defaults to <tt>false</tt>).
        /// </summary>
        public bool animCollapse { get; set; }
        /// <summary>
        /// @cfg {String} baseCls The base CSS class applied to the fieldset (defaults to <tt>'x-fieldset'</tt>).
        /// </summary>
        public new JsString baseCls { get; set; }
        /// <summary>
        /// @cfg {String} layout The {@link Ext.Container#layout} to use inside the fieldset (defaults to <tt>'form'</tt>).
        /// </summary>
        public JsString layout { get; set; }
    }
    #endregion
    #region Hidden
    /// <summary>
    /// @class Ext.form.Hidden
    /// @extends Ext.form.Field
    /// A basic hidden field for storing hidden values in forms that need to be passed in the form submit.
    /// @constructor
    /// Create a new Hidden field.
    /// @param {Object} config Configuration options
    /// @xtype hidden
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Hidden : Ext.form.Field
    {
        public new void initEvents() { }
        public void onRender() { }
        public JsString inputType { get; set; }
        public bool shouldLayout { get; set; }
    }
    #endregion
    #region HtmlEditor
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HtmlEditor : Ext.form.Field
    {
        public void adjustFont(object btn) { }
        public void applyCommand(object e) { }
        public void beforeDestroy() { }
        public void checkDesignMode() { }
        /// <summary>
        /// Protected method that will not generally be called directly. If you need/want
        /// custom HTML cleanup, this is the method you should override.
        /// @param {String} html The HTML to be cleaned
        /// @return {String} The cleaned HTML
        /// </summary>
        public JsString cleanHtml(JsString html) { return null; }
        public void createFontOptions() { }
        public void createIFrame() { }
        public void createLink() { }
        /// <summary>
        /// @event editmodechange
        /// Fires when the editor switches edit modes
        /// @param {HtmlEditor} this
        /// @param {Boolean} sourceEdit True if source edit, false if standard editing.
        /// */
        /// 'editmodechange'
        /// );
        /// Ext.form.HtmlEditor.superclass.initComponent.call(this);
        /// },
        /// // private
        /// createFontOptions : function(){
        /// var buf = [], fs = this.fontFamilies, ff, lc;
        /// for(var i = 0, len = fs.length; i< len; i++){
        /// ff = fs[i];
        /// lc = ff.toLowerCase();
        /// buf.push(
        /// '<option value="',lc,'" style="font-family:',ff,';"',
        /// (this.defaultFont == lc ? ' selected="true">' : '>'),
        /// ff,
        /// '</option>'
        /// );
        /// }
        /// return buf.join('');
        /// },
        /// /*
        /// Protected method that will not generally be called directly. It
        /// is called when the editor creates its toolbar. Override this method if you need to
        /// add custom toolbar buttons.
        /// @param {HtmlEditor} editor
        /// </summary>
        public void createToolbar(object editor) { }
        public void deferFocus() { }
        public void disableItems(object disabled) { }
        /// <summary>
        /// Executes a Midas editor command directly on the editor document.
        /// For visual commands, you should use {@link #relayCmd} instead.
        /// <b>This should only be called after the editor is initialized.</b>
        /// @param {String} cmd The Midas command
        /// @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
        /// </summary>
        public void execCmd(JsString cmd, object value) { }
        public void focus() { }
        public void getDesignMode() { }
        public void getDoc() { }
        /// <summary>
        /// Protected method that will not generally be called directly. It
        /// is called when the editor initializes the iframe with HTML contents. Override this method if you
        /// want to change the initialization markup of the iframe (e.g. to add stylesheets).
        /// *
        /// Note: IE8-Standards has unwanted scroller behavior, so the default meta tag forces IE7 compatibility
        /// </summary>
        public void getDocMarkup() { }
        public void getEditorBody() { }
        /// <summary>
        /// Returns the editor's toolbar. <b>This is only available after the editor has been rendered.</b>
        /// @return {Ext.Toolbar}
        /// </summary>
        public void getToolbar() { }
        public new void getValue() { }
        public void getWin() { }
        public new void initComponent() { }
        public void initEditor() { }
        public new void initEvents() { }
        public void initFrame() { }
        /// <summary>
        /// Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
        /// to insert text.
        /// @param {String} text
        /// </summary>
        public void insertAtCursor(object text) { }
        public void onDisable() { }
        public void onEditorEvent(object e) { }
        public void onEnable() { }
        public void onFirstFocus() { }
        public new void onRender(object ct, object position) { }
        public void onResize(object w, object h) { }
        /// <summary>
        /// Protected method that will not generally be called directly. Pushes the value of the textarea
        /// into the iframe editor.
        /// </summary>
        public void pushValue() { }
        public void relayBtnCmd(object btn) { }
        /// <summary>
        /// Executes a Midas editor command on the editor document and performs necessary focus and
        /// toolbar updates. <b>This should only be called after the editor is initialized.</b>
        /// @param {String} cmd The Midas command
        /// @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
        /// </summary>
        public void relayCmd(JsString cmd, object value) { }
        /// <summary>
        /// Protected method that will not generally be called directly. It
        /// is called when the editor initializes the iframe with HTML contents. Override this method if you
        /// want to change the initialization markup of the iframe (e.g. to add stylesheets).
        /// *
        /// Note: IE8-Standards has unwanted scroller behavior, so the default meta tag forces IE7 compatibility
        /// */
        /// getDocMarkup : function(){
        /// 2;
        /// return String.format('<html><head><style type="text/css">body{border: 0; margin: 0; padding: {0}px; height: {1}px; cursor: text}</style></head><body></body></html>', this.iframePad, h);
        /// },
        /// // private
        /// getEditorBody : function(){
        /// var doc = this.getDoc();
        /// return doc.body || doc.documentElement;
        /// },
        /// // private
        /// getDoc : function(){
        /// return Ext.isIE ? this.getWin().document : (this.iframe.contentDocument || this.getWin().document);
        /// },
        /// // private
        /// getWin : function(){
        /// return Ext.isIE ? this.iframe.contentWindow : window.frames[this.iframe.name];
        /// },
        /// // private
        /// onRender : function(ct, position){
        /// Ext.form.HtmlEditor.superclass.onRender.call(this, ct, position);
        /// this.el.dom.style.border = '0 none';
        /// this.el.dom.setAttribute('tabIndex', -1);
        /// this.el.addClass('x-hidden');
        /// if(Ext.isIE){ // fix IE 1px bogus margin
        /// this.el.applyStyles('margin-top:-1px;margin-bottom:-1px;');
        /// }
        /// this.wrap = this.el.wrap({
        /// cls:'x-html-editor-wrap', cn:{cls:'x-html-editor-tb'}
        /// });
        /// this.createToolbar(this);
        /// this.disableItems(true);
        /// this.tb.doLayout();
        /// this.createIFrame();
        /// if(!this.width){
        /// var sz = this.el.getSize();
        /// this.setSize(sz.width, this.height || sz.height);
        /// }
        /// this.resizeEl = this.positionEl = this.wrap;
        /// },
        /// createIFrame: function(){
        /// var iframe = document.createElement('iframe');
        /// iframe.name = Ext.id();
        /// iframe.frameBorder = '0';
        /// iframe.style.overflow = 'auto';
        /// iframe.src = Ext.SSL_SECURE_URL;
        /// this.wrap.dom.appendChild(iframe);
        /// this.iframe = iframe;
        /// this.monitorTask = Ext.TaskMgr.start({
        /// run: this.checkDesignMode,
        /// scope: this,
        /// interval:100
        /// });
        /// },
        /// initFrame : function(){
        /// Ext.TaskMgr.stop(this.monitorTask);
        /// var doc = this.getDoc();
        /// this.win = this.getWin();
        /// doc.open();
        /// doc.write(this.getDocMarkup());
        /// doc.close();
        /// var task = { // must defer to wait for browser to be ready
        /// run : function(){
        /// var doc = this.getDoc();
        /// if(doc.body || doc.readyState == 'complete'){
        /// Ext.TaskMgr.stop(task);
        /// this.setDesignMode(true);
        /// this.initEditor.defer(10, this);
        /// }
        /// },
        /// interval : 10,
        /// duration:10000,
        /// scope: this
        /// };
        /// Ext.TaskMgr.start(task);
        /// },
        /// checkDesignMode : function(){
        /// if(this.wrap && this.wrap.dom.offsetWidth){
        /// var doc = this.getDoc();
        /// if(!doc){
        /// return;
        /// }
        /// if(!doc.editorInitialized || this.getDesignMode() != 'on'){
        /// this.initFrame();
        /// }
        /// }
        /// },
        /// /* private
        /// set current design mode. To enable, mode can be true or 'on', off otherwise
        /// </summary>
        public void setDesignMode(object mode) { }
        public void setReadOnly(object readOnly) { }
        public void setValue(object v) { }
        /// <summary>
        /// Protected method that will not generally be called directly. Syncs the contents
        /// of the editor iframe with the textarea.
        /// </summary>
        public void syncValue() { }
        /// <summary>
        /// Toggles the editor between standard and source edit mode.
        /// @param {Boolean} sourceEdit (optional) True for source edit, false for standard
        /// </summary>
        public void toggleSourceEdit(object sourceEditMode) { }
        /// <summary>
        /// Protected method that will not generally be called directly. It triggers
        /// a toolbar update by reading the markup state of the current selection in the editor.
        /// </summary>
        public void updateToolbar() { }
        public JsString actionMode { get; set; }
        public bool activated { get; set; }
        /// <summary>
        /// @cfg {String} createLinkText The default text for the create link prompt
        /// </summary>
        public JsString createLinkText { get; set; }
        public JsString defaultFont { get; set; }
        public new bool deferHeight { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableAlignments Enable the left, center, right alignment buttons (defaults to true)
        /// </summary>
        public bool enableAlignments { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableColors Enable the fore/highlight color buttons (defaults to true)
        /// </summary>
        public bool enableColors { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableFont Enable font selection. Not available in Safari. (defaults to true)
        /// </summary>
        public bool enableFont { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableFontSize Enable the increase/decrease font size buttons (defaults to true)
        /// </summary>
        public bool enableFontSize { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableFormat Enable the bold, italic and underline buttons (defaults to true)
        /// </summary>
        public bool enableFormat { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableLinks Enable the create link button. Not available in Safari. (defaults to true)
        /// </summary>
        public bool enableLinks { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableLists Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true)
        /// </summary>
        public bool enableLists { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableSourceEdit Enable the switch to source edit button. Not available in Safari. (defaults to true)
        /// </summary>
        public bool enableSourceEdit { get; set; }
        public JsString hideMode { get; set; }
        public object iframePad { get; set; }
        public bool initialized { get; set; }
        public bool sourceEditMode { get; set; }
        public bool validationEvent { get; set; }
    }
    #endregion
    #region Label
    /// <summary>
    /// @class Ext.form.Label
    /// @extends Ext.BoxComponent
    /// Basic Label field.
    /// @constructor
    /// Creates a new Label
    /// @param {Ext.Element/String/Object} config The configuration options.  If an element is passed, it is set as the internal
    /// element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element
    /// and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component.
    /// @xtype label
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Label : Ext.BoxComponent
    {
        public void onRender(object ct, object position) { }
        /// <summary>
        /// Updates the label's innerHTML with the specified string.
        /// @param {String} text The new label text
        /// @param {Boolean} encode (optional) False to skip HTML-encoding the text when rendering it
        /// to the label (defaults to true which encodes the value). This might be useful if you want to include
        /// tags in the label's innerHTML rather than rendering them as string literals per the default logic.
        /// @return {Label} this
        /// </summary>
        public void setText(object t, bool encode) { }
    }
    #endregion
    #region MessageTargets
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MessageTargets
    {
    }
    #endregion
    #region NumberField
    /// <summary>
    /// @class Ext.form.NumberField
    /// @extends Ext.form.TextField
    /// Numeric text field that provides automatic keystroke filtering and numeric validation.
    /// @constructor
    /// Creates a new NumberField
    /// @param {Object} config Configuration options
    /// @xtype numberfield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class NumberField : Ext.form.TextField
    {
        public void beforeBlur() { }
        /// <summary>
        /// @private
        /// </summary>
        public void fixPrecision(object value) { }
        /// <summary>
        /// Runs all of NumberFields validations and returns an array of any errors. Note that this first
        /// runs TextField's validations, so the returned array is an amalgamation of all field errors.
        /// The additional validations run test that the value is a number, and that it is within the
        /// configured min and max values.
        /// @param {Mixed} value The value to get errors for (defaults to the current field value)
        /// @return {Array} All validation errors for this field
        /// </summary>
        public new JsArray getErrors(object value) { return null; }
        public new void getValue() { }
        public new void initEvents() { }
        public void parseValue(object value) { }
        /// <summary>
        /// Replaces any existing {@link #maxValue} with the new value.
        /// @param {Number} value The maximum value
        /// </summary>
        public void setMaxValue(JsNumber value) { }
        /// <summary>
        /// Replaces any existing {@link #minValue} with the new value.
        /// @param {Number} value The minimum value
        /// </summary>
        public void setMinValue(JsNumber value) { }
        public new void setValue(object v) { }
        /// <summary>
        /// @cfg {Boolean} allowDecimals False to disallow decimal values (defaults to true)
        /// </summary>
        public bool allowDecimals { get; set; }
        /// <summary>
        /// @cfg {Boolean} allowNegative False to prevent entering a negative sign (defaults to true)
        /// </summary>
        public bool allowNegative { get; set; }
        /// <summary>
        /// @cfg {Boolean} autoStripChars True to automatically strip not allowed characters from the field. Defaults to <tt>false</tt>
        /// </summary>
        public bool autoStripChars { get; set; }
        /// <summary>
        /// @cfg {String} baseChars The base set of characters to evaluate as valid numbers (defaults to '0123456789').
        /// </summary>
        public JsString baseChars { get; set; }
        /// <summary>
        /// @cfg {Number} decimalPrecision The maximum precision to display after the decimal separator (defaults to 2)
        /// </summary>
        public JsNumber decimalPrecision { get; set; }
        /// <summary>
        /// @cfg {String} decimalSeparator Character(s) to allow as the decimal separator (defaults to '.')
        /// </summary>
        public JsString decimalSeparator { get; set; }
        /// <summary>
        /// @cfg {String} fieldClass The default CSS class for the field (defaults to "x-form-field x-form-num-field")
        /// </summary>
        public new JsString fieldClass { get; set; }
        /// <summary>
        /// @cfg {String} maxText Error text to display if the maximum value validation fails (defaults to "The maximum value for this field is {maxValue}")
        /// </summary>
        public JsString maxText { get; set; }
        /// <summary>
        /// @cfg {String} minText Error text to display if the minimum value validation fails (defaults to "The minimum value for this field is {minValue}")
        /// </summary>
        public JsString minText { get; set; }
        /// <summary>
        /// @cfg {String} nanText Error text to display if the value is not a valid number.  For example, this can happen
        /// if a valid character like '.' or '-' is left in the field with no number (defaults to "{value} is not a valid number")
        /// </summary>
        public JsString nanText { get; set; }
    }
    #endregion
    #region Radio
    /// <summary>
    /// @class Ext.form.Radio
    /// @extends Ext.form.Checkbox
    /// Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
    /// Radio grouping is handled automatically by the browser if you give each radio in a group the same name.
    /// @constructor
    /// Creates a new Radio
    /// @param {Object} config Configuration options
    /// @xtype radio
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Radio : Ext.form.Checkbox
    {
        public void getCheckEl() { }
        /// <summary>
        /// If this radio is part of a group, it will return the selected value
        /// @return {String}
        /// </summary>
        public void getGroupValue() { }
        /// <summary>
        /// Sets either the checked/unchecked status of this Radio, or, if a string value
        /// is passed, checks a sibling Radio of the same name whose value is the value specified.
        /// @param value {String/Boolean} Checked value, or the value of the sibling radio button to check.
        /// @return {Ext.form.Field} this
        /// </summary>
        public new Field setValue(object v) { return null; }
        public JsString inputType { get; set; }
    }
    #endregion
    #region RadioGroup
    /// <summary>
    /// @class Ext.form.RadioGroup
    /// @extends Ext.form.CheckboxGroup
    /// A grouping container for {@link Ext.form.Radio} controls.
    /// @constructor
    /// Creates a new RadioGroup
    /// @param {Object} config Configuration options
    /// @xtype radiogroup
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class RadioGroup : Ext.form.CheckboxGroup
    {
        public void bufferChecked() { }
        public new void fireChecked() { }
        /// <summary>
        /// Gets the selected {@link Ext.form.Radio} in the group, if it exists.
        /// @return {Ext.form.Radio} The selected radio.
        /// </summary>
        public Radio getValue() { return null; }
        public void onDestroy() { }
        /// <summary>
        /// Sets the checked radio in the group.
        /// @param {String/Ext.form.Radio} id The radio to check.
        /// @param {Boolean} value The value to set the radio.
        /// @return {Ext.form.RadioGroup} this
        /// </summary>
        public RadioGroup onSetValue(object id, bool value) { return null; }
        public new void setValueForItem(object val) { }
        /// <summary>
        /// @cfg {Boolean} allowBlank True to allow every item in the group to be blank (defaults to true).
        /// If allowBlank = false and no items are selected at validation time, {@link @blankText} will
        /// be used as the error text.
        /// </summary>
        public new bool allowBlank { get; set; }
        /// <summary>
        /// @cfg {String} blankText Error text to display if the {@link #allowBlank} validation fails
        /// (defaults to 'You must select one item in this group')
        /// </summary>
        public new JsString blankText { get; set; }
        public new JsString defaultType { get; set; }
        public new JsString groupCls { get; set; }
    }
    #endregion
    #region SliderField
    /// <summary>
    /// @class Ext.form.SliderField
    /// @extends Ext.form.Field
    /// Wraps a {@link Ext.slider.MultiSlider Slider} so it can be used as a form field.
    /// @constructor
    /// Creates a new SliderField
    /// @param {Object} config Configuration options. Note that you can pass in any slider configuration options, as well as
    /// as any field configuration options.
    /// @xtype sliderfield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SliderField : Ext.form.Field
    {
        /// <summary>
        /// If a side icon is shown, do alignment to the slider
        /// @private
        /// </summary>
        public new void alignErrorIcon() { }
        /// <summary>
        /// Ensure the slider is destroyed when the field is destroyed.
        /// @private
        /// </summary>
        public void beforeDestroy() { }
        /// <summary>
        /// Gets the current value for this field.
        /// @return {Number} The current value.
        /// </summary>
        public JsNumber getValue() { return null; }
        /// <summary>
        /// Initialize the component.
        /// @private
        /// </summary>
        public new void initComponent() { }
        /// <summary>
        /// Initialize any events for this class.
        /// @private
        /// </summary>
        public new void initEvents() { }
        /// <summary>
        /// Utility method to set the value of the field when the slider changes.
        /// @param {Object} slider The slider object.
        /// @param {Object} v The new value.
        /// @private
        /// </summary>
        public void onChange(JsObject slider, JsObject v) { }
        /// <summary>
        /// Disable the slider when the field is disabled.
        /// @private
        /// </summary>
        public void onDisable() { }
        /// <summary>
        /// Enable the slider when the field is enabled.
        /// @private
        /// </summary>
        public void onEnable() { }
        /// <summary>
        /// Set up the hidden field
        /// @param {Object} ct The container to render to.
        /// @param {Object} position The position in the container to render to.
        /// @private
        /// </summary>
        public void onRender(JsObject ct, JsObject position) { }
        /// <summary>
        /// Ensure that the slider size is set automatically when the field resizes.
        /// @param {Object} w The width
        /// @param {Object} h The height
        /// @param {Object} aw The adjusted width
        /// @param {Object} ah The adjusted height
        /// @private
        /// </summary>
        public void onResize(JsObject w, JsObject h, JsObject aw, JsObject ah) { }
        /// <summary>
        /// Sets the maximum field value.
        /// @param {Number} v The new maximum value.
        /// @return {Ext.form.SliderField} this
        /// </summary>
        public SliderField setMaxValue(JsNumber v) { return null; }
        /// <summary>
        /// Sets the minimum field value.
        /// @param {Number} v The new minimum value.
        /// @return {Ext.form.SliderField} this
        /// </summary>
        public SliderField setMinValue(JsNumber v) { return null; }
        /// <summary>
        /// Sets the value for this field.
        /// @param {Number} v The new value.
        /// @param {Boolean} animate (optional) Whether to animate the transition. If not specified, it will default to the animate config.
        /// @return {Ext.form.SliderField} this
        /// </summary>
        public SliderField setValue(JsNumber v, bool animate, object silent) { return null; }
        public JsString actionMode { get; set; }
        /// <summary>
        /// @cfg {Function} tipText
        /// A function used to display custom text for the slider tip. Defaults to <tt>null</tt>, which will
        /// use the default on the plugin.
        /// </summary>
        public object tipText { get; set; }
        /// <summary>
        /// @cfg {Boolean} useTips
        /// True to use an Ext.slider.Tip to display tips for the value. Defaults to <tt>true</tt>.
        /// </summary>
        public bool useTips { get; set; }
    }
    #endregion
    #region TextArea
    /// <summary>
    /// @class Ext.form.TextArea
    /// @extends Ext.form.TextField
    /// Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
    /// support for auto-sizing.
    /// @constructor
    /// Creates a new TextArea
    /// @param {Object} config Configuration options
    /// @xtype textarea
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TextArea : Ext.form.TextField
    {
        /// <summary>
        /// Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
        /// This only takes effect if grow = true, and fires the {@link #autosize} event if the height changes.
        /// </summary>
        public new void autoSize() { }
        public new void doAutoSize(object e) { }
        public new void filterValidation(object e) { }
        public new void fireKey(object e) { }
        public new void onDestroy() { }
        public new void onRender(object ct, object position) { }
        public bool enterIsSpecial { get; set; }
        public JsString growAppend { get; set; }
        /// <summary>
        /// @cfg {Number} growMax The maximum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
        /// (defaults to <tt>1000</tt>)
        /// </summary>
        public new JsNumber growMax { get; set; }
        /// <summary>
        /// @cfg {Number} growMin The minimum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
        /// (defaults to <tt>60</tt>)
        /// </summary>
        public new JsNumber growMin { get; set; }
        /// <summary>
        /// @cfg {Boolean} preventScrollbars <tt>true</tt> to prevent scrollbars from appearing regardless of how much text is
        /// in the field. This option is only relevant when {@link #grow} is <tt>true</tt>. Equivalent to setting overflow: hidden, defaults to
        /// <tt>false</tt>.
        /// </summary>
        public bool preventScrollbars { get; set; }
    }
    #endregion
    #region TextField
    /// <summary>
    /// @class Ext.form.TextField
    /// @extends Ext.form.Field
    /// <p>Basic text field.  Can be used as a direct replacement for traditional text inputs,
    /// or as the base class for more sophisticated input controls (like {@link Ext.form.TextArea}
    /// and {@link Ext.form.ComboBox}).</p>
    /// <p><b><u>Validation</u></b></p>
    /// <p>The validation procedure is described in the documentation for {@link #validateValue}.</p>
    /// <p><b><u>Alter Validation Behavior</u></b></p>
    /// <p>Validation behavior for each field can be configured:</p>
    /// <div class="mdetail-params"><ul>
    /// <li><code>{@link Ext.form.TextField#invalidText invalidText}</code> : the default validation message to
    /// show if any validation step above does not provide a message when invalid</li>
    /// <li><code>{@link Ext.form.TextField#maskRe maskRe}</code> : filter out keystrokes before any validation occurs</li>
    /// <li><code>{@link Ext.form.TextField#stripCharsRe stripCharsRe}</code> : filter characters after being typed in,
    /// but before being validated</li>
    /// <li><code>{@link Ext.form.Field#invalidClass invalidClass}</code> : alternate style when invalid</li>
    /// <li><code>{@link Ext.form.Field#validateOnBlur validateOnBlur}</code>,
    /// <code>{@link Ext.form.Field#validationDelay validationDelay}</code>, and
    /// <code>{@link Ext.form.Field#validationEvent validationEvent}</code> : modify how/when validation is triggered</li>
    /// </ul></div>
    /// @constructor Creates a new TextField
    /// @param {Object} config Configuration options
    /// @xtype textfield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TextField : Ext.form.Field
    {
        public void applyEmptyText() { }
        /// <summary>
        /// Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
        /// This only takes effect if <tt><b>{@link #grow}</b> = true</tt>, and fires the {@link #autosize} event.
        /// </summary>
        public void autoSize() { }
        public void doAutoSize(object e) { }
        public void filterKeys(object e) { }
        public void filterValidation(object e) { }
        /// <summary>
        /// <p>Validates a value according to the field's validation rules and returns an array of errors
        /// for any failing validations. Validation rules are processed in the following order:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><b>1. Field specific validator</b>
        /// <div class="sub-desc">
        /// <p>A validator offers a way to customize and reuse a validation specification.
        /// If a field is configured with a <code>{@link #validator}</code>
        /// function, it will be passed the current field value.  The <code>{@link #validator}</code>
        /// function is expected to return either:
        /// <div class="mdetail-params"><ul>
        /// <li>Boolean <tt>true</tt> if the value is valid (validation continues).</li>
        /// <li>a String to represent the invalid message if invalid (validation halts).</li>
        /// </ul></div>
        /// </div></li>
        /// <li><b>2. Basic Validation</b>
        /// <div class="sub-desc">
        /// <p>If the <code>{@link #validator}</code> has not halted validation,
        /// basic validation proceeds as follows:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><code>{@link #allowBlank}</code> : (Invalid message =
        /// <code>{@link #emptyText}</code>)<div class="sub-desc">
        /// Depending on the configuration of <code>{@link #allowBlank}</code>, a
        /// blank field will cause validation to halt at this step and return
        /// Boolean true or false accordingly.
        /// </div></li>
        /// <li><code>{@link #minLength}</code> : (Invalid message =
        /// <code>{@link #minLengthText}</code>)<div class="sub-desc">
        /// If the passed value does not satisfy the <code>{@link #minLength}</code>
        /// specified, validation halts.
        /// </div></li>
        /// <li><code>{@link #maxLength}</code> : (Invalid message =
        /// <code>{@link #maxLengthText}</code>)<div class="sub-desc">
        /// If the passed value does not satisfy the <code>{@link #maxLength}</code>
        /// specified, validation halts.
        /// </div></li>
        /// </ul></div>
        /// </div></li>
        /// <li><b>3. Preconfigured Validation Types (VTypes)</b>
        /// <div class="sub-desc">
        /// <p>If none of the prior validation steps halts validation, a field
        /// configured with a <code>{@link #vtype}</code> will utilize the
        /// corresponding {@link Ext.form.VTypes VTypes} validation function.
        /// If invalid, either the field's <code>{@link #vtypeText}</code> or
        /// the VTypes vtype Text property will be used for the invalid message.
        /// Keystrokes on the field will be filtered according to the VTypes
        /// vtype Mask property.</p>
        /// </div></li>
        /// <li><b>4. Field specific regex test</b>
        /// <div class="sub-desc">
        /// <p>If none of the prior validation steps halts validation, a field's
        /// configured <code>{@link #regex}</code> test will be processed.
        /// The invalid message for this test is configured with
        /// <code>{@link #regexText}</code>.</p>
        /// </div></li>
        /// @param {Mixed} value The value to validate. The processed raw value will be used if nothing is passed
        /// @return {Array} Array of any validation errors
        /// </summary>
        public JsArray getErrors(object value) { return null; }
        public new void initComponent() { }
        public new void initEvents() { }
        public void onDestroy() { }
        public void onDisable() { }
        public void onEnable() { }
        public void onKeyDown(object e) { }
        public void onKeyPress(object e) { }
        public void onKeyUp(object e) { }
        public void onKeyUpBuffered(object e) { }
        public void onMouseDown(object e) { }
        public void postBlur() { }
        public void preFocus() { }
        public new void processValue(object value) { }
        /// <summary>
        /// Resets the current field value to the originally-loaded value and clears any validation messages.
        /// Also adds <tt><b>{@link #emptyText}</b></tt> and <tt><b>{@link #emptyClass}</b></tt> if the
        /// original value was blank.
        /// </summary>
        public new void reset() { }
        /// <summary>
        /// Selects text in this field
        /// @param {Number} start (optional) The index where the selection should start (defaults to 0)
        /// @param {Number} end (optional) The index where the selection should end (defaults to the text length)
        /// </summary>
        public void selectText(JsNumber start, JsNumber end) { }
        public void setValue(object v) { }
        /// <summary>
        /// @cfg {Boolean} allowBlank Specify <tt>false</tt> to validate that the value's length is > 0 (defaults to
        /// <tt>true</tt>)
        /// </summary>
        public bool allowBlank { get; set; }
        /// <summary>
        /// @cfg {String} blankText The error text to display if the <b><tt>{@link #allowBlank}</tt></b> validation
        /// fails (defaults to <tt>'This field is required'</tt>)
        /// </summary>
        public JsString blankText { get; set; }
        /// <summary>
        /// @cfg {Boolean} disableKeyFilter Specify <tt>true</tt> to disable input keystroke filtering (defaults
        /// to <tt>false</tt>)
        /// </summary>
        public bool disableKeyFilter { get; set; }
        /// <summary>
        /// @cfg {String} emptyClass The CSS class to apply to an empty field to style the <b><tt>{@link #emptyText}</tt></b>
        /// (defaults to <tt>'x-form-empty-field'</tt>).  This class is automatically added and removed as needed
        /// depending on the current field value.
        /// </summary>
        public JsString emptyClass { get; set; }
        /// <summary>
        /// @cfg {String} emptyText The default text to place into an empty field (defaults to <tt>null</tt>).
        /// <b>Note</b>: that this value will be submitted to the server if this field is enabled and configured
        /// with a {@link #name}.
        /// </summary>
        public JsString emptyText { get; set; }
        /// <summary>
        /// @cfg {Boolean} grow <tt>true</tt> if this field should automatically grow and shrink to its content
        /// (defaults to <tt>false</tt>)
        /// </summary>
        public bool grow { get; set; }
        /// <summary>
        /// @cfg {Number} growMax The maximum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
        /// to <tt>800</tt>)
        /// </summary>
        public JsNumber growMax { get; set; }
        /// <summary>
        /// @cfg {Number} growMin The minimum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
        /// to <tt>30</tt>)
        /// </summary>
        public JsNumber growMin { get; set; }
        /// <summary>
        /// @cfg {RegExp} maskRe An input mask regular expression that will be used to filter keystrokes that do
        /// not match (defaults to <tt>null</tt>)
        /// </summary>
        public JsRegExp maskRe { get; set; }
        /// <summary>
        /// @cfg {String} maxLengthText Error text to display if the <b><tt>{@link #maxLength maximum length}</tt></b>
        /// validation fails (defaults to <tt>'The maximum length for this field is {maxLength}'</tt>)
        /// </summary>
        public JsString maxLengthText { get; set; }
        /// <summary>
        /// @cfg {Number} minLength Minimum input field length required (defaults to <tt>0</tt>)
        /// </summary>
        public JsNumber minLength { get; set; }
        /// <summary>
        /// @cfg {String} minLengthText Error text to display if the <b><tt>{@link #minLength minimum length}</tt></b>
        /// validation fails (defaults to <tt>'The minimum length for this field is {minLength}'</tt>)
        /// </summary>
        public JsString minLengthText { get; set; }
        /// <summary>
        /// @cfg {RegExp} regex A JavaScript RegExp object to be tested against the field value during validation
        /// (defaults to <tt>null</tt>). If the test fails, the field will be marked invalid using
        /// <b><tt>{@link #regexText}</tt></b>.
        /// </summary>
        public JsRegExp regex { get; set; }
        /// <summary>
        /// @cfg {String} regexText The error text to display if <b><tt>{@link #regex}</tt></b> is used and the
        /// test fails during validation (defaults to <tt>''</tt>)
        /// </summary>
        public JsString regexText { get; set; }
        /// <summary>
        /// @cfg {Boolean} selectOnFocus <tt>true</tt> to automatically select any existing field text when the field
        /// receives input focus (defaults to <tt>false</tt>)
        /// </summary>
        public bool selectOnFocus { get; set; }
        /// <summary>
        /// @cfg {Function} validator
        /// <p>A custom validation function to be called during field validation ({@link #validateValue})
        /// (defaults to <tt>null</tt>). If specified, this function will be called first, allowing the
        /// developer to override the default validation process.</p>
        /// <br><p>This function will be passed the following Parameters:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><code>value</code>: <i>Mixed</i>
        /// <div class="sub-desc">The current field value</div></li>
        /// </ul></div>
        /// <br><p>This function is to Return:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><code>true</code>: <i>Boolean</i>
        /// <div class="sub-desc"><code>true</code> if the value is valid</div></li>
        /// <li><code>msg</code>: <i>String</i>
        /// <div class="sub-desc">An error message if the value is invalid</div></li>
        /// </ul></div>
        /// </summary>
        public object validator { get; set; }
        /// <summary>
        /// @cfg {String} vtype A validation type name as defined in {@link Ext.form.VTypes} (defaults to <tt>null</tt>)
        /// </summary>
        public JsString vtype { get; set; }
    }
    #endregion
    #region TimeField
    /// <summary>
    /// @class Ext.form.TimeField
    /// @extends Ext.form.ComboBox
    /// Provides a time input field with a time dropdown and automatic time validation.  Example usage:
    /// <pre><code>
    /// new Ext.form.TimeField({
    /// minValue: '9:00 AM',
    /// maxValue: '6:00 PM',
    /// increment: 30
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new TimeField
    /// @param {Object} config
    /// @xtype timefield
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TimeField : Ext.form.ComboBox
    {
        public void generateStore(object initial) { }
        public new void getValue() { }
        public new void initComponent() { }
        public void parseDate(object value) { }
        public void setLimit(object value, object isMin, object initial) { }
        /// <summary>
        /// Replaces any existing {@link #maxValue} with the new time and refreshes the store.
        /// @param {Date/String} value The maximum time that can be selected
        /// </summary>
        public void setMaxValue(object value, object initial) { }
        /// <summary>
        /// Replaces any existing {@link #minValue} with the new time and refreshes the store.
        /// @param {Date/String} value The minimum time that can be selected
        /// </summary>
        public void setMinValue(object value, object initial) { }
        public new void setValue(object value) { }
        /// <summary>
        /// @cfg {String} altFormats
        /// Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
        /// format (defaults to 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A').
        /// </summary>
        public JsString altFormats { get; set; }
        /// <summary>
        /// @cfg {String} format
        /// The default time format string which can be overriden for localization support.  The format must be
        /// valid according to {@link Date#parseDate} (defaults to 'g:i A', e.g., '3:15 PM').  For 24-hour time
        /// format try 'H:i' instead.
        /// </summary>
        public JsString format { get; set; }
        /// <summary>
        /// @cfg {Number} increment
        /// The number of minutes between each time value in the list (defaults to 15).
        /// </summary>
        public object increment { get; set; }
        public JsString initDate { get; set; }
        public JsString initDateFormat { get; set; }
        /// <summary>
        /// @cfg {String} invalidText
        /// The error text to display when the time in the field is invalid (defaults to
        /// '{value} is not a valid time').
        /// </summary>
        public new JsString invalidText { get; set; }
        /// <summary>
        /// @cfg {String} maxText
        /// The error text to display when the time is after maxValue (defaults to
        /// 'The time in this field must be equal to or before {0}').
        /// </summary>
        public JsString maxText { get; set; }
        /// <summary>
        /// @cfg {String} minText
        /// The error text to display when the date in the cell is before minValue (defaults to
        /// 'The time in this field must be equal to or after {0}').
        /// </summary>
        public JsString minText { get; set; }
        public new JsString mode { get; set; }
        public new JsString triggerAction { get; set; }
        public new bool typeAhead { get; set; }
    }
    #endregion
    #region TriggerField
    /// <summary>
    /// @class Ext.form.TriggerField
    /// @extends Ext.form.TextField
    /// Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
    /// The trigger has no default action, so you must assign a function to implement the trigger click handler by
    /// overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox
    /// for which you can provide a custom implementation.  For example:
    /// <pre><code>
    /// var trigger = new Ext.form.TriggerField();
    /// trigger.onTriggerClick = myTriggerFn;
    /// trigger.applyToMarkup('my-field');
    /// </code></pre>
    /// *
    /// However, in general you will most likely want to use TriggerField as the base class for a reusable component.
    /// {@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this.
    /// *
    /// @constructor
    /// Create a new TriggerField.
    /// @param {Object} config Configuration options (valid {@Ext.form.TextField} config options will also be applied
    /// to the base TextField)
    /// @xtype trigger
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TriggerField : Ext.form.TextField
    {
        public new void afterRender() { }
        public new void alignErrorIcon() { }
        public void checkTab(object me, object e) { }
        public void getTriggerWidth() { }
        public new void getWidth() { }
        public void initTrigger() { }
        public void mimicBlur(object e) { }
        public new void onDestroy() { }
        public new void onFocus() { }
        public new void onRender(object ct, object position) { }
        public void onResize(object w, object h) { }
        /// <summary>
        /// Allow or prevent the user from directly editing the field text.  If false is passed,
        /// the user will only be able to modify the field using the trigger.  Will also add
        /// a click event to the text field which will call the trigger. This method
        /// is the runtime equivalent of setting the {@link #editable} config option at config time.
        /// @param {Boolean} value True to allow the user to directly edit the field text.
        /// </summary>
        public void setEditable(object editable) { }
        /// <summary>
        /// Changes the hidden status of the trigger.
        /// @param {Boolean} hideTrigger True to hide the trigger, false to show it.
        /// </summary>
        public void setHideTrigger(bool hideTrigger) { }
        /// <summary>
        /// Setting this to true will supersede settings {@link #editable} and {@link #hideTrigger}.
        /// Setting this to false will defer back to {@link #editable} and {@link #hideTrigger}. This method
        /// is the runtime equivalent of setting the {@link #readOnly} config option at config time.
        /// @param {Boolean} value True to prevent the user changing the field and explicitly
        /// hide the trigger.
        /// </summary>
        public void setReadOnly(object readOnly) { }
        public void triggerBlur() { }
        public void updateEditState() { }
        public void validateBlur(object e) { }
        public JsString actionMode { get; set; }
        public object defaultTriggerWidth { get; set; }
        public new bool deferHeight { get; set; }
        /// <summary>
        /// @cfg {Boolean} editable <tt>false</tt> to prevent the user from typing text directly into the field,
        /// the field will only respond to a click on the trigger to set the value. (defaults to <tt>true</tt>).
        /// </summary>
        public bool editable { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideTrigger <tt>true</tt> to hide the trigger element and display only the base
        /// text field (defaults to <tt>false</tt>)
        /// </summary>
        public bool hideTrigger { get; set; }
        public bool mimicing { get; set; }
        public bool monitorTab { get; set; }
        /// <summary>
        /// @cfg {Boolean} readOnly <tt>true</tt> to prevent the user from changing the field, and
        /// hides the trigger.  Superceeds the editable and hideTrigger options if the value is true.
        /// (defaults to <tt>false</tt>)
        /// </summary>
        public new bool readOnly { get; set; }
        /// <summary>
        /// @cfg {String} wrapFocusClass The class added to the to the wrap of the trigger element. Defaults to
        /// <tt>x-trigger-wrap-focus</tt>.
        /// </summary>
        public JsString wrapFocusClass { get; set; }
    }
    #endregion
    #region TwinTriggerField
    /// <summary>
    /// @class Ext.form.TwinTriggerField
    /// @extends Ext.form.TriggerField
    /// TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class
    /// to be extended by an implementing class.  For an example of implementing this class, see the custom
    /// SearchField implementation here:
    /// <a href="http://extjs.com/deploy/ext/examples/form/custom.html">http://extjs.com/deploy/ext/examples/form/custom.html</a>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TwinTriggerField : Ext.form.TriggerField
    {
        public new void afterRender() { }
        public void getTrigger(object index) { }
        public new void getTriggerWidth() { }
        public new void initComponent() { }
        public new void initTrigger() { }
        public new void onDestroy() { }
    }
    #endregion
}
#endregion
#region Ext.grid
namespace Ext.grid
{
    #region AbstractSelectionModel
    /// <summary>
    /// @class Ext.grid.AbstractSelectionModel
    /// @extends Ext.util.Observable
    /// Abstract base class for grid SelectionModels.  It provides the interface that should be
    /// implemented by descendant classes.  This class should not be directly instantiated.
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AbstractSelectionModel : Ext.util.Observable
    {
        public AbstractSelectionModel() { }
        public void destroy() { }
        /// <summary>
        /// The GridPanel for which this SelectionModel is handling selection. Read-only.
        /// @type Object
        /// @property grid
        /// */
        /// constructor : function(){
        /// this.locked = false;
        /// Ext.grid.AbstractSelectionModel.superclass.constructor.call(this);
        /// },
        /// </summary>
        public void init(object grid) { }
        /// <summary>
        /// Returns true if the selections are locked.
        /// @return {Boolean}
        /// </summary>
        public void isLocked() { }
        /// <summary>
        /// Locks the selections.
        /// </summary>
        public void @lock() { }
        public void sortLock() { }
        public void sortUnLock() { }
        /// <summary>
        /// Unlocks the selections.
        /// </summary>
        public void unlock() { }
    }
    #endregion
    #region ActionColumn
    /// <summary>
    /// @class Ext.grid.ActionColumn
    /// @extends Ext.grid.Column
    /// <p>A Grid column type which renders an icon, or a series of icons in a grid cell, and offers a scoped click
    /// handler for each icon. Example usage:</p>
    /// <pre><code>
    /// new Ext.grid.GridPanel({
    /// store: myStore,
    /// columns: [
    /// {
    /// xtype: 'actioncolumn',
    /// width: 50,
    /// items: [
    /// {
    /// icon   : 'sell.gif',                // Use a URL in the icon config
    /// tooltip: 'Sell stock',
    /// handler: function(grid, rowIndex, colIndex) {
    /// var rec = store.getAt(rowIndex);
    /// alert("Sell " + rec.get('company'));
    /// }
    /// },
    /// {
    /// getClass: function(v, meta, rec) {  // Or return a class from a function
    /// if (rec.get('change') < 0) {
    /// this.items[1].tooltip = 'Do not buy!';
    /// return 'alert-col';
    /// } else {
    /// this.items[1].tooltip = 'Buy stock';
    /// return 'buy-col';
    /// }
    /// },
    /// handler: function(grid, rowIndex, colIndex) {
    /// var rec = store.getAt(rowIndex);
    /// alert("Buy " + rec.get('company'));
    /// }
    /// }
    /// ]
    /// }
    /// //any other columns here
    /// ]
    /// });
    /// </pre></code>
    /// <p>The action column can be at any index in the columns array, and a grid can have any number of
    /// action columns. </p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ActionColumn : Ext.grid.Column
    {
        public ActionColumn() { }
        public ActionColumn(object cfg) { }
        public new void destroy() { }
        /// <summary>
        /// @private
        /// Process and refire events routed from the GridView's processEvent method.
        /// Also fires any configured click handlers. By default, cancels the mousedown event to prevent selection.
        /// Returns the event handler's status to allow cancelling of GridView's bubbling process.
        /// </summary>
        public new void processEvent(object name, object e, object grid, object rowIndex, object colIndex) { }
        public JsRegExp actionIdRe { get; set; }
        /// <summary>
        /// @cfg {String} altText The alt text to use for the image element. Defaults to <tt>''</tt>.
        /// </summary>
        public JsString altText { get; set; }
        /// <summary>
        /// @cfg {Array} items An Array which may contain multiple icon definitions, each element of which may contain:
        /// <div class="mdetail-params"><ul>
        /// <li><code>icon</code> : String<div class="sub-desc">The url of an image to display as the clickable element
        /// in the column.</div></li>
        /// <li><code>iconCls</code> : String<div class="sub-desc">A CSS class to apply to the icon image.
        /// To determine the class dynamically, configure the item with a <code>getClass</code> function.</div></li>
        /// <li><code>getClass</code> : Function<div class="sub-desc">A function which returns the CSS class to apply to the icon image.
        /// The function is passed the following parameters:<ul>
        /// <li><b>v</b> : Object<p class="sub-desc">The value of the column's configured field (if any).</p></li>
        /// <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
        /// <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
        /// <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
        /// (e.g. 'style="color:red;"').</p></li>
        /// </ul></p></li>
        /// <li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data.</p></li>
        /// <li><b>rowIndex</b> : Number<p class="sub-desc">The row index..</p></li>
        /// <li><b>colIndex</b> : Number<p class="sub-desc">The column index.</p></li>
        /// <li><b>store</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
        /// </ul></div></li>
        /// <li><code>handler</code> : Function<div class="sub-desc">A function called when the icon is clicked.</div></li>
        /// <li><code>scope</code> : Scope<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the
        /// <code>handler</code> and <code>getClass</code> functions are executed. Fallback defaults are this Column's
        /// configured scope, then this Column.</div></li>
        /// <li><code>tooltip</code> : String<div class="sub-desc">A tooltip message to be displayed on hover.
        /// {@link Ext.QuickTips#init Ext.QuickTips} must have been initialized.</div></li>
        /// </ul></div>
        /// </summary>
        public JsString header { get; set; }
    }
    #endregion
    #region BooleanColumn
    /// <summary>
    /// @class Ext.grid.BooleanColumn
    /// @extends Ext.grid.Column
    /// <p>A Column definition class which renders boolean data fields.  See the {@link Ext.grid.Column#xtype xtype}
    /// config option of {@link Ext.grid.Column} for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BooleanColumn : Ext.grid.Column
    {
        public BooleanColumn() { }
        public BooleanColumn(object cfg) { }
        /// <summary>
        /// @cfg {String} falseText
        /// The string returned by the renderer when the column value is falsy (but not undefined) (defaults to
        /// <tt>'false'</tt>).
        /// </summary>
        public JsString falseText { get; set; }
        /// <summary>
        /// @cfg {String} trueText
        /// The string returned by the renderer when the column value is not falsy (defaults to <tt>'true'</tt>).
        /// </summary>
        public JsString trueText { get; set; }
        /// <summary>
        /// @cfg {String} undefinedText
        /// The string returned by the renderer when the column value is undefined (defaults to <tt>'&amp;#160;'</tt>).
        /// </summary>
        public JsString undefinedText { get; set; }
    }
    #endregion
    #region CellSelectionModel
    /// <summary>
    /// @class Ext.grid.CellSelectionModel
    /// @extends Ext.grid.AbstractSelectionModel
    /// This class provides the basic implementation for <i>single</i> <b>cell</b> selection in a grid.
    /// The object stored as the selection contains the following properties:
    /// <div class="mdetail-params"><ul>
    /// <li><b>cell</b> : see {@link #getSelectedCell}
    /// <li><b>record</b> : Ext.data.record The {@link Ext.data.Record Record}
    /// which provides the data for the row containing the selection</li>
    /// </ul></div>
    /// @constructor
    /// @param {Object} config The object containing the configuration of this model.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CellSelectionModel : Ext.grid.AbstractSelectionModel
    {
        public CellSelectionModel() { }
        public void acceptsNav(object row, object col, object cm) { }
        public void beforeEdit(object e) { }
        /// <summary>
        /// If anything is selected, clears all selections and fires the selectionchange event.
        /// @param {Boolean} preventNotify <tt>true</tt> to prevent the gridview from
        /// being notified about the change.
        /// </summary>
        public void clearSelections(bool preventNotify) { }
        public CellSelectionModel(object config) { }
        /// <summary>
        /// Returns an array containing the row and column indexes of the currently selected cell
        /// (e.g., [0, 0]), or null if none selected. The array has elements:
        /// <div class="mdetail-params"><ul>
        /// <li><b>rowIndex</b> : Number<p class="sub-desc">The index of the selected row</p></li>
        /// <li><b>cellIndex</b> : Number<p class="sub-desc">The index of the selected cell.
        /// Due to possible column reordering, the cellIndex should <b>not</b> be used as an
        /// index into the Record's data. Instead, use the cellIndex to determine the <i>name</i>
        /// of the selected cell and use the field name to retrieve the data value from the record:<pre><code>
        /// // get name
        /// var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
        /// // get data value based on name
        /// var data = record.get(fieldName);
        /// </code></pre></p></li>
        /// </ul></div>
        /// @return {Array} An array containing the row and column indexes of the selected cell, or null if none selected.
        /// </summary>
        public JsArray getSelectedCell() { return null; }
        /// <summary>
        /// Selects a cell.  Before selecting a cell, fires the
        /// {@link #beforecellselect} event.  If this check is satisfied the cell
        /// will be selected and followed up by  firing the {@link #cellselect} and
        /// {@link #selectionchange} events.
        /// @param {Number} rowIndex The index of the row to select
        /// @param {Number} colIndex The index of the column to select
        /// @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
        /// prevent notifying the view (disables updating the selected appearance)
        /// @param {Boolean} preventFocus (optional) Whether to prevent the cell at
        /// the specified rowIndex / colIndex from being focused.
        /// @param {Ext.data.Record} r (optional) The record to select
        /// */
        /// select : function(rowIndex, colIndex, preventViewNotify, preventFocus, /*internal*/ r){
        /// if(this.fireEvent("beforecellselect", this, rowIndex, colIndex) !== false){
        /// this.clearSelections();
        /// r = r || this.grid.store.getAt(rowIndex);
        /// this.selection = {
        /// record : r,
        /// cell : [rowIndex, colIndex]
        /// };
        /// if(!preventViewNotify){
        /// var v = this.grid.getView();
        /// v.onCellSelect(rowIndex, colIndex);
        /// if(preventFocus !== true){
        /// v.focusCell(rowIndex, colIndex);
        /// }
        /// }
        /// this.fireEvent("cellselect", this, rowIndex, colIndex);
        /// this.fireEvent("selectionchange", this, this.selection);
        /// }
        /// },
        /// //private
        /// isSelectable : function(rowIndex, colIndex, cm){
        /// return !cm.isHidden(colIndex);
        /// },
        /// // private
        /// onEditorKey: function(field, e){
        /// if(e.getKey() == e.TAB){
        /// this.handleKeyDown(e);
        /// }
        /// },
        /// </summary>
        public void handleKeyDown(object e) { }
        /// <summary>
        /// Returns <tt>true</tt> if there is a selection.
        /// @return {Boolean}
        /// */
        /// hasSelection : function(){
        /// return this.selection ? true : false;
        /// },
        /// </summary>
        public void handleMouseDown(object g, object row, object cell, object e) { }
        /// <summary>
        /// Returns <tt>true</tt> if there is a selection.
        /// @return {Boolean}
        /// </summary>
        public void hasSelection() { }
        /// <summary>
        /// @event selectionchange
        /// Fires when the active selection changes.
        /// @param {SelectionModel} this
        /// @param {Object} selection null for no selection or an object with two properties
        /// <div class="mdetail-params"><ul>
        /// <li><b>cell</b> : see {@link #getSelectedCell}
        /// <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record Record}
        /// which provides the data for the row containing the selection</p></li>
        /// </ul></div>
        /// */
        /// "selectionchange"
        /// );
        /// Ext.grid.CellSelectionModel.superclass.constructor.call(this);
        /// },
        /// </summary>
        public void initEvents() { }
        public void isSelectable(object rowIndex, object colIndex, object cm) { }
        public void onEditorKey(object field, object e) { }
        public void onRowUpdated(object v, object index, object r) { }
        public void onViewChange() { }
        /// <summary>
        /// Selects a cell.  Before selecting a cell, fires the
        /// {@link #beforecellselect} event.  If this check is satisfied the cell
        /// will be selected and followed up by  firing the {@link #cellselect} and
        /// {@link #selectionchange} events.
        /// @param {Number} rowIndex The index of the row to select
        /// @param {Number} colIndex The index of the column to select
        /// @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
        /// prevent notifying the view (disables updating the selected appearance)
        /// @param {Boolean} preventFocus (optional) Whether to prevent the cell at
        /// the specified rowIndex / colIndex from being focused.
        /// @param {Ext.data.Record} r (optional) The record to select
        /// </summary>
        public void select(JsNumber rowIndex, JsNumber colIndex, bool preventViewNotify, bool preventFocus, Record r) { }
    }
    #endregion
    #region CheckboxSelectionModel
    /// <summary>
    /// @class Ext.grid.CheckboxSelectionModel
    /// @extends Ext.grid.RowSelectionModel
    /// A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.
    /// @constructor
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CheckboxSelectionModel : Ext.grid.RowSelectionModel
    {
        public CheckboxSelectionModel() { }
        public new void initEvents() { }
        public new void onEditorSelect(object row, object lastRow) { }
        public void onHdMouseDown(object e, object t) { }
        public void onMouseDown(object e, object t) { }
        /// <summary>
        /// @private
        /// Process and refire events routed from the GridView's processEvent method.
        /// </summary>
        public void processEvent(object name, object e, object grid, object rowIndex, object colIndex) { }
        public void renderer(object v, object p, object record) { }
        public JsString dataIndex { get; set; }
        public bool @fixed { get; set; }
        /// <summary>
        /// @cfg {String} header Any valid text or HTML fragment to display in the header cell for the
        /// checkbox column.  Defaults to:<pre><code>
        /// '&lt;div class="x-grid3-hd-checker">&#38;#160;&lt;/div>'</tt>
        /// </code></pre>
        /// The default CSS class of <tt>'x-grid3-hd-checker'</tt> displays a checkbox in the header
        /// and provides support for automatic check all/none behavior on header click. This string
        /// can be replaced by any valid HTML fragment, including a simple text string (e.g.,
        /// <tt>'Select Rows'</tt>), but the automatic check all/none behavior will only work if the
        /// <tt>'x-grid3-hd-checker'</tt> class is supplied.
        /// </summary>
        public JsString header { get; set; }
        public bool hideable { get; set; }
        public JsString id { get; set; }
        public bool isColumn { get; set; }
        public bool menuDisabled { get; set; }
        /// <summary>
        /// @cfg {Boolean} sortable <tt>true</tt> if the checkbox column is sortable (defaults to
        /// <tt>false</tt>).
        /// </summary>
        public bool sortable { get; set; }
        /// <summary>
        /// @cfg {Number} width The default width in pixels of the checkbox column (defaults to <tt>20</tt>).
        /// </summary>
        public JsNumber width { get; set; }
    }
    #endregion
    #region Column
    /// <summary>
    /// @class Ext.grid.Column
    /// <p>This class encapsulates column configuration data to be used in the initialization of a
    /// {@link Ext.grid.ColumnModel ColumnModel}.</p>
    /// <p>While subclasses are provided to render data in different ways, this class renders a passed
    /// data field unchanged and is usually used for textual columns.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Column : Ext.util.Observable
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class types
        {
        }
        public Column() { }
        public Column(object config) { }
        /// <summary>
        /// @private
        /// Clean up. Remove any Editor. Remove any listeners.
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}
        /// used to edit the cell.
        /// @param {Number} rowIndex The row index
        /// @return {Ext.Editor}
        /// </summary>
        public void getCellEditor(JsNumber rowIndex) { }
        public void getEditor(object rowIndex) { }
        /// <summary>
        /// @private
        /// Process and refire events routed from the GridView's processEvent method.
        /// Returns the event handler's status to allow cancelling of GridView's bubbling process.
        /// </summary>
        public void processEvent(object name, object e, object grid, object rowIndex, object colIndex) { }
        /// <summary>
        /// Optional. A function which returns displayable data when passed the following parameters:
        /// <div class="mdetail-params"><ul>
        /// <li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
        /// <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
        /// <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
        /// <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container
        /// element <i>within</i> the table cell (e.g. 'style="color:red;"').</p></li></ul></p></li>
        /// <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was
        /// extracted.</p></li>
        /// <li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
        /// <li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
        /// <li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record
        /// was extracted.</p></li>
        /// </ul></div>
        /// @property renderer
        /// @type Function
        /// </summary>
        public void renderer(object value) { }
        /// <summary>
        /// Sets a new editor for this column.
        /// @param {Ext.Editor/Ext.form.Field} editor The editor to set
        /// </summary>
        public void setEditor(object editor) { }
        /// <summary>
        /// @private
        /// @cfg {Boolean} isColumn
        /// Used by ColumnModel setConfig method to avoid reprocessing a Column
        /// if <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column
        /// Defaults to true.
        /// </summary>
        public bool isColumn { get; set; }
    }
    #endregion
    #region ColumnModel
    /// <summary>
    /// @class Ext.grid.ColumnModel
    /// @extends Ext.util.Observable
    /// <p>After the data has been read into the client side cache (<b>{@link Ext.data.Store Store}</b>),
    /// the ColumnModel is used to configure how and what parts of that data will be displayed in the
    /// vertical slices (columns) of the grid. The Ext.grid.ColumnModel Class is the default implementation
    /// of a ColumnModel used by implentations of {@link Ext.grid.GridPanel GridPanel}.</p>
    /// <p>Data is mapped into the store's records and then indexed into the ColumnModel using the
    /// <tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt>:</p>
    /// <pre><code>
    /// {data source} == mapping ==> {data store} == <b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> ==> {ColumnModel}
    /// </code></pre>
    /// <p>Each {@link Ext.grid.Column Column} in the grid's ColumnModel is configured with a
    /// <tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt> to specify how the data within
    /// each record in the store is indexed into the ColumnModel.</p>
    /// <p>There are two ways to initialize the ColumnModel class:</p>
    /// <p><u>Initialization Method 1: an Array</u></p>
    /// <pre><code>
    /// var colModel = new Ext.grid.ColumnModel([
    /// { header: "Ticker", width: 60, sortable: true},
    /// { header: "Company Name", width: 150, sortable: true, id: 'company'},
    /// { header: "Market Cap.", width: 100, sortable: true},
    /// { header: "$ Sales", width: 100, sortable: true, renderer: money},
    /// { header: "Employees", width: 100, sortable: true, resizable: false}
    /// ]);
    /// </code></pre>
    /// <p>The ColumnModel may be initialized with an Array of {@link Ext.grid.Column} column configuration
    /// objects to define the initial layout / display of the columns in the Grid. The order of each
    /// {@link Ext.grid.Column} column configuration object within the specified Array defines the initial
    /// order of the column display.  A Column's display may be initially hidden using the
    /// <tt>{@link Ext.grid.Column#hidden hidden}</tt></b> config property (and then shown using the column
    /// header menu).  Fields that are not included in the ColumnModel will not be displayable at all.</p>
    /// <p>How each column in the grid correlates (maps) to the {@link Ext.data.Record} field in the
    /// {@link Ext.data.Store Store} the column draws its data from is configured through the
    /// <b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b>.  If the
    /// <b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> is not explicitly defined (as shown in the
    /// example above) it will use the column configuration's index in the Array as the index.</p>
    /// <p>See <b><tt>{@link Ext.grid.Column}</tt></b> for additional configuration options for each column.</p>
    /// <p><u>Initialization Method 2: an Object</u></p>
    /// <p>In order to use configuration options from <tt>Ext.grid.ColumnModel</tt>, an Object may be used to
    /// initialize the ColumnModel.  The column configuration Array will be specified in the <tt><b>{@link #columns}</b></tt>
    /// config property. The <tt><b>{@link #defaults}</b></tt> config property can be used to apply defaults
    /// for all columns, e.g.:</p><pre><code>
    /// var colModel = new Ext.grid.ColumnModel({
    /// columns: [
    /// { header: "Ticker", width: 60, menuDisabled: false},
    /// { header: "Company Name", width: 150, id: 'company'},
    /// { header: "Market Cap."},
    /// { header: "$ Sales", renderer: money},
    /// { header: "Employees", resizable: false}
    /// ],
    /// defaults: {
    /// sortable: true,
    /// menuDisabled: true,
    /// width: 100
    /// },
    /// listeners: {
    /// {@link #hiddenchange}: function(cm, colIndex, hidden) {
    /// saveConfig(colIndex, hidden);
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>In both examples above, the ability to apply a CSS class to all cells in a column (including the
    /// header) is demonstrated through the use of the <b><tt>{@link Ext.grid.Column#id id}</tt></b> config
    /// option. This column could be styled by including the following css:</p><pre><code>
    /// //add this css *after* the core css is loaded
    /// .x-grid3-td-company {
    /// color: red; // entire column will have red font
    /// }
    /// // modify the header row only, adding an icon to the column header
    /// .x-grid3-hd-company {
    /// background: transparent
    /// url(../../resources/images/icons/silk/building.png)
    /// no-repeat 3px 3px ! important;
    /// padding-left:20px;
    /// }
    /// </code></pre>
    /// Note that the "Company Name" column could be specified as the
    /// <b><tt>{@link Ext.grid.GridPanel}.{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}</tt></b>.
    /// @constructor
    /// @param {Mixed} config Specify either an Array of {@link Ext.grid.Column} configuration objects or specify
    /// a configuration Object (see introductory section discussion utilizing Initialization Method 2 above).
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColumnModel : Ext.util.Observable
    {
        public ColumnModel() { }
        public ColumnModel(object config) { }
        public static void defaultRenderer(object value) { }
        /// <summary>
        /// Destroys this column model by purging any event listeners. Destroys and dereferences all Columns.
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// Finds the index of the first matching column for the given dataIndex.
        /// @param {String} col The dataIndex to find
        /// @return {Number} The column index, or -1 if no match was found
        /// </summary>
        public JsNumber findColumnIndex(object dataIndex) { return null; }
        /// <summary>
        /// Returns the editor defined for the cell/column.
        /// @param {Number} colIndex The column index
        /// @param {Number} rowIndex The row index
        /// @return {Ext.Editor} The {@link Ext.Editor Editor} that was created to wrap
        /// the {@link Ext.form.Field Field} used to edit the cell.
        /// </summary>
        public Editor getCellEditor(JsNumber colIndex, JsNumber rowIndex) { return null; }
        public void getColumnAt(object index) { }
        /// <summary>
        /// Returns the column for a specified id.
        /// @param {String} id The column id
        /// @return {Object} the column
        /// </summary>
        public JsObject getColumnById(JsString id) { return null; }
        /// <summary>
        /// Returns the number of columns.
        /// @param {Boolean} visibleOnly Optional. Pass as true to only include visible columns.
        /// @return {Number}
        /// </summary>
        public void getColumnCount(bool visibleOnly) { }
        /// <summary>
        /// Returns the header for the specified column.
        /// @param {Number} col The column index
        /// @return {String}
        /// </summary>
        public void getColumnHeader(JsNumber col) { }
        /// <summary>
        /// Returns the id of the column at the specified index.
        /// @param {Number} index The column index
        /// @return {String} the id
        /// </summary>
        public JsString getColumnId(JsNumber index) { return null; }
        /// <summary>
        /// Returns the column configs that return true by the passed function that is called
        /// with (columnConfig, index)
        /// <pre><code>
        /// // returns an array of column config objects for all hidden columns
        /// var columns = grid.getColumnModel().getColumnsBy(function(c){
        /// return c.hidden;
        /// });
        /// </code></pre>
        /// @param {Function} fn A function which, when passed a {@link Ext.grid.Column Column} object, must
        /// return <code>true</code> if the column is to be included in the returned Array.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function
        /// is executed. Defaults to this ColumnModel.
        /// @return {Array} result
        /// </summary>
        public JsArray getColumnsBy(JsAction fn, JsObject scope) { return null; }
        /// <summary>
        /// Returns the tooltip for the specified column.
        /// @param {Number} col The column index
        /// @return {String}
        /// </summary>
        public void getColumnTooltip(JsNumber col) { }
        /// <summary>
        /// Returns the width for the specified column.
        /// @param {Number} col The column index
        /// @return {Number}
        /// </summary>
        public void getColumnWidth(JsNumber col) { }
        /// <summary>
        /// Returns the dataIndex for the specified column.
        /// <pre><code>
        /// // Get field name for the column
        /// var fieldName = grid.getColumnModel().getDataIndex(columnIndex);
        /// </code></pre>
        /// @param {Number} col The column index
        /// @return {String} The column's dataIndex
        /// </summary>
        public JsString getDataIndex(JsNumber col) { return null; }
        /// <summary>
        /// Returns the index for a specified column id.
        /// @param {String} id The column id
        /// @return {Number} the index, or -1 if not found
        /// </summary>
        public JsNumber getIndexById(JsString id) { return null; }
        /// <summary>
        /// Returns the rendering (formatting) function defined for the column.
        /// @param {Number} col The column index.
        /// @return {Function} The function used to render the cell. See {@link #setRenderer}.
        /// </summary>
        public JsAction getRenderer(JsNumber col) { return null; }
        public void getRendererScope(object col) { }
        /// <summary>
        /// Returns the total width of all columns.
        /// @param {Boolean} includeHidden True to include hidden column widths
        /// @return {Number}
        /// </summary>
        public void getTotalWidth(bool includeHidden) { }
        /// <summary>
        /// Returns true if the cell is editable.
        /// <pre><code>
        /// var store = new Ext.data.Store({...});
        /// var colModel = new Ext.grid.ColumnModel({
        /// columns: [...],
        /// isCellEditable: function(col, row) {
        /// var record = store.getAt(row);
        /// if (record.get('readonly')) { // replace with your condition
        /// return false;
        /// }
        /// return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);
        /// }
        /// });
        /// var grid = new Ext.grid.GridPanel({
        /// store: store,
        /// colModel: colModel,
        /// ...
        /// });
        /// </code></pre>
        /// @param {Number} colIndex The column index
        /// @param {Number} rowIndex The row index
        /// @return {Boolean}
        /// </summary>
        public void isCellEditable(JsNumber colIndex, JsNumber rowIndex) { }
        /// <summary>
        /// Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#fixed fixed}</code>,
        /// <tt>false</tt> otherwise.
        /// @param {Number} colIndex The column index
        /// @return {Boolean}
        /// </summary>
        public void isFixed(JsNumber colIndex) { }
        /// <summary>
        /// Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#hidden hidden}</code>,
        /// <tt>false</tt> otherwise.
        /// @param {Number} colIndex The column index
        /// @return {Boolean}
        /// </summary>
        public void isHidden(JsNumber colIndex) { }
        /// <summary>
        /// Returns true if the specified column menu is disabled.
        /// @param {Number} col The column index
        /// @return {Boolean}
        /// </summary>
        public void isMenuDisabled(JsNumber col) { }
        /// <summary>
        /// Returns true if the column can be resized
        /// @return {Boolean}
        /// </summary>
        public void isResizable(object colIndex) { }
        /// <summary>
        /// Returns true if the specified column is sortable.
        /// @param {Number} col The column index
        /// @return {Boolean}
        /// </summary>
        public void isSortable(JsNumber col) { }
        /// <summary>
        /// Moves a column from one position to another.
        /// @param {Number} oldIndex The index of the column to move.
        /// @param {Number} newIndex The position at which to reinsert the coolumn.
        /// </summary>
        public void moveColumn(JsNumber oldIndex, JsNumber newIndex) { }
        /// <summary>
        /// Sets the header for a column.
        /// @param {Number} col The column index
        /// @param {String} header The new header
        /// </summary>
        public void setColumnHeader(JsNumber col, JsString header) { }
        /// <summary>
        /// Sets the tooltip for a column.
        /// @param {Number} col The column index
        /// @param {String} tooltip The new tooltip
        /// </summary>
        public void setColumnTooltip(JsNumber col, JsString tooltip) { }
        /// <summary>
        /// Sets the width for a column.
        /// @param {Number} col The column index
        /// @param {Number} width The new width
        /// @param {Boolean} suppressEvent True to suppress firing the <code>{@link #widthchange}</code>
        /// event. Defaults to false.
        /// </summary>
        public void setColumnWidth(JsNumber col, JsNumber width, bool suppressEvent) { }
        /// <summary>
        /// <p>Reconfigures this column model according to the passed Array of column definition objects.
        /// For a description of the individual properties of a column definition object, see the
        /// <a href="#Ext.grid.ColumnModel-configs">Config Options</a>.</p>
        /// <p>Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}
        /// using this ColumnModel will listen for this event and refresh its UI automatically.</p>
        /// @param {Array} config Array of Column definition objects.
        /// @param {Boolean} initial Specify <tt>true</tt> to bypass cleanup which deletes the <tt>totalWidth</tt>
        /// and destroys existing editors.
        /// </summary>
        public void setConfig(JsArray config, bool initial) { }
        /// <summary>
        /// Sets the dataIndex for a column.
        /// @param {Number} col The column index
        /// @param {String} dataIndex The new dataIndex
        /// </summary>
        public void setDataIndex(JsNumber col, JsString dataIndex) { }
        /// <summary>
        /// Sets if a column is editable.
        /// @param {Number} col The column index
        /// @param {Boolean} editable True if the column is editable
        /// </summary>
        public void setEditable(JsNumber col, bool editable) { }
        /// <summary>
        /// Sets the editor for a column and destroys the prior editor.
        /// @param {Number} col The column index
        /// @param {Object} editor The editor object
        /// </summary>
        public void setEditor(JsNumber col, JsObject editor) { }
        /// <summary>
        /// Sets if a column is hidden.
        /// <pre><code>
        /// myGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column).
        /// </code></pre>
        /// @param {Number} colIndex The column index
        /// @param {Boolean} hidden True if the column is hidden
        /// </summary>
        public void setHidden(JsNumber colIndex, bool hidden) { }
        /// <summary>
        /// Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some
        /// default formatting functions.
        /// @param {Number} col The column index
        /// @param {Function} fn The function to use to process the cell's raw data
        /// to return HTML markup for the grid view. The render function is called with
        /// the following parameters:<ul>
        /// <li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
        /// <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
        /// <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
        /// <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
        /// (e.g. 'style="color:red;"').</p></li></ul></p></li>
        /// <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was extracted.</p></li>
        /// <li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
        /// <li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
        /// <li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record was extracted.</p></li></ul>
        /// </summary>
        public void setRenderer(JsNumber col, JsAction fn) { }
        /// <summary>
        /// @private
        /// Setup any saved state for the column, ensures that defaults are applied.
        /// </summary>
        public void setState(object col, object state) { }
        /// <summary>
        /// @cfg {Boolean} defaultSortable (optional) Default sortable of columns which have no
        /// sortable specified (defaults to <tt>false</tt>).  This property shall preferably be configured
        /// through the <tt><b>{@link #defaults}</b></tt> config property.
        /// </summary>
        public bool defaultSortable { get; set; }
        /// <summary>
        /// @cfg {Number} defaultWidth (optional) The width of columns which have no <tt>{@link #width}</tt>
        /// specified (defaults to <tt>100</tt>).  This property shall preferably be configured through the
        /// <tt><b>{@link #defaults}</b></tt> config property.
        /// </summary>
        public JsNumber defaultWidth { get; set; }
    }
    #endregion
    #region DateColumn
    /// <summary>
    /// @class Ext.grid.DateColumn
    /// @extends Ext.grid.Column
    /// <p>A Column definition class which renders a passed date according to the default locale, or a configured
    /// {@link #format}. See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column}
    /// for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DateColumn : Ext.grid.Column
    {
        public DateColumn() { }
        public DateColumn(object cfg) { }
        /// <summary>
        /// @cfg {String} format
        /// A formatting string as used by {@link Date#format} to format a Date for this Column
        /// (defaults to <tt>'m/d/Y'</tt>).
        /// </summary>
        public JsString format { get; set; }
    }
    #endregion
    #region EditorGridPanel
    /// <summary>
    /// @class Ext.grid.EditorGridPanel
    /// @extends Ext.grid.GridPanel
    /// <p>This class extends the {@link Ext.grid.GridPanel GridPanel Class} to provide cell editing
    /// on selected {@link Ext.grid.Column columns}. The editable columns are specified by providing
    /// an {@link Ext.grid.ColumnModel#editor editor} in the {@link Ext.grid.Column column configuration}.</p>
    /// <p>Editability of columns may be controlled programatically by inserting an implementation
    /// of {@link Ext.grid.ColumnModel#isCellEditable isCellEditable} into the
    /// {@link Ext.grid.ColumnModel ColumnModel}.</p>
    /// <p>Editing is performed on the value of the <i>field</i> specified by the column's
    /// <tt>{@link Ext.grid.ColumnModel#dataIndex dataIndex}</tt> in the backing {@link Ext.data.Store Store}
    /// (so if you are using a {@link Ext.grid.ColumnModel#setRenderer renderer} in order to display
    /// transformed data, this must be accounted for).</p>
    /// <p>If a value-to-description mapping is used to render a column, then a {@link Ext.form.Field#ComboBox ComboBox}
    /// which uses the same {@link Ext.form.Field#valueField value}-to-{@link Ext.form.Field#displayFieldField description}
    /// mapping would be an appropriate editor.</p>
    /// If there is a more complex mismatch between the visible data in the grid, and the editable data in
    /// the {@link Edt.data.Store Store}, then code to transform the data both before and after editing can be
    /// injected using the {@link #beforeedit} and {@link #afteredit} events.
    /// @constructor
    /// @param {Object} config The config object
    /// @xtype editorgrid
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class EditorGridPanel : Ext.grid.GridPanel
    {
        public new void initComponent() { }
        public new void initEvents() { }
        public void onAutoEditClick(object e, object t) { }
        public void onCellDblClick(object g, object row, object col) { }
        public void onEditComplete(object ed, object value, object startValue) { }
        public void onResize() { }
        public void postEditValue(object value, object originalValue, object r, object field) { }
        public void preEditValue(object r, object field) { }
        /// <summary>
        /// Starts editing the specified for the specified row/column
        /// @param {Number} rowIndex
        /// @param {Number} colIndex
        /// </summary>
        public void startEditing(object row, object col) { }
        /// <summary>
        /// Stops any active editing
        /// @param {Boolean} cancel (optional) True to cancel any changes
        /// </summary>
        public void stopEditing(bool cancel) { }
        /// <summary>
        /// @cfg {Boolean} autoEncode
        /// True to automatically HTML encode and decode values pre and post edit (defaults to false)
        /// </summary>
        public bool autoEncode { get; set; }
        /// <summary>
        /// @cfg {Number} clicksToEdit
        /// <p>The number of clicks on a cell required to display the cell's editor (defaults to 2).</p>
        /// <p>Setting this option to 'auto' means that mousedown <i>on the selected cell</i> starts
        /// editing that cell.</p>
        /// </summary>
        public object clicksToEdit { get; set; }
        public bool detectEdit { get; set; }
        /// <summary>
        /// @cfg {Boolean} forceValidation
        /// True to force validation even if the value is unmodified (defaults to false)
        /// </summary>
        public bool forceValidation { get; set; }
        public bool isEditor { get; set; }
        public new bool trackMouseOver { get; set; }
    }
    #endregion
    #region GridDragZone
    /// <summary>
    /// @class Ext.grid.GridDragZone
    /// @extends Ext.dd.DragZone
    /// <p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the
    /// template methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>
    /// <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of
    /// {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
    /// {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able
    /// to process the {@link #getDragData data} which is provided.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GridDragZone
    {
        public GridDragZone() { }
        /// <summary>
        /// @class Ext.grid.GridDragZone
        /// @extends Ext.dd.DragZone
        /// <p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the
        /// template methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>
        /// <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of
        /// {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
        /// {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able
        /// to process the {@link #getDragData data} which is provided.
        /// </summary>
        public GridDragZone(object grid, object config) { }
    }
    #endregion
    #region GridEditor
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GridEditor
    {
        public GridEditor() { }
        public GridEditor(object field, object config) { }
    }
    #endregion
    #region GridPanel
    /// <summary>
    /// @class Ext.grid.GridPanel
    /// @extends Ext.Panel
    /// <p>This class represents the primary interface of a component based grid control to represent data
    /// in a tabular format of rows and columns. The GridPanel is composed of the following:</p>
    /// <div class="mdetail-params"><ul>
    /// <li><b>{@link Ext.data.Store Store}</b> : The Model holding the data records (rows)
    /// <div class="sub-desc"></div></li>
    /// <li><b>{@link Ext.grid.ColumnModel Column model}</b> : Column makeup
    /// <div class="sub-desc"></div></li>
    /// <li><b>{@link Ext.grid.GridView View}</b> : Encapsulates the user interface
    /// <div class="sub-desc"></div></li>
    /// <li><b>{@link Ext.grid.AbstractSelectionModel selection model}</b> : Selection behavior
    /// <div class="sub-desc"></div></li>
    /// </ul></div>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// var grid = new Ext.grid.GridPanel({
    /// {@link #store}: new {@link Ext.data.Store}({
    /// {@link Ext.data.Store#autoDestroy autoDestroy}: true,
    /// {@link Ext.data.Store#reader reader}: reader,
    /// {@link Ext.data.Store#data data}: xg.dummyData
    /// }),
    /// {@link #colModel}: new {@link Ext.grid.ColumnModel}({
    /// {@link Ext.grid.ColumnModel#defaults defaults}: {
    /// width: 120,
    /// sortable: true
    /// },
    /// {@link Ext.grid.ColumnModel#columns columns}: [
    /// {id: 'company', header: 'Company', width: 200, sortable: true, dataIndex: 'company'},
    /// {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price'},
    /// {header: 'Change', dataIndex: 'change'},
    /// {header: '% Change', dataIndex: 'pctChange'},
    /// // instead of specifying renderer: Ext.util.Format.dateRenderer('m/d/Y') use xtype
    /// {
    /// header: 'Last Updated', width: 135, dataIndex: 'lastChange',
    /// xtype: 'datecolumn', format: 'M d, Y'
    /// }
    /// ],
    /// }),
    /// {@link #viewConfig}: {
    /// {@link Ext.grid.GridView#forceFit forceFit}: true,
    /// //      Return CSS class to apply to rows depending upon data values
    /// {@link Ext.grid.GridView#getRowClass getRowClass}: function(record, index) {
    /// var c = record.{@link Ext.data.Record#get get}('change');
    /// if (c < 0) {
    /// return 'price-fall';
    /// } else if (c > 0) {
    /// return 'price-rise';
    /// }
    /// }
    /// },
    /// {@link #sm}: new Ext.grid.RowSelectionModel({singleSelect:true}),
    /// width: 600,
    /// height: 300,
    /// frame: true,
    /// title: 'Framed with Row Selection and Horizontal Scrolling',
    /// iconCls: 'icon-grid'
    /// });
    /// </code></pre>
    /// <p><b><u>Notes:</u></b></p>
    /// <div class="mdetail-params"><ul>
    /// <li>Although this class inherits many configuration options from base classes, some of them
    /// (such as autoScroll, autoWidth, layout, items, etc) are not used by this class, and will
    /// have no effect.</li>
    /// <li>A grid <b>requires</b> a width in which to scroll its columns, and a height in which to
    /// scroll its rows. These dimensions can either be set explicitly through the
    /// <tt>{@link Ext.BoxComponent#height height}</tt> and <tt>{@link Ext.BoxComponent#width width}</tt>
    /// configuration options or implicitly set by using the grid as a child item of a
    /// {@link Ext.Container Container} which will have a {@link Ext.Container#layout layout manager}
    /// provide the sizing of its child items (for example the Container of the Grid may specify
    /// <tt>{@link Ext.Container#layout layout}:'fit'</tt>).</li>
    /// <li>To access the data in a Grid, it is necessary to use the data model encapsulated
    /// by the {@link #store Store}. See the {@link #cellclick} event for more details.</li>
    /// </ul></div>
    /// @constructor
    /// @param {Object} config The config object
    /// @xtype grid
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GridPanel : Ext.Panel
    {
        public new void afterRender() { }
        public void applyState(object state) { }
        /// <summary>
        /// Returns the grid's ColumnModel.
        /// @return {Ext.grid.ColumnModel} The column model
        /// </summary>
        public ColumnModel getColumnModel() { return null; }
        /// <summary>
        /// Called to get grid's drag proxy text, by default returns this.ddText.
        /// @return {String} The text
        /// </summary>
        public JsString getDragDropText() { return null; }
        /// <summary>
        /// Returns the grid's underlying element.
        /// @return {Element} The element
        /// </summary>
        public Element getGridEl() { return null; }
        /// <summary>
        /// Returns the grid's selection model configured by the <code>{@link #selModel}</code>
        /// configuration option. If no selection model was configured, this will create
        /// and return a {@link Ext.grid.RowSelectionModel RowSelectionModel}.
        /// @return {SelectionModel}
        /// </summary>
        public void getSelectionModel() { }
        public void getState() { }
        /// <summary>
        /// Returns the grid's data store.
        /// @return {Ext.data.Store} The store
        /// </summary>
        public Store getStore() { return null; }
        /// <summary>
        /// Returns the grid's GridView object.
        /// @return {Ext.grid.GridView} The grid view
        /// </summary>
        public GridView getView() { return null; }
        public new void initComponent() { }
        public new void initEvents() { }
        public void initStateEvents() { }
        public void onClick(object e) { }
        public void onContextMenu(object e, object t) { }
        public void onDblClick(object e) { }
        public void onDestroy() { }
        public void onMouseDown(object e) { }
        public new void onRender(object ct, object position) { }
        public void processEvent(object name, object e) { }
        /// <summary>
        /// <p>Reconfigures the grid to use a different Store and Column Model
        /// and fires the 'reconfigure' event. The View will be bound to the new
        /// objects and refreshed.</p>
        /// <p>Be aware that upon reconfiguring a GridPanel, certain existing settings <i>may</i> become
        /// invalidated. For example the configured {@link #autoExpandColumn} may no longer exist in the
        /// new ColumnModel. Also, an existing {@link Ext.PagingToolbar PagingToolbar} will still be bound
        /// to the old Store, and will need rebinding. Any {@link #plugins} might also need reconfiguring
        /// with the new data.</p>
        /// @param {Ext.data.Store} store The new {@link Ext.data.Store} object
        /// @param {Ext.grid.ColumnModel} colModel The new {@link Ext.grid.ColumnModel} object
        /// </summary>
        public void reconfigure(Store store, ColumnModel colModel) { }
        public void walkCells(object row, object col, object step, object fn, object scope) { }
        /// <summary>
        /// @cfg {String} autoExpandColumn
        /// <p>The <tt>{@link Ext.grid.Column#id id}</tt> of a {@link Ext.grid.Column column} in
        /// this grid that should expand to fill unused space. This value specified here can not
        /// be <tt>0</tt>.</p>
        /// <br><p><b>Note</b>: If the Grid's {@link Ext.grid.GridView view} is configured with
        /// <tt>{@link Ext.grid.GridView#forceFit forceFit}=true</tt> the <tt>autoExpandColumn</tt>
        /// is ignored. See {@link Ext.grid.Column}.<tt>{@link Ext.grid.Column#width width}</tt>
        /// for additional details.</p>
        /// <p>See <tt>{@link #autoExpandMax}</tt> and <tt>{@link #autoExpandMin}</tt> also.</p>
        /// </summary>
        public bool autoExpandColumn { get; set; }
        /// <summary>
        /// @cfg {Number} autoExpandMax The maximum width the <tt>{@link #autoExpandColumn}</tt>
        /// can have (if enabled). Defaults to <tt>1000</tt>.
        /// </summary>
        public JsNumber autoExpandMax { get; set; }
        /// <summary>
        /// @cfg {Number} autoExpandMin The minimum width the <tt>{@link #autoExpandColumn}</tt>
        /// can have (if enabled). Defaults to <tt>50</tt>.
        /// </summary>
        public JsNumber autoExpandMin { get; set; }
        /// <summary>
        /// @cfg {Boolean} columnLines <tt>true</tt> to add css for column separation lines.
        /// Default is <tt>false</tt>.
        /// </summary>
        public bool columnLines { get; set; }
        /// <summary>
        /// @cfg {String} ddText
        /// Configures the text in the drag proxy.  Defaults to:
        /// <pre><code>
        /// ddText : '{0} selected row{1}'
        /// </code></pre>
        /// <tt>{0}</tt> is replaced with the number of selected rows.
        /// </summary>
        public JsString ddText { get; set; }
        /// <summary>
        /// @cfg {Boolean} deferRowRender <P>Defaults to <tt>true</tt> to enable deferred row rendering.</p>
        /// <p>This allows the GridPanel to be initially rendered empty, with the expensive update of the row
        /// structure deferred so that layouts with GridPanels appear more quickly.</p>
        /// </summary>
        public bool deferRowRender { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableColumnHide
        /// Defaults to <tt>true</tt> to enable {@link Ext.grid.Column#hidden hiding of columns}
        /// with the {@link #enableHdMenu header menu}.
        /// </summary>
        public bool enableColumnHide { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableColumnMove Defaults to <tt>true</tt> to enable drag and drop reorder of columns. <tt>false</tt>
        /// to turn off column reordering via drag drop.
        /// </summary>
        public bool enableColumnMove { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableDragDrop <p>Enables dragging of the selected rows of the GridPanel. Defaults to <tt>false</tt>.</p>
        /// <p>Setting this to <b><tt>true</tt></b> causes this GridPanel's {@link #getView GridView} to
        /// create an instance of {@link Ext.grid.GridDragZone}. <b>Note</b>: this is available only <b>after</b>
        /// the Grid has been rendered as the GridView's <tt>{@link Ext.grid.GridView#dragZone dragZone}</tt>
        /// property.</p>
        /// <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's implementations of
        /// {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
        /// {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able
        /// to process the {@link Ext.grid.GridDragZone#getDragData data} which is provided.</p>
        /// </summary>
        public bool enableDragDrop { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableHdMenu Defaults to <tt>true</tt> to enable the drop down button for menu in the headers.
        /// </summary>
        public bool enableHdMenu { get; set; }
        /// <summary>
        /// @cfg {Object} loadMask An {@link Ext.LoadMask} config or true to mask the grid while
        /// loading. Defaults to <code>false</code>.
        /// </summary>
        public JsObject loadMask { get; set; }
        /// <summary>
        /// @cfg {Number} minColumnWidth The minimum width a column can be resized to. Defaults to <tt>25</tt>.
        /// </summary>
        public JsNumber minColumnWidth { get; set; }
        public bool rendered { get; set; }
        /// <summary>
        /// @cfg {Boolean} stripeRows <tt>true</tt> to stripe the rows. Default is <tt>false</tt>.
        /// <p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be added to alternate rows of
        /// the grid. A default CSS rule is provided which sets a background colour, but you can override this
        /// with a rule which either overrides the <b>background-color</b> style using the '!important'
        /// modifier, or which uses a CSS selector of higher specificity.</p>
        /// </summary>
        public bool stripeRows { get; set; }
        /// <summary>
        /// @cfg {Boolean} trackMouseOver True to highlight rows when the mouse is over. Default is <tt>true</tt>
        /// for GridPanel, but <tt>false</tt> for EditorGridPanel.
        /// </summary>
        public bool trackMouseOver { get; set; }
        /// <summary>
        /// @cfg {Object} view The {@link Ext.grid.GridView} used by the grid. This can be set
        /// before a call to {@link Ext.Component#render render()}.
        /// </summary>
        public JsObject view { get; set; }
        public bool viewReady { get; set; }
    }
    #endregion
    #region GridView
    /// <summary>
    /// @class Ext.grid.GridView
    /// @extends Ext.util.Observable
    /// <p>This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.
    /// Methods of this class may be used to access user interface elements to enable
    /// special display effects. Do not change the DOM structure of the user interface.</p>
    /// <p>This class does not provide ways to manipulate the underlying data. The data
    /// model of a Grid is held in an {@link Ext.data.Store}.</p>
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GridView : Ext.util.Observable
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class ColumnDragZone : Ext.grid.HeaderDragZone
        {
            public ColumnDragZone() { }
            public void callHandleMouseDown(object e) { }
            public ColumnDragZone(object grid, object hd) { }
            public void handleMouseDown(object e) { }
        }
        [JsType(JsMode.Prototype, Export = false)]
        public partial class SplitDragZone : Ext.dd.DDProxy
        {
            public SplitDragZone() { }
            public void allowHeaderDrag(object e) { }
            public void autoOffset() { }
            public void b4StartDrag(object x, object y) { }
            public SplitDragZone(object grid, object hd) { }
            public void endDrag(object e) { }
            public void handleMouseDown(object e) { }
        }
        public GridView() { }
        public void addRowClass(object rowId, object cls) { }
        public void afterMove(object colIndex) { }
        /// <summary>
        /// @private
        /// </summary>
        public void afterRender() { }
        /// <summary>
        /// @private
        /// This is always intended to be called after renderUI. Sets up listeners on the UI elements
        /// and sets up options like column menus, moving and resizing.
        /// </summary>
        public void afterRenderUI() { }
        /// <summary>
        /// @private
        /// Displays the configured emptyText if there are currently no rows to display
        /// </summary>
        public void applyEmptyText() { }
        /// <summary>
        /// @private
        /// Resizes the configured autoExpandColumn to take the available width after the other columns have
        /// been accounted for
        /// @param {Boolean} preventUpdate True to prevent the resizing of all rows (defaults to false)
        /// </summary>
        public void autoExpand(bool preventUpdate) { }
        /// <summary>
        /// @private
        /// Click handler for the shared column dropdown menu, called on beforeshow. Builds the menu
        /// which displays the list of columns for the user to show or hide.
        /// </summary>
        public void beforeColMenuShow() { }
        public void beforeUpdate() { }
        /// <summary>
        /// @private
        /// DEPRECATED - will be removed in Ext JS 5.0
        /// </summary>
        public void bind(object d, object c) { }
        /// <summary>
        /// @private
        /// Removes any sorting indicator classes from the column headers
        /// </summary>
        public void clearHeaderSortState() { }
        public GridView(object config) { }
        /// <summary>
        /// @private
        /// DEPRECATED - this doesn't appear to be called anywhere in the library, remove in 4.0.
        /// </summary>
        public void deleteRows(object dm, object firstRow, object lastRow) { }
        /// <summary>
        /// @private
        /// Destroys all objects associated with the GridView
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// @private
        /// Renders all of the rows to a string buffer and returns the string. This is called internally
        /// by renderRows and performs the actual string building for the rows - it does not inject HTML into the DOM.
        /// @param {Array} columns The column data acquired from getColumnData.
        /// @param {Array} records The array of records to render
        /// @param {Ext.data.Store} store The store to render the rows from
        /// @param {Number} startRow The index of the first row being rendered. Sometimes we only render a subset of
        /// the rows so this is used to maintain logic for striping etc
        /// @param {Number} colCount The total number of columns in the column model
        /// @param {Boolean} stripe True to stripe the rows
        /// @return {String} A string containing the HTML for the rendered rows
        /// </summary>
        public JsString doRender(JsArray columns, JsArray records, Store store, JsNumber startRow, JsNumber colCount, bool stripe) { return null; }
        /// <summary>
        /// @private
        /// </summary>
        public void ensureVisible(object row, object col, object hscroll) { }
        public void findCell(object el) { }
        /// <summary>
        /// <p>Return the index of the grid column which contains the passed HTMLElement.</p>
        /// See also {@link #findRowIndex}
        /// @param {HTMLElement} el The target element
        /// @return {Number} The column index, or <b>false</b> if the target element is not within a row of this GridView.
        /// </summary>
        public JsNumber findCellIndex(HtmlElement el, object requiredCls) { return null; }
        public void findHeaderCell(object el) { }
        public void findHeaderIndex(object el) { }
        /// <summary>
        /// Return the HtmlElement representing the grid row which contains the passed element.
        /// @param {HTMLElement} el The target HTMLElement
        /// @return {HTMLElement} The row element, or null if the target element is not within a row of this GridView.
        /// </summary>
        public HtmlElement findRow(HtmlElement el) { return null; }
        /// <summary>
        /// Return the HtmlElement representing the grid row body which contains the passed element.
        /// @param {HTMLElement} el The target HTMLElement
        /// @return {HTMLElement} The row body element, or null if the target element is not within a row body of this GridView.
        /// </summary>
        public HtmlElement findRowBody(HtmlElement el) { return null; }
        /// <summary>
        /// Return the index of the grid row which contains the passed HTMLElement.
        /// See also {@link #findCellIndex}
        /// @param {HTMLElement} el The target HTMLElement
        /// @return {Number} The row index, or <b>false</b> if the target element is not within a row of this GridView.
        /// </summary>
        public JsNumber findRowIndex(HtmlElement el) { return null; }
        /// <summary>
        /// @private
        /// Resizes each column to fit the available grid width.
        /// TODO: The second argument isn't even used, remove it in 4.0
        /// @param {Boolean} preventRefresh True to prevent resizing of each row to the new column sizes (defaults to false)
        /// @param {null} onlyExpand NOT USED, will be removed in 4.0
        /// @param {Number} omitColumn The index of a column to leave at its current width. Defaults to undefined
        /// @return {Boolean} True if the operation succeeded, false if not or undefined if the grid view is not yet initialized
        /// </summary>
        public bool fitColumns(bool preventRefresh, object onlyExpand, JsNumber omitColumn) { return false; }
        /// <summary>
        /// @private
        /// Each GridView has its own private flyweight, accessed through this method
        /// </summary>
        public void fly(object el) { }
        /// <summary>
        /// Focuses the specified cell.
        /// @param {Number} row The row index
        /// @param {Number} col The column index
        /// </summary>
        public void focusCell(JsNumber row, JsNumber col, object hscroll) { }
        /// <summary>
        /// Focuses the specified row.
        /// @param {Number} row The row index
        /// </summary>
        public void focusRow(JsNumber row) { }
        /// <summary>
        /// Returns the grid's <tt>&lt;td></tt> HtmlElement at the specified coordinates.
        /// @param {Number} row The row index in which to find the cell.
        /// @param {Number} col The column index of the cell.
        /// @return {HtmlElement} The td at the specified coordinates.
        /// </summary>
        public HtmlElement getCell(JsNumber row, JsNumber col) { return null; }
        public void getCellIndex(object el) { }
        /// <summary>
        /// @private
        /// Returns an array of column configurations - one for each column
        /// @return {Array} Array of column config objects. This includes the column name, renderer, id style and renderer
        /// </summary>
        public JsArray getColumnData() { return null; }
        public void getColumnId(object index) { }
        /// <summary>
        /// @private
        /// Builds a CSS string for the given column index
        /// @param {Number} colIndex The column index
        /// @param {Boolean} isHeader True if getting the style for the column's header
        /// @return {String} The CSS string
        /// </summary>
        public JsString getColumnStyle(JsNumber colIndex, bool isHeader) { return null; }
        /// <summary>
        /// @private
        /// </summary>
        public void getColumnTooltip(object i) { }
        /// <summary>
        /// @private
        /// Returns the width of a given column minus its border width
        /// @return {Number} The column index
        /// @return {String|Number} The width in pixels
        /// </summary>
        public JsNumber getColumnWidth(object column) { return null; }
        public void getEditorParent() { }
        /// <summary>
        /// Returns the total internal width available to the grid, taking the scrollbar into account
        /// @return {Number} The total width
        /// </summary>
        public JsNumber getGridInnerWidth() { return null; }
        /// <summary>
        /// Return the <tt>&lt;td></tt> HtmlElement which represents the Grid's header cell for the specified column index.
        /// @param {Number} index The column index
        /// @return {HtmlElement} The td element.
        /// </summary>
        public HtmlElement getHeaderCell(JsNumber index) { return null; }
        public void getOffsetWidth() { }
        /// <summary>
        /// @private
        /// Returns the index of the nearest currently visible header to the left of the given index.
        /// @param {Number} index The header index
        /// @return {Number/undefined} The index of the nearest visible header
        /// </summary>
        public object getPreviousVisible(JsNumber index) { return null; }
        /// <summary>
        /// @private
        /// Returns the XY co-ordinates of a given row/cell resolution (see {@link #resolveCell})
        /// @return {Array} X and Y coords
        /// </summary>
        public JsArray getResolvedXY(object resolved) { return null; }
        /// <summary>
        /// Return the <tt>&lt;div></tt> HtmlElement which represents a Grid row for the specified index.
        /// @param {Number} index The row index
        /// @return {HtmlElement} The div element.
        /// </summary>
        public HtmlElement getRow(object row) { return null; }
        public void getRows() { }
        public void getScrollOffset() { }
        public void getScrollState() { }
        /// <summary>
        /// @private
        /// Returns the total width of all visible columns
        /// @return {String}
        /// </summary>
        public JsString getTotalWidth() { return null; }
        /// <summary>
        /// @private
        /// Called when a header cell is clicked - shows the menu if the click happened over a trigger button
        /// </summary>
        public void handleHdDown(object e, object target) { }
        /// <summary>
        /// @private
        /// Attached as the 'itemclick' handler to the header menu and the column show/hide submenu (if available).
        /// Performs sorting if the sorter buttons were clicked, otherwise hides/shows the column that was clicked.
        /// </summary>
        public void handleHdMenuClick(object item) { }
        /// <summary>
        /// Called by handleHdMenuClick if any button except a sort ASC/DESC button was clicked. The default implementation provides
        /// the column hide/show functionality based on the check state of the menu item. A different implementation can be provided
        /// if needed.
        /// @param {Ext.menu.BaseItem} item The menu item that was clicked
        /// </summary>
        public void handleHdMenuClickDefault(BaseItem item) { }
        /// <summary>
        /// @private
        /// Attached to the headers' mousemove event. This figures out the CSS cursor to use based on where the mouse is currently
        /// pointed. If the mouse is currently hovered over the extreme left or extreme right of any header cell and the cell next
        /// to it is resizable it is given the resize cursor, otherwise the cursor is set to an empty string.
        /// </summary>
        public void handleHdMove(object e) { }
        /// <summary>
        /// @private
        /// Tied to the header element's mouseout event. Removes the hover class from the header cell
        /// </summary>
        public void handleHdOut(object e, object target) { }
        /// <summary>
        /// @private
        /// Tied to the header element's mouseover event - adds the over class to the header cell if the menu is not disabled
        /// for that cell
        /// </summary>
        public void handleHdOver(object e, object target) { }
        public void handleWheel(object e) { }
        /// <summary>
        /// @private
        /// Returns true if there are any rows rendered into the GridView
        /// @return {Boolean} True if any rows have been rendered
        /// </summary>
        public bool hasRows() { return false; }
        public void init(object grid) { }
        /// <summary>
        /// @private
        /// Binds a new Store and ColumnModel to this GridView. Removes any listeners from the old objects (if present)
        /// and adds listeners to the new ones
        /// @param {Ext.data.Store} newStore The new Store instance
        /// @param {Ext.grid.ColumnModel} newColModel The new ColumnModel instance
        /// </summary>
        public void initData(Store newStore, ColumnModel newColModel) { }
        /// <summary>
        /// @private
        /// Finds and stores references to important elements
        /// </summary>
        public void initElements() { }
        /// <summary>
        /// @private
        /// Provides default templates if they are not given for this particular instance. Most of the templates are defined on
        /// the prototype, the ones defined inside this function are done so because they are based on Grid or GridView configuration
        /// </summary>
        public void initTemplates() { }
        public void initUI(object grid) { }
        public void insertRows(object dm, object firstRow, object lastRow, object isUpdate) { }
        /// <summary>
        /// @private
        /// </summary>
        public void isHideableColumn(object c) { }
        /// <summary>
        /// @private
        /// Used by {@link #handleHdOver} to determine whether or not to show the header menu class on cell hover
        /// @param {Number} cellIndex The header cell index
        /// @param {Ext.Element} el The cell element currently being hovered over
        /// </summary>
        public void isMenuDisabled(JsNumber cellIndex, Element el) { }
        /// <summary>
        /// @private
        /// Sizes the grid's header and body elements
        /// </summary>
        public void layout(object initial) { }
        public void onAdd(object store, object records, object index) { }
        public void onAllColumnWidthsUpdated(object ws, object tw) { }
        public void onCellDeselect(object row, object col) { }
        public void onCellSelect(object row, object col) { }
        public void onClear() { }
        public void onColConfigChange() { }
        public void onColumnHiddenUpdated(object col, object hidden, object tw) { }
        public void onColumnMove(object cm, object oldIndex, object newIndex) { }
        /// <summary>
        /// @private
        /// Called by the SplitDragZone when a drag has been completed. Resizes the columns
        /// </summary>
        public void onColumnSplitterMoved(object cellIndex, object width) { }
        public void onColumnWidthUpdated(object col, object w, object tw) { }
        public void onColWidthChange(object cm, object col, object width) { }
        public void onDataChange() { }
        public void onDenyColumnHide() { }
        public void onHeaderChange(object cm, object col, object text) { }
        public void onHeaderClick(object g, object index) { }
        public void onHiddenChange(object cm, object col, object hidden) { }
        public void onLayout(object vw, object vh) { }
        /// <summary>
        /// @private
        /// Called when a store is loaded, scrolls to the top row
        /// </summary>
        public void onLoad() { }
        public void onRemove(object store, object record, object index, object isUpdate) { }
        public void onRowDeselect(object row) { }
        /// <summary>
        /// @private
        /// Removes the hover class from a row on mouseout
        /// </summary>
        public void onRowOut(object e, object target) { }
        /// <summary>
        /// @private
        /// Adds the hover class to a row when hovered over
        /// </summary>
        public void onRowOver(object e, object target) { }
        public void onRowSelect(object row) { }
        public void onUpdate(object store, object record) { }
        public void processEvent(object name, object e) { }
        /// <summary>
        /// @private
        /// Adds CSS classes and rowIndex to each row
        /// @param {Number} startRow The row to start from (defaults to 0)
        /// </summary>
        public void processRows(JsNumber startRow, object skipStripe) { }
        /// <summary>
        /// Refreshs the grid UI
        /// @param {Boolean} headersToo (optional) True to also refresh the headers
        /// </summary>
        public void refresh(bool headersToo) { }
        /// <summary>
        /// @private
        /// Refreshes a row by re-rendering it. Fires the rowupdated event when done
        /// </summary>
        public void refreshRow(object record) { }
        public void removeRow(object row) { }
        public void removeRowClass(object row, object cls) { }
        public void removeRows(object firstRow, object lastRow) { }
        public void render() { }
        public void renderBody() { }
        /// <summary>
        /// @private
        /// Renders the header row using the 'header' template. Does not inject the HTML into the DOM, just
        /// returns a string.
        /// @return {String} Rendered header row
        /// </summary>
        public JsString renderHeaders() { return null; }
        /// <summary>
        /// @private
        /// Renders rows between start and end indexes
        /// @param {Number} startRow Index of the first row to render
        /// @param {Number} endRow Index of the last row to render
        /// </summary>
        public void renderRows(JsNumber startRow, JsNumber endRow) { }
        /// <summary>
        /// @private
        /// Renders each of the UI elements in turn. This is called internally, once, by this.render. It does not
        /// render rows from the store, just the surrounding UI elements.
        /// </summary>
        public void renderUI() { }
        /// <summary>
        /// @private
        /// Finds the Elements corresponding to the given row and column indexes
        /// </summary>
        public void resolveCell(object row, object col, object hscroll) { }
        public void restoreScroll(object state) { }
        /// <summary>
        /// Scrolls the grid to the top
        /// </summary>
        public void scrollToTop() { }
        /// <summary>
        /// @private
        /// Moves the focus element to the x and y co-ordinates of the given row and column
        /// </summary>
        public void syncFocusEl(object row, object col, object hscroll) { }
        public void syncHeaderScroll() { }
        public void syncScroll() { }
        /// <summary>
        /// @private
        /// Updates the size of every column and cell in the grid
        /// </summary>
        public void updateAllColumnWidths() { }
        /// <summary>
        /// @private
        /// Sets the hidden status of a given column.
        /// @param {Number} col The column index
        /// @param {Boolean} hidden True to make the column hidden
        /// </summary>
        public void updateColumnHidden(JsNumber col, bool hidden) { }
        public void updateColumnText(object col, object text) { }
        /// <summary>
        /// @private
        /// Called after a column's width has been updated, this resizes all of the cells for that column in each row
        /// @param {Number} column The column index
        /// </summary>
        public void updateColumnWidth(JsNumber column, object width) { }
        /// <summary>
        /// @private
        /// Re-renders the headers and ensures they are sized correctly
        /// </summary>
        public void updateHeaders() { }
        /// <summary>
        /// @private
        /// Adds sorting classes to the column headers based on the bound store's sortInfo. Fires the 'sortchange' event
        /// if the sorting has changed since this function was last run.
        /// </summary>
        public void updateHeaderSortState() { }
        /// <summary>
        /// @private
        /// Ensures that the header is sized to the total width available to it
        /// @param {Boolean} updateMain True to update the mainBody's width also (defaults to true)
        /// </summary>
        public void updateHeaderWidth(bool updateMain) { }
        /// <summary>
        /// @private
        /// Ensures the given column has the given icon class
        /// </summary>
        public void updateSortIcon(object col, object dir) { }
        /// <summary>
        /// @cfg {Boolean} autoFill
        /// Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned
        /// when the grid is <b>initially rendered</b>.  The
        /// {@link Ext.grid.Column#width initially configured width}</tt> of each column will be adjusted
        /// to fit the grid width and prevent horizontal scrolling. If columns are later resized (manually
        /// or programmatically), the other columns in the grid will <b>not</b> be resized to fit the grid width.
        /// See <tt>{@link #forceFit}</tt> also.
        /// </summary>
        public bool autoFill { get; set; }
        public object borderWidth { get; set; }
        /// <summary>
        /// @cfg {String} cellSelector The selector used to find cells internally (defaults to <tt>'td.x-grid3-cell'</tt>)
        /// </summary>
        public JsString cellSelector { get; set; }
        /// <summary>
        /// @cfg {Number} cellSelectorDepth The number of levels to search for cells in event delegation (defaults to <tt>4</tt>)
        /// </summary>
        public JsNumber cellSelectorDepth { get; set; }
        /// <summary>
        /// @cfg {String} columnsText The text displayed in the 'Columns' menu item (defaults to <tt>'Columns'</tt>)
        /// </summary>
        public JsString columnsText { get; set; }
        /// <summary>
        /// @cfg {Boolean} deferEmptyText True to defer <tt>{@link #emptyText}</tt> being applied until the store's
        /// first load (defaults to <tt>true</tt>).
        /// </summary>
        public bool deferEmptyText { get; set; }
        public JsString firstRowCls { get; set; }
        /// <summary>
        /// @cfg {Boolean} forceFit
        /// <p>Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned
        /// at <b>all times</b>.</p>
        /// <p>The {@link Ext.grid.Column#width initially configured width}</tt> of each
        /// column will be adjusted to fit the grid width and prevent horizontal scrolling. If columns are
        /// later resized (manually or programmatically), the other columns in the grid <b>will</b> be resized
        /// to fit the grid width.</p>
        /// <p>Columns which are configured with <code>fixed: true</code> are omitted from being resized.</p>
        /// <p>See <tt>{@link #autoFill}</tt>.</p>
        /// </summary>
        public bool forceFit { get; set; }
        public JsString hdCls { get; set; }
        /// <summary>
        /// @cfg {String} headerMenuOpenCls The CSS class to add to the header cell when its menu is visible. Defaults to 'x-grid3-hd-menu-open'
        /// </summary>
        public JsString headerMenuOpenCls { get; set; }
        public JsString lastRowCls { get; set; }
        /// <summary>
        /// @cfg {Boolean} markDirty True to show the dirty cell indicator when a cell has been modified. Defaults to <tt>true</tt>.
        /// </summary>
        public bool markDirty { get; set; }
        /// <summary>
        /// @cfg {String} rowBodySelector The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
        /// </summary>
        public JsString rowBodySelector { get; set; }
        /// <summary>
        /// @cfg {Number} rowBodySelectorDepth The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
        /// </summary>
        public JsNumber rowBodySelectorDepth { get; set; }
        public JsRegExp rowClsRe { get; set; }
        /// <summary>
        /// @cfg {String} rowOverCls The CSS class added to each row when it is hovered over. Defaults to 'x-grid3-row-over'
        /// </summary>
        public JsString rowOverCls { get; set; }
        /// <summary>
        /// @cfg {String} rowSelector The selector used to find rows internally (defaults to <tt>'div.x-grid3-row'</tt>)
        /// </summary>
        public JsString rowSelector { get; set; }
        /// <summary>
        /// @cfg {Number} rowSelectorDepth The number of levels to search for rows in event delegation (defaults to <tt>10</tt>)
        /// </summary>
        public JsNumber rowSelectorDepth { get; set; }
        /// <summary>
        /// @cfg {String} selectedRowClass The CSS class applied to a selected row (defaults to <tt>'x-grid3-row-selected'</tt>). An
        /// example overriding the default styling:
        /// <pre><code>
        /// .x-grid3-row-selected {background-color: yellow;}
        /// </code></pre>
        /// Note that this only controls the row, and will not do anything for the text inside it.  To style inner
        /// facets (like text) use something like:
        /// <pre><code>
        /// .x-grid3-row-selected .x-grid3-cell-inner {
        /// color: #FFCC00;
        /// }
        /// </code></pre>
        /// @type String
        /// </summary>
        public JsString selectedRowClass { get; set; }
        /// <summary>
        /// @cfg {String} sortAscText The text displayed in the 'Sort Ascending' menu item (defaults to <tt>'Sort Ascending'</tt>)
        /// </summary>
        public JsString sortAscText { get; set; }
        /// <summary>
        /// @cfg {String} sortDescText The text displayed in the 'Sort Descending' menu item (defaults to <tt>'Sort Descending'</tt>)
        /// </summary>
        public JsString sortDescText { get; set; }
        public JsString tdClass { get; set; }
    }
    #endregion
    #region GroupingView
    /// <summary>
    /// @class Ext.grid.GroupingView
    /// @extends Ext.grid.GridView
    /// Adds the ability for single level grouping to the grid. A {@link Ext.data.GroupingStore GroupingStore}
    /// must be used to enable grouping.  Some grouping characteristics may also be configured at the
    /// {@link Ext.grid.Column Column level}<div class="mdetail-params"><ul>
    /// <li><code>{@link Ext.grid.Column#emptyGroupText emptyGroupText}</code></li>
    /// <li><code>{@link Ext.grid.Column#groupable groupable}</code></li>
    /// <li><code>{@link Ext.grid.Column#groupName groupName}</code></li>
    /// <li><code>{@link Ext.grid.Column#groupRender groupRender}</code></li>
    /// </ul></div>
    /// <p>Sample usage:</p>
    /// <pre><code>
    /// var grid = new Ext.grid.GridPanel({
    /// // A groupingStore is required for a GroupingView
    /// store: new {@link Ext.data.GroupingStore}({
    /// autoDestroy: true,
    /// reader: reader,
    /// data: xg.dummyData,
    /// sortInfo: {field: 'company', direction: 'ASC'},
    /// {@link Ext.data.GroupingStore#groupOnSort groupOnSort}: true,
    /// {@link Ext.data.GroupingStore#remoteGroup remoteGroup}: true,
    /// {@link Ext.data.GroupingStore#groupField groupField}: 'industry'
    /// }),
    /// colModel: new {@link Ext.grid.ColumnModel}({
    /// columns:[
    /// {id:'company',header: 'Company', width: 60, dataIndex: 'company'},
    /// // {@link Ext.grid.Column#groupable groupable}, {@link Ext.grid.Column#groupName groupName}, {@link Ext.grid.Column#groupRender groupRender} are also configurable at column level
    /// {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price', {@link Ext.grid.Column#groupable groupable}: false},
    /// {header: 'Change', dataIndex: 'change', renderer: Ext.util.Format.usMoney},
    /// {header: 'Industry', dataIndex: 'industry'},
    /// {header: 'Last Updated', renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
    /// ],
    /// defaults: {
    /// sortable: true,
    /// menuDisabled: false,
    /// width: 20
    /// }
    /// }),
    /// view: new Ext.grid.GroupingView({
    /// {@link Ext.grid.GridView#forceFit forceFit}: true,
    /// // custom grouping text template to display the number of items per group
    /// {@link #groupTextTpl}: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
    /// }),
    /// frame:true,
    /// width: 700,
    /// height: 450,
    /// collapsible: true,
    /// animCollapse: false,
    /// title: 'Grouping Example',
    /// iconCls: 'icon-grid',
    /// renderTo: document.body
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class GroupingView : Ext.grid.GridView
    {
        public new void afterRender() { }
        public new void afterRenderUI() { }
        public void beforeMenuShow() { }
        public void canGroup() { }
        /// <summary>
        /// Collapses all grouped rows.
        /// </summary>
        public void collapseAllGroups() { }
        public void constructId(object value, object field, object idx) { }
        public void doGroupEnd(object buf, object g, object cs, object ds, object colCount) { }
        public void doGroupStart(object buf, object g, object cs, object ds, object colCount) { }
        public void doRender(object cs, object rs, object ds, object startRow, object colCount, object stripe) { }
        /// <summary>
        /// Expands all grouped rows.
        /// </summary>
        public void expandAllGroups() { }
        public void findGroup(object el) { }
        public void getGroup(object v, object r, object groupRenderer, object rowIndex, object colIndex, object ds) { }
        public void getGroupField() { }
        /// <summary>
        /// Dynamically tries to determine the groupId of a specific value
        /// @param {String} value
        /// @return {String} The group id
        /// </summary>
        public JsString getGroupId(object value) { return null; }
        public void getGroups() { }
        public void getPrefix(object field) { }
        public new void getRows() { }
        public new void initTemplates() { }
        public new void onAdd(object ds, object records, object index) { }
        public new void onAllColumnWidthsUpdated(object ws, object tw) { }
        public void onBeforeRowSelect(object sm, object rowIndex) { }
        public new void onColumnHiddenUpdated(object col, object hidden, object tw) { }
        public new void onColumnWidthUpdated(object col, object w, object tw) { }
        public void onGroupByClick() { }
        public void onLayout() { }
        public new void onRemove(object ds, object record, object index, object isUpdate) { }
        public void onShowGroupsClick(object mi, object @checked) { }
        public new void processEvent(object name, object e) { }
        public new void refreshRow(object record) { }
        public void renderRows() { }
        public new void renderUI() { }
        /// <summary>
        /// Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.
        /// @param {Boolean} expanded (optional)
        /// </summary>
        public void toggleAllGroups(bool expanded) { }
        /// <summary>
        /// Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.
        /// @param {String} groupId The groupId assigned to the group (see getGroupId)
        /// @param {Boolean} expanded (optional)
        /// </summary>
        public void toggleGroup(object group, bool expanded) { }
        /// <summary>
        /// Toggle the group that contains the specific row.
        /// @param {Number} rowIndex The row inside the group
        /// @param {Boolean} expanded (optional)
        /// </summary>
        public void toggleRowIndex(JsNumber rowIndex, bool expanded) { }
        public void updateGroupWidths() { }
        /// <summary>
        /// @cfg {Boolean} cancelEditOnToggle True to cancel any editing when the group header is toggled. Defaults to <tt>true</tt>.
        /// </summary>
        public bool cancelEditOnToggle { get; set; }
        /// <summary>
        /// @cfg {String} emptyGroupText The text to display when there is an empty group value (defaults to <tt>'(None)'</tt>).
        /// May also be specified per column, see {@link Ext.grid.Column}.{@link Ext.grid.Column#emptyGroupText emptyGroupText}.
        /// </summary>
        public JsString emptyGroupText { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableGrouping <tt>false</tt> to disable grouping functionality (defaults to <tt>true</tt>)
        /// </summary>
        public bool enableGrouping { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableGroupingMenu <tt>true</tt> to enable the grouping control in the column menu (defaults to <tt>true</tt>)
        /// </summary>
        public bool enableGroupingMenu { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableNoGroups <tt>true</tt> to allow the user to turn off grouping (defaults to <tt>true</tt>)
        /// </summary>
        public bool enableNoGroups { get; set; }
        /// <summary>
        /// @cfg {String} groupByText Text displayed in the grid header menu for grouping by a column
        /// (defaults to 'Group By This Field').
        /// </summary>
        public JsString groupByText { get; set; }
        /// <summary>
        /// @cfg {String} groupMode Indicates how to construct the group identifier. <tt>'value'</tt> constructs the id using
        /// raw value, <tt>'display'</tt> constructs the id using the rendered value. Defaults to <tt>'value'</tt>.
        /// </summary>
        public JsString groupMode { get; set; }
        /// <summary>
        /// @cfg {String} groupTextTpl The template used to render the group header (defaults to <tt>'{text}'</tt>).
        /// This is used to format an object which contains the following properties:
        /// <div class="mdetail-params"><ul>
        /// <li><b>group</b> : String<p class="sub-desc">The <i>rendered</i> value of the group field.
        /// By default this is the unchanged value of the group field. If a <tt><b>{@link Ext.grid.Column#groupRenderer groupRenderer}</b></tt>
        /// is specified, it is the result of a call to that function.</p></li>
        /// <li><b>gvalue</b> : Object<p class="sub-desc">The <i>raw</i> value of the group field.</p></li>
        /// <li><b>text</b> : String<p class="sub-desc">The configured header (as described in <tt>{@link #showGroupName})</tt>
        /// if <tt>{@link #showGroupName}</tt> is <tt>true</tt>) plus the <i>rendered</i> group field value.</p></li>
        /// <li><b>groupId</b> : String<p class="sub-desc">A unique, generated ID which is applied to the
        /// View Element which contains the group.</p></li>
        /// <li><b>startRow</b> : Number<p class="sub-desc">The row index of the Record which caused group change.</p></li>
        /// <li><b>rs</b> : Array<p class="sub-desc">Contains a single element: The Record providing the data
        /// for the row which caused group change.</p></li>
        /// <li><b>cls</b> : String<p class="sub-desc">The generated class name string to apply to the group header Element.</p></li>
        /// <li><b>style</b> : String<p class="sub-desc">The inline style rules to apply to the group header Element.</p></li>
        /// </ul></div></p>
        /// See {@link Ext.XTemplate} for information on how to format data using a template. Possible usage:<pre><code>
        /// var grid = new Ext.grid.GridPanel({
        /// ...
        /// view: new Ext.grid.GroupingView({
        /// groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
        /// }),
        /// });
        /// </code></pre>
        /// </summary>
        public JsString groupTextTpl { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideGroupedColumn <tt>true</tt> to hide the column that is currently grouped (defaults to <tt>false</tt>)
        /// </summary>
        public bool hideGroupedColumn { get; set; }
        /// <summary>
        /// @cfg {Boolean} ignoreAdd <tt>true</tt> to skip refreshing the view when new rows are added (defaults to <tt>false</tt>)
        /// </summary>
        public bool ignoreAdd { get; set; }
        /// <summary>
        /// @cfg {Boolean} showGroupName If <tt>true</tt> will display a prefix plus a ': ' before the group field value
        /// in the group header line.  The prefix will consist of the <tt><b>{@link Ext.grid.Column#groupName groupName}</b></tt>
        /// (or the configured <tt><b>{@link Ext.grid.Column#header header}</b></tt> if not provided) configured in the
        /// {@link Ext.grid.Column} for each set of grouped rows (defaults to <tt>true</tt>).
        /// </summary>
        public bool showGroupName { get; set; }
        /// <summary>
        /// @cfg {String} showGroupsText Text displayed in the grid header for enabling/disabling grouping
        /// (defaults to 'Show in Groups').
        /// </summary>
        public JsString showGroupsText { get; set; }
        /// <summary>
        /// @cfg {Boolean} startCollapsed <tt>true</tt> to start all groups collapsed (defaults to <tt>false</tt>)
        /// </summary>
        public bool startCollapsed { get; set; }
    }
    #endregion
    #region HeaderDragZone
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HeaderDragZone : Ext.dd.DragZone
    {
        public HeaderDragZone() { }
        public void afterInvalidDrop() { }
        public void afterValidDrop() { }
        public void completeDrop() { }
        public HeaderDragZone(object grid, object hd, object hd2) { }
        public void getDragData(object e) { }
        public void onInitDrag(object e) { }
        public object maxDragWidth { get; set; }
    }
    #endregion
    #region HeaderDropZone
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HeaderDropZone : Ext.dd.DropZone
    {
        public HeaderDropZone() { }
        public HeaderDropZone(object grid, object hd, object hd2) { }
        public void getTargetFromEvent(object e) { }
        public void nextVisible(object h) { }
        public void onNodeDrop(object n, object dd, object e, object data) { }
        public void onNodeEnter(object n, object dd, object e, object data) { }
        public void onNodeOut(object n, object dd, object e, object data) { }
        public void onNodeOver(object n, object dd, object e, object data) { }
        public void positionIndicator(object h, object n, object e) { }
        public void prevVisible(object h) { }
    }
    #endregion
    #region NumberColumn
    /// <summary>
    /// @class Ext.grid.NumberColumn
    /// @extends Ext.grid.Column
    /// <p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the
    /// {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class NumberColumn : Ext.grid.Column
    {
        public NumberColumn() { }
        public NumberColumn(object cfg) { }
        /// <summary>
        /// @cfg {String} format
        /// A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
        /// (defaults to <tt>'0,000.00'</tt>).
        /// </summary>
        public JsString format { get; set; }
    }
    #endregion
    #region PivotAggregatorMgr
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PivotAggregatorMgr
    {
    }
    #endregion
    #region PivotAxis
    /// <summary>
    /// @class Ext.grid.PivotAxis
    /// @extends Ext.Component
    /// <p>PivotAxis is a class that supports a {@link Ext.grid.PivotGrid}. Each PivotGrid contains two PivotAxis instances - the left
    /// axis and the top axis. Each PivotAxis defines an ordered set of dimensions, each of which should correspond to a field in a
    /// Store's Record (see {@link Ext.grid.PivotGrid} documentation for further explanation).</p>
    /// <p>Developers should have little interaction with the PivotAxis instances directly as most of their management is performed by
    /// the PivotGrid. An exception is the dynamic reconfiguration of axes at run time - to achieve this we use PivotAxis's
    /// {@link #setDimensions} function and refresh the grid:</p>
    /// <pre><code>
    /// var pivotGrid = new Ext.grid.PivotGrid({
    /// //some PivotGrid config here
    /// });
    /// //change the left axis dimensions
    /// pivotGrid.leftAxis.setDimensions([
    /// {
    /// dataIndex: 'person',
    /// direction: 'DESC',
    /// width    : 100
    /// },
    /// {
    /// dataIndex: 'product',
    /// direction: 'ASC',
    /// width    : 80
    /// }
    /// ]);
    /// pivotGrid.view.refresh(true);
    /// </code></pre>
    /// This clears the previous dimensions on the axis and redraws the grid with the new dimensions.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PivotAxis : Ext.Component
    {
        /// <summary>
        /// @private
        /// Uses the calculated set of tuples to build an array of headers that can be rendered into a table using rowspan or
        /// colspan. Basically this takes the set of tuples and spans any cells that run into one another, so if we had dimensions
        /// of Person and Product and several tuples containing different Products for the same Person, those Products would be
        /// spanned.
        /// @return {Array} The headers
        /// </summary>
        public JsArray buildHeaders() { return null; }
        /// <summary>
        /// @private
        /// </summary>
        public void getRecordInfo(object record) { }
        /// <summary>
        /// @private
        /// Returns the set of all unique tuples based on the bound store and dimension definitions.
        /// Internally we construct a new, temporary store to make use of the multi-sort capabilities of Store. In
        /// 4.x this functionality should have been moved to MixedCollection so this step should not be needed.
        /// @return {Array} All unique tuples
        /// </summary>
        public JsArray getTuples() { return null; }
        /// <summary>
        /// @private
        /// Builds the html table that contains the dimensions for this axis. This branches internally between vertical
        /// and horizontal orientations because the table structure is slightly different in each case
        /// </summary>
        public void onRender(object ct, object position) { }
        /// <summary>
        /// @private
        /// Specialised renderer for horizontal oriented axes
        /// @return {Object} The HTML Domspec for a horizontal oriented axis
        /// </summary>
        public JsObject renderHorizontalRows() { return null; }
        /// <summary>
        /// @private
        /// Specialised renderer for vertical oriented axes
        /// @return {Object} The HTML Domspec for a vertical oriented axis
        /// </summary>
        public JsObject renderVerticalRows() { return null; }
        /// <summary>
        /// Updates the dimensions used by this axis
        /// @param {Array} dimensions The new dimensions
        /// </summary>
        public void setDimensions(JsArray dimensions) { }
        /// <summary>
        /// @cfg {Number} defaultHeaderWidth The width to render each row header that does not have a width specified via
        /// {@link #getRowGroupHeaders}. Defaults to 80.
        /// </summary>
        public JsNumber defaultHeaderWidth { get; set; }
        /// <summary>
        /// @cfg {String} orientation One of 'vertical' or 'horizontal'. Defaults to horizontal
        /// </summary>
        public JsString orientation { get; set; }
        /// <summary>
        /// @private
        /// @cfg {Number} paddingWidth The amount of padding used by each cell.
        /// TODO: From 4.x onwards this can be removed as it won't be needed. For now it is used to account for the differences between
        /// the content box and border box measurement models
        /// </summary>
        public JsNumber paddingWidth { get; set; }
    }
    #endregion
    #region PivotGrid
    /// <summary>
    /// @class Ext.grid.PivotGrid
    /// @extends Ext.grid.GridPanel
    /// <p>The PivotGrid component enables rapid summarization of large data sets. It provides a way to reduce a large set of
    /// data down into a format where trends and insights become more apparent. A classic example is in sales data; a company
    /// will often have a record of all sales it makes for a given period - this will often encompass thousands of rows of
    /// data. The PivotGrid allows you to see how well each salesperson performed, which cities generate the most revenue,
    /// how products perform between cities and so on.</p>
    /// <p>A PivotGrid is composed of two axes (left and top), one {@link #measure} and one {@link #aggregator aggregation}
    /// function. Each axis can contain one or more {@link #dimension}, which are ordered into a hierarchy. Dimensions on the
    /// left axis can also specify a width. Each dimension in each axis can specify its sort ordering, defaulting to "ASC",
    /// and must specify one of the fields in the {@link Ext.data.Record Record} used by the PivotGrid's
    /// {@link Ext.data.Store Store}.</p>
    /// <pre><code>
    /// // This is the record representing a single sale
    /// var SaleRecord = Ext.data.Record.create([
    /// {name: 'person',   type: 'string'},
    /// {name: 'product',  type: 'string'},
    /// {name: 'city',     type: 'string'},
    /// {name: 'state',    type: 'string'},
    /// {name: 'year',     type: 'int'},
    /// {name: 'value',    type: 'int'}
    /// ]);
    /// // A simple store that loads SaleRecord data from a url
    /// var myStore = new Ext.data.Store({
    /// url: 'data.json',
    /// autoLoad: true,
    /// reader: new Ext.data.JsonReader({
    /// root: 'rows',
    /// idProperty: 'id'
    /// }, SaleRecord)
    /// });
    /// // Create the PivotGrid itself, referencing the store
    /// var pivot = new Ext.grid.PivotGrid({
    /// store     : myStore,
    /// aggregator: 'sum',
    /// measure   : 'value',
    /// leftAxis: [
    /// {
    /// width: 60,
    /// dataIndex: 'product'
    /// },
    /// {
    /// width: 120,
    /// dataIndex: 'person',
    /// direction: 'DESC'
    /// }
    /// ],
    /// topAxis: [
    /// {
    /// dataIndex: 'year'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>The specified {@link #measure} is the field from SaleRecord that is extracted from each combination
    /// of product and person (on the left axis) and year on the top axis. There may be several SaleRecords in the
    /// data set that share this combination, so an array of measure fields is produced. This array is then
    /// aggregated using the {@link #aggregator} function.</p>
    /// <p>The default aggregator function is sum, which simply adds up all of the extracted measure values. Other
    /// built-in aggregator functions are count, avg, min and max. In addition, you can specify your own function.
    /// In this example we show the code used to sum the measures, but you can return any value you like. See
    /// {@link #aggregator} for more details.</p>
    /// <pre><code>
    /// new Ext.grid.PivotGrid({
    /// aggregator: function(records, measure) {
    /// var length = records.length,
    /// total  = 0,
    /// i;
    /// for (i = 0; i < length; i++) {
    /// total += records[i].get(measure);
    /// }
    /// return total;
    /// },
    /// renderer: function(value) {
    /// return Math.round(value);
    /// },
    /// //your normal config here
    /// });
    /// </code></pre>
    /// <p><u>Renderers</u></p>
    /// <p>PivotGrid optionally accepts a {@link #renderer} function which can modify the data in each cell before it
    /// is rendered. The renderer is passed the value that would usually be placed in the cell and is expected to return
    /// the new value. For example let's imagine we had height data expressed as a decimal - here's how we might use a
    /// renderer to display the data in feet and inches notation:</p>
    /// <pre><code>
    /// new Ext.grid.PivotGrid({
    /// //in each case the value is a decimal number of feet
    /// renderer  : function(value) {
    /// var feet   = Math.floor(value),
    /// 12);
    /// return String.format("{0}' {1}\"", feet, inches);
    /// },
    /// //normal config here
    /// });
    /// </code></pre>
    /// <p><u>Reconfiguring</u></p>
    /// <p>All aspects PivotGrid's configuration can be updated at runtime. It is easy to change the {@link #setMeasure measure},
    /// {@link #setAggregator aggregation function}, {@link #setLeftAxis left} and {@link #setTopAxis top} axes and refresh the grid.</p>
    /// <p>In this case we reconfigure the PivotGrid to have city and year as the top axis dimensions, rendering the average sale
    /// value into the cells:</p>
    /// <pre><code>
    /// //the left axis can also be changed
    /// pivot.topAxis.setDimensions([
    /// {dataIndex: 'city', direction: 'DESC'},
    /// {dataIndex: 'year', direction: 'ASC'}
    /// ]);
    /// pivot.setMeasure('value');
    /// pivot.setAggregator('avg');
    /// pivot.view.refresh(true);
    /// </code></pre>
    /// <p>See the {@link Ext.grid.PivotAxis PivotAxis} documentation for further detail on reconfiguring axes.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PivotGrid : Ext.grid.GridPanel
    {
        /// <summary>
        /// @private
        /// @return {Array} 2-dimensional array of cell data
        /// </summary>
        public JsArray extractData() { return null; }
        /// <summary>
        /// Returns the function currently used to aggregate the records in each Pivot cell
        /// @return {Function} The current aggregator function
        /// </summary>
        public JsAction getAggregator() { return null; }
        /// <summary>
        /// Returns the grid's GridView object.
        /// @return {Ext.grid.PivotGridView} The grid view
        /// </summary>
        public PivotGridView getView() { return null; }
        /// <summary>
        /// @private
        /// Creates the top and left axes. Should usually only need to be called once from initComponent
        /// </summary>
        public void initAxes() { }
        public new void initComponent() { }
        /// <summary>
        /// Sets the function to use when aggregating data for each cell.
        /// @param {String|Function} aggregator The new aggregator function or named function string
        /// </summary>
        public void setAggregator(object aggregator) { }
        /// <summary>
        /// Sets the left axis of this pivot grid. Optionally refreshes the grid afterwards.
        /// @param {Ext.grid.PivotAxis} axis The pivot axis
        /// @param {Boolean} refresh True to immediately refresh the grid and its axes (defaults to false)
        /// </summary>
        public void setLeftAxis(PivotAxis axis, bool refresh) { }
        /// <summary>
        /// Sets the field name to use as the Measure in this Pivot Grid
        /// @param {String} measure The field to make the measure
        /// </summary>
        public void setMeasure(JsString measure) { }
        /// <summary>
        /// Sets the top axis of this pivot grid. Optionally refreshes the grid afterwards.
        /// @param {Ext.grid.PivotAxis} axis The pivot axis
        /// @param {Boolean} refresh True to immediately refresh the grid and its axes (defaults to false)
        /// </summary>
        public void setTopAxis(PivotAxis axis, bool refresh) { }
        /// <summary>
        /// @cfg {String|Function} aggregator The aggregation function to use to combine the measures extracted
        /// for each dimension combination. Can be any of the built-in aggregators (sum, count, avg, min, max).
        /// Can also be a function which accepts two arguments (an array of Records to aggregate, and the measure
        /// to aggregate them on) and should return a String.
        /// </summary>
        public object aggregator { get; set; }
    }
    #endregion
    #region PivotGridView
    /// <summary>
    /// @class Ext.grid.PivotGridView
    /// @extends Ext.grid.GridView
    /// Specialised GridView for rendering Pivot Grid components. Config can be passed to the PivotGridView via the PivotGrid constructor's
    /// viewConfig option:
    /// <pre><code>
    /// new Ext.grid.PivotGrid({
    /// viewConfig: {
    /// title: 'My Pivot Grid',
    /// getCellCls: function(value) {
    /// return value > 10 'red' : 'green';
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>Currently {@link #title} and {@link #getCellCls} are the only configuration options accepted by PivotGridView. All other
    /// interaction is performed via the {@link Ext.grid.PivotGrid PivotGrid} class.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PivotGridView : Ext.grid.GridView
    {
        /// <summary>
        /// Returns the headers to be rendered at the top of the grid. Should be a 2-dimensional array, where each item specifies the number
        /// of columns it groups (column in this case refers to normal grid columns). In the example below we have 5 city groups, which are
        /// each part of a continent supergroup. The colspan for each city group refers to the number of normal grid columns that group spans,
        /// so in this case the grid would be expected to have a total of 12 columns:
        /// <pre><code>
        /// [
        /// {
        /// items: [
        /// {header: 'England',   colspan: 5},
        /// {header: 'USA',       colspan: 3}
        /// ]
        /// },
        /// {
        /// items: [
        /// {header: 'London',    colspan: 2},
        /// {header: 'Cambridge', colspan: 3},
        /// {header: 'Palo Alto', colspan: 3}
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// In the example above we have cities nested under countries. The nesting could be deeper if desired - e.g. Continent -> Country ->
        /// State -> City, or any other structure. The only constaint is that the same depth must be used throughout the structure.
        /// @return {Array} A tree structure containing the headers to be rendered. Must include the colspan property at each level, which should
        /// be the sum of all child nodes beneath this node.
        /// </summary>
        public JsArray getColumnHeaders() { return null; }
        /// <summary>
        /// @private
        /// Takes row headers into account when calculating total available width
        /// </summary>
        public void getGridInnerWidth() { }
        /// <summary>
        /// Returns the headers to be rendered on the left of the grid. Should be a 2-dimensional array, where each item specifies the number
        /// of rows it groups. In the example below we have 5 city groups, which are each part of a continent supergroup. The rowspan for each
        /// city group refers to the number of normal grid columns that group spans, so in this case the grid would be expected to have a
        /// total of 12 rows:
        /// <pre><code>
        /// [
        /// {
        /// width: 90,
        /// items: [
        /// {header: 'England',   rowspan: 5},
        /// {header: 'USA',       rowspan: 3}
        /// ]
        /// },
        /// {
        /// width: 50,
        /// items: [
        /// {header: 'London',    rowspan: 2},
        /// {header: 'Cambridge', rowspan: 3},
        /// {header: 'Palo Alto', rowspan: 3}
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// In the example above we have cities nested under countries. The nesting could be deeper if desired - e.g. Continent -> Country ->
        /// State -> City, or any other structure. The only constaint is that the same depth must be used throughout the structure.
        /// @return {Array} A tree structure containing the headers to be rendered. Must include the colspan property at each level, which should
        /// be the sum of all child nodes beneath this node.
        /// Each group may specify the width it should be rendered with.
        /// @return {Array} The row groups
        /// </summary>
        public JsArray getRowHeaders() { return null; }
        /// <summary>
        /// @private
        /// Returns the total height of all column headers
        /// @return {Number} The total height
        /// </summary>
        public JsNumber getTotalColumnHeaderHeight() { return null; }
        /// <summary>
        /// Returns the total width of all row headers as specified by {@link #getRowHeaders}
        /// @return {Number} The total width
        /// </summary>
        public JsNumber getTotalRowHeaderWidth() { return null; }
        /// <summary>
        /// @private
        /// Sets up the reference to the row headers element
        /// </summary>
        public new void initElements() { }
        /// <summary>
        /// @private
        /// Adds a gcell template to the internal templates object. This is used to render the headers in a multi-level column header.
        /// </summary>
        public new void initTemplates() { }
        /// <summary>
        /// @private
        /// Overridden to test whether the user is hovering over a group cell, in which case we don't show the menu
        /// </summary>
        public void isMenuDisabled(object cellIndex, object el) { }
        /// <summary>
        /// @private
        /// Make sure that the headers and rows are all sized correctly during layout
        /// </summary>
        public new void onLayout(object width, object height) { }
        /// <summary>
        /// Refreshs the grid UI
        /// @param {Boolean} headersToo (optional) True to also refresh the headers
        /// </summary>
        public new void refresh(bool headersToo) { }
        /// <summary>
        /// @private
        /// Renders all column header groups at all levels based on the structure fetched from {@link #getColumnHeaders}
        /// </summary>
        public void renderGroupColumnHeaders() { }
        /// <summary>
        /// @private
        /// Renders all row header groups at all levels based on the structure fetched from {@link #getGroupRowHeaders}
        /// </summary>
        public void renderGroupRowHeaders() { }
        /// <summary>
        /// @private
        /// Renders rows between start and end indexes
        /// @param {Number} startRow Index of the first row to render
        /// @param {Number} endRow Index of the last row to render
        /// </summary>
        public new void renderRows(JsNumber startRow, JsNumber endRow) { }
        /// <summary>
        /// @private
        /// Slight specialisation of the GridView renderUI - just adds the row headers
        /// </summary>
        public new void renderUI() { }
        /// <summary>
        /// @private
        /// Resizes all rendered rows to the given width. Usually called by onLayout
        /// @param {Number} width The new width
        /// </summary>
        public void resizeAllRows(JsNumber width) { }
        /// <summary>
        /// @private
        /// Called on layout, ensures that the width of each column header is correct. Omitting this can lead to faulty
        /// layouts when nested in a container.
        /// @param {Number} width The new width
        /// </summary>
        public void resizeColumnHeaders(JsNumber width) { }
        /// <summary>
        /// @private
        /// Sets the row header div to the correct width. Should be called after rendering and reconfiguration of headers
        /// </summary>
        public void resizeRowHeaders() { }
        /// <summary>
        /// Sets the title text in the top left segment of the PivotGridView
        /// @param {String} title The title
        /// </summary>
        public void setTitle(JsString title) { }
        /// <summary>
        /// @private
        /// Updates the Row Headers, deferring the updating of Column Headers to GridView
        /// </summary>
        public new void updateHeaders() { }
        /// <summary>
        /// The CSS class added to all group header cells. Defaults to 'grid-hd-group-cell'
        /// @property colHeaderCellCls
        /// @type String
        /// </summary>
        public JsString colHeaderCellCls { get; set; }
        /// <summary>
        /// @cfg {String} title Optional title to be placed in the top left corner of the PivotGrid. Defaults to an empty string.
        /// </summary>
        public JsString title { get; set; }
    }
    #endregion
    #region PropertyColumnModel
    /// <summary>
    /// @class Ext.grid.PropertyColumnModel
    /// @extends Ext.grid.ColumnModel
    /// A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly.
    /// @constructor
    /// @param {Ext.grid.Grid} grid The grid this store will be bound to
    /// @param {Object} source The source data config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PropertyColumnModel : Ext.grid.ColumnModel
    {
        public PropertyColumnModel() { }
        public PropertyColumnModel(object grid, object store) { }
        public new void destroy() { }
        public void destroyEditors(object editors) { }
        public void getCellEditor(object colIndex, object rowIndex) { }
        public void getPropertyName(object name) { }
        public void getRenderer(object col) { }
        public void isCellEditable(object colIndex, object rowIndex) { }
        public void renderBool(object bVal) { }
        public void renderCell(object val, object meta, object rec) { }
        public void renderDate(object dateVal) { }
        public void renderProp(object v) { }
        public JsString dateFormat { get; set; }
        public JsString falseText { get; set; }
        public JsString nameText { get; set; }
        public JsString trueText { get; set; }
        public JsString valueText { get; set; }
    }
    #endregion
    #region PropertyGrid
    /// <summary>
    /// @class Ext.grid.PropertyGrid
    /// @extends Ext.grid.EditorGridPanel
    /// A specialized grid implementation intended to mimic the traditional property grid as typically seen in
    /// development IDEs.  Each row in the grid represents a property of some object, and the data is stored
    /// as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:
    /// <pre><code>
    /// var grid = new Ext.grid.PropertyGrid({
    /// title: 'Properties Grid',
    /// autoHeight: true,
    /// width: 300,
    /// renderTo: 'grid-ct',
    /// source: {
    /// "(name)": "My Object",
    /// "Created": new Date(Date.parse('10/15/2006')),
    /// "Available": false,
    /// "Version": .01,
    /// "Description": "A test object"
    /// }
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {Object} config The grid config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PropertyGrid : Ext.grid.EditorGridPanel
    {
        public new void afterRender() { }
        /// <summary>
        /// Gets the source data object containing the property data.  See {@link #setSource} for details regarding the
        /// format of the data object.
        /// @return {Object} The data object
        /// </summary>
        public JsObject getSource() { return null; }
        public new void initComponent() { }
        public void onRender() { }
        /// <summary>
        /// Removes a property from the grid.
        /// @param {String} prop The name of the property to remove
        /// </summary>
        public void removeProperty(JsString prop) { }
        /// <summary>
        /// Sets the value of a property.
        /// @param {String} prop The name of the property to set
        /// @param {Mixed} value The value to test
        /// @param {Boolean} create (Optional) True to create the property if it doesn't already exist. Defaults to <tt>false</tt>.
        /// </summary>
        public void setProperty(JsString prop, object value, bool create) { }
        /// <summary>
        /// Sets the source data object containing the property data.  The data object can contain one or more name/value
        /// pairs representing all of the properties of an object to display in the grid, and this data will automatically
        /// be loaded into the grid's {@link #store}.  The values should be supplied in the proper data type if needed,
        /// otherwise string type will be assumed.  If the grid already contains data, this method will replace any
        /// existing data.  See also the {@link #source} config value.  Example usage:
        /// <pre><code>
        /// grid.setSource({
        /// "(name)": "My Object",
        /// "Created": new Date(Date.parse('10/15/2006')),  // date type
        /// "Available": false,  // boolean type
        /// "Version": .01,      // decimal type
        /// "Description": "A test object"
        /// });
        /// </code></pre>
        /// @param {Object} source The data object
        /// </summary>
        public void setSource(JsObject source) { }
        public new object clicksToEdit { get; set; }
        public new bool enableColumnMove { get; set; }
        public new bool enableHdMenu { get; set; }
        public new bool stripeRows { get; set; }
        public new bool trackMouseOver { get; set; }
    }
    #endregion
    #region PropertyRecord
    /// <summary>
    /// @class Ext.grid.PropertyRecord
    /// A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the
    /// {@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be
    /// created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}
    /// config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records
    /// can also be created explicitly as shwon below.  Example usage:
    /// <pre><code>
    /// var rec = new Ext.grid.PropertyRecord({
    /// name: 'Birthday',
    /// value: new Date(Date.parse('05/26/1972'))
    /// });
    /// // Add record to an already populated grid
    /// grid.store.addSorted(rec);
    /// </code></pre>
    /// @constructor
    /// @param {Object} config A data object in the format: {name: [name], value: [value]}.  The specified value's type
    /// will be read automatically by the grid to determine the type of editor to use when displaying it.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PropertyRecord
    {
    }
    #endregion
    #region PropertyStore
    /// <summary>
    /// @class Ext.grid.PropertyStore
    /// @extends Ext.util.Observable
    /// A custom wrapper for the {@link Ext.grid.PropertyGrid}'s {@link Ext.data.Store}. This class handles the mapping
    /// between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format
    /// required for compatibility with the underlying store. Generally this class should not need to be used directly --
    /// the grid's data should be accessed from the underlying store via the {@link #store} property.
    /// @constructor
    /// @param {Ext.grid.Grid} grid The grid this store will be bound to
    /// @param {Object} source The source data config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class PropertyStore : Ext.util.Observable
    {
        public PropertyStore() { }
        public PropertyStore(object grid, object source) { }
        public void getProperty(object row) { }
        public void getRec(object prop) { }
        public void getSource() { }
        public void isEditableValue(object val) { }
        public void onUpdate(object ds, object record, object type) { }
        public void remove(object prop) { }
        public void setSource(object o) { }
        public void setValue(object prop, object value, object create) { }
    }
    #endregion
    #region RowNumberer
    /// <summary>
    /// @class Ext.grid.RowNumberer
    /// This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides
    /// an automatic row numbering column.
    /// <br>Usage:<br>
    /// <pre><code>
    /// // This is a typical column config with the first column providing row numbers
    /// var colModel = new Ext.grid.ColumnModel([
    /// new Ext.grid.RowNumberer(),
    /// {header: "Name", width: 80, sortable: true},
    /// {header: "Code", width: 50, sortable: true},
    /// {header: "Description", width: 200, sortable: true}
    /// ]);
    /// </code></pre>
    /// @constructor
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class RowNumberer : JsObject
    {
        public RowNumberer() { }
        public RowNumberer(object config) { }
        public void renderer(object v, object p, object record, object rowIndex) { }
        public JsString dataIndex { get; set; }
        public bool @fixed { get; set; }
        /// <summary>
        /// @cfg {String} header Any valid text or HTML fragment to display in the header cell for the row
        /// number column (defaults to '').
        /// </summary>
        public JsString header { get; set; }
        public bool hideable { get; set; }
        public JsString id { get; set; }
        public bool menuDisabled { get; set; }
        /// <summary>
        /// @cfg {Boolean} sortable True if the row number column is sortable (defaults to false).
        /// @hide
        /// </summary>
        public bool sortable { get; set; }
        /// <summary>
        /// @cfg {Number} width The default width in pixels of the row number column (defaults to 23).
        /// </summary>
        public JsNumber width { get; set; }
    }
    #endregion
    #region RowSelectionModel
    /// <summary>
    /// @class Ext.grid.RowSelectionModel
    /// @extends Ext.grid.AbstractSelectionModel
    /// The default SelectionModel used by {@link Ext.grid.GridPanel}.
    /// It supports multiple selections and keyboard selection/navigation. The objects stored
    /// as selections and returned by {@link #getSelected}, and {@link #getSelections} are
    /// the {@link Ext.data.Record Record}s which provide the data for the selected rows.
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class RowSelectionModel : Ext.grid.AbstractSelectionModel
    {
        public RowSelectionModel() { }
        public void acceptsNav(object row, object col, object cm) { }
        /// <summary>
        /// Clears all selections if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
        /// @param {Boolean} fast (optional) <tt>true</tt> to bypass the
        /// conditional checks and events described in {@link #deselectRow}.
        /// </summary>
        public void clearSelections(bool fast) { }
        public RowSelectionModel(object config) { }
        /// <summary>
        /// Deselects a range of rows if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
        /// All rows in between startRow and endRow are also deselected.
        /// @param {Number} startRow The index of the first row in the range
        /// @param {Number} endRow The index of the last row in the range
        /// </summary>
        public void deselectRange(JsNumber startRow, JsNumber endRow, object preventViewNotify) { }
        /// <summary>
        /// Deselects a row.  Before deselecting a row, checks if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is locked}.
        /// If this check is satisfied the row will be deselected and followed up by
        /// firing the {@link #rowdeselect} and {@link #selectionchange} events.
        /// @param {Number} row The index of the row to deselect
        /// @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
        /// prevent notifying the view (disables updating the selected appearance)
        /// </summary>
        public void deselectRow(object index, bool preventViewNotify) { }
        public new void destroy() { }
        /// <summary>
        /// Calls the passed function with each selection. If the function returns
        /// <tt>false</tt>, iteration is stopped and this function returns
        /// <tt>false</tt>. Otherwise it returns <tt>true</tt>.
        /// @param {Function} fn The function to call upon each iteration. It is passed the selected {@link Ext.data.Record Record}.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this RowSelectionModel.
        /// @return {Boolean} true if all selections were iterated
        /// </summary>
        public bool each(JsAction fn, JsObject scope) { return false; }
        /// <summary>
        /// Gets the number of selected rows.
        /// @return {Number}
        /// </summary>
        public void getCount() { }
        /// <summary>
        /// Returns the first selected record.
        /// @return {Record}
        /// </summary>
        public void getSelected() { }
        /// <summary>
        /// Returns the selected records
        /// @return {Array} Array of selected records
        /// </summary>
        public JsArray getSelections() { return null; }
        public void handleMouseDown(object g, object rowIndex, object e) { }
        /// <summary>
        /// Returns true if there is a next record to select
        /// @return {Boolean}
        /// </summary>
        public void hasNext() { }
        /// <summary>
        /// Returns true if there is a previous record to select
        /// @return {Boolean}
        /// </summary>
        public void hasPrevious() { }
        /// <summary>
        /// Returns <tt>true</tt> if there is a selection.
        /// @return {Boolean}
        /// </summary>
        public void hasSelection() { }
        public void initEvents() { }
        /// <summary>
        /// Returns <tt>true</tt> if the specified record id is selected.
        /// @param {String} id The id of record to check
        /// @return {Boolean}
        /// </summary>
        public void isIdSelected(JsString id) { }
        /// <summary>
        /// Returns <tt>true</tt> if the specified row is selected.
        /// @param {Number/Record} index The record or index of the record to check
        /// @return {Boolean}
        /// </summary>
        public void isSelected(object index) { }
        public void onEditorKey(object field, object e) { }
        public void onEditorSelect(object row, object lastRow) { }
        public void onKeyPress(object e, object name) { }
        public void onRefresh() { }
        public void onRemove(object v, object index, object r) { }
        public void onRowUpdated(object v, object index, object r) { }
        /// <summary>
        /// Selects all rows if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
        /// </summary>
        public void selectAll() { }
        /// <summary>
        /// Selects the first row in the grid.
        /// </summary>
        public void selectFirstRow() { }
        /// <summary>
        /// Select the last row.
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
        /// </summary>
        public void selectLastRow(bool keepExisting) { }
        /// <summary>
        /// Selects the row immediately following the last selected row.
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
        /// @return {Boolean} <tt>true</tt> if there is a next row, else <tt>false</tt>
        /// </summary>
        public bool selectNext(bool keepExisting) { return false; }
        /// <summary>
        /// Selects the row that precedes the last selected row.
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
        /// @return {Boolean} <tt>true</tt> if there is a previous row, else <tt>false</tt>
        /// </summary>
        public bool selectPrevious(bool keepExisting) { return false; }
        /// <summary>
        /// Selects a range of rows if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
        /// All rows in between startRow and endRow are also selected.
        /// @param {Number} startRow The index of the first row in the range
        /// @param {Number} endRow The index of the last row in the range
        /// @param {Boolean} keepExisting (optional) True to retain existing selections
        /// </summary>
        public void selectRange(JsNumber startRow, JsNumber endRow, bool keepExisting) { }
        /// <summary>
        /// Select records.
        /// @param {Array} records The records to select
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
        /// </summary>
        public void selectRecords(JsArray records, bool keepExisting) { }
        /// <summary>
        /// Selects a row.  Before selecting a row, checks if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the
        /// {@link #beforerowselect} event.  If these checks are satisfied the row
        /// will be selected and followed up by  firing the {@link #rowselect} and
        /// {@link #selectionchange} events.
        /// @param {Number} row The index of the row to select
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
        /// @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
        /// prevent notifying the view (disables updating the selected appearance)
        /// </summary>
        public void selectRow(object index, bool keepExisting, bool preventViewNotify) { }
        /// <summary>
        /// Selects multiple rows.
        /// @param {Array} rows Array of the indexes of the row to select
        /// @param {Boolean} keepExisting (optional) <tt>true</tt> to keep
        /// existing selections (defaults to <tt>false</tt>)
        /// </summary>
        public void selectRows(JsArray rows, bool keepExisting) { }
        /// <summary>
        /// @cfg {Boolean} singleSelect
        /// <tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>
        /// allowing multiple selections)
        /// </summary>
        public bool singleSelect { get; set; }
    }
    #endregion
    #region SplitDragZone
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SplitDragZone : Ext.dd.DDProxy
    {
        public SplitDragZone() { }
        public void autoOffset() { }
        public void b4StartDrag(object x, object y) { }
        public SplitDragZone(object grid, object hd, object hd2) { }
        public void endDrag(object e) { }
        public void handleMouseDown(object e) { }
    }
    #endregion
    #region TemplateColumn
    /// <summary>
    /// @class Ext.grid.TemplateColumn
    /// @extends Ext.grid.Column
    /// <p>A Column definition class which renders a value by processing a {@link Ext.data.Record Record}'s
    /// {@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.
    /// See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more
    /// details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TemplateColumn : Ext.grid.Column
    {
        public TemplateColumn() { }
        /// <summary>
        /// @cfg {String/XTemplate} tpl
        /// An {@link Ext.XTemplate XTemplate}, or an XTemplate <i>definition string</i> to use to process a
        /// {@link Ext.data.Record Record}'s {@link Ext.data.Record#data data} to produce a column's rendered value.
        /// </summary>
        public TemplateColumn(object cfg) { }
    }
    #endregion
}
#endregion
#region Ext.layout
namespace Ext.layout
{
    #region AbsoluteLayout
    /// <summary>
    /// @class Ext.layout.AbsoluteLayout
    /// @extends Ext.layout.AnchorLayout
    /// <p>This is a layout that inherits the anchoring of <b>{@link Ext.layout.AnchorLayout}</b> and adds the
    /// ability for x/y positioning using the standard x and y component config options.</p>
    /// <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
    /// configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// var form = new Ext.form.FormPanel({
    /// title: 'Absolute Layout',
    /// layout:'absolute',
    /// layoutConfig: {
    /// // layout-specific configs go here
    /// extraCls: 'x-abs-layout-item',
    /// },
    /// baseCls: 'x-plain',
    /// url:'save-form.php',
    /// defaultType: 'textfield',
    /// items: [{
    /// x: 0,
    /// y: 5,
    /// xtype:'label',
    /// text: 'Send To:'
    /// },{
    /// x: 60,
    /// y: 0,
    /// name: 'to',
    /// anchor:'100%'  // anchor width by percentage
    /// },{
    /// x: 0,
    /// y: 35,
    /// xtype:'label',
    /// text: 'Subject:'
    /// },{
    /// x: 60,
    /// y: 30,
    /// name: 'subject',
    /// anchor: '100%'  // anchor width by percentage
    /// },{
    /// x:0,
    /// y: 60,
    /// xtype: 'textarea',
    /// name: 'msg',
    /// anchor: '100% 100%'  // anchor width and height
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AbsoluteLayout : Ext.layout.AnchorLayout
    {
        public new void adjustHeightAnchor(object value, object comp) { }
        public new void adjustWidthAnchor(object value, object comp) { }
        public new void onLayout(object ct, object target) { }
        public JsString extraCls { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region AccordionLayout
    /// <summary>
    /// @class Ext.layout.AccordionLayout
    /// @extends Ext.layout.FitLayout
    /// <p>This is a layout that manages multiple Panels in an expandable accordion style such that only
    /// <b>one Panel can be expanded at any given time</b>. Each Panel has built-in support for expanding and collapsing.</p>
    /// <p>Note: Only Ext.Panels <b>and all subclasses of Ext.Panel</b> may be used in an accordion layout Container.</p>
    /// <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
    /// configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// var accordion = new Ext.Panel({
    /// title: 'Accordion Layout',
    /// layout:'accordion',
    /// defaults: {
    /// // applied to each contained panel
    /// bodyStyle: 'padding:15px'
    /// },
    /// layoutConfig: {
    /// // layout-specific configs go here
    /// titleCollapse: false,
    /// animate: true,
    /// activeOnTop: true
    /// },
    /// items: [{
    /// title: 'Panel 1',
    /// html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    /// },{
    /// title: 'Panel 2',
    /// html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    /// },{
    /// title: 'Panel 3',
    /// html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AccordionLayout : Ext.layout.FitLayout
    {
        public void beforeExpand(object p, object anim) { }
        public new void onRemove(object c) { }
        public void renderItem(object c) { }
        public void setActive(object item, object expand) { }
        /// <summary>
        /// Sets the active (expanded) item in the layout.
        /// @param {String/Number} item The string component id or numeric index of the item to activate
        /// </summary>
        public void setActiveItem(object item) { }
        public new void setItemSize(object item, object size) { }
        /// <summary>
        /// @cfg {Boolean} activeOnTop
        /// True to swap the position of each panel as it is expanded so that it becomes the first item in the container,
        /// false to keep the panels in the rendered order. <b>This is NOT compatible with "animate:true"</b> (defaults to false).
        /// </summary>
        public bool activeOnTop { get; set; }
        /// <summary>
        /// @cfg {Boolean} animate
        /// True to slide the contained panels open and closed during expand/collapse using animation, false to open and
        /// close directly with no animation (defaults to false).  Note: to defer to the specific config setting of each
        /// contained panel for this property, set this to undefined at the layout level.
        /// </summary>
        public bool animate { get; set; }
        /// <summary>
        /// @cfg {Boolean} autoWidth
        /// True to set each contained item's width to 'auto', false to use the item's current width (defaults to true).
        /// Note that some components, in particular the {@link Ext.grid.GridPanel grid}, will not function properly within
        /// layouts if they have auto width, so in such cases this config should be set to false.
        /// </summary>
        public bool autoWidth { get; set; }
        /// <summary>
        /// @cfg {Boolean} collapseFirst
        /// True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
        /// in the contained panels' title bars, false to render it last (defaults to false).
        /// </summary>
        public bool collapseFirst { get; set; }
        /// <summary>
        /// @cfg {Boolean} fill
        /// True to adjust the active item's height to fill the available space in the container, false to use the
        /// item's current height, or auto height if not explicitly set (defaults to true).
        /// </summary>
        public bool fill { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideCollapseTool
        /// True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false).
        /// When set to true, {@link #titleCollapse} should be true also.
        /// </summary>
        public bool hideCollapseTool { get; set; }
        /// <summary>
        /// @cfg {Boolean} sequence
        /// <b>Experimental</b>. If animate is set to true, this will result in each animation running in sequence.
        /// </summary>
        public bool sequence { get; set; }
        /// <summary>
        /// @cfg {Boolean} titleCollapse
        /// True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow
        /// expand/collapse only when the toggle tool button is clicked (defaults to true).  When set to false,
        /// {@link #hideCollapseTool} should be false also.
        /// </summary>
        public bool titleCollapse { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region AnchorLayout
    /// <summary>
    /// @class Ext.layout.AnchorLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.
    /// If the container is resized, all anchored items are automatically rerendered according to their
    /// <b><tt>{@link #anchor}</tt></b> rules.</p>
    /// <p>This class is intended to be extended or created via the layout:'anchor' {@link Ext.Container#layout}
    /// config, and should generally not need to be created directly via the new keyword.</p>
    /// <p>AnchorLayout does not have any direct config options (other than inherited ones). By default,
    /// AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the
    /// container using the AnchorLayout can supply an anchoring-specific config property of <b>anchorSize</b>.
    /// If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating
    /// anchor measurements based on it instead, allowing the container to be sized independently of the anchoring
    /// logic if necessary.  For example:</p>
    /// <pre><code>
    /// var viewport = new Ext.Viewport({
    /// layout:'anchor',
    /// anchorSize: {width:800, height:600},
    /// items:[{
    /// title:'Item 1',
    /// html:'Content 1',
    /// width:800,
    /// anchor:'right 20%'
    /// },{
    /// title:'Item 2',
    /// html:'Content 2',
    /// width:300,
    /// anchor:'50% 30%'
    /// },{
    /// title:'Item 3',
    /// html:'Content 3',
    /// width:600,
    /// anchor:'-100 50%'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AnchorLayout : Ext.layout.ContainerLayout
    {
        public void adjustHeightAnchor(object value, object comp) { }
        public void adjustWidthAnchor(object value, object comp) { }
        public void getLayoutTargetSize() { }
        public new void onLayout(object container, object target) { }
        public void parseAnchor(object a, object start, object cstart) { }
        /// <summary>
        /// @cfg {String} defaultAnchor
        /// *
        /// default anchor for all child container items applied if no anchor or specific width is set on the child item.  Defaults to '100%'.
        /// *
        /// </summary>
        public JsString defaultAnchor { get; set; }
        public new bool monitorResize { get; set; }
        public JsRegExp parseAnchorRE { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region AutoLayout
    /// <summary>
    /// @class Ext.layout.AutoLayout
    /// <p>The AutoLayout is the default layout manager delegated by {@link Ext.Container} to
    /// render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
    /// a {@link Ext.Container Container}.</tt>.  AutoLayout provides only a passthrough of any layout calls
    /// to any child containers.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AutoLayout : Ext.layout.ContainerLayout
    {
        public new void onLayout(object ct, object target) { }
        public new bool monitorResize { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region BorderLayout
    /// <summary>
    /// @class Ext.layout.BorderLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This is a multi-pane, application-oriented UI layout style that supports multiple
    /// nested panels, automatic {@link Ext.layout.BorderLayout.Region#split split} bars between
    /// {@link Ext.layout.BorderLayout.Region#BorderLayout.Region regions} and built-in
    /// {@link Ext.layout.BorderLayout.Region#collapsible expanding and collapsing} of regions.</p>
    /// <p>This class is intended to be extended or created via the <tt>layout:'border'</tt>
    /// {@link Ext.Container#layout} config, and should generally not need to be created directly
    /// via the new keyword.</p>
    /// <p>BorderLayout does not have any direct config options (other than inherited ones).
    /// All configuration options available for customizing the BorderLayout are at the
    /// {@link Ext.layout.BorderLayout.Region} and {@link Ext.layout.BorderLayout.SplitRegion}
    /// levels.</p>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// var myBorderPanel = new Ext.Panel({
    /// {@link Ext.Component#renderTo renderTo}: document.body,
    /// {@link Ext.BoxComponent#width width}: 700,
    /// {@link Ext.BoxComponent#height height}: 500,
    /// {@link Ext.Panel#title title}: 'Border Layout',
    /// {@link Ext.Container#layout layout}: 'border',
    /// {@link Ext.Container#items items}: [{
    /// {@link Ext.Panel#title title}: 'South Region is resizable',
    /// {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'south',     // position for region
    /// {@link Ext.BoxComponent#height height}: 100,
    /// {@link Ext.layout.BorderLayout.Region#split split}: true,         // enable resizing
    /// {@link Ext.SplitBar#minSize minSize}: 75,         // defaults to {@link Ext.layout.BorderLayout.Region#minHeight 50}
    /// {@link Ext.SplitBar#maxSize maxSize}: 150,
    /// {@link Ext.layout.BorderLayout.Region#margins margins}: '0 5 5 5'
    /// },{
    /// // xtype: 'panel' implied by default
    /// {@link Ext.Panel#title title}: 'West Region is collapsible',
    /// {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}:'west',
    /// {@link Ext.layout.BorderLayout.Region#margins margins}: '5 0 0 5',
    /// {@link Ext.BoxComponent#width width}: 200,
    /// {@link Ext.layout.BorderLayout.Region#collapsible collapsible}: true,   // make collapsible
    /// {@link Ext.layout.BorderLayout.Region#cmargins cmargins}: '5 5 0 5', // adjust top margin when collapsed
    /// {@link Ext.Component#id id}: 'west-region-container',
    /// {@link Ext.Container#layout layout}: 'fit',
    /// {@link Ext.Panel#unstyled unstyled}: true
    /// },{
    /// {@link Ext.Panel#title title}: 'Center Region',
    /// {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'center',     // center region is required, no width/height specified
    /// {@link Ext.Component#xtype xtype}: 'container',
    /// {@link Ext.Container#layout layout}: 'fit',
    /// {@link Ext.layout.BorderLayout.Region#margins margins}: '5 5 0 0'
    /// }]
    /// });
    /// </code></pre>
    /// <p><b><u>Notes</u></b>:</p><div class="mdetail-params"><ul>
    /// <li>Any container using the BorderLayout <b>must</b> have a child item with <tt>region:'center'</tt>.
    /// The child item in the center region will always be resized to fill the remaining space not used by
    /// the other regions in the layout.</li>
    /// <li>Any child items with a region of <tt>west</tt> or <tt>east</tt> must have <tt>width</tt> defined
    /// (an integer representing the number of pixels that the region should take up).</li>
    /// <li>Any child items with a region of <tt>north</tt> or <tt>south</tt> must have <tt>height</tt> defined.</li>
    /// <li>The regions of a BorderLayout are <b>fixed at render time</b> and thereafter, its child Components may not be removed or added</b>.  To add/remove
    /// Components within a BorderLayout, have them wrapped by an additional Container which is directly
    /// managed by the BorderLayout.  If the region is to be collapsible, the Container used directly
    /// by the BorderLayout manager should be a Panel.  In the following example a Container (an Ext.Panel)
    /// is added to the west region:
    /// <div style="margin-left:16px"><pre><code>
    /// wrc = {@link Ext#getCmp Ext.getCmp}('west-region-container');
    /// wrc.{@link Ext.Panel#removeAll removeAll}();
    /// wrc.{@link Ext.Container#add add}({
    /// title: 'Added Panel',
    /// html: 'Some content'
    /// });
    /// wrc.{@link Ext.Container#doLayout doLayout}();
    /// </code></pre></div>
    /// </li>
    /// <li> To reference a {@link Ext.layout.BorderLayout.Region Region}:
    /// <div style="margin-left:16px"><pre><code>
    /// wr = myBorderPanel.layout.west;
    /// </code></pre></div>
    /// </li>
    /// </ul></div>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BorderLayout : Ext.layout.ContainerLayout
    {
        public new void destroy() { }
        public void getLayoutTargetSize() { }
        public new void onLayout(object ct, object target) { }
        /// <summary>
        /// @class Ext.layout.BorderLayout.SplitRegion
        /// @extends Ext.layout.BorderLayout.Region
        /// <p>This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that
        /// has a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar
        /// is configurable to move either {@link #tickSize smooth or incrementally}.</p>
        /// @constructor
        /// Create a new SplitRegion.
        /// @param {Layout} layout The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region.
        /// @param {Object} config The configuration options
        /// @param {String} position The region position.  Valid values are: north, south, east, west and center.  Every
        /// BorderLayout must have a center region for the primary content -- all other regions are optional.
        /// </summary>
        public static void SplitRegion(object layout, JsObject config, object pos) { }
        public new bool monitorResize { get; set; }
        public bool rendered { get; set; }
        public JsString targetCls { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region BoxLayout
    /// <summary>
    /// @class Ext.layout.BoxLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BoxLayout : Ext.layout.ContainerLayout
    {
        public BoxLayout() { }
        public BoxLayout(object config) { }
        /// <summary>
        /// @private
        /// </summary>
        public new void destroy() { }
        public void getLayoutTargetSize() { }
        /// <summary>
        /// @private
        /// Returns all items that are both rendered and visible
        /// @return {Array} All matching items
        /// </summary>
        public JsArray getVisibleItems(object ct) { return null; }
        /// <summary>
        /// @private
        /// This should be called after onLayout of any BoxLayout subclass. If the target's overflow is not set to 'hidden',
        /// we need to lay out a second time because the scrollbars may have modified the height and width of the layout
        /// target. Having a Box layout inside such a target is therefore not recommended.
        /// @param {Object} previousTargetSize The size and height of the layout target before we just laid out
        /// @param {Ext.Container} container The container
        /// @param {Ext.Element} target The target element
        /// </summary>
        public void handleTargetOverflow(JsObject previousTargetSize, Container container, Element target) { }
        public new void isValidParent(object c, object target) { }
        /// <summary>
        /// @private
        /// Runs the child box calculations and caches them in childBoxCache. Subclasses can used these cached values
        /// when laying out
        /// </summary>
        public new void onLayout(object container, object target) { }
        public new void renderAll(object ct, object target) { }
        public void renderItem(object c) { }
        /// <summary>
        /// Resizes and repositions each child component
        /// @param {Array} boxes The box measurements
        /// </summary>
        public void updateChildBoxes(JsArray boxes) { }
        /// <summary>
        /// @private
        /// Called by onRender just before the child components are sized and positioned. This resizes the innerCt
        /// to make sure all child items fit within it. We call this before sizing the children because if our child
        /// items are larger than the previous innerCt size the browser will insert scrollbars and then remove them
        /// again immediately afterwards, giving a performance hit.
        /// Subclasses should provide an implementation.
        /// @param {Object} currentSize The current height and width of the innerCt
        /// @param {Array} calculations The new box calculations of all items to be laid out
        /// </summary>
        public void updateInnerCtSize(object tSize, object calcs) { }
        public JsString extraCls { get; set; }
        public JsString innerCls { get; set; }
        public new bool monitorResize { get; set; }
        public JsString pack { get; set; }
        /// <summary>
        /// @cfg {String} padding
        /// <p>Sets the padding to be applied to all child items managed by this layout.</p>
        /// <p>This property must be specified as a string containing
        /// space-separated, numeric padding values. The order of the sides associated
        /// with each value matches the way CSS processes padding values:</p>
        /// <div class="mdetail-params"><ul>
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the
        /// first value and the right and left are set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left
        /// and right are set to the second, and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and
        /// left, respectively.</li>
        /// </ul></div>
        /// <p>Defaults to: <code>"0"</code></p>
        /// </summary>
        public JsString padding { get; set; }
        public object scrollOffset { get; set; }
        public JsString targetCls { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region CardLayout
    /// <summary>
    /// @class Ext.layout.CardLayout
    /// @extends Ext.layout.FitLayout
    /// <p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be
    /// visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
    /// This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
    /// the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
    /// the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
    /// so that functionality must be provided by the developer.</p>
    /// <p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
    /// to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
    /// common navigation routine -- for this example, the implementation of that routine has been ommitted since
    /// it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a
    /// completely different implementation.  For serious implementations, a better approach would be to extend
    /// CardLayout to provide the custom functionality needed.  Example usage:</p>
    /// <pre><code>
    /// var navHandler = function(direction){
    /// // This routine could contain business logic required to manage the navigation steps.
    /// // It would call setActiveItem as needed, manage navigation button state, handle any
    /// // branching logic that might be required, handle alternate actions like cancellation
    /// // or finalization, etc.  A complete wizard implementation could get pretty
    /// // sophisticated depending on the complexity required, and should probably be
    /// // done as a subclass of CardLayout in a real-world implementation.
    /// };
    /// var card = new Ext.Panel({
    /// title: 'Example Wizard',
    /// layout:'card',
    /// activeItem: 0, // make sure the active item is set on the container config!
    /// bodyStyle: 'padding:15px',
    /// defaults: {
    /// // applied to each contained panel
    /// border:false
    /// },
    /// // just an example of one possible navigation scheme, using buttons
    /// bbar: [
    /// {
    /// id: 'move-prev',
    /// text: 'Back',
    /// handler: navHandler.createDelegate(this, [-1]),
    /// disabled: true
    /// },
    /// '->', // greedy spacer so that the buttons are aligned to each side
    /// {
    /// id: 'move-next',
    /// text: 'Next',
    /// handler: navHandler.createDelegate(this, [1])
    /// }
    /// ],
    /// // the panels (or "cards") within the layout
    /// items: [{
    /// id: 'card-0',
    /// html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'
    /// },{
    /// id: 'card-1',
    /// html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'
    /// },{
    /// id: 'card-2',
    /// html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CardLayout : Ext.layout.FitLayout
    {
        public new void renderAll(object ct, object target) { }
        /// <summary>
        /// Sets the active (visible) item in the layout.
        /// @param {String/Number} item The string component id or numeric index of the item to activate
        /// </summary>
        public void setActiveItem(object item) { }
        /// <summary>
        /// @cfg {Boolean} deferredRender
        /// True to render each contained item at the time it becomes active, false to render all contained items
        /// as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
        /// a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
        /// true might improve performance.
        /// </summary>
        public bool deferredRender { get; set; }
        /// <summary>
        /// @cfg {Boolean} layoutOnCardChange
        /// True to force a layout of the active item when the active card is changed. Defaults to false.
        /// </summary>
        public bool layoutOnCardChange { get; set; }
        public bool renderHidden { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region ColumnLayout
    /// <summary>
    /// @class Ext.layout.ColumnLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of
    /// each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
    /// This class is intended to be extended or created via the layout:'column' {@link Ext.Container#layout} config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
    /// specific config property of <b><tt>columnWidth</tt></b> that can be included in the config of any panel added to it.  The
    /// layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
    /// If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>
    /// <p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
    /// The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
    /// less than 1 (e.g., .25).</p>
    /// <p>The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
    /// set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
    /// specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
    /// pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
    /// the total <b>remaining</b> container width.  In other words, percentage width panels are designed to fill the space
    /// left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
    /// with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
    /// layout may not render as expected.  Example usage:</p>
    /// <pre><code>
    /// // All columns are percentages -- they must add up to 1
    /// var p = new Ext.Panel({
    /// title: 'Column Layout - Percentage Only',
    /// layout:'column',
    /// items: [{
    /// title: 'Column 1',
    /// columnWidth: .25
    /// },{
    /// title: 'Column 2',
    /// columnWidth: .6
    /// },{
    /// title: 'Column 3',
    /// columnWidth: .15
    /// }]
    /// });
    /// // Mix of width and columnWidth -- all columnWidth values must add up
    /// // to 1. The first column will take up exactly 120px, and the last two
    /// // columns will fill the remaining container width.
    /// var p = new Ext.Panel({
    /// title: 'Column Layout - Mixed',
    /// layout:'column',
    /// items: [{
    /// title: 'Column 1',
    /// width: 120
    /// },{
    /// title: 'Column 2',
    /// columnWidth: .8
    /// },{
    /// title: 'Column 3',
    /// columnWidth: .2
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColumnLayout : Ext.layout.ContainerLayout
    {
        public void getLayoutTargetSize() { }
        public new void isValidParent(object c, object target) { }
        public new void onLayout(object ct, object target) { }
        public new void renderAll(object ct, object target) { }
        public JsString extraCls { get; set; }
        public new bool monitorResize { get; set; }
        public object scrollOffset { get; set; }
        public JsString targetCls { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region ContainerLayout
    /// <summary>
    /// @class Ext.layout.ContainerLayout
    /// <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
    /// configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ContainerLayout : JsObject
    {
        public ContainerLayout() { }
        public void afterRemove(object c) { }
        /// <summary>
        /// @private
        /// Applies extraCls and hides the item if renderHidden is true
        /// </summary>
        public void configureItem(object c) { }
        public ContainerLayout(object config) { }
        /// <summary>
        /// The {@link Ext.Template Ext.Template} used by Field rendering layout classes (such as
        /// {@link Ext.layout.FormLayout}) to create the DOM structure of a fully wrapped,
        /// labeled and styled form Field. A default Template is supplied, but this may be
        /// overriden to create custom field structures. The template processes values returned from
        /// {@link Ext.layout.FormLayout#getTemplateArgs}.
        /// @property fieldTpl
        /// @type Ext.Template
        /// */
        /// fieldTpl: (function() {
        /// var t = new Ext.Template(
        /// '<div class="x-form-item {itemCls}" tabIndex="-1">',
        /// '<label for="{id}" style="{labelStyle}" class="x-form-item-label">{label}{labelSeparator}</label>',
        /// '<div class="x-form-element" id="x-form-el-{id}" style="{elementStyle}">',
        /// '</div><div class="{clearCls}"></div>',
        /// '</div>'
        /// );
        /// t.disableFormats = true;
        /// return t.compile();
        /// })(),
        /// /*
        /// Destroys this layout. This is a template method that is empty by default, but should be implemented
        /// by subclasses that require explicit destruction to purge event handlers or remove DOM nodes.
        /// @protected
        /// </summary>
        public void destroy() { }
        public void getRenderedItems(object ct) { }
        /// <summary>
        /// A reference to the {@link Ext.Component} that is active.  For example, <pre><code>
        /// if(myPanel.layout.activeItem.id == 'item-1') { ... }
        /// </code></pre>
        /// <tt>activeItem</tt> only applies to layout styles that can display items one at a time
        /// (like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout}
        /// and {@link Ext.layout.FitLayout}).  Read-only.  Related to {@link Ext.Container#activeItem}.
        /// @type {Ext.Component}
        /// @property activeItem
        /// */
        /// // private
        /// monitorResize:false,
        /// // private
        /// activeItem : null,
        /// constructor : function(config){
        /// this.id = Ext.id(null, 'ext-layout-');
        /// Ext.apply(this, config);
        /// },
        /// type: 'container',
        /// /* Workaround for how IE measures autoWidth elements.  It prefers bottom-up measurements
        /// whereas other browser prefer top-down.  We will hide all target child elements before we measure and
        /// put them back to get an accurate measurement.
        /// </summary>
        public void IEMeasureHack(object target, object viewFlag) { }
        public void isValidParent(object c, object target) { }
        public void layout() { }
        public void onLayout(object ct, object target) { }
        public void onRemove(object c) { }
        public void onResize() { }
        /// <summary>
        /// Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
        /// (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
        /// @param {Number|String} v The encoded margins
        /// @return {Object} An object with margin sizes for top, right, bottom and left
        /// </summary>
        public JsObject parseMargins(object v) { return null; }
        public void renderAll(object ct, object target) { }
        /// <summary>
        /// @private
        /// Renders the given Component into the target Element. If the Component is already rendered,
        /// it is moved to the provided target instead.
        /// @param {Ext.Component} c The Component to render
        /// @param {Number} position The position within the target to render the item to
        /// @param {Ext.Element} target The target Element
        /// </summary>
        public void renderItem(Component c, JsNumber position, Element target) { }
        public void runLayout() { }
        public void setContainer(object ct) { }
        public object activeItem { get; set; }
        public bool monitorResize { get; set; }
        public JsString type { get; set; }
    }
    #endregion
    #region FitLayout
    /// <summary>
    /// @class Ext.layout.FitLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
    /// container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
    /// config, and should generally not need to be created directly via the new keyword.</p>
    /// <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
    /// using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
    /// multiple panels, only the first one will be displayed.  Example usage:</p>
    /// <pre><code>
    /// var p = new Ext.Panel({
    /// title: 'Fit Layout',
    /// layout:'fit',
    /// items: {
    /// title: 'Inner Panel',
    /// html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',
    /// border: false
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FitLayout : Ext.layout.ContainerLayout
    {
        public void getLayoutTargetSize() { }
        public new void onLayout(object ct, object target) { }
        public void setItemSize(object item, object size) { }
        public new bool monitorResize { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region FormLayout
    /// <summary>
    /// @class Ext.layout.FormLayout
    /// @extends Ext.layout.AnchorLayout
    /// <p>This layout manager is specifically designed for rendering and managing child Components of
    /// {@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of
    /// {@link Ext.form.Field Field}s.</p>
    /// *
    /// <p>This layout manager is used when a Container is configured with the <tt>layout:'form'</tt>
    /// {@link Ext.Container#layout layout} config option, and should generally not need to be created directly
    /// via the new keyword. See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
    /// *
    /// <p>In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}
    /// (which is configured with FormLayout as its layout class by default) since it also provides built-in
    /// functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.</p>
    /// *
    /// <p>A {@link Ext.Container Container} <i>using</i> the FormLayout layout manager (e.g.
    /// {@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) can also accept the following
    /// layout-specific config properties:<div class="mdetail-params"><ul>
    /// <li><b><tt>{@link Ext.form.FormPanel#hideLabels hideLabels}</tt></b></li>
    /// <li><b><tt>{@link Ext.form.FormPanel#labelAlign labelAlign}</tt></b></li>
    /// <li><b><tt>{@link Ext.form.FormPanel#labelPad labelPad}</tt></b></li>
    /// <li><b><tt>{@link Ext.form.FormPanel#labelSeparator labelSeparator}</tt></b></li>
    /// <li><b><tt>{@link Ext.form.FormPanel#labelWidth labelWidth}</tt></b></li>
    /// </ul></div></p>
    /// *
    /// <p>Any Component (including Fields) managed by FormLayout accepts the following as a config option:
    /// <div class="mdetail-params"><ul>
    /// <li><b><tt>{@link Ext.Component#anchor anchor}</tt></b></li>
    /// </ul></div></p>
    /// *
    /// <p>Any Component managed by FormLayout may be rendered as a form field (with an associated label) by
    /// configuring it with a non-null <b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b>. Components configured
    /// in this way may be configured with the following options which affect the way the FormLayout renders them:
    /// <div class="mdetail-params"><ul>
    /// <li><b><tt>{@link Ext.Component#clearCls clearCls}</tt></b></li>
    /// <li><b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b></li>
    /// <li><b><tt>{@link Ext.Component#hideLabel hideLabel}</tt></b></li>
    /// <li><b><tt>{@link Ext.Component#itemCls itemCls}</tt></b></li>
    /// <li><b><tt>{@link Ext.Component#labelSeparator labelSeparator}</tt></b></li>
    /// <li><b><tt>{@link Ext.Component#labelStyle labelStyle}</tt></b></li>
    /// </ul></div></p>
    /// *
    /// <p>Example usage:</p>
    /// <pre><code>
    /// // Required if showing validation messages
    /// Ext.QuickTips.init();
    /// // While you can create a basic Panel with layout:'form', practically
    /// // you should usually use a FormPanel to also get its form functionality
    /// // since it already creates a FormLayout internally.
    /// var form = new Ext.form.FormPanel({
    /// title: 'Form Layout',
    /// bodyStyle: 'padding:15px',
    /// width: 350,
    /// defaultType: 'textfield',
    /// defaults: {
    /// // applied to each contained item
    /// width: 230,
    /// msgTarget: 'side'
    /// },
    /// items: [{
    /// fieldLabel: 'First Name',
    /// name: 'first',
    /// allowBlank: false,
    /// {@link Ext.Component#labelSeparator labelSeparator}: ':' // override labelSeparator layout config
    /// },{
    /// fieldLabel: 'Last Name',
    /// name: 'last'
    /// },{
    /// fieldLabel: 'Email',
    /// name: 'email',
    /// vtype:'email'
    /// }, {
    /// xtype: 'textarea',
    /// hideLabel: true,     // override hideLabels layout config
    /// name: 'msg',
    /// anchor: '100% -53'
    /// }
    /// ],
    /// buttons: [
    /// {text: 'Save'},
    /// {text: 'Cancel'}
    /// ],
    /// layoutConfig: {
    /// {@link #labelSeparator}: '~' // superseded by assignment below
    /// },
    /// // config options applicable to container when layout='form':
    /// hideLabels: false,
    /// labelAlign: 'left',   // or 'right' or 'top'
    /// {@link Ext.form.FormPanel#labelSeparator labelSeparator}: '>>', // takes precedence over layoutConfig value
    /// labelWidth: 65,       // defaults to 100
    /// labelPad: 8           // defaults to 5, must specify labelWidth to be honored
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class FormLayout : Ext.layout.AnchorLayout
    {
        public new void adjustHeightAnchor(object value, object c) { }
        public new void adjustWidthAnchor(object value, object c) { }
        public void getLabelStyle(object s) { }
        /// <summary>
        /// <p>Provides template arguments for rendering the fully wrapped, labeled and styled form Field.</p>
        /// <p>This method returns an object hash containing properties used by the layout's {@link #fieldTpl}
        /// to create a correctly wrapped, labeled and styled form Field. This may be overriden to
        /// create custom layouts. The properties which must be returned are:</p><div class="mdetail-params"><ul>
        /// <li><b><tt>itemCls</tt></b> : String<div class="sub-desc">The CSS class applied to the outermost div wrapper
        /// that contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>
        /// will be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>
        /// supplied at the container level.</div></li>
        /// <li><b><tt>id</tt></b> : String<div class="sub-desc">The id of the Field</div></li>
        /// <li><b><tt>{@link #labelStyle}</tt></b> : String<div class="sub-desc">
        /// A CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the
        /// {@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>
        /// <li><b><tt>label</tt></b> : String<div class="sub-desc">The text to display as the label for this
        /// field (defaults to the field's configured fieldLabel property)</div></li>
        /// <li><b><tt>{@link #labelSeparator}</tt></b> : String<div class="sub-desc">The separator to display after
        /// the text of the label for this field (defaults to a colon <tt>':'</tt> or the
        /// {@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>
        /// <li><b><tt>elementStyle</tt></b> : String<div class="sub-desc">The styles text for the input element's wrapper.</div></li>
        /// <li><b><tt>clearCls</tt></b> : String<div class="sub-desc">The CSS class to apply to the special clearing div
        /// rendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>
        /// </ul></div>
        /// @param (Ext.form.Field} field The {@link Ext.form.Field Field} being rendered.
        /// @return {Object} An object hash containing the properties required to render the Field.
        /// </summary>
        public JsObject getTemplateArgs(object field) { return null; }
        public void isHide(object c) { }
        public new void isValidParent(object c, object target) { }
        public void onFieldHide(object c) { }
        public void onFieldShow(object c) { }
        public new void onRemove(object c) { }
        /// <summary>
        /// @private
        /// *
        /// </summary>
        public void renderItem(object c, object position, object target) { }
        public new void setContainer(object ct) { }
        /// <summary>
        /// @cfg {String} labelSeparator
        /// See {@link Ext.form.FormPanel}.{@link Ext.form.FormPanel#labelSeparator labelSeparator}.  Configuration
        /// of this property at the <b>container</b> level takes precedence.
        /// </summary>
        public JsString labelSeparator { get; set; }
        /// <summary>
        /// @cfg {Boolean} trackLabels
        /// True to show/hide the field label when the field is hidden. Defaults to <tt>true</tt>.
        /// </summary>
        public bool trackLabels { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region HBoxLayout
    /// <summary>
    /// @class Ext.layout.HBoxLayout
    /// @extends Ext.layout.BoxLayout
    /// <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
    /// space between child items containing a numeric <code>flex</code> configuration.</p>
    /// This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HBoxLayout : Ext.layout.BoxLayout
    {
        /// <summary>
        /// @private
        /// Calculates the size and positioning of each item in the HBox. This iterates over all of the rendered,
        /// visible items and returns a height, width, top and left for each, as well as a reference to each. Also
        /// returns meta data such as maxHeight which are useful when resizing layout wrappers such as this.innerCt.
        /// @param {Array} visibleItems The array of all rendered, visible items to be calculated for
        /// @param {Object} targetSize Object containing target size and height
        /// @return {Object} Object containing box measurements for each child, plus meta data
        /// </summary>
        public JsObject calculateChildBoxes(JsArray visibleItems, JsObject targetSize) { return null; }
        /// <summary>
        /// @cfg {String} align
        /// Controls how the child items of the container are aligned. Acceptable configuration values for this
        /// property are:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>top</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned vertically
        /// at the <b>top</b> of the container</div></li>
        /// <li><b><tt>middle</tt></b> : <div class="sub-desc">child items are aligned vertically in the
        /// <b>middle</b> of the container</div></li>
        /// <li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched vertically to fill
        /// the height of the container</div></li>
        /// <li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched vertically to
        /// the height of the largest item.</div></li>
        /// </summary>
        public JsString align { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region MenuLayout
    /// <summary>
    /// @class Ext.layout.MenuLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>Layout manager used by {@link Ext.menu.Menu}. Generally this class should not need to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MenuLayout : Ext.layout.ContainerLayout
    {
        public void doAutoSize() { }
        public void getItemArgs(object c) { }
        public new void isValidParent(object c, object target) { }
        public new void onLayout(object ct, object target) { }
        public void renderItem(object c, object position, object target) { }
        public new void setContainer(object ct) { }
        public new bool monitorResize { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region TableLayout
    /// <summary>
    /// @class Ext.layout.TableLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This layout allows you to easily render content into an HTML table.  The total number of columns can be
    /// specified, and rowspan and colspan can be used to create complex layouts within the table.
    /// This class is intended to be extended or created via the layout:'table' {@link Ext.Container#layout} config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>Note that when creating a layout via config, the layout-specific config properties must be passed in via
    /// the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the
    /// case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a
    /// TableLayout can supply the following table-specific config properties:</p>
    /// <ul>
    /// <li><b>rowspan</b> Applied to the table cell containing the item.</li>
    /// <li><b>colspan</b> Applied to the table cell containing the item.</li>
    /// <li><b>cellId</b> An id applied to the table cell containing the item.</li>
    /// <li><b>cellCls</b> A CSS class name added to the table cell containing the item.</li>
    /// </ul>
    /// <p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard
    /// HTML table.  You simply add each panel (or "cell") that you want to include along with any span attributes
    /// specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
    /// Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
    /// total column count in the layoutConfig and start adding panels in their natural order from left to right,
    /// top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
    /// how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
    /// up correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:</p>
    /// <pre><code>
    /// // This code will generate a layout table that is 3 columns by 2 rows
    /// // with some spanning included.  The basic layout will be:
    /// // +--------+-----------------+
    /// // |   A    |   B             |
    /// // |        |--------+--------|
    /// // |        |   C    |   D    |
    /// // +--------+--------+--------+
    /// var table = new Ext.Panel({
    /// title: 'Table Layout',
    /// layout:'table',
    /// defaults: {
    /// // applied to each contained panel
    /// bodyStyle:'padding:20px'
    /// },
    /// layoutConfig: {
    /// // The total column count must be specified here
    /// columns: 3
    /// },
    /// items: [{
    /// html: '&lt;p&gt;Cell A content&lt;/p&gt;',
    /// rowspan: 2
    /// },{
    /// html: '&lt;p&gt;Cell B content&lt;/p&gt;',
    /// colspan: 2
    /// },{
    /// html: '&lt;p&gt;Cell C content&lt;/p&gt;',
    /// cellCls: 'highlight'
    /// },{
    /// html: '&lt;p&gt;Cell D content&lt;/p&gt;'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TableLayout : Ext.layout.ContainerLayout
    {
        public new void destroy() { }
        public void getNextCell(object c) { }
        public void getNextNonSpan(object colIndex, object rowIndex) { }
        public void getRow(object index) { }
        public new void isValidParent(object c, object target) { }
        public new void onLayout(object ct, object target) { }
        public void renderItem(object c, object position, object target) { }
        public new void setContainer(object ct) { }
        public new bool monitorResize { get; set; }
        /// <summary>
        /// @cfg {Object} tableAttrs
        /// <p>An object containing properties which are added to the {@link Ext.DomHelper DomHelper} specification
        /// used to create the layout's <tt>&lt;table&gt;</tt> element. Example:</p><pre><code>
        /// {
        /// xtype: 'panel',
        /// layout: 'table',
        /// layoutConfig: {
        /// tableAttrs: {
        /// style: {
        /// width: '100%'
        /// }
        /// },
        /// columns: 3
        /// }
        /// }</code></pre>
        /// </summary>
        public object tableAttrs { get; set; }
        public JsString targetCls { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region ToolbarLayout
    /// <summary>
    /// @class Ext.layout.ToolbarLayout
    /// @extends Ext.layout.ContainerLayout
    /// Layout manager used by Ext.Toolbar. This is highly specialised for use by Toolbars and would not
    /// usually be used by any other class.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ToolbarLayout : Ext.layout.ContainerLayout
    {
        /// <summary>
        /// @private
        /// Adds the given Toolbar item to the given menu. Buttons inside a buttongroup are added individually.
        /// @param {Ext.menu.Menu} menu The menu to add to
        /// @param {Ext.Component} component The component to add
        /// </summary>
        public void addComponentToMenu(Menu menu, Component component) { }
        /// <summary>
        /// @private
        /// Called before the expand menu is shown, this rebuilds the menu since it was last shown because
        /// it is possible that the items hidden due to space limitations on the Toolbar have changed since.
        /// @param {Ext.menu.Menu} m The menu
        /// </summary>
        public void beforeMoreShow(object menu) { }
        /// <summary>
        /// @private
        /// Removes any empty nodes from the given element
        /// @param {Ext.Element} el The element to clean up
        /// </summary>
        public void cleanup(Element el) { }
        /// <summary>
        /// @private
        /// Deletes the sub-menu of each item in the expander menu. Submenus are created for items such as
        /// splitbuttons and buttongroups, where the Toolbar item cannot be represented by a single menu item
        /// </summary>
        public void clearMenu() { }
        /// <summary>
        /// @private
        /// Returns a menu config for a given component. This config is used to create a menu item
        /// to be added to the expander menu
        /// @param {Ext.Component} component The component to create the config for
        /// @param {Boolean} hideOnClick Passed through to the menu item
        /// </summary>
        public void createMenuConfig(Component component, bool hideOnClick) { }
        public new void destroy() { }
        /// <summary>
        /// @private
        /// Called at the end of onLayout. At this point the Toolbar has already been resized, so we need
        /// to fit the items into the available width. We add up the width required by all of the items in
        /// the toolbar - if we don't have enough space we hide the extra items and render the expand menu
        /// trigger.
        /// @param {Ext.Element} target The Element the Toolbar is currently laid out within
        /// </summary>
        public void fitToSize(Element target) { }
        /// <summary>
        /// @private
        /// Returns the width of the given toolbar item. If the item is currently hidden because there
        /// is not enough room to render it, its previous width is returned
        /// @param {Ext.Component} c The component to measure
        /// @return {Number} The width of the item
        /// </summary>
        public JsNumber getItemWidth(Component c) { return null; }
        /// <summary>
        /// @private
        /// Hides an item because it will not fit in the available width. The item will be unhidden again
        /// if the Toolbar is resized to be large enough to show it
        /// @param {Ext.Component} item The item to hide
        /// </summary>
        public void hideItem(Component item) { }
        /// <summary>
        /// @private
        /// Creates the expand trigger and menu, adding them to the <tr> at the extreme right of the
        /// Toolbar table
        /// </summary>
        public void initMore() { }
        /// <summary>
        /// @private
        /// Inserts the given Toolbar item into the given element
        /// @param {Ext.Component} c The component to add
        /// @param {Ext.Element} target The target to add the component to
        /// @param {Number} position The position to add the component at
        /// </summary>
        public void insertCell(Component c, Element target, JsNumber position) { }
        /// <summary>
        /// @private
        /// Create the wrapping Toolbar HTML and render/move all the items into the correct places
        /// </summary>
        public new void onLayout(object ct, object target) { }
        /// <summary>
        /// @private
        /// Unhides an item that was previously hidden due to there not being enough space left on the Toolbar
        /// @param {Ext.Component} item The item to show
        /// </summary>
        public void unhideItem(Component item) { }
        /// <summary>
        /// @private
        /// @property lastOverflow
        /// @type Boolean
        /// Used internally to record whether the last layout caused an overflow or not
        /// </summary>
        public bool lastOverflow { get; set; }
        public new bool monitorResize { get; set; }
        /// <summary>
        /// @property noItemsMenuText
        /// @type String
        /// HTML fragment to render into the toolbar overflow menu if there are no items to display
        /// </summary>
        public JsString noItemsMenuText { get; set; }
        /// <summary>
        /// @property triggerWidth
        /// @type Number
        /// The width allocated for the menu trigger at the extreme right end of the Toolbar
        /// </summary>
        public object triggerWidth { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
    #region VBoxLayout
    /// <summary>
    /// @class Ext.layout.VBoxLayout
    /// @extends Ext.layout.BoxLayout
    /// <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
    /// space between child items containing a numeric <code>flex</code> configuration.</p>
    /// This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class VBoxLayout : Ext.layout.BoxLayout
    {
        /// <summary>
        /// @private
        /// Calculates the size and positioning of each item in the VBox. This iterates over all of the rendered,
        /// visible items and returns a height, width, top and left for each, as well as a reference to each. Also
        /// returns meta data such as maxHeight which are useful when resizing layout wrappers such as this.innerCt.
        /// @param {Array} visibleItems The array of all rendered, visible items to be calculated for
        /// @param {Object} targetSize Object containing target size and height
        /// @return {Object} Object containing box measurements for each child, plus meta data
        /// </summary>
        public JsObject calculateChildBoxes(JsArray visibleItems, JsObject targetSize) { return null; }
        /// <summary>
        /// @cfg {String} align
        /// Controls how the child items of the container are aligned. Acceptable configuration values for this
        /// property are:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>left</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned horizontally
        /// at the <b>left</b> side of the container</div></li>
        /// <li><b><tt>center</tt></b> : <div class="sub-desc">child items are aligned horizontally at the
        /// <b>mid-width</b> of the container</div></li>
        /// <li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched horizontally to fill
        /// the width of the container</div></li>
        /// <li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched horizontally to
        /// the size of the largest item.</div></li>
        /// </ul></div>
        /// </summary>
        public JsString align { get; set; }
        public new JsString type { get; set; }
    }
    #endregion
}
#endregion
#region Ext.layout.boxOverflow
namespace Ext.layout.boxOverflow
{
    #region HorizontalMenu
    /// <summary>
    /// @class Ext.layout.boxOverflow.HorizontalMenu
    /// @extends Ext.layout.boxOverflow.Menu
    /// Description
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HorizontalMenu : Ext.layout.boxOverflow.Menu
    {
        public HorizontalMenu() { }
        public void handleOverflow(object calculations, object targetSize) { }
    }
    #endregion
    #region HorizontalScroller
    /// <summary>
    /// @class Ext.layout.boxOverflow.HorizontalScroller
    /// @extends Ext.layout.boxOverflow.Scroller
    /// Description
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class HorizontalScroller : Ext.layout.boxOverflow.Scroller
    {
        /// <summary>
        /// @private
        /// Returns true if the innerCt scroll is already at its right-most point
        /// @return {Boolean} True if already at furthest right point
        /// </summary>
        public bool atExtremeAfter() { return false; }
        /// <summary>
        /// @private
        /// Creates the beforeCt and afterCt elements if they have not already been created
        /// </summary>
        public void createInnerElements() { }
        /// <summary>
        /// @private
        /// Returns the maximum value we can scrollTo
        /// @return {Number} The max scroll value
        /// </summary>
        public JsNumber getMaxScrollRight() { return null; }
        /// <summary>
        /// Returns the current scroll position of the innerCt element
        /// @return {Number} The current scroll position
        /// </summary>
        public JsNumber getScrollPosition() { return null; }
        public new void handleOverflow(object calculations, object targetSize) { }
        /// <summary>
        /// @private
        /// Scrolls to the given position. Performs bounds checking.
        /// @param {Number} position The position to scroll to. This is constrained.
        /// @param {Boolean} animate True to animate. If undefined, falls back to value of this.animateScroll
        /// </summary>
        public void scrollTo(JsNumber position, bool animate) { }
    }
    #endregion
    #region Menu
    /// <summary>
    /// @class Ext.layout.boxOverflow.Menu
    /// @extends Ext.layout.boxOverflow.None
    /// Description
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Menu : Ext.layout.boxOverflow.None
    {
        public Menu() { }
        /// <summary>
        /// @private
        /// Adds the given Toolbar item to the given menu. Buttons inside a buttongroup are added individually.
        /// @param {Ext.menu.Menu} menu The menu to add to
        /// @param {Ext.Component} component The component to add
        /// </summary>
        public void addComponentToMenu(Menu menu, Component component) { }
        /// <summary>
        /// @private
        /// Called before the overflow menu is shown. This constructs the menu's items, caching them for as long as it can.
        /// </summary>
        public void beforeMenuShow(object menu) { }
        /// <summary>
        /// @private
        /// Deletes the sub-menu of each item in the expander menu. Submenus are created for items such as
        /// splitbuttons and buttongroups, where the Toolbar item cannot be represented by a single menu item
        /// </summary>
        public void clearMenu() { }
        /// <summary>
        /// @private
        /// </summary>
        public void clearOverflow(object calculations, object targetSize) { }
        public Menu(object layout) { }
        /// <summary>
        /// @private
        /// Creates the beforeCt, innerCt and afterCt elements if they have not already been created
        /// @param {Ext.Container} container The Container attached to this Layout instance
        /// @param {Ext.Element} target The target Element
        /// </summary>
        public void createInnerElements() { }
        /// <summary>
        /// @private
        /// Creates the overflow trigger and menu used when enableOverflow is set to true and the items
        /// in the layout are too wide to fit in the space available
        /// </summary>
        public void createMenu() { }
        /// <summary>
        /// @private
        /// Returns a menu config for a given component. This config is used to create a menu item
        /// to be added to the expander menu
        /// @param {Ext.Component} component The component to create the config for
        /// @param {Boolean} hideOnClick Passed through to the menu item
        /// </summary>
        public void createMenuConfig(Component component, bool hideOnClick) { }
        /// <summary>
        /// @private
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// @private
        /// </summary>
        public void hideTrigger() { }
        /// <summary>
        /// @private
        /// </summary>
        public void showTrigger() { }
        /// <summary>
        /// @cfg afterCls
        /// @type String
        /// CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,
        /// which must always be present at the rightmost edge of the Container
        /// </summary>
        public JsString afterCls { get; set; }
        /// <summary>
        /// @property noItemsMenuText
        /// @type String
        /// HTML fragment to render into the toolbar overflow menu if there are no items to display
        /// </summary>
        public JsString noItemsMenuText { get; set; }
    }
    #endregion
    #region None
    [JsType(JsMode.Prototype, Export = false)]
    public partial class None : JsObject
    {
        public None() { }
        public None(object layout, object config) { }
    }
    #endregion
    #region Scroller
    /// <summary>
    /// @class Ext.layout.boxOverflow.Scroller
    /// @extends Ext.layout.boxOverflow.None
    /// Description
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Scroller : Ext.layout.boxOverflow.None
    {
        /// <summary>
        /// @private
        /// Returns true if the innerCt scroll is already at its left-most point
        /// @return {Boolean} True if already at furthest left point
        /// </summary>
        public bool atExtremeBefore() { return false; }
        /// <summary>
        /// @private
        /// </summary>
        public void clearOverflow() { }
        /// <summary>
        /// @private
        /// Creates the clickable scroller elements and places them into the beforeCt and afterCt
        /// </summary>
        public void createScrollers() { }
        /// <summary>
        /// @private
        /// Sets up an listener to scroll on the layout's innerCt mousewheel event
        /// </summary>
        public void createWheelListener() { }
        /// <summary>
        /// @private
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// @private
        /// Normalizes an item reference, string id or numerical index into a reference to the item
        /// @param {Ext.Component|String|Number} item The item reference, id or index
        /// @return {Ext.Component} The item
        /// </summary>
        public Component getItem(object item) { return null; }
        /// <summary>
        /// @private
        /// For a given item in the container, return an object with information on whether the item is visible
        /// with the current innerCt scroll value.
        /// @param {Ext.Component} item The item
        /// @return {Object} Values for fullyVisible, hiddenLeft and hiddenRight
        /// </summary>
        public JsObject getItemVisibility(Component item) { return null; }
        /// <summary>
        /// @private
        /// @return {Object} Object passed to scrollTo when scrolling
        /// </summary>
        public JsObject getScrollAnim() { return null; }
        /// <summary>
        /// @private
        /// Most of the heavy lifting is done in the subclasses
        /// </summary>
        public void handleOverflow(object calculations, object targetSize) { }
        /// <summary>
        /// @private
        /// Hides the scroller elements in the beforeCt and afterCt
        /// </summary>
        public void hideScrollers() { }
        /// <summary>
        /// @private
        /// Scrolls left or right by the number of pixels specified
        /// @param {Number} delta Number of pixels to scroll to the right by. Use a negative number to scroll left
        /// </summary>
        public void scrollBy(JsNumber delta, object animate) { }
        /// <summary>
        /// @private
        /// Scrolls to the left by the configured amount
        /// </summary>
        public void scrollLeft(object animate) { }
        /// <summary>
        /// @private
        /// Scrolls to the right by the configured amount
        /// </summary>
        public void scrollRight(object animate) { }
        /// <summary>
        /// Scrolls to the given component.
        /// @param {String|Number|Ext.Component} item The item to scroll to. Can be a numerical index, component id
        /// or a reference to the component itself.
        /// @param {Boolean} animate True to animate the scrolling
        /// </summary>
        public void scrollToItem(object item, bool animate) { }
        /// <summary>
        /// @private
        /// Shows the scroller elements in the beforeCt and afterCt. Creates the scrollers first if they are not already
        /// present.
        /// </summary>
        public void showScrollers() { }
        /// <summary>
        /// @private
        /// Enables or disables each scroller button based on the current scroll position
        /// </summary>
        public void updateScrollButtons() { }
        /// <summary>
        /// @cfg afterCls
        /// @type String
        /// CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,
        /// which must always be present at the rightmost edge of the Container
        /// </summary>
        public JsString afterCls { get; set; }
        /// <summary>
        /// @cfg afterScrollerCls
        /// @type String
        /// CSS class added to the right scroller element if enableScroll is used
        /// </summary>
        public JsString afterScrollerCls { get; set; }
        /// <summary>
        /// @cfg animateScroll
        /// @type Boolean
        /// True to animate the scrolling of items within the layout (defaults to true, ignored if enableScroll is false)
        /// </summary>
        public bool animateScroll { get; set; }
        /// <summary>
        /// @cfg beforeCls
        /// @type String
        /// CSS class added to the beforeCt element. This is the element that holds any special items such as scrollers,
        /// which must always be present at the leftmost edge of the Container
        /// </summary>
        public JsString beforeCls { get; set; }
        /// <summary>
        /// @cfg beforeScrollerCls
        /// @type String
        /// CSS class added to the left scroller element if enableScroll is used
        /// </summary>
        public JsString beforeScrollerCls { get; set; }
        /// <summary>
        /// @cfg scrollDuration
        /// @type Number
        /// Number of seconds that each scroll animation lasts (defaults to 0.4)
        /// </summary>
        public object scrollDuration { get; set; }
        /// <summary>
        /// @cfg scrollerCls
        /// @type String
        /// CSS class added to both scroller elements if enableScroll is used
        /// </summary>
        public JsString scrollerCls { get; set; }
        /// <summary>
        /// @cfg scrollIncrement
        /// @type Number
        /// The number of pixels to scroll by on scroller click (defaults to 100)
        /// </summary>
        public object scrollIncrement { get; set; }
        /// <summary>
        /// @cfg scrollRepeatInterval
        /// @type Number
        /// Number of milliseconds between each scroll while a scroller button is held down (defaults to 400)
        /// </summary>
        public object scrollRepeatInterval { get; set; }
        /// <summary>
        /// @cfg wheelIncrement
        /// @type Number
        /// The number of pixels to increment on mouse wheel scrolling (defaults to <tt>3</tt>).
        /// </summary>
        public object wheelIncrement { get; set; }
    }
    #endregion
    #region VerticalScroller
    /// <summary>
    /// @class Ext.layout.boxOverflow.VerticalScroller
    /// @extends Ext.layout.boxOverflow.Scroller
    /// Description
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class VerticalScroller : Ext.layout.boxOverflow.Scroller
    {
        /// <summary>
        /// @private
        /// Returns true if the innerCt scroll is already at its right-most point
        /// @return {Boolean} True if already at furthest right point
        /// </summary>
        public bool atExtremeAfter() { return false; }
        /// <summary>
        /// @private
        /// Creates the beforeCt and afterCt elements if they have not already been created
        /// </summary>
        public void createInnerElements() { }
        /// <summary>
        /// @private
        /// Returns the maximum value we can scrollTo
        /// @return {Number} The max scroll value
        /// </summary>
        public JsNumber getMaxScrollBottom() { return null; }
        /// <summary>
        /// Returns the current scroll position of the innerCt element
        /// @return {Number} The current scroll position
        /// </summary>
        public JsNumber getScrollPosition() { return null; }
        public new void handleOverflow(object calculations, object targetSize) { }
        /// <summary>
        /// @private
        /// Scrolls to the given position. Performs bounds checking.
        /// @param {Number} position The position to scroll to. This is constrained.
        /// @param {Boolean} animate True to animate. If undefined, falls back to value of this.animateScroll
        /// </summary>
        public void scrollTo(JsNumber position, bool animate) { }
        public new object scrollIncrement { get; set; }
        public new object wheelIncrement { get; set; }
    }
    #endregion
}
#endregion
#region Ext.lib
namespace Ext.lib
{
    #region Dom
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Dom
    {
        public static void getRegion(object el) { }
    }
    #endregion
    #region Point
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Point
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class prototype
        {
        }
        public Point() { }
        public Point(object x, object y) { }
    }
    #endregion
    #region Region
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Region
    {
        public Region() { }
        public void adjust(object t, object l, object b, object r) { }
        public void constrainTo(object r) { }
        public void contains(object region) { }
        public void getArea() { }
        public static void getRegion(object el) { }
        public void intersect(object region) { }
        public Region(object t, object r, object b, object l) { }
        public void union(object region) { }
    }
    #endregion
}
#endregion
#region Ext.list
namespace Ext.list
{
    #region BooleanColumn
    /// <summary>
    /// @class Ext.list.BooleanColumn
    /// @extends Ext.list.Column
    /// <p>A Column definition class which renders boolean data fields.  See the {@link Ext.list.Column#xtype xtype}
    /// config option of {@link Ext.list.Column} for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BooleanColumn : Ext.list.Column
    {
        public BooleanColumn() { }
        public BooleanColumn(object c) { }
        /// <summary>
        /// @cfg {String} falseText
        /// The string returned by the renderer when the column value is falsey (but not undefined) (defaults to
        /// <tt>'false'</tt>).
        /// </summary>
        public JsString falseText { get; set; }
        /// <summary>
        /// @cfg {String} trueText
        /// The string returned by the renderer when the column value is not falsey (defaults to <tt>'true'</tt>).
        /// </summary>
        public JsString trueText { get; set; }
        /// <summary>
        /// @cfg {String} undefinedText
        /// The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).
        /// </summary>
        public JsString undefinedText { get; set; }
    }
    #endregion
    #region Column
    /// <summary>
    /// @class Ext.list.Column
    /// <p>This class encapsulates column configuration data to be used in the initialization of a
    /// {@link Ext.list.ListView ListView}.</p>
    /// <p>While subclasses are provided to render data in different ways, this class renders a passed
    /// data field unchanged and is usually used for textual columns.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Column : JsObject
    {
        public Column() { }
        public Column(object c) { }
        /// <summary>
        /// @cfg {String} align
        /// Set the CSS text-align property of the column. Defaults to <tt>'left'</tt>.
        /// </summary>
        public JsString align { get; set; }
        /// <summary>
        /// @cfg {String} cls Optional. This option can be used to add a CSS class to the cell of each
        /// row for this column.
        /// </summary>
        public JsString cls { get; set; }
        /// <summary>
        /// @cfg {String} header Optional. The header text to be used as innerHTML
        /// (html tags are accepted) to display in the ListView.  <b>Note</b>: to
        /// have a clickable header with no text displayed use <tt>'&#160;'</tt>.
        /// </summary>
        public JsString header { get; set; }
        /// <summary>
        /// @private
        /// @cfg {Boolean} isColumn
        /// Used by ListView constructor method to avoid reprocessing a Column
        /// if <code>isColumn</code> is not set ListView will recreate a new Ext.list.Column
        /// Defaults to true.
        /// </summary>
        public bool isColumn { get; set; }
        /// <summary>
        /// @cfg {Number} width Optional. Percentage of the container width
        /// this column should be allocated.  Columns that have no width specified will be
        /// allocated with an equal percentage to fill 100% of the container width.  To easily take
        /// advantage of the full container width, leave the width of at least one column undefined.
        /// Note that if you do not want to take up the full width of the container, the width of
        /// every column needs to be explicitly defined.
        /// </summary>
        public JsNumber width { get; set; }
    }
    #endregion
    #region ColumnResizer
    /// <summary>
    /// @class Ext.list.ColumnResizer
    /// @extends Ext.util.Observable
    /// <p>Supporting Class for Ext.list.ListView</p>
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColumnResizer : Ext.util.Observable
    {
        public ColumnResizer() { }
        public ColumnResizer(object config) { }
        public void handleHdMove(object e, object t) { }
        public void init(object listView) { }
        public void initEvents(object view) { }
        public void onBeforeStart(object e) { }
        public void onDrag(object e) { }
        public void onEnd(object e) { }
        public void onStart(object e) { }
        public void setBoundaries(object relativeX) { }
        /// <summary>
        /// @cfg {Number} minPct The minimum percentage to allot for any column (defaults to <tt>.05</tt>)
        /// </summary>
        public JsNumber minPct { get; set; }
    }
    #endregion
    #region DateColumn
    /// <summary>
    /// @class Ext.list.DateColumn
    /// @extends Ext.list.Column
    /// <p>A Column definition class which renders a passed date according to the default locale, or a configured
    /// {@link #format}. See the {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column}
    /// for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DateColumn : Ext.list.Column
    {
        public DateColumn() { }
        public DateColumn(object c) { }
        public JsString format { get; set; }
    }
    #endregion
    #region ListView
    /// <summary>
    /// @class Ext.list.ListView
    /// @extends Ext.DataView
    /// <p>Ext.list.ListView is a fast and light-weight implentation of a
    /// {@link Ext.grid.GridPanel Grid} like view with the following characteristics:</p>
    /// <div class="mdetail-params"><ul>
    /// <li>resizable columns</li>
    /// <li>selectable</li>
    /// <li>column widths are initially proportioned by percentage based on the container
    /// width and number of columns</li>
    /// <li>uses templates to render the data in any required format</li>
    /// <li>no horizontal scrolling</li>
    /// <li>no editing</li>
    /// </ul></div>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// // consume JSON of this form:
    /// {
    /// "images":[
    /// {
    /// "name":"dance_fever.jpg",
    /// "size":2067,
    /// "lastmod":1236974993000,
    /// "url":"images\/thumbs\/dance_fever.jpg"
    /// },
    /// {
    /// "name":"zack_sink.jpg",
    /// "size":2303,
    /// "lastmod":1236974993000,
    /// "url":"images\/thumbs\/zack_sink.jpg"
    /// }
    /// ]
    /// }
    /// var store = new Ext.data.JsonStore({
    /// url: 'get-images.php',
    /// root: 'images',
    /// fields: [
    /// 'name', 'url',
    /// {name:'size', type: 'float'},
    /// {name:'lastmod', type:'date', dateFormat:'timestamp'}
    /// ]
    /// });
    /// store.load();
    /// var listView = new Ext.list.ListView({
    /// store: store,
    /// multiSelect: true,
    /// emptyText: 'No images to display',
    /// reserveScrollOffset: true,
    /// columns: [{
    /// header: 'File',
    /// width: .5,
    /// dataIndex: 'name'
    /// },{
    /// header: 'Last Modified',
    /// width: .35,
    /// dataIndex: 'lastmod',
    /// tpl: '{lastmod:date("m-d h:i a")}'
    /// },{
    /// header: 'Size',
    /// dataIndex: 'size',
    /// tpl: '{size:fileSize}', // format using Ext.util.Format.fileSize()
    /// align: 'right'
    /// }]
    /// });
    /// // put it in a Panel so it looks pretty
    /// var panel = new Ext.Panel({
    /// id:'images-view',
    /// width:425,
    /// height:250,
    /// collapsible:true,
    /// layout:'fit',
    /// title:'Simple ListView <i>(0 items selected)</i>',
    /// items: listView
    /// });
    /// panel.render(document.body);
    /// // little bit of feedback
    /// listView.on('selectionchange', function(view, nodes){
    /// var l = nodes.length;
    /// var s = l != 1 ? 's' : '';
    /// panel.setTitle('Simple ListView <i>('+l+' item'+s+' selected)</i>');
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {Object} config
    /// @xtype listview
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ListView : Ext.DataView
    {
        /// <summary>
        /// <p>Function which can be overridden which returns the data object passed to this
        /// view's {@link #tpl template} to render the whole ListView. The returned object
        /// shall contain the following properties:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><b>columns</b> : String<div class="sub-desc">See <tt>{@link #columns}</tt></div></li>
        /// <li><b>rows</b> : String<div class="sub-desc">See
        /// <tt>{@link Ext.DataView}.{@link Ext.DataView#collectData collectData}</div></li>
        /// </ul></div>
        /// @param {Array} records An Array of {@link Ext.data.Record}s to be rendered into the DataView.
        /// @param {Number} startIndex the index number of the Record being prepared for rendering.
        /// @return {Object} A data object containing properties to be processed by a repeating
        /// XTemplate as described above.
        /// </summary>
        public JsObject collectData() { return null; }
        public void findHeaderIndex(object header) { }
        public new void getTemplateTarget() { }
        public new void initComponent() { }
        public void onRender() { }
        public void onResize(object w, object h) { }
        public void setHdWidths() { }
        public void updateIndexes() { }
        public void verifyInternalSize() { }
        /// <summary>
        /// @cfg {Boolean/Object} columnResize
        /// Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.ColumnResizer}
        /// to enable the columns to be resizable (defaults to <tt>true</tt>).
        /// </summary>
        public bool columnResize { get; set; }
        /// <summary>
        /// @cfg {Boolean/Object} columnSort
        /// Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.Sorter}
        /// to enable the columns to be sortable (defaults to <tt>true</tt>).
        /// </summary>
        public bool columnSort { get; set; }
        /// <summary>
        /// @cfg {String} itemSelector
        /// Defaults to <tt>'dl'</tt> to work with the preconfigured <b><tt>{@link Ext.DataView#tpl tpl}</tt></b>.
        /// This setting specifies the CSS selector (e.g. <tt>div.some-class</tt> or <tt>span:first-child</tt>)
        /// that will be used to determine what nodes the ListView will be working with.
        /// </summary>
        public JsString itemSelector { get; set; }
        /// <summary>
        /// @cfg {String} overClass The CSS class applied when over a row (defaults to
        /// <tt>'x-list-over'</tt>). An example overriding the default styling:
        /// <pre><code>
        /// .x-list-over {background-color: orange;}
        /// </code></pre>
        /// @type String
        /// </summary>
        public JsString overClass { get; set; }
        /// <summary>
        /// @cfg {String} selectedClass The CSS class applied to a selected row (defaults to
        /// <tt>'x-list-selected'</tt>). An example overriding the default styling:
        /// <pre><code>
        /// .x-list-selected {background-color: yellow;}
        /// </code></pre>
        /// @type String
        /// </summary>
        public new JsString selectedClass { get; set; }
    }
    #endregion
    #region NumberColumn
    /// <summary>
    /// @class Ext.list.NumberColumn
    /// @extends Ext.list.Column
    /// <p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the
    /// {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column} for more details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class NumberColumn : Ext.list.Column
    {
        public NumberColumn() { }
        public NumberColumn(object c) { }
        /// <summary>
        /// @cfg {String} format
        /// A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
        /// (defaults to <tt>'0,000.00'</tt>).
        /// </summary>
        public JsString format { get; set; }
    }
    #endregion
    #region Sorter
    /// <summary>
    /// @class Ext.list.Sorter
    /// @extends Ext.util.Observable
    /// <p>Supporting Class for Ext.list.ListView</p>
    /// @constructor
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Sorter : Ext.util.Observable
    {
        public Sorter() { }
        public Sorter(object config) { }
        public void init(object listView) { }
        public void initEvents(object view) { }
        public void onHdClick(object e) { }
        public void updateSortIcon(object col, object dir) { }
        public void updateSortState(object store) { }
    }
    #endregion
}
#endregion
#region Ext.menu
namespace Ext.menu
{
    #region BaseItem
    /// <summary>
    /// @class Ext.menu.BaseItem
    /// @extends Ext.Component
    /// The base class for all items that render into menus.  BaseItem provides default rendering, activated state
    /// management and base configuration options shared by all menu components.
    /// @constructor
    /// Creates a new BaseItem
    /// @param {Object} config Configuration options
    /// @xtype menubaseitem
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class BaseItem : Ext.Component
    {
        public void activate() { }
        public void deactivate() { }
        public void handleClick(object e) { }
        public void initComponent() { }
        public void onClick(object e) { }
        public void onRender(object container, object position) { }
        /// <summary>
        /// Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}
        /// config property).  If an existing handler is already registered, it will be unregistered for you.
        /// @param {Function} handler The function that should be called on click
        /// @param {Object} scope The scope (<code>this</code> reference) in which the handler function is executed. Defaults to this menu item.
        /// </summary>
        public void setHandler(JsAction handler, JsObject scope) { }
        public void shouldDeactivate(object e) { }
        public JsString actionMode { get; set; }
        /// <summary>
        /// @cfg {String} activeClass The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")
        /// </summary>
        public JsString activeClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} canActivate True if this item can be visually activated (defaults to false)
        /// </summary>
        public bool canActivate { get; set; }
        /// <summary>
        /// @cfg {Number} clickHideDelay Length of time in milliseconds to wait before hiding after a click (defaults to 1)
        /// </summary>
        public JsNumber clickHideDelay { get; set; }
        public JsString ctype { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to true)
        /// </summary>
        public bool hideOnClick { get; set; }
    }
    #endregion
    #region CheckItem
    /// <summary>
    /// @class Ext.menu.CheckItem
    /// @extends Ext.menu.Item
    /// Adds a menu item that contains a checkbox by default, but can also be part of a radio group.
    /// @constructor
    /// Creates a new CheckItem
    /// @param {Object} config Configuration options
    /// @xtype menucheckitem
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CheckItem : Ext.menu.Item
    {
        public void destroy() { }
        public new void handleClick(object e) { }
        public new void initComponent() { }
        public void onRender(object c) { }
        /// <summary>
        /// Set the checked state of this item
        /// @param {Boolean} checked The new checked value
        /// @param {Boolean} suppressEvent (optional) True to prevent the checkchange event from firing (defaults to false)
        /// </summary>
        public void setChecked(object state, bool suppressEvent) { }
        /// <summary>
        /// @cfg {Boolean} checked True to initialize this checkbox as checked (defaults to false).  Note that
        /// if this checkbox is part of a radio group (group = true) only the first item in the group that is
        /// initialized with checked = true will be rendered as checked.
        /// </summary>
        public bool @checked { get; set; }
        public new JsString ctype { get; set; }
        /// <summary>
        /// @cfg {String} groupClass The default CSS class to use for radio group check items (defaults to "x-menu-group-item")
        /// </summary>
        public JsString groupClass { get; set; }
        /// <summary>
        /// @cfg {String} itemCls The default CSS class to use for check items (defaults to "x-menu-item x-menu-check-item")
        /// </summary>
        public new JsString itemCls { get; set; }
    }
    #endregion
    #region ColorMenu
    /// <summary>
    /// @class Ext.menu.ColorMenu
    /// @extends Ext.menu.Menu
    /// <p>A menu containing a {@link Ext.ColorPalette} Component.</p>
    /// <p>Notes:</p><div class="mdetail-params"><ul>
    /// <li>Although not listed here, the <b>constructor</b> for this class
    /// accepts all of the configuration options of <b>{@link Ext.ColorPalette}</b>.</li>
    /// <li>If subclassing ColorMenu, any configuration options for the ColorPalette must be
    /// applied to the <tt><b>initialConfig</b></tt> property of the ColorMenu.
    /// Applying {@link Ext.ColorPalette ColorPalette} configuration settings to
    /// <b><tt>this</tt></b> will <b>not</b> affect the ColorPalette's configuration.</li>
    /// </ul></div> *
    /// @xtype colormenu
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ColorMenu : Ext.menu.Menu
    {
        public new void initComponent() { }
        public void menuHide() { }
        public JsString cls { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableScrolling
        /// @hide
        /// </summary>
        public new bool enableScrolling { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideOnClick
        /// False to continue showing the menu after a color is selected, defaults to true.
        /// </summary>
        public bool hideOnClick { get; set; }
        /// <summary>
        /// @cfg {String} paletteId
        /// An id to assign to the underlying color palette. Defaults to <tt>null</tt>.
        /// </summary>
        public object paletteId { get; set; }
    }
    #endregion
    #region DateMenu
    /// <summary>
    /// @class Ext.menu.DateMenu
    /// @extends Ext.menu.Menu
    /// <p>A menu containing an {@link Ext.DatePicker} Component.</p>
    /// <p>Notes:</p><div class="mdetail-params"><ul>
    /// <li>Although not listed here, the <b>constructor</b> for this class
    /// accepts all of the configuration options of <b>{@link Ext.DatePicker}</b>.</li>
    /// <li>If subclassing DateMenu, any configuration options for the DatePicker must be
    /// applied to the <tt><b>initialConfig</b></tt> property of the DateMenu.
    /// Applying {@link Ext.DatePicker DatePicker} configuration settings to
    /// <b><tt>this</tt></b> will <b>not</b> affect the DatePicker's configuration.</li>
    /// </ul></div>
    /// @xtype datemenu
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DateMenu : Ext.menu.Menu
    {
        public new void initComponent() { }
        public void menuHide() { }
        public void onBeforeShow() { }
        public new void onShow() { }
        /// <summary>
        /// The {@link Ext.DatePicker} instance for this DateMenu
        /// @property picker
        /// @type DatePicker
        /// </summary>
        public JsString cls { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableScrolling
        /// @hide
        /// </summary>
        public new bool enableScrolling { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideOnClick
        /// False to continue showing the menu after a date is selected, defaults to true.
        /// </summary>
        public bool hideOnClick { get; set; }
        /// <summary>
        /// @cfg {String} pickerId
        /// An id to assign to the underlying date picker. Defaults to <tt>null</tt>.
        /// </summary>
        public object pickerId { get; set; }
    }
    #endregion
    #region Item
    /// <summary>
    /// @class Ext.menu.Item
    /// @extends Ext.menu.BaseItem
    /// A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
    /// display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific
    /// activation and click handling.
    /// @constructor
    /// Creates a new Item
    /// @param {Object} config Configuration options
    /// @xtype menuitem
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Item : Ext.menu.BaseItem
    {
        public void activate(object autoExpand) { }
        public void beforeDestroy() { }
        public new void deactivate() { }
        public void deferExpand(object autoActivate) { }
        public void deferHide() { }
        public void expandMenu(object autoActivate) { }
        public void getTemplateArgs() { }
        public new void handleClick(object e) { }
        public void hideMenu() { }
        public new void initComponent() { }
        public new void onRender(object container, object position) { }
        /// <summary>
        /// Sets the CSS class to apply to the item's icon element
        /// @param {String} cls The CSS class to apply
        /// </summary>
        public void setIconClass(JsString cls) { }
        /// <summary>
        /// Sets the text to display in this menu item
        /// @param {String} text The text to display
        /// </summary>
        public void setText(JsString text) { }
        public new void shouldDeactivate(object e) { }
        /// <summary>
        /// @cfg {String} altText The altText to use for the icon, if it exists. Defaults to <tt>''</tt>.
        /// </summary>
        public JsString altText { get; set; }
        /// <summary>
        /// @cfg {Boolean} canActivate True if this item can be visually activated (defaults to true)
        /// </summary>
        public new bool canActivate { get; set; }
        public new JsString ctype { get; set; }
        public object hideDelay { get; set; }
        /// <summary>
        /// @cfg {String} itemCls The default CSS class to use for menu items (defaults to 'x-menu-item')
        /// </summary>
        public JsString itemCls { get; set; }
        /// <summary>
        /// @cfg {Number} showDelay Length of time in milliseconds to wait before showing this item (defaults to 200)
        /// </summary>
        public JsNumber showDelay { get; set; }
    }
    #endregion
    #region Menu
    /// <summary>
    /// @class Ext.menu.Menu
    /// @extends Ext.Container
    /// <p>A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class
    /// when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).</p>
    /// <p>Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.</p>
    /// <p>To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}
    /// specify <tt>iconCls: 'no-icon'</tt>.  This reserves a space for an icon, and indents the Component in line
    /// with the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}
    /// for an example.</p>
    /// <p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with
    /// <b><tt>{@link #floating}:false</tt></b>, a Menu may be used as child of a Container.</p>
    /// *
    /// @xtype menu
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Menu : Ext.Container
    {
        /// <summary>
        /// Adds an {@link Ext.Element} object to the menu
        /// @param {Mixed} el The element or DOM node to add, or its id
        /// @return {Ext.menu.Item} The menu item that was added
        /// </summary>
        public Item addElement(object el) { return null; }
        /// <summary>
        /// Adds an existing object based on {@link Ext.menu.BaseItem} to the menu
        /// @param {Ext.menu.Item} item The menu item to add
        /// @return {Ext.menu.Item} The menu item that was added
        /// </summary>
        public Item addItem(Item item) { return null; }
        /// <summary>
        /// Creates a new {@link Ext.menu.Item} based an the supplied config object and adds it to the menu
        /// @param {Object} config A MenuItem config object
        /// @return {Ext.menu.Item} The menu item that was added
        /// </summary>
        public Item addMenuItem(JsObject config) { return null; }
        /// <summary>
        /// Adds a separator bar to the menu
        /// @return {Ext.menu.Item} The menu item that was added
        /// </summary>
        public Item addSeparator() { return null; }
        /// <summary>
        /// Creates a new {@link Ext.menu.TextItem} with the supplied text and adds it to the menu
        /// @param {String} text The text to display in the menu item
        /// @return {Ext.menu.Item} The menu item that was added
        /// </summary>
        public Item addText(JsString text) { return null; }
        public new void applyDefaults(object c) { }
        public void constrainScroll(object y) { }
        public void createScrollers() { }
        public void deactivateActive() { }
        public void doFocus() { }
        public void findTargetItem(object e) { }
        public void focus() { }
        public void getLayoutTarget() { }
        public void getMenuItem(object config) { }
        /// <summary>
        /// Hides this menu and optionally all parent menus
        /// @param {Boolean} deep (optional) True to hide all parent menus recursively, if any (defaults to false)
        /// </summary>
        public void hide(bool deep) { }
        public new void initComponent() { }
        public new void lookupComponent(object c) { }
        public void onClick(object e) { }
        public void onDestroy() { }
        public void onHide() { }
        public void onLayout() { }
        public void onMouseOut(object e) { }
        public void onMouseOver(object e) { }
        public void onRender(object ct, object position) { }
        public void onScroll(object e, object t) { }
        public void onScrollerIn(object e, object t) { }
        public void onScrollerOut(object e, object t) { }
        public void setActiveItem(object item, object autoExpand) { }
        /// <summary>
        /// If <code>{@link #floating}=true</code>, shows this menu relative to
        /// another element using {@link #showat}, otherwise uses {@link Ext.Component#show}.
        /// @param {Mixed} element The element to align to
        /// @param {String} position (optional) The {@link Ext.Element#alignTo} anchor position to use in aligning to
        /// the element (defaults to this.defaultAlign)
        /// @param {Ext.menu.Menu} parentMenu (optional) This menu's parent menu, if applicable (defaults to undefined)
        /// </summary>
        public void show(object el, object pos, Menu parentMenu) { }
        /// <summary>
        /// Displays this menu at a specific xy position and fires the 'show' event if a
        /// handler for the 'beforeshow' event does not return false cancelling the operation.
        /// @param {Array} xyPosition Contains X & Y [x, y] values for the position at which to show the menu (coordinates are page-based)
        /// @param {Ext.menu.Menu} parentMenu (optional) This menu's parent menu, if applicable (defaults to undefined)
        /// </summary>
        public void showAt(object xy, Menu parentMenu) { }
        public void tryActivate(object start, object step) { }
        /// <summary>
        /// @cfg {Boolean} allowOtherMenus True to allow multiple menus to be displayed at the same time (defaults to false)
        /// </summary>
        public bool allowOtherMenus { get; set; }
        public bool autoLayout { get; set; }
        public bool bufferResize { get; set; }
        /// <summary>
        /// @cfg {String} defaultAlign The default {@link Ext.Element#alignTo} anchor position value for this menu
        /// relative to its element of origin (defaults to 'tl-bl?')
        /// </summary>
        public JsString defaultAlign { get; set; }
        public new JsString defaultType { get; set; }
        /// <summary>
        /// @cfg {Boolean} enableScrolling True to allow the menu container to have scroller controls if the menu is too long (defaults to true).
        /// </summary>
        public bool enableScrolling { get; set; }
        /// <summary>
        /// @cfg {Boolean} floating
        /// <p>By default, a Menu configured as <b><code>floating:true</code></b>
        /// will be rendered as an {@link Ext.Layer} (an absolutely positioned,
        /// floating Component with zindex=15000).
        /// If configured as <b><code>floating:false</code></b>, the Menu may be
        /// used as child item of another Container instead of a free-floating
        /// {@link Ext.Layer Layer}.
        /// </summary>
        public bool floating { get; set; }
        public bool hidden { get; set; }
        public JsString hideMode { get; set; }
        /// <summary>
        /// @cfg {Boolean} ignoreParentClicks True to ignore clicks on any item in this menu that is a parent item (displays
        /// a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
        /// </summary>
        public bool ignoreParentClicks { get; set; }
        /// <summary>
        /// @cfg {String/Object} layout
        /// This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).
        /// Developers <i>may</i> override this configuration option if another layout is required.
        /// See {@link Ext.Container#layout} for additional information.
        /// </summary>
        public JsString layout { get; set; }
        /// <summary>
        /// @cfg {Number} maxHeight The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
        /// </summary>
        public JsNumber maxHeight { get; set; }
        /// <summary>
        /// @cfg {Number} minWidth The minimum width of the menu in pixels (defaults to 120)
        /// </summary>
        public JsNumber minWidth { get; set; }
        /// <summary>
        /// @cfg {Boolean} plain
        /// True to remove the incised line down the left side of the menu. Defaults to <tt>false</tt>.
        /// </summary>
        public bool plain { get; set; }
        public object scrollerHeight { get; set; }
        /// <summary>
        /// @cfg {Number} scrollIncrement The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
        /// </summary>
        public JsNumber scrollIncrement { get; set; }
        /// <summary>
        /// @cfg {Boolean/String} shadow True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop'
        /// for bottom-right shadow (defaults to 'sides')
        /// </summary>
        public object shadow { get; set; }
        /// <summary>
        /// @cfg {Boolean} showSeparator True to show the icon separator. (defaults to true).
        /// </summary>
        public bool showSeparator { get; set; }
        /// <summary>
        /// @cfg {String} subMenuAlign The {@link Ext.Element#alignTo} anchor position value to use for submenus of
        /// this menu (defaults to 'tl-tr?')
        /// </summary>
        public JsString subMenuAlign { get; set; }
        /// <summary>
        /// @cfg {Number} zIndex
        /// zIndex to use when the menu is floating.
        /// </summary>
        public object zIndex { get; set; }
    }
    #endregion
    #region MenuNav
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MenuNav : Ext.KeyNav
    {
        public MenuNav() { }
        public MenuNav(object menu) { }
        public void doRelay(object e, object h) { }
        public void enter(object e, object m) { }
        public void left(object e, object m) { }
        public void right(object e, object m) { }
        public void tab(object e, object m) { }
    }
    #endregion
    #region Separator
    /// <summary>
    /// @class Ext.menu.Separator
    /// @extends Ext.menu.BaseItem
    /// Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
    /// add one of these by using "-" in you call to add() or in your items config rather than creating one directly.
    /// @constructor
    /// @param {Object} config Configuration options
    /// @xtype menuseparator
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Separator : Ext.menu.BaseItem
    {
        public void onRender(object li) { }
        /// <summary>
        /// @cfg {String} activeClass
        /// @hide
        /// </summary>
        public new JsString activeClass { get; set; }
        /// <summary>
        /// @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
        /// </summary>
        public new bool hideOnClick { get; set; }
        /// <summary>
        /// @cfg {String} itemCls The default CSS class to use for separators (defaults to "x-menu-sep")
        /// </summary>
        public JsString itemCls { get; set; }
    }
    #endregion
    #region TextItem
    /// <summary>
    /// @class Ext.menu.TextItem
    /// @extends Ext.menu.BaseItem
    /// Adds a static text string to a menu, usually used as either a heading or group separator.
    /// @constructor
    /// Creates a new TextItem
    /// @param {Object/String} config If config is a string, it is used as the text to display, otherwise it
    /// is applied as a config object (and should contain a <tt>text</tt> property).
    /// @xtype menutextitem
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TextItem : Ext.menu.BaseItem
    {
        public TextItem() { }
        public TextItem(object config) { }
        public void onRender() { }
        /// <summary>
        /// @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
        /// </summary>
        public new bool hideOnClick { get; set; }
        /// <summary>
        /// @cfg {String} itemCls The default CSS class to use for text items (defaults to "x-menu-text")
        /// </summary>
        public JsString itemCls { get; set; }
    }
    #endregion
}
#endregion
#region Ext.slider
namespace Ext.slider
{
    #region MultiSlider
    /// <summary>
    /// @class Ext.slider.MultiSlider
    /// @extends Ext.BoxComponent
    /// Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container. Example usage:
    /// <pre>
    /// new Ext.Slider({
    /// renderTo: Ext.getBody(),
    /// width: 200,
    /// value: 50,
    /// increment: 10,
    /// minValue: 0,
    /// maxValue: 100
    /// });
    /// </pre>
    /// Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:
    /// <pre>
    /// new Ext.Slider({
    /// renderTo: Ext.getBody(),
    /// width: 200,
    /// values: [25, 50, 75],
    /// minValue: 0,
    /// maxValue: 100,
    /// //this defaults to true, setting to false allows the thumbs to pass each other
    /// {@link #constrainThumbs}: false
    /// });
    /// </pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MultiSlider : Ext.BoxComponent
    {
        /// <summary>
        /// Creates a new thumb and adds it to the slider
        /// @param {Number} value The initial value to set on the thumb. Defaults to 0
        /// </summary>
        public void addThumb(JsNumber value) { }
        public new void afterRender() { }
        public void beforeDestroy() { }
        /// <summary>
        /// @private
        /// If using snapping, this takes a desired new value and returns the closest snapped
        /// value to it
        /// @param {Number} value The unsnapped value
        /// @return {Number} The value of the nearest snap target
        /// </summary>
        public JsNumber doSnap(JsNumber value) { return null; }
        public void focus() { }
        /// <summary>
        /// @private
        /// Returns the nearest thumb to a click event, along with its distance
        /// @param {Object} local Object containing top and left values from a click event
        /// @param {String} prop The property of local to compare on. Use 'left' for horizontal sliders, 'top' for vertical ones
        /// @return {Object} The closest thumb object and its distance from the click event
        /// </summary>
        public JsObject getNearest(JsObject local, JsString prop) { return null; }
        /// <summary>
        /// @private
        /// Returns the ratio of pixels to mapped values. e.g. if the slider is 200px wide and maxValue - minValue is 100,
        /// the ratio is 2
        /// @return {Number} The ratio of pixels to mapped values
        /// </summary>
        public JsNumber getRatio() { return null; }
        /// <summary>
        /// Returns the current value of the slider
        /// @param {Number} index The index of the thumb to return a value for
        /// @return {Number} The current value of the slider
        /// </summary>
        public JsNumber getValue(JsNumber index) { return null; }
        /// <summary>
        /// Returns an array of values - one for the location of each thumb
        /// @return {Array} The set of thumb values
        /// </summary>
        public JsArray getValues() { return null; }
        public new void initComponent() { }
        /// <summary>
        /// @private
        /// Adds keyboard and mouse listeners on this.el. Ignores click events on the internal focus element.
        /// Creates a new DragTracker which is used to control what happens when the user drags the thumb around.
        /// </summary>
        public void initEvents() { }
        /// <summary>
        /// @private
        /// @param {Number} index Index of the thumb to move
        /// </summary>
        public void moveThumb(JsNumber index, object v, object animate) { }
        /// <summary>
        /// @private
        /// Returns a snapped, constrained value when given a desired value
        /// @param {Number} value Raw number value
        /// @return {Number} The raw value rounded to the correct d.p. and constrained within the set max and min values
        /// </summary>
        public JsNumber normalizeValue(object v) { return null; }
        /// <summary>
        /// @private
        /// Moves the thumb to the indicated position. Note that a Vertical implementation is provided in Ext.slider.Vertical.
        /// Only changes the value if the click was within this.clickRange.
        /// @param {Object} local Object containing top and left values for the click event.
        /// </summary>
        public void onClickChange(JsObject local) { }
        public void onDisable() { }
        public void onEnable() { }
        /// <summary>
        /// @private
        /// Handler for any keypresses captured by the slider. If the key is UP or RIGHT, the thumb is moved along to the right
        /// by this.keyIncrement. If DOWN or LEFT it is moved left. Pressing CTRL moves the slider to the end in either direction
        /// @param {Ext.EventObject} e The Event object
        /// </summary>
        public void onKeyDown(object e) { }
        /// <summary>
        /// @private
        /// Mousedown handler for the slider. If the clickToChange is enabled and the click was not on the draggable 'thumb',
        /// this calculates the new value of the slider and tells the implementation (Horizontal or Vertical) to move the thumb
        /// @param {Ext.EventObject} e The click event
        /// </summary>
        public void onMouseDown(object e) { }
        public void onRender() { }
        public void onResize(object w, object h) { }
        /// <summary>
        /// @private
        /// Moves the given thumb above all other by increasing its z-index. This is called when as drag
        /// any thumb, so that the thumb that was just dragged is always at the highest z-index. This is
        /// required when the thumbs are stacked on top of each other at one of the ends of the slider's
        /// range, which can result in the user not being able to move any of them.
        /// @param {Ext.slider.Thumb} topThumb The thumb to move to the top
        /// </summary>
        public void promoteThumb(Thumb topThumb) { }
        /// <summary>
        /// @private
        /// Given a pixel location along the slider, returns the mapped slider value for that pixel.
        /// E.g. if we have a slider 200px wide with minValue = 100 and maxValue = 500, reverseValue(50)
        /// returns 200
        /// @param {Number} pos The position along the slider to return a mapped value for
        /// @return {Number} The mapped value for the given position
        /// </summary>
        public JsNumber reverseValue(JsNumber pos) { return null; }
        /// <summary>
        /// Sets the maximum value for the slider instance. If the current value is more than the
        /// maximum value, the current value will be changed.
        /// @param {Number} val The new maximum value
        /// </summary>
        public void setMaxValue(JsNumber val) { }
        /// <summary>
        /// Sets the minimum value for the slider instance. If the current value is less than the
        /// minimum value, the current value will be changed.
        /// @param {Number} val The new minimum value
        /// </summary>
        public void setMinValue(JsNumber val) { }
        /// <summary>
        /// Programmatically sets the value of the Slider. Ensures that the value is constrained within
        /// the minValue and maxValue.
        /// @param {Number} index Index of the thumb to move
        /// @param {Number} value The value to set the slider to. (This will be constrained within minValue and maxValue)
        /// @param {Boolean} animate Turn on or off animation, defaults to true
        /// </summary>
        public void setValue(JsNumber index, object v, bool animate, object changeComplete) { }
        /// <summary>
        /// Synchronizes the thumb position to the proper proportion of the total component width based
        /// on the current slider {@link #value}.  This will be called automatically when the Slider
        /// is resized by a layout, but if it is rendered auto width, this method can be called from
        /// another resize handler to sync the Slider if necessary.
        /// </summary>
        public void syncThumb() { }
        /// <summary>
        /// @private
        /// </summary>
        public void translateValue(object v) { }
        /// <summary>
        /// @cfg {Boolean} animate Turn on or off animation. Defaults to true
        /// </summary>
        public bool animate { get; set; }
        /// <summary>
        /// @cfg {Boolean} clickToChange Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
        /// </summary>
        public bool clickToChange { get; set; }
        /// <summary>
        /// @cfg {Boolean} constrainThumbs True to disallow thumbs from overlapping one another. Defaults to true
        /// </summary>
        public bool constrainThumbs { get; set; }
        /// <summary>
        /// @cfg {Number/Boolean} decimalPrecision.
        /// <p>The number of decimal places to which to round the Slider's value. Defaults to 0.</p>
        /// <p>To disable rounding, configure as <tt><b>false</b></tt>.</p>
        /// </summary>
        public object decimalPrecision { get; set; }
        /// <summary>
        /// @cfg {Number} increment How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
        /// </summary>
        public JsNumber increment { get; set; }
        /// <summary>
        /// @cfg {Number} keyIncrement How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
        /// </summary>
        public JsNumber keyIncrement { get; set; }
        /// <summary>
        /// @cfg {Number} maxValue The maximum value for the Slider. Defaults to 100.
        /// </summary>
        public JsNumber maxValue { get; set; }
        /// <summary>
        /// @cfg {Number} minValue The minimum value for the Slider. Defaults to 0.
        /// </summary>
        public JsNumber minValue { get; set; }
        /// <summary>
        /// @private
        /// @property topThumbZIndex
        /// @type Number
        /// The number used internally to set the z index of the top thumb (see promoteThumb for details)
        /// </summary>
        public object topThumbZIndex { get; set; }
        /// <summary>
        /// @cfg {Boolean} vertical Orient the Slider vertically rather than horizontally, defaults to false.
        /// </summary>
        public bool vertical { get; set; }
    }
    #endregion
    #region SingleSlider
    /// <summary>
    /// @class Ext.slider.SingleSlider
    /// @extends Ext.slider.MultiSlider
    /// Slider which supports vertical or horizontal orientation, keyboard adjustments,
    /// configurable snapping, axis clicking and animation. Can be added as an item to
    /// any container. Example usage:
    /// <pre><code>
    /// new Ext.slider.SingleSlider({
    /// renderTo: Ext.getBody(),
    /// width: 200,
    /// value: 50,
    /// increment: 10,
    /// minValue: 0,
    /// maxValue: 100
    /// });
    /// </code></pre>
    /// The class Ext.slider.SingleSlider is aliased to Ext.Slider for backwards compatibility.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class SingleSlider : Ext.slider.MultiSlider
    {
        public SingleSlider() { }
        public SingleSlider(object config) { }
        public void getNearest() { }
        /// <summary>
        /// Returns the current value of the slider
        /// @return {Number} The current value of the slider
        /// </summary>
        public JsNumber getValue() { return null; }
        /// <summary>
        /// Programmatically sets the value of the Slider. Ensures that the value is constrained within
        /// the minValue and maxValue.
        /// @param {Number} value The value to set the slider to. (This will be constrained within minValue and maxValue)
        /// @param {Boolean} animate Turn on or off animation, defaults to true
        /// </summary>
        public void setValue(JsNumber value, bool animate) { }
        /// <summary>
        /// Synchronizes the thumb position to the proper proportion of the total component width based
        /// on the current slider {@link #value}.  This will be called automatically when the Slider
        /// is resized by a layout, but if it is rendered auto width, this method can be called from
        /// another resize handler to sync the Slider if necessary.
        /// </summary>
        public new void syncThumb() { }
    }
    #endregion
    #region Thumb
    /// <summary>
    /// @class Ext.slider.Thumb
    /// @extends Object
    /// Represents a single thumb element on a Slider. This would not usually be created manually and would instead
    /// be created internally by an {@link Ext.slider.MultiSlider Ext.Slider}.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Thumb : JsObject
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class Vertical
        {
            public static void getNewValue() { }
        }
        public Thumb() { }
        /// <summary>
        /// @constructor
        /// @cfg {Ext.slider.MultiSlider} slider The Slider to render to (required)
        /// </summary>
        public Thumb(object config) { }
        /// <summary>
        /// @private
        /// Destroys the thumb
        /// </summary>
        public void destroy() { }
        /// <summary>
        /// Disables the thumb if it is currently enabled
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Enables the thumb if it is currently disabled
        /// </summary>
        public void enable() { }
        public void getNewValue() { }
        /// <summary>
        /// Sets up an Ext.dd.DragTracker for this thumb
        /// </summary>
        public void initEvents() { }
        /// <summary>
        /// @private
        /// This is tied into the internal Ext.dd.DragTracker. If the slider is currently disabled,
        /// this returns false to disable the DragTracker too.
        /// @return {Boolean} False if the slider is currently disabled
        /// </summary>
        public bool onBeforeDragStart(object e) { return false; }
        /// <summary>
        /// @private
        /// This is tied into the internal Ext.dd.DragTracker's onDrag template method. This is called every time
        /// the DragTracker detects a drag movement. It updates the Slider's value using the position of the drag
        /// </summary>
        public void onDrag(object e) { }
        /// <summary>
        /// @private
        /// This is tied to the internal Ext.dd.DragTracker's onEnd template method. Removes the drag CSS class and
        /// fires the 'changecomplete' event with the new value
        /// </summary>
        public void onDragEnd(object e) { }
        /// <summary>
        /// @private
        /// This is tied into the internal Ext.dd.DragTracker's onStart template method. Adds the drag CSS class
        /// to the thumb and fires the 'dragstart' event
        /// </summary>
        public void onDragStart(object e) { }
        /// <summary>
        /// Renders the thumb into a slider
        /// </summary>
        public void render() { }
        /// <summary>
        /// True while the thumb is in a drag operation
        /// @type Boolean
        /// </summary>
        public bool dragging { get; set; }
    }
    #endregion
    #region Tip
    /// <summary>
    /// @class Ext.slider.Tip
    /// @extends Ext.Tip
    /// Simple plugin for using an Ext.Tip with a slider to show the slider value. Example usage:
    /// <pre>
    /// new Ext.Slider({
    /// width: 214,
    /// minValue: 0,
    /// maxValue: 100,
    /// plugins: new Ext.slider.Tip()
    /// });
    /// </pre>
    /// Optionally provide your own tip text by overriding getText:
    /// <pre>
    /// new Ext.Slider({
    /// width: 214,
    /// minValue: 0,
    /// maxValue: 100,
    /// plugins: new Ext.slider.Tip({
    /// getText: function(thumb){
    /// return String.format('<b>{0}% complete</b>', thumb.value);
    /// }
    /// })
    /// });
    /// </pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Tip : Ext.Tip
    {
        /// <summary>
        /// Used to create the text that appears in the Tip's body. By default this just returns
        /// the value of the Slider Thumb that the Tip is attached to. Override to customize.
        /// @param {Ext.slider.Thumb} thumb The Thumb that the Tip is attached to
        /// @return {String} The text to display in the tip
        /// </summary>
        public JsString getText(Thumb thumb) { return null; }
        public void init(object slider) { }
        /// <summary>
        /// @private
        /// Called whenever a dragstart or drag event is received on the associated Thumb.
        /// Aligns the Tip with the Thumb's new position.
        /// @param {Ext.slider.MultiSlider} slider The slider
        /// @param {Ext.EventObject} e The Event object
        /// @param {Ext.slider.Thumb} thumb The thumb that the Tip is attached to
        /// </summary>
        public void onSlide(MultiSlider slider, object e, Thumb thumb) { }
        public object minWidth { get; set; }
    }
    #endregion
    #region Vertical
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Vertical
    {
        public static void getRatio() { }
        public static void moveThumb(object index, object v, object animate) { }
        public static void onClickChange(object local) { }
        public static void onResize(object w, object h) { }
    }
    #endregion
}
#endregion
#region Ext.state
namespace Ext.state
{
    #region CookieProvider
    /// <summary>
    /// @class Ext.state.CookieProvider
    /// @extends Ext.state.Provider
    /// The default Provider implementation which saves state via cookies.
    /// <br />Usage:
    /// <pre><code>
    /// var cp = new Ext.state.CookieProvider({
    /// path: "/cgi-bin/",
    /// expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
    /// domain: "extjs.com"
    /// });
    /// Ext.state.Manager.setProvider(cp);
    /// </code></pre>
    /// @cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
    /// @cfg {Date} expires The cookie expiration date (defaults to 7 days from now)
    /// @cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than
    /// your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include
    /// all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
    /// domain the page is running on including the 'www' like 'www.extjs.com')
    /// @cfg {Boolean} secure True if the site is using SSL (defaults to false)
    /// @constructor
    /// Create a new CookieProvider
    /// @param {Object} config The configuration object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class CookieProvider : Ext.state.Provider
    {
        public CookieProvider() { }
        public CookieProvider(CookieProviderConfig config) { }
        public void clear(object name) { }
        public void clearCookie(object name) { }
        public CookieProvider(object config) { }
        public void readCookies() { }
        public void set(object name, object value) { }
        public void setCookie(object name, object value) { }
    }
    #endregion
    #region CookieProviderConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class CookieProviderConfig
    {
        /// <summary>
        /// The domain to save the cookie for.  Note that you cannot specify a different domain than
        /// </summary>
        public JsString domain { get; set; }
        /// <summary>
        /// The cookie expiration date (defaults to 7 days from now)
        /// </summary>
        public JsDate expires { get; set; }
        /// <summary>
        /// The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
        /// </summary>
        public JsString path { get; set; }
        /// <summary>
        /// True if the site is using SSL (defaults to false)
        /// </summary>
        public bool secure { get; set; }
    }
    #endregion
    #region Provider
    /// <summary>
    /// @class Ext.state.Provider
    /// Abstract base class for state provider implementations. This class provides methods
    /// for encoding and decoding <b>typed</b> variables including dates and defines the
    /// Provider interface.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Provider : Ext.util.Observable
    {
        /// <summary>
        /// Clears a value from the state
        /// @param {String} name The key name
        /// </summary>
        public void clear(JsString name) { }
        public Provider() { }
        /// <summary>
        /// Decodes a string previously encoded with {@link #encodeValue}.
        /// @param {String} value The value to decode
        /// @return {Mixed} The decoded value
        /// </summary>
        public void decodeValue(object cookie) { }
        /// <summary>
        /// Encodes a value including type information.  Decode with {@link #decodeValue}.
        /// @param {Mixed} value The value to encode
        /// @return {String} The encoded value
        /// </summary>
        public JsString encodeValue(object v) { return null; }
        /// <summary>
        /// Returns the current value for a key
        /// @param {String} name The key name
        /// @param {Mixed} defaultValue A default value to return if the key's value is not found
        /// @return {Mixed} The state data
        /// </summary>
        public void get(JsString name, object defaultValue) { }
        /// <summary>
        /// Sets the value for a key
        /// @param {String} name The key name
        /// @param {Mixed} value The value to set
        /// </summary>
        public void set(JsString name, object value) { }
    }
    #endregion
}
#endregion
#region Ext.tree
namespace Ext.tree
{
    #region AsyncTreeNode
    /// <summary>
    /// @class Ext.tree.AsyncTreeNode
    /// @extends Ext.tree.TreeNode
    /// @cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)
    /// @constructor
    /// @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class AsyncTreeNode
    {
        public AsyncTreeNode() { }
        public AsyncTreeNode(AsyncTreeNodeConfig config) { }
        /// <summary>
        /// @class Ext.tree.AsyncTreeNode
        /// @extends Ext.tree.TreeNode
        /// @cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)
        /// @constructor
        /// @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
        /// </summary>
        public AsyncTreeNode(object config) { }
    }
    #endregion
    #region AsyncTreeNodeConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class AsyncTreeNodeConfig
    {
        /// <summary>
        /// A TreeLoader to be used by this node (defaults to the loader defined on the tree)
        /// </summary>
        public object loader { get; set; }
    }
    #endregion
    #region DefaultSelectionModel
    /// <summary>
    /// @class Ext.tree.DefaultSelectionModel
    /// @extends Ext.util.Observable
    /// The default single selection for a TreePanel.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DefaultSelectionModel : Ext.util.Observable
    {
        public DefaultSelectionModel() { }
        /// <summary>
        /// Clear all selections
        /// @param {Boolean} silent True to stop the selectionchange event from firing.
        /// </summary>
        public void clearSelections(bool silent) { }
        public DefaultSelectionModel(object config) { }
        /// <summary>
        /// Get the selected node
        /// @return {TreeNode} The selected node
        /// </summary>
        public void getSelectedNode() { }
        public void init(object tree) { }
        /// <summary>
        /// Returns true if the node is selected
        /// @param {TreeNode} node The node to check
        /// @return {Boolean}
        /// </summary>
        public void isSelected(object node) { }
        public void onKeyDown(object e) { }
        public void onNodeClick(object node, object e) { }
        /// <summary>
        /// Select a node.
        /// @param {TreeNode} node The node to select
        /// @return {TreeNode} The selected node
        /// </summary>
        public void select(object node, object selectNextNode) { }
        /// <summary>
        /// Selects the node above the selected node in the tree, intelligently walking the nodes
        /// @return TreeNode The new selection
        /// </summary>
        public void selectNext(object s) { }
        /// <summary>
        /// Selects the node above the selected node in the tree, intelligently walking the nodes
        /// @return TreeNode The new selection
        /// </summary>
        public void selectPrevious(object s) { }
        /// <summary>
        /// Deselect a node.
        /// @param {TreeNode} node The node to unselect
        /// @param {Boolean} silent True to stop the selectionchange event from firing.
        /// </summary>
        public void unselect(object node, bool silent) { }
    }
    #endregion
    #region MultiSelectionModel
    /// <summary>
    /// @class Ext.tree.MultiSelectionModel
    /// @extends Ext.util.Observable
    /// Multi selection for a TreePanel.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MultiSelectionModel : Ext.util.Observable
    {
        public MultiSelectionModel() { }
        /// <summary>
        /// Clear all selections
        /// </summary>
        public void clearSelections(object suppressEvent) { }
        public MultiSelectionModel(object config) { }
        /// <summary>
        /// Returns an array of the selected nodes
        /// @return {Array}
        /// </summary>
        public void getSelectedNodes() { }
        public void init(object tree) { }
        /// <summary>
        /// Returns true if the node is selected
        /// @param {TreeNode} node The node to check
        /// @return {Boolean}
        /// </summary>
        public void isSelected(object node) { }
        public void onNodeClick(object node, object e) { }
        /// <summary>
        /// Select a node.
        /// @param {TreeNode} node The node to select
        /// @param {EventObject} e (optional) An event associated with the selection
        /// @param {Boolean} keepExisting True to retain existing selections
        /// @return {TreeNode} The selected node
        /// </summary>
        public void select(object node, object e, bool keepExisting) { }
        /// <summary>
        /// Deselect a node.
        /// @param {TreeNode} node The node to unselect
        /// </summary>
        public void unselect(object node) { }
    }
    #endregion
    #region RootTreeNodeUI
    /// <summary>
    /// @class Ext.tree.RootTreeNodeUI
    /// This class provides the default UI implementation for <b>root</b> Ext TreeNodes.
    /// The RootTreeNode UI implementation allows customizing the appearance of the root tree node.<br>
    /// <p>
    /// If you are customizing the Tree's user interface, you
    /// may need to extend this class, but you should never need to instantiate this class.<br>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class RootTreeNodeUI : Ext.tree.TreeNodeUI
    {
        public void render() { }
    }
    #endregion
    #region TreeEditor
    /// <summary>
    /// @class Ext.tree.TreeEditor
    /// @extends Ext.Editor
    /// Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used
    /// as the editor field.
    /// @constructor
    /// @param {TreePanel} tree
    /// @param {Object} fieldConfig (optional) Either a prebuilt {@link Ext.form.Field} instance or a Field config object
    /// that will be applied to the default field instance (defaults to a {@link Ext.form.TextField}).
    /// @param {Object} config (optional) A TreeEditor config object
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeEditor
    {
        public TreeEditor() { }
        /// <summary>
        /// @class Ext.tree.TreeEditor
        /// @extends Ext.Editor
        /// Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used
        /// as the editor field.
        /// @constructor
        /// @param {TreePanel} tree
        /// @param {Object} fieldConfig (optional) Either a prebuilt {@link Ext.form.Field} instance or a Field config object
        /// that will be applied to the default field instance (defaults to a {@link Ext.form.TextField}).
        /// @param {Object} config (optional) A TreeEditor config object
        /// </summary>
        public TreeEditor(object tree, object fc, JsObject config) { }
    }
    #endregion
    #region TreeEventModel
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeEventModel
    {
        public TreeEventModel() { }
        public void beforeEvent(object e) { }
        public void checkContainerEvent(object e, object type) { }
        public void delegateClick(object e, object t) { }
        public void delegateContextMenu(object e, object t) { }
        public void delegateDblClick(object e, object t) { }
        public void delegateOut(object e, object t) { }
        public void delegateOver(object e, object t) { }
        public void disable() { }
        public void enable() { }
        public void getNode(object e) { }
        public void getNodeTarget(object e) { }
        public void initEvents() { }
        public void onCheckboxClick(object e, object node) { }
        public void onContainerEvent(object e, object type) { }
        public void onIconClick(object e, object node) { }
        public void onIconOut(object e, object node) { }
        public void onIconOver(object e, object node) { }
        public void onNodeClick(object e, object node) { }
        public void onNodeContextMenu(object e, object node) { }
        public void onNodeDblClick(object e, object node) { }
        public void onNodeOut(object e, object node) { }
        public void onNodeOver(object e, object node) { }
        public void trackExit(object e) { }
        public TreeEventModel(object tree) { }
    }
    #endregion
    #region TreeFilter
    /// <summary>
    /// @class Ext.tree.TreeFilter
    /// Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes
    /// @param {TreePanel} tree
    /// @param {Object} config (optional)
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeFilter
    {
        public TreeFilter() { }
        /// <summary>
        /// Clears the current filter. Note: with the "remove" option
        /// set a filter cannot be cleared.
        /// </summary>
        public void clear() { }
        /// <summary>
        /// Filter the data by a specific attribute.
        /// @param {String/RegExp} value Either string that the attribute value
        /// should start with or a RegExp to test against the attribute
        /// @param {String} attr (optional) The attribute passed in your node's attributes collection. Defaults to "text".
        /// @param {TreeNode} startNode (optional) The node to start the filter at.
        /// </summary>
        public void filter(object value, JsString attr, object startNode) { }
        /// <summary>
        /// Filter by a function. The passed function will be called with each
        /// node in the tree (or from the startNode). If the function returns true, the node is kept
        /// otherwise it is filtered. If a node is filtered, its children are also filtered.
        /// @param {Function} fn The filter function
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
        /// </summary>
        public void filterBy(JsAction fn, JsObject scope, object startNode) { }
        /// <summary>
        /// @class Ext.tree.TreeFilter
        /// Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes
        /// @param {TreePanel} tree
        /// @param {Object} config (optional)
        /// </summary>
        public TreeFilter(object tree, JsObject config) { }
        public bool autoClear { get; set; }
        public bool clearBlank { get; set; }
        public bool remove { get; set; }
        public bool reverse { get; set; }
    }
    #endregion
    #region TreeLoader
    /// <summary>
    /// @class Ext.tree.TreeLoader
    /// @extends Ext.util.Observable
    /// A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}'s child
    /// nodes from a specified URL. The response must be a JavaScript Array definition
    /// whose elements are node definition objects. e.g.:
    /// <pre><code>
    /// [{
    /// id: 1,
    /// text: 'A leaf Node',
    /// leaf: true
    /// },{
    /// id: 2,
    /// text: 'A folder Node',
    /// children: [{
    /// id: 3,
    /// text: 'A child Node',
    /// leaf: true
    /// }]
    /// }]
    /// </code></pre>
    /// <br><br>
    /// A server request is sent, and child nodes are loaded only when a node is expanded.
    /// The loading node's id is passed to the server under the parameter name "node" to
    /// enable the server to produce the correct child nodes.
    /// <br><br>
    /// To pass extra parameters, an event handler may be attached to the "beforeload"
    /// event, and the parameters specified in the TreeLoader's baseParams property:
    /// <pre><code>
    /// myTreeLoader.on("beforeload", function(treeLoader, node) {
    /// this.baseParams.category = node.attributes.category;
    /// }, this);
    /// </code></pre>
    /// This would pass an HTTP parameter called "category" to the server containing
    /// the value of the Node's "category" attribute.
    /// @constructor
    /// Creates a new Treeloader.
    /// @param {Object} config A config object containing config properties.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeLoader
    {
        public TreeLoader() { }
        /// <summary>
        /// @class Ext.tree.TreeLoader
        /// @extends Ext.util.Observable
        /// A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}'s child
        /// nodes from a specified URL. The response must be a JavaScript Array definition
        /// whose elements are node definition objects. e.g.:
        /// <pre><code>
        /// [{
        /// id: 1,
        /// text: 'A leaf Node',
        /// leaf: true
        /// },{
        /// id: 2,
        /// text: 'A folder Node',
        /// children: [{
        /// id: 3,
        /// text: 'A child Node',
        /// leaf: true
        /// }]
        /// }]
        /// </code></pre>
        /// <br><br>
        /// A server request is sent, and child nodes are loaded only when a node is expanded.
        /// The loading node's id is passed to the server under the parameter name "node" to
        /// enable the server to produce the correct child nodes.
        /// <br><br>
        /// To pass extra parameters, an event handler may be attached to the "beforeload"
        /// event, and the parameters specified in the TreeLoader's baseParams property:
        /// <pre><code>
        /// myTreeLoader.on("beforeload", function(treeLoader, node) {
        /// this.baseParams.category = node.attributes.category;
        /// }, this);
        /// </code></pre>
        /// This would pass an HTTP parameter called "category" to the server containing
        /// the value of the Node's "category" attribute.
        /// @constructor
        /// Creates a new Treeloader.
        /// @param {Object} config A config object containing config properties.
        /// </summary>
        public TreeLoader(JsObject config) { }
    }
    #endregion
    #region TreeNode
    /// <summary>
    /// @class Ext.tree.TreeNode
    /// @extends Ext.data.Node
    /// @cfg {String} text The text for this node
    /// @cfg {Boolean} expanded true to start the node expanded
    /// @cfg {Boolean} allowDrag False to make this node undraggable if {@link #draggable} = true (defaults to true)
    /// @cfg {Boolean} allowDrop False if this node cannot have child nodes dropped on it (defaults to true)
    /// @cfg {Boolean} disabled true to start the node disabled
    /// @cfg {String} icon The path to an icon for the node. The preferred way to do this
    /// is to use the cls or iconCls attributes and add the icon via a CSS background image.
    /// @cfg {String} cls A css class to be added to the node
    /// @cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images
    /// @cfg {String} href URL of the link used for the node (defaults to #)
    /// @cfg {String} hrefTarget target frame for the link
    /// @cfg {Boolean} hidden True to render hidden. (Defaults to false).
    /// @cfg {String} qtip An Ext QuickTip for the node
    /// @cfg {Boolean} expandable If set to true, the node will always show a plus/minus icon, even when empty
    /// @cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)
    /// @cfg {Boolean} singleClickExpand True for single click expand on this node
    /// @cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
    /// @cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox
    /// (defaults to undefined with no checkbox rendered)
    /// @cfg {Boolean} draggable True to make this node draggable (defaults to false)
    /// @cfg {Boolean} isTarget False to not allow this node to act as a drop target (defaults to true)
    /// @cfg {Boolean} allowChildren False to not allow this node to have child nodes (defaults to true)
    /// @cfg {Boolean} editable False to not allow this node to be edited by an {@link Ext.tree.TreeEditor} (defaults to true)
    /// @constructor
    /// @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeNode : Ext.data.Node
    {
        public TreeNode() { }
        public TreeNode(TreeNodeConfig config) { }
        public new void appendChild(object n) { }
        public void beginUpdate() { }
        public void cancelExpand() { }
        /// <summary>
        /// Collapse this node.
        /// @param {Boolean} deep (optional) True to collapse all children as well
        /// @param {Boolean} anim (optional) false to cancel the default animation
        /// @param {Function} callback (optional) A callback to be called when
        /// expanding this node completes (does not wait for deep expand to complete).
        /// Called with 1 parameter, this node.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
        /// </summary>
        public void collapse(bool deep, bool anim, JsAction callback, JsObject scope) { }
        /// <summary>
        /// Collapse all child nodes
        /// @param {Boolean} deep (optional) true if the child nodes should also collapse their child nodes
        /// </summary>
        public void collapseChildNodes(bool deep) { }
        public TreeNode(object attributes) { }
        public void delayedExpand(object delay) { }
        public new void destroy(object silent) { }
        /// <summary>
        /// Disables this node
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Enables this node
        /// </summary>
        public void enable() { }
        public void endUpdate() { }
        /// <summary>
        /// Ensures all parent nodes are expanded, and if necessary, scrolls
        /// the node into view.
        /// @param {Function} callback (optional) A function to call when the node has been made visible.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
        /// </summary>
        public void ensureVisible(JsAction callback, JsObject scope) { }
        /// <summary>
        /// Expand this node.
        /// @param {Boolean} deep (optional) True to expand all children as well
        /// @param {Boolean} anim (optional) false to cancel the default animation
        /// @param {Function} callback (optional) A callback to be called when
        /// expanding this node completes (does not wait for deep expand to complete).
        /// Called with 1 parameter, this node.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
        /// </summary>
        public void expand(bool deep, bool anim, JsAction callback, JsObject scope) { }
        /// <summary>
        /// Expand all child nodes
        /// @param {Boolean} deep (optional) true if the child nodes should also expand their child nodes
        /// </summary>
        public void expandChildNodes(bool deep, object anim) { }
        public void getLoader() { }
        /// <summary>
        /// Returns the UI object for this node.
        /// @return {TreeNodeUI} The object which is providing the user interface for this tree
        /// node. Unless otherwise specified in the {@link #uiProvider}, this will be an instance
        /// of {@link Ext.tree.TreeNodeUI}
        /// </summary>
        public void getUI() { }
        public new void insertBefore(object node, object refNode) { }
        /// <summary>
        /// Returns true if this node is expanded
        /// @return {Boolean}
        /// </summary>
        public void isExpanded() { }
        public void isHiddenRoot() { }
        /// <summary>
        /// Returns true if this node is selected
        /// @return {Boolean}
        /// </summary>
        public void isSelected() { }
        public void onIdChange(object id) { }
        public void removeChild(object node, object destroy) { }
        public void render(object bulkRender) { }
        public void renderChildren(object suppressEvent) { }
        public void renderIndent(object deep, object refresh) { }
        public void runCallback(object cb, object scope, object args) { }
        /// <summary>
        /// Triggers selection of this node
        /// </summary>
        public void select() { }
        /// <summary>
        /// Sets the class on this node.
        /// @param {String} cls
        /// </summary>
        public void setCls(object cls) { }
        public new void setFirstChild(object node) { }
        /// <summary>
        /// Sets the href for the node.
        /// @param {String} href The href to set
        /// @param {String} (Optional) target The target of the href
        /// </summary>
        public void setHref(JsString href, object target) { }
        /// <summary>
        /// Sets the icon for this node.
        /// @param {String} icon
        /// </summary>
        public void setIcon(object icon) { }
        /// <summary>
        /// Sets the icon class for this node.
        /// @param {String} cls
        /// </summary>
        public void setIconCls(object cls) { }
        public new void setLastChild(object node) { }
        /// <summary>
        /// Sets the text for this node
        /// @param {String} text
        /// </summary>
        public void setText(object text) { }
        /// <summary>
        /// Sets the tooltip for this node.
        /// @param {String} tip The text for the tip
        /// @param {String} title (Optional) The title for the tip
        /// </summary>
        public void setTooltip(JsString tip, JsString title) { }
        public void sort(object fn, object scope) { }
        /// <summary>
        /// Toggles expanded/collapsed state of the node
        /// </summary>
        public void toggle() { }
        /// <summary>
        /// Triggers deselection of this node
        /// @param {Boolean} silent (optional) True to stop selection change events from firing.
        /// </summary>
        public void unselect(bool silent) { }
        public bool preventHScroll { get; set; }
    }
    #endregion
    #region TreeNodeConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class TreeNodeConfig
    {
        /// <summary>
        /// False to not allow this node to have child nodes (defaults to true)
        /// </summary>
        public bool allowChildren { get; set; }
        /// <summary>
        /// False to make this node undraggable if {@link #draggable} = true (defaults to true)
        /// </summary>
        public bool allowDrag { get; set; }
        /// <summary>
        /// False if this node cannot have child nodes dropped on it (defaults to true)
        /// </summary>
        public bool allowDrop { get; set; }
        /// <summary>
        /// True to render a checked checkbox for this node, false to render an unchecked checkbox
        /// </summary>
        public bool @checked { get; set; }
        /// <summary>
        /// A css class to be added to the node
        /// </summary>
        public JsString cls { get; set; }
        /// <summary>
        /// true to start the node disabled
        /// </summary>
        public bool disabled { get; set; }
        /// <summary>
        /// True to make this node draggable (defaults to false)
        /// </summary>
        public bool draggable { get; set; }
        /// <summary>
        /// False to not allow this node to be edited by an {@link Ext.tree.TreeEditor} (defaults to true)
        /// </summary>
        public bool editable { get; set; }
        /// <summary>
        /// If set to true, the node will always show a plus/minus icon, even when empty
        /// </summary>
        public bool expandable { get; set; }
        /// <summary>
        /// true to start the node expanded
        /// </summary>
        public bool expanded { get; set; }
        /// <summary>
        /// True to render hidden. (Defaults to false).
        /// </summary>
        public bool hidden { get; set; }
        /// <summary>
        /// URL of the link used for the node (defaults to #)
        /// </summary>
        public JsString href { get; set; }
        /// <summary>
        /// target frame for the link
        /// </summary>
        public JsString hrefTarget { get; set; }
        /// <summary>
        /// The path to an icon for the node. The preferred way to do this
        /// </summary>
        public JsString icon { get; set; }
        /// <summary>
        /// A css class to be added to the nodes icon element for applying css background images
        /// </summary>
        public JsString iconCls { get; set; }
        /// <summary>
        /// False to not allow this node to act as a drop target (defaults to true)
        /// </summary>
        public bool isTarget { get; set; }
        /// <summary>
        /// An Ext QuickTip for the node
        /// </summary>
        public JsString qtip { get; set; }
        /// <summary>
        /// An Ext QuickTip config for the node (used instead of qtip)
        /// </summary>
        public JsString qtipCfg { get; set; }
        /// <summary>
        /// True for single click expand on this node
        /// </summary>
        public bool singleClickExpand { get; set; }
        /// <summary>
        /// The text for this node
        /// </summary>
        public JsString text { get; set; }
        /// <summary>
        /// A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
        /// </summary>
        public JsAction uiProvider { get; set; }
    }
    #endregion
    #region TreeNodeUI
    /// <summary>
    /// @class Ext.tree.TreeNodeUI
    /// This class provides the default UI implementation for Ext TreeNodes.
    /// The TreeNode UI implementation is separate from the
    /// tree implementation, and allows customizing of the appearance of
    /// tree nodes.<br>
    /// <p>
    /// If you are customizing the Tree's user interface, you
    /// may need to extend this class, but you should never need to instantiate this class.<br>
    /// <p>
    /// This class provides access to the user interface components of an Ext TreeNode, through
    /// {@link Ext.tree.TreeNode#getUI}
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeNodeUI : JsObject
    {
        public TreeNodeUI() { }
        /// <summary>
        /// Adds one or more CSS classes to the node's UI element.
        /// Duplicate classes are automatically filtered out.
        /// @param {String/Array} className The CSS class to add, or an array of classes
        /// </summary>
        public void addClass(object cls) { }
        public void afterLoad() { }
        public void animCollapse(object callback) { }
        public void animExpand(object callback) { }
        public void appendDDGhost(object ghostNode) { }
        public void beforeLoad() { }
        public void blur() { }
        public void collapse() { }
        public TreeNodeUI(object node) { }
        public void destroy() { }
        public void ecClick(object e) { }
        public void endDrop() { }
        public void expand() { }
        public void fireEvent() { }
        public void focus() { }
        /// <summary>
        /// Returns the &lt;a> element that provides focus for the node's UI.
        /// @return {HtmlElement} The DOM anchor element.
        /// </summary>
        public HtmlElement getAnchor() { return null; }
        public void getChildIndent() { }
        public void getContainer() { }
        public void getDDHandles() { }
        public void getDDRepairXY() { }
        /// <summary>
        /// Returns the element which encapsulates this node.
        /// @return {HtmlElement} The DOM element. The default implementation uses a <code>&lt;li></code>.
        /// </summary>
        public HtmlElement getEl() { return null; }
        /// <summary>
        /// @private Gets a normalized href for the node.
        /// @param {String} href
        /// </summary>
        public void getHref(object href) { }
        /// <summary>
        /// Returns the icon &lt;img> element.
        /// @return {HtmlElement} The DOM image element.
        /// </summary>
        public HtmlElement getIconEl() { return null; }
        /// <summary>
        /// Returns the text node.
        /// @return {HtmlNode} The DOM text node.
        /// </summary>
        public void getTextEl() { }
        /// <summary>
        /// Hides this node.
        /// </summary>
        public void hide() { }
        public void highlight() { }
        public void initEvents() { }
        /// <summary>
        /// Returns the checked status of the node. If the node was rendered with no
        /// checkbox, it returns false.
        /// @return {Boolean} The checked flag.
        /// </summary>
        public bool isChecked() { return false; }
        public void onCheckChange() { }
        public void onClick(object e) { }
        public void onClsChange(object node, object cls, object oldCls) { }
        public void onContextMenu(object e) { }
        public void onDblClick(object e) { }
        public void onDisableChange(object node, object state) { }
        public void onHrefChange(object node, object href, object target) { }
        public void onIconChange(object node, object icon) { }
        public void onIconClsChange(object node, object cls, object oldCls) { }
        public void onIdChange(object id) { }
        public void onMove(object tree, object node, object oldParent, object newParent, object index, object refNode) { }
        public void onOut(object e) { }
        public void onOver(object e) { }
        public void onRender() { }
        public void onSelectedChange(object state) { }
        public void onTextChange(object node, object text, object oldText) { }
        public void onTipChange(object node, object tip, object title) { }
        public void remove() { }
        public void removeChild(object node) { }
        /// <summary>
        /// Removes one or more CSS classes from the node's UI element.
        /// @param {String/Array} className The CSS class to remove, or an array of classes
        /// </summary>
        public void removeClass(object cls) { }
        public void render(object bulkRender) { }
        public void renderElements(object n, object a, object targetNode, object bulkRender) { }
        public void renderIndent() { }
        /// <summary>
        /// Shows this node.
        /// </summary>
        public void show() { }
        public void startDrop() { }
        /// <summary>
        /// Sets the checked status of the tree node to the passed value, or, if no value was passed,
        /// toggles the checked status. If the node was rendered with no checkbox, this has no effect.
        /// @param {Boolean} value (optional) The new checked status.
        /// </summary>
        public void toggleCheck(bool value) { }
        public void updateExpandIcon() { }
    }
    #endregion
    #region TreePanel
    /// <summary>
    /// @class Ext.tree.TreePanel
    /// @extends Ext.Panel
    /// <p>The TreePanel provides tree-structured UI representation of tree-structured data.</p>
    /// <p>{@link Ext.tree.TreeNode TreeNode}s added to the TreePanel may each contain metadata
    /// used by your application in their {@link Ext.tree.TreeNode#attributes attributes} property.</p>
    /// <p><b>A TreePanel must have a {@link #root} node before it is rendered.</b> This may either be
    /// specified using the {@link #root} config option, or using the {@link #setRootNode} method.
    /// <p>An example of tree rendered to an existing div:</p><pre><code>
    /// var tree = new Ext.tree.TreePanel({
    /// renderTo: 'tree-div',
    /// useArrows: true,
    /// autoScroll: true,
    /// animate: true,
    /// enableDD: true,
    /// containerScroll: true,
    /// border: false,
    /// // auto create TreeLoader
    /// dataUrl: 'get-nodes.php',
    /// root: {
    /// nodeType: 'async',
    /// text: 'Ext JS',
    /// draggable: false,
    /// id: 'source'
    /// }
    /// });
    /// tree.getRootNode().expand();
    /// </code></pre>
    /// <p>The example above would work with a data packet similar to this:</p><pre><code>
    /// [{
    /// "text": "adapter",
    /// "id": "source\/adapter",
    /// "cls": "folder"
    /// }, {
    /// "text": "dd",
    /// "id": "source\/dd",
    /// "cls": "folder"
    /// }, {
    /// "text": "debug.js",
    /// "id": "source\/debug.js",
    /// "leaf": true,
    /// "cls": "file"
    /// }]
    /// </code></pre>
    /// <p>An example of tree within a Viewport:</p><pre><code>
    /// new Ext.Viewport({
    /// layout: 'border',
    /// items: [{
    /// region: 'west',
    /// collapsible: true,
    /// title: 'Navigation',
    /// xtype: 'treepanel',
    /// width: 200,
    /// autoScroll: true,
    /// split: true,
    /// loader: new Ext.tree.TreeLoader(),
    /// root: new Ext.tree.AsyncTreeNode({
    /// expanded: true,
    /// children: [{
    /// text: 'Menu Option 1',
    /// leaf: true
    /// }, {
    /// text: 'Menu Option 2',
    /// leaf: true
    /// }, {
    /// text: 'Menu Option 3',
    /// leaf: true
    /// }]
    /// }),
    /// rootVisible: false,
    /// listeners: {
    /// click: function(n) {
    /// Ext.Msg.alert('Navigation Tree Click', 'You clicked: "' + n.attributes.text + '"');
    /// }
    /// }
    /// }, {
    /// region: 'center',
    /// xtype: 'tabpanel',
    /// // remaining code not shown ...
    /// }]
    /// });
    /// </code></pre>
    /// *
    /// @cfg {Ext.tree.TreeNode} root The root node for the tree.
    /// @cfg {Boolean} rootVisible <tt>false</tt> to hide the root node (defaults to <tt>true</tt>)
    /// @cfg {Boolean} lines <tt>false</tt> to disable tree lines (defaults to <tt>true</tt>)
    /// @cfg {Boolean} enableDD <tt>true</tt> to enable drag and drop
    /// @cfg {Boolean} enableDrag <tt>true</tt> to enable just drag
    /// @cfg {Boolean} enableDrop <tt>true</tt> to enable just drop
    /// @cfg {Object} dragConfig Custom config to pass to the {@link Ext.tree.TreeDragZone} instance
    /// @cfg {Object} dropConfig Custom config to pass to the {@link Ext.tree.TreeDropZone} instance
    /// @cfg {String} ddGroup The DD group this TreePanel belongs to
    /// @cfg {Boolean} ddAppendOnly <tt>true</tt> if the tree should only allow append drops (use for trees which are sorted)
    /// @cfg {Boolean} ddScroll <tt>true</tt> to enable body scrolling
    /// @cfg {Boolean} containerScroll <tt>true</tt> to register this container with ScrollManager
    /// @cfg {Boolean} hlDrop <tt>false</tt> to disable node highlight on drop (defaults to the value of {@link Ext#enableFx})
    /// @cfg {String} hlColor The color of the node highlight (defaults to <tt>'C3DAF9'</tt>)
    /// @cfg {Boolean} animate <tt>true</tt> to enable animated expand/collapse (defaults to the value of {@link Ext#enableFx})
    /// @cfg {Boolean} singleExpand <tt>true</tt> if only 1 node per branch may be expanded
    /// @cfg {Object} selModel A tree selection model to use with this TreePanel (defaults to an {@link Ext.tree.DefaultSelectionModel})
    /// @cfg {Boolean} trackMouseOver <tt>false</tt> to disable mouse over highlighting
    /// @cfg {Ext.tree.TreeLoader} loader A {@link Ext.tree.TreeLoader} for use with this TreePanel
    /// @cfg {String} pathSeparator The token used to separate sub-paths in path strings (defaults to <tt>'/'</tt>)
    /// @cfg {Boolean} useArrows <tt>true</tt> to use Vista-style arrows in the tree (defaults to <tt>false</tt>)
    /// @cfg {String} requestMethod The HTTP request method for loading data (defaults to the value of {@link Ext.Ajax#method}).
    /// *
    /// @constructor
    /// @param {Object} config
    /// @xtype treepanel
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreePanel : Ext.Panel
    {
        [JsType(JsMode.Prototype, Export = false)]
        public partial class nodeTypes
        {
        }
        public TreePanel(TreePanelConfig config) { }
        public new void afterRender() { }
        public new void beforeDestroy() { }
        public void clearInnerCt() { }
        /// <summary>
        /// Collapse all nodes
        /// </summary>
        public void collapseAll() { }
        /// <summary>
        /// Destroy the root node. Not included by itself because we need to pass the silent parameter.
        /// @private
        /// </summary>
        public void destroyRoot() { }
        /// <summary>
        /// Expand all nodes
        /// </summary>
        public void expandAll() { }
        /// <summary>
        /// Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
        /// @param {String} path
        /// @param {String} attr (optional) The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)
        /// @param {Function} callback (optional) The callback to call when the expand is complete. The callback will be called with
        /// (bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.
        /// </summary>
        public void expandPath(object path, JsString attr, JsAction callback) { }
        /// <summary>
        /// Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. 'id')
        /// @param {String} attribute (optional) Defaults to null (return the actual nodes)
        /// @param {TreeNode} startNode (optional) The node to start from, defaults to the root
        /// @return {Array}
        /// </summary>
        public void getChecked(object a, object startNode) { }
        /// <summary>
        /// Returns the default {@link Ext.tree.TreeLoader} for this TreePanel.
        /// @return {Ext.tree.TreeLoader} The TreeLoader for this TreePanel.
        /// </summary>
        public TreeLoader getLoader() { return null; }
        /// <summary>
        /// Gets a node in this tree by its id
        /// @param {String} id
        /// @return {Node}
        /// </summary>
        public void getNodeById(object id) { }
        /// <summary>
        /// Returns this root node for this tree
        /// @return {Node}
        /// </summary>
        public void getRootNode() { }
        /// <summary>
        /// Returns the selection model used by this TreePanel.
        /// @return {TreeSelectionModel} The selection model used by this TreePanel
        /// </summary>
        public void getSelectionModel() { }
        /// <summary>
        /// Returns the underlying Element for this tree
        /// @return {Ext.Element} The Element
        /// </summary>
        public Element getTreeEl() { return null; }
        public new void initComponent() { }
        public new void initEvents() { }
        public new void onRender(object ct, object position) { }
        public void proxyNodeEvent(object ename, object a1, object a2, object a3, object a4, object a5, object a6) { }
        public void registerNode(object node) { }
        public void renderRoot() { }
        public void restrictExpand(object node) { }
        /// <summary>
        /// Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
        /// @param {String} path
        /// @param {String} attr (optional) The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)
        /// @param {Function} callback (optional) The callback to call when the selection is complete. The callback will be called with
        /// (bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.
        /// </summary>
        public void selectPath(object path, JsString attr, JsAction callback) { }
        /// <summary>
        /// Sets the root node for this tree. If the TreePanel has already rendered a root node, the
        /// previous root node (and all of its descendants) are destroyed before the new root node is rendered.
        /// @param {Node} node
        /// @return {Node}
        /// </summary>
        public void setRootNode(object node) { }
        public void toString() { }
        public void unregisterNode(object node) { }
        public bool enableDD { get; set; }
        public bool lines { get; set; }
        public JsString pathSeparator { get; set; }
        public bool rootVisible { get; set; }
    }
    #endregion
    #region TreePanelConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class TreePanelConfig
    {
        /// <summary>
        /// <tt>true</tt> to enable animated expand/collapse (defaults to the value of {@link Ext#enableFx})
        /// </summary>
        public bool animate { get; set; }
        /// <summary>
        /// <tt>true</tt> to register this container with ScrollManager
        /// </summary>
        public bool containerScroll { get; set; }
        /// <summary>
        /// <tt>true</tt> if the tree should only allow append drops (use for trees which are sorted)
        /// </summary>
        public bool ddAppendOnly { get; set; }
        /// <summary>
        /// The DD group this TreePanel belongs to
        /// </summary>
        public JsString ddGroup { get; set; }
        /// <summary>
        /// <tt>true</tt> to enable body scrolling
        /// </summary>
        public bool ddScroll { get; set; }
        /// <summary>
        /// Custom config to pass to the {@link Ext.tree.TreeDragZone} instance
        /// </summary>
        public JsObject dragConfig { get; set; }
        /// <summary>
        /// Custom config to pass to the {@link Ext.tree.TreeDropZone} instance
        /// </summary>
        public JsObject dropConfig { get; set; }
        /// <summary>
        /// <tt>true</tt> to enable drag and drop
        /// </summary>
        public bool enableDD { get; set; }
        /// <summary>
        /// <tt>true</tt> to enable just drag
        /// </summary>
        public bool enableDrag { get; set; }
        /// <summary>
        /// <tt>true</tt> to enable just drop
        /// </summary>
        public bool enableDrop { get; set; }
        /// <summary>
        /// The color of the node highlight (defaults to <tt>'C3DAF9'</tt>)
        /// </summary>
        public JsString hlColor { get; set; }
        /// <summary>
        /// <tt>false</tt> to disable node highlight on drop (defaults to the value of {@link Ext#enableFx})
        /// </summary>
        public bool hlDrop { get; set; }
        /// <summary>
        /// <tt>false</tt> to disable tree lines (defaults to <tt>true</tt>)
        /// </summary>
        public bool lines { get; set; }
        /// <summary>
        /// A {@link Ext.tree.TreeLoader} for use with this TreePanel
        /// </summary>
        public TreeLoader loader { get; set; }
        /// <summary>
        /// The token used to separate sub-paths in path strings (defaults to <tt>'/'</tt>)
        /// </summary>
        public JsString pathSeparator { get; set; }
        /// <summary>
        /// The HTTP request method for loading data (defaults to the value of {@link Ext.Ajax#method}).
        /// </summary>
        public JsString requestMethod { get; set; }
        /// <summary>
        /// The root node for the tree.
        /// </summary>
        public TreeNode root { get; set; }
        /// <summary>
        /// <tt>false</tt> to hide the root node (defaults to <tt>true</tt>)
        /// </summary>
        public bool rootVisible { get; set; }
        /// <summary>
        /// A tree selection model to use with this TreePanel (defaults to an {@link Ext.tree.DefaultSelectionModel})
        /// </summary>
        public JsObject selModel { get; set; }
        /// <summary>
        /// <tt>true</tt> if only 1 node per branch may be expanded
        /// </summary>
        public bool singleExpand { get; set; }
        /// <summary>
        /// <tt>false</tt> to disable mouse over highlighting
        /// </summary>
        public bool trackMouseOver { get; set; }
        /// <summary>
        /// <tt>true</tt> to use Vista-style arrows in the tree (defaults to <tt>false</tt>)
        /// </summary>
        public bool useArrows { get; set; }
    }
    #endregion
    #region TreeSorter
    /// <summary>
    /// @class Ext.tree.TreeSorter
    /// Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the
    /// associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
    /// Example usage:<br />
    /// <pre><code>
    /// new Ext.tree.TreeSorter(myTree, {
    /// folderSort: true,
    /// dir: "desc",
    /// sortType: function(node) {
    /// // sort by a custom, typed attribute:
    /// return parseInt(node.id, 10);
    /// }
    /// });
    /// </code></pre>
    /// @constructor
    /// @param {TreePanel} tree
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TreeSorter : JsObject
    {
        public TreeSorter() { }
        public TreeSorter(object tree, object config) { }
        public void doSort(object node) { }
        public void updateSort(object tree, object node) { }
        public void updateSortParent(object node) { }
    }
    #endregion
}
#endregion
#region Ext.util
namespace Ext.util
{
    #region ClickRepeater
    /// <summary>
    /// @class Ext.util.ClickRepeater
    /// @extends Ext.util.Observable
    /// A wrapper class which can be applied to any element. Fires a "click" event while the
    /// mouse is pressed. The interval between firings may be specified in the config but
    /// defaults to 20 milliseconds.
    /// Optionally, a CSS class may be applied to the element during the time it is pressed.
    /// @cfg {Mixed} el The element to act as a button.
    /// @cfg {Number} delay The initial delay before the repeating event begins firing.
    /// Similar to an autorepeat key delay.
    /// @cfg {Number} interval The interval between firings of the "click" event. Default 20 ms.
    /// @cfg {String} pressClass A CSS class name to be applied to the element while pressed.
    /// @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.
    /// "interval" and "delay" are ignored.
    /// @cfg {Boolean} preventDefault True to prevent the default click event
    /// @cfg {Boolean} stopDefault True to stop the default click event
    /// @history
    /// 2007-02-02 jvs Original code contributed by Nige "Animal" White
    /// 2007-02-02 jvs Renamed to ClickRepeater
    /// 2007-02-03 jvs Modifications for FF Mac and Safari
    /// @constructor
    /// @param {Mixed} el The element to listen on
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ClickRepeater : Ext.util.Observable
    {
        public ClickRepeater() { }
        public void click(object e) { }
        public ClickRepeater(object el, object config) { }
        public void destroy() { }
        /// <summary>
        /// Disables the repeater and stops events from firing.
        /// </summary>
        public void disable(object force) { }
        public void easeOutExpo(object t, object b, object c, object d) { }
        /// <summary>
        /// Enables the repeater and allows events to fire.
        /// </summary>
        public void enable() { }
        public void eventOptions(object e) { }
        public void handleDblClick(object e) { }
        public void handleMouseDown(object e) { }
        public void handleMouseOut() { }
        public void handleMouseReturn() { }
        public void handleMouseUp(object e) { }
        /// <summary>
        /// Convenience function for setting disabled/enabled by boolean.
        /// @param {Boolean} disabled
        /// </summary>
        public void setDisabled(object disabled) { }
        public object delay { get; set; }
        public object interval { get; set; }
        public bool preventDefault { get; set; }
        public bool stopDefault { get; set; }
        public object timer { get; set; }
    }
    #endregion
    #region Cookies
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Cookies
    {
        /// <summary>
        /// Removes a cookie with the provided name from the browser
        /// if found by setting its expiration date to sometime in the past.
        /// @param {String} name The name of the cookie to remove
        /// </summary>
        public static void clear(JsString name) { }
        /// <summary>
        /// Retrieves cookies that are accessible by the current page. If a cookie
        /// does not exist, <code>get()</code> returns <tt>null</tt>.  The following
        /// example retrieves the cookie called "valid" and stores the String value
        /// in the variable <tt>validStatus</tt>.
        /// <pre><code>
        /// var validStatus = Ext.util.Cookies.get("valid");
        /// </code></pre>
        /// @param {String} name The name of the cookie to get
        /// @return {Mixed} Returns the cookie value for the specified name;
        /// null if the cookie name does not exist.
        /// </summary>
        public static void get(JsString name) { }
        /// <summary>
        /// @private
        /// </summary>
        public static void getCookieVal(object offset) { }
        /// <summary>
        /// Create a cookie with the specified name and value. Additional settings
        /// for the cookie may be optionally specified (for example: expiration,
        /// access restriction, SSL).
        /// @param {String} name The name of the cookie to set.
        /// @param {Mixed} value The value to set for the cookie.
        /// @param {Object} expires (Optional) Specify an expiration date the
        /// cookie is to persist until.  Note that the specified Date object will
        /// be converted to Greenwich Mean Time (GMT).
        /// @param {String} path (Optional) Setting a path on the cookie restricts
        /// access to pages that match that path. Defaults to all pages (<tt>'/'</tt>).
        /// @param {String} domain (Optional) Setting a domain restricts access to
        /// pages on a given domain (typically used to allow cookie access across
        /// subdomains). For example, "extjs.com" will create a cookie that can be
        /// accessed from any subdomain of extjs.com, including www.extjs.com,
        /// support.extjs.com, etc.
        /// @param {Boolean} secure (Optional) Specify true to indicate that the cookie
        /// should only be accessible via SSL on a page using the HTTPS protocol.
        /// Defaults to <tt>false</tt>. Note that this will only work if the page
        /// calling this code uses the HTTPS protocol, otherwise the cookie will be
        /// created with default options.
        /// </summary>
        public static void set(JsString name, object value) { }
    }
    #endregion
    #region DelayedTask
    /// <summary>
    /// @class Ext.util.DelayedTask
    /// <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
    /// performing setTimeout where a new timeout cancels the old timeout. When called, the
    /// task will wait the specified time period before executing. If durng that time period,
    /// the task is called again, the original call will be cancelled. This continues so that
    /// the function is only called a single time for each iteration.</p>
    /// <p>This method is especially useful for things like detecting whether a user has finished
    /// typing in a text field. An example would be performing validation on a keypress. You can
    /// use this class to buffer the keypress events for a certain number of milliseconds, and
    /// perform only if they stop for that amount of time.  Usage:</p><pre><code>
    /// var task = new Ext.util.DelayedTask(function(){
    /// alert(Ext.getDom('myInputField').value.length);
    /// });
    /// // Wait 500ms before calling our function. If the user presses another key
    /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
    /// Ext.get('myInputField').on('keypress', function(){
    /// task.{@link #delay}(500);
    /// });
    /// </code></pre>
    /// <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
    /// option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
    /// also setup a delayed task for you to buffer events.</p>
    /// @constructor The parameters to this constructor serve as defaults and are not required.
    /// @param {Function} fn (optional) The default function to call.
    /// @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
    /// function is called. If not specified, <code>this</code> will refer to the browser window.
    /// @param {Array} args (optional) The default Array of arguments.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class DelayedTask
    {
        public DelayedTask() { }
        /// <summary>
        /// @class Ext.util.DelayedTask
        /// <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
        /// performing setTimeout where a new timeout cancels the old timeout. When called, the
        /// task will wait the specified time period before executing. If durng that time period,
        /// the task is called again, the original call will be cancelled. This continues so that
        /// the function is only called a single time for each iteration.</p>
        /// <p>This method is especially useful for things like detecting whether a user has finished
        /// typing in a text field. An example would be performing validation on a keypress. You can
        /// use this class to buffer the keypress events for a certain number of milliseconds, and
        /// perform only if they stop for that amount of time.  Usage:</p><pre><code>
        /// var task = new Ext.util.DelayedTask(function(){
        /// alert(Ext.getDom('myInputField').value.length);
        /// });
        /// // Wait 500ms before calling our function. If the user presses another key
        /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
        /// Ext.get('myInputField').on('keypress', function(){
        /// task.{@link #delay}(500);
        /// });
        /// </code></pre>
        /// <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
        /// option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
        /// also setup a delayed task for you to buffer events.</p>
        /// @constructor The parameters to this constructor serve as defaults and are not required.
        /// @param {Function} fn (optional) The default function to call.
        /// @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
        /// function is called. If not specified, <code>this</code> will refer to the browser window.
        /// @param {Array} args (optional) The default Array of arguments.
        /// </summary>
        public DelayedTask(JsAction fn, JsObject scope, JsArray args) { }
    }
    #endregion
    #region Functions
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Functions
    {
        /// <summary>
        /// Creates a delegate (callback) that sets the scope to obj.
        /// Call directly on any function. Example: <code>Ext.createDelegate(this.myFunction, this, [arg1, arg2])</code>
        /// Will create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the
        /// callback points to obj. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// // Note this use of "this.text" here.  This function expects to
        /// // execute within a scope that contains a text property.  In this
        /// // example, the "this" variable is pointing to the btn object that
        /// // was passed in createDelegate below.
        /// alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
        /// }
        /// var btn = new Ext.Button({
        /// text: 'Say Hi',
        /// renderTo: Ext.getBody()
        /// });
        /// // This callback will execute in the scope of the
        /// // button instance. Clicking the button alerts
        /// // "Hi, Fred. You clicked the "Say Hi" button."
        /// btn.on('click', Ext.createDelegate(sayHi, btn, ['Fred']));
        /// </code></pre>
        /// @param {Function} fn The function to delegate.
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
        /// <b>If omitted, defaults to the browser window.</b>
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createDelegate(JsAction fn, object obj, JsArray args, object appendArgs) { return null; }
        /// <summary>
        /// Creates an interceptor function. The passed function is called before the original one. If it returns false,
        /// the original one is not called. The resulting function returns the results of the original function.
        /// The passed function is called with the parameters of the original function. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// // create a new function that validates input without
        /// // directly modifying the original function:
        /// var sayHiToFriend = Ext.createInterceptor(sayHi, function(name){
        /// return name == 'Brian';
        /// });
        /// sayHiToFriend('Fred');  // no alert
        /// sayHiToFriend('Brian'); // alerts "Hi, Brian"
        /// </code></pre>
        /// @param {Function} origFn The original function.
        /// @param {Function} newFn The function to call before the original
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the passed function is executed.
        /// <b>If omitted, defaults to the scope in which the original function is called or the browser window.</b>
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createInterceptor(JsAction origFn, JsAction newFn, JsObject scope) { return null; }
        /// <summary>
        /// Create a combined function call sequence of the original function + the passed function.
        /// The resulting function returns the results of the original function.
        /// The passed fcn is called with the parameters of the original function. Example usage:
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// var sayGoodbye = Ext.createSequence(sayHi, function(name){
        /// alert('Bye, ' + name);
        /// });
        /// sayGoodbye('Fred'); // both alerts show
        /// @param {Function} origFn The original function.
        /// @param {Function} newFn The function to sequence
        /// @param {Object} scope (optional) The scope (this reference) in which the passed function is executed.
        /// If omitted, defaults to the scope in which the original function is called or the browser window.
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createSequence(JsAction origFn, JsAction newFn, JsObject scope) { return null; }
        /// <summary>
        /// Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// // executes immediately:
        /// sayHi('Fred');
        /// // executes after 2 seconds:
        /// Ext.defer(sayHi, 2000, this, ['Fred']);
        /// // this syntax is sometimes useful for deferring
        /// // execution of an anonymous function:
        /// Ext.defer(function(){
        /// alert('Anonymous');
        /// }, 100);
        /// </code></pre>
        /// @param {Function} fn The function to defer.
        /// @param {Number} millis The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
        /// <b>If omitted, defaults to the browser window.</b>
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Number} The timeout id that can be used with clearTimeout
        /// </summary>
        public static JsNumber defer(JsAction fn, JsNumber millis, object obj, JsArray args, object appendArgs) { return null; }
    }
    #endregion
    #region MixedCollection
    /// <summary>
    /// @class Ext.util.MixedCollection
    /// @extends Ext.util.Observable
    /// A Collection class that maintains both numeric indexes and keys and exposes events.
    /// @constructor
    /// @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
    /// function should add function references to the collection. Defaults to
    /// <tt>false</tt>.
    /// @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
    /// and return the key value for that item.  This is used when available to look up the key on items that
    /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
    /// equivalent to providing an implementation for the {@link #getKey} method.
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class MixedCollection
    {
        public MixedCollection() { }
        /// <summary>
        /// @class Ext.util.MixedCollection
        /// @extends Ext.util.Observable
        /// A Collection class that maintains both numeric indexes and keys and exposes events.
        /// @constructor
        /// @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.
        /// @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
        /// and return the key value for that item.  This is used when available to look up the key on items that
        /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
        /// equivalent to providing an implementation for the {@link #getKey} method.
        /// </summary>
        public MixedCollection(bool allowFunctions, JsAction keyFn) { }
    }
    #endregion
    #region Observable
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Observable
    {
        /// <summary>
        /// Starts capture on the specified Observable. All events will be passed
        /// to the supplied function with the event name + standard signature of the event
        /// <b>before</b> the event is fired. If the supplied function returns false,
        /// the event will not fire.
        /// @param {Observable} o The Observable to capture events from.
        /// @param {Function} fn The function to call when an event is fired.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Observable firing the event.
        /// @static
        /// </summary>
        public static void capture(object o, JsAction fn, JsObject scope) { }
        /// <summary>
        /// Sets observability on the passed class constructor.<p>
        /// <p>This makes any event fired on any instance of the passed class also fire a single event through
        /// the <i>class</i> allowing for central handling of events on many instances at once.</p>
        /// <p>Usage:</p><pre><code>
        /// Ext.util.Observable.observeClass(Ext.data.Connection);
        /// Ext.data.Connection.on('beforerequest', function(con, options) {
        /// console.log('Ajax request made to ' + options.url);
        /// });</code></pre>
        /// @param {Function} c The class constructor to make observable.
        /// @param {Object} listeners An object containing a series of listeners to add. See {@link #addListener}.
        /// @static
        /// </summary>
        public static void observeClass(JsAction c, JsObject listeners) { }
    }
    #endregion
    #region TextMetrics
    [JsType(JsMode.Prototype, Export = false)]
    public partial class TextMetrics
    {
        public static void Instance(object bindTo, object fixedWidth) { }
    }
    #endregion
}
#endregion
#region Ext.Util
namespace Ext.Util
{
    #region Event
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Event
    {
        public Event() { }
        public void addListener(object fn, object scope, object options) { }
        public void clearListeners() { }
        public void createListener(object fn, object scope, object o) { }
        public Event(object obj, object name) { }
        public void findListener(object fn, object scope) { }
        public void fire() { }
        public void isListening(object fn, object scope) { }
        public void removeListener(object fn, object scope) { }
    }
    #endregion
    #region Observable
    /// <summary>
    /// @class Ext.util.Observable
    /// Base class that provides a common interface for publishing events. Subclasses are expected to
    /// to have a property "events" with all the events defined, and, optionally, a property "listeners"
    /// with configured listeners defined.<br>
    /// For example:
    /// <pre><code>
    /// Employee = Ext.extend(Ext.util.Observable, {
    /// constructor: function(config){
    /// this.name = config.name;
    /// this.addEvents({
    /// "fired" : true,
    /// "quit" : true
    /// });
    /// // Copy configured listeners into *this* object so that the base class&#39;s
    /// // constructor will add them.
    /// this.listeners = config.listeners;
    /// // Call our superclass constructor to complete construction process.
    /// Employee.superclass.constructor.call(this, config)
    /// }
    /// });
    /// </code></pre>
    /// This could then be used like this:<pre><code>
    /// var newEmployee = new Employee({
    /// name: employeeName,
    /// listeners: {
    /// quit: function() {
    /// // By default, "this" will be the object that fired the event.
    /// alert(this.name + " has quit!");
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export = false)]
    public partial class Observable
    {
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire.
        /// @param {Object|String} o Either an object with event names as properties with a value of <code>true</code>
        /// or the first event name string if multiple event names are being passed as separate parameters.
        /// @param {string} Optional. Event name if multiple event names are being passed as separate parameters.
        /// Usage:<pre><code>
        /// this.addEvents('storeloaded', 'storecleared');
        /// </code></pre>
        /// </summary>
        public void addEvents(object o) { }
        /// <summary>
        /// Appends an event handler to this object.
        /// @param {String}   eventName The name of the event to listen for.
        /// @param {Function} handler The method the event invokes.
        /// @param {Object}   scope (optional) The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b>
        /// @param {Object}   options (optional) An object containing handler configuration.
        /// properties. This may contain any of the following properties:<ul>
        /// <li><b>scope</b> : Object<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b></div></li>
        /// <li><b>delay</b> : Number<div class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>
        /// <li><b>single</b> : Boolean<div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
        /// <li><b>buffer</b> : Number<div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
        /// by the specified number of milliseconds. If the event fires again within that time, the original
        /// handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
        /// <li><b>target</b> : Observable<div class="sub-desc">Only call the handler if the event was fired on the target Observable, <i>not</i>
        /// if the event was bubbled up from a child Observable.</div></li>
        /// </ul><br>
        /// <p>
        /// <b>Combining Options</b><br>
        /// Using the options argument, it is possible to combine different types of listeners:<br>
        /// <br>
        /// A delayed, one-time listener.
        /// <pre><code>
        /// myDataView.on('click', this.onClick, this, {
        /// single: true,
        /// delay: 100
        /// });</code></pre>
        /// <p>
        /// <b>Attaching multiple handlers in 1 call</b><br>
        /// The method also allows for a single argument to be passed which is a config object containing properties
        /// which specify multiple handlers.
        /// <p>
        /// <pre><code>
        /// myGridPanel.on({
        /// 'click' : {
        /// fn: this.onClick,
        /// scope: this,
        /// delay: 100
        /// },
        /// 'mouseover' : {
        /// fn: this.onMouseOver,
        /// scope: this
        /// },
        /// 'mouseout' : {
        /// fn: this.onMouseOut,
        /// scope: this
        /// }
        /// });</code></pre>
        /// <p>
        /// Or a shorthand syntax:<br>
        /// <pre><code>
        /// myGridPanel.on({
        /// 'click' : this.onClick,
        /// 'mouseover' : this.onMouseOver,
        /// 'mouseout' : this.onMouseOut,
        /// scope: this
        /// });</code></pre>
        /// </summary>
        public void addListener(object eventName, object fn, object scope, object o) { }
        /// <summary>
        /// <p>Fires the specified event with the passed parameters (minus the event name).</p>
        /// <p>An event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#getBubbleTarget})
        /// by calling {@link #enableBubble}.</p>
        /// @param {String} eventName The name of the event to fire.
        /// @param {Object...} args Variable number of parameters are passed to handlers.
        /// @return {Boolean} returns false if any of the handlers return false otherwise it returns true.
        /// </summary>
        public bool fireEvent() { return false; }
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event
        /// @param {String} eventName The name of the event to check for
        /// @return {Boolean} True if the event is being listened for, else false
        /// </summary>
        public bool hasListener(JsString eventName) { return false; }
        /// <summary>
        /// @class Ext.util.Observable
        /// Base class that provides a common interface for publishing events. Subclasses are expected to
        /// to have a property "events" with all the events defined, and, optionally, a property "listeners"
        /// with configured listeners defined.<br>
        /// For example:
        /// <pre><code>
        /// Employee = Ext.extend(Ext.util.Observable, {
        /// constructor: function(config){
        /// this.name = config.name;
        /// this.addEvents({
        /// "fired" : true,
        /// "quit" : true
        /// });
        /// // Copy configured listeners into *this* object so that the base class&#39;s
        /// // constructor will add them.
        /// this.listeners = config.listeners;
        /// // Call our superclass constructor to complete construction process.
        /// Employee.superclass.constructor.call(this, config)
        /// }
        /// });
        /// </code></pre>
        /// This could then be used like this:<pre><code>
        /// var newEmployee = new Employee({
        /// name: employeeName,
        /// listeners: {
        /// quit: function() {
        /// // By default, "this" will be the object that fired the event.
        /// alert(this.name + " has quit!");
        /// }
        /// }
        /// });
        /// </code></pre>
        /// </summary>
        public Observable() { }
        /// <summary>
        /// Removes all listeners for this object
        /// </summary>
        public void purgeListeners() { }
        /// <summary>
        /// Removes <b>all</b> added captures from the Observable.
        /// @param {Observable} o The Observable to release
        /// @static
        /// </summary>
        public static void releaseCapture(object o) { }
        /// <summary>
        /// Removes an event handler.
        /// @param {String}   eventName The type of event the handler was associated with.
        /// @param {Function} handler   The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
        /// @param {Object}   scope     (optional) The scope originally specified for the handler.
        /// </summary>
        public void removeListener(object eventName, object fn, object scope) { }
        /// <summary>
        /// Resume firing events. (see {@link #suspendEvents})
        /// If events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all
        /// events fired during event suspension will be sent to any listeners now.
        /// </summary>
        public void resumeEvents() { }
        /// <summary>
        /// Suspend the firing of all events. (see {@link #resumeEvents})
        /// @param {Boolean} queueSuspended Pass as true to queue up suspended events to be fired
        /// after the {@link #resumeEvents} call instead of discarding all suspended events;
        /// </summary>
        public void suspendEvents(bool queueSuspended) { }
        public JsRegExp filterOptRe { get; set; }
    }
    #endregion
}
#endregion
