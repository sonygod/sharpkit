//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace YUI_
{
    /// <summary>
    /// Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events.
    /// var editor = new Y.EditorBase({
    /// content: 'Foo'
    /// });
    /// editor.render('#demo');
    /// </summary>
    public partial class EditorBase : YUI_.Base
    {
        /// <summary>
        /// Copy certain styles from one node instance to another (used for new paragraph creation mainly)
        /// </summary>
        public void copyStyles(Node from, Node to){}
        /// <summary>
        /// Pass through to the frame.execCommand method
        /// </summary>
        public object execCommand(object cmd, object val){return null;}
        /// <summary>
        /// Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00
        /// </summary>
        public object FILTER_RGB(object String){return null;}
        /// <summary>
        /// Focus the contentWindow of the iframe
        /// </summary>
        public EditorBase focus(JsAction fn){return null;}
        /// <summary>
        /// (Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering
        /// </summary>
        public object getContent(){return null;}
        /// <summary>
        /// Walk the dom tree from this node up to body, returning a reversed array of parents.
        /// </summary>
        public void getDomPath(Node node){}
        /// <summary>
        /// Get the YUI instance of the frame
        /// </summary>
        public YUI getInstance(){return null;}
        /// <summary>
        /// Handles the hiding of the Editor instance. Currently only handles the iframe
        /// </summary>
        public EditorBase hide(){return null;}
        /// <summary>
        /// Pulls the fontSize from a node, then checks for string values (x-large, x-small)
        /// and converts them to pixel sizes. If the parsed size is different from the original, it calls
        /// node.setStyle to update the node with a pixel size for normalization.
        /// </summary>
        public void NORMALIZE_FONTSIZE(){}
        /// <summary>
        /// Renders the Y.Frame to the passed node.
        /// </summary>
        public EditorBase render(object node){return null;}
        /// <summary>
        /// Handles the showing of the Editor instance. Currently only handles the iframe
        /// </summary>
        public EditorBase show(){return null;}
        /// <summary>
        /// Hash table of keys to fire a nodeChange event for.
        /// </summary>
        public object NC_KEYS{get;set;}
        /// <summary>
        /// The default modules to use inside the Frame
        /// </summary>
        public YUI_.Array USE{get;set;}
    }
}
