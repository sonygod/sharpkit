/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$Collections$Generic$Dictionary$2=
{
    fullname:"System.Collections.Generic.Dictionary$2",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IDictionary$2"],
    Kind:"Class",
    definition:
    {
        ctor:function(TKey,TValue)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
        },
        ctor$$IEqualityComparer$1:function(TKey,TValue,comparer)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
            this.Comparer = comparer;
        },
        GetHashKey:function(key)
        {
            if(this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add:function(key,value)
        {
            var hashKey=this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        },
        Remove:function(key)
        {
            var hashKey=this.GetHashKey(key);
            delete this._table[hashKey];
            delete this._keys[hashKey];
            this._version++;
            return true;
        },
        Item$$:"`1",
        get_Item$$TKey:function(key)
        {
            var hashKey=this.GetHashKey(key);
            return this._table[hashKey];
        },
        set_Item$$TKey:function(key,value)
        {
            var hashKey=this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        },
        ContainsKey:function(key)
        {
            var hashKey=this.GetHashKey(key);
            return typeof(this._table[hashKey]) != "undefined";
        },
        Keys$$:"System.Collections.Generic.ICollection`1[[`0]]",
        get_Keys:function()
        {
            var keys= [];
            for(var p in this._keys)
            {
                keys.push(this._keys[p]);
            }
            return keys;
        },
        Values$$:"System.Collections.Generic.ICollection`1[[`1]]",
        get_Values:function()
        {
            var values= [];
            for(var p in this._table)
            {
                values.push(this._table[p]);
            }
            return values;
        },
        GetEnumerator:function()
        {
            var array= [];
            for(var hashKey in this._table)
            {
                array.push(new System.Collections.Generic.KeyValuePair$2.ctor(this.TKey,this.TValue,this._keys[hashKey],this._table[hashKey]));
            }
            return array.GetEnumerator();
        },
        Clear:function()
        {
            for(var hashKey in this._table)
            {
                this._keys = new Object();
                this._table = new Object();
                this._version++;
                return;
            }
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IsReadOnly$$:"System.Boolean",
        get_IsReadOnly:function()
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        }
    }
};
JsTypes.push(System$Collections$Generic$Dictionary$2);
