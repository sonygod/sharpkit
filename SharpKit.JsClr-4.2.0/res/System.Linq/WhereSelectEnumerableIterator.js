/*Generated by SharpKit 5 v4.29.8000*/
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$Linq$Enumerable$WhereSelectEnumerableIterator=
{
    fullname:"System.Linq.Enumerable.WhereSelectEnumerableIterator",
    baseTypeName:"System.Linq.Enumerable.Iterator",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function(TSource,TResult,source,predicate,selector)
        {
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone:function()
        {
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource,this.TResult,this.source,this.predicate,this.selector);
        },
        Dispose:function()
        {
            if(this.enumerator != null)
            {
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext:function()
        {
            switch(this.state)
            {
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while(this.enumerator.MoveNext())
            {
                var current=this.enumerator.get_Current();
                if(this.predicate == null || this.predicate(current))
                {
                    this.current = this.selector(current);
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1:function(TResult2,selector)
        {
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource,TResult2,this.source,this.predicate,System.Linq.Enumerable.CombineSelectors$3(this.TSource,this.TResult,TResult2,this.selector,selector));
        },
        Where:function(predicate)
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectEnumerableIterator);
