/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var JSSystem$IO$MemoryStream=
{
    fullname:"JSSystem.IO.MemoryStream",
    baseTypeName:"System.IO.Stream",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            JSSystem.IO.MemoryStream.ctor$$Int32.call(this,0);
        },
        ctor$$Int32:function(capacity)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            if(capacity < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("capacity"),new Error());
            this.canWrite = true;
            this.capacity = capacity;
            this.internalBuffer = [];
            this.expandable = true;
            this.allowGetBuffer = true;
        },
        ctor$$Byte$Array:function(buffer)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            this.InternalConstructor(buffer,0,buffer.length,true,false);
        },
        ctor$$Byte$Array$$Boolean:function(buffer,writable)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            this.InternalConstructor(buffer,0,buffer.length,writable,false);
        },
        ctor$$Byte$Array$$Int32$$Int32:function(buffer,index,count)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            this.InternalConstructor(buffer,index,count,true,false);
        },
        ctor$$Byte$Array$$Int32$$Int32$$Boolean:function(buffer,index,count,writable)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            this.InternalConstructor(buffer,index,count,writable,false);
        },
        ctor$$Byte$Array$$Int32$$Int32$$Boolean$$Boolean:function(buffer,index,count,writable,publiclyVisible)
        {
            this.canWrite = false;
            this.allowGetBuffer = false;
            this.capacity = 0;
            this.length = 0;
            this.internalBuffer = null;
            this.initialIndex = 0;
            this.expandable = false;
            this.streamClosed = false;
            this.position = 0;
            this.dirty_bytes = 0;
            System.IO.Stream.ctor.call(this);
            this.InternalConstructor(buffer,index,count,writable,publiclyVisible);
        },
        InternalConstructor:function(buffer,index,count,writable,publicallyVisible)
        {
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            if(index < 0 || count < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index or count is less than 0."),new Error());
            if(buffer.length - index < count)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("index+count","The size of the buffer is less than index + count."),new Error());
            this.canWrite = writable;
            this.internalBuffer = buffer;
            this.capacity = count + index;
            this.length = this.capacity;
            this.position = index;
            this.initialIndex = index;
            this.allowGetBuffer = publicallyVisible;
            this.expandable = false;
        },
        CheckIfClosedThrowDisposed:function()
        {
            if(this.streamClosed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String("MemoryStream"),new Error());
        },
        CanRead$$:"System.Boolean",
        get_CanRead:function()
        {
            return !this.streamClosed;
        },
        CanSeek$$:"System.Boolean",
        get_CanSeek:function()
        {
            return !this.streamClosed;
        },
        CanWrite$$:"System.Boolean",
        get_CanWrite:function()
        {
            return (!this.streamClosed && this.canWrite);
        },
        Capacity$$:"System.Int32",
        get_Capacity:function()
        {
            this.CheckIfClosedThrowDisposed();
            return this.capacity - this.initialIndex;
        },
        set_Capacity:function(value)
        {
            this.CheckIfClosedThrowDisposed();
            if(!this.expandable)
                throw $CreateException(new System.NotSupportedException.ctor$$String("Cannot expand this MemoryStream"),new Error());
            if(value < 0 || value < this.length)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("value","New capacity cannot be negative or less than the current capacity " + value + " " + this.capacity),new Error());
            if(this.internalBuffer != null && value == this.internalBuffer.length)
                return;
            var newBuffer=null;
            if(value != 0)
            {
                newBuffer = [];
                if(this.internalBuffer != null)
                    System.Buffer.BlockCopy(this.internalBuffer,0,newBuffer,0,this.length);
            }
            this.dirty_bytes = 0;
            this.internalBuffer = newBuffer;
            this.capacity = value;
        },
        Length$$:"System.Int64",
        get_Length:function()
        {
            this.CheckIfClosedThrowDisposed();
            return this.length - this.initialIndex;
        },
        Position$$:"System.Int64",
        get_Position:function()
        {
            this.CheckIfClosedThrowDisposed();
            return this.position - this.initialIndex;
        },
        set_Position:function(value)
        {
            this.CheckIfClosedThrowDisposed();
            if(value < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("value","Position cannot be negative"),new Error());
            if(value > 2147483647)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("value","Position must be non-negative and less than 2^31 - 1 - origin"),new Error());
            this.position = this.initialIndex + Cast(value,System.Int32.ctor);
        },
        Dispose$$Boolean:function(disposing)
        {
            this.streamClosed = true;
            this.expandable = false;
        },
        Flush:function()
        {
        },
        GetBuffer:function()
        {
            if(!this.allowGetBuffer)
                throw $CreateException(new System.UnauthorizedAccessException.ctor(),new Error());
            return this.internalBuffer;
        },
        Read:function(buffer,offset,count)
        {
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            if(offset < 0 || count < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("offset or count less than zero."),new Error());
            if(buffer.length - offset < count)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("offset+count","The size of the buffer is less than offset + count."),new Error());
            this.CheckIfClosedThrowDisposed();
            if(this.position >= this.length || count == 0)
                return 0;
            if(this.position > this.length - count)
                count = this.length - this.position;
            System.Buffer.BlockCopy(this.internalBuffer,this.position,buffer,offset,count);
            this.position += count;
            return count;
        },
        ReadByte:function()
        {
            this.CheckIfClosedThrowDisposed();
            if(this.position >= this.length)
                return -1;
            return this.internalBuffer[this.position++];
        },
        CalculateNewCapacity:function(minimum)
        {
            if(minimum < 256)
                minimum = 256;
            if(minimum < this.capacity * 2)
                minimum = this.capacity * 2;
            return minimum;
        },
        Expand:function(newSize)
        {
            if(newSize > this.capacity)
                this.set_Capacity(this.CalculateNewCapacity(newSize));
            else if(this.dirty_bytes > 0)
            {
                System.Array.Clear(this.internalBuffer,this.length,this.dirty_bytes);
                this.dirty_bytes = 0;
            }
        },
        SetLength:function(value)
        {
            if(!this.expandable && value > this.capacity)
                throw $CreateException(new System.NotSupportedException.ctor$$String("Expanding this MemoryStream is not supported"),new Error());
            this.CheckIfClosedThrowDisposed();
            if(!this.canWrite)
            {
                throw $CreateException(new System.NotSupportedException.ctor$$String("Cannot write to this MemoryStream"),new Error());
            }
            if(value < 0 || (value + this.initialIndex) > 2147483647)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor(),new Error());
            var newSize=Cast(value,System.Int32.ctor) + this.initialIndex;
            if(newSize > this.length)
                this.Expand(newSize);
            else if(newSize < this.length)
                this.dirty_bytes += this.length - newSize;
            this.length = newSize;
            if(this.position > this.length)
                this.position = this.length;
        },
        ToArray:function()
        {
            var l=this.length - this.initialIndex;
            var outBuffer=[];
            if(this.internalBuffer != null)
                System.Buffer.BlockCopy(this.internalBuffer,this.initialIndex,outBuffer,0,l);
            return outBuffer;
        },
        Write:function(buffer,offset,count)
        {
            if(!this.canWrite)
                throw $CreateException(new System.NotSupportedException.ctor$$String("Cannot write to this stream."),new Error());
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            if(offset < 0 || count < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor(),new Error());
            if(buffer.length - offset < count)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("offset+count","The size of the buffer is less than offset + count."),new Error());
            this.CheckIfClosedThrowDisposed();
            if(this.position > this.length - count)
                this.Expand(this.position + count);
            System.Buffer.BlockCopy(buffer,offset,this.internalBuffer,this.position,count);
            this.position += count;
            if(this.position >= this.length)
                this.length = this.position;
        },
        WriteByte:function(value)
        {
            this.CheckIfClosedThrowDisposed();
            if(!this.canWrite)
                throw $CreateException(new System.NotSupportedException.ctor$$String("Cannot write to this stream."),new Error());
            if(this.position >= this.length)
            {
                this.Expand(this.position + 1);
                this.length = this.position + 1;
            }
            this.internalBuffer[this.position++] = value;
        },
        WriteTo:function(stream)
        {
            this.CheckIfClosedThrowDisposed();
            if(stream == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("stream"),new Error());
            stream.Write(this.internalBuffer,this.initialIndex,this.length - this.initialIndex);
        }
    }
};
JsTypes.push(JSSystem$IO$MemoryStream);
