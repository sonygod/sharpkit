/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$IO$BinaryReader=
{
    fullname:"System.IO.BinaryReader",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            System.IO.BinaryReader.MaxBufferSize = 128;
        }
    },
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.IDisposable"],
    Kind:"Class",
    definition:
    {
        ctor:function(input)
        {
            this.m_stream = null;
            this.m_buffer = null;
            this.charBuffer = null;
            this.charByteBuffer = null;
            this.m_disposed = false;
            System.Object.ctor.call(this);
            if(input == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("Input or Encoding is a null reference."),new Error());
            if(!input.get_CanRead())
                throw $CreateException(new System.ArgumentException.ctor$$String("The stream doesn\'t support reading."),new Error());
            this.m_stream = input;
            this.m_buffer = [];
        },
        BaseStream$$:"System.IO.Stream",
        get_BaseStream:function()
        {
            return this.m_stream;
        },
        Close:function()
        {
            this.Dispose$$Boolean(true);
            this.m_disposed = true;
        },
        Dispose$$Boolean:function(disposing)
        {
            if(disposing && this.m_stream != null)
                this.m_stream.Close();
            this.m_disposed = true;
            this.m_buffer = null;
            this.m_stream = null;
            this.charBuffer = null;
        },
        Dispose:function()
        {
            this.Dispose$$Boolean(true);
        },
        FillBuffer:function(numBytes)
        {
            if(numBytes > this.m_buffer.length)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("numBytes"),new Error());
            if(this.m_disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
            if(this.m_stream == null)
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            var pos=0;
            while(pos < numBytes)
            {
                var n=this.m_stream.Read(this.m_buffer,pos,numBytes - pos);
                if(n == 0)
                {
                    throw $CreateException(new System.IO.EndOfStreamException.ctor(),new Error());
                }
                pos += n;
            }
        },
        PeekChar:function()
        {
            if(this.m_stream == null)
            {
                if(this.m_disposed)
                    throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            }
            if(!this.m_stream.get_CanSeek())
            {
                return -1;
            }
            var result=[];
            var bcount;
            var ccount=(function()
            {
                bcount = {Value:bcount};
                var $res=this.ReadCharBytes(result,0,1,bcount);
                bcount = bcount.Value;
                return $res;
            }).call(this);
            this.m_stream.set_Position(this.m_stream.get_Position() - bcount);
            if(ccount == 0)
            {
                return -1;
            }
            return result[0];
        },
        Read:function()
        {
            if(this.charBuffer == null)
                this.charBuffer = [];
            var count=this.Read$$Char$Array$$Int32$$Int32(this.charBuffer,0,1);
            if(count == 0)
            {
                return -1;
            }
            return this.charBuffer[0];
        },
        Read$$Byte$Array$$Int32$$Int32:function(buffer,index,count)
        {
            if(this.m_stream == null)
            {
                if(this.m_disposed)
                    throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            }
            if(buffer == null)
            {
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer is null"),new Error());
            }
            if(index < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index is less than 0"),new Error());
            }
            if(count < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("count is less than 0"),new Error());
            }
            if(buffer.length - index < count)
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("buffer is too small"),new Error());
            }
            var bytes_read=this.m_stream.Read(buffer,index,count);
            return (bytes_read);
        },
        Read$$Char$Array$$Int32$$Int32:function(buffer,index,count)
        {
            if(this.m_stream == null)
            {
                if(this.m_disposed)
                    throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            }
            if(buffer == null)
            {
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer is null"),new Error());
            }
            if(index < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index is less than 0"),new Error());
            }
            if(count < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("count is less than 0"),new Error());
            }
            if(buffer.length - index < count)
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("buffer is too small"),new Error());
            }
            var bytes_read;
            return (function()
            {
                bytes_read = {Value:bytes_read};
                var $res=this.ReadCharBytes(buffer,index,count,bytes_read);
                bytes_read = bytes_read.Value;
                return $res;
            }).call(this);
        },
        ReadCharBytes:function(buffer,index,count,bytes_read)
        {
            var chars_read=0;
            bytes_read.Value = 0;
            while(chars_read < count)
            {
                var pos=0;
                while(true)
                {
                    this.CheckBuffer(pos + 1);
                    var read_byte=this.m_stream.ReadByte();
                    if(read_byte == -1)
                        return chars_read;
                    this.m_buffer[pos++] = Cast(read_byte,System.Byte.ctor);
                    bytes_read.Value++;
                    var n=JSHelper.UTF8.decode(this.m_buffer,0,pos,buffer,index + chars_read);
                    if(n > 0)
                        break;
                }
                chars_read++;
            }
            return chars_read;
        },
        Read7BitEncodedInt:function()
        {
            var ret=0;
            var shift=0;
            var len;
            var b;
            for(len = 0;len < 5;++len)
            {
                b = this.ReadByte();
                ret = ret | ((b & 127) << shift);
                shift += 7;
                if((b & 128) == 0)
                    break;
            }
            if(len < 5)
                return ret;
            else
                throw $CreateException(new System.FormatException.ctor$$String("Too many bytes in what should have been a 7 bit encoded Int32."),new Error());
        },
        ReadBoolean:function()
        {
            return this.ReadByte() != 0;
        },
        ReadByte:function()
        {
            if(this.m_stream == null)
            {
                if(this.m_disposed)
                    throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            }
            var val=this.m_stream.ReadByte();
            if(val != -1)
                return Cast(val,System.Byte.ctor);
            throw $CreateException(new System.IO.EndOfStreamException.ctor(),new Error());
        },
        ReadBytes:function(count)
        {
            if(this.m_stream == null)
            {
                if(this.m_disposed)
                    throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryReader","Cannot read from a closed BinaryReader."),new Error());
                throw $CreateException(new System.IO.IOException.ctor$$String("Stream is invalid"),new Error());
            }
            if(count < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("count is less than 0"),new Error());
            }
            var buf=[];
            var pos=0;
            while(pos < count)
            {
                var n=this.m_stream.Read(buf,pos,count - pos);
                if(n == 0)
                {
                    break;
                }
                pos += n;
            }
            if(pos != count)
            {
                var new_buffer=[];
                System.Array.Copy(this.m_buffer,0,new_buffer,0,this.m_buffer.length);
                return (new_buffer);
            }
            return (buf);
        },
        ReadChar:function()
        {
            var ch=this.Read();
            if(ch == -1)
            {
                throw $CreateException(new System.IO.EndOfStreamException.ctor(),new Error());
            }
            return (Cast(ch,System.Char.ctor));
        },
        ReadChars:function(count)
        {
            if(count < 0)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("count is less than 0"),new Error());
            }
            if(count == 0)
                return [];
            var full=[];
            var chars=this.Read$$Char$Array$$Int32$$Int32(full,0,count);
            if(chars == 0)
            {
                throw $CreateException(new System.IO.EndOfStreamException.ctor(),new Error());
            }
            else if(chars != full.length)
            {
                var ret=[];
                System.Array.Copy(full,0,ret,0,chars);
                return ret;
            }
            else
            {
                return full;
            }
        },
        ReadDouble:function()
        {
            this.FillBuffer(8);
            return (Mono.Security.BitConverterLE.ToDouble(this.m_buffer,0));
        },
        ReadInt16:function()
        {
            this.FillBuffer(2);
            return (Cast((this.m_buffer[0] | (this.m_buffer[1] << 8)),System.Int16.ctor));
        },
        ReadInt32:function()
        {
            this.FillBuffer(4);
            return (this.m_buffer[0] | (this.m_buffer[1] << 8) | (this.m_buffer[2] << 16) | (this.m_buffer[3] << 24));
        },
        ReadInt64:function()
        {
            this.FillBuffer(8);
            var ret_low=Cast((this.m_buffer[0] | (this.m_buffer[1] << 8) | (this.m_buffer[2] << 16) | (this.m_buffer[3] << 24)),System.UInt32.ctor);
            var ret_high=Cast((this.m_buffer[4] | (this.m_buffer[5] << 8) | (this.m_buffer[6] << 16) | (this.m_buffer[7] << 24)),System.UInt32.ctor);
            return Cast((((ret_high) << 32) | ret_low),System.Int64.ctor);
        },
        ReadSByte:function()
        {
            return Cast(this.ReadByte(),System.SByte.ctor);
        },
        ReadString:function()
        {
            var len=this.Read7BitEncodedInt();
            if(len < 0)
                throw $CreateException(new System.IO.IOException.ctor$$String("Invalid binary file (string len < 0)"),new Error());
            if(len == 0)
                return System.String.Empty;
            if(this.charByteBuffer == null)
            {
                this.charBuffer = [];
                this.charByteBuffer = [];
            }
            var sb=null;
            do{
                var readLen=System.Math.Min$$Int32$$Int32(System.IO.BinaryReader.MaxBufferSize,len);
                var n=this.m_stream.Read(this.charByteBuffer,0,readLen);
                if(n == 0)
                    throw $CreateException(new System.IO.EndOfStreamException.ctor(),new Error());
                var cch=JSHelper.UTF8.decode(this.charByteBuffer,0,n,this.charBuffer,0);
                if(sb == null && readLen == len)
                    return new System.String.ctor$$Char$Array$$Int32$$Int32(this.charBuffer,0,cch);
                if(sb == null)
                    sb = new System.Text.StringBuilder.ctor$$Int32(len);
                sb.Append$$Char$Array$$Int32$$Int32(this.charBuffer,0,cch);
                len -= readLen;
            }
            while(len > 0)
            return sb.toString();
        },
        ReadSingle:function()
        {
            this.FillBuffer(4);
            return (Mono.Security.BitConverterLE.ToSingle(this.m_buffer,0));
        },
        ReadUInt16:function()
        {
            this.FillBuffer(2);
            return (Cast((this.m_buffer[0] | (this.m_buffer[1] << 8)),System.UInt16.ctor));
        },
        ReadUInt32:function()
        {
            this.FillBuffer(4);
            return (Cast((this.m_buffer[0] | (this.m_buffer[1] << 8) | (this.m_buffer[2] << 16) | (this.m_buffer[3] << 24)),System.UInt32.ctor));
        },
        ReadUInt64:function()
        {
            this.FillBuffer(8);
            var ret_low=Cast((this.m_buffer[0] | (this.m_buffer[1] << 8) | (this.m_buffer[2] << 16) | (this.m_buffer[3] << 24)),System.UInt32.ctor);
            var ret_high=Cast((this.m_buffer[4] | (this.m_buffer[5] << 8) | (this.m_buffer[6] << 16) | (this.m_buffer[7] << 24)),System.UInt32.ctor);
            return ((ret_high) << 32) | ret_low;
        },
        CheckBuffer:function(length)
        {
            if(this.m_buffer.length <= length)
            {
                var new_buffer=[];
                System.Array.Copy(this.m_buffer,0,new_buffer,0,this.m_buffer.length);
                this.m_buffer = new_buffer;
            }
        }
    }
};
JsTypes.push(System$IO$BinaryReader);
