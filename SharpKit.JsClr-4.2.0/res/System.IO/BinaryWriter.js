/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$IO$BinaryWriter=
{
    fullname:"System.IO.BinaryWriter",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            System.IO.BinaryWriter.Null = new System.IO.BinaryWriter.ctor();
        }
    },
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.IDisposable"],
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.OutStream = null;
            this.buffer = null;
            this.stringBuffer = null;
            this.maxCharsPerRound = 0;
            this.disposed = false;
            System.IO.BinaryWriter.ctor$$Stream.call(this,System.IO.Stream.Null);
        },
        ctor$$Stream:function(output)
        {
            this.OutStream = null;
            this.buffer = null;
            this.stringBuffer = null;
            this.maxCharsPerRound = 0;
            this.disposed = false;
            System.Object.ctor.call(this);
            if(output == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("output"),new Error());
            if(!output.get_CanWrite())
                throw $CreateException(new System.ArgumentException.ctor$$String("Stream does not support writing or already closed."),new Error());
        },
        BaseStream$$:"System.IO.Stream",
        get_BaseStream:function()
        {
            this.Flush();
            return this.OutStream;
        },
        Close:function()
        {
            this.Dispose$$Boolean(true);
        },
        Dispose:function()
        {
            this.Dispose$$Boolean(true);
        },
        Dispose$$Boolean:function(disposing)
        {
            if(disposing && this.OutStream != null)
                this.OutStream.Close();
            this.buffer = null;
            this.disposed = true;
        },
        Flush:function()
        {
            this.OutStream.Flush();
        },
        Write$$Boolean:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast((value?1:0),System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,1);
        },
        Write$$Byte:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.OutStream.WriteByte(value);
        },
        Write$$Byte$Array:function(buffer)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            this.OutStream.Write(buffer,0,buffer.length);
        },
        Write$$Byte$Array$$Int32$$Int32:function(buffer,index,count)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            if(buffer == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error());
            this.OutStream.Write(buffer,index,count);
        },
        Write$$Char:function(ch)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            var dec=[];
            dec[0] = ch;
            var enc=JSHelper.UTF8.Encode$$Char$Array$$Int32$$Int32(dec,0,1);
            this.OutStream.Write(enc,0,enc.length);
        },
        Write$$Char$Array:function(chars)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            if(chars == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("chars"),new Error());
            var enc=JSHelper.UTF8.Encode$$Char$Array$$Int32$$Int32(chars,0,chars.length);
            this.OutStream.Write(enc,0,enc.length);
        },
        Write$$Char$Array$$Int32$$Int32:function(chars,index,count)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            if(chars == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("chars"),new Error());
            var enc=JSHelper.UTF8.Encode$$Char$Array$$Int32$$Int32(chars,index,count);
            this.OutStream.Write(enc,0,enc.length);
        },
        Write$$Double:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.OutStream.Write(Mono.Security.BitConverterLE.GetBytes$$Double(value),0,8);
        },
        Write$$Int16:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast(value,System.Byte.ctor);
            this.buffer[1] = Cast((value >> 8),System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,2);
        },
        Write$$Int32:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast(value,System.Byte.ctor);
            this.buffer[1] = Cast((value >> 8),System.Byte.ctor);
            this.buffer[2] = Cast((value >> 16),System.Byte.ctor);
            this.buffer[3] = Cast((value >> 24),System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,4);
        },
        Write$$Int64:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            var sh=0;
            for(var i=0;i < 8;i++)
            {
                this.buffer[i] = Cast((value >> sh),System.Byte.ctor);
                sh += 8;
            }
            this.OutStream.Write(this.buffer,0,8);
        },
        Write$$SByte:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast(value,System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,1);
        },
        Write$$Single:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.OutStream.Write(Mono.Security.BitConverterLE.GetBytes$$Single(value),0,4);
        },
        Write$$String:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            var v=value.ToCharArray();
            var len=JSHelper.UTF8.GetByteCount(v,true,0,-1);
            this.Write7BitEncodedInt(len);
            if(this.stringBuffer == null)
            {
                this.stringBuffer = [];
                this.maxCharsPerRound = 128;
            }
            var chpos=0;
            var chrem=value.length;
            while(chrem > 0)
            {
                var cch=(chrem > this.maxCharsPerRound)?this.maxCharsPerRound:chrem;
                var blen=JSHelper.UTF8.Encode$$Char$Array$$Int32$$Int32$$Byte$Array$$Int32(v,chpos,cch,this.stringBuffer,0);
                this.OutStream.Write(this.stringBuffer,0,blen);
                chpos += cch;
                chrem -= cch;
            }
        },
        Write$$UInt16:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast(value,System.Byte.ctor);
            this.buffer[1] = Cast((value >> 8),System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,2);
        },
        Write$$UInt32:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            this.buffer[0] = Cast(value,System.Byte.ctor);
            this.buffer[1] = Cast((value >> 8),System.Byte.ctor);
            this.buffer[2] = Cast((value >> 16),System.Byte.ctor);
            this.buffer[3] = Cast((value >> 24),System.Byte.ctor);
            this.OutStream.Write(this.buffer,0,4);
        },
        Write$$UInt64:function(value)
        {
            if(this.disposed)
                throw $CreateException(new System.ObjectDisposedException.ctor$$String$$String("BinaryWriter","Cannot write to a closed BinaryWriter"),new Error());
            var sh=0;
            for(var i=0;i < 8;i++)
            {
                this.buffer[i] = Cast((value >> sh),System.Byte.ctor);
                sh += 8;
            }
            this.OutStream.Write(this.buffer,0,8);
        },
        Write7BitEncodedInt:function(value)
        {
            do{
                var high=(value >> 7) & 33554431;
                var b=Cast((value & 127),System.Byte.ctor);
                if(high != 0)
                {
                    b = Cast((b | 128),System.Byte.ctor);
                }
                this.Write$$Byte(b);
                value = high;
            }
            while(value != 0)
        }
    }
};
JsTypes.push(System$IO$BinaryWriter);
