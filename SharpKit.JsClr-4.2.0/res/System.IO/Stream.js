/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$IO$Stream=
{
    fullname:"System.IO.Stream",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            System.IO.Stream.Null = new System.IO.NullStream.ctor();
        },
        Synchronized:function(stream)
        {
            return new System.IO.SynchronizedStream.ctor(stream);
        }
    },
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.IDisposable"],
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.async_read = null;
            this.async_write = null;
            this.async_event = null;
            this._Position = 0;
            System.Object.ctor.call(this);
        },
        CanRead$$:"System.Boolean",
        CanSeek$$:"System.Boolean",
        CanWrite$$:"System.Boolean",
        CanTimeout$$:"System.Boolean",
        get_CanTimeout:function()
        {
            return false;
        },
        Length$$:"System.Int64",
        Position$$:"System.Int64",
        get_Position:function()
        {
            return this._Position;
        },
        set_Position:function(value)
        {
            this._Position = value;
        },
        Dispose:function()
        {
            this.Close();
        },
        Dispose$$Boolean:function(disposing)
        {
            if(this.async_event != null && disposing)
            {
                this.async_event.Close();
                this.async_event = null;
            }
        },
        Close:function()
        {
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        ReadTimeout$$:"System.Int32",
        get_ReadTimeout:function()
        {
            throw $CreateException(new System.InvalidOperationException.ctor$$String("Timeouts are not supported on this stream."),new Error());
        },
        set_ReadTimeout:function(value)
        {
            throw $CreateException(new System.InvalidOperationException.ctor$$String("Timeouts are not supported on this stream."),new Error());
        },
        WriteTimeout$$:"System.Int32",
        get_WriteTimeout:function()
        {
            throw $CreateException(new System.InvalidOperationException.ctor$$String("Timeouts are not supported on this stream."),new Error());
        },
        set_WriteTimeout:function(value)
        {
            throw $CreateException(new System.InvalidOperationException.ctor$$String("Timeouts are not supported on this stream."),new Error());
        },
        CreateWaitHandle:function()
        {
            return new System.Threading.ManualResetEvent.ctor(false);
        },
        ReadByte:function()
        {
            var buffer=[];
            if(this.Read(buffer,0,1) == 1)
                return buffer[0];
            return -1;
        },
        WriteByte:function(value)
        {
            var buffer=[];
            buffer[0] = value;
            this.Write(buffer,0,1);
        },
        BeginRead:function(buffer,offset,count,callback,state)
        {
            if(!this.get_CanRead())
                throw $CreateException(new System.NotSupportedException.ctor$$String("This stream does not support reading"),new Error());
            if(this.async_event == null)
            {
                System.Threading.Monitor.Enter$$Object(this);
                try
                {
                    if(this.async_event == null)
                        this.async_event = new System.Threading.AutoResetEvent.ctor(true);
                }
                finally
                {
                    System.Threading.Monitor.Exit(this);
                }
            }
            this.async_event.WaitOne();
            this.async_read = $CreateDelegate(this,this.Read);
            return this.async_read.BeginInvoke(buffer,offset,count,callback,state);
        },
        BeginWrite:function(buffer,offset,count,callback,state)
        {
            if(!this.get_CanWrite())
                throw $CreateException(new System.NotSupportedException.ctor$$String("This stream does not support writing"),new Error());
            if(this.async_event == null)
            {
                System.Threading.Monitor.Enter$$Object(this);
                try
                {
                    if(this.async_event == null)
                        this.async_event = new System.Threading.AutoResetEvent.ctor(true);
                }
                finally
                {
                    System.Threading.Monitor.Exit(this);
                }
            }
            this.async_event.WaitOne();
            this.async_write = $CreateDelegate(this,this.Write);
            return this.async_write.BeginInvoke(buffer,offset,count,callback,state);
        },
        EndRead:function(asyncResult)
        {
            if(asyncResult == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("asyncResult"),new Error());
            if(this.async_read == null)
                throw $CreateException(new System.ArgumentException.ctor$$String("EndRead cannot be called multiple times"),new Error());
            try
            {
                return this.async_read.EndInvoke(asyncResult);
            }
            finally
            {
                this.async_read = null;
                this.async_event.Set();
            }
        },
        EndWrite:function(asyncResult)
        {
            if(asyncResult == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("asyncResult"),new Error());
            if(this.async_write == null)
                throw $CreateException(new System.ArgumentException.ctor$$String("EndWrite cannot be called multiple times"),new Error());
            try
            {
                this.async_write.EndInvoke(asyncResult);
            }
            finally
            {
                this.async_write = null;
                this.async_event.Set();
            }
        },
        CopyTo$$Stream:function(destination)
        {
            this.CopyTo$$Stream$$Int32(destination,16384);
        },
        CopyTo$$Stream$$Int32:function(destination,bufferSize)
        {
            if(destination == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("destination"),new Error());
            if(!this.get_CanRead())
                throw $CreateException(new System.NotSupportedException.ctor$$String("This stream does not support reading"),new Error());
            if(!destination.get_CanWrite())
                throw $CreateException(new System.NotSupportedException.ctor$$String("This destination stream does not support writing"),new Error());
            if(bufferSize <= 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("bufferSize"),new Error());
            var buffer=[];
            var nread;
            while((nread = this.Read(buffer,0,bufferSize)) != 0)
            destination.Write(buffer,0,nread);
        },
        ObjectInvariant:function()
        {
        }
    }
};
JsTypes.push(System$IO$Stream);
var System$IO$NullStream=
{
    fullname:"System.IO.NullStream",
    baseTypeName:"System.IO.Stream",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.IO.Stream.ctor.call(this);
        },
        CanRead$$:"System.Boolean",
        get_CanRead:function()
        {
            return true;
        },
        CanSeek$$:"System.Boolean",
        get_CanSeek:function()
        {
            return true;
        },
        CanWrite$$:"System.Boolean",
        get_CanWrite:function()
        {
            return true;
        },
        Length$$:"System.Int64",
        get_Length:function()
        {
            return 0;
        },
        Position$$:"System.Int64",
        get_Position:function()
        {
            return 0;
        },
        set_Position:function(value)
        {
        },
        Flush:function()
        {
        },
        Read:function(buffer,offset,count)
        {
            return 0;
        },
        ReadByte:function()
        {
            return -1;
        },
        SetLength:function(value)
        {
        },
        Write:function(buffer,offset,count)
        {
        },
        WriteByte:function(value)
        {
        }
    }
};
JsTypes.push(System$IO$NullStream);
var System$IO$SynchronizedStream=
{
    fullname:"System.IO.SynchronizedStream",
    baseTypeName:"System.IO.Stream",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function(source)
        {
            this.source = null;
            this.slock = null;
            System.IO.Stream.ctor.call(this);
            this.source = source;
            this.slock = new System.Object.ctor();
        },
        CanRead$$:"System.Boolean",
        get_CanRead:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.get_CanRead();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        CanSeek$$:"System.Boolean",
        get_CanSeek:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.get_CanSeek();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        CanWrite$$:"System.Boolean",
        get_CanWrite:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.get_CanWrite();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        Length$$:"System.Int64",
        get_Length:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.get_Length();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        Position$$:"System.Int64",
        get_Position:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.get_Position();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        set_Position:function(value)
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                this.source.set_Position(value);
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        Flush:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                this.source.Flush();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        Read:function(buffer,offset,count)
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.Read(buffer,offset,count);
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        ReadByte:function()
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                return this.source.ReadByte();
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        SetLength:function(value)
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                this.source.SetLength(value);
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        Write:function(buffer,offset,count)
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                this.source.Write(buffer,offset,count);
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        },
        WriteByte:function(value)
        {
            System.Threading.Monitor.Enter$$Object(this.slock);
            try
            {
                this.source.WriteByte(value);
            }
            finally
            {
                System.Threading.Monitor.Exit(this.slock);
            }
        }
    }
};
JsTypes.push(System$IO$SynchronizedStream);
