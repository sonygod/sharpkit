/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$Reflection$MemberInfo=
{
    fullname:"System.Reflection.MemberInfo",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this._Name = null;
            this._DeclaringType = null;
            this._CustomAttributes = null;
            System.Object.ctor.call(this);
        },
        Name$$:"System.String",
        get_Name:function()
        {
            return this._Name;
        },
        DeclaringType$$:"SharpKit.JavaScript.Private.JsImplType",
        get_DeclaringType:function()
        {
            return this._DeclaringType;
        },
        VerifyCustomAttributes:function()
        {
            this.get_DeclaringType().VerifyCustomAttributesOnTypeAndMembers();
        },
        GetBaseMember:function()
        {
            return null;
        },
        AddCustomAttributes:function(list,attributeType,inherit)
        {
            this.VerifyCustomAttributes();
            if(this._CustomAttributes != null)
            {
                for(var i=0;i < this._CustomAttributes.length;i++)
                {
                    var att=this._CustomAttributes[i];
                    if(attributeType.IsInstanceOfType(att))
                        list.Add(att);
                }
            }
            if(inherit)
            {
                var bm=this.GetBaseMember();
                if(bm != null)
                    bm.AddCustomAttributes(list,attributeType,inherit);
            }
        },
        GetCustomAttributes$$Type$$Boolean:function(attributeType,inherit)
        {
            var list=new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            this.AddCustomAttributes(list,attributeType,inherit);
            return list.ToArray();
        },
        GetCustomAttributes$$Boolean:function(inherit)
        {
            if(inherit)
                throw $CreateException(new System.NotImplementedException.ctor$$String("GetCustomAttributes with inherit=true is not implemented"),new Error());
            this.VerifyCustomAttributes();
            return this._CustomAttributes;
        }
    }
};
JsTypes.push(System$Reflection$MemberInfo);
var System$Reflection$MethodBase=
{
    fullname:"System.Reflection.MethodBase",
    baseTypeName:"System.Reflection.MemberInfo",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Reflection.MemberInfo.ctor.call(this);
        }
    }
};
JsTypes.push(System$Reflection$MethodBase);
var System$Reflection$MethodInfo=
{
    fullname:"System.Reflection.MethodInfo",
    baseTypeName:"System.Reflection.MethodBase",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this._IsStatic = false;
            this.JsFunction = null;
            this.JsName = null;
            System.Reflection.MethodBase.ctor.call(this);
        },
        IsStatic$$:"System.Boolean",
        get_IsStatic:function()
        {
            return this._IsStatic;
        },
        Invoke:function(obj,parameters)
        {
            var func;
            if(this._IsStatic)
                func = this.JsFunction;
            else
            {
                if(obj == null)
                    throw $CreateException(new System.Exception.ctor$$String("Cannot invoke non static method without a target object"),new Error());
                func = obj[this.JsName];
            }
            var res;
            if(parameters == null)
                res = func.apply(obj);
            else
                res = func.apply(obj,parameters);
            return res;
        }
    }
};
JsTypes.push(System$Reflection$MethodInfo);
