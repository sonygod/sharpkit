/*Generated by SharpKit 5 v4.29.8000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var System$Collections$Generic$HashSet$1=
{
    fullname:"System.Collections.Generic.HashSet$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.ISet$1","System.Collections.Generic.ICollection$1","System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],
    Kind:"Class",
    definition:
    {
        ctor:function(T)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
        },
        ctor$$IEqualityComparer$1:function(T,comparer)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
            this.Comparer = comparer;
        },
        GetHashKey:function(key)
        {
            if(this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] != null)
                return false;
            this.Hashtable[key] = item;
            this._Count++;
            return true;
        },
        UnionWith:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IntersectWith:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        ExceptWith:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        SymmetricExceptWith:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IsSubsetOf:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IsSupersetOf:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IsProperSupersetOf:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        IsProperSubsetOf:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        Overlaps:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        SetEquals:function(other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            return this._Count;
        },
        IsReadOnly$$:"System.Boolean",
        get_IsReadOnly:function()
        {
            return false;
        },
        Clear:function()
        {
            this.Hashtable = new Object();
            this._Count = 0;
        },
        Contains:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] === item)
                return true;
            return false;
        },
        CopyTo:function(array,arrayIndex)
        {
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        Remove:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] === item)
            {
                delete this.Hashtable[key];
                this._Count--;
                return true;
            }
            return false;
        },
        GetEnumerator:function()
        {
            var array= [];
            for(var hashKey in this.Hashtable)
            {
                array.push(this.Hashtable[hashKey]);
            }
            return new System.Collections.Generic.JsArrayEnumerator$1.ctor(this.T,array);
        }
    }
};
JsTypes.push(System$Collections$Generic$HashSet$1);
