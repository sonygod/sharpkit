//Generated by a tool of Sebastian Loncar

namespace SharpKit.Html
{

	using SharpKit.JavaScript;

	[JsType(JsMode.Prototype, Export = false, PropertiesAsFields = true, OmitCasts = true)]
	public partial class Document : Node, IEventTarget
	{

		// Document
		public DocumentType doctype { get; private set; }
		public DOMImplementation implementation { get; private set; }
		public Element documentElement { get; private set; }
		public Element createElement(string tagName) { return default(Element); }
		public DocumentFragment createDocumentFragment() { return default(DocumentFragment); }
		public Text createTextNode(string data) { return default(Text); }
		public Comment createComment(string data) { return default(Comment); }
		public CDATASection createCDATASection(string data) { return default(CDATASection); }
		public ProcessingInstruction createProcessingInstruction(string target, string data) { return default(ProcessingInstruction); }
		public Attr createAttribute(string name) { return default(Attr); }
		public EntityReference createEntityReference(string name) { return default(EntityReference); }
		public NodeList getElementsByTagName(string tagname) { return default(NodeList); }
		public Node importNode(Node importedNode, bool deep) { return default(Node); }
		public Element createElementNS(string namespaceURI, string qualifiedName) { return default(Element); }
		public Attr createAttributeNS(string namespaceURI, string qualifiedName) { return default(Attr); }
		public NodeList getElementsByTagNameNS(string namespaceURI, string localName) { return default(NodeList); }
		public Element getElementById(string elementId) { return default(Element); }
		public JsString inputEncoding { get; private set; }
		public JsString xmlEncoding { get; private set; }
		public bool xmlStandalone { get; set; }
		public JsString xmlVersion { get; set; }
		public bool strictErrorChecking { get; set; }
		public JsString documentURI { get; set; }
		public Node adoptNode(Node source) { return default(Node); }
		public DOMConfiguration domConfig { get; private set; }
		public void normalizeDocument() { }
		public Node renameNode(Node n, string namespaceURI, string qualifiedName) { return default(Node); }

		// Document-39
		public StyleSheetList styleSheets { get; private set; }
		public JsString selectedStyleSheetSet { get; set; }
		public JsString lastStyleSheetSet { get; private set; }
		public JsString preferredStyleSheetSet { get; private set; }
		public DOMStringList styleSheetSets { get; private set; }
		public void enableStyleSheetsForSet(string name) { }

		// Document-40
		public Window defaultView { get; private set; }
		public Element elementFromPoint(float x, float y) { return default(Element); }
		public CaretPosition caretPositionFromPoint(float x, float y) { return default(CaretPosition); }

		// NodeSelector
		public Element querySelector(string selectors) { return default(Element); }
		public NodeList querySelectorAll(string selectors) { return default(NodeList); }

		#region IEventTarget Members

		public void addEventListener(string type, EventListener listener, bool useCapture) {
			throw new System.NotImplementedException();
		}

		public void removeEventListener(string type, EventListener listener, bool useCapture) {
			throw new System.NotImplementedException();
		}

		public bool dispatchEvent(DOMEvent evt) {
			throw new System.NotImplementedException();
		}

		#endregion
	}

}