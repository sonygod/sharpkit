//@AutoGenerated
//This file was generated by SharpKit at: 2012-07-10 15:44
using System;
using SharpKit.Html4;
using SharpKit.JavaScript;
namespace SharpKit.jQuery
{
    #region Callbacks
    [JsType(JsMode.Json, Export = false)]
    public partial class Callbacks
    {
        /// <summary>
        /// Determine if the callbacks have already been called at least once.
        /// </summary>
        public bool fired() { return false; }
        /// <summary>
        /// Determine if the callbacks list has been locked.
        /// </summary>
        public bool locked() { return false; }
        /// <summary>
        /// Remove all of the callbacks from a list.
        /// </summary>
        public void empty() { }
        /// <summary>
        /// Lock a callback list in its current state.
        /// </summary>
        public void @lock() { }
        /// <summary>
        /// Call all of the callbacks with the given arguments
        /// </summary>
        public void fire(object arguments) { }
        /// <summary>
        /// Remove a callback or a collection of callbacks from a callback list.
        /// </summary>
        public void remove(JsAction callbacks) { }
        /// <summary>
        /// Add a callback or a collection of callbacks to a callback list.
        /// </summary>
        public void add(JsAction callbacks) { }
        /// <summary>
        /// Disable a callback list from doing anything more.
        /// </summary>
        public void disable() { }
        /// <summary>
        /// Determine whether a supplied callback is in a list
        /// </summary>
        public bool has(JsAction callback) { return false; }
        /// <summary>
        /// Call all callbacks in a list with the given context and arguments.
        /// </summary>
        public void fireWith(object context, object args) { }
        /// <summary>
        /// Call all callbacks in a list with the given context and arguments.
        /// </summary>
        public void fireWith(object context) { }
        /// <summary>
        /// Call all callbacks in a list with the given context and arguments.
        /// </summary>
        public void fireWith() { }
    }
    #endregion
    #region Deferred
    [JsType(JsMode.Json, Export = false)]
    public partial class Deferred : Promise
    {
        /// <summary>
        /// Add handlers to be called when the Deferred object generates progress notifications.
        /// </summary>
        public Deferred progress(JsAction progressCallbacks) { return null; }
        /// <summary>
        /// Call the progressCallbacks on a Deferred object with the given context and args.
        /// </summary>
        public Deferred notifyWith(object context, object args) { return null; }
        /// <summary>
        /// Call the progressCallbacks on a Deferred object with the given args.
        /// </summary>
        public Deferred notify(object args) { return null; }
        /// <summary>
        /// Determine the current state of a Deferred object.
        /// </summary>
        public JsString state() { return null; }
        /// <summary>
        /// Return a Deferred's Promise object.
        /// </summary>
        public Promise promise(object target) { return null; }
        /// <summary>
        /// Resolve a Deferred object and call any doneCallbacks with the given context and args.
        /// </summary>
        public Deferred resolveWith(object context, JsArray args) { return null; }
        /// <summary>
        /// Reject a Deferred object and call any failCallbacks with the given context and args.
        /// </summary>
        public Deferred rejectWith(object context, JsArray args) { return null; }
        /// <summary>
        /// Reject a Deferred object and call any failCallbacks with the given args.
        /// </summary>
        public Deferred reject(object args) { return null; }
        /// <summary>
        /// Resolve a Deferred object and call any doneCallbacks with the given args.
        /// </summary>
        public Deferred resolve(object args) { return null; }
        /// <summary>
        /// Call the progressCallbacks on a Deferred object with the given context and args.
        /// </summary>
        public Deferred notifyWith(object context) { return null; }
        /// <summary>
        /// Return a Deferred's Promise object.
        /// </summary>
        public Promise promise() { return null; }
        /// <summary>
        /// Resolve a Deferred object and call any doneCallbacks with the given context and args.
        /// </summary>
        public Deferred resolveWith(object context) { return null; }
        /// <summary>
        /// Reject a Deferred object and call any failCallbacks with the given context and args.
        /// </summary>
        public Deferred rejectWith(object context) { return null; }
    }
    #endregion
    #region Event
    [JsType(JsMode.Json, Export = false)]
    public partial class Event
    {
        /// <summary>
        /// Returns whether event.stopImmediatePropagation() was ever called on this event object.
        /// </summary>
        public bool isImmediatePropagationStopped() { return false; }
        /// <summary>
        /// Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
        /// </summary>
        public void stopImmediatePropagation() { }
        /// <summary>
        /// Returns whether event.stopPropagation() was ever called on this event object.
        /// </summary>
        public bool isPropagationStopped() { return false; }
        /// <summary>
        /// Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
        /// </summary>
        public void stopPropagation() { }
        /// <summary>
        /// Returns whether event.preventDefault() was ever called on this event object.
        /// </summary>
        public bool isDefaultPrevented() { return false; }
        /// <summary>
        /// If this method is called, the default action of the event will not be triggered.
        /// </summary>
        public void preventDefault() { }
        /// <summary>
        /// The element where the currently-called jQuery event handler was attached.
        /// </summary>
        public HtmlElement delegateTarget { get; set; }
        /// <summary>
        /// The namespace specified when the event was triggered.
        /// </summary>
        public JsString @namespace { get; set; }
        /// <summary>
        /// The difference in milliseconds between the time the browser created the event and January 1, 1970.
        /// </summary>
        public JsNumber timeStamp { get; set; }
        /// <summary>
        /// The last value returned by an event handler that was triggered by this event, unless the value was undefined.
        /// </summary>
        public object result { get; set; }
        /// <summary>
        /// For key or mouse events, this property indicates the specific key or button that was pressed.
        /// </summary>
        public JsNumber which { get; set; }
        /// <summary>
        /// The mouse position relative to the top edge of the document.
        /// </summary>
        public JsNumber pageY { get; set; }
        /// <summary>
        /// The mouse position relative to the left edge of the document.
        /// </summary>
        public JsNumber pageX { get; set; }
        /// <summary>
        /// The current DOM element within the event bubbling phase.
        /// </summary>
        public HtmlElement currentTarget { get; set; }
        /// <summary>
        /// The other DOM element involved in the event, if any.
        /// </summary>
        public HtmlElement relatedTarget { get; set; }
        /// <summary>
        /// An optional data map passed to an event method when the current executing handler is bound.
        /// </summary>
        public object data { get; set; }
        /// <summary>
        /// The DOM element that initiated the event.
        /// </summary>
        public HtmlElement target { get; set; }
        /// <summary>
        /// Describes the nature of the event.
        /// </summary>
        public JsString type { get; set; }
    }
    #endregion
    #region jQuery
    [JsType(JsMode.Prototype, Export = false)]
    public partial class jQuery
    {
        /// <summary>
        /// Add elements to the set of matched elements.
        /// </summary>
        public jQuery add(JsString selector) { return null; }
        /// <summary>
        /// Add elements to the set of matched elements.
        /// </summary>
        public jQuery add(JsArray<HtmlElement> elements) { return null; }
        /// <summary>
        /// Add elements to the set of matched elements.
        /// </summary>
        public jQuery add(string html) { return null; }
        /// <summary>
        /// Add elements to the set of matched elements.
        /// </summary>
        public jQuery add(jQuery jQuery_object) { return null; }
        /// <summary>
        /// Add elements to the set of matched elements.
        /// </summary>
        public jQuery add(JsString selector, HtmlElement context) { return null; }
        /// <summary>
        /// Adds the specified class(es) to each of the set of matched elements.
        /// </summary>
        public jQuery addClass(JsString className) { return null; }
        /// <summary>
        /// Adds the specified class(es) to each of the set of matched elements.
        /// </summary>
        public jQuery addClass(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsAction<Event> function) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsString content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(HtmlElement content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(jQuery content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsString content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsString content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsString content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(JsString content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(HtmlElement content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(HtmlElement content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(HtmlElement content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(HtmlElement content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(jQuery content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(jQuery content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(jQuery content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, after each element in the set of matched elements.
        /// </summary>
        public jQuery after(jQuery content, jQuery content2) { return null; }
        /// <summary>
        /// Register a handler to be called when Ajax requests complete. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxComplete(JsAction<AjaxSettings, object, jqXHR> handler) { return null; }
        /// <summary>
        /// Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxError(JsAction<Event, jqXHR, AjaxSettings, JsError> handler) { return null; }
        /// <summary>
        /// Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxSend(JsAction<AjaxSettings, object, jqXHR> handler) { return null; }
        /// <summary>
        /// Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxStart(JsAction handler__) { return null; }
        /// <summary>
        /// Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxStop(JsAction handler__) { return null; }
        /// <summary>
        /// Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
        /// </summary>
        public jQuery ajaxSuccess(JsAction<AjaxSettings, object, jqXHR> handler) { return null; }
        /// <summary>
        /// Add the previous set of elements on the stack to the current set.
        /// </summary>
        public jQuery andSelf() { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, object options) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsAction complete) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsString easing) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsNumber duration) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsString easing, JsAction complete) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsNumber duration, JsAction complete) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsString duration, JsString easing, JsAction complete) { return null; }
        /// <summary>
        /// Perform a custom animation of a set of CSS properties.
        /// </summary>
        public jQuery animate(object properties, JsNumber duration, JsString easing, JsAction complete) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsString content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(HtmlElement content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(jQuery content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsString content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsString content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsString content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(JsString content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(HtmlElement content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(HtmlElement content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(HtmlElement content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(HtmlElement content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(jQuery content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(jQuery content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(jQuery content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the end of each element in the set of matched elements.
        /// </summary>
        public jQuery append(jQuery content, jQuery content2) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the end of the target.
        /// </summary>
        public jQuery appendTo(JsString target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the end of the target.
        /// </summary>
        public jQuery appendTo(HtmlElement target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the end of the target.
        /// </summary>
        public jQuery appendTo(jQuery target) { return null; }
        /// <summary>
        /// Get the value of an attribute for the first element in the set of matched elements.
        /// </summary>
        public JsString attr(JsString attributeName) { return null; }
        /// <summary>
        /// Set one or more attributes for the set of matched elements.
        /// </summary>
        public jQuery attr(object map) { return null; }
        /// <summary>
        /// Set one or more attributes for the set of matched elements.
        /// </summary>
        public jQuery attr(JsString attributeName, JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Set one or more attributes for the set of matched elements.
        /// </summary>
        public jQuery attr(JsString attributeName, JsString value) { return null; }
        /// <summary>
        /// Set one or more attributes for the set of matched elements.
        /// </summary>
        public jQuery attr(JsString attributeName, JsNumber value) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsAction function) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsString content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(HtmlElement content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(jQuery content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsString content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsString content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsString content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(JsString content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(HtmlElement content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(HtmlElement content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(HtmlElement content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(HtmlElement content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(jQuery content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(jQuery content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(jQuery content, JsArray content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, before each element in the set of matched elements.
        /// </summary>
        public jQuery before(jQuery content, jQuery content2) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements.
        /// </summary>
        public jQuery bind(object events) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements.
        /// </summary>
        public jQuery bind(JsString eventType, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements.
        /// </summary>
        public jQuery bind(JsString eventType, bool preventBubble) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements.
        /// </summary>
        public jQuery bind(JsString eventType, object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements.
        /// </summary>
        public jQuery bind(JsString eventType, object eventData, bool preventBubble) { return null; }
        /// <summary>
        /// Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery blur() { return null; }
        /// <summary>
        /// Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery blur(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery blur(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery change() { return null; }
        /// <summary>
        /// Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery change(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery change(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the children of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery children() { return null; }
        /// <summary>
        /// Get the children of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery children(JsString selector) { return null; }
        /// <summary>
        /// Remove from the queue all items that have not yet been run.
        /// </summary>
        public jQuery clearQueue() { return null; }
        /// <summary>
        /// Remove from the queue all items that have not yet been run.
        /// </summary>
        public jQuery clearQueue(JsString queueName) { return null; }
        /// <summary>
        /// Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery click() { return null; }
        /// <summary>
        /// Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery click(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery click(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Create a deep copy of the set of matched elements.
        /// </summary>
        public jQuery clone() { return null; }
        /// <summary>
        /// Create a deep copy of the set of matched elements.
        /// </summary>
        public jQuery clone(bool withDataAndEvents) { return null; }
        /// <summary>
        /// Create a deep copy of the set of matched elements.
        /// </summary>
        public jQuery clone(bool withDataAndEvents, bool deepWithDataAndEvents) { return null; }
        /// <summary>
        /// Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.
        /// </summary>
        public jQuery closest(jQuery jQuery_object) { return null; }
        /// <summary>
        /// Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.
        /// </summary>
        public jQuery closest(HtmlElement element) { return null; }
        /// <summary>
        /// Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.
        /// </summary>
        public jQuery closest(JsString selector) { return null; }
        /// <summary>
        /// Gets an array of all the elements and selectors matched against the current element up through the DOM tree.
        /// </summary>
        public JsArray closest(JsArray selectors) { return null; }
        /// <summary>
        /// Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.
        /// </summary>
        public jQuery closest(JsString selector, HtmlElement context) { return null; }
        /// <summary>
        /// Gets an array of all the elements and selectors matched against the current element up through the DOM tree.
        /// </summary>
        public JsArray closest(JsArray selectors, HtmlElement context) { return null; }
        /// <summary>
        /// Get the children of each element in the set of matched elements, including text and comment nodes.
        /// </summary>
        public jQuery contents() { return null; }
        /// <summary>
        /// Get the value of a style property for the first element in the set of matched elements.
        /// </summary>
        public JsString css(JsString propertyName) { return null; }
        /// <summary>
        /// Set one or more CSS properties for the  set of matched elements.
        /// </summary>
        public jQuery css(object map) { return null; }
        /// <summary>
        /// Set one or more CSS properties for the  set of matched elements.
        /// </summary>
        public jQuery css(JsString propertyName, JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Set one or more CSS properties for the  set of matched elements.
        /// </summary>
        public jQuery css(JsString propertyName, JsString value) { return null; }
        /// <summary>
        /// Set one or more CSS properties for the  set of matched elements.
        /// </summary>
        public jQuery css(JsString propertyName, JsNumber value) { return null; }
        /// <summary>
        /// Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).
        /// </summary>
        public object data() { return null; }
        /// <summary>
        /// Store arbitrary data associated with the matched elements.
        /// </summary>
        public jQuery data(object obj) { return null; }
        /// <summary>
        /// Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).
        /// </summary>
        public object data(JsString key) { return null; }
        /// <summary>
        /// Store arbitrary data associated with the matched elements.
        /// </summary>
        public jQuery data(JsString key, object value) { return null; }
        /// <summary>
        /// Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery dblclick() { return null; }
        /// <summary>
        /// Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery dblclick(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery dblclick(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Set a timer to delay execution of subsequent items in the queue.
        /// </summary>
        public jQuery delay(JsNumber duration) { return null; }
        /// <summary>
        /// Set a timer to delay execution of subsequent items in the queue.
        /// </summary>
        public jQuery delay(JsNumber duration, JsString queueName) { return null; }
        /// <summary>
        /// Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
        /// </summary>
        public jQuery @delegate(JsString selector, object events) { return null; }
        /// <summary>
        /// Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
        /// </summary>
        public jQuery @delegate(JsString selector, JsString eventType, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
        /// </summary>
        public jQuery @delegate(JsString selector, JsString eventType, object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Execute the next function on the queue for the matched elements.
        /// </summary>
        public jQuery dequeue() { return null; }
        /// <summary>
        /// Execute the next function on the queue for the matched elements.
        /// </summary>
        public jQuery dequeue(JsString queueName) { return null; }
        /// <summary>
        /// Remove the set of matched elements from the DOM.
        /// </summary>
        public jQuery detach() { return null; }
        /// <summary>
        /// Remove the set of matched elements from the DOM.
        /// </summary>
        public jQuery detach(JsString selector) { return null; }
        /// <summary>
        /// Remove all event handlers previously attached using .live() from the elements.
        /// </summary>
        public jQuery die() { return null; }
        /// <summary>
        /// Remove an event handler previously attached using .live() from the elements.
        /// </summary>
        public jQuery die(object eventTypes) { return null; }
        /// <summary>
        /// Remove an event handler previously attached using .live() from the elements.
        /// </summary>
        public jQuery die(JsString eventType) { return null; }
        /// <summary>
        /// Remove an event handler previously attached using .live() from the elements.
        /// </summary>
        public jQuery die(JsString eventType, JsString handler) { return null; }
        /// <summary>
        /// Iterate over a jQuery object, executing a function for each matched element.
        /// </summary>
        public jQuery each(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Remove all child nodes of the set of matched elements from the DOM.
        /// </summary>
        public jQuery empty() { return null; }
        /// <summary>
        /// End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
        /// </summary>
        public jQuery end() { return null; }
        /// <summary>
        /// Reduce the set of matched elements to the one at the specified index.
        /// </summary>
        public jQuery eq(JsNumber _index) { return null; }
        /// <summary>
        /// Bind an event handler to the "error" JavaScript event.
        /// </summary>
        public jQuery error(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "error" JavaScript event.
        /// </summary>
        public jQuery error(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn() { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsNumber duration) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements by fading them to opaque.
        /// </summary>
        public jQuery fadeIn(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut() { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsNumber duration) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements by fading them to transparent.
        /// </summary>
        public jQuery fadeOut(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsString duration, JsNumber opacity) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsNumber duration, JsNumber opacity) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsString duration, JsNumber opacity, JsAction callback) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsString duration, JsNumber opacity, JsString easing) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsNumber duration, JsNumber opacity, JsAction callback) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsNumber duration, JsNumber opacity, JsString easing) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsString duration, JsNumber opacity, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Adjust the opacity of the matched elements.
        /// </summary>
        public jQuery fadeTo(JsNumber duration, JsNumber opacity, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle() { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsNumber duration) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements by animating their opacity.
        /// </summary>
        public jQuery fadeToggle(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that match the selector or pass the function's test.
        /// </summary>
        public jQuery filter(JsString selector) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that match the selector or pass the function's test.
        /// </summary>
        public jQuery filter(JsAction<Event> function) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that match the selector or pass the function's test.
        /// </summary>
        public jQuery filter(HtmlElement element) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that match the selector or pass the function's test.
        /// </summary>
        public jQuery filter(object jQuery_object) { return null; }
        /// <summary>
        /// Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
        /// </summary>
        public jQuery find(JsString selector) { return null; }
        /// <summary>
        /// Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
        /// </summary>
        public jQuery find(object jQuery_object) { return null; }
        /// <summary>
        /// Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
        /// </summary>
        public jQuery find(HtmlElement element) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to the first in the set.
        /// </summary>
        public jQuery first() { return null; }
        /// <summary>
        /// Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery focus() { return null; }
        /// <summary>
        /// Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery focus(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery focus(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "focusin" event.
        /// </summary>
        public jQuery focusin(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "focusin" event.
        /// </summary>
        public jQuery focusin(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "focusout" JavaScript event.
        /// </summary>
        public jQuery focusout(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "focusout" JavaScript event.
        /// </summary>
        public jQuery focusout(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Retrieve the DOM elements matched by the jQuery object.
        /// </summary>
        public object get() { return null; }
        /// <summary>
        /// Retrieve the DOM elements matched by the jQuery object.
        /// </summary>
        public object get(JsNumber index) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
        /// </summary>
        public jQuery has(JsString selector) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
        /// </summary>
        public jQuery has(HtmlElement contained) { return null; }
        /// <summary>
        /// Determine whether any of the matched elements are assigned the given class.
        /// </summary>
        public bool hasClass(JsString className) { return false; }
        /// <summary>
        /// Get the current computed height for the first element in the set of matched elements.
        /// </summary>
        public JsNumber height() { return null; }
        /// <summary>
        /// Set the CSS height of every matched element.
        /// </summary>
        public jQuery height(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Set the CSS height of every matched element.
        /// </summary>
        public jQuery height(JsString value) { return null; }
        /// <summary>
        /// Set the CSS height of every matched element.
        /// </summary>
        public jQuery height(JsNumber value) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide() { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsNumber duration) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements.
        /// </summary>
        public jQuery hide(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
        /// </summary>
        public jQuery hover(JsAction<Event> handlerInOut) { return null; }
        /// <summary>
        /// Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
        /// </summary>
        public jQuery hover(JsAction<Event> handlerIn, JsAction<Event> handlerOut) { return null; }
        /// <summary>
        /// Get the HTML contents of the first element in the set of matched elements.
        /// </summary>
        public JsString html() { return null; }
        /// <summary>
        /// Set the HTML contents of each element in the set of matched elements.
        /// </summary>
        public jQuery html(JsString htmlString) { return null; }
        /// <summary>
        /// Set the HTML contents of each element in the set of matched elements.
        /// </summary>
        public jQuery html(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Search for a given element from among the matched elements.
        /// </summary>
        public JsNumber index() { return null; }
        /// <summary>
        /// Search for a given element from among the matched elements.
        /// </summary>
        public JsNumber index(JsString selector) { return null; }
        /// <summary>
        /// Search for a given element from among the matched elements.
        /// </summary>
        public JsNumber index(HtmlElement element) { return null; }
        /// <summary>
        /// Search for a given element from among the matched elements.
        /// </summary>
        public JsNumber index(jQuery element) { return null; }
        /// <summary>
        /// Get the current computed height for the first element in the set of matched elements, including padding but not border.
        /// </summary>
        public JsNumber innerHeight() { return null; }
        /// <summary>
        /// Get the current computed width for the first element in the set of matched elements, including padding but not border.
        /// </summary>
        public JsNumber innerWidth() { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements after the target.
        /// </summary>
        public jQuery insertAfter(JsString target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements after the target.
        /// </summary>
        public jQuery insertAfter(HtmlElement target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements after the target.
        /// </summary>
        public jQuery insertAfter(jQuery target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements before the target.
        /// </summary>
        public jQuery insertBefore(JsString target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements before the target.
        /// </summary>
        public jQuery insertBefore(HtmlElement target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements before the target.
        /// </summary>
        public jQuery insertBefore(jQuery target) { return null; }
        /// <summary>
        /// Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
        /// </summary>
        public bool @is(JsString selector) { return false; }
        /// <summary>
        /// Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
        /// </summary>
        public bool @is(JsAction<Event> function) { return false; }
        /// <summary>
        /// Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
        /// </summary>
        public bool @is(object jQuery_object) { return false; }
        /// <summary>
        /// Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
        /// </summary>
        public bool @is(HtmlElement element) { return false; }
        /// <summary>
        /// Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keydown() { return null; }
        /// <summary>
        /// Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keydown(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keydown(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keypress() { return null; }
        /// <summary>
        /// Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keypress(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keypress(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keyup() { return null; }
        /// <summary>
        /// Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keyup(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery keyup(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to the final one in the set.
        /// </summary>
        public jQuery last() { return null; }
        /// <summary>
        /// Attach an event handler for all elements which match the current selector, now and in the future.
        /// </summary>
        public jQuery live(object events_map) { return null; }
        /// <summary>
        /// Attach an event handler for all elements which match the current selector, now and in the future.
        /// </summary>
        public jQuery live(JsString events, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach an event handler for all elements which match the current selector, now and in the future.
        /// </summary>
        public jQuery live(JsString events, object data, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "load" JavaScript event.
        /// </summary>
        public jQuery load(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url) { return null; }
        /// <summary>
        /// Bind an event handler to the "load" JavaScript event.
        /// </summary>
        public jQuery load(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url, object data) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url, JsAction<AjaxSettings, object, jqXHR> complete) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url, JsString data) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> complete) { return null; }
        /// <summary>
        /// Load data from the server and place the returned HTML into the matched element.
        /// </summary>
        public jQuery load(JsString url, JsString data, JsAction<AjaxSettings, object, jqXHR> complete) { return null; }
        /// <summary>
        /// Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
        /// </summary>
        public jQuery map(JsAction<JsNumber, object> callback) { return null; }
        /// <summary>
        /// Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousedown() { return null; }
        /// <summary>
        /// Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousedown(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousedown(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseenter() { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseenter(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseenter(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseleave() { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseleave(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
        /// </summary>
        public jQuery mouseleave(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousemove() { return null; }
        /// <summary>
        /// Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousemove(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mousemove(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseout() { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseout(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseout(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseover() { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseover(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseover(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseup() { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseup(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery mouseup(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
        /// </summary>
        public jQuery next() { return null; }
        /// <summary>
        /// Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
        /// </summary>
        public jQuery next(JsString selector) { return null; }
        /// <summary>
        /// Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery nextAll() { return null; }
        /// <summary>
        /// Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery nextAll(JsString selector) { return null; }
        /// <summary>
        /// Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
        /// </summary>
        public jQuery nextUntil() { return null; }
        /// <summary>
        /// Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
        /// </summary>
        public jQuery nextUntil(JsString filter) { return null; }
        /// <summary>
        /// Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
        /// </summary>
        public jQuery nextUntil(HtmlElement element) { return null; }
        /// <summary>
        /// Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
        /// </summary>
        public jQuery nextUntil(JsString selector, JsString filter) { return null; }
        /// <summary>
        /// Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
        /// </summary>
        public jQuery nextUntil(HtmlElement element, JsString filter) { return null; }
        /// <summary>
        /// Remove elements from the set of matched elements.
        /// </summary>
        public jQuery not(JsString selector) { return null; }
        /// <summary>
        /// Remove elements from the set of matched elements.
        /// </summary>
        public jQuery not(JsArray<HtmlElement> elements) { return null; }
        /// <summary>
        /// Remove elements from the set of matched elements.
        /// </summary>
        public jQuery not(JsAction<Event> function) { return null; }
        /// <summary>
        /// Remove elements from the set of matched elements.
        /// </summary>
        public jQuery not(object jQuery_object) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(JsString events) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(object events_map) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(object events_map, JsString selector) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(JsString events, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(JsString events, JsString selector) { return null; }
        /// <summary>
        /// Remove an event handler.
        /// </summary>
        public jQuery off(JsString events, JsString selector, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the current coordinates of the first element in the set of matched elements, relative to the document.
        /// </summary>
        public TopLeft offset() { return null; }
        /// <summary>
        /// Set the current coordinates of every element in the set of matched elements, relative to the document.
        /// </summary>
        public jQuery offset(object coordinates) { return null; }
        /// <summary>
        /// Set the current coordinates of every element in the set of matched elements, relative to the document.
        /// </summary>
        public jQuery offset(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Get the closest ancestor element that is positioned.
        /// </summary>
        public jQuery offsetParent() { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(object events_map) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(JsString events, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(object events_map, object data) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(object events_map, JsString selector) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(object events_map, JsString selector, object data) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(JsString events, object data, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(JsString events, JsString selector, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach an event handler function for one or more events to the selected elements.
        /// </summary>
        public jQuery on(JsString events, JsString selector, object data, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(object events_map) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(JsString events, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(object events_map, object data) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(object events_map, JsString selector) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(object events_map, JsString selector, object data) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(JsString events, object data, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(JsString events, JsString selector, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Attach a handler to an event for the elements. The handler is executed at most once per element.
        /// </summary>
        public jQuery one(JsString events, JsString selector, object data, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without "px") representation of the value or null if called on an empty set of elements.
        /// </summary>
        public JsNumber outerHeight() { return null; }
        /// <summary>
        /// Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without "px") representation of the value or null if called on an empty set of elements.
        /// </summary>
        public JsNumber outerHeight(bool includeMargin) { return null; }
        /// <summary>
        /// Get the current computed width for the first element in the set of matched elements, including padding and border.
        /// </summary>
        public JsNumber outerWidth() { return null; }
        /// <summary>
        /// Get the current computed width for the first element in the set of matched elements, including padding and border.
        /// </summary>
        public JsNumber outerWidth(bool includeMargin) { return null; }
        /// <summary>
        /// Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery parent() { return null; }
        /// <summary>
        /// Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery parent(JsString selector) { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery parents() { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery parents(JsString selector) { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery parentsUntil() { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery parentsUntil(JsString filter) { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery parentsUntil(HtmlElement element) { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery parentsUntil(JsString selector, JsString filter) { return null; }
        /// <summary>
        /// Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery parentsUntil(HtmlElement element, JsString filter) { return null; }
        /// <summary>
        /// Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
        /// </summary>
        public object position() { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(JsString content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(HtmlElement content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(jQuery content) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(JsString content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(JsString content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(JsString content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(HtmlElement content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(HtmlElement content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(HtmlElement content, jQuery content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(jQuery content, JsString content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(jQuery content, HtmlElement content2) { return null; }
        /// <summary>
        /// Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
        /// </summary>
        public jQuery prepend(jQuery content, jQuery content2) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the beginning of the target.
        /// </summary>
        public jQuery prependTo(JsString target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the beginning of the target.
        /// </summary>
        public jQuery prependTo(HtmlElement target) { return null; }
        /// <summary>
        /// Insert every element in the set of matched elements to the beginning of the target.
        /// </summary>
        public jQuery prependTo(jQuery target) { return null; }
        /// <summary>
        /// Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery prev() { return null; }
        /// <summary>
        /// Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery prev(JsString selector) { return null; }
        /// <summary>
        /// Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery prevAll() { return null; }
        /// <summary>
        /// Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery prevAll(JsString selector) { return null; }
        /// <summary>
        /// Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery prevUntil() { return null; }
        /// <summary>
        /// Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery prevUntil(JsString filter) { return null; }
        /// <summary>
        /// Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery prevUntil(HtmlElement element) { return null; }
        /// <summary>
        /// Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery prevUntil(JsString selector, JsString filter) { return null; }
        /// <summary>
        /// Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
        /// </summary>
        public jQuery prevUntil(HtmlElement element, JsString filter) { return null; }
        /// <summary>
        /// Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
        /// </summary>
        public Promise promise() { return null; }
        /// <summary>
        /// Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
        /// </summary>
        public Promise promise(object target) { return null; }
        /// <summary>
        /// Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
        /// </summary>
        public Promise promise(JsString type) { return null; }
        /// <summary>
        /// Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
        /// </summary>
        public Promise promise(JsString type, object target) { return null; }
        /// <summary>
        /// Get the value of a property for the first element in the set of matched elements.
        /// </summary>
        public JsString prop(JsString propertyName) { return null; }
        /// <summary>
        /// Set one or more properties for the set of matched elements.
        /// </summary>
        public jQuery prop(object map) { return null; }
        /// <summary>
        /// Set one or more properties for the set of matched elements.
        /// </summary>
        public jQuery prop(JsString propertyName, JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Set one or more properties for the set of matched elements.
        /// </summary>
        public jQuery prop(JsString propertyName, JsString value) { return null; }
        /// <summary>
        /// Set one or more properties for the set of matched elements.
        /// </summary>
        public jQuery prop(JsString propertyName, JsNumber value) { return null; }
        /// <summary>
        /// Set one or more properties for the set of matched elements.
        /// </summary>
        public jQuery prop(JsString propertyName, bool value) { return null; }
        /// <summary>
        /// Add a collection of DOM elements onto the jQuery stack.
        /// </summary>
        public jQuery pushStack(JsArray elements) { return null; }
        /// <summary>
        /// Add a collection of DOM elements onto the jQuery stack.
        /// </summary>
        public jQuery pushStack(JsArray elements, JsString name, JsArray arguments) { return null; }
        /// <summary>
        /// Show the queue of functions to be executed on the matched elements.
        /// </summary>
        public JsArray queue() { return null; }
        /// <summary>
        /// Show the queue of functions to be executed on the matched elements.
        /// </summary>
        public JsArray queue(JsString queueName) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched elements.
        /// </summary>
        public jQuery queue(JsArray newQueue) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched elements.
        /// </summary>
        public jQuery queue(JsAction<Event> callback) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched elements.
        /// </summary>
        public jQuery queue(JsString queueName, JsArray newQueue) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched elements.
        /// </summary>
        public jQuery queue(JsString queueName, JsAction<Event> callback) { return null; }
        /// <summary>
        /// Specify a function to execute when the DOM is fully loaded.
        /// </summary>
        public jQuery ready(JsAction handler) { return null; }
        /// <summary>
        /// Remove the set of matched elements from the DOM.
        /// </summary>
        public jQuery remove() { return null; }
        /// <summary>
        /// Remove the set of matched elements from the DOM.
        /// </summary>
        public jQuery remove(JsString selector) { return null; }
        /// <summary>
        /// Remove an attribute from each element in the set of matched elements.
        /// </summary>
        public jQuery removeAttr(JsString attributeName) { return null; }
        /// <summary>
        /// Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
        /// </summary>
        public jQuery removeClass() { return null; }
        /// <summary>
        /// Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
        /// </summary>
        public jQuery removeClass(JsString className) { return null; }
        /// <summary>
        /// Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
        /// </summary>
        public jQuery removeClass(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Remove a previously-stored piece of data.
        /// </summary>
        public jQuery removeData() { return null; }
        /// <summary>
        /// Remove a previously-stored piece of data.
        /// </summary>
        public jQuery removeData(JsArray list) { return null; }
        /// <summary>
        /// Remove a previously-stored piece of data.
        /// </summary>
        public jQuery removeData(JsString list) { return null; }
        /// <summary>
        /// Remove a property for the set of matched elements.
        /// </summary>
        public jQuery removeProp(JsString propertyName) { return null; }
        /// <summary>
        /// Replace each target element with the set of matched elements.
        /// </summary>
        public jQuery replaceAll(JsString target) { return null; }
        /// <summary>
        /// Replace each element in the set of matched elements with the provided new content.
        /// </summary>
        public jQuery replaceWith(JsAction function) { return null; }
        /// <summary>
        /// Replace each element in the set of matched elements with the provided new content.
        /// </summary>
        public jQuery replaceWith(JsString newContent) { return null; }
        /// <summary>
        /// Replace each element in the set of matched elements with the provided new content.
        /// </summary>
        public jQuery replaceWith(HtmlElement newContent) { return null; }
        /// <summary>
        /// Replace each element in the set of matched elements with the provided new content.
        /// </summary>
        public jQuery replaceWith(jQuery newContent) { return null; }
        /// <summary>
        /// Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery resize() { return null; }
        /// <summary>
        /// Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery resize(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery resize(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery scroll() { return null; }
        /// <summary>
        /// Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery scroll(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery scroll(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
        /// </summary>
        public JsNumber scrollLeft() { return null; }
        /// <summary>
        /// Set the current horizontal position of the scroll bar for each of the set of matched elements.
        /// </summary>
        public jQuery scrollLeft(JsNumber value) { return null; }
        /// <summary>
        /// Get the current vertical position of the scroll bar for the first element in the set of matched elements.
        /// </summary>
        public JsNumber scrollTop() { return null; }
        /// <summary>
        /// Set the current vertical position of the scroll bar for each of the set of matched elements.
        /// </summary>
        public jQuery scrollTop(JsNumber value) { return null; }
        /// <summary>
        /// Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery select() { return null; }
        /// <summary>
        /// Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery select(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery select(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Encode a set of form elements as a string for submission.
        /// </summary>
        public JsString serialize() { return null; }
        /// <summary>
        /// Encode a set of form elements as an array of names and values.
        /// </summary>
        public JsArray serializeArray() { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show() { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsNumber duration) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements.
        /// </summary>
        public jQuery show(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery siblings() { return null; }
        /// <summary>
        /// Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
        /// </summary>
        public jQuery siblings(JsString selector) { return null; }
        /// <summary>
        /// Return the number of elements in the jQuery object.
        /// </summary>
        public JsNumber size() { return null; }
        /// <summary>
        /// Reduce the set of matched elements to a subset specified by a range of indices.
        /// </summary>
        public jQuery slice(JsNumber start) { return null; }
        /// <summary>
        /// Reduce the set of matched elements to a subset specified by a range of indices.
        /// </summary>
        public jQuery slice(JsNumber start, JsNumber end) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown() { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsNumber duration) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideDown(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle() { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsNumber duration) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideToggle(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp() { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsNumber duration) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Hide the matched elements with a sliding motion.
        /// </summary>
        public jQuery slideUp(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop() { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop(bool clearQueue) { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop(JsString queue) { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop(bool clearQueue, bool jumpToEnd) { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop(JsString queue, bool clearQueue) { return null; }
        /// <summary>
        /// Stop the currently-running animation on the matched elements.
        /// </summary>
        public jQuery stop(JsString queue, bool clearQueue, bool jumpToEnd) { return null; }
        /// <summary>
        /// Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery submit() { return null; }
        /// <summary>
        /// Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery submit(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
        /// </summary>
        public jQuery submit(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Get the combined text contents of each element in the set of matched elements, including their descendants.
        /// </summary>
        public JsString text() { return null; }
        /// <summary>
        /// Set the content of each element in the set of matched elements to the specified text.
        /// </summary>
        public jQuery text(JsString textString) { return null; }
        /// <summary>
        /// Set the content of each element in the set of matched elements to the specified text.
        /// </summary>
        public jQuery text(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Retrieve all the DOM elements contained in the jQuery set, as an array.
        /// </summary>
        public JsArray toArray() { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle() { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(bool showOrHide) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsNumber duration) { return null; }
        /// <summary>
        /// Bind two or more handlers to the matched elements, to be executed on alternate clicks.
        /// </summary>
        public jQuery toggle(JsAction<Event> handler, JsAction<Event> handler_) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsString duration, JsString easing) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsNumber duration, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsNumber duration, JsString easing) { return null; }
        /// <summary>
        /// Bind two or more handlers to the matched elements, to be executed on alternate clicks.
        /// </summary>
        public jQuery toggle(JsAction<Event> handler, JsAction<Event> handler_, JsAction<Event> handler__) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsString duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Display or hide the matched elements.
        /// </summary>
        public jQuery toggle(JsNumber duration, JsString easing, JsAction callback) { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass() { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass(JsString className) { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass(bool @switch) { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass(JsAction<AjaxSettings, object, jqXHR> function) { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass(JsString className, bool @switch) { return null; }
        /// <summary>
        /// Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
        /// </summary>
        public jQuery toggleClass(JsAction<AjaxSettings, object, jqXHR> function, bool @switch) { return null; }
        /// <summary>
        /// Execute all handlers and behaviors attached to the matched elements for the given event type.
        /// </summary>
        public jQuery trigger(Event @event) { return null; }
        /// <summary>
        /// Execute all handlers and behaviors attached to the matched elements for the given event type.
        /// </summary>
        public jQuery trigger(JsString eventType) { return null; }
        /// <summary>
        /// Execute all handlers and behaviors attached to the matched elements for the given event type.
        /// </summary>
        public jQuery trigger(JsString eventType, object extraParameters) { return null; }
        /// <summary>
        /// Execute all handlers attached to an element for an event.
        /// </summary>
        public object triggerHandler(JsString eventType) { return null; }
        /// <summary>
        /// Execute all handlers attached to an element for an event.
        /// </summary>
        public object triggerHandler(JsString eventType, JsArray extraParameters) { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind() { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind(object @event) { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind(JsString eventType) { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind(JsString eventType, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Remove a previously-attached event handler from the elements.
        /// </summary>
        public jQuery unbind(JsString eventType, bool @false) { return null; }
        /// <summary>
        /// Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
        /// </summary>
        public jQuery undelegate() { return null; }
        /// <summary>
        /// Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
        /// </summary>
        public jQuery undelegate(JsString @namespace) { return null; }
        /// <summary>
        /// Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
        /// </summary>
        public jQuery undelegate(JsString selector, JsString eventType) { return null; }
        /// <summary>
        /// Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
        /// </summary>
        public jQuery undelegate(JsString selector, object events) { return null; }
        /// <summary>
        /// Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
        /// </summary>
        public jQuery undelegate(JsString selector, JsString eventType, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "unload" JavaScript event.
        /// </summary>
        public jQuery unload(JsAction<Event> handler) { return null; }
        /// <summary>
        /// Bind an event handler to the "unload" JavaScript event.
        /// </summary>
        public jQuery unload(object eventData, JsAction<Event> handler) { return null; }
        /// <summary>
        /// Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
        /// </summary>
        public jQuery unwrap() { return null; }
        /// <summary>
        /// Get the current value of the first element in the set of matched elements.
        /// </summary>
        public object val() { return null; }
        /// <summary>
        /// Set the value of each element in the set of matched elements.
        /// </summary>
        public jQuery val(JsString value) { return null; }
        /// <summary>
        /// Set the value of each element in the set of matched elements.
        /// </summary>
        public jQuery val(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Get the current computed width for the first element in the set of matched elements.
        /// </summary>
        public JsNumber width() { return null; }
        /// <summary>
        /// Set the CSS width of each element in the set of matched elements.
        /// </summary>
        public jQuery width(JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Set the CSS width of each element in the set of matched elements.
        /// </summary>
        public jQuery width(JsString value) { return null; }
        /// <summary>
        /// Set the CSS width of each element in the set of matched elements.
        /// </summary>
        public jQuery width(JsNumber value) { return null; }
        /// <summary>
        /// Wrap an HTML structure around each element in the set of matched elements.
        /// </summary>
        public jQuery wrap(JsAction<Event> function) { return null; }
        /// <summary>
        /// Wrap an HTML structure around each element in the set of matched elements.
        /// </summary>
        public jQuery wrap(JsString wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around each element in the set of matched elements.
        /// </summary>
        public jQuery wrap(HtmlElement wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around each element in the set of matched elements.
        /// </summary>
        public jQuery wrap(jQuery wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around all elements in the set of matched elements.
        /// </summary>
        public jQuery wrapAll(JsString wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around all elements in the set of matched elements.
        /// </summary>
        public jQuery wrapAll(HtmlElement wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around all elements in the set of matched elements.
        /// </summary>
        public jQuery wrapAll(jQuery wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around the content of each element in the set of matched elements.
        /// </summary>
        public jQuery wrapInner(JsString wrappingElement) { return null; }
        /// <summary>
        /// Wrap an HTML structure around the content of each element in the set of matched elements.
        /// </summary>
        public jQuery wrapInner(JsAction<Event> function) { return null; }
        /// <summary>
        /// Perform an asynchronous HTTP (Ajax) request.
        /// </summary>
        public static jqXHR ajax(object settings) { return null; }
        /// <summary>
        /// Perform an asynchronous HTTP (Ajax) request.
        /// </summary>
        public static jqXHR ajax(JsString url) { return null; }
        /// <summary>
        /// Perform an asynchronous HTTP (Ajax) request.
        /// </summary>
        public static jqXHR ajax(JsString url, object settings) { return null; }
        /// <summary>
        /// Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
        /// </summary>
        public static void ajaxPrefilter(JsAction<AjaxSettings, object, jqXHR> handler) { }
        /// <summary>
        /// Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
        /// </summary>
        public static void ajaxPrefilter(JsString dataTypes, JsAction<AjaxSettings, object, jqXHR> handler) { }
        /// <summary>
        /// Set default values for future Ajax requests.
        /// </summary>
        public static void ajaxSetup(AjaxSettings options) { }
        /// <summary>
        /// A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
        /// </summary>
        public static void Callbacks(JsString flags) { }
        /// <summary>
        /// Check to see if a DOM element is within another DOM element.
        /// </summary>
        public static bool contains(HtmlElement container, HtmlElement contained) { return false; }
        /// <summary>
        /// Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
        /// </summary>
        public static object data(HtmlElement element) { return null; }
        /// <summary>
        /// Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
        /// </summary>
        public static object data(HtmlElement element, JsString key) { return null; }
        /// <summary>
        /// Store arbitrary data associated with the specified element. Returns the value that was set.
        /// </summary>
        public static object data(HtmlElement element, JsString key, object value) { return null; }
        /// <summary>
        /// Execute the next function on the queue for the matched element.
        /// </summary>
        public static void dequeue(HtmlElement element) { }
        /// <summary>
        /// Execute the next function on the queue for the matched element.
        /// </summary>
        public static void dequeue(HtmlElement element, JsString queueName) { }
        /// <summary>
        /// A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
        /// </summary>
        public static object each(object collection, JsAction<JsNumber, object> callback) { return null; }
        /// <summary>
        /// Takes a string and throws an exception containing it.
        /// </summary>
        public static void error(JsString message) { }
        /// <summary>
        /// Merge the contents of two or more objects together into the first object.
        /// </summary>
        public static object extend(object target) { return null; }
        /// <summary>
        /// Merge the contents of two or more objects together into the first object.
        /// </summary>
        public static object extend(object target, object object1) { return null; }
        /// <summary>
        /// Merge the contents of two or more objects together into the first object.
        /// </summary>
        public static object extend(object target, object object1, object objectN) { return null; }
        /// <summary>
        /// Merge the contents of two or more objects together into the first object.
        /// </summary>
        public static object extend(bool deep, object target, object object1) { return null; }
        /// <summary>
        /// Merge the contents of two or more objects together into the first object.
        /// </summary>
        public static object extend(bool deep, object target, object object1, object objectN) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, object data) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsString data) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, object data, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsString data, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsString data, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP GET request.
        /// </summary>
        public static jqXHR get(JsString url, JsString data, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Load JSON-encoded data from the server using a GET HTTP request.
        /// </summary>
        public static jqXHR getJSON(JsString url) { return null; }
        /// <summary>
        /// Load JSON-encoded data from the server using a GET HTTP request.
        /// </summary>
        public static jqXHR getJSON(JsString url, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load JSON-encoded data from the server using a GET HTTP request.
        /// </summary>
        public static jqXHR getJSON(JsString url, object data) { return null; }
        /// <summary>
        /// Load JSON-encoded data from the server using a GET HTTP request.
        /// </summary>
        public static jqXHR getJSON(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load a JavaScript file from the server using a GET HTTP request, then execute it.
        /// </summary>
        public static jqXHR getScript(JsString url) { return null; }
        /// <summary>
        /// Load a JavaScript file from the server using a GET HTTP request, then execute it.
        /// </summary>
        public static jqXHR getScript(JsString url, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Execute some JavaScript code globally.
        /// </summary>
        public static void globalEval(JsString code) { }
        /// <summary>
        /// Finds the elements of an array which satisfy a filter function. The original array is not affected.
        /// </summary>
        public static JsArray grep(JsArray array, JsAction<JsNumber, object> function) { return null; }
        /// <summary>
        /// Finds the elements of an array which satisfy a filter function. The original array is not affected.
        /// </summary>
        public static JsArray grep(JsArray array, JsAction<JsNumber, object> function, bool invert) { return null; }
        /// <summary>
        /// Determine whether an element has any jQuery data associated with it.
        /// </summary>
        public static bool hasData(HtmlElement element) { return false; }
        /// <summary>
        /// Holds or releases the execution of jQuery's ready event.
        /// </summary>
        public static void holdReady(bool hold) { }
        /// <summary>
        /// Search for a specified value within an array and return its index (or -1 if not found).
        /// </summary>
        public static JsNumber inArray(object value, JsArray array) { return null; }
        /// <summary>
        /// Search for a specified value within an array and return its index (or -1 if not found).
        /// </summary>
        public static JsNumber inArray(object value, JsArray array, JsNumber fromIndex) { return null; }
        /// <summary>
        /// Determine whether the argument is an array.
        /// </summary>
        public static bool isArray(object obj) { return false; }
        /// <summary>
        /// Check to see if an object is empty (contains no properties).
        /// </summary>
        public static bool isEmptyObject(object @object) { return false; }
        /// <summary>
        /// Determine if the argument passed is a Javascript function object.
        /// </summary>
        public static bool isFunction(object obj) { return false; }
        /// <summary>
        /// Determines whether its argument is a number.
        /// </summary>
        public static bool isNumeric(object value) { return false; }
        /// <summary>
        /// Check to see if an object is a plain object (created using "{}" or "new Object").
        /// </summary>
        public static bool isPlainObject(object @object) { return false; }
        /// <summary>
        /// Determine whether the argument is a window.
        /// </summary>
        public static bool isWindow(object obj) { return false; }
        /// <summary>
        /// Check to see if a DOM node is within an XML document (or is an XML document).
        /// </summary>
        public static bool isXMLDoc(HtmlElement node) { return false; }
        /// <summary>
        /// Convert an array-like object into a true JavaScript array.
        /// </summary>
        public static JsArray makeArray(object obj) { return null; }
        /// <summary>
        /// Translate all items in an array or object to new array of items.
        /// </summary>
        public static JsArray map(JsArray arrayOrObject, JsAction<JsNumber, object> callback) { return null; }
        /// <summary>
        /// Translate all items in an array or object to new array of items.
        /// </summary>
        public static JsArray map(object arrayOrObject, JsAction<JsNumber, object> callback) { return null; }
        /// <summary>
        /// Merge the contents of two arrays together into the first array.
        /// </summary>
        public static JsArray merge(JsArray first, JsArray second) { return null; }
        /// <summary>
        /// Relinquish jQuery's control of the $ variable.
        /// </summary>
        public static object noConflict() { return null; }
        /// <summary>
        /// Relinquish jQuery's control of the $ variable.
        /// </summary>
        public static object noConflict(bool removeAll) { return null; }
        /// <summary>
        /// An empty function.
        /// </summary>
        public static JsAction noop() { return null; }
        /// <summary>
        /// Return a number representing the current time.
        /// </summary>
        public static JsNumber now() { return null; }
        /// <summary>
        /// Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
        /// </summary>
        public static JsString param(JsArray obj) { return null; }
        /// <summary>
        /// Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
        /// </summary>
        public static JsString param(object obj) { return null; }
        /// <summary>
        /// Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
        /// </summary>
        public static JsString param(JsArray obj, bool traditional) { return null; }
        /// <summary>
        /// Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
        /// </summary>
        public static JsString param(object obj, bool traditional) { return null; }
        /// <summary>
        /// Takes a well-formed JSON string and returns the resulting JavaScript object.
        /// </summary>
        public static object parseJSON(JsString json) { return null; }
        /// <summary>
        /// Parses a string into an XML document.
        /// </summary>
        public static XMLDocument parseXML(JsString data) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, object data) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsString data) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, object data, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsString data, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsString data, JsAction<AjaxSettings, object, jqXHR> success) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, object data, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Load data from the server using a HTTP POST request.
        /// </summary>
        public static jqXHR post(JsString url, JsString data, JsAction<AjaxSettings, object, jqXHR> success, JsString dataType) { return null; }
        /// <summary>
        /// Takes a function and returns a new one that will always have a particular context.
        /// </summary>
        public static JsAction proxy(JsAction function, object context) { return null; }
        /// <summary>
        /// Takes a function and returns a new one that will always have a particular context.
        /// </summary>
        public static JsAction proxy(object context, JsString name) { return null; }
        /// <summary>
        /// Show the queue of functions to be executed on the matched element.
        /// </summary>
        public static JsArray queue(HtmlElement element) { return null; }
        /// <summary>
        /// Show the queue of functions to be executed on the matched element.
        /// </summary>
        public static JsArray queue(HtmlElement element, JsString queueName) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched element.
        /// </summary>
        public static jQuery queue(HtmlElement element, JsString queueName, JsArray newQueue) { return null; }
        /// <summary>
        /// Manipulate the queue of functions to be executed on the matched element.
        /// </summary>
        public static jQuery queue(HtmlElement element, JsString queueName, JsAction callback__) { return null; }
        /// <summary>
        /// Remove a previously-stored piece of data.
        /// </summary>
        public static jQuery removeData(HtmlElement element) { return null; }
        /// <summary>
        /// Remove a previously-stored piece of data.
        /// </summary>
        public static jQuery removeData(HtmlElement element, JsString name) { return null; }
        /// <summary>
        /// Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.
        /// </summary>
        public static jQuery sub() { return null; }
        /// <summary>
        /// Remove the whitespace from the beginning and end of a string.
        /// </summary>
        public static JsString trim(JsString str) { return null; }
        /// <summary>
        /// Determine the internal JavaScript [[Class]] of an object.
        /// </summary>
        public static JsString type(object obj) { return null; }
        /// <summary>
        /// Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
        /// </summary>
        public static JsArray unique(JsArray array) { return null; }
        /// <summary>
        /// Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.
        /// </summary>
        public static Promise when(Deferred deferreds) { return null; }
        /// <summary>
        /// A string containing the jQuery version number.
        /// </summary>
        public JsString jquery { get; set; }
        /// <summary>
        /// Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.
        /// </summary>
        public object cssHooks { get; set; }
        /// <summary>
        /// Contains flags for the useragent, read from navigator.userAgent. We recommend against using this property; please try to use feature detection instead (see jQuery.support). jQuery.browser may be moved to a plugin in a future release of jQuery.
        /// </summary>
        public object browser { get; set; }
        /// <summary>
        /// The number of elements in the jQuery object.
        /// </summary>
        public JsNumber length { get; set; }
        /// <summary>
        /// The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.
        /// </summary>
        public HtmlElement context { get; set; }
        /// <summary>
        /// Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.
        /// </summary>
        public bool boxModel { get; set; }
        /// <summary>
        /// A collection of properties that represent the presence of different browser features or bugs. Primarily intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance.
        /// </summary>
        public object support { get; set; }
        public jQueryFx fx { get; set; }
    }
    #endregion
    #region jQueryContext
    public partial class jQueryContext
    {
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(HtmlElement element) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsArray elementArray) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(object jQuery_object) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J() { return null; }
        /// <summary>
        /// Creates DOM elements on the fly from the provided string of raw HTML.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString html, HtmlDocument ownerDocument) { return null; }
        /// <summary>
        /// Creates DOM elements on the fly from the provided string of raw HTML.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString html, object props) { return null; }
        /// <summary>
        /// Binds a function to be executed when the DOM has finished loading.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsAction callback) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector, HtmlElement context) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector, jQuery context) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector) { return null; }
    }
    #endregion
    #region jQueryContextBase
    [JsType(JsMode.Global, Export = false)]
    public partial class jQueryContextBase : HtmlContextBase
    {
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(HtmlElement element) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsArray elementArray) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(object jQuery_object) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J() { return null; }
        /// <summary>
        /// Creates DOM elements on the fly from the provided string of raw HTML.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString html, HtmlDocument ownerDocument) { return null; }
        /// <summary>
        /// Creates DOM elements on the fly from the provided string of raw HTML.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString html, object props) { return null; }
        /// <summary>
        /// Binds a function to be executed when the DOM has finished loading.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsAction callback) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector, HtmlElement context) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector, jQuery context) { return null; }
        /// <summary>
        /// Accepts a string containing a CSS selector which is then used to match a set of elements.
        /// </summary>
        [JsMethod(Name = "$")]
        public static jQuery J(JsString selector) { return null; }
    }
    #endregion
    #region jQueryFx
    [JsType(JsMode.Json, Export = false)]
    public partial class jQueryFx
    {
        /// <summary>
        /// The rate (in milliseconds) at which animations fire.
        /// </summary>
        public JsNumber interval { get; set; }
        /// <summary>
        /// Globally disable all animations.
        /// </summary>
        public bool off { get; set; }
    }
    #endregion
    #region Promise
    [JsType(JsMode.Json, Export = false)]
    public partial class Promise
    {
        /// <summary>
        /// Add handlers to be called when the Deferred object is resolved or rejected.
        /// </summary>
        public Deferred then(JsAction doneCallbacks, JsAction failCallbacks, JsAction progressCallbacks) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is resolved or rejected.
        /// </summary>
        public Deferred then(JsAction doneCallbacks, JsAction failCallbacks) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is resolved.
        /// </summary>
        public Deferred done(JsAction doneCallbacks, JsAction doneCallbacks2) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is resolved.
        /// </summary>
        public Deferred done(JsAction doneCallbacks) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is rejected.
        /// </summary>
        public Deferred fail(JsAction failCallbacks, JsAction failCallbacks2) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is rejected.
        /// </summary>
        public Deferred fail(JsAction failCallbacks) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is either resolved or rejected.
        /// </summary>
        public Deferred always(JsAction alwaysCallbacks, JsAction alwaysCallbacks2) { return null; }
        /// <summary>
        /// Add handlers to be called when the Deferred object is either resolved or rejected.
        /// </summary>
        public Deferred always(JsAction alwaysCallbacks) { return null; }
        /// <summary>
        /// Utility method to filter and/or chain Deferreds.
        /// </summary>
        public Promise pipe(JsAction doneFilter, JsAction failFilter, JsAction progressFilter) { return null; }
        /// <summary>
        /// Utility method to filter and/or chain Deferreds.
        /// </summary>
        public Promise pipe(JsAction doneFilter, JsAction failFilter) { return null; }
        /// <summary>
        /// Utility method to filter and/or chain Deferreds.
        /// </summary>
        public Promise pipe(JsAction doneFilter) { return null; }
        /// <summary>
        /// Utility method to filter and/or chain Deferreds.
        /// </summary>
        public Promise pipe() { return null; }
        /// <summary>
        /// Determine whether a Deferred object has been resolved.
        /// </summary>
        public bool isResolved() { return false; }
        /// <summary>
        /// Determine whether a Deferred object has been rejected.
        /// </summary>
        public bool isRejected() { return false; }
    }
    #endregion
}
namespace SharpKit.jQuery
{
    /// <summary>
    /// 
    /// </summary>
    [JsType(JsMode.Json)]
    public partial class AjaxSettings
    {
        /// <summary>
        /// Default: depends on DataType
        ///The content type sent in the request header that tells the server what kind of response it will accept in return. If the accepts setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
        /// </summary>
        public object accepts { get; set; }
        /// <summary>
        /// Default: true
        /// By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.
        /// </summary>
        public bool async { get; set; }
        /// <summary>
        /// Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).
        /// </summary>
        public object data { get; set; }
        /// <summary>
        /// A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings maps are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.
        /// </summary>
        public JsAction<XMLHttpRequest, AjaxSettings> beforeSend { get; set; }
        /// <summary>
        /// Default: true, false for dataType 'script' and 'jsonp'
        /// If set to false, it will force requested pages not to be cached by the browser. Setting cache to false also appends a query string parameter, "_=[TIMESTAMP]", to the URL.
        /// </summary>
        public bool cache { get; set; }
        /// <summary>
        /// A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event
        /// </summary>
        public JsAction<XMLHttpRequest, JsString> complete { get; set; }
        /// <summary>
        /// A map of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.
        /// </summary>
        public object contents { get; set; }
        /// <summary>
        /// Default: 'application/x-www-form-urlencoded'
        /// When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent). Data will always be transmitted to the server using UTF-8 charset; you must decode this appropriately on the server side.
        /// </summary>
        public JsString contentType { get; set; }
        /// <summary>
        /// This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so:
        /// <code>
        /// $.ajax({url: "test.html",context: document.body,success: function(){$(this).addClass("done");}});
        /// </code>
        /// </summary>
        public object context { get; set; }
        /// <summary>
        /// Default: {"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML}
        /// A map of dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.
        /// </summary>
        public object converters { get; set; }
        /// <summary>
        /// Default: false for same-domain requests, true for cross-domain requests
        ///If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain
        /// </summary>
        public bool crossDomain { get; set; }
        /// <summary>
        /// A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.
        /// </summary>
        public JsAction<object, JsString> dataFilter { get; set; }
        /// <summary>
        /// Default: Intelligent Guess (xml, json, script, or html)
        /// The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
        /// "xml": Returns a XML document that can be processed via jQuery.
        /// "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
        /// "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.
        /// "json": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)
        /// "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.
        /// "text": A plain text string.
        /// multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml." Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
        /// </summary>
        public JsString dataType { get; set; }
        /// <summary>
        /// A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and JSONP requests. This is an Ajax Event.
        /// </summary>
        public JsAction<XMLHttpRequest, JsString, JsError> error { get; set; }
        /// <summary>
        /// Default: true
        /// Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events
        /// </summary>
        public bool global { get; set; }
        /// <summary>
        /// Default: {}
        ///A map of additional header key/value pairs to send along with the request. This setting is set before the beforeSend function is called; therefore, any values in the headers setting can be overwritten from within the beforeSend function.
        /// </summary>
        public object headers { get; set; }
        /// <summary>
        /// Default: false
        /// Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data
        /// </summary>
        public bool ifModified { get; set; }
        /// <summary>
        /// Default: depends on current location protocol
        ///Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
        /// </summary>
        public bool isLocal { get; set; }
        /// <summary>
        /// Override the callback function name in a jsonp request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }
        /// </summary>
        public JsString jsonp { get; set; }
        /// <summary>
        /// Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.
        /// </summary>
        public JsAction jsonpCallback { get; set; }
        /// <summary>
        /// A mime type to override the XHR mime type.
        /// </summary>
        public JsString mimeType { get; set; }
        /// <summary>
        /// A password to be used in response to an HTTP access authentication request.
        /// </summary>
        public JsString password { get; set; }
        /// <summary>
        /// Default: true
        /// By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false
        /// </summary>
        public bool processData { get; set; }
        /// <summary>
        /// Only for requests with "jsonp" or "script" dataType and "GET" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.
        /// </summary>
        public JsString scriptCharset { get; set; }
        /// <summary>
        /// Default: {}
        ///A map of numeric HTTP codes and functions to be called when the response has the corresponding code. 
        /// </summary>
        /// <example>
        /// the following will alert when the response status is a 404:
        /// <code>
        /// $.ajax({statusCode: {404: function() {alert('page not found');}}});
        /// </code>
        /// <list type="note">
        /// If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error, they take the same parameters as the error callback.
        /// </list>
        /// </example>
        public object statusCode { get; set; }
        /// <summary>
        /// A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
        /// </summary>
        public JsAction<object, JsString, XMLHttpRequest> success { get; set; }
        /// <summary>
        /// Set a local timeout (in milliseconds) for the request. This will override the global timeout, if one is set with $.ajaxSetup(). For example, you could use this property to give a single request a longer timeout than all other requests that you've set to time out in one second. See $.ajaxSetup() for global timeouts. In jQuery 1.4.x and below, please note that the XMLHttpRequest object will be in an invalid state should the request time out. Where this is the case, accessing any object members may result in an exception being thrown. In jQuery 1.5.2 and above,$.ajax() does not handle JSONP requests as expected should the request fail due to a timeout in Firefox 3.0+. This is a browser-based issue due to FF currently not providing a way to abort cross-domain requests once the script tag has been appended. This issue does not currently affect other browsers.
        /// </summary>
        public JsNumber timeout { get; set; }
        /// <summary>
        /// Set this to true if you wish to use the traditional style of param serialization.
        /// </summary>
        public bool traditional { get; set; }
        /// <summary>
        /// Default: 'GET'
        /// The type of request to make ("POST" or "GET"), default is "GET". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.
        /// </summary>
        public JsString type { get; set; }
        /// <summary>
        /// Default: The current page
        /// A string containing the URL to which the request is sent.
        /// </summary>
        public JsString url { get; set; }
        /// <summary>
        /// A username to be used in response to an HTTP access authentication request.
        /// </summary>
        public JsString username { get; set; }
        /// <summary>
        /// Default: ActiveXObject when available (IE), the XMLHttpRequest otherwise
        /// Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.
        /// </summary>
        public JsAction xhr { get; set; }
        /// <summary>
        /// A map of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.
        /// </summary>
        /// <example>
        /// <code>
        /// $.ajax({url: a_cross_domain_url,xhrFields: {withCredentials: true}});
        /// </code>
        /// <list type=">bullet">
        /// In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.
        /// </list>
        /// </example>
        public object xhrFields { get; set; }
    }

    //[JsType(JsMode.Json)]
    //class Promise
    //{
    //}
    [JsType(JsMode.Json)]
    public class XMLDocument
    {
    }
    [JsType(JsMode.Json)]
    public class jqXHR
    {
        /// <summary>
        /// Retrieves the response body as a string.
        /// </summary>
        public JsString responseText { get; private set; }
        /// <summary>
        /// Retrieves the current state of the request operation.
        /// </summary>
        public JsNumber readyState { get; private set; }
        /// <summary>
        /// Retrieves the HTTP status code of the request.
        /// </summary>
        public JsNumber status { get; private set; }
        /// <summary>
        /// Retrieves the friendly HTTP status of the request.
        /// </summary>
        public JsString statusText { get; private set; }
        /// <summary>
        /// Adds custom HTTP headers to the request which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public void setRequestHeader(string name, string value) { }
        /// <summary>
        /// Cancels the current HTTP request.
        /// </summary>
        public void abort() { }
        /// <summary>
        /// Retrieves all response headers in a single string
        /// </summary>
        /// <returns></returns>
        public JsString getAllResponseHeaders() { return null; }
        /// <summary>
        /// Retrieves a response header value by name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public JsString getResponseHeader(string name) { return null; }
    }
    [JsType(JsMode.Json)]
    public partial class TopLeft
    {
        public JsNumber top { get; set; }
        public JsNumber left { get; set; }
    }

    /// <summary>
    /// SharpKit.jQuery namespace contains all jQuery core framework APIs
    /// </summary>
    class NamespaceDoc
    {
    }

}
