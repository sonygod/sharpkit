//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region SortTypes
    /// <summary>
    /// This class defines a series of static methods that are used on a
    /// Ext.data.Field for performing sorting. The methods cast the
    /// underlying values into a data type that is appropriate for sorting on
    /// that particular field.  If a Ext.data.Field.type is specified,
    /// the sortType will be set to a sane default if the sortType is not
    /// explicitly defined on the field. The sortType will make any necessary
    /// modifications to the value and return it.  asText - Removes any tags and converts the value to a string asUCText - Removes any tags and converts the value to an uppercase string asUCText - Converts the value to an uppercase string asDate - Converts the value into Unix epoch time asFloat - Converts the value to a floating point number asInt - Converts the value to an integer number
    /// It is also possible to create a custom sortType that can be used throughout
    /// an application.
    /// Ext.apply(Ext.data.SortTypes, {
    /// asPerson: function(person){
    /// // expects an object with a first and last name property
    /// return person.lastName.toUpperCase() + person.firstName.toLowerCase();
    /// }
    /// });
    /// Ext.define(&#39;Employee&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [{
    /// name: &#39;person&#39;,
    /// sortType: &#39;asPerson&#39;
    /// }, {
    /// name: &#39;salary&#39;,
    /// type: &#39;float&#39; // sortType set to asFloat
    /// }]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SortTypes : Ext.Base
    {
        /// <summary>
        /// Date sorting ...
        /// </summary>
        public JsNumber asDate(object s){return null;}
        /// <summary>
        /// Float sorting ...
        /// </summary>
        public JsNumber asFloat(object s){return null;}
        /// <summary>
        /// Integer sorting ...
        /// </summary>
        public JsNumber asInt(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only ...
        /// </summary>
        public JsString asText(object s){return null;}
        /// <summary>
        /// Case insensitive string ...
        /// </summary>
        public JsString asUCString(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only - Case insensitive ...
        /// </summary>
        public JsString asUCText(object s){return null;}
        /// <summary>
        /// Default sort that does nothing ...
        /// </summary>
        public object none(object s){return null;}
        public JsRegExp stripTagsRE{get;set;}
        public SortTypes(SortTypesConfig config){}
        public SortTypes(){}
    }
    #endregion
    #region SortTypesConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SortTypesConfig : Ext.BaseConfig
    {
    }
    #endregion
    #region SortTypesEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class SortTypesEvents : Ext.BaseEvents
    {
    }
    #endregion
}
#endregion
