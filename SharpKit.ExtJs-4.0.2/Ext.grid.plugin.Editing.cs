//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.grid.plugin
namespace Ext.grid.plugin
{
    #region Editing
    /// <summary>
    /// This class provides an abstract grid editing plugin on selected columns.
    /// The editable columns are specified by providing an editor
    /// in the column configuration. Note:* This class should not be used directly. See Ext.grid.plugin.CellEditing and
    /// Ext.grid.plugin.RowEditing.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Editing : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Cancel any active edit that is in progress. ...
        /// </summary>
        public object cancelEdit(){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Complete the edit if there is an active edit in progress. ...
        /// </summary>
        public object completeEdit(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
    }
    #endregion
    #region EditingConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class EditingConfig
    {
        public JsNumber clicksToEdit{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region EditingEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class EditingEvents
    {
    }
    #endregion
}
#endregion
