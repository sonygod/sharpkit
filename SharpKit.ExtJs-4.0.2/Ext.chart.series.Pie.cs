//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.series
namespace Ext.chart.series
{
    #region Pie
    /// <summary>
    /// Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different
    /// categories that also have a meaning as a whole.
    /// As with all other series, the Pie Series must be appended in the series Chart array configuration. See the Chart
    /// documentation for more information. A typical configuration object for the pie series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
    /// fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// data: [
    /// {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
    /// {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
    /// {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
    /// {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
    /// {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
    /// ]
    /// });
    /// Ext.create(&#39;Ext.chart.Chart&#39;, {
    /// renderTo: Ext.getBody(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// theme: &#39;Base:gradients&#39;,
    /// series: [{
    /// type: &#39;pie&#39;,
    /// field: &#39;data1&#39;,
    /// showInLegend: true,
    /// tips: {
    /// trackMouse: true,
    /// width: 140,
    /// height: 28,
    /// renderer: function(storeItem, item) {
    /// //calculate and display percentage on hover
    /// var total = 0;
    /// store.each(function(rec) {
    /// total += rec.get(&#39;data1&#39;);
    /// });
    /// this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + Math.round(storeItem.get(&#39;data1&#39;) / total * 100) + &#39;%&#39;);
    /// }
    /// },
    /// highlight: {
    /// segment: {
    /// margin: 20
    /// }
    /// },
    /// label: {
    /// field: &#39;name&#39;,
    /// display: &#39;rotate&#39;,
    /// contrast: true,
    /// font: &#39;18px Arial&#39;
    /// }
    /// }]
    /// });
    /// In this configuration we set pie as the type for the series, set an object with specific style properties for highlighting options
    /// (triggered when hovering elements). We also set true to showInLegend so all the pie slices can be represented by a legend item.
    /// We set data1 as the value of the field to determine the angle span for each pie slice. We also set a label configuration object
    /// where we set the field name of the store field to be renderer as text for the label. The labels will also be displayed rotated.
    /// We set contrast to true to flip the color of the label if it is to similar to the background color. Finally, we set the font family
    /// and size through the font parameter.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Pie : Series, Ext.util.Observable, Ext.chart.Label, Highlight, Ext.chart.Tip, Callout
    {
        /// <summary>
        /// Draws the series for the current chart. ...
        /// </summary>
        public object drawSeries(){return null;}
    }
    #endregion
    #region PieConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PieConfig
    {
        /// <summary>
        /// The store record field name to be used for the pie angles. ...
        /// </summary>
        public JsString angleField{get;set;}
        public JsArray colorSet{get;set;}
        /// <summary>
        /// Whether to set the pie chart as donut chart. ...
        /// </summary>
        public object donut{get;set;}
        public JsNumber highlightDuration{get;set;}
        /// <summary>
        /// The store record field name to be used for the pie slice lengths. ...
        /// </summary>
        public JsString lengthField{get;set;}
        /// <summary>
        /// Whether to add the pie chart elements as legend items. ...
        /// </summary>
        public bool showInLegend{get;set;}
        public object style{get;set;}
    }
    #endregion
    #region PieEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class PieEvents
    {
    }
    #endregion
}
#endregion
