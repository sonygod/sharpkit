//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region ExtContext
    /// <summary>
    /// The Ext namespace (global object) encapsulates all classes, singletons, and utility methods provided by Sencha&#39;s libraries.
    /// Most user interface Components are at a lower level of nesting in the namespace, but many common utility functions are provided
    /// as direct properties of the Ext namespace.  Also many frequently used methods from other classes are provided as shortcuts within the Ext namespace.
    /// For example Ext.getCmp aliases Ext.ComponentManager.get.  Many applications are initiated with Ext.onReady which is called once the DOM is ready.
    /// This ensures all scripts have been loaded, preventing dependency issues. For example  Ext.onReady(function(){
    /// new Ext.Component({
    /// renderTo: document.body,
    /// html: &#39;DOM ready!&#39;
    /// });
    /// });
    /// For more information about how to use the Ext classes, see  The Learning Center The FAQ The forums
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, Name="Ext")]
    public partial class ExtContext : JsContext
    {
        /// <summary>
        /// Applies event listeners to elements by selectors when the document is ready. ...
        /// </summary>
        public static object addBehaviors(object obj){return null;}
        /// <summary>
        /// Loads Ext.app.Application class and starts it up with given configuration after the page is ready. ...
        /// </summary>
        public static object application(object config){return null;}
        /// <summary>
        /// Copies all the properties of config to the specified object. ...
        /// </summary>
        public static object apply(object @object, object config, object defaults){return null;}
        /// <summary>
        /// Copies all the properties of config to the specified object. ...
        /// </summary>
        public static object apply( object @object, object config ) { return null; }
        /// <summary>
        /// Copies all the properties of config to object if they don't already exist. ...
        /// </summary>
        public static object applyIf(object @object, object config){return null;}
        /// <summary>
        /// Create a new function from the provided fn, change this to the provided scope, optionally
        /// overrides arguments for the...
        /// </summary>
        public static JsAction bind(JsAction fn, object scope=null, JsArray args=null, object appendArgs=null){return null;}
        /// <summary>
        /// Execute a callback function in a particular scope. ...
        /// </summary>
        public static object callback(JsAction callback, object scope=null, JsArray args=null, JsNumber delay=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.clean
        /// Filter through an array and remove empty item as defined in Ext.isEmpty
        /// See Ext.Array....
        /// </summary>
        public static JsArray clean(JsArray array){return null;}
        /// <summary>
        /// Clone almost any type of variable including array, object, DOM nodes and Date without keeping the old reference ...
        /// </summary>
        public static object clone(object item){return null;}
        /// <summary>
        /// Copies a set of named properties fom the source object to the destination object. ...
        /// </summary>
        public static object copyTo(object dest, object source, object names, bool usePrototypeKeys){return null;}
        /// <summary>
        /// Instantiate a class by either full name, alias or alternate name. ...
        /// </summary>
        public static object create(JsString name, object args){return null;}
        /// <summary>
        /// Instantiate a class by either full name, alias or alternate name. ...
        /// </summary>
        public static object create( JsString name ) { return null; }
        /// <summary>
        /// Instantiate a class by its alias. ...
        /// </summary>
        public static object createByAlias(JsString alias, object args){return null;}
        /// <summary>
        /// Old name for widget. ...
        /// </summary>
        public static object createWidget(JsString name){return null;}
        /// <summary>
        /// Shorthand for Ext.JSON.decode ...
        /// </summary>
        public static object decode(JsString json, bool safe=false){return null;}
        /// <summary>
        /// Calls this function after the number of millseconds specified, optionally in a specific scope. ...
        /// </summary>
        public static JsNumber defer(JsAction fn, JsNumber millis, object scope=null, JsArray args=null, object appendArgs=null){return null;}
        /// <summary>
        /// Defines a class. ...
        /// </summary>
        public static Ext.Base define(JsString className, object data, JsAction createdFn){return null;}
        /// <summary>
        /// Defines a class. ...
        /// </summary>
        public static Ext.Base define( JsString className, object data ) { return null; }
        /// <summary>
        /// Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
        /// DOM (if applicab...
        /// </summary>
        public static object destroy(object arg1, object arg2=null, object etc=null){return null;}
        /// <summary>
        /// Attempts to destroy and then remove a set of named properties of the passed object. ...
        /// </summary>
        public static object destroyMembers(object o, object arg1, object etc){return null;}
        /// <summary>
        /// Iterates an array or an iterable value and invoke the given callback function for each item. ...
        /// </summary>
        public static bool each( object iterable, System.Delegate fn, object scope, bool reverse ) { return false; }

        /// <summary>
        /// Iterates an array or an iterable value and invoke the given callback function for each item. ...
        /// </summary>
        public static bool each( object iterable, System.Delegate fn ) { return false; }
        /// <summary>
        /// A reusable empty function ...
        /// </summary>
        public static object emptyFn(){return null;}
        /// <summary>
        /// Shorthand for Ext.JSON.encode ...
        /// </summary>
        public static JsString encode(object o){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression ...
        /// </summary>
        public static JsString escapeRe(JsString str){return null;}
        /// <summary>
        /// Explicitly exclude files from being loaded. ...
        /// </summary>
        public static object exclude(object excludes){return null;}
        /// <summary>
        /// This method deprecated. ...
        /// </summary>
        public static JsAction extend(JsAction superclass, object overrides){return null;}
        /// <summary>
        /// Old alias to Ext.Array.flatten
        /// Recursively flattens into 1-d Array. ...
        /// </summary>
        public static object flatten(object array){return null;}
        /// <summary>
        /// Gets the globally shared flyweight Element, with the passed node as the active element. ...
        /// </summary>
        public static Ext.Element fly(object el, JsString named=null){return null;}
        /// <summary>
        /// Retrieves Ext.core.Element objects. ...
        /// </summary>
        public static Ext.Element get(object el){return null;}
        /// <summary>
        /// Returns the current document body as an Ext.core.Element. ...
        /// </summary>
        public static Element getBody(){return null;}
        /// <summary>
        /// Get the class of the provided object; returns null if it's not an instance
        /// of any class created with Ext.define. ...
        /// </summary>
        public static Class getClass(object @object){return null;}
        /// <summary>
        /// Get the name of the class by its reference or its instance. ...
        /// </summary>
        public static JsString getClassName(object @object){return null;}
        /// <summary>
        /// This is shorthand reference to Ext.ComponentManager.get. ...
        /// </summary>
        public static object getCmp(JsString id){return null;}
        /// <summary>
        /// Returns the current HTML document object as an Ext.core.Element. ...
        /// </summary>
        public static object getDoc(){return null;}
        /// <summary>
        /// Return the dom node for the passed String (id), dom node, or Ext.core.Element. ...
        /// </summary>
        public static object getDom(object el, object strict){return null;}
        /// <summary>
        /// Returns the current document head as an Ext.core.Element. ...
        /// </summary>
        public static object getHead(){return null;}
        /// <summary>
        /// Returns the current orientation of the mobile device ...
        /// </summary>
        public static JsString getOrientation(){return null;}
        /// <summary>
        /// Utility method for getting the width of the browser's vertical scrollbar. ...
        /// </summary>
        public static JsNumber getScrollBarWidth(bool force=false){return null;}
        /// <summary>
        /// Returns the size of the browser scrollbars. ...
        /// </summary>
        public static object getScrollbarSize(bool force=false){return null;}
        /// <summary>
        /// Gets a registered Store by id (shortcut to Ext.data.StoreManager.lookup) ...
        /// </summary>
        public static Ext.data.Store getStore(object id){return null;}
        /// <summary>
        /// Convert certain characters (&amp;, &lt;, >, and ') from their HTML character equivalents. ...
        /// </summary>
        public static JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Convert certain characters (&amp;, &lt;, >, and ') to their HTML character equivalents for literal display in web pages. ...
        /// </summary>
        public static JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Generates unique ids. ...
        /// </summary>
        public static JsString id(object el=null, JsString prefix=null){return null;}
        /// <summary>
        /// Invokes a method on each item in an Array. ...
        /// </summary>
        public static JsArray invoke(object arr, JsString methodName, object args){return null;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Array, false otherwise. ...
        /// </summary>
        public static bool isArray(object target){return false;}
        /// <summary>
        /// Returns true if the passed value is a boolean. ...
        /// </summary>
        public static bool isBoolean(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Date object, false otherwise. ...
        /// </summary>
        public static bool isDate(object @object){return false;}
        /// <summary>
        /// Returns true if the passed value is defined. ...
        /// </summary>
        public static bool isDefined(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is an HTMLElement ...
        /// </summary>
        public static bool isElement(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is empty, false otherwise. ...
        /// </summary>
        public static bool isEmpty(object value, bool allowEmptyString=false){return false;}
        /// <summary>
        /// Returns true if the passed value is empty, false otherwise. ...
        /// </summary>
        public static bool isEmpty( object value ) { return false; }
        /// <summary>
        /// Returns true if the passed value is a JavaScript Function, false otherwise. ...
        /// </summary>
        public static bool isFunction(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is iterable, false otherwise ...
        /// </summary>
        public static bool isIterable(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a number. ...
        /// </summary>
        public static bool isNumber(object value){return false;}
        /// <summary>
        /// Validates that a value is numeric. ...
        /// </summary>
        public static bool isNumeric(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Object, false otherwise. ...
        /// </summary>
        public static bool isObject(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean. ...
        /// </summary>
        public static bool isPrimitive(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a string. ...
        /// </summary>
        public static bool isString(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a TextNode ...
        /// </summary>
        public static bool isTextNode(object value){return false;}
        /// <summary>
        /// Iterates either an array or an object. ...
        /// </summary>
        public static object iterate(object @object, JsAction fn, object scope){return null;}
        /// <summary>
        /// Logs a message. ...
        /// </summary>
        public static object log(object message){return null;}
        /// <summary>
        /// Old alias to Ext.Array.max
        /// Returns the maximum value in the Array. ...
        /// </summary>
        public static object max(object array, JsAction comparisonFn=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.mean
        /// Calculates the mean of all items in the array. ...
        /// </summary>
        public static JsNumber mean(JsArray array){return null;}
        /// <summary>
        /// A convenient alias method for Ext.Object.merge ...
        /// </summary>
        public static object merge(){return null;}
        /// <summary>
        /// Old alias to Ext.Array.min
        /// Returns the minimum value in the Array. ...
        /// </summary>
        public static object min(object array, JsAction comparisonFn=null){return null;}
        /// <summary>
        /// Creates namespaces to be used for scoping variables and classes so that they are not global. ...
        /// </summary>
        public static object @namespace( params JsString[] namespaces ) { return null; }
        /// <summary>
        /// Convenient alias for Ext.namespace
        /// Creates namespaces to be used for scoping variables and classes so that they are ...
        /// </summary>
        public static object ns(params JsString[] namespaces){return null;}
        /// <summary>
        /// This method is deprecated, please use Ext.Number.from instead ...
        /// </summary>
        public static object num(){return null;}
        /// <summary>
        /// Alias for Ext.EventManager.onDocumentReady ...
        /// </summary>
        public static object onDocumentReady(){return null;}
        /// <summary>
        /// Adds new listener to be executed when all required scripts are fully loaded. ...
        /// </summary>
        public static object onReady(JsAction fn, object scope, bool withDomReady, object options){return null;}
        /// <summary>
        /// Proxy to Ext.Base.override. ...
        /// </summary>
        public static object @override<T>(object overrides){return null;}
        /// <summary>
        /// Partitions the set into two sets: a true set and a false set. ...
        /// </summary>
        public static JsArray partition(object arr, JsAction truth=null){return null;}
        /// <summary>
        /// Create a new function from the provided fn, the arguments of which are pre-set to args. ...
        /// </summary>
        public static JsAction pass(JsAction fn, JsArray args, object scope=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.pluck
        /// Plucks the value of a property from each item in the Array. ...
        /// </summary>
        public static JsArray pluck(object array, JsString propertyName){return null;}
        /// <summary>
        /// Shorthand for Ext.PluginManager.registerType ...
        /// </summary>
        public static object preg(JsString ptype, Constructor cls){return null;}
        /// <summary>
        /// Selects an array of DOM nodes by CSS/XPath selector. ...
        /// </summary>
        public static JsArray query(JsString path, Node root=null){return null;}
        /// <summary>
        /// Creates a new Model class from the specified config object. ...
        /// </summary>
        public static Ext.data.Model regModel(object config){return null;}
        /// <summary>
        /// Creates a new store for the given id and config, then registers it with the Store Mananger. ...
        /// </summary>
        public static object regStore(JsString id, object config, Constructor cls){return null;}
        /// <summary>
        /// Removes a DOM node from the document. ...
        /// </summary>
        public static object removeNode(HTMLElement node){return null;}
        /// <summary>
        /// Loads all classes by the given names and all their direct dependencies;
        /// optionally executes the given callback functi...
        /// </summary>
        public static object require(object expressions, JsAction fn, object scope, object excludes){return null;}
        /// <summary>
        /// Loads all classes by the given names and all their direct dependencies;
        /// optionally executes the given callback functi...
        /// </summary>
        public static object require( object expressions, JsAction fn, object scope ) { return null; }
        /// <summary>
        /// Loads all classes by the given names and all their direct dependencies;
        /// optionally executes the given callback functi...
        /// </summary>
        public static object require( object expressions, JsAction fn ) { return null; }
        /// <summary>
        /// Loads all classes by the given names and all their direct dependencies;
        /// optionally executes the given callback functi...
        /// </summary>
        public static object require( object expressions ) { return null; }
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable Element methods
        /// to be applied to many related elements in...
        /// </summary>
        public static object select(object selector, bool unique=false, object root=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.sum
        /// Calculates the sum of all items in the given array. ...
        /// </summary>
        public static JsNumber sum(JsArray array){return null;}
        /// <summary>
        /// Synchronously loads all classes by the given names and all their direct dependencies;
        /// optionally executes the given c...
        /// </summary>
        public static object syncRequire(object expressions, JsAction fn, object scope, object excludes){return null;}
        /// <summary>
        /// Converts any iterable (numeric indices and a length property) into a true array. ...
        /// </summary>
        public static JsArray toArray(object iterable, JsNumber start, JsNumber end){return null;}
        /// <summary>
        /// Turns an array into a sentence, joined by a specified connector - e.g.:
        /// Ext.toSentence(['Adama', 'Tigh', 'Roslin']); ...
        /// </summary>
        public static JsString toSentence(JsArray items, JsString connector){return null;}
        /// <summary>
        /// Old alias to typeOf
        /// Returns the type of the given variable in string format. ...
        /// </summary>
        public static JsString type(object value){return null;}
        /// <summary>
        /// Returns the type of the given variable in string format. ...
        /// </summary>
        public static JsString typeOf(object value){return null;}
        /// <summary>
        /// Old alias to Ext.Array.unique
        /// Returns a new array with unique items ...
        /// </summary>
        public static JsArray unique(JsArray array){return null;}
        /// <summary>
        /// Appends content to the query string of a URL, handling logic for whether to place
        /// a question mark or ampersand. ...
        /// </summary>
        public static JsString urlAppend( JsString url, JsString s ) { return null; }
        /// <summary>
        /// A convenient alias method for Ext.Object.fromQueryString ...
        /// </summary>
        public static object urlDecode(){return null;}
        /// <summary>
        /// A convenient alias method for Ext.Object.toQueryString ...
        /// </summary>
        public static object urlEncode(){return null;}
        /// <summary>
        /// Utility method for returning a default value if the passed value is empty. ...
        /// </summary>
        public static object value(object value, object defaultValue, bool allowBlank=false){return null;}
        /// <summary>
        /// Returns the given value itself if it's not empty, as described in isEmpty; returns the default
        /// value (second argument...
        /// </summary>
        public static object valueFrom(object value, object defaultValue, bool allowBlank=false){return null;}
        /// <summary>
        /// Convenient shorthand to create a widget by its xtype, also see Ext.ClassManager.instantiateByAlias
        /// var button = Ext....
        /// </summary>
        public static object widget(JsString name){return null;}
        /// <summary>
        /// Zips N sets together. ...
        /// </summary>
        public static JsArray zip(object arr, JsAction zipper=null){return null;}
        /// <summary>
        /// URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. ...
        /// </summary>
        public static JsString BLANK_IMAGE_URL{get;set;}
        /// <summary>
        /// URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
        /// the IE insecure content...
        /// </summary>
        public static JsString SSL_SECURE_URL{get;set;}
        /// <summary>
        /// Indicates whether to use native browser parsing for JSON methods. ...
        /// </summary>
        public static bool USE_NATIVE_JSON{get;set;}
        public static bool enableFx{get;set;}
        public static bool enableGarbageCollector{get;set;}
        public static bool enableListenerCollection{get;set;}
        /// <summary>
        /// EXPERIMENTAL - True to cascade listener removal to child elements when an element is removed. ...
        /// </summary>
        public static bool enableNestedListenerRemoval{get;set;}
        public static JsArray enumerables{get;set;}
        public static bool isChrome{get;set;}
        public static bool isFF3_0{get;set;}
        public static bool isFF3_5{get;set;}
        public static bool isFF3_6{get;set;}
        /// <summary>
        /// True if the detected browser uses the Gecko layout engine (e.g. ...
        /// </summary>
        public static bool isGecko{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 1.9+ layout engine (e.g. ...
        /// </summary>
        public static bool isGecko3{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 2.0+ layout engine (e.g. ...
        /// </summary>
        public static bool isGecko4{get;set;}
        public static bool isIE{get;set;}
        public static bool isIE6{get;set;}
        public static bool isIE7{get;set;}
        public static bool isIE8{get;set;}
        public static bool isIE9{get;set;}
        public static bool isLinux{get;set;}
        public static bool isMac{get;set;}
        public static bool isOpera{get;set;}
        public static bool isOpera10_5{get;set;}
        public static bool isReady{get;set;}
        public static bool isSafari{get;set;}
        public static bool isSafari2{get;set;}
        public static bool isSafari3{get;set;}
        public static bool isSafari4{get;set;}
        public static bool isWebKit{get;set;}
        public static bool isWindows{get;set;}
        /// <summary>
        /// True to scope the reset CSS to be just applied to Ext components. ...
        /// </summary>
        public static bool scopeResetCSS{get;set;}
        /// <summary>
        /// By default, Ext intelligently decides whether floating elements should be shimmed. ...
        /// </summary>
        public static bool useShims{get;set;}
        public static JsNumber webKitVersion{get;set;}
        public ExtContext(ExtContextConfig config){}
        public ExtContext(){}
        public static direct.Provider Direct { get; set; }
    }
    #endregion
    #region ExtContextConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ExtContextConfig
    {
    }
    #endregion
    #region ExtContextEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ExtContextEvents
    {
    }
    #endregion
}
#endregion
