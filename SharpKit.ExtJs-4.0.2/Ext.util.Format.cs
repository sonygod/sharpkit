//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region Format
    /// <summary>
    /// This class is a centralized place for formatting functions inside the library. It includes
    /// functions to format various different types of data, such as text, dates and numeric values. Localization
    /// This class contains several options for localization. These can be set once the library has loaded,
    /// all calls to the functions from that point will use the locale settings that were specified.
    /// Options include:
    /// - thousandSeparator
    /// - decimalSeparator
    /// - currenyPrecision
    /// - currencySign
    /// - currencyAtEnd
    /// This class also uses the default date format defined here: Ext.Date.defaultFormat. Using with renderers
    /// There are two helper functions that return a new function that can be used in conjunction with
    /// grid renderers: columns: [{
    /// dataIndex: &#39;date&#39;,
    /// renderer: Ext.util.Format.dateRenderer(&#39;Y-m-d&#39;)
    /// }, {
    /// dataIndex: &#39;time&#39;,
    /// renderer: Ext.util.Format.numberRenderer(&#39;0.000&#39;)
    /// }]
    /// Functions that only take a single argument can also be passed directly: columns: [{
    /// dataIndex: &#39;cost&#39;,
    /// renderer: Ext.util.Format.usMoney
    /// }, {
    /// dataIndex: &#39;productCode&#39;,
    /// renderer: Ext.util.Format.uppercase
    /// }]
    /// Using with XTemplates
    /// XTemplates can also directly use Ext.util.Format functions: new Ext.XTemplate([
    /// &#39;Date: {startDate:date(&quot;Y-m-d&quot;)}&#39;,
    /// &#39;Cost: {cost:usMoney}&#39;
    /// ]);
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Format
    {
        /// <summary>
        /// Capitalize the given string. ...
        /// </summary>
        public static object capitalize(){return null;}
        /// <summary>
        /// Format a number as a currency ...
        /// </summary>
        public static JsString currency(object value, JsString sign, JsNumber decimals, bool end){return null;}
        /// <summary>
        /// Formats the passed date using the specified format pattern. ...
        /// </summary>
        public static JsString date(object value, JsString format){return null;}
        /// <summary>
        /// Returns a date rendering function that can be reused to apply a date format multiple times efficiently ...
        /// </summary>
        public static JsAction dateRenderer(JsString format){return null;}
        /// <summary>
        /// Checks a reference and converts it to the default value if it's empty ...
        /// </summary>
        public static JsString defaultValue(object value, JsString defaultValue){return null;}
        /// <summary>
        /// Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length. ...
        /// </summary>
        public static object ellipsis(){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression ...
        /// </summary>
        public static JsString escapeRegex(JsString str){return null;}
        /// <summary>
        /// Simple format for a file size (xxx bytes, xxx KB, xxx MB) ...
        /// </summary>
        public static JsString fileSize(object size){return null;}
        /// <summary>
        /// Formats to a string. ...
        /// </summary>
        public static object format(){return null;}
        /// <summary>
        /// Convert certain characters (&amp;, &lt;, >, and ') from their HTML character equivalents. ...
        /// </summary>
        public static object htmlDecode(){return null;}
        /// <summary>
        /// Convert certain characters (&amp;, &lt;, >, and ') to their HTML character equivalents for literal display in web pages. ...
        /// </summary>
        public static object htmlEncode(){return null;}
        /// <summary>
        /// Adds left padding to a string. ...
        /// </summary>
        public static object leftPad(){return null;}
        /// <summary>
        /// Converts a string to all lower case letters ...
        /// </summary>
        public static JsString lowercase(JsString value){return null;}
        /// <summary>
        /// It does simple math for use in a template, for example:
        /// var tpl = new Ext.Template('{value} * 10 = {value:math("* 10...
        /// </summary>
        public static JsAction math(){return null;}
        /// <summary>
        /// Converts newline characters to the HTML tag &lt;br/> ...
        /// </summary>
        public static JsString nl2br(JsString The){return null;}
        /// <summary>
        /// Formats the passed number according to the passed format string. ...
        /// </summary>
        public static JsString number(JsNumber v, JsString format){return null;}
        /// <summary>
        /// Returns a number rendering function that can be reused to apply a number format multiple times efficiently ...
        /// </summary>
        public static JsAction numberRenderer(JsString format){return null;}
        /// <summary>
        /// Parses a number or string representing margin sizes into an object. ...
        /// </summary>
        public static object parseBox(object v){return null;}
        /// <summary>
        /// Selectively do a plural form of a word based on a numeric value. ...
        /// </summary>
        public static object plural(JsNumber value, JsString singular, JsString plural=null){return null;}
        /// <summary>
        /// Rounds the passed number to the required decimal precision. ...
        /// </summary>
        public static JsNumber round(object value, JsNumber precision){return null;}
        /// <summary>
        /// Strips all script tags ...
        /// </summary>
        public static JsString stripScripts(object value){return null;}
        /// <summary>
        /// Strips all HTML tags ...
        /// </summary>
        public static JsString stripTags(object value){return null;}
        /// <summary>
        /// Returns a substring from within an original string ...
        /// </summary>
        public static JsString substr(JsString value, JsNumber start, JsNumber length){return null;}
        /// <summary>
        /// Trims any whitespace from either side of a string. ...
        /// </summary>
        public static object trim(){return null;}
        /// <summary>
        /// Checks a reference and converts it to empty string if it is undefined ...
        /// </summary>
        public static object undef(object value){return null;}
        /// <summary>
        /// Converts a string to all upper case letters ...
        /// </summary>
        public static JsString uppercase(JsString value){return null;}
        /// <summary>
        /// Format a number as US currency ...
        /// </summary>
        public static JsString usMoney(object value){return null;}
        /// <summary>
        /// This may be set to true to make the currency function
        /// append the currency sign to the formatted value. ...
        /// </summary>
        public static bool currencyAtEnd{get;set;}
        /// <summary>
        /// The number of decimal places that the currency function displays. ...
        /// </summary>
        public static JsNumber currencyPrecision{get;set;}
        /// <summary>
        /// The currency sign that the currency function displays. ...
        /// </summary>
        public static JsString currencySign{get;set;}
        /// <summary>
        /// The character that the number function uses as a decimal point. ...
        /// </summary>
        public static JsString decimalSeparator{get;set;}
        /// <summary>
        /// The character that the number function uses as a thousand separator. ...
        /// </summary>
        public static JsString thousandSeparator{get;set;}
        public Format(FormatConfig config){}
        public Format(){}
    }
    #endregion
    #region FormatConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FormatConfig
    {
    }
    #endregion
    #region FormatEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class FormatEvents
    {
    }
    #endregion
}
#endregion
