//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data.proxy
namespace Ext.data.proxy
{
    #region JsonP
    /// <summary>
    /// JsonPProxy is useful when you need to load data from a domain other than the one your application is running
    /// on. If your application is running on http://domainA.com it cannot use Ajax to load its
    /// data from http://domainB.com because cross-domain ajax requests are prohibited by the browser. We can get around this using a JsonPProxy. JsonPProxy injects a &amp;lt;script&amp;gt; tag into the DOM whenever
    /// an AJAX request would usually be made. Let&#39;s say we want to load data from http://domainB.com/users - the script tag
    /// that would be injected might look like this: &amp;lt;script src=&quot;http://domainB.com/users?callback=someCallback&quot;&amp;gt;&amp;lt;/script&amp;gt;
    /// When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
    /// other type of JavaScript include. By passing a callback in the url above, we&#39;re telling domainB&#39;s server that we
    /// want to be notified when the result comes in and that it should call our callback function with the data it sends
    /// back. So long as the server formats the response to look like this, everything will work: someCallback({
    /// users: [
    /// {
    /// id: 1,
    /// name: &quot;Ed Spencer&quot;,
    /// email: &quot;ed@sencha.com&quot;
    /// }
    /// ]
    /// });
    /// As soon as the script finishes loading, the &#39;someCallback&#39; function that we passed in the url is called with the
    /// JSON object that the server returned. JsonPProxy takes care of all of this automatically. It formats the url you pass, adding the callback
    /// parameter automatically. It even creates a temporary callback function, waits for it to be called and then puts
    /// the data into the Proxy making it look just like you loaded it through a normal AjaxProxy.
    /// Here&#39;s how we might set that up: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;]
    /// });
    /// var store = new Ext.data.Store({
    /// model: &#39;User&#39;,
    /// proxy: {
    /// type: &#39;jsonp&#39;,
    /// url : &#39;http://domainB.com/users&#39;
    /// }
    /// });
    /// store.load();
    /// That&#39;s all we need to do - JsonPProxy takes care of the rest. In this case the Proxy will have injected a
    /// script tag like this:
    /// &amp;lt;script src=&quot;http://domainB.com/users?callback=stcCallback001&quot; id=&quot;stcScript001&quot;&amp;gt;&amp;lt;/script&amp;gt;
    /// Customization Most parts of this script tag can be customized using the callbackParam, callbackPrefix and
    /// scriptIdPrefix configurations. For example:
    /// var store = new Ext.data.Store({
    /// model: &#39;User&#39;,
    /// proxy: {
    /// type: &#39;jsonp&#39;,
    /// url : &#39;http://domainB.com/users&#39;,
    /// callbackParam: &#39;theCallbackFunction&#39;,
    /// callbackPrefix: &#39;ABC&#39;,
    /// scriptIdPrefix: &#39;injectedScript&#39;
    /// }
    /// });
    /// store.load();
    /// Would inject a script tag like this: &amp;lt;script src=&quot;http://domainB.com/users?theCallbackFunction=ABC001&quot; id=&quot;injectedScript001&quot;&amp;gt;&amp;lt;/script&amp;gt;
    /// Implementing on the server side The remote server side needs to be configured to return data in this format. Here are suggestions for how you
    /// might achieve this using Java, PHP and ASP.net: Java: boolean jsonP = false;
    /// String cb = request.getParameter(&quot;callback&quot;);
    /// if (cb != null) {
    /// jsonP = true;
    /// response.setContentType(&quot;text/javascript&quot;);
    /// } else {
    /// response.setContentType(&quot;application/x-json&quot;);
    /// }
    /// Writer out = response.getWriter();
    /// if (jsonP) {
    /// out.write(cb + &quot;(&quot;);
    /// }
    /// out.print(dataBlock.toJsonString());
    /// if (jsonP) {
    /// out.write(&quot;);&quot;);
    /// }
    /// PHP: $callback = $_REQUEST[&#39;callback&#39;];
    /// // Create the output object.
    /// $output = array(&#39;a&#39; =&gt; &#39;Apple&#39;, &#39;b&#39; =&gt; &#39;Banana&#39;);
    /// //start output
    /// if ($callback) {
    /// header(&#39;Content-Type: text/javascript&#39;);
    /// echo $callback . &#39;(&#39; . json_encode($output) . &#39;);&#39;;
    /// } else {
    /// header(&#39;Content-Type: application/x-json&#39;);
    /// echo json_encode($output);
    /// }
    /// ASP.net: String jsonString = &quot;{success: true}&quot;;
    /// String cb = Request.Params.Get(&quot;callback&quot;);
    /// String responseString = &quot;&quot;;
    /// if (!String.IsNullOrEmpty(cb)) {
    /// responseString = cb + &quot;(&quot; + jsonString + &quot;)&quot;;
    /// } else {
    /// responseString = jsonString;
    /// }
    /// Response.Write(responseString);
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonP : Server, Ext.util.Observable
    {
        /// <summary>
        /// Aborts the current server request if one is currently running ...
        /// </summary>
        public object abort(){return null;}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. ...
        /// </summary>
        public new JsString buildUrl(Request request){return null;}
        /// <summary>
        /// Encodes an array of records into a string suitable to be appended to the script src url. ...
        /// </summary>
        public JsString encodeRecords(JsArray records){return null;}
        public JsonP(Ext.data.proxy.JsonPConfig config){}
        public JsonP(){}
    }
    #endregion
    #region JsonPConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonPConfig : ServerConfig
    {
        /// <summary>
        /// True to automatically append the request's params to the generated url. ...
        /// </summary>
        public bool autoAppendParams{get;set;}
        public JsString callbackKey{get;set;}
        /// <summary>
        /// The param name to use when passing records to the server (e.g. ...
        /// </summary>
        public JsString recordParam{get;set;}
    }
    #endregion
    #region JsonPEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonPEvents : ServerEvents
    {
        /// <summary>
        /// Fires when the server returns an exception ...
        /// </summary>
        public static new JsString exception="exception";
    }
    #endregion
}
#endregion
