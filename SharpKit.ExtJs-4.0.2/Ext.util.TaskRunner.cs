//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:55
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region TaskRunner
    /// <summary>
    /// Provides the ability to execute one or more arbitrary tasks in a multithreaded
    /// manner.  Generally, you can use the singleton Ext.TaskManager instead, but
    /// if needed, you can create separate instances of TaskRunner.  Any number of
    /// separate tasks can be started at any time and will run independently of each
    /// other. Example usage: // Start a simple clock task that updates a div once per second
    /// var updateClock = function(){
    /// Ext.fly(&#39;clock&#39;).update(new Date().format(&#39;g:i:s A&#39;));
    /// }
    /// var task = {
    /// run: updateClock,
    /// interval: 1000 //1 second
    /// }
    /// var runner = new Ext.util.TaskRunner();
    /// runner.start(task);
    /// // equivalent using TaskManager
    /// Ext.TaskManager.start({
    /// run: updateClock,
    /// interval: 1000
    /// });
    /// See the start method for details about how to configure a task object. Also see Ext.util.DelayedTask.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TaskRunner
    {
        /// <summary>
        /// ...
        /// </summary>
        public TaskRunner(JsNumber interval=null){}
        /// <summary>
        /// Starts a new task. ...
        /// </summary>
        public object start(object task=null){return null;}
        /// <summary>
        /// Stops an existing running task. ...
        /// </summary>
        public object stop(object task){return null;}
        /// <summary>
        /// Stops all tasks that are currently running. ...
        /// </summary>
        public object stopAll(){return null;}
        public TaskRunner(TaskRunnerConfig config){}
    }
    #endregion
    #region TaskRunnerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TaskRunnerConfig
    {
    }
    #endregion
    #region TaskRunnerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class TaskRunnerEvents
    {
    }
    #endregion
}
#endregion
