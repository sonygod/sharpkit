//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:52:01
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region Observable
    /// <summary>
    /// Base class that provides a common interface for publishing events. Subclasses are expected to to have a property
    /// &quot;events&quot; with all the events defined, and, optionally, a property &quot;listeners&quot; with configured listeners defined. For example: Ext.define(&#39;Employee&#39;, {
    /// extend: &#39;Ext.util.Observable&#39;,
    /// constructor: function(config){
    /// this.name = config.name;
    /// this.addEvents({
    /// &quot;fired&quot; : true,
    /// &quot;quit&quot; : true
    /// });
    /// // Copy configured listeners into *this* object so that the base class&#39;s
    /// // constructor will add them.
    /// this.listeners = config.listeners;
    /// // Call our superclass constructor to complete construction process.
    /// Employee.superclass.constructor.call(this, config)
    /// }
    /// });
    /// This could then be used like this: var newEmployee = new Employee({
    /// name: employeeName,
    /// listeners: {
    /// quit: function() {
    /// // By default, &quot;this&quot; will be the object that fired the event.
    /// alert(this.name + &quot; has quit!&quot;);
    /// }
    /// }
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial interface Observable
    {
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        object addEvents(object o, JsString more);
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        object addListener(JsString eventName, JsAction handler, object scope=null, object options=null);
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null);
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        object clearListeners();
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        object clearManagedListeners();
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        object enableBubble(object events);
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        bool fireEvent(JsString eventName, object args);
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        bool hasListener(JsString eventName);
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null);
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        object mun(object item, object ename, JsAction fn, object scope);
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        object on(JsString eventName, JsAction handler, object scope=null, object options=null);
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        object relayEvents(object origin, JsString events, object prefix);
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        object removeListener(JsString eventName, JsAction handler, object scope=null);
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        object removeManagedListener(object item, object ename, JsAction fn, object scope);
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        object resumeEvents();
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        object suspendEvents(bool queueSuspended);
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        object un(JsString eventName, JsAction handler, object scope=null);
    }
    #endregion
    #region ObservableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ObservableConfig
    {
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region ObservableEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ObservableEvents
    {
    }
    #endregion
}
#endregion
