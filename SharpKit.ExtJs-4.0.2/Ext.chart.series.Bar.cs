//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:24
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.series
namespace Ext.chart.series
{
    #region Bar
    /// <summary>
    /// Creates a Bar Chart. A Bar Chart is a useful visualization technique to display quantitative information for
    /// different categories that can show some progression (or regression) in the dataset. As with all other series, the Bar
    /// Series must be appended in the series Chart array configuration. See the Chart documentation for more information.
    /// A typical configuration object for the bar series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
    /// fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// data: [
    /// {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
    /// {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
    /// {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
    /// {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
    /// {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
    /// ]
    /// });
    /// Ext.create(&#39;Ext.chart.Chart&#39;, {
    /// renderTo: Ext.getBody(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// axes: [{
    /// type: &#39;Numeric&#39;,
    /// position: &#39;bottom&#39;,
    /// fields: [&#39;data1&#39;],
    /// label: {
    /// renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
    /// },
    /// title: &#39;Sample Values&#39;,
    /// grid: true,
    /// minimum: 0
    /// }, {
    /// type: &#39;Category&#39;,
    /// position: &#39;left&#39;,
    /// fields: [&#39;name&#39;],
    /// title: &#39;Sample Metrics&#39;
    /// }],
    /// series: [{
    /// type: &#39;bar&#39;,
    /// axis: &#39;bottom&#39;,
    /// highlight: true,
    /// tips: {
    /// trackMouse: true,
    /// width: 140,
    /// height: 28,
    /// renderer: function(storeItem, item) {
    /// this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + storeItem.get(&#39;data1&#39;) + &#39; views&#39;);
    /// }
    /// },
    /// label: {
    /// display: &#39;insideEnd&#39;,
    /// field: &#39;data1&#39;,
    /// renderer: Ext.util.Format.numberRenderer(&#39;0&#39;),
    /// orientation: &#39;horizontal&#39;,
    /// color: &#39;#333&#39;,
    /// &#39;text-anchor&#39;: &#39;middle&#39;
    /// },
    /// xField: &#39;name&#39;,
    /// yField: [&#39;data1&#39;]
    /// }]
    /// });
    /// In this configuration we set bar as the series type, bind the values of the bar to the bottom axis and set the
    /// xField or category field to the name parameter of the store. We also set highlight to true which enables smooth
    /// animations when bars are hovered. We also set some configuration for the bar labels to be displayed inside the bar,
    /// to display the information found in the data1 property of each element store, to render a formated text with the
    /// Ext.util.Format we pass in, to have an horizontal orientation (as opposed to a vertical one) and we also set
    /// other styles like color, text-anchor, etc.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Bar : Cartesian, Ext.util.Observable, Ext.chart.Label, Highlight, Ext.chart.Tip, Callout
    {
        /// <summary>
        /// Draws the series for the current chart. ...
        /// </summary>
        public object drawSeries(){return null;}
        /// <summary>
        /// Returns a string with the color to be used for the series legend item. ...
        /// </summary>
        public new object getLegendColor(object index){return null;}
    }
    #endregion
    #region BarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BarConfig : CartesianConfig
    {
        public bool column{get;set;}
        public JsNumber groupGutter{get;set;}
        public JsNumber gutter{get;set;}
        public object style{get;set;}
        public JsNumber xPadding{get;set;}
        public JsNumber yPadding{get;set;}
    }
    #endregion
    #region BarEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class BarEvents : CartesianEvents
    {
    }
    #endregion
}
#endregion
