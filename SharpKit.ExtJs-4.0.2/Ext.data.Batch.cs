//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:50:52
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region Batch
    /// <summary>
    /// Provides a mechanism to run one or more operations in a given order. Fires the &#39;operationcomplete&#39; event
    /// after the completion of each Operation, and the &#39;complete&#39; event when all Operations have been successfully executed. Fires an &#39;exception&#39;
    /// event if any of the Operations encounter an exception. Usually these are only used internally by Ext.data.proxy.Proxy classes
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Batch : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Creates new Batch object. ...
        /// </summary>
        public object constructor(object config=null){return null;}
        /// <summary>
        /// Adds a new operation to this batch ...
        /// </summary>
        public object add(object operation){return null;}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Pauses execution of the batch, but does not cancel the current operation ...
        /// </summary>
        public object pause(){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Executes a operation by its numeric index ...
        /// </summary>
        public object runOperation(JsNumber index){return null;}
        /// <summary>
        /// Kicks off the execution of the batch, continuing from the next operation if the previous
        /// operation encountered an exc...
        /// </summary>
        public object start(){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public bool autoStart{get;set;}
        public JsNumber current{get;set;}
        /// <summary>
        /// True if this batch has encountered an exception. ...
        /// </summary>
        public bool hasException{get;set;}
        public bool isComplete{get;set;}
        public bool isRunning{get;set;}
        public JsArray operations{get;set;}
        public bool pauseOnException{get;set;}
        /// <summary>
        /// The total number of operations in this batch. ...
        /// </summary>
        public JsNumber total{get;set;}
    }
    #endregion
    #region BatchConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BatchConfig
    {
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region BatchEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class BatchEvents
    {
        /// <summary>
        /// Fired when all operations of this batch have been completed ...
        /// </summary>
        public static JsString complete="complete";
        /// <summary>
        /// Fired when a operation encountered an exception ...
        /// </summary>
        public static JsString exception="exception";
        /// <summary>
        /// Fired when each operation of the batch completes ...
        /// </summary>
        public static JsString operationcomplete="operationcomplete";
    }
    #endregion
}
#endregion
