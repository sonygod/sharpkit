//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:24
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.dd
namespace Ext.dd
{
    #region DropZone
    /// <summary>
    /// This class provides a container DD instance that allows dropping on multiple child target nodes. By default, this class requires that child nodes accepting drop are registered with Ext.dd.Registry.
    /// However a simpler way to allow a DropZone to manage any number of target elements is to configure the
    /// DropZone with an implementation of getTargetFromEvent which interrogates the passed
    /// mouse event to see if it has taken place within an element, or class of elements. This is easily done
    /// by using the event&#39;s getTarget method to identify a node based on a
    /// Ext.DomQuery selector. Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
    /// a drop target, that target is passed as the first parameter to onNodeEnter, onNodeOver,
    /// onNodeOut, onNodeDrop. You may configure the instance of DropZone with implementations
    /// of these methods to provide application-specific behaviour for these events to update both
    /// application state, and UI state. For example to make a GridPanel a cooperating target with the example illustrated in
    /// DragZone, the following technique might be used: myGridPanel.on(&#39;render&#39;, function() {
    /// myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
    /// // If the mouse is over a grid row, return that node. This is
    /// // provided as the &quot;target&quot; parameter in all &quot;onNodeXXXX&quot; node event handling functions
    /// getTargetFromEvent: function(e) {
    /// return e.getTarget(myGridPanel.getView().rowSelector);
    /// },
    /// // On entry into a target node, highlight that node.
    /// onNodeEnter : function(target, dd, e, data){
    /// Ext.fly(target).addCls(&#39;my-row-highlight-class&#39;);
    /// },
    /// // On exit from a target node, unhighlight that node.
    /// onNodeOut : function(target, dd, e, data){
    /// Ext.fly(target).removeCls(&#39;my-row-highlight-class&#39;);
    /// },
    /// // While over a target node, return the default drop allowed class which
    /// // places a &quot;tick&quot; icon into the drag proxy.
    /// onNodeOver : function(target, dd, e, data){
    /// return Ext.dd.DropZone.prototype.dropAllowed;
    /// },
    /// // On node drop we can interrogate the target to find the underlying
    /// // application object that is the real target of the dragged data.
    /// // In this case, it is a Record in the GridPanel&#39;s Store.
    /// // We can use the data set up by the DragZone&#39;s getDragData method to read
    /// // any data we decided to attach in the DragZone&#39;s getDragData method.
    /// onNodeDrop : function(target, dd, e, data){
    /// var rowIndex = myGridPanel.getView().findRowIndex(target);
    /// var r = myGridPanel.getStore().getAt(rowIndex);
    /// Ext.Msg.alert(&#39;Drop gesture&#39;, &#39;Dropped Record id &#39; + data.draggedRecord.id +
    /// &#39; on Record id &#39; + r.id);
    /// return true;
    /// }
    /// });
    /// }
    /// See the DragZone documentation for details about building a DragZone which
    /// cooperates with this DropZone.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DropZone : DropTarget
    {
        /// <summary>
        /// Returns a custom data object associated with the DOM node that is the target of the event. ...
        /// </summary>
        public object getTargetFromEvent(Event e){return null;}
        /// <summary>
        /// The function a Ext.dd.DragSource calls once to notify this drop zone that the dragged item has
        /// been dropped on it. ...
        /// </summary>
        public new bool notifyDrop(DragSource source, Event e, object data){return false;}
        /// <summary>
        /// The function a Ext.dd.DragSource calls once to notify this drop zone that the source is now over
        /// the zone. ...
        /// </summary>
        public new JsString notifyEnter(DragSource source, Event e, object data){return null;}
        /// <summary>
        /// The function a Ext.dd.DragSource calls once to notify this drop zone that the source has been dragged
        /// out of the zone...
        /// </summary>
        public new object notifyOut(DragSource source, Event e, object data){return null;}
        /// <summary>
        /// The function a Ext.dd.DragSource calls continuously while it is being dragged over the drop zone. ...
        /// </summary>
        public new JsString notifyOver(DragSource source, Event e, object data){return null;}
        /// <summary>
        /// Called when the DropZone determines that a Ext.dd.DragSource has been dropped on it,
        /// but not on any of its registered...
        /// </summary>
        public bool onContainerDrop(DragSource source, Event e, object data){return false;}
        /// <summary>
        /// Called while the DropZone determines that a Ext.dd.DragSource is being dragged over it,
        /// but not over any of its regis...
        /// </summary>
        public JsString onContainerOver(DragSource source, Event e, object data){return null;}
        /// <summary>
        /// Called when the DropZone determines that a Ext.dd.DragSource has been dropped onto
        /// the drop node. ...
        /// </summary>
        public bool onNodeDrop(object nodeData, DragSource source, Event e, object data){return false;}
        /// <summary>
        /// Called when the DropZone determines that a Ext.dd.DragSource has entered a drop node
        /// that has either been registered ...
        /// </summary>
        public object onNodeEnter(object nodeData, DragSource source, Event e, object data){return null;}
        /// <summary>
        /// Called when the DropZone determines that a Ext.dd.DragSource has been dragged out of
        /// the drop node without dropping. ...
        /// </summary>
        public object onNodeOut(object nodeData, DragSource source, Event e, object data){return null;}
        /// <summary>
        /// Called while the DropZone determines that a Ext.dd.DragSource is over a drop node
        /// that has either been registered or ...
        /// </summary>
        public JsString onNodeOver(object nodeData, DragSource source, Event e, object data){return null;}
    }
    #endregion
    #region DropZoneConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DropZoneConfig : DropTargetConfig
    {
    }
    #endregion
    #region DropZoneEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DropZoneEvents : DropTargetEvents
    {
    }
    #endregion
}
#endregion
