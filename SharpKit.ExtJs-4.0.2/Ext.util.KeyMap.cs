//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region KeyMap
    /// <summary>
    /// Handles mapping keys to actions for an element. One key map can be used for multiple actions.
    /// The constructor accepts the same config object as defined by addBinding.
    /// If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
    /// combination it will call the function with this signature (if the match is a multi-key
    /// combination the callback will still be called only once): (String key, Ext.EventObject e)
    /// A KeyMap can also handle a string representation of keys.
    /// Usage: // map one key by key code
    /// var map = new Ext.util.KeyMap(&quot;my-element&quot;, {
    /// key: 13, // or Ext.EventObject.ENTER
    /// fn: myHandler,
    /// scope: myObject
    /// });
    /// // map multiple keys to one action by string
    /// var map = new Ext.util.KeyMap(&quot;my-element&quot;, {
    /// key: &quot;a\r\n\t&quot;,
    /// fn: myHandler,
    /// scope: myObject
    /// });
    /// // map multiple keys to multiple actions by strings and array of codes
    /// var map = new Ext.util.KeyMap(&quot;my-element&quot;, [
    /// {
    /// key: [10,13],
    /// fn: function(){ alert(&quot;Return was pressed&quot;); }
    /// }, {
    /// key: &quot;abc&quot;,
    /// fn: function(){ alert(&#39;a, b or c was pressed&#39;); }
    /// }, {
    /// key: &quot;\t&quot;,
    /// ctrl:true,
    /// shift:true,
    /// fn: function(){ alert(&#39;Control + shift + tab was pressed.&#39;); }
    /// }
    /// ]);
    /// Note: A KeyMap starts enabled
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class KeyMap : Ext.Base
    {
        /// <summary>
        /// Creates new KeyMap. ...
        /// </summary>
        public object constructor(object el, object binding, JsString eventName=null){return null;}
        /// <summary>
        /// Disable this KeyMap ...
        /// </summary>
        public object disable(){return null;}
        /// <summary>
        /// Enables this KeyMap ...
        /// </summary>
        public object enable(){return null;}
        /// <summary>
        /// Returns true if this KeyMap is enabled ...
        /// </summary>
        public bool isEnabled(){return false;}
        /// <summary>
        /// Shorthand for adding a single key listener ...
        /// </summary>
        public object on(object key, JsAction fn, object scope=null){return null;}
    }
    #endregion
    #region KeyMapConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class KeyMapConfig
    {
    }
    #endregion
    #region KeyMapEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class KeyMapEvents
    {
    }
    #endregion
}
#endregion
