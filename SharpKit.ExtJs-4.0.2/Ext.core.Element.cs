//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:24
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.core
namespace Ext.core
{
    #region Element
    /// <summary>
    /// Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences. All instances of this class inherit the methods of Ext.fx.Anim making visual effects easily available to all DOM elements. Note that the events documented in this class are not Ext events, they encapsulate browser events. To
    /// access the underlying browser event, see Ext.EventObject.browserEvent. Some older
    /// browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs. Usage: // by id
    /// var el = Ext.get(&quot;my-div&quot;);
    /// // by DOM element reference
    /// var el = Ext.get(myDivElement);
    /// Animations When an element is manipulated, by default there is no animation. var el = Ext.get(&quot;my-div&quot;);
    /// // no animation
    /// el.setWidth(100);
    /// Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter.  This
    /// parameter can be specified as boolean (true) for default animation effects. // default animation
    /// el.setWidth(100, true);
    /// To configure the effects, an object literal with animation options to use as the Element animation
    /// configuration object can also be specified. Note that the supported Element animation configuration
    /// options are a subset of the Ext.fx.Anim animation options specific to Fx effects.  The supported
    /// Element animation configuration options are: Option    Default   Description
    /// --------- --------  ---------------------------------------------
    /// duration  .35       The duration of the animation in seconds
    /// easing    easeOut   The easing method
    /// callback  none      A function to execute when the anim completes
    /// scope     this      The scope (this) of the callback function
    /// // Element animation options object
    /// var opt = {
    /// duration: 1,
    /// easing: &#39;elasticIn&#39;,
    /// callback: this.foo,
    /// scope: this
    /// };
    /// // animation with some options set
    /// el.setWidth(100, opt);
    /// The Element animation object being used for the animation will be set on the options
    /// object as &quot;anim&quot;, which allows you to stop or manipulate the animation. Here is an example: // using the &quot;anim&quot; property to get the Anim object
    /// if(opt.anim.isAnimated()){
    /// opt.anim.stop();
    /// }
    /// Also see the animate method for another animation technique.  Composite (Collections of) Elements For working with collections of Elements, see Ext.CompositeElement
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Element
    {
        /// <summary>
        /// Adds one or more CSS classes to the element. ...
        /// </summary>
        public Ext.core.Element addCls(object className){return null;}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect) ...
        /// </summary>
        public Ext.core.Element addClsOnClick(JsString className){return null;}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when this element has the focus ...
        /// </summary>
        public Ext.core.Element addClsOnFocus(JsString className){return null;}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is over this element ...
        /// </summary>
        public Ext.core.Element addClsOnOver(JsString className){return null;}
        /// <summary>
        /// Convenience method for constructing a KeyMap ...
        /// </summary>
        public Ext.util.KeyMap addKeyListener(object key, JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Creates a KeyMap for this element ...
        /// </summary>
        public Ext.util.KeyMap addKeyMap(object config){return null;}
        /// <summary>
        /// Appends an event handler to this element. ...
        /// </summary>
        public Ext.core.Element addListener(JsString eventName, JsAction fn, object scope=null, object options=null){return null;}
        /// <summary>
        /// TODO: Look at this ...
        /// </summary>
        public object adjustWidth(object width){return null;}
        /// <summary>
        /// Aligns this element with another element relative to the specified anchor points. ...
        /// </summary>
        public Ext.core.Element alignTo(object element, JsString position, JsArray offsets=null, object animate=null){return null;}
        /// <summary>
        /// Appends the passed element(s) to this element ...
        /// </summary>
        public Ext.core.Element appendChild(object el){return null;}
        /// <summary>
        /// Appends this element to the passed element ...
        /// </summary>
        public Ext.core.Element appendTo(object el){return null;}
        /// <summary>
        /// More flexible version of setStyle for setting style properties. ...
        /// </summary>
        public Ext.core.Element applyStyles(object styles){return null;}
        /// <summary>
        /// Tries to blur the element. ...
        /// </summary>
        public Ext.core.Element blur(){return null;}
        /// <summary>
        /// Wraps the specified element with a special 9 element markup/CSS block that renders by default as
        /// a gray container wit...
        /// </summary>
        public Ext.core.Element boxWrap(JsString @class=null){return null;}
        /// <summary>
        /// Centers the Element in either the viewport, or another Element. ...
        /// </summary>
        public object center(object centerIn=null){return null;}
        /// <summary>
        /// Selects a single direct child based on the passed CSS selector (the selector should not contain an id). ...
        /// </summary>
        public object child(JsString selector, bool returnDom=false){return null;}
        /// <summary>
        /// Removes Empty, or whitespace filled text nodes. ...
        /// </summary>
        public object clean(bool forceReclean=false){return null;}
        /// <summary>
        /// Removes all previous added listeners from this element ...
        /// </summary>
        public Ext.core.Element clearListeners(){return null;}
        /// <summary>
        /// Clears any opacity settings from this element. ...
        /// </summary>
        public Ext.core.Element clearOpacity(){return null;}
        /// <summary>
        /// Clear positioning back to the default when the document was loaded ...
        /// </summary>
        public Ext.core.Element clearPositioning(JsString value=null){return null;}
        /// <summary>
        /// Store the current overflow setting and clip overflow on the element - use unclip to remove ...
        /// </summary>
        public Ext.core.Element clip(){return null;}
        /// <summary>
        /// Returns true if this element is an ancestor of the passed element ...
        /// </summary>
        public bool contains(object el){return false;}
        /// <summary>
        /// Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e...
        /// </summary>
        public Ext.core.Element createChild(object config, HTMLElement insertBefore=null, bool returnDom=false){return null;}
        /// <summary>
        /// Creates a proxy element of this element ...
        /// </summary>
        public Ext.core.Element createProxy(object config, object renderTo=null, bool matchBox=false){return null;}
        /// <summary>
        /// Creates an iframe shim for this element to keep selects and other windowed objects from
        /// showing through. ...
        /// </summary>
        public Ext.core.Element createShim(){return null;}
        /// <summary>
        /// Removes this element's dom reference. ...
        /// </summary>
        public object destroy(){return null;}
        /// <summary>
        /// Selects a single child at any depth below this element based on the passed CSS selector (the selector should not cont...
        /// </summary>
        public object down(JsString selector, bool returnDom=false){return null;}
        /// <summary>
        /// Convenience method for setVisibilityMode(Element.DISPLAY) ...
        /// </summary>
        public Ext.core.Element enableDisplayMode(JsString display=null){return null;}
        /// <summary>
        /// Fade an element in (from transparent to opaque). ...
        /// </summary>
        public Ext.Element fadeIn(object options=null){return null;}
        /// <summary>
        /// Fade an element out (from opaque to transparent). ...
        /// </summary>
        public Ext.Element fadeOut(object options=null){return null;}
        /// <summary>
        /// Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. ...
        /// </summary>
        public HTMLElement findParent(JsString selector, object maxDepth=null, bool returnEl=false){return null;}
        /// <summary>
        /// Looks at parent nodes for a match of the passed simple selector (e.g. ...
        /// </summary>
        public HTMLElement findParentNode(JsString selector, object maxDepth=null, bool returnEl=false){return null;}
        /// <summary>
        /// Gets the first child, skipping text nodes ...
        /// </summary>
        public object first(JsString selector=null, bool returnDom=false){return null;}
        /// <summary>
        /// Gets the globally shared flyweight Element, with the passed node as the active element. ...
        /// </summary>
        public Ext.Element fly(object el, JsString named=null){return null;}
        /// <summary>
        /// Shows a ripple of exploding, attenuating borders to draw attention to an Element. ...
        /// </summary>
        public Ext.core.Element frame(JsString color=null, JsNumber count=null, object options=null){return null;}
        /// <summary>
        /// Returns the active element in the DOM. ...
        /// </summary>
        public HTMLElement getActiveElement(){return null;}
        /// <summary>
        /// Gets the x,y coordinates to align this element with another element. ...
        /// </summary>
        public JsArray getAlignToXY(object element, JsString position, JsArray offsets=null){return null;}
        /// <summary>
        /// Gets the x,y coordinates specified by the anchor position on the element. ...
        /// </summary>
        public JsArray getAnchorXY(JsString anchor=null, bool local=false, object size=null){return null;}
        /// <summary>
        /// Returns the value of an attribute from the element's underlying DOM node. ...
        /// </summary>
        public JsString getAttribute(JsString name, JsString @namespace=null){return null;}
        /// <summary>
        /// Returns the value of a namespaced attribute from the element's underlying DOM node. ...
        /// </summary>
        public JsString getAttributeNS(JsString @namespace, JsString name){return null;}
        /// <summary>
        /// Gets the width of the border(s) for the specified side(s) ...
        /// </summary>
        public JsNumber getBorderWidth(JsString side){return null;}
        /// <summary>
        /// Gets the bottom Y coordinate of the element (element Y position + element height) ...
        /// </summary>
        public JsNumber getBottom(bool local){return null;}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to setBox to
        /// set another Element's size/locati...
        /// </summary>
        public object getBox(bool contentBox=false, bool local=false){return null;}
        /// <summary>
        /// Calculates the x, y to center this element on the screen ...
        /// </summary>
        public JsArray getCenterXY(){return null;}
        /// <summary>
        /// Return the CSS color for the specified CSS attribute. ...
        /// </summary>
        public object getColor(JsString attr, JsString defaultValue, JsString prefix=null){return null;}
        /// <summary>
        /// Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
        /// when...
        /// </summary>
        public JsNumber getComputedHeight(){return null;}
        /// <summary>
        /// Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
        /// when ne...
        /// </summary>
        public JsNumber getComputedWidth(){return null;}
        /// <summary>
        /// Returns the [X, Y] vector by which this element must be translated to make a best attempt
        /// to constrain within the pas...
        /// </summary>
        public JsArray getConstrainVector(object constrainTo, object proposedPosition){return null;}
        /// <summary>
        /// Returns the sum width of the padding and borders for the passed "sides". ...
        /// </summary>
        public JsNumber getFrameWidth(JsString sides, object onlyContentBox){return null;}
        /// <summary>
        /// Gets the left X coordinate ...
        /// </summary>
        public JsNumber getLeft(bool local){return null;}
        /// <summary>
        /// Gets this element's ElementLoader ...
        /// </summary>
        public ElementLoader getLoader(){return null;}
        /// <summary>
        /// Returns an object with properties top, left, right and bottom representing the margins of this element unless sides i...
        /// </summary>
        public object getMargin(JsString sides=null){return null;}
        /// <summary>
        /// Returns the offsets of this element from the passed element. ...
        /// </summary>
        public JsArray getOffsetsTo(object element){return null;}
        /// <summary>
        /// Gets the width of the padding(s) for the specified side(s) ...
        /// </summary>
        public JsNumber getPadding(JsString side){return null;}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to setBox to
        /// set another Element's size/locati...
        /// </summary>
        public object getPageBox(bool asRegion=false){return null;}
        /// <summary>
        /// Gets an object with all CSS positioning properties. ...
        /// </summary>
        public object getPositioning(){return null;}
        /// <summary>
        /// Returns the region of this element. ...
        /// </summary>
        public Ext.util.Region getRegion(){return null;}
        /// <summary>
        /// Gets the right X coordinate of the element (element X position + element width) ...
        /// </summary>
        public JsNumber getRight(bool local){return null;}
        /// <summary>
        /// Returns the current scroll position of the element. ...
        /// </summary>
        public object getScroll(){return null;}
        /// <summary>
        /// Returns the size of the element. ...
        /// </summary>
        public object getSize(bool contentSize=false){return null;}
        /// <summary>
        /// Normalizes currentStyle and computedStyle. ...
        /// </summary>
        public JsString getStyle(JsString property){return null;}
        /// <summary>
        /// Returns the dimensions of the element available to lay content out in. ...
        /// </summary>
        public object getStyleSize(){return null;}
        /// <summary>
        /// Returns an object with properties matching the styles requested. ...
        /// </summary>
        public object getStyles(JsString style1, JsString style2, JsString etc){return null;}
        /// <summary>
        /// Returns the width in pixels of the passed text, or the width of the text in this Element. ...
        /// </summary>
        public JsNumber getTextWidth(JsString text, JsNumber min=null, JsNumber max=null){return null;}
        /// <summary>
        /// Gets the top Y coordinate ...
        /// </summary>
        public JsNumber getTop(bool local){return null;}
        /// <summary>
        /// Returns the value of the "value" attribute ...
        /// </summary>
        public object getValue(bool asNumber){return null;}
        /// <summary>
        /// Returns the content region of this element. ...
        /// </summary>
        public Ext.util.Region getViewRegion(){return null;}
        /// <summary>
        /// Returns the dimensions of the element available to lay content out in. ...
        /// </summary>
        public object getViewSize(){return null;}
        /// <summary>
        /// Gets the current X position of the element based on page coordinates. ...
        /// </summary>
        public JsNumber getX(){return null;}
        /// <summary>
        /// Gets the current position of the element based on page coordinates. ...
        /// </summary>
        public JsArray getXY(){return null;}
        /// <summary>
        /// Gets the current Y position of the element based on page coordinates. ...
        /// </summary>
        public JsNumber getY(){return null;}
        /// <summary>
        /// Slides the element while fading it out of view. ...
        /// </summary>
        public Ext.core.Element ghost(JsString anchor=null, object options=null){return null;}
        /// <summary>
        /// Checks if the specified CSS class exists on this element's DOM node. ...
        /// </summary>
        public bool hasCls(JsString className){return false;}
        /// <summary>
        /// Hide this element - Uses display mode to determine whether to use "display" or "visibility". ...
        /// </summary>
        public Ext.core.Element hide(object animate=null){return null;}
        /// <summary>
        /// Highlights the Element by setting a color (applies to the background-color by default, but can be
        /// changed using the "...
        /// </summary>
        public Ext.core.Element highlight(JsString color=null, object options=null){return null;}
        /// <summary>
        /// Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element. ...
        /// </summary>
        public Ext.core.Element hover(JsAction overFn, JsAction outFn, object scope=null, object options=null){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DD drag drop object for this element. ...
        /// </summary>
        public Ext.dd.DD initDD(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DDProxy object for this element. ...
        /// </summary>
        public Ext.dd.DDProxy initDDProxy(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DDTarget object for this element. ...
        /// </summary>
        public Ext.dd.DDTarget initDDTarget(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Inserts this element after the passed element in the DOM ...
        /// </summary>
        public Ext.core.Element insertAfter(object el){return null;}
        /// <summary>
        /// Inserts this element before the passed element in the DOM ...
        /// </summary>
        public Ext.core.Element insertBefore(object el){return null;}
        /// <summary>
        /// Inserts (or creates) an element (or DomHelper config) as the first child of this element ...
        /// </summary>
        public Ext.core.Element insertFirst(object el, object returnDom){return null;}
        /// <summary>
        /// Inserts an html fragment into this element ...
        /// </summary>
        public object insertHtml(JsString where, JsString html, bool returnEl=false){return null;}
        /// <summary>
        /// Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element ...
        /// </summary>
        public Ext.core.Element insertSibling(object el, JsString where=null, bool returnDom=false){return null;}
        /// <summary>
        /// Returns true if this element matches the passed simple selector (e.g. ...
        /// </summary>
        public bool @is(JsString selector){return false;}
        /// <summary>
        /// Tests various css rules/browsers to determine if this element uses a border box ...
        /// </summary>
        public bool isBorderBox(){return false;}
        /// <summary>
        /// Returns true if display is not "none" ...
        /// </summary>
        public bool isDisplayed(){return false;}
        /// <summary>
        /// Returns true if this element is masked. ...
        /// </summary>
        public bool isMasked(){return false;}
        /// <summary>
        /// Returns true if this element is scrollable. ...
        /// </summary>
        public bool isScrollable(){return false;}
        /// <summary>
        /// Checks whether the element is currently visible using both visibility and display properties. ...
        /// </summary>
        public bool isVisible(bool deep=false){return false;}
        /// <summary>
        /// Gets the last child, skipping text nodes ...
        /// </summary>
        public object last(JsString selector=null, bool returnDom=false){return null;}
        /// <summary>
        /// Direct access to the Ext.ElementLoader Ext.ElementLoader.load method. ...
        /// </summary>
        public Ext.core.Element load(object options){return null;}
        /// <summary>
        /// Puts a mask over this element to disable user interaction. ...
        /// </summary>
        public Ext.Element mask(JsString msg=null, JsString msgCls=null){return null;}
        /// <summary>
        /// Monitors this Element for the mouse leaving. ...
        /// </summary>
        public object monitorMouseLeave(JsNumber delay, JsAction handler, object scope){return null;}
        /// <summary>
        /// Move this element relative to its current position. ...
        /// </summary>
        public Ext.core.Element move(JsString direction, JsNumber distance, object animate=null){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
        /// </summary>
        public Ext.core.Element moveTo(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Gets the next sibling, skipping text nodes ...
        /// </summary>
        public object next(JsString selector=null, bool returnDom=false){return null;}
        /// <summary>
        /// Appends an event handler (shorthand for addListener). ...
        /// </summary>
        public object on(JsString eventName, JsAction fn, object scope=null, object options=null){return null;}
        /// <summary>
        /// Gets the parent node for this element, optionally chaining up trying to match a selector ...
        /// </summary>
        public object parent(JsString selector=null, bool returnDom=false){return null;}
        /// <summary>
        /// Creates a pause before any subsequent queued effects begin. ...
        /// </summary>
        public Ext.Element pause(JsNumber seconds){return null;}
        /// <summary>
        /// Initializes positioning on this element. ...
        /// </summary>
        public object position(JsString pos=null, JsNumber zIndex=null, JsNumber x=null, JsNumber y=null){return null;}
        /// <summary>
        /// Gets the previous sibling, skipping text nodes ...
        /// </summary>
        public object prev(JsString selector=null, bool returnDom=false){return null;}
        /// <summary>
        /// Fades the element out while slowly expanding it in all directions. ...
        /// </summary>
        public Ext.core.Element puff(object options=null){return null;}
        /// <summary>
        /// Recursively removes all previous added listeners from this element and its children ...
        /// </summary>
        public Ext.core.Element purgeAllListeners(){return null;}
        /// <summary>
        /// Selects child nodes based on the passed CSS selector (the selector should not contain an id). ...
        /// </summary>
        public JsArray query(JsString selector){return null;}
        /// <summary>
        /// Adds one or more CSS classes to this element and removes the same class(es) from all siblings. ...
        /// </summary>
        public Ext.core.Element radioCls(object className){return null;}
        /// <summary>
        /// Create an event handler on this element such that when the event fires and is handled by this element,
        /// it will be rel...
        /// </summary>
        public object relayEvent(JsString eventName, object @object){return null;}
        /// <summary>
        /// Removes this element's dom reference. ...
        /// </summary>
        public object remove(){return null;}
        /// <summary>
        /// Removes all previous added listeners from this element ...
        /// </summary>
        public Ext.core.Element removeAllListeners(){return null;}
        /// <summary>
        /// Remove any anchor to this element. ...
        /// </summary>
        public Ext.core.Element removeAnchor(){return null;}
        /// <summary>
        /// Removes one or more CSS classes from the element. ...
        /// </summary>
        public Ext.core.Element removeCls(object className){return null;}
        /// <summary>
        /// Removes an event handler from this element. ...
        /// </summary>
        public Ext.core.Element removeListener(JsString eventName, JsAction fn, object scope){return null;}
        /// <summary>
        /// Forces the browser to repaint this element ...
        /// </summary>
        public Ext.core.Element repaint(){return null;}
        /// <summary>
        /// Replaces the passed element with this element ...
        /// </summary>
        public Ext.core.Element replace(object el){return null;}
        /// <summary>
        /// Replaces a CSS class on the element with another. ...
        /// </summary>
        public Ext.core.Element replaceCls(JsString oldClassName, JsString newClassName){return null;}
        /// <summary>
        /// Replaces this element with the passed element ...
        /// </summary>
        public Ext.core.Element replaceWith(object el){return null;}
        /// <summary>
        /// Animates the transition of an element's dimensions from a starting height/width
        /// to an ending height/width. ...
        /// </summary>
        public Ext.Element scale(JsNumber width, JsNumber height, object options=null){return null;}
        /// <summary>
        /// Scrolls this element the specified direction. ...
        /// </summary>
        public bool scroll(JsString direction, JsNumber distance, object animate=null){return false;}
        /// <summary>
        /// Scrolls this element into view within the passed container. ...
        /// </summary>
        public Ext.core.Element scrollIntoView(object container=null, bool hscroll=false){return null;}
        /// <summary>
        /// Scrolls this element the specified scroll point. ...
        /// </summary>
        public Ext.Element scrollTo(JsString side, JsNumber value, object animate=null){return null;}
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable Element methods
        /// to be applied to many related elements in...
        /// </summary>
        public object select(object selector, bool unique=false, object root=null){return null;}
        /// <summary>
        /// Serializes a DOM form into a url encoded string ...
        /// </summary>
        public JsString serializeForm(object form){return null;}
        /// <summary>
        /// Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function) ...
        /// </summary>
        public Ext.core.Element set(object o, bool useSet=false){return null;}
        /// <summary>
        /// Sets the element's CSS bottom style. ...
        /// </summary>
        public Ext.core.Element setBottom(JsString bottom){return null;}
        /// <summary>
        /// Sets the element's position and size in one shot. ...
        /// </summary>
        public Ext.core.Element setBounds(JsNumber x, JsNumber y, object width, object height, object animate=null){return null;}
        /// <summary>
        /// Sets the element's box. ...
        /// </summary>
        public Ext.core.Element setBox(object box, bool adjust=false, object animate=null){return null;}
        /// <summary>
        /// Sets the CSS display property. ...
        /// </summary>
        public Ext.core.Element setDisplayed(object value){return null;}
        /// <summary>
        /// Set the height of this Element. ...
        /// </summary>
        public Ext.core.Element setHeight(object height, object animate=null){return null;}
        /// <summary>
        /// Sets the element's left position directly using CSS style (instead of setX). ...
        /// </summary>
        public Ext.core.Element setLeft(JsString left){return null;}
        /// <summary>
        /// Quick set left and top adding default units ...
        /// </summary>
        public Ext.core.Element setLeftTop(JsString left, JsString top){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
        /// </summary>
        public Ext.core.Element setLocation(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Set the opacity of the element ...
        /// </summary>
        public Ext.core.Element setOpacity(JsNumber opacity, object animate=null){return null;}
        /// <summary>
        /// Set positioning with an object returned by getPositioning(). ...
        /// </summary>
        public Ext.core.Element setPositioning(object posCfg){return null;}
        /// <summary>
        /// Sets the element's position and size the specified region. ...
        /// </summary>
        public Ext.core.Element setRegion(Ext.util.Region region, object animate=null){return null;}
        /// <summary>
        /// Sets the element's CSS right style. ...
        /// </summary>
        public Ext.core.Element setRight(JsString right){return null;}
        /// <summary>
        /// Set the size of this Element. ...
        /// </summary>
        public Ext.core.Element setSize(object width, object height, object animate=null){return null;}
        /// <summary>
        /// Wrapper for setting style properties, also takes single object parameter of multiple styles. ...
        /// </summary>
        public Ext.core.Element setStyle(object property, JsString value=null){return null;}
        /// <summary>
        /// Sets the element's top position directly using CSS style (instead of setY). ...
        /// </summary>
        public Ext.core.Element setTop(JsString top){return null;}
        /// <summary>
        /// Sets the element's visibility mode. ...
        /// </summary>
        public Ext.core.Element setVisibilityMode(JsNumber visMode){return null;}
        /// <summary>
        /// Sets the visibility of the element (see details). ...
        /// </summary>
        public Ext.core.Element setVisible(bool visible, object animate=null){return null;}
        /// <summary>
        /// Set the width of this Element. ...
        /// </summary>
        public Ext.core.Element setWidth(object width, object animate=null){return null;}
        /// <summary>
        /// Sets the X position of the element based on page coordinates. ...
        /// </summary>
        public Ext.core.Element setX(JsNumber The, object animate=null){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
        /// </summary>
        public Ext.core.Element setXY(JsArray pos, object animate=null){return null;}
        /// <summary>
        /// Sets the Y position of the element based on page coordinates. ...
        /// </summary>
        public Ext.core.Element setY(JsNumber The, object animate=null){return null;}
        /// <summary>
        /// Animates the transition of any combination of an element's dimensions, xy position and/or opacity. ...
        /// </summary>
        public Ext.Element shift(object options){return null;}
        /// <summary>
        /// Show this element - Uses display mode to determine whether to use "display" or "visibility". ...
        /// </summary>
        public Ext.core.Element show(object animate=null){return null;}
        /// <summary>
        /// Slides the element out of view. ...
        /// </summary>
        public Ext.core.Element slideOut(JsString anchor=null, object options=null){return null;}
        /// <summary>
        /// Stops the specified event(s) from bubbling and optionally prevents the default action ...
        /// </summary>
        public Ext.core.Element swallowEvent(object eventName, bool preventDefault=false){return null;}
        /// <summary>
        /// Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television). ...
        /// </summary>
        public Ext.core.Element switchOff(object options=null){return null;}
        /// <summary>
        /// Toggles the element's visibility or display, depending on visibility mode. ...
        /// </summary>
        public Ext.core.Element toggle(object animate=null){return null;}
        /// <summary>
        /// Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it). ...
        /// </summary>
        public Ext.core.Element toggleCls(JsString className){return null;}
        /// <summary>
        /// Translates the passed page coordinates into left/top css values for this element ...
        /// </summary>
        public object translatePoints(object x, JsNumber y=null){return null;}
        /// <summary>
        /// Removes an event handler from this element (see removeListener for additional notes). ...
        /// </summary>
        public Ext.core.Element un(JsString eventName, JsAction fn, object scope){return null;}
        /// <summary>
        /// Return clipping (overflow) to original clipping before clip was called ...
        /// </summary>
        public Ext.core.Element unclip(){return null;}
        /// <summary>
        /// Removes a previously applied mask. ...
        /// </summary>
        public object unmask(){return null;}
        /// <summary>
        /// Disables text selection for this element (normalized across browsers) ...
        /// </summary>
        public Ext.core.Element unselectable(){return null;}
        /// <summary>
        /// Walks up the dom looking for a parent node that matches the passed simple selector (e.g. ...
        /// </summary>
        public Ext.core.Element up(JsString selector, object maxDepth=null){return null;}
        /// <summary>
        /// Update the innerHTML of this element ...
        /// </summary>
        public Ext.core.Element update(JsString html){return null;}
        /// <summary>
        /// Creates and wraps this element with another element ...
        /// </summary>
        public object wrap(object config=null, bool returnDom=false){return null;}
        public bool autoBoxAdjust{get;set;}
        public JsString defaultUnit{get;set;}
        public HTMLElement dom{get;set;}
        public JsString id{get;set;}
        public JsString originalDisplay{get;set;}
    }
    #endregion
    #region ElementConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ElementConfig
    {
    }
    #endregion
    #region ElementEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ElementEvents
    {
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMActivate="DOMActivate";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMAttrModified="DOMAttrModified";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMCharacterDataModified="DOMCharacterDataModified";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMFocusIn="DOMFocusIn";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMFocusOut="DOMFocusOut";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMNodeInserted="DOMNodeInserted";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMNodeInsertedIntoDocument="DOMNodeInsertedIntoDocument";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMNodeRemoved="DOMNodeRemoved";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMNodeRemovedFromDocument="DOMNodeRemovedFromDocument";
        /// <summary>
        /// Where supported. ...
        /// </summary>
        public static JsString DOMSubtreeModified="DOMSubtreeModified";
        /// <summary>
        /// Fires when an object/image is stopped from loading before completely loaded. ...
        /// </summary>
        public static JsString abort="abort";
        /// <summary>
        /// Fires when an element loses focus either via the pointing device or by tabbing navigation. ...
        /// </summary>
        public static JsString blur="blur";
        /// <summary>
        /// Fires when a control loses the input focus and its value has been modified since gaining focus. ...
        /// </summary>
        public static JsString change="change";
        /// <summary>
        /// Fires when a mouse click is detected within the element. ...
        /// </summary>
        public static JsString click="click";
        /// <summary>
        /// Fires when a right click is detected within the element. ...
        /// </summary>
        public static JsString contextmenu="contextmenu";
        /// <summary>
        /// Fires when a mouse double click is detected within the element. ...
        /// </summary>
        public static JsString dblclick="dblclick";
        /// <summary>
        /// Fires when an object/image/frame cannot be loaded properly. ...
        /// </summary>
        public static JsString error="error";
        /// <summary>
        /// Fires when an element receives focus either via the pointing device or by tab navigation. ...
        /// </summary>
        public static JsString focus="focus";
        /// <summary>
        /// Fires when a keydown is detected within the element. ...
        /// </summary>
        public static JsString keydown="keydown";
        /// <summary>
        /// Fires when a keypress is detected within the element. ...
        /// </summary>
        public static JsString keypress="keypress";
        /// <summary>
        /// Fires when a keyup is detected within the element. ...
        /// </summary>
        public static JsString keyup="keyup";
        /// <summary>
        /// Fires when the user agent finishes loading all content within the element. ...
        /// </summary>
        public static JsString load="load";
        /// <summary>
        /// Fires when a mousedown is detected within the element. ...
        /// </summary>
        public static JsString mousedown="mousedown";
        /// <summary>
        /// Fires when the mouse enters the element. ...
        /// </summary>
        public static JsString mouseenter="mouseenter";
        /// <summary>
        /// Fires when the mouse leaves the element. ...
        /// </summary>
        public static JsString mouseleave="mouseleave";
        /// <summary>
        /// Fires when a mousemove is detected with the element. ...
        /// </summary>
        public static JsString mousemove="mousemove";
        /// <summary>
        /// Fires when a mouseout is detected with the element. ...
        /// </summary>
        public static JsString mouseout="mouseout";
        /// <summary>
        /// Fires when a mouseover is detected within the element. ...
        /// </summary>
        public static JsString mouseover="mouseover";
        /// <summary>
        /// Fires when a mouseup is detected within the element. ...
        /// </summary>
        public static JsString mouseup="mouseup";
        /// <summary>
        /// Fires when a form is reset. ...
        /// </summary>
        public static JsString reset="reset";
        /// <summary>
        /// Fires when a document view is resized. ...
        /// </summary>
        public static JsString resize="resize";
        /// <summary>
        /// Fires when a document view is scrolled. ...
        /// </summary>
        public static JsString scroll="scroll";
        /// <summary>
        /// Fires when a user selects some text in a text field, including input and textarea. ...
        /// </summary>
        public static JsString select="select";
        /// <summary>
        /// Fires when a form is submitted. ...
        /// </summary>
        public static JsString submit="submit";
        /// <summary>
        /// Fires when the user agent removes all content from a window or frame. ...
        /// </summary>
        public static JsString unload="unload";
    }
    #endregion
}
#endregion
