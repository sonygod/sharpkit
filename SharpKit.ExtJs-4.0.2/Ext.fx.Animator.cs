//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.fx
namespace Ext.fx
{
    #region Animator
    /// <summary>
    /// Animation instance This class is used to run keyframe based animations, which follows the CSS3 based animation structure.
    /// Keyframe animations differ from typical from/to animations in that they offer the ability to specify values
    /// at various points throughout the animation. Using Keyframes
    /// The keyframes option is the most important part of specifying an animation when using this
    /// class. A key frame is a point in a particular animation. We represent this as a percentage of the
    /// total animation duration. At each key frame, we can specify the target values at that time. Note that
    /// you must specify the values at 0% and 100%, the start and ending values. There is also a keyframe
    /// event that fires after each key frame is reached. Example Usage
    /// In the example below, we modify the values of the element at each fifth throughout the animation. Ext.create(&#39;Ext.fx.Animator&#39;, {
    /// target: Ext.getBody().createChild({
    /// style: {
    /// width: &#39;100px&#39;,
    /// height: &#39;100px&#39;,
    /// &#39;background-color&#39;: &#39;red&#39;
    /// }
    /// }),
    /// duration: 10000, // 10 seconds
    /// keyframes: {
    /// 0: {
    /// opacity: 1,
    /// backgroundColor: &#39;FF0000&#39;
    /// },
    /// 20: {
    /// x: 30,
    /// opacity: 0.5
    /// },
    /// 40: {
    /// x: 130,
    /// backgroundColor: &#39;0000FF&#39;
    /// },
    /// 60: {
    /// y: 80,
    /// opacity: 0.3
    /// },
    /// 80: {
    /// width: 200,
    /// y: 200
    /// },
    /// 100: {
    /// opacity: 1,
    /// backgroundColor: &#39;00FF00&#39;
    /// }
    /// }
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Animator : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public JsNumber currentIteration{get;set;}
        public JsNumber keyframeStep{get;set;}
        /// <summary>
        /// Flag to determine if the animation is paused. ...
        /// </summary>
        public bool paused{get;set;}
        public bool running{get;set;}
    }
    #endregion
    #region AnimatorConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AnimatorConfig
    {
        /// <summary>
        /// Time to delay before starting the animation. ...
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Time in milliseconds for the animation to last. ...
        /// </summary>
        public JsNumber duration{get;set;}
        /// <summary>
        /// Currently only for Component Animation: Only set a component's outer element size bypassing layouts. ...
        /// </summary>
        public bool dynamic{get;set;}
        /// <summary>
        /// This describes how the intermediate values used during a transition will be calculated. ...
        /// </summary>
        public JsString easing{get;set;}
        /// <summary>
        /// Number of times to execute the animation. ...
        /// </summary>
        public JsNumber iterations{get;set;}
        /// <summary>
        /// Animation keyframes follow the CSS3 Animation configuration pattern. ...
        /// </summary>
        public object keyframes{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// The Ext.fx.target to apply the animation to. ...
        /// </summary>
        public Ext.fx.target.Target target{get;set;}
    }
    #endregion
    #region AnimatorEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class AnimatorEvents
    {
        /// <summary>
        /// Fires when the animation is complete. ...
        /// </summary>
        public static JsString afteranimate="afteranimate";
        /// <summary>
        /// Fires before the animation starts. ...
        /// </summary>
        public static JsString beforeanimate="beforeanimate";
        /// <summary>
        /// Fires at each keyframe. ...
        /// </summary>
        public static JsString keyframe="keyframe";
    }
    #endregion
}
#endregion
