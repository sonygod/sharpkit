//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.series
namespace Ext.chart.series
{
    #region Series
    /// <summary>
    /// Series is the abstract class containing the common logic to all chart series. Series includes
    /// methods from Labels, Highlights, Tips and Callouts mixins. This class implements the logic of handling
    /// mouse events, animating, hiding, showing all elements and returning the color of the series to be used as a legend item. Listeners The series class supports listeners via the Observable syntax. Some of these listeners are:  itemmouseup When the user interacts with a marker. itemmousedown When the user interacts with a marker. itemmousemove When the user iteracts with a marker. afterrender Will be triggered when the animation ends or when the series has been rendered completely.  For example: series: [{
    /// type: &#39;column&#39;,
    /// axis: &#39;left&#39;,
    /// listeners: {
    /// &#39;afterrender&#39;: function() {
    /// console(&#39;afterrender&#39;);
    /// }
    /// },
    /// xField: &#39;category&#39;,
    /// yField: &#39;data1&#39;
    /// }]
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Series : Ext.Base, Ext.util.Observable, Ext.chart.Label, Highlight, Ext.chart.Tip, Callout
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Hides all the elements in the series. ...
        /// </summary>
        public object hideAll(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Shows all the elements in the series. ...
        /// </summary>
        public object showAll(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Un-highlight any existing highlights ...
        /// </summary>
        public object unHighlightItem(){return null;}
        public bool highlight{get;set;}
    }
    #endregion
    #region SeriesConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SeriesConfig
    {
        /// <summary>
        /// The color of the label text. ...
        /// </summary>
        public JsString color{get;set;}
        /// <summary>
        /// Specifies the presence and position of labels for each pie slice. ...
        /// </summary>
        public JsString display{get;set;}
        /// <summary>
        /// The name of the field to be displayed in the label. ...
        /// </summary>
        public JsString field{get;set;}
        /// <summary>
        /// The font used for the labels. ...
        /// </summary>
        public JsString font{get;set;}
        /// <summary>
        /// If set to true it will highlight the markers or the series when hovering
        /// with the mouse. ...
        /// </summary>
        public object highlight{get;set;}
        /// <summary>
        /// An (optional) object with event callbacks. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// Specifies the minimum distance from a label to the origin of the visualization. ...
        /// </summary>
        public JsNumber minMargin{get;set;}
        /// <summary>
        /// Either "horizontal" or "vertical". ...
        /// </summary>
        public JsString orientation{get;set;}
        /// <summary>
        /// A function that can be overridden to set custom styling properties to each rendered element. ...
        /// </summary>
        public JsAction renderer{get;set;}
        public JsArray shadowAttributes{get;set;}
        public bool showInLegend{get;set;}
        /// <summary>
        /// Add tooltips to the visualization's markers. ...
        /// </summary>
        public object tips{get;set;}
        public JsString title{get;set;}
        /// <summary>
        /// The type of series. ...
        /// </summary>
        public JsString type{get;set;}
    }
    #endregion
    #region SeriesEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class SeriesEvents
    {
        /// <summary>
        /// Fires when the series title is changed via setTitle. ...
        /// </summary>
        public static JsString titlechange="titlechange";
    }
    #endregion
}
#endregion
