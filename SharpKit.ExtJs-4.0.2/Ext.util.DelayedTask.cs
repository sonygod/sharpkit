//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:25
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region DelayedTask
    /// <summary>
    /// The DelayedTask class provides a convenient way to &quot;buffer&quot; the execution of a method,
    /// performing setTimeout where a new timeout cancels the old timeout. When called, the
    /// task will wait the specified time period before executing. If durng that time period,
    /// the task is called again, the original call will be cancelled. This continues so that
    /// the function is only called a single time for each iteration. This method is especially useful for things like detecting whether a user has finished
    /// typing in a text field. An example would be performing validation on a keypress. You can
    /// use this class to buffer the keypress events for a certain number of milliseconds, and
    /// perform only if they stop for that amount of time. Usage var task = new Ext.util.DelayedTask(function(){
    /// alert(Ext.getDom(&#39;myInputField&#39;).value.length);
    /// });
    /// // Wait 500ms before calling our function. If the user presses another key
    /// // during that 500ms, it will be cancelled and we&#39;ll wait another 500ms.
    /// Ext.get(&#39;myInputField&#39;).on(&#39;keypress&#39;, function(){
    /// task.delay(500);
    /// });
    /// Note that we are using a DelayedTask here to illustrate a point. The configuration
    /// option buffer for addListener/on will
    /// also setup a delayed task for you to buffer events.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DelayedTask
    {
        /// <summary>
        /// The parameters to this constructor serve as defaults and are not required. ...
        /// </summary>
        public object constructor(JsAction fn=null, object scope=null, JsArray args=null){return null;}
        /// <summary>
        /// Cancel the last queued timeout ...
        /// </summary>
        public object cancel(){return null;}
        /// <summary>
        /// Cancels any pending timeout and queues a new one ...
        /// </summary>
        public object delay(JsNumber delay, JsAction newFn=null, object newScope=null, JsArray newArgs=null){return null;}
    }
    #endregion
    #region DelayedTaskConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DelayedTaskConfig
    {
    }
    #endregion
    #region DelayedTaskEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DelayedTaskEvents
    {
    }
    #endregion
}
#endregion
