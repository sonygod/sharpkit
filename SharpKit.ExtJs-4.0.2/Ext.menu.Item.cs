//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:25
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.menu
namespace Ext.menu
{
    #region Item
    /// <summary>
    /// A base class for all menu items that require menu-related functionality such as click handling,
    /// sub-menus, icons, etc.  Example Usage: Ext.create(&#39;Ext.menu.Menu&#39;, {
    /// width: 100,
    /// height: 100,
    /// floating: false,  // usually you want this set to True (default)
    /// renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
    /// items: [{
    /// text: &#39;icon item&#39;,
    /// iconCls: &#39;add16&#39;
    /// },{
    /// text: &#39;text item&#39;,
    /// },{
    /// text: &#39;plain item&#39;,
    /// plain: true
    /// }]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Item : Ext.Component, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Sets the click handler of this item ...
        /// </summary>
        public object setHandler(JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Sets the iconCls of this item ...
        /// </summary>
        public object setIconCls(JsString iconCls){return null;}
        /// <summary>
        /// Sets the text of this item ...
        /// </summary>
        public object setText(JsString text){return null;}
        public bool activated{get;set;}
        /// <summary>
        /// Either an instance of Ext.menu.Menu or a config object for an Ext.menu.Menu
        /// which will act as a sub-menu to this item. ...
        /// </summary>
        public Menu menu{get;set;}
    }
    #endregion
    #region ItemConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ItemConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// The CSS class added to the menu item when the item is activated (focused/mouseover). ...
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// Whether or not this menu item can be activated when focused/mouseovered. ...
        /// </summary>
        public bool canActivate{get;set;}
        /// <summary>
        /// The delay in milliseconds to wait before hiding the menu after clicking the menu item. ...
        /// </summary>
        public JsNumber clickHideDelay{get;set;}
        /// <summary>
        /// Whether or not to destroy any associated sub-menu when this item is destroyed. ...
        /// </summary>
        public bool destroyMenu{get;set;}
        /// <summary>
        /// The CSS class added to the menu item when the item is disabled. ...
        /// </summary>
        public new JsString disabledCls{get;set;}
        /// <summary>
        /// Whether to not to hide the owning menu when this item is clicked. ...
        /// </summary>
        public bool hideOnClick{get;set;}
        /// <summary>
        /// The href attribute to use for the underlying anchor link. ...
        /// </summary>
        public JsString href{get;set;}
        /// <summary>
        /// The target attribute to use for the underlying anchor link. ...
        /// </summary>
        public JsString hrefTarget{get;set;}
        /// <summary>
        /// The path to an icon to display in this item. ...
        /// </summary>
        public JsString icon{get;set;}
        /// <summary>
        /// A CSS class that specifies a background-image to use as the icon for this item. ...
        /// </summary>
        public JsString iconCls{get;set;}
        /// <summary>
        /// The default Ext.Element.getAlignToXY anchor position value for this
        /// item's sub-menu relative to this item's position. ...
        /// </summary>
        public JsString menuAlign{get;set;}
        /// <summary>
        /// The delay in milliseconds before this item's sub-menu expands after this item is moused over. ...
        /// </summary>
        public JsNumber menuExpandDelay{get;set;}
        /// <summary>
        /// The delay in milliseconds before this item's sub-menu hides after this item is moused out. ...
        /// </summary>
        public JsNumber menuHideDelay{get;set;}
        /// <summary>
        /// Whether or not this item is plain text/html with no icon or visual activation. ...
        /// </summary>
        public bool plain{get;set;}
        /// <summary>
        /// The text/html to display in this item. ...
        /// </summary>
        public JsString text{get;set;}
    }
    #endregion
    #region ItemEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ItemEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when this item is activated ...
        /// </summary>
        public static new JsString activate="activate";
        /// <summary>
        /// Fires when this item is clicked ...
        /// </summary>
        public static JsString click="click";
        /// <summary>
        /// Fires when this tiem is deactivated ...
        /// </summary>
        public static new JsString deactivate="deactivate";
    }
    #endregion
}
#endregion
