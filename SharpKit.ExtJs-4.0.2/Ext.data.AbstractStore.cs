//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region AbstractStore
    /// <summary>
    /// AbstractStore is a superclass of Ext.data.Store and Ext.data.TreeStore. It&#39;s never used directly,
    /// but offers a set of methods used by both of those subclasses. We&#39;ve left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what
    /// you&#39;re probably looking for is Ext.data.Store. If you&#39;re still interested, here&#39;s a brief description of what
    /// AbstractStore is and is not. AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be
    /// given a Model that represents the type of data in the Store. It also expects to be given a
    /// Proxy that handles the loading of data into the Store. AbstractStore provides a few helpful methods such as load and sync, which load and save data
    /// respectively, passing the requests through the configured proxy. Both built-in Store subclasses add extra
    /// behavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -
    /// in Ext.data.Store the data is saved as a flat MixedCollection, whereas in
    /// TreeStore we use a Ext.data.Tree to maintain the data&#39;s hierarchy. The store provides filtering and sorting support. This sorting/filtering can happen on the client side
    /// or can be completed on the server. This is controlled by the remoteSort and (@link #remoteFilter{ config
    /// options. For more information see the sort and filter methods.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractStore : Ext.Base, Ext.util.Observable, Ext.util.Sortable
    {
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Returns all Model instances that are either currently a phantom (e.g. ...
        /// </summary>
        public JsArray getNewRecords(){return null;}
        /// <summary>
        /// Returns the proxy currently attached to this proxy instance ...
        /// </summary>
        public Ext.data.proxy.Proxy getProxy(){return null;}
        /// <summary>
        /// Returns any records that have been removed from the store but not yet destroyed on the proxy. ...
        /// </summary>
        public JsArray getRemovedRecords(){return null;}
        /// <summary>
        /// Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy ...
        /// </summary>
        public JsArray getUpdatedRecords(){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Performs initialization of this mixin. ...
        /// </summary>
        public object initSortable(){return null;}
        /// <summary>
        /// Returns true if the Store is currently performing a load operation ...
        /// </summary>
        public bool isLoading(){return false;}
        /// <summary>
        /// Loads the Store using its configured proxy. ...
        /// </summary>
        public object load(object options){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes all records from the store. ...
        /// </summary>
        public object removeAll(){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Sets the Store's Proxy by string, config object or Proxy instance ...
        /// </summary>
        public Ext.data.proxy.Proxy setProxy(object proxy){return null;}
        /// <summary>
        /// Sorts the data in the Store by one or more of its properties. ...
        /// </summary>
        public object sort(object sorters, JsString direction, object where, object doSort){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Synchronizes the Store with its Proxy. ...
        /// </summary>
        public object sync(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public JsString sortRoot{get;set;}
        /// <summary>
        /// Sets the updating behavior based on batch synchronization. ...
        /// </summary>
        public JsString batchUpdateMode{get;set;}
        /// <summary>
        /// The string type of the Proxy to create if none is specified. ...
        /// </summary>
        public JsString defaultProxyType{get;set;}
        public JsString defaultSortDirection{get;set;}
        /// <summary>
        /// If true, any filters attached to this Store will be run after loading data, before the datachanged event is fired. ...
        /// </summary>
        public bool filterOnLoad{get;set;}
        public Ext.util.MixedCollection filters{get;set;}
        /// <summary>
        /// True if the Store has already been destroyed via destroyStore. ...
        /// </summary>
        public bool isDestroyed{get;set;}
        /// <summary>
        /// Flag denoting that this object is sortable. ...
        /// </summary>
        public bool isSortable{get;set;}
        /// <summary>
        /// If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired. ...
        /// </summary>
        public bool sortOnLoad{get;set;}
        public Ext.util.MixedCollection sorters{get;set;}
        public AbstractStore(AbstractStoreConfig config){}
        public AbstractStore(){}
    }
    #endregion
    #region AbstractStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractStoreConfig : Ext.BaseConfig
    {
        /// <summary>
        /// If data is not specified, and if autoLoad is true or an Object, this store's load method
        /// is automatically called afte...
        /// </summary>
        public object autoLoad{get;set;}
        /// <summary>
        /// True to automatically sync the Store with its Proxy after every edit to one of its Records. ...
        /// </summary>
        public bool autoSync{get;set;}
        /// <summary>
        /// This may be used in place of specifying a model configuration. ...
        /// </summary>
        public JsArray fields{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// The Proxy to use for this Store. ...
        /// </summary>
        public object proxy{get;set;}
        /// <summary>
        /// Optional unique identifier for this store. ...
        /// </summary>
        public JsString storeId{get;set;}
    }
    #endregion
    #region AbstractStoreEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractStoreEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fired when a Model instance has been added to this Store ...
        /// </summary>
        public static JsString add="add";
        /// <summary>
        /// Event description ...
        /// </summary>
        public static JsString beforeload="beforeload";
        /// <summary>
        /// Called before a call to sync is executed. ...
        /// </summary>
        public static JsString beforesync="beforesync";
        /// <summary>
        /// Fired after the removeAll method is called. ...
        /// </summary>
        public static JsString clear="clear";
        /// <summary>
        /// Fires whenever the records in the Store have changed in some way - this could include adding or removing records,
        /// or ...
        /// </summary>
        public static JsString datachanged="datachanged";
        /// <summary>
        /// Fires whenever the store reads data from a remote data source. ...
        /// </summary>
        public static JsString load="load";
        /// <summary>
        /// Fired when a Model instance has been removed from this Store ...
        /// </summary>
        public static JsString remove="remove";
        /// <summary>
        /// Fires when a Record has been updated ...
        /// </summary>
        public static JsString update="update";
    }
    #endregion
}
#endregion
