//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.selection
namespace Ext.selection
{
    #region Model
    /// <summary>
    /// Tracks what records are currently selected in a databound widget. This is an abstract class and is not meant to be directly used. DataBound UI widgets such as GridPanel, TreePanel, and ListView
    /// should subclass AbstractStoreSelectionModel and provide a way
    /// to binding to the component. The abstract methods onSelectChange and onLastFocusChanged should
    /// be implemented in these subclasses to update the UI widget.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Model : Ext.util.Observable
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Gets the count of selected records. ...
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// Returns the last selected record. ...
        /// </summary>
        public object getLastSelected(){return null;}
        /// <summary>
        /// Returns an array of the currently selected records. ...
        /// </summary>
        public JsArray getSelection(){return null;}
        /// <summary>
        /// Returns the current selectionMode. ...
        /// </summary>
        public JsString getSelectionMode(){return null;}
        /// <summary>
        /// Returns true if there are any a selected records. ...
        /// </summary>
        public bool hasSelection(){return false;}
        /// <summary>
        /// Returns true if the selections are locked. ...
        /// </summary>
        public bool isLocked(){return false;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public object selected{get;set;}
    }
    #endregion
    #region ModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelConfig
    {
        /// <summary>
        /// Allow users to deselect a record in a DataView, List or Grid. ...
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// Modes of selection. ...
        /// </summary>
        public JsString mode{get;set;}
    }
    #endregion
    #region ModelEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelEvents
    {
        /// <summary>
        /// Fired after a selection change has occurred ...
        /// </summary>
        public static JsString selectionchange="selectionchange";
    }
    #endregion
}
#endregion
