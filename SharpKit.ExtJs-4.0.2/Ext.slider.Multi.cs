//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.slider
namespace Ext.slider
{
    #region Multi
    /// <summary>
    /// Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis
    /// clicking and animation. Can be added as an item to any container. In addition,
    /// Example usage:
    /// Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:
    /// Ext.create(&#39;Ext.slider.Multi&#39;, {
    /// width: 200,
    /// values: [25, 50, 75],
    /// increment: 5,
    /// minValue: 0,
    /// maxValue: 100,
    /// //this defaults to true, setting to false allows the thumbs to pass each other
    /// constrainThumbs: false,
    /// renderTo: Ext.getBody()
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Multi : Ext.form.field.Base, Ext.form.Labelable, Ext.form.field.Field, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Returns an array of values - one for the location of each thumb ...
        /// </summary>
        public JsArray getValues(){return null;}
        /// <summary>
        /// Synchronizes thumbs position to the proper proportion of the total component width based
        /// on the current slider value. ...
        /// </summary>
        public object syncThumbs(){return null;}
        public bool dragging{get;set;}
        public JsArray thumbs{get;set;}
    }
    #endregion
    #region MultiConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MultiConfig
    {
        /// <summary>
        /// Turn on or off animation. ...
        /// </summary>
        public bool animate{get;set;}
        /// <summary>
        /// Determines whether or not clicking on the Slider axis will change the slider. ...
        /// </summary>
        public bool clickToChange{get;set;}
        /// <summary>
        /// True to disallow thumbs from overlapping one another. ...
        /// </summary>
        public bool constrainThumbs{get;set;}
        /// <summary>
        /// .
        /// The number of decimal places to which to round the Slider's value. ...
        /// </summary>
        public object decimalPrecision{get;set;}
        /// <summary>
        /// How many units to change the slider when adjusting by drag and drop. ...
        /// </summary>
        public JsNumber increment{get;set;}
        /// <summary>
        /// How many units to change the Slider when adjusting with keyboard navigation. ...
        /// </summary>
        public JsNumber keyIncrement{get;set;}
        /// <summary>
        /// The maximum value for the Slider. ...
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The minimum value for the Slider. ...
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// A function used to display custom text for the slider tip. ...
        /// </summary>
        public JsAction tipText{get;set;}
        /// <summary>
        /// True to use an Ext.slider.Tip to display tips for the value. ...
        /// </summary>
        public bool useTips{get;set;}
        /// <summary>
        /// A value with which to initialize the slider. ...
        /// </summary>
        public JsNumber value{get;set;}
        /// <summary>
        /// Array of Number values with which to initalize the slider. ...
        /// </summary>
        public JsArray values{get;set;}
        public bool vertical{get;set;}
    }
    #endregion
    #region MultiEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class MultiEvents
    {
        /// <summary>
        /// Fires before the slider value is changed. ...
        /// </summary>
        public static JsString beforechange="beforechange";
        /// <summary>
        /// Fires when the slider value is changed. ...
        /// </summary>
        public static JsString change="change";
        /// <summary>
        /// Fires when the slider value is changed by the user and any drag operations have completed. ...
        /// </summary>
        public static JsString changecomplete="changecomplete";
        /// <summary>
        /// Fires continuously during the drag operation while the mouse is moving. ...
        /// </summary>
        public static JsString drag="drag";
        /// <summary>
        /// Fires after the drag operation has completed. ...
        /// </summary>
        public static JsString dragend="dragend";
        /// <summary>
        /// Fires after a drag operation has started. ...
        /// </summary>
        public static JsString dragstart="dragstart";
    }
    #endregion
}
#endregion
