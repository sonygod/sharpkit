//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.series
namespace Ext.chart.series
{
    #region Column
    /// <summary>
    /// Creates a Column Chart. Much of the methods are inherited from Bar. A Column Chart is a useful visualization technique to display quantitative information for different
    /// categories that can show some progression (or regression) in the data set.
    /// As with all other series, the Column Series must be appended in the series Chart array configuration. See the Chart
    /// documentation for more information. A typical configuration object for the column series could be:  Example var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
    /// fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// data: [
    /// {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
    /// {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
    /// {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
    /// {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
    /// {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
    /// ]
    /// });
    /// Ext.create(&#39;Ext.chart.Chart&#39;, {
    /// renderTo: Ext.getBody(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// axes: [{
    /// type: &#39;Numeric&#39;,
    /// position: &#39;bottom&#39;,
    /// fields: [&#39;data1&#39;],
    /// label: {
    /// renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
    /// },
    /// title: &#39;Sample Values&#39;,
    /// grid: true,
    /// minimum: 0
    /// }, {
    /// type: &#39;Category&#39;,
    /// position: &#39;left&#39;,
    /// fields: [&#39;name&#39;],
    /// title: &#39;Sample Metrics&#39;
    /// }],
    /// axes: [{
    /// type: &#39;Numeric&#39;,
    /// position: &#39;left&#39;,
    /// fields: [&#39;data1&#39;],
    /// label: {
    /// renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
    /// },
    /// title: &#39;Sample Values&#39;,
    /// grid: true,
    /// minimum: 0
    /// }, {
    /// type: &#39;Category&#39;,
    /// position: &#39;bottom&#39;,
    /// fields: [&#39;name&#39;],
    /// title: &#39;Sample Metrics&#39;
    /// }],
    /// series: [{
    /// type: &#39;column&#39;,
    /// axis: &#39;left&#39;,
    /// highlight: true,
    /// tips: {
    /// trackMouse: true,
    /// width: 140,
    /// height: 28,
    /// renderer: function(storeItem, item) {
    /// this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + storeItem.get(&#39;data1&#39;) + &#39; $&#39;);
    /// }
    /// },
    /// label: {
    /// display: &#39;insideEnd&#39;,
    /// &#39;text-anchor&#39;: &#39;middle&#39;,
    /// field: &#39;data1&#39;,
    /// renderer: Ext.util.Format.numberRenderer(&#39;0&#39;),
    /// orientation: &#39;vertical&#39;,
    /// color: &#39;#333&#39;
    /// },
    /// xField: &#39;name&#39;,
    /// yField: &#39;data1&#39;
    /// }]
    /// });
    /// In this configuration we set column as the series type, bind the values of the bars to the bottom axis, set highlight to true so that bars are smoothly highlighted
    /// when hovered and bind the xField or category field to the data store name property and the yField as the data1 property of a store element.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Column : Ext.chart.series.Bar, Ext.util.Observable, Ext.chart.Label, Highlight, Ext.chart.Tip, Callout
    {
    }
    #endregion
    #region ColumnConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ColumnConfig
    {
        public JsNumber xPadding{get;set;}
        public JsNumber yPadding{get;set;}
    }
    #endregion
    #region ColumnEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ColumnEvents
    {
    }
    #endregion
}
#endregion
