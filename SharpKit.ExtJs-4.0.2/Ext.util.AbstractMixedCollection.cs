//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:25
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region AbstractMixedCollection
    /// <summary>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractMixedCollection : Ext.Base, Observable
    {
        /// <summary>
        /// Adds an item to the collection. ...
        /// </summary>
        public object add(JsString key, object o){return null;}
        /// <summary>
        /// Adds all elements of an Array or an Object to the collection. ...
        /// </summary>
        public object addAll(object objs){return null;}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all items from the collection. ...
        /// </summary>
        public object clear(){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Creates a shallow copy of this collection ...
        /// </summary>
        public MixedCollection clone(){return null;}
        /// <summary>
        /// Collects unique values of a particular property in this MixedCollection ...
        /// </summary>
        public JsArray collect(JsString property, JsString root, bool allowBlank=false){return null;}
        /// <summary>
        /// Returns true if the collection contains the passed Object as an item. ...
        /// </summary>
        public bool contains(object o){return false;}
        /// <summary>
        /// Returns true if the collection contains the passed Object as a key. ...
        /// </summary>
        public bool containsKey(JsString key){return false;}
        /// <summary>
        /// Executes the specified function once for every item in the collection, passing the following arguments:
        /// item : Mixe...
        /// </summary>
        public object each(JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Executes the specified function once for every key in the collection, passing each
        /// key, and its associated item as th...
        /// </summary>
        public object eachKey(JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// Filters the objects in this collection by a set of Filters, or by a single
        /// property/value pair with optional paramete...
        /// </summary>
        public MixedCollection filter(object property, object value, bool anyMatch=false, bool caseSensitive=false){return null;}
        /// <summary>
        /// Filter by a function. ...
        /// </summary>
        public MixedCollection filterBy(JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Returns the first item in the collection which elicits a true return value from the
        /// passed selection function. ...
        /// </summary>
        public object findBy(JsAction fn, object scope=null){return null;}
        /// <summary>
        /// Finds the index of the first matching object in this collection by a specific property/value. ...
        /// </summary>
        public JsNumber findIndex(JsString property, object value, JsNumber start=null, bool anyMatch=false, bool caseSensitive=false){return null;}
        /// <summary>
        /// Find the index of the first matching object in this collection by a function. ...
        /// </summary>
        public JsNumber findIndexBy(JsAction fn, object scope=null, JsNumber start=null){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Returns the first item in the collection. ...
        /// </summary>
        public object first(){return null;}
        /// <summary>
        /// Returns the item associated with the passed key OR index. ...
        /// </summary>
        public object get(object key){return null;}
        /// <summary>
        /// Returns the item at the specified index. ...
        /// </summary>
        public object getAt(JsNumber index){return null;}
        /// <summary>
        /// Returns the item associated with the passed key. ...
        /// </summary>
        public object getByKey(object key){return null;}
        /// <summary>
        /// Returns the number of items in the collection. ...
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// MixedCollection has a generic way to fetch keys if you implement getKey. ...
        /// </summary>
        public object getKey(object item){return null;}
        /// <summary>
        /// Returns a range of items in this collection ...
        /// </summary>
        public JsArray getRange(JsNumber startIndex=null, JsNumber endIndex=null){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Returns index within the collection of the passed Object. ...
        /// </summary>
        public JsNumber indexOf(object o){return null;}
        /// <summary>
        /// Returns index within the collection of the passed key. ...
        /// </summary>
        public JsNumber indexOfKey(JsString key){return null;}
        /// <summary>
        /// Inserts an item at the specified index in the collection. ...
        /// </summary>
        public object insert(JsNumber index, JsString key, object o=null){return null;}
        /// <summary>
        /// Returns the last item in the collection. ...
        /// </summary>
        public object last(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Remove an item from the collection. ...
        /// </summary>
        public object remove(object o){return null;}
        /// <summary>
        /// Remove all items in the passed array from the collection. ...
        /// </summary>
        public Ext.util.MixedCollection removeAll(JsArray items){return null;}
        /// <summary>
        /// Remove an item from a specified index in the collection. ...
        /// </summary>
        public object removeAt(JsNumber index){return null;}
        /// <summary>
        /// Removed an item associated with the passed key fom the collection. ...
        /// </summary>
        public object removeAtKey(JsString key){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Replaces an item in the collection. ...
        /// </summary>
        public object replace(JsString key, object o=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Collects all of the values of the given property and returns their sum ...
        /// </summary>
        public JsNumber sum(JsString property, JsString root, JsNumber start=null, JsNumber end=null){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
    }
    #endregion
    #region AbstractMixedCollectionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractMixedCollectionConfig : Ext.BaseConfig
    {
        /// <summary>
        /// Specify true if the addAll
        /// function should add function references to the collection. ...
        /// </summary>
        public bool allowFunctions{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region AbstractMixedCollectionEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractMixedCollectionEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fires when an item is added to the collection. ...
        /// </summary>
        public static JsString add="add";
        /// <summary>
        /// Fires when the collection is cleared. ...
        /// </summary>
        public static JsString clear="clear";
        /// <summary>
        /// Fires when an item is removed from the collection. ...
        /// </summary>
        public static JsString remove="remove";
        /// <summary>
        /// Fires when an item is replaced in the collection. ...
        /// </summary>
        public static JsString replace="replace";
    }
    #endregion
}
#endregion
