//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:50:56
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data.proxy
namespace Ext.data.proxy
{
    #region Rest
    /// <summary>
    /// RestProxy is a specialization of the AjaxProxy which simply maps the four actions
    /// (create, read, update and destroy) to RESTful HTTP verbs. For example, let&#39;s set up a Model
    /// with an inline RestProxy Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
    /// proxy: {
    /// type: &#39;rest&#39;,
    /// url : &#39;/users&#39;
    /// }
    /// });
    /// Now we can create a new User instance and save it via the RestProxy. Doing this will cause the Proxy to send a
    /// POST request to &#39;/users&#39;:
    /// var user = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;, email: &#39;ed@sencha.com&#39;}, &#39;User&#39;);
    /// user.save(); //POST /users
    /// Let&#39;s expand this a little and provide a callback for the Ext.data.Model.save call to update the Model
    /// once it has been created. We&#39;ll assume the creation went successfully and that the server gave this user an ID of
    /// 123: user.save({
    /// success: function(user) {
    /// user.set(&#39;name&#39;, &#39;Khan Noonien Singh&#39;);
    /// user.save(); //PUT /users/123
    /// }
    /// });
    /// Now that we&#39;re no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting
    /// the relevant url for that user. Now let&#39;s delete this user, which will use the DELETE method:     user.destroy(); //DELETE /users/123
    /// Finally, when we perform a load of a Model or Store, RestProxy will use the GET method: //1. Load via Store
    /// //the Store automatically picks up the Proxy from the User model
    /// var store = new Ext.data.Store({
    /// model: &#39;User&#39;
    /// });
    /// store.load(); //GET /users
    /// //2. Load directly from the Model
    /// //GET /users/123
    /// Ext.ModelManager.getModel(&#39;User&#39;).load(123, {
    /// success: function(user) {
    /// console.log(user.getId()); //outputs 123
    /// }
    /// });
    /// Url generation RestProxy is able to automatically generate the urls above based on two configuration options - appendId
    /// and format. If appendId is true (it is by default) then RestProxy will automatically append the ID of the
    /// Model instance in question to the configured url, resulting in the &#39;/users/123&#39; that we saw above. If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
    /// RestProxy will automatically insert a &#39;/&#39; before the ID if one is not already present. new Ext.data.proxy.Rest({
    /// url: &#39;/users&#39;,
    /// appendId: true //default
    /// });
    /// // Collection url: /users
    /// // Instance url  : /users/123
    /// RestProxy can also optionally append a format string to the end of any generated url: new Ext.data.proxy.Rest({
    /// url: &#39;/users&#39;,
    /// format: &#39;json&#39;
    /// });
    /// // Collection url: /users.json
    /// // Instance url  : /users/123.json
    /// If further customization is needed, simply implement the buildUrl method and add your custom generated
    /// url onto the Request object that is passed to buildUrl. See
    /// RestProxy&#39;s implementation for an example of
    /// how to achieve this. Note that RestProxy inherits from AjaxProxy, which already injects all of the sorter,
    /// filter, group and paging options into the generated url. See the AjaxProxy docs for more
    /// details.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Rest : Ext.data.proxy.Ajax, Ext.util.Observable
    {
        /// <summary>
        /// Specialized version of buildUrl that incorporates the appendId and format options into the
        /// generated url. ...
        /// </summary>
        public object buildUrl(object request){return null;}
        /// <summary>
        /// Mapping of action name to HTTP request method. ...
        /// </summary>
        public new object actionMethods{get;set;}
    }
    #endregion
    #region RestConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RestConfig
    {
        /// <summary>
        /// True to automatically append the ID of a Model instance when performing a request based
        /// on that single instance. ...
        /// </summary>
        public bool appendId{get;set;}
        /// <summary>
        /// True to batch actions of a particular type when synchronizing the store. ...
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// Optional data format to send to the server when making any request (e.g. ...
        /// </summary>
        public JsString format{get;set;}
    }
    #endregion
    #region RestEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class RestEvents
    {
    }
    #endregion
}
#endregion
