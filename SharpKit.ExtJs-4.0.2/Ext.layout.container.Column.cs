//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:52:01
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.layout.container
namespace Ext.layout.container
{
    #region Column
    /// <summary>
    /// This is the layout style of choice for creating structural layouts in a multi-column format where the width of
    /// each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
    /// This class is intended to be extended or created via the layout:&#39;column&#39; Ext.container.Container.layout config,
    /// and should generally not need to be created directly via the new keyword. ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
    /// specific config property of columnWidth that can be included in the config of any panel added to it.  The
    /// layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
    /// If width or columnWidth is not specified for a given panel, its width will default to the panel&#39;s width (or auto). The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
    /// The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
    /// less than 1 (e.g., .25). The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
    /// set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
    /// specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
    /// pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
    /// the total remaining container width.  In other words, percentage width panels are designed to fill the space
    /// left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
    /// with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
    /// layout may not render as expected.
    /// Example usage:     // All columns are percentages -- they must add up to 1
    /// Ext.create(&#39;Ext.panel.Panel&#39;, {
    /// title: &#39;Column Layout - Percentage Only&#39;,
    /// width: 350,
    /// height: 250,
    /// layout:&#39;column&#39;,
    /// items: [{
    /// title: &#39;Column 1&#39;,
    /// columnWidth: .25
    /// },{
    /// title: &#39;Column 2&#39;,
    /// columnWidth: .55
    /// },{
    /// title: &#39;Column 3&#39;,
    /// columnWidth: .20
    /// }],
    /// renderTo: Ext.getBody()
    /// });
    /// //
    /// // Mix of width and columnWidth -- all columnWidth values must add up
    /// // to 1. The first column will take up exactly 120px, and the last two
    /// // columns will fill the remaining container width.
    /// Ext.create(&#39;Ext.Panel&#39;, {
    /// title: &#39;Column Layout - Mixed&#39;,
    /// width: 350,
    /// height: 250,
    /// layout:&#39;column&#39;,
    /// items: [{
    /// title: &#39;Column 1&#39;,
    /// width: 120
    /// },{
    /// title: &#39;Column 2&#39;,
    /// columnWidth: .7
    /// },{
    /// title: &#39;Column 3&#39;,
    /// columnWidth: .3
    /// }],
    /// renderTo: Ext.getBody()
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Column : Auto
    {
    }
    #endregion
    #region ColumnConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ColumnConfig
    {
    }
    #endregion
    #region ColumnEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ColumnEvents
    {
    }
    #endregion
}
#endregion
