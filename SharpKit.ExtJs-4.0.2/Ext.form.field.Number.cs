//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form.field
namespace Ext.form.field
{
    #region Number
    /// <summary>
    /// A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,
    /// and numeric validation to limit the value to a range of valid numbers. The range of acceptable number
    /// values can be controlled by setting the minValue and maxValue configs, and fractional
    /// decimals can be disallowed by setting allowDecimals to false. By default, the number field is also rendered with a set of up/down spinner buttons and has
    /// up/down arrow key and mouse wheel event listeners attached for incrementing/decrementing the value by the
    /// step value. To hide the spinner buttons set hideTrigger:true; to disable the arrow key
    /// and mouse wheel handlers set keyNavEnabled:false and
    /// mouseWheelEnabled:false. See the example below. Example usage:  Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title: &#39;On The Wall&#39;,
    /// width: 300,
    /// bodyPadding: 10,
    /// renderTo: Ext.getBody(),
    /// items: [{
    /// xtype: &#39;numberfield&#39;,
    /// anchor: &#39;100%&#39;,
    /// name: &#39;bottles&#39;,
    /// fieldLabel: &#39;Bottles of Beer&#39;,
    /// value: 99,
    /// maxValue: 99,
    /// minValue: 0
    /// }],
    /// buttons: [{
    /// text: &#39;Take one down, pass it around&#39;,
    /// handler: function() {
    /// this.up(&#39;form&#39;).down(&#39;[name=bottles]&#39;).spinDown();
    /// }
    /// }]
    /// });
    /// Removing UI Enhancements  Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title: &#39;Personal Info&#39;,
    /// width: 300,
    /// bodyPadding: 10,
    /// renderTo: Ext.getBody(),
    /// items: [{
    /// xtype: &#39;numberfield&#39;,
    /// anchor: &#39;100%&#39;,
    /// name: &#39;age&#39;,
    /// fieldLabel: &#39;Age&#39;,
    /// minValue: 0, //prevents negative numbers
    /// // Remove spinner buttons, and arrow key and mouse wheel listeners
    /// hideTrigger: true,
    /// keyNavEnabled: false,
    /// mouseWheelEnabled: false
    /// }]
    /// });
    /// Using Step Ext.create(&#39;Ext.form.Panel&#39;, {
    /// renderTo: Ext.getBody(),
    /// title: &#39;Step&#39;,
    /// width: 300,
    /// bodyPadding: 10,
    /// items: [{
    /// xtype: &#39;numberfield&#39;,
    /// anchor: &#39;100%&#39;,
    /// name: &#39;evens&#39;,
    /// fieldLabel: &#39;Even Numbers&#39;,
    /// // Set step so it skips every other number
    /// step: 2,
    /// value: 0,
    /// // Add change handler to force user-entered numbers to evens
    /// listeners: {
    /// change: function(field, value) {
    /// value = parseInt(value, 10);
    /// field.setValue(value + value % 2);
    /// }
    /// }
    /// }]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Number : Spinner, Labelable, Ext.form.field.Field, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Runs all of Number's validations and returns an array of any errors. ...
        /// </summary>
        public new JsArray getErrors(object value){return null;}
        /// <summary>
        /// Replaces any existing maxValue with the new value. ...
        /// </summary>
        public object setMaxValue(JsNumber value){return null;}
        /// <summary>
        /// Replaces any existing minValue with the new value. ...
        /// </summary>
        public object setMinValue(JsNumber value){return null;}
        public Number(Ext.form.field.NumberConfig config){}
        public Number(){}
    }
    #endregion
    #region NumberConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NumberConfig : SpinnerConfig
    {
        public bool allowDecimals{get;set;}
        /// <summary>
        /// True to automatically strip not allowed characters from the field. ...
        /// </summary>
        public bool autoStripChars{get;set;}
        public JsString baseChars{get;set;}
        public JsNumber decimalPrecision{get;set;}
        public JsString decimalSeparator{get;set;}
        /// <summary>
        /// Error text to display if the maximum value validation fails (defaults to 'The maximum
        /// value for this field is {maxVal...
        /// </summary>
        public JsString maxText{get;set;}
        /// <summary>
        /// The maximum allowed value (defaults to Number.MAX_VALUE). ...
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// Error text to display if the minimum value validation fails (defaults to 'The minimum
        /// value for this field is {minVal...
        /// </summary>
        public JsString minText{get;set;}
        /// <summary>
        /// The minimum allowed value (defaults to Number.NEGATIVE_INFINITY). ...
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// Error text to display if the value is not a valid number. ...
        /// </summary>
        public JsString nanText{get;set;}
        /// <summary>
        /// Error text to display if the value is negative and minValue is set to
        /// 0. ...
        /// </summary>
        public JsString negativeText{get;set;}
        /// <summary>
        /// Specifies a numeric interval by which the field's value will be incremented or
        /// decremented when the user invokes the ...
        /// </summary>
        public JsNumber step{get;set;}
    }
    #endregion
    #region NumberEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class NumberEvents : SpinnerEvents
    {
    }
    #endregion
}
#endregion
