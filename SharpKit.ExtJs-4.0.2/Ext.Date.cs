//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:51:01
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region Date
    /// <summary>
    /// A set of useful static methods to deal with date
    /// Note that if Ext.Date is required and loaded, it will copy all methods / properties to
    /// this object for convenience The date parsing and formatting syntax contains a subset of
    /// PHP&#39;s date() function, and the formats that are
    /// supported will provide results equivalent to their PHP versions. The following is a list of all currently supported formats:
    /// Format  Description                                                               Example returned values
    /// ------  -----------------------------------------------------------------------   -----------------------
    /// d     Day of the month, 2 digits with leading zeros                             01 to 31
    /// D     A short textual representation of the day of the week                     Mon to Sun
    /// j     Day of the month without leading zeros                                    1 to 31
    /// l     A full textual representation of the day of the week                      Sunday to Saturday
    /// N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
    /// S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
    /// w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
    /// z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
    /// W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
    /// F     A full textual representation of a month, such as January or March        January to December
    /// m     Numeric representation of a month, with leading zeros                     01 to 12
    /// M     A short textual representation of a month                                 Jan to Dec
    /// n     Numeric representation of a month, without leading zeros                  1 to 12
    /// t     Number of days in the given month                                         28 to 31
    /// L     Whether it&amp;#39;s a leap year                                                  1 if it is a leap year, 0 otherwise.
    /// o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
    /// belongs to the previous or next year, that year is used instead)
    /// Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
    /// y     A two digit representation of a year                                      Examples: 99 or 03
    /// a     Lowercase Ante meridiem and Post meridiem                                 am or pm
    /// A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
    /// g     12-hour format of an hour without leading zeros                           1 to 12
    /// G     24-hour format of an hour without leading zeros                           0 to 23
    /// h     12-hour format of an hour with leading zeros                              01 to 12
    /// H     24-hour format of an hour with leading zeros                              00 to 23
    /// i     Minutes, with leading zeros                                               00 to 59
    /// s     Seconds, with leading zeros                                               00 to 59
    /// u     Decimal fraction of a second                                              Examples:
    /// (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
    /// 100 (i.e. 0.100s) or
    /// 999 (i.e. 0.999s) or
    /// 999876543210 (i.e. 0.999876543210s)
    /// O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
    /// P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
    /// T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
    /// Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
    /// c     ISO 8601 date
    /// Notes:                                                                    Examples:
    /// 1) If unspecified, the month / day defaults to the current month / day,   1991 or
    /// the time defaults to midnight, while the timezone defaults to the      1992-10 or
    /// browser&#39;s timezone. If a time is specified, it must include both hours 1993-09-20 or
    /// and minutes. The &quot;T&quot; delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
    /// are optional.                                                          1995-07-18T17:21:28-02:00 or
    /// 2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
    /// least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
    /// of digits allowed), and may be delimited by either a &#39;.&#39; or a &#39;,&#39;      1998-04-15T20:24:31.2468Z or
    /// Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
    /// date-time granularity which are supported, or see                         2000-02-13T21:25:33
    /// http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
    /// U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
    /// MS    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
    /// \/Date(1238606590509+0800)\/
    /// Example usage (note that you must escape format specifiers with &#39;\&#39; to render them as character literals): // Sample date:
    /// // &#39;Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)&#39;
    /// var dt = new Date(&#39;1/10/2007 03:05:01 PM GMT-0600&#39;);
    /// console.log(Ext.Date.format(dt, &#39;Y-m-d&#39;));                          // 2007-01-10
    /// console.log(Ext.Date.format(dt, &#39;F j, Y, g:i a&#39;));                  // January 10, 2007, 3:05 pm
    /// console.log(Ext.Date.format(dt, &#39;l, \\t\\he jS \\of F Y h:i:s A&#39;)); // Wednesday, the 10th of January 2007 03:05:01 PM
    /// Here are some standard date/time patterns that you might find helpful.  They
    /// are not part of the source of Ext.Date, but to use them you can simply copy this
    /// block of code into any script that is included after Ext.Date and they will also become
    /// globally available on the Date object.  Feel free to add or remove patterns as needed in your code. Ext.Date.patterns = {
    /// ISO8601Long:&quot;Y-m-d H:i:s&quot;,
    /// ISO8601Short:&quot;Y-m-d&quot;,
    /// ShortDate: &quot;n/j/Y&quot;,
    /// LongDate: &quot;l, F d, Y&quot;,
    /// FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
    /// MonthDay: &quot;F d&quot;,
    /// ShortTime: &quot;g:i A&quot;,
    /// LongTime: &quot;g:i:s A&quot;,
    /// SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
    /// UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
    /// YearMonth: &quot;F, Y&quot;
    /// };
    /// Example usage: var dt = new Date();
    /// console.log(Ext.Date.format(dt, Ext.Date.patterns.ShortDate));
    /// Developer-written, custom formats may be used by supplying both a formatting and a parsing function
    /// which perform to specialized requirements. The functions are stored in parseFunctions and formatFunctions.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date
    {
        /// <summary>
        /// Provides a convenient method for performing basic date arithmetic. ...
        /// </summary>
        public JsDate add(JsDate date, JsString interval, JsNumber value){return null;}
        /// <summary>
        /// Checks if a date falls on or between the given start and end dates. ...
        /// </summary>
        public bool between(JsDate date, JsDate start, JsDate end){return false;}
        /// <summary>
        /// Attempts to clear all time information from this Date by setting the time to midnight of the same day,
        /// automatically ...
        /// </summary>
        public JsDate clearTime(JsDate date, bool clone){return null;}
        /// <summary>
        /// Creates and returns a new Date instance with the exact same date value as the called instance. ...
        /// </summary>
        public JsDate clone(JsDate date){return null;}
        /// <summary>
        /// Formats a date given the supplied format string. ...
        /// </summary>
        public JsString format(JsDate date, JsString format){return null;}
        /// <summary>
        /// Get the numeric day number of the year, adjusted for leap year. ...
        /// </summary>
        public JsNumber getDayOfYear(JsDate date){return null;}
        /// <summary>
        /// Get the number of days in the current month, adjusted for leap year. ...
        /// </summary>
        public JsNumber getDaysInMonth(JsDate date){return null;}
        /// <summary>
        /// Returns the number of milliseconds between two dates ...
        /// </summary>
        public JsNumber getElapsed(JsDate dateA, JsDate dateB=null){return null;}
        /// <summary>
        /// Get the date of the first day of the month in which this date resides. ...
        /// </summary>
        public JsDate getFirstDateOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the first day of the current month, adjusted for leap year. ...
        /// </summary>
        public JsNumber getFirstDayOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the offset from GMT of the current date (equivalent to the format specifier 'O'). ...
        /// </summary>
        public JsString getGMTOffset(JsDate date, bool colon=false){return null;}
        /// <summary>
        /// Get the date of the last day of the month in which this date resides. ...
        /// </summary>
        public JsDate getLastDateOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the last day of the current month, adjusted for leap year. ...
        /// </summary>
        public JsNumber getLastDayOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the English ordinal suffix of the current day (equivalent to the format specifier 'S'). ...
        /// </summary>
        public JsString getSuffix(JsDate date){return null;}
        /// <summary>
        /// Get the timezone abbreviation of the current date (equivalent to the format specifier 'T'). ...
        /// </summary>
        public JsString getTimezone(JsDate date){return null;}
        /// <summary>
        /// Get the numeric ISO-8601 week number of the year. ...
        /// </summary>
        public JsNumber getWeekOfYear(JsDate date){return null;}
        /// <summary>
        /// Checks if the current date is affected by Daylight Saving Time (DST). ...
        /// </summary>
        public bool isDST(JsDate date){return false;}
        /// <summary>
        /// Checks if the current date falls within a leap year. ...
        /// </summary>
        public bool isLeapYear(JsDate date){return false;}
        /// <summary>
        /// Returns the current timestamp ...
        /// </summary>
        public JsDate now(){return null;}
    }
    #endregion
    #region DateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DateConfig
    {
    }
    #endregion
    #region DateEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DateEvents
    {
    }
    #endregion
}
#endregion
