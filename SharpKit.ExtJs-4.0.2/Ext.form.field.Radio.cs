//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:25
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form.field
namespace Ext.form.field
{
    #region Radio
    /// <summary>
    /// Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked
    /// at a time within a group of radios with the same name. Labeling:
    /// In addition to the standard field labeling options, radio buttons
    /// may be given an optional boxLabel which will be displayed immediately to the right of the input. Also
    /// see Ext.form.RadioGroup for a convenient method of grouping related radio buttons. Values:
    /// The main value of a Radio field is a boolean, indicating whether or not the radio is checked. The following values will check the radio:
    /// true &#39;true&#39; &#39;1&#39; &#39;on&#39; Any other value will uncheck it. In addition to the main boolean value, you may also specify a separate inputValue. This will be sent
    /// as the parameter value when the form is submitted. You will want to set this
    /// value if you have multiple radio buttons with the same name, as is almost always the case.
    /// Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title      : &#39;Order Form&#39;,
    /// width      : 300,
    /// bodyPadding: 10,
    /// renderTo   : Ext.getBody(),
    /// items: [
    /// {
    /// xtype      : &#39;fieldcontainer&#39;,
    /// fieldLabel : &#39;Size&#39;,
    /// defaultType: &#39;radiofield&#39;,
    /// defaults: {
    /// flex: 1
    /// },
    /// layout: &#39;hbox&#39;,
    /// items: [
    /// {
    /// boxLabel  : &#39;M&#39;,
    /// name      : &#39;size&#39;,
    /// inputValue: &#39;m&#39;,
    /// id        : &#39;radio1&#39;
    /// }, {
    /// boxLabel  : &#39;L&#39;,
    /// name      : &#39;size&#39;,
    /// inputValue: &#39;l&#39;,
    /// id        : &#39;radio2&#39;
    /// }, {
    /// boxLabel  : &#39;XL&#39;,
    /// name      : &#39;size&#39;,
    /// inputValue: &#39;xl&#39;,
    /// id        : &#39;radio3&#39;
    /// }
    /// ]
    /// },
    /// {
    /// xtype      : &#39;fieldcontainer&#39;,
    /// fieldLabel : &#39;Color&#39;,
    /// defaultType: &#39;radiofield&#39;,
    /// defaults: {
    /// flex: 1
    /// },
    /// layout: &#39;hbox&#39;,
    /// items: [
    /// {
    /// boxLabel  : &#39;Blue&#39;,
    /// name      : &#39;color&#39;,
    /// inputValue: &#39;blue&#39;,
    /// id        : &#39;radio4&#39;
    /// }, {
    /// boxLabel  : &#39;Grey&#39;,
    /// name      : &#39;color&#39;,
    /// inputValue: &#39;grey&#39;,
    /// id        : &#39;radio5&#39;
    /// }, {
    /// boxLabel  : &#39;Black&#39;,
    /// name      : &#39;color&#39;,
    /// inputValue: &#39;black&#39;,
    /// id        : &#39;radio6&#39;
    /// }
    /// ]
    /// }
    /// ],
    /// bbar: [
    /// {
    /// text: &#39;Smaller Size&#39;,
    /// handler: function() {
    /// var radio1 = Ext.getCmp(&#39;radio1&#39;),
    /// radio2 = Ext.getCmp(&#39;radio2&#39;),
    /// radio3 = Ext.getCmp(&#39;radio3&#39;);
    /// //if L is selected, change to M
    /// if (radio2.getValue()) {
    /// radio1.setValue(true);
    /// return;
    /// }
    /// //if XL is selected, change to L
    /// if (radio3.getValue()) {
    /// radio2.setValue(true);
    /// return;
    /// }
    /// //if nothing is set, set size to S
    /// radio1.setValue(true);
    /// }
    /// },
    /// {
    /// text: &#39;Larger Size&#39;,
    /// handler: function() {
    /// var radio1 = Ext.getCmp(&#39;radio1&#39;),
    /// radio2 = Ext.getCmp(&#39;radio2&#39;),
    /// radio3 = Ext.getCmp(&#39;radio3&#39;);
    /// //if M is selected, change to L
    /// if (radio1.getValue()) {
    /// radio2.setValue(true);
    /// return;
    /// }
    /// //if L is selected, change to XL
    /// if (radio2.getValue()) {
    /// radio3.setValue(true);
    /// return;
    /// }
    /// //if nothing is set, set size to XL
    /// radio3.setValue(true);
    /// }
    /// },
    /// &#39;-&#39;,
    /// {
    /// text: &#39;Select color&#39;,
    /// menu: {
    /// indent: false,
    /// items: [
    /// {
    /// text: &#39;Blue&#39;,
    /// handler: function() {
    /// var radio = Ext.getCmp(&#39;radio4&#39;);
    /// radio.setValue(true);
    /// }
    /// },
    /// {
    /// text: &#39;Grey&#39;,
    /// handler: function() {
    /// var radio = Ext.getCmp(&#39;radio5&#39;);
    /// radio.setValue(true);
    /// }
    /// },
    /// {
    /// text: &#39;Black&#39;,
    /// handler: function() {
    /// var radio = Ext.getCmp(&#39;radio6&#39;);
    /// radio.setValue(true);
    /// }
    /// }
    /// ]
    /// }
    /// }
    /// ]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Radio : Checkbox, Labelable, Ext.form.field.Field, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// If this radio is part of a group, it will return the selected value ...
        /// </summary>
        public JsString getGroupValue(){return null;}
        /// <summary>
        /// Returns the submit value for the checkbox which can be used when submitting forms. ...
        /// </summary>
        public new object getSubmitValue(){return null;}
        /// <summary>
        /// Sets either the checked/unchecked status of this Radio, or, if a string value
        /// is passed, checks a sibling Radio of th...
        /// </summary>
        public new Ext.form.field.Field setValue(object value){return null;}
    }
    #endregion
    #region RadioConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RadioConfig : CheckboxConfig
    {
    }
    #endregion
    #region RadioEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class RadioEvents : CheckboxEvents
    {
    }
    #endregion
}
#endregion
