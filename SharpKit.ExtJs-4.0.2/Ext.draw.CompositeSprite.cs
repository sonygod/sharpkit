//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.draw
namespace Ext.draw
{
    #region CompositeSprite
    /// <summary>
    /// A composite Sprite handles a group of sprites with common methods to a sprite
    /// such as hide, show, setAttributes. These methods are applied to the set of sprites
    /// added to the group. CompositeSprite extends Ext.util.MixedCollection so you can use the same methods
    /// in MixedCollection to iterate through sprites, add and remove elements, etc. In order to create a CompositeSprite, one has to provide a handle to the surface where it is
    /// rendered: var group = Ext.create(&#39;Ext.draw.CompositeSprite&#39;, {
    /// surface: drawComponent.surface
    /// });
    /// Then just by using MixedCollection methods it&#39;s possible to add Ext.draw.Sprites: group.add(sprite1);
    /// group.add(sprite2);
    /// group.add(sprite3);
    /// And then apply common Sprite methods to them: group.setAttributes({
    /// fill: &#39;#f00&#39;
    /// }, true);
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CompositeSprite : Ext.util.MixedCollection, Ext.util.Animate, Ext.util.Sortable, Ext.util.Observable
    {
        /// <summary>
        /// Destroys the SpriteGroup ...
        /// </summary>
        public object destroy(){return null;}
        /// <summary>
        /// Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
        /// </summary>
        public object getActiveAnimation(){return null;}
        /// <summary>
        /// Returns the group bounding box. ...
        /// </summary>
        public object getBBox(){return null;}
        /// <summary>
        /// Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
        /// </summary>
        public object hasActiveFx(){return null;}
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on this object are
        /// run in sequence. ...
        /// </summary>
        public object sequenceFx(){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains
        /// any additional effects that ...
        /// </summary>
        public Ext.core.Element stopAnimation(){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains
        /// any additional effects that ...
        /// </summary>
        public Ext.core.Element stopFx(){return null;}
        /// <summary>
        /// Ensures that all effects queued after syncFx is called on this object are
        /// run concurrently. ...
        /// </summary>
        public object syncFx(){return null;}
    }
    #endregion
    #region CompositeSpriteConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CompositeSpriteConfig
    {
    }
    #endregion
    #region CompositeSpriteEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class CompositeSpriteEvents
    {
    }
    #endregion
}
#endregion
