//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region Template
    /// <summary>
    /// Represents an HTML fragment template. Templates may be precompiled
    /// for greater performance. An instance of this class may be created by passing to the constructor either
    /// a single argument, or multiple arguments:  single argument : String/Array
    /// The single argument may be either a String or an Array: String :  var t = new Ext.Template(&quot;&amp;lt;div&gt;Hello {0}.&amp;lt;/div&gt;&quot;);
    /// t.append(&#39;some-element&#39;, [&#39;foo&#39;]);
    /// Array :
    /// An Array will be combined with join(&#39;&#39;).
    /// var t = new Ext.Template([
    /// &#39;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&#39;,
    /// &#39;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;&#39;,
    /// &#39;&amp;lt;/div&amp;gt;&#39;,
    /// ]);
    /// t.compile();
    /// t.append(&#39;some-element&#39;, {id: &#39;myid&#39;, cls: &#39;myclass&#39;, name: &#39;foo&#39;, value: &#39;bar&#39;});
    /// multiple arguments : String, Object, Array, ...
    /// Multiple arguments will be combined with join(&#39;&#39;).
    /// var t = new Ext.Template(
    /// &#39;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&#39;,
    /// &#39;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name} {value}&amp;lt;/span&amp;gt;&#39;,
    /// &#39;&amp;lt;/div&amp;gt;&#39;,
    /// // a configuration object:
    /// {
    /// compiled: true,      // compile immediately
    /// }
    /// );
    /// Notes:  For a list of available format functions, see Ext.util.Format. disableFormats reduces apply time
    /// when no formatting is required.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Template : Ext.Base
    {
        /// <summary>
        /// Applies the supplied values to the template and appends
        /// the new node(s) to the specified el. ...
        /// </summary>
        public object append(object el, object values, bool returnElement=false){return null;}
        /// <summary>
        /// Alias for applyTemplate
        /// Returns an HTML fragment of this template with the specified values applied. ...
        /// </summary>
        public JsString apply(object values){return null;}
        /// <summary>
        /// Returns an HTML fragment of this template with the specified values applied. ...
        /// </summary>
        public JsString applyTemplate(object values){return null;}
        /// <summary>
        /// Compiles the template into an internal function, eliminating the RegEx overhead. ...
        /// </summary>
        public Ext.Template compile(){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) after el. ...
        /// </summary>
        public object insertAfter(object el, object values, bool returnElement=false){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) before el. ...
        /// </summary>
        public object insertBefore(object el, object values, bool returnElement=false){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) as the first child of el. ...
        /// </summary>
        public object insertFirst(object el, object values, bool returnElement=false){return null;}
        /// <summary>
        /// Applies the supplied values to the template and overwrites the content of el with the new node(s). ...
        /// </summary>
        public object overwrite(object el, object values, bool returnElement=false){return null;}
        /// <summary>
        /// Sets the HTML used as the template and optionally compiles it. ...
        /// </summary>
        public Ext.Template set(JsString html, bool compile=false){return null;}
        public Template(Ext.TemplateConfig config){}
        public Template(){}
    }
    #endregion
    #region TemplateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TemplateConfig : Ext.BaseConfig
    {
        /// <summary>
        /// true to disable format functions in the template. ...
        /// </summary>
        public bool disableFormats{get;set;}
    }
    #endregion
    #region TemplateEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class TemplateEvents : Ext.BaseEvents
    {
    }
    #endregion
}
#endregion
