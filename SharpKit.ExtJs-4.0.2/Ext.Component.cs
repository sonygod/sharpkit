//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region Component
    /// <summary>
    /// Base class for all Ext components.  All subclasses of Component may participate in the automated
    /// Ext component lifecycle of creation, rendering and destruction which is provided by the Container class.
    /// Components may be added to a Container through the items config option at the time the Container is created,
    /// or they may be added dynamically via the add method. The Component base class has built-in support for basic hide/show and enable/disable and size control behavior. All Components are registered with the Ext.ComponentManager on construction so that they can be referenced at any time via
    /// Ext.getCmp, passing the id. All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component. See the Creating new UI controls tutorial for details on how
    /// and to either extend or augment ExtJs base classes to create custom Components. Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
    /// xtype like getXType and isXType. This is the list of all valid xtypes: xtype            Class
    /// -------------    ------------------
    /// button           Ext.button.Button
    /// buttongroup      Ext.container.ButtonGroup
    /// colorpalette     Ext.picker.Color
    /// component        Ext.Component
    /// container        Ext.container.Container
    /// cycle            Ext.button.Cycle
    /// dataview         Ext.view.View
    /// datepicker       Ext.picker.Date
    /// editor           Ext.Editor
    /// editorgrid       Ext.grid.plugin.Editing
    /// grid             Ext.grid.Panel
    /// multislider      Ext.slider.Multi
    /// panel            Ext.panel.Panel
    /// progress         Ext.ProgressBar
    /// slider           Ext.slider.Single
    /// spacer           Ext.toolbar.Spacer
    /// splitbutton      Ext.button.Split
    /// tabpanel         Ext.tab.Panel
    /// treepanel        Ext.tree.Panel
    /// viewport         Ext.container.Viewport
    /// window           Ext.window.Window
    /// Toolbar components
    /// ---------------------------------------
    /// paging           Ext.toolbar.Paging
    /// toolbar          Ext.toolbar.Toolbar
    /// tbfill           Ext.toolbar.Fill
    /// tbitem           Ext.toolbar.Item
    /// tbseparator      Ext.toolbar.Separator
    /// tbspacer         Ext.toolbar.Spacer
    /// tbtext           Ext.toolbar.TextItem
    /// Menu components
    /// ---------------------------------------
    /// menu             Ext.menu.Menu
    /// menucheckitem    Ext.menu.CheckItem
    /// menuitem         Ext.menu.Item
    /// menuseparator    Ext.menu.Separator
    /// menutextitem     Ext.menu.Item
    /// Form components
    /// ---------------------------------------
    /// form             Ext.form.Panel
    /// checkbox         Ext.form.field.Checkbox
    /// combo            Ext.form.field.ComboBox
    /// datefield        Ext.form.field.Date
    /// displayfield     Ext.form.field.Display
    /// field            Ext.form.field.Base
    /// fieldset         Ext.form.FieldSet
    /// hidden           Ext.form.field.Hidden
    /// htmleditor       Ext.form.field.HtmlEditor
    /// label            Ext.form.Label
    /// numberfield      Ext.form.field.Number
    /// radio            Ext.form.field.Radio
    /// radiogroup       Ext.form.RadioGroup
    /// textarea         Ext.form.field.TextArea
    /// textfield        Ext.form.field.Text
    /// timefield        Ext.form.field.Time
    /// trigger          Ext.form.field.Trigger
    /// Chart components
    /// ---------------------------------------
    /// chart            Ext.chart.Chart
    /// barchart         Ext.chart.series.Bar
    /// columnchart      Ext.chart.series.Column
    /// linechart        Ext.chart.series.Line
    /// piechart         Ext.chart.series.Pie
    /// It should not usually be necessary to instantiate a Component because there are provided subclasses which implement specialized Component
    /// use cases which over most application needs. However it is possible to instantiate a base Component, and it will be renderable,
    /// or will particpate in layouts as the child item of a Container:
    /// Ext.create(&#39;Ext.Component&#39;, {
    /// html: &#39;Hello world!&#39;,
    /// width: 300,
    /// height: 200,
    /// padding: 20,
    /// style: {
    /// color: &#39;#FFFFFF&#39;,
    /// backgroundColor:&#39;#000000&#39;
    /// },
    /// renderTo: Ext.getBody()
    /// });
    /// The Component above creates its encapsulating div upon render, and use the configured HTML as content. More complex
    /// internal structure may be created using the renderTpl configuration, although to display database-derived mass
    /// data, it is recommended that an ExtJS data-backed Component such as a View, or
    /// GridPanel, or TreePanel be used.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Component : AbstractComponent, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Creates new Component. ...
        /// </summary>
        public Component(object config) : base(null){}
        /// <summary>
        /// Aligns this floating Component to the specified element ...
        /// </summary>
        public Ext.Component alignTo(object element, JsString position, JsArray offsets=null){return null;}
        /// <summary>
        /// Bubbles up the component/container heirarchy, calling the specified function with each component. ...
        /// </summary>
        public Ext.Component bubble(JsAction fn, object scope=null, JsArray args=null){return null;}
        /// <summary>
        /// Center this Component in its container. ...
        /// </summary>
        public Ext.Component center(){return null;}
        /// <summary>
        /// Clone the current component using the original config values passed into this instance by default. ...
        /// </summary>
        public Ext.Component cloneConfig(object overrides){return null;}
        /// <summary>
        /// Moves this floating Component into a constrain region. ...
        /// </summary>
        public object doConstrain(object constrainTo){return null;}
        /// <summary>
        /// Find a container above this component at any level by a custom function. ...
        /// </summary>
        public Ext.container.Container findParentBy(JsAction fn){return null;}
        /// <summary>
        /// Find a container above this component at any level by xtype or class
        /// See also the up method. ...
        /// </summary>
        public Ext.container.Container findParentByType(object xtype){return null;}
        /// <summary>
        /// Try to focus this component. ...
        /// </summary>
        public Ext.Component focus(bool selectText=false, object delay=null){return null;}
        /// <summary>
        /// Gets the current box measurements of the component's underlying element. ...
        /// </summary>
        public object getBox(bool local=false){return null;}
        /// <summary>
        /// Gets the current XY position of the component's underlying element. ...
        /// </summary>
        public JsArray getPosition(bool local=false){return null;}
        /// <summary>
        /// Gets the xtype for this component as registered with Ext.ComponentManager. ...
        /// </summary>
        public JsString getXType(){return null;}
        /// <summary>
        /// Hides this Component, setting it to invisible using the configured hideMode. ...
        /// </summary>
        public Ext.Component hide(object animateTarget, JsAction callback=null, object scope=null){return null;}
        /// <summary>
        /// This method is called internally by Ext.ZIndexManager to signal that a floating
        /// Component has either been moved to th...
        /// </summary>
        public object setActive(bool active, Ext.Component newActive){return null;}
        /// <summary>
        /// Sets the overflow on the content element of the component. ...
        /// </summary>
        public Ext.Component setAutoScroll(bool scroll){return null;}
        /// <summary>
        /// Sets the page XY position of the component. ...
        /// </summary>
        public Ext.Component setPagePosition(JsNumber x, JsNumber y, object animate){return null;}
        /// <summary>
        /// Sets the left and top of the component. ...
        /// </summary>
        public Ext.Component setPosition(JsNumber left, JsNumber top, object animate){return null;}
        /// <summary>
        /// Shows this Component, rendering it first if autoRender or floating are true. ...
        /// </summary>
        public Ext.Component show(object animateTarget, JsAction callback=null, object scope=null){return null;}
        /// <summary>
        /// Sends this Component to the back of (lower z-index than) any other visible windows ...
        /// </summary>
        public Ext.Component toBack(){return null;}
        /// <summary>
        /// Brings this floating Component to the front of any other visible, floating Components managed by the same ZIndexManag...
        /// </summary>
        public Ext.Component toFront(bool preventFocus=false){return null;}
        /// <summary>
        /// Sets the current box measurements of the component's underlying element. ...
        /// </summary>
        public Ext.Component updateBox(object box){return null;}
        /// <summary>
        /// Optional. ...
        /// </summary>
        public Ext.container.Container floatParent{get;set;}
        /// <summary>
        /// Optional. ...
        /// </summary>
        public ZIndexManager zIndexManager{get;set;}
        public Component(Ext.ComponentConfig config) : base(null){}
        public Component() : base(null){}
    }
    #endregion
    #region ComponentConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentConfig : AbstractComponentConfig
    {
        /// <summary>
        /// true to use overflow:'auto' on the components layout element and show scroll bars automatically when
        /// necessary, false...
        /// </summary>
        public bool autoScroll{get;set;}
        /// <summary>
        /// Specify as true to make a floating Component draggable using the Component's encapsulating element as the drag handle. ...
        /// </summary>
        public new object draggable{get;set;}
        /// <summary>
        /// Specify as true to float the Component outside of the document flow using CSS absolute positioning. ...
        /// </summary>
        public new bool floating{get;set;}
        /// <summary>
        /// Specifies whether the floated component should be automatically focused when it is
        /// brought to the front. ...
        /// </summary>
        public bool focusOnToFront{get;set;}
        /// <summary>
        /// Only valid when a sibling element of a Splitter within a VBox or
        /// HBox layout. ...
        /// </summary>
        public bool maintainFlex{get;set;}
        /// <summary>
        /// Specify as true to apply a Resizer to this Component
        /// after rendering. ...
        /// </summary>
        public object resizable{get;set;}
        /// <summary>
        /// A valid Ext.resizer.Resizer handles config string (defaults to 'all'). ...
        /// </summary>
        public JsString resizeHandles{get;set;}
        /// <summary>
        /// Specifies whether the floating component should be given a shadow. ...
        /// </summary>
        public object shadow{get;set;}
        /// <summary>
        /// True to automatically call toFront when the show method is called
        /// on an already visible, floating component (default ...
        /// </summary>
        public bool toFrontOnShow{get;set;}
    }
    #endregion
    #region ComponentEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentEvents : AbstractComponentEvents
    {
    }
    #endregion
}
#endregion
