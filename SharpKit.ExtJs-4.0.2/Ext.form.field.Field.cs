//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form.field
namespace Ext.form.field
{
    #region Field
    /// <summary>
    /// This mixin provides a common interface for the logical behavior and state of form fields, including:  Getter and setter methods for field values Events and methods for tracking value and validity changes Methods for triggering validation  *NOTE**: When implementing custom fields, it is most likely that you will want to extend the Ext.form.field.Base
    /// component class rather than using this mixin directly, as BaseField contains additional logic for generating an
    /// actual DOM complete with label and error message display and a form input field,
    /// plus methods that bind the Field value getters and setters to the input field&#39;s value. If you do want to implement this mixin directly and don&#39;t want to extend Ext.form.field.Base, then
    /// you will most likely want to override the following methods with custom implementations: getValue,
    /// setValue, and getErrors. Other methods may be overridden as needed but their base
    /// implementations should be sufficient for common cases. You will also need to make sure that initField
    /// is called during the component&#39;s initialization.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial interface Field
    {
        /// <summary>
        /// Checks whether the value of the field has changed since the last time it was checked. ...
        /// </summary>
        object checkChange();
        /// <summary>
        /// Checks the isDirty state of the field and if it has changed since the last time
        /// it was checked, fires the dirtychange...
        /// </summary>
        object checkDirty();
        /// <summary>
        /// Clear any invalid styles/messages for this field. ...
        /// </summary>
        object clearInvalid();
        /// <summary>
        /// Only relevant if the instance's isFileUpload method returns true. ...
        /// </summary>
        HTMLInputElement extractFileInput();
        /// <summary>
        /// Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when
        /// Ext.form.Basic.updateRe...
        /// </summary>
        object getModelData();
        /// <summary>
        /// Returns the name attribute of the field. ...
        /// </summary>
        JsString getName();
        /// <summary>
        /// Returns the parameter(s) that would be included in a standard form submit for this field. ...
        /// </summary>
        object getSubmitData();
        /// <summary>
        /// Returns the current data value of the field. ...
        /// </summary>
        object getValue();
        /// <summary>
        /// Initializes this Field mixin on the current instance. ...
        /// </summary>
        object initField();
        /// <summary>
        /// Initializes the field's value based on the initial config. ...
        /// </summary>
        object initValue();
        /// <summary>
        /// Returns true if the value of this Field has been changed from its originalValue. ...
        /// </summary>
        bool isDirty();
        /// <summary>
        /// Returns whether this Field is a file upload field; if it returns true, forms will use
        /// special techniques for submitti...
        /// </summary>
        bool isFileUpload();
        /// <summary>
        /// Returns whether or not the field value is currently valid by validating the
        /// field's current value. ...
        /// </summary>
        bool isValid();
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages. ...
        /// </summary>
        object reset();
        /// <summary>
        /// Resets the field's originalValue property so it matches the current value. ...
        /// </summary>
        object resetOriginalValue();
        /// <summary>
        /// Returns whether or not the field value is currently valid by validating the
        /// field's current value, and fires the vali...
        /// </summary>
        bool validate();
        /// <summary>
        /// Flag denoting that this component is a Field. ...
        /// </summary>
        bool isFormField{get;set;}
        /// <summary>
        /// The original value of the field as configured in the value configuration, or as loaded by
        /// the last form load operatio...
        /// </summary>
        object originalValue{get;set;}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        /// <summary>
        /// True to disable the field (defaults to false). ...
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// The name of the field (defaults to undefined). ...
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// Setting this to false will prevent the field from being
        /// submitted even when it is not disabled. ...
        /// </summary>
        public bool submitValue{get;set;}
        /// <summary>
        /// Specifies whether this field should be validated immediately whenever a change in its value is detected. ...
        /// </summary>
        public bool validateOnChange{get;set;}
        public object value{get;set;}
    }
    #endregion
    #region FieldEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldEvents
    {
        /// <summary>
        /// Fires when a user-initiated change is detected in the value of the field. ...
        /// </summary>
        public static JsString change="change";
        /// <summary>
        /// Fires when a change in the field's isDirty state is detected. ...
        /// </summary>
        public static JsString dirtychange="dirtychange";
        /// <summary>
        /// Fires when a change in the field's validity is detected. ...
        /// </summary>
        public static JsString validitychange="validitychange";
    }
    #endregion
}
#endregion
