//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:52:01
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.state
namespace Ext.state
{
    #region Stateful
    /// <summary>
    /// A mixin for being able to save the state of an object to an underlying
    /// Ext.state.Provider.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial interface Stateful : Ext.util.Observable
    {
        /// <summary>
        /// Add events that will trigger the state to be saved. ...
        /// </summary>
        object addStateEvents(object events);
        /// <summary>
        /// Applies the state to the object. ...
        /// </summary>
        object applyState(object state);
        /// <summary>
        /// Destroys this stateful object. ...
        /// </summary>
        object destroy();
        /// <summary>
        /// Gets the current state of the object. ...
        /// </summary>
        object getState();
        /// <summary>
        /// Gets the state id for this object. ...
        /// </summary>
        JsString getStateId();
    }
    #endregion
    #region StatefulConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class StatefulConfig
    {
        /// <summary>
        /// A buffer to be applied if many state events are fired within
        /// a short period. ...
        /// </summary>
        public JsNumber saveBuffer{get;set;}
        /// <summary>
        /// An array of events that, when fired, should trigger this object to
        /// save its state (defaults to none). ...
        /// </summary>
        public JsArray stateEvents{get;set;}
        /// <summary>
        /// The unique id for this object to use for state management purposes. ...
        /// </summary>
        public JsString stateId{get;set;}
        /// <summary>
        /// A flag which causes the object to attempt to restore the state of
        /// internal properties from a saved state on startup. ...
        /// </summary>
        public bool stateful{get;set;}
    }
    #endregion
    #region StatefulEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class StatefulEvents
    {
        /// <summary>
        /// Fires before the state of the object is restored. ...
        /// </summary>
        public static JsString beforestaterestore="beforestaterestore";
        /// <summary>
        /// Fires before the state of the object is saved to the configured state provider. ...
        /// </summary>
        public static JsString beforestatesave="beforestatesave";
        /// <summary>
        /// Fires after the state of the object is restored. ...
        /// </summary>
        public static JsString staterestore="staterestore";
        /// <summary>
        /// Fires after the state of the object is saved to the configured state provider. ...
        /// </summary>
        public static JsString statesave="statesave";
    }
    #endregion
}
#endregion
