//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.direct
namespace Ext.direct
{
    #region Manager
    /// <summary>
    /// Overview Ext.Direct aims to streamline communication between the client and server
    /// by providing a single interface that reduces the amount of common code
    /// typically required to validate data and handle returned data packets
    /// (reading data, error conditions, etc). The Ext.direct namespace includes several classes for a closer integration
    /// with the server-side. The Ext.data namespace also includes classes for working
    /// with Ext.data.Stores which are backed by data from an Ext.Direct method. Specification For additional information consult the
    /// Ext.Direct Specification. Providers Ext.Direct uses a provider architecture, where one or more providers are
    /// used to transport data to and from the server. There are several providers
    /// that exist in the core at the moment:  JsonProvider for simple JSON operations PollingProvider for repeated requests RemotingProvider exposes server side
    /// on the client.  A provider does not need to be invoked directly, providers are added via
    /// Ext.direct.Manager.addProvider. Router Ext.Direct utilizes a &quot;router&quot; on the server to direct requests from the client
    /// to the appropriate server-side method. Because the Ext.Direct API is completely
    /// platform-agnostic, you could completely swap out a Java based server solution
    /// and replace it with one that uses C# without changing the client side JavaScript
    /// at all. Server side events Custom events from the server may be handled by the client by adding
    /// listeners, for example: {&quot;type&quot;:&quot;event&quot;,&quot;name&quot;:&quot;message&quot;,&quot;data&quot;:&quot;Successfully polled at: 11:19:30 am&quot;}
    /// // add a handler for a &#39;message&#39; event sent by the server
    /// Ext.direct.Manager.on(&#39;message&#39;, function(e){
    /// out.append(String.format(&#39;&amp;lt;p&gt;&amp;lt;i&gt;{0}&amp;lt;/i&gt;&amp;lt;/p&gt;&#39;, e.data));
    /// out.el.scrollTo(&#39;t&#39;, 100000, true);
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Manager : Ext.Base//, Ext.util.Observable
    {
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public static object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public static object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public static object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods. ...
        /// </summary>
        public static object addProvider(object provider){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public static object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public static object clearManagedListeners(){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public static object enableBubble(object events){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public static bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Retrieve a provider by the
        /// id specified when the provider is
        /// added. ...
        /// </summary>
        public static object getProvider(object id){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public static bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public static object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public static object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public static object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public static object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public static object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public static object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Removes the provider. ...
        /// </summary>
        public static Ext.direct.Provider removeProvider(object provider){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public static object resumeEvents(){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public static object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public static object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public Manager(Ext.direct.ManagerConfig config){}
        public Manager(){}
    }
    #endregion
    #region ManagerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ManagerConfig : Ext.BaseConfig
    {
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region ManagerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ManagerEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fires after an event. ...
        /// </summary>
        public static JsString @event="event";
        /// <summary>
        /// Fires after an event exception. ...
        /// </summary>
        public static JsString exception="exception";
    }
    #endregion
}
#endregion
