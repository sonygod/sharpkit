//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region Field
    /// <summary>
    /// Fields are used to define what a Model is. They aren&#39;t instantiated directly - instead, when we create a class
    /// that extends Ext.data.Model, it will automatically create a Field instance for each field configured in a
    /// Model. For example, we might set up a model like this: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [
    /// &#39;name&#39;, &#39;email&#39;,
    /// {name: &#39;age&#39;, type: &#39;int&#39;},
    /// {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;}
    /// ]
    /// });
    /// Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a
    /// couple of different formats here; if we only pass in the string name of the field (as with name and email), the
    /// field is set up with the &#39;auto&#39; type. It&#39;s as if we&#39;d done this instead: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [
    /// {name: &#39;name&#39;, type: &#39;auto&#39;},
    /// {name: &#39;email&#39;, type: &#39;auto&#39;},
    /// {name: &#39;age&#39;, type: &#39;int&#39;},
    /// {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;}
    /// ]
    /// });
    /// Types and conversion The type is important - it&#39;s used to automatically convert data passed to the field into the correct
    /// format. In our example above, the name and email fields used the &#39;auto&#39; type and will just accept anything that is
    /// passed into them. The &#39;age&#39; field had an &#39;int&#39; type however, so if we passed 25.4 this would be rounded to 25. Sometimes a simple type isn&#39;t enough, or we want to perform some processing when we load a Field&#39;s data. We can
    /// do this using a convert function. Here, we&#39;re going to create a new field based on another:  Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [
    /// &#39;name&#39;, &#39;email&#39;,
    /// {name: &#39;age&#39;, type: &#39;int&#39;},
    /// {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;},
    /// {
    /// name: &#39;firstName&#39;,
    /// convert: function(value, record) {
    /// var fullName  = record.get(&#39;name&#39;),
    /// splits    = fullName.split(&quot; &quot;),
    /// firstName = splits[0];
    /// return firstName;
    /// }
    /// }
    /// ]
    /// });
    /// Now when we create a new User, the firstName is populated automatically based on the name:  var ed = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;}, &#39;User&#39;);
    /// console.log(ed.get(&#39;firstName&#39;)); //logs &#39;Ed&#39;, based on our convert function
    /// In fact, if we log out all of the data inside ed, we&#39;ll see this:  console.log(ed.data);
    /// //outputs this:
    /// {
    /// age: 0,
    /// email: &quot;&quot;,
    /// firstName: &quot;Ed&quot;,
    /// gender: &quot;Unknown&quot;,
    /// name: &quot;Ed Spencer&quot;
    /// }
    /// The age field has been given a default of zero because we made it an int type. As an auto field, email has
    /// defaulted to an empty string. When we registered the User model we set gender&#39;s defaultValue to &#39;Unknown&#39;
    /// so we see that now. Let&#39;s correct that and satisfy ourselves that the types work as we expect:  ed.set(&#39;gender&#39;, &#39;Male&#39;);
    /// ed.get(&#39;gender&#39;); //returns &#39;Male&#39;
    /// ed.set(&#39;age&#39;, 25.4);
    /// ed.get(&#39;age&#39;); //returns 25 - we wanted an int, not a float, so no decimal places allowed
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Field
    {
        public Field(Ext.data.FieldConfig config){}
        public Field(){}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        /// <summary>
        /// (Optional) A function which converts the value provided by the Reader into an object that will be stored
        /// in the Model. ...
        /// </summary>
        public JsAction convert{get;set;}
        /// <summary>
        /// (Optional) Used when converting received data into a Date when the type is specified as "date". ...
        /// </summary>
        public JsString dateFormat{get;set;}
        /// <summary>
        /// (Optional) The default value used when a Model is being created by a Reader
        /// when the item referenced by the mapping d...
        /// </summary>
        public object defaultValue{get;set;}
        /// <summary>
        /// (Optional) A path expression for use by the Ext.data.reader.Reader implementation
        /// that is creating the Model to extra...
        /// </summary>
        public object mapping{get;set;}
        /// <summary>
        /// The name by which the field is referenced within the Model. ...
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// False to exclude this field from the Ext.data.Model.modified fields in a model. ...
        /// </summary>
        public bool persist{get;set;}
        /// <summary>
        /// (Optional) Initial direction to sort ("ASC" or  "DESC"). ...
        /// </summary>
        public JsString sortDir{get;set;}
        /// <summary>
        /// (Optional) A function which converts a Field's value to a comparable value in order to ensure
        /// correct sort ordering. ...
        /// </summary>
        public JsAction sortType{get;set;}
        /// <summary>
        /// (Optional) The data type for automatic conversion from received data to the stored value if convert
        /// has not been spec...
        /// </summary>
        public object type{get;set;}
        /// <summary>
        /// (Optional) Use when converting received data into a Number type (either int or float). ...
        /// </summary>
        public bool useNull{get;set;}
    }
    #endregion
    #region FieldEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldEvents
    {
    }
    #endregion
}
#endregion
