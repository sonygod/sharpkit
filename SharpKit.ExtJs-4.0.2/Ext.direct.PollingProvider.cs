//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:51:04
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.direct
namespace Ext.direct
{
    #region PollingProvider
    /// <summary>
    /// Provides for repetitive polling of the server at distinct intervals.
    /// The initial request for data originates from the client, and then is responded to by the
    /// server. All configurations for the PollingProvider should be generated by the server-side
    /// API portion of the Ext.Direct stack. An instance of PollingProvider may be created directly via the new keyword or by simply
    /// specifying type = &#39;polling&#39;.  For example: var pollA = new Ext.direct.PollingProvider({
    /// type:&#39;polling&#39;,
    /// url: &#39;php/pollA.php&#39;,
    /// });
    /// Ext.direct.Manager.addProvider(pollA);
    /// pollA.disconnect();
    /// Ext.direct.Manager.addProvider(
    /// {
    /// type:&#39;polling&#39;,
    /// url: &#39;php/pollB.php&#39;,
    /// id: &#39;pollB-provider&#39;
    /// }
    /// );
    /// var pollB = Ext.direct.Manager.getProvider(&#39;pollB-provider&#39;);
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PollingProvider : JsonProvider, Ext.util.Observable
    {
        /// <summary>
        /// Connect to the server-side and begin the polling process. ...
        /// </summary>
        public new object connect(){return null;}
        /// <summary>
        /// Disconnect from the server-side and stop the polling process. ...
        /// </summary>
        public new object disconnect(){return null;}
    }
    #endregion
    #region PollingProviderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PollingProviderConfig
    {
        public object baseParams{get;set;}
        public JsNumber interval{get;set;}
        /// <summary>
        /// The url which the PollingProvider should contact with each request. ...
        /// </summary>
        public object url{get;set;}
    }
    #endregion
    #region PollingProviderEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class PollingProviderEvents
    {
        /// <summary>
        /// Fired immediately before a poll takes place, an event handler can return false
        /// in order to cancel the poll. ...
        /// </summary>
        public static JsString beforepoll="beforepoll";
        /// <summary>
        /// This event has not yet been implemented. ...
        /// </summary>
        public static JsString poll="poll";
    }
    #endregion
}
#endregion
