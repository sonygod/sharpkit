//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:24
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region Action
    /// <summary>
    /// An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
    /// can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
    /// updates across any components that support the Action interface (primarily Ext.toolbar.Toolbar, Ext.button.Button
    /// and Ext.menu.Menu components). Use a single Action instance as the config object for any number of UI Components which share the same configuration. The
    /// Action not only supplies the configuration, but allows all Components based upon it to have a common set of methods
    /// called at once through a single call to the Action. Any Component that is to be configured with an Action must also support
    /// the following methods: setText(string) setIconCls(string) setDisabled(boolean) setVisible(boolean) setHandler(function). This allows the Action to control its associated Components. Example usage: // Define the shared Action.  Each Component below will have the same
    /// // display text and icon, and will display the same message on click.
    /// var action = new Ext.Action({
    /// text: &#39;Do something&#39;,
    /// handler: function(){
    /// Ext.Msg.alert(&#39;Click&#39;, &#39;You did something.&#39;);
    /// },
    /// iconCls: &#39;do-something&#39;,
    /// itemId: &#39;myAction&#39;
    /// });
    /// var panel = new Ext.panel.Panel({
    /// title: &#39;Actions&#39;,
    /// width: 500,
    /// height: 300,
    /// tbar: [
    /// // Add the Action directly to a toolbar as a menu button
    /// action,
    /// {
    /// text: &#39;Action Menu&#39;,
    /// // Add the Action to a menu as a text item
    /// menu: [action]
    /// }
    /// ],
    /// items: [
    /// // Add the Action to the panel body as a standard button
    /// new Ext.button.Button(action)
    /// ],
    /// renderTo: Ext.getBody()
    /// });
    /// // Change the text for all components using the Action
    /// action.setText(&#39;Something else&#39;);
    /// // Reference an Action through a container using the itemId
    /// var btn = panel.getComponent(&#39;myAction&#39;);
    /// var aRef = btn.baseAction;
    /// aRef.setText(&#39;New text&#39;);
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Action : Ext.Base
    {
        /// <summary>
        /// Creates new Action. ...
        /// </summary>
        public object constructor(object config){return null;}
        /// <summary>
        /// Disables all components configured by this Action. ...
        /// </summary>
        public object disable(){return null;}
        /// <summary>
        /// Executes the specified function once for each Component currently tied to this Action. ...
        /// </summary>
        public object each(JsAction fn, object scope){return null;}
        /// <summary>
        /// Enables all components configured by this Action. ...
        /// </summary>
        public object enable(){return null;}
        /// <summary>
        /// Executes this Action manually using the handler function specified in the original config object
        /// or the handler funct...
        /// </summary>
        public object execute(object arg1=null, object arg2=null, object etc=null){return null;}
        /// <summary>
        /// Gets the icon CSS class currently used by all components configured by this Action. ...
        /// </summary>
        public object getIconCls(){return null;}
        /// <summary>
        /// Gets the text currently displayed by all components configured by this Action. ...
        /// </summary>
        public object getText(){return null;}
        /// <summary>
        /// Hides all components configured by this Action. ...
        /// </summary>
        public object hide(){return null;}
        /// <summary>
        /// Returns true if the components using this Action are currently disabled, else returns false. ...
        /// </summary>
        public object isDisabled(){return null;}
        /// <summary>
        /// Returns true if the components configured by this Action are currently hidden, else returns false. ...
        /// </summary>
        public object isHidden(){return null;}
        /// <summary>
        /// Sets the disabled state of all components configured by this Action. ...
        /// </summary>
        public object setDisabled(bool disabled){return null;}
        /// <summary>
        /// Sets the function that will be called by each Component using this action when its primary event is triggered. ...
        /// </summary>
        public object setHandler(JsAction fn, object scope){return null;}
        /// <summary>
        /// Sets the hidden state of all components configured by this Action. ...
        /// </summary>
        public object setHidden(bool hidden){return null;}
        /// <summary>
        /// Sets the icon CSS class for all components configured by this Action. ...
        /// </summary>
        public object setIconCls(JsString cls){return null;}
        /// <summary>
        /// Sets the text to be displayed by all components configured by this Action. ...
        /// </summary>
        public object setText(JsString text){return null;}
        /// <summary>
        /// Shows all components configured by this Action. ...
        /// </summary>
        public object show(){return null;}
    }
    #endregion
    #region ActionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ActionConfig : Ext.BaseConfig
    {
        public bool disabled{get;set;}
        /// <summary>
        /// The function that will be invoked by each component tied to this Action
        /// when the component's primary event is trigger...
        /// </summary>
        public JsAction handler{get;set;}
        public bool hidden{get;set;}
        /// <summary>
        /// The CSS class selector that specifies a background image to be used as the header icon for
        /// all components configured ...
        /// </summary>
        public JsString iconCls{get;set;}
        public JsString itemId{get;set;}
        /// <summary>
        /// The scope (this reference) in which the
        /// handler is executed. ...
        /// </summary>
        public object scope{get;set;}
        public JsString text{get;set;}
    }
    #endregion
    #region ActionEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ActionEvents : Ext.BaseEvents
    {
    }
    #endregion
}
#endregion
