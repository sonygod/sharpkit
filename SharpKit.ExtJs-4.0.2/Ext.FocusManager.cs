//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region FocusManager
    /// <summary>
    /// The FocusManager is responsible for globally:  Managing component focus Providing basic keyboard navigation (optional) Provide a visual cue for focused components, in the form of a focus ring/frame.  To activate the FocusManager, simply call &amp;lt;code&amp;gt;Ext.FocusManager.enable();&amp;lt;/code&amp;gt;. In turn, you may
    /// deactivate the FocusManager by subsequently calling &amp;lt;code&amp;gt;Ext.FocusManager.disable();&amp;lt;/code&amp;gt;.  The
    /// FocusManager is disabled by default. To enable the optional focus frame, pass true or {focusFrame: true} to enable. Another feature of the FocusManager is to provide basic keyboard focus navigation scoped to any Ext.container.Container
    /// that would like to have navigation between its child Ext.Component&#39;s. The Ext.container.Container can simply
    /// call Ext.FocusManager.subscribe to take advantage of this feature, and can at any time call
    /// Ext.FocusManager.unsubscribe to turn the navigation off.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FocusManager : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Disables the FocusManager by turning of all automatic focus management and keyboard navigation ...
        /// </summary>
        public object disable(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Subscribes an Ext.container.Container to provide basic keyboard focus navigation between its child Ext.Component's. ...
        /// </summary>
        public object subscribe(Ext.container.Container container, object options=null){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public bool enabled{get;set;}
        /// <summary>
        /// The currently focused component. ...
        /// </summary>
        public Ext.Component focusedCmp{get;set;}
        /// <summary>
        /// A list of xtypes that should ignore certain navigation input keys and
        /// allow for the default browser event/behavior. ...
        /// </summary>
        public JsArray whitelist{get;set;}
    }
    #endregion
    #region FocusManagerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FocusManagerConfig
    {
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region FocusManagerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class FocusManagerEvents
    {
        /// <summary>
        /// Fires before a component becomes focused. ...
        /// </summary>
        public static JsString beforecomponentfocus="beforecomponentfocus";
        /// <summary>
        /// Fires after a component becomes focused. ...
        /// </summary>
        public static JsString componentfocus="componentfocus";
        /// <summary>
        /// Fires when the FocusManager is disabled ...
        /// </summary>
        public static JsString disable="disable";
        /// <summary>
        /// Fires when the FocusManager is enabled ...
        /// </summary>
        public static JsString enable="enable";
    }
    #endregion
}
#endregion
