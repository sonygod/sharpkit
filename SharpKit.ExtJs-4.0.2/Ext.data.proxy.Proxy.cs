//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:50:56
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data.proxy
namespace Ext.data.proxy
{
    #region Proxy
    /// <summary>
    /// Proxies are used by Stores to handle the loading and saving of Model data.
    /// Usually developers will not need to create or interact with proxies directly. Types of Proxy There are two main types of Proxy - Client and Server. The Client proxies
    /// save their data locally and include the following subclasses:  LocalStorageProxy - saves its data to localStorage if the browser supports it SessionStorageProxy - saves its data to sessionStorage if the browsers supports it MemoryProxy - holds data in memory only, any data is lost when the page is refreshed  The Server proxies save their data by sending requests to some remote server. These proxies include:  Ajax - sends requests to a server on the same domain JsonP - uses JSON-P to send requests to a server on a different domain Direct - uses Ext.direct to send requests  Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four operations
    /// are mapped to the methods create, read, update and destroy respectively. Each Proxy subclass
    /// implements these functions. The CRUD methods each expect an Operation object as the sole argument. The Operation encapsulates
    /// information about the action the Store wishes to perform, the model instances that are to be modified, etc.
    /// See the Operation documentation for more details. Each CRUD method also accepts a callback function to be
    /// called asynchronously on completion. Proxies also support batching of Operations via a batch object, invoked by the batch method.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Proxy : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Creates the Proxy ...
        /// </summary>
        public object constructor(object config=null){return null;}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Performs a batch of Operations, in the order specified by batchOrder. ...
        /// </summary>
        public Batch batch(object operations, object listeners){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Performs the given create operation. ...
        /// </summary>
        public object create(Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// Performs the given destroy operation. ...
        /// </summary>
        public object destroy(Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Returns the model attached to this Proxy ...
        /// </summary>
        public Ext.data.Model getModel(){return null;}
        /// <summary>
        /// Returns the reader currently attached to this proxy instance ...
        /// </summary>
        public Ext.data.reader.Reader getReader(){return null;}
        /// <summary>
        /// Returns the writer currently attached to this proxy instance ...
        /// </summary>
        public Ext.data.writer.Writer getWriter(){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Performs the given read operation. ...
        /// </summary>
        public object read(Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Sets the model associated with this proxy. ...
        /// </summary>
        public object setModel(object model, bool setOnStore){return null;}
        /// <summary>
        /// Sets the Proxy's Reader by string, config object or Reader instance ...
        /// </summary>
        public Ext.data.reader.Reader setReader(object reader){return null;}
        /// <summary>
        /// Sets the Proxy's Writer by string, config object or Writer instance ...
        /// </summary>
        public Ext.data.writer.Writer setWriter(object writer){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Performs the given update operation. ...
        /// </summary>
        public object update(Operation operation, JsAction callback, object scope){return null;}
    }
    #endregion
    #region ProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ProxyConfig
    {
        /// <summary>
        /// True to batch actions of a particular type when synchronizing the store. ...
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. ...
        /// </summary>
        public JsString batchOrder{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// The name of the Model to tie to this Proxy. ...
        /// </summary>
        public object model{get;set;}
    }
    #endregion
    #region ProxyEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ProxyEvents
    {
    }
    #endregion
}
#endregion
