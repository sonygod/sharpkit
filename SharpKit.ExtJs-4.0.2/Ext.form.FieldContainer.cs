//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form
namespace Ext.form
{
    #region FieldContainer
    /// <summary>
    /// FieldContainer is a derivation of Container that implements the
    /// Labelable mixin. This allows it to be configured so that it is rendered with
    /// a field label and optional error message around its sub-items.
    /// This is useful for arranging a group of fields or other components within a single item in a form, so
    /// that it lines up nicely with other fields. A common use is for grouping a set of related fields under
    /// a single label in a form. The container&#39;s configured items will be layed out within the field body area according to the
    /// configured layout type. The default layout is &#39;autocontainer&#39;. Like regular fields, FieldContainer can inherit its decoration configuration from the
    /// fieldDefaults of an enclosing FormPanel. In addition,
    /// FieldContainer itself can pass fieldDefaults to any fields
    /// it may itself contain. If you are grouping a set of Checkbox or Radio
    /// fields in a single labeled container, consider using a Ext.form.CheckboxGroup
    /// or Ext.form.RadioGroup instead as they are specialized for handling those types.
    /// Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title: &#39;FieldContainer Example&#39;,
    /// width: 550,
    /// bodyPadding: 10,
    /// items: [{
    /// xtype: &#39;fieldcontainer&#39;,
    /// fieldLabel: &#39;Last Three Jobs&#39;,
    /// labelWidth: 100,
    /// // The body area will contain three text fields, arranged
    /// // horizontally, separated by draggable splitters.
    /// layout: &#39;hbox&#39;,
    /// items: [{
    /// xtype: &#39;textfield&#39;,
    /// flex: 1
    /// }, {
    /// xtype: &#39;splitter&#39;
    /// }, {
    /// xtype: &#39;textfield&#39;,
    /// flex: 1
    /// }, {
    /// xtype: &#39;splitter&#39;
    /// }, {
    /// xtype: &#39;textfield&#39;,
    /// flex: 1
    /// }]
    /// }],
    /// renderTo: Ext.getBody()
    /// });
    /// Usage of fieldDefaults:  Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title: &#39;FieldContainer Example&#39;,
    /// width: 350,
    /// bodyPadding: 10,
    /// items: [{
    /// xtype: &#39;fieldcontainer&#39;,
    /// fieldLabel: &#39;Your Name&#39;,
    /// labelWidth: 75,
    /// defaultType: &#39;textfield&#39;,
    /// // Arrange fields vertically, stretched to full width
    /// layout: &#39;anchor&#39;,
    /// defaults: {
    /// layout: &#39;100%&#39;
    /// },
    /// // These config values will be applied to both sub-fields, except
    /// // for Last Name which will use its own msgTarget.
    /// fieldDefaults: {
    /// msgTarget: &#39;under&#39;,
    /// labelAlign: &#39;top&#39;
    /// },
    /// items: [{
    /// fieldLabel: &#39;First Name&#39;,
    /// name: &#39;firstName&#39;
    /// }, {
    /// fieldLabel: &#39;Last Name&#39;,
    /// name: &#39;lastName&#39;,
    /// msgTarget: &#39;under&#39;
    /// }]
    /// }],
    /// renderTo: Ext.getBody()
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FieldContainer : Ext.container.Container, Labelable, FieldAncestor, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Gets the active error message for this component, if any. ...
        /// </summary>
        public JsString getActiveError(){return null;}
        /// <summary>
        /// Gets an Array of any active error messages currently applied to the field. ...
        /// </summary>
        public JsArray getActiveErrors(){return null;}
        /// <summary>
        /// Calculate and return the natural width of the bodyEl. ...
        /// </summary>
        public object getBodyNaturalWidth(){return null;}
        /// <summary>
        /// Takes an Array of invalid Ext.form.field.Field objects and builds a combined list of error
        /// messages from them. ...
        /// </summary>
        public JsArray getCombinedErrors(JsArray invalidFields){return null;}
        /// <summary>
        /// Returns the combined field label if combineLabels is set to true and if there is no
        /// set fieldLabel. ...
        /// </summary>
        public JsString getFieldLabel(){return null;}
        /// <summary>
        /// Get the input id, if any, for this component. ...
        /// </summary>
        public JsString getInputId(){return null;}
        /// <summary>
        /// Generates the arguments for the field decorations rendering template. ...
        /// </summary>
        public object getLabelableRenderData(){return null;}
        /// <summary>
        /// Returns the additional Ext.AbstractComponent.renderSelectors for selecting the field
        /// decoration elements from the ren...
        /// </summary>
        public object getLabelableSelectors(){return null;}
        /// <summary>
        /// Gets the markup to be inserted into the outer template's bodyEl. ...
        /// </summary>
        public JsString getSubTplMarkup(){return null;}
        /// <summary>
        /// Tells whether the field currently has an active error message. ...
        /// </summary>
        public bool hasActiveError(){return false;}
        /// <summary>
        /// Initializes the FieldAncestor's state; this must be called from the initComponent method
        /// of any components importing ...
        /// </summary>
        public object initFieldAncestor(){return null;}
        /// <summary>
        /// Performs initialization of this mixin. ...
        /// </summary>
        public object initLabelable(){return null;}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is added to the container's subtree. ...
        /// </summary>
        public object onFieldAdded(Ext.form.field.Field field){return null;}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is removed from the container's subtree. ...
        /// </summary>
        public object onFieldRemoved(Ext.form.field.Field field){return null;}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is added to the container's subtree. ...
        /// </summary>
        public object onLabelableAdded(Labelable labelable){return null;}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is removed from the container's subtree. ...
        /// </summary>
        public object onLabelableRemoved(Labelable labelable){return null;}
        /// <summary>
        /// Sets the active error message to the given string. ...
        /// </summary>
        public object setActiveError(JsString msg){return null;}
        /// <summary>
        /// Set the active error message to an Array of error messages. ...
        /// </summary>
        public object setActiveErrors(JsArray errors){return null;}
        /// <summary>
        /// Applies a set of default configuration values to this Labelable instance. ...
        /// </summary>
        public object setFieldDefaults(object defaults){return null;}
        /// <summary>
        /// Clears the active error message(s). ...
        /// </summary>
        public object unsetActiveError(){return null;}
        /// <summary>
        /// The div Element wrapping the component's contents. ...
        /// </summary>
        public Ext.core.Element bodyEl{get;set;}
        /// <summary>
        /// The div Element that will contain the component's error message(s). ...
        /// </summary>
        public Ext.core.Element errorEl{get;set;}
        /// <summary>
        /// Flag denoting that this object is labelable as a field. ...
        /// </summary>
        public bool isFieldLabelable{get;set;}
        /// <summary>
        /// The label Element for this component. ...
        /// </summary>
        public Ext.core.Element labelEl{get;set;}
        public object onFieldErrorChange{get;set;}
        public object onFieldValidityChange{get;set;}
        public FieldContainer(FieldContainerConfig config){}
        public FieldContainer(){}
    }
    #endregion
    #region FieldContainerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldContainerConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// If specified, then the component will be displayed with this value as its active error when
        /// first rendered. ...
        /// </summary>
        public JsString activeError{get;set;}
        /// <summary>
        /// The template used to format the Array of error messages passed to setActiveErrors
        /// into a single HTML string. ...
        /// </summary>
        public XTemplate activeErrorsTpl{get;set;}
        /// <summary>
        /// Whether to adjust the component's body area to make room for 'side' or 'under'
        /// error messages. ...
        /// </summary>
        public bool autoFitErrors{get;set;}
        /// <summary>
        /// The CSS class to be applied to the body content element. ...
        /// </summary>
        public JsString baseBodyCls{get;set;}
        /// <summary>
        /// The CSS class to be applied to the special clearing div rendered directly after the field
        /// contents wrapper to provide...
        /// </summary>
        public JsString clearCls{get;set;}
        /// <summary>
        /// If set to true, the field container will automatically combine and display the validation errors from
        /// all the fields ...
        /// </summary>
        public bool combineErrors{get;set;}
        /// <summary>
        /// If set to true, and there is no defined fieldLabel, the field container will automatically
        /// generate its label by comb...
        /// </summary>
        public bool combineLabels{get;set;}
        /// <summary>
        /// The CSS class to be applied to the error message element. ...
        /// </summary>
        public JsString errorMsgCls{get;set;}
        /// <summary>
        /// An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
        /// </summary>
        public JsString fieldBodyCls{get;set;}
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each
        /// Ext.form.Labelable instance (e.g. ...
        /// </summary>
        public object fieldDefaults{get;set;}
        /// <summary>
        /// The label for the field. ...
        /// </summary>
        public JsString fieldLabel{get;set;}
        /// <summary>
        /// A CSS class to be applied to the outermost element to denote that it is participating in the form
        /// field layout. ...
        /// </summary>
        public JsString formItemCls{get;set;}
        /// <summary>
        /// When set to true, the label element (fieldLabel and labelSeparator) will be
        /// automatically hidden if the fieldLabel is...
        /// </summary>
        public bool hideEmptyLabel{get;set;}
        /// <summary>
        /// Set to true to completely hide the label element (fieldLabel and labelSeparator). ...
        /// </summary>
        public bool hideLabel{get;set;}
        public JsString invalidCls{get;set;}
        /// <summary>
        /// Controls the position and alignment of the fieldLabel. ...
        /// </summary>
        public JsString labelAlign{get;set;}
        /// <summary>
        /// The CSS class to be applied to the label element. ...
        /// </summary>
        public JsString labelCls{get;set;}
        /// <summary>
        /// The string to use when joining the labels of individual sub-fields, when combineLabels is
        /// set to true. ...
        /// </summary>
        public JsString labelConnector{get;set;}
        /// <summary>
        /// The amount of space in pixels between the fieldLabel and the input field. ...
        /// </summary>
        public JsNumber labelPad{get;set;}
        public JsString labelSeparator{get;set;}
        /// <summary>
        /// A CSS style specification string to apply directly to this field's label. ...
        /// </summary>
        public JsString labelStyle{get;set;}
        /// <summary>
        /// The width of the fieldLabel in pixels. ...
        /// </summary>
        public JsNumber labelWidth{get;set;}
        /// <summary>
        /// The rendering template for the field decorations. ...
        /// </summary>
        public object labelableRenderTpl{get;set;}
        /// <summary>
        /// The location where the error message text should display. ...
        /// </summary>
        public JsString msgTarget{get;set;}
        /// <summary>
        /// true to disable displaying any error message set on this object. ...
        /// </summary>
        public bool preventMark{get;set;}
    }
    #endregion
    #region FieldContainerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldContainerEvents : Ext.container.ContainerEvents
    {
        /// <summary>
        /// Fires when the active error message is changed via setActiveError. ...
        /// </summary>
        public static JsString errorchange="errorchange";
        /// <summary>
        /// Fires when the active error message is changed for any one of the Ext.form.Labelable
        /// instances within this container. ...
        /// </summary>
        public static JsString fielderrorchange="fielderrorchange";
    }
    #endregion
}
#endregion
