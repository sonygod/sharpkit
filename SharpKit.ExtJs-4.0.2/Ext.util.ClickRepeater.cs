//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.util
namespace Ext.util
{
    #region ClickRepeater
    /// <summary>
    /// A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the
    /// mouse is pressed. The interval between firings may be specified in the config but
    /// defaults to 20 milliseconds. Optionally, a CSS class may be applied to the element during the time it is pressed.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ClickRepeater : Observable
    {
        /// <summary>
        /// Creates new ClickRepeater. ...
        /// </summary>
        public object constructor(object el, object config=null){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Enables the repeater and allows events to fire. ...
        /// </summary>
        public object enable(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
    }
    #endregion
    #region ClickRepeaterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ClickRepeaterConfig
    {
        /// <summary>
        /// True if autorepeating should start slowly and accelerate. ...
        /// </summary>
        public bool accelerate{get;set;}
        /// <summary>
        /// The initial delay before the repeating event begins firing. ...
        /// </summary>
        public JsNumber delay{get;set;}
        public object el{get;set;}
        /// <summary>
        /// The interval between firings of the "click" event. ...
        /// </summary>
        public JsNumber interval{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        public JsString pressedCls{get;set;}
        public bool preventDefault{get;set;}
        public bool stopDefault{get;set;}
    }
    #endregion
    #region ClickRepeaterEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ClickRepeaterEvents
    {
        /// <summary>
        /// Fires on a specified interval during the time the element is pressed. ...
        /// </summary>
        public static JsString click="click";
        /// <summary>
        /// Fires when the mouse button is depressed. ...
        /// </summary>
        public static JsString mousedown="mousedown";
        /// <summary>
        /// Fires when the mouse key is released. ...
        /// </summary>
        public static JsString mouseup="mouseup";
    }
    #endregion
}
#endregion
