//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:52:01
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.picker
namespace Ext.picker
{
    #region Date
    /// <summary>
    /// A date picker. This class is used by the Ext.form.field.Date field to allow browsing and
    /// selection of valid dates in a popup next to the field, but may also be used with other components. Typically you will need to implement a handler function to be notified when the user chooses a color from the
    /// picker; you can register the handler using the select event, or by implementing the handler
    /// method. By default the user will be allowed to pick any date; this can be changed by using the minDate,
    /// maxDate, disabledDays, disabledDatesRE, and/or disabledDates configs. All the string values documented below may be overridden by including an Ext locale file in your page. Example usage: new Ext.panel.Panel({
    /// title: &#39;Choose a future date:&#39;,
    /// width: 200,
    /// bodyPadding: 10,
    /// renderTo: Ext.getBody(),
    /// items: [{
    /// xtype: &#39;datepicker&#39;,
    /// minDate: new Date(),
    /// handler: function(picker, date) {
    /// // do something with the selected date
    /// }
    /// }]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date : Ext.Component, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Gets the current selected value of the date field ...
        /// </summary>
        public JsDate getValue(){return null;}
        /// <summary>
        /// Hides the month picker, if it's visible. ...
        /// </summary>
        public Ext.picker.Date hideMonthPicker(){return null;}
        /// <summary>
        /// Sets the current value to today. ...
        /// </summary>
        public Ext.picker.Date selectToday(){return null;}
        /// <summary>
        /// Replaces any existing disabled dates with new values and refreshes the DatePicker. ...
        /// </summary>
        public Ext.picker.Date setDisabledDates(object disabledDates){return null;}
        /// <summary>
        /// Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker. ...
        /// </summary>
        public Ext.picker.Date setDisabledDays(JsArray disabledDays){return null;}
        /// <summary>
        /// Replaces any existing maxDate with the new value and refreshes the DatePicker. ...
        /// </summary>
        public Ext.picker.Date setMaxDate(JsDate value){return null;}
        /// <summary>
        /// Replaces any existing minDate with the new value and refreshes the DatePicker. ...
        /// </summary>
        public Ext.picker.Date setMinDate(JsDate value){return null;}
        /// <summary>
        /// Sets the value of the date field ...
        /// </summary>
        public Ext.picker.Date setValue(JsDate value){return null;}
        /// <summary>
        /// Show the month picker ...
        /// </summary>
        public Ext.picker.Date showMonthPicker(){return null;}
        /// <summary>
        /// Show the next month. ...
        /// </summary>
        public Ext.picker.Date showNextMonth(object e){return null;}
        /// <summary>
        /// Show the next year. ...
        /// </summary>
        public Ext.picker.Date showNextYear(){return null;}
        /// <summary>
        /// Show the previous month. ...
        /// </summary>
        public Ext.picker.Date showPrevMonth(object e){return null;}
        /// <summary>
        /// Show the previous year. ...
        /// </summary>
        public Ext.picker.Date showPrevYear(){return null;}
    }
    #endregion
    #region DateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DateConfig
    {
        public JsString baseCls{get;set;}
        public JsArray dayNames{get;set;}
        /// <summary>
        /// True to disable animations when showing the month picker. ...
        /// </summary>
        public bool disableAnim{get;set;}
        /// <summary>
        /// The class to apply to disabled cells. ...
        /// </summary>
        public JsString disabledCellCls{get;set;}
        /// <summary>
        /// An array of 'dates' to disable, as strings. ...
        /// </summary>
        public JsArray disabledDates{get;set;}
        /// <summary>
        /// JavaScript regular expression used to disable a pattern of dates (defaults to null). ...
        /// </summary>
        public JsRegExp disabledDatesRE{get;set;}
        public JsString disabledDatesText{get;set;}
        /// <summary>
        /// An array of days to disable, 0-based. ...
        /// </summary>
        public JsArray disabledDays{get;set;}
        public JsString disabledDaysText{get;set;}
        /// <summary>
        /// True to automatically focus the picker on show. ...
        /// </summary>
        public bool focusOnShow{get;set;}
        /// <summary>
        /// The default date format string which can be overriden for localization support. ...
        /// </summary>
        public JsString format{get;set;}
        /// <summary>
        /// Optional. ...
        /// </summary>
        public JsAction handler{get;set;}
        /// <summary>
        /// Specifies optional custom key event handlers for the Ext.util.KeyNav
        /// attached to this date picker. ...
        /// </summary>
        public object keyNavConfig{get;set;}
        /// <summary>
        /// The format for displaying a date in a longer format. ...
        /// </summary>
        public JsString longDayFormat{get;set;}
        public JsDate maxDate{get;set;}
        public JsString maxText{get;set;}
        public JsDate minDate{get;set;}
        public JsString minText{get;set;}
        public JsArray monthNames{get;set;}
        public JsString monthYearText{get;set;}
        public JsString nextText{get;set;}
        public JsString prevText{get;set;}
        /// <summary>
        /// The scope (this reference) in which the handler
        /// function will be called. ...
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// The class to apply to the selected cell. ...
        /// </summary>
        public JsString selectedCls{get;set;}
        /// <summary>
        /// False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
        /// that selects ...
        /// </summary>
        public bool showToday{get;set;}
        public JsNumber startDay{get;set;}
        public JsString todayText{get;set;}
        /// <summary>
        /// A string used to format the message for displaying in a tooltip over the button that
        /// selects the current date. ...
        /// </summary>
        public JsString todayTip{get;set;}
    }
    #endregion
    #region DateEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DateEvents
    {
        /// <summary>
        /// Fires when a date is selected ...
        /// </summary>
        public static JsString select="select";
    }
    #endregion
}
#endregion
