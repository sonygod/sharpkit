//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:25
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext
namespace Ext
{
    #region EventManager
    /// <summary>
    /// Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
    /// several useful events directly.
    /// See Ext.EventObject for more details on normalized event objects.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventManager
    {
        /// <summary>
        /// Appends an event handler to an element. ...
        /// </summary>
        public object addListener(object el, JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Get the id of the element. ...
        /// </summary>
        public JsString getId(object element){return null;}
        /// <summary>
        /// Indicates which event to use for getting key presses. ...
        /// </summary>
        public JsString getKeyEvent(){return null;}
        /// <summary>
        /// Gets the x coordinate from the event ...
        /// </summary>
        public JsNumber getPageX(object @event){return null;}
        /// <summary>
        /// Gets the x &amp; ycoordinate from the event ...
        /// </summary>
        public JsArray getPageXY(object @event){return null;}
        /// <summary>
        /// Gets the y coordinate from the event ...
        /// </summary>
        public JsNumber getPageY(object @event){return null;}
        /// <summary>
        /// Gets the related target from the event. ...
        /// </summary>
        public HTMLElement getRelatedTarget(object @event){return null;}
        /// <summary>
        /// Gets the target of the event. ...
        /// </summary>
        public HTMLElement getTarget(object @event){return null;}
        /// <summary>
        /// Alias for Ext.EventManager.addListener ...
        /// </summary>
        public object on(){return null;}
        /// <summary>
        /// Adds a listener to be notified when the document is ready (before onload and before images are loaded). ...
        /// </summary>
        public object onDocumentReady(JsAction fn, object scope=null, bool options=false){return null;}
        /// <summary>
        /// Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 millisecon...
        /// </summary>
        public object onWindowResize(JsAction fn, object scope, bool options){return null;}
        /// <summary>
        /// Prevents the browsers default handling of the event. ...
        /// </summary>
        public object preventDefault(Event The){return null;}
        /// <summary>
        /// Recursively removes all previous added listeners from an element and its children. ...
        /// </summary>
        public object purgeElement(object el, JsString eventName=null){return null;}
        /// <summary>
        /// Removes all event handers from an element. ...
        /// </summary>
        public object removeAll(object el){return null;}
        /// <summary>
        /// Removes an event handler from an element. ...
        /// </summary>
        public object removeListener(object el, JsString eventName, JsAction fn, object scope){return null;}
        /// <summary>
        /// Removes the passed window resize listener. ...
        /// </summary>
        public object removeResizeListener(JsAction fn, object scope){return null;}
        /// <summary>
        /// Removes the passed window unload listener. ...
        /// </summary>
        public object removeUnloadListener(JsAction fn, object scope){return null;}
        /// <summary>
        /// Stop the event (preventDefault and stopPropagation) ...
        /// </summary>
        public object stopEvent(Event The){return null;}
        /// <summary>
        /// Cancels bubbling of the event. ...
        /// </summary>
        public object stopPropagation(Event The){return null;}
        /// <summary>
        /// Alias for Ext.EventManager.removeListener ...
        /// </summary>
        public object un(){return null;}
    }
    #endregion
    #region EventManagerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class EventManagerConfig
    {
    }
    #endregion
    #region EventManagerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class EventManagerEvents
    {
    }
    #endregion
}
#endregion
