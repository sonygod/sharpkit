//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.axis
namespace Ext.chart.axis
{
    #region Numeric
    /// <summary>
    /// An axis to handle numeric values. This axis is used for quantitative data as
    /// opposed to the category axis. You can set mininum and maximum values to the
    /// axis so that the values are bound to that. If no values are set, then the
    /// scale will auto-adjust to the values.  For example: var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
    /// fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// data: [
    /// {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
    /// {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
    /// {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
    /// {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
    /// {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
    /// ]
    /// });
    /// Ext.create(&#39;Ext.chart.Chart&#39;, {
    /// renderTo: Ext.getBody(),
    /// width: 500,
    /// height: 300,
    /// store: store,
    /// axes: [{
    /// type: &#39;Numeric&#39;,
    /// grid: true,
    /// position: &#39;left&#39;,
    /// fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// title: &#39;Sample Values&#39;,
    /// grid: {
    /// odd: {
    /// opacity: 1,
    /// fill: &#39;#ddd&#39;,
    /// stroke: &#39;#bbb&#39;,
    /// &#39;stroke-width&#39;: 1
    /// }
    /// },
    /// minimum: 0,
    /// adjustMinimumByMajorUnit: 0
    /// }, {
    /// type: &#39;Category&#39;,
    /// position: &#39;bottom&#39;,
    /// fields: [&#39;name&#39;],
    /// title: &#39;Sample Metrics&#39;,
    /// grid: true,
    /// label: {
    /// rotate: {
    /// degrees: 315
    /// }
    /// }
    /// }],
    /// series: [{
    /// type: &#39;area&#39;,
    /// highlight: false,
    /// axis: &#39;left&#39;,
    /// xField: &#39;name&#39;,
    /// yField: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// style: {
    /// opacity: 0.93
    /// }
    /// }]
    /// });
    /// In this example we create an axis of Numeric type. We set a minimum value so that
    /// even if all series have values greater than zero, the grid starts at zero. We bind
    /// the axis onto the left part of the surface by setting position to left.
    /// We bind three different store fields to this axis by setting fields to an array.
    /// We set the title of the axis to Number of Hits by using the title property.
    /// We use a grid configuration to set odd background rows to a certain style and even rows
    /// to be transparent/ignored.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Numeric : Axis
    {
        public bool adjustMaximumByMajorUnit{get;set;}
        public bool adjustMinimumByMajorUnit{get;set;}
        /// <summary>
        /// The number of decimals to round the value to. ...
        /// </summary>
        public JsNumber decimals{get;set;}
        /// <summary>
        /// The maximum value drawn by the axis. ...
        /// </summary>
        public JsNumber maximum{get;set;}
        /// <summary>
        /// The minimum value drawn by the axis. ...
        /// </summary>
        public JsNumber minimum{get;set;}
        public JsString position{get;set;}
        /// <summary>
        /// The scaling algorithm to use on this axis. ...
        /// </summary>
        public JsString scale{get;set;}
        public Numeric(NumericConfig config){}
        public Numeric(){}
    }
    #endregion
    #region NumericConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NumericConfig : AxisConfig
    {
    }
    #endregion
    #region NumericEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class NumericEvents : AxisEvents
    {
    }
    #endregion
}
#endregion
