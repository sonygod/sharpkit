//***************************************************
//* This file was generated by tool
//* 20/07/2011 20:05:54
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.dd
namespace Ext.dd
{
    #region DragDrop
    /// <summary>
    /// Defines the interface and base operation of items that that can be
    /// dragged or can be drop targets.  It was designed to be extended, overriding
    /// the event handlers for startDrag, onDrag, onDragOver and onDragOut.
    /// Up to three html elements can be associated with a DragDrop instance:  linked element: the element that is passed into the constructor.
    /// This is the element which defines the boundaries for interaction with
    /// other DragDrop objects. handle element(s): The drag operation only occurs if the element that
    /// was clicked matches a handle element.  By default this is the linked
    /// element, but there are times that you will want only a portion of the
    /// linked element to initiate the drag operation, and the setHandleElId()
    /// method provides a way to define this. drag element: this represents the element that would be moved along
    /// with the cursor during a drag operation.  By default, this is the linked
    /// element itself as in Ext.dd.DD.  setDragElId() lets you define
    /// a separate element that would be moved, as in Ext.dd.DDProxy.  This class should not be instantiated until the onload event to ensure that
    /// the associated elements are available.
    /// The following would define a DragDrop obj that would interact with any
    /// other DragDrop obj in the &quot;group1&quot; group: dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);
    /// Since none of the event handlers have been implemented, nothing would
    /// actually happen if you were to run the code above.  Normally you would
    /// override this class or one of the default implementations, but you can
    /// also override the methods you want on an instance of the class... dd.onDragDrop = function(e, id) {
    /// alert(&quot;dd was dropped on &quot; + id);
    /// }
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DragDrop : Ext.Base
    {
        /// <summary>
        /// Creates new DragDrop. ...
        /// </summary>
        public DragDrop(JsString id, JsString sGroup, object config){}
        /// <summary>
        /// Lets you specify a css class of elements that will not initiate a drag ...
        /// </summary>
        public object addInvalidHandleClass(JsString cssClass){return null;}
        /// <summary>
        /// Lets you to specify an element id for a child of a drag handle
        /// that should not initiate a drag ...
        /// </summary>
        public object addInvalidHandleId(JsString id){return null;}
        /// <summary>
        /// Allows you to specify a tag name that should not start a drag operation
        /// when clicked. ...
        /// </summary>
        public object addInvalidHandleType(JsString tagName){return null;}
        /// <summary>
        /// Adds this instance to a group of related drag/drop objects. ...
        /// </summary>
        public object addToGroup(JsString sGroup){return null;}
        /// <summary>
        /// Applies the configuration parameters that were passed into the constructor. ...
        /// </summary>
        public object applyConfig(){return null;}
        /// <summary>
        /// Clears any constraints applied to this instance. ...
        /// </summary>
        public object clearConstraints(){return null;}
        /// <summary>
        /// Clears any tick interval defined for this instance ...
        /// </summary>
        public object clearTicks(){return null;}
        /// <summary>
        /// Initializes the drag drop object's constraints to restrict movement to a certain element. ...
        /// </summary>
        public object constrainTo(object constrainTo, object pad=null, bool inContent=false){return null;}
        /// <summary>
        /// Called when we are done dragging the object ...
        /// </summary>
        public object endDrag(Event e){return null;}
        /// <summary>
        /// Returns a reference to the actual element to drag. ...
        /// </summary>
        public HTMLElement getDragEl(){return null;}
        /// <summary>
        /// Returns a reference to the linked element ...
        /// </summary>
        public HTMLElement getEl(){return null;}
        /// <summary>
        /// Sets up the DragDrop object. ...
        /// </summary>
        public object init(JsString id, JsString sGroup, object config){return null;}
        /// <summary>
        /// Initializes Targeting functionality only... ...
        /// </summary>
        public object initTarget(JsString id, JsString sGroup, object config){return null;}
        /// <summary>
        /// Returns true if this instance is locked, or the drag drop mgr is locked
        /// (meaning that all drag/drop is disabled on th...
        /// </summary>
        public bool isLocked(){return false;}
        /// <summary>
        /// Checks the tag exclusion list to see if this click should be ignored ...
        /// </summary>
        public bool isValidHandleChild(HTMLElement node){return false;}
        /// <summary>
        /// Locks this instance ...
        /// </summary>
        public object @lock(){return null;}
        /// <summary>
        /// Override the onAvailable method to do what is needed after the initial
        /// position was determined. ...
        /// </summary>
        public object onAvailable(){return null;}
        /// <summary>
        /// Abstract method called during the onMouseMove event while dragging an
        /// object. ...
        /// </summary>
        public object onDrag(Event e){return null;}
        /// <summary>
        /// Abstract method called when this item is dropped on another DragDrop
        /// obj ...
        /// </summary>
        public object onDragDrop(Event e, object id){return null;}
        /// <summary>
        /// Abstract method called when this element fist begins hovering over
        /// another DragDrop obj ...
        /// </summary>
        public object onDragEnter(Event e, object id){return null;}
        /// <summary>
        /// Abstract method called when we are no longer hovering over an element ...
        /// </summary>
        public object onDragOut(Event e, object id){return null;}
        /// <summary>
        /// Abstract method called when this element is hovering over another
        /// DragDrop obj ...
        /// </summary>
        public object onDragOver(Event e, object id){return null;}
        /// <summary>
        /// Abstract method called when this item is dropped on an area with no
        /// drop target ...
        /// </summary>
        public object onInvalidDrop(Event e){return null;}
        /// <summary>
        /// Called when a drag/drop obj gets a mousedown ...
        /// </summary>
        public object onMouseDown(Event e){return null;}
        /// <summary>
        /// Called when a drag/drop obj gets a mouseup ...
        /// </summary>
        public object onMouseUp(Event e){return null;}
        /// <summary>
        /// Removes this instance from the supplied interaction group ...
        /// </summary>
        public object removeFromGroup(JsString sGroup){return null;}
        /// <summary>
        /// Unsets an invalid css class ...
        /// </summary>
        public object removeInvalidHandleClass(JsString cssClass){return null;}
        /// <summary>
        /// Unsets an invalid handle id ...
        /// </summary>
        public object removeInvalidHandleId(JsString id){return null;}
        /// <summary>
        /// Unsets an excluded tag name set by addInvalidHandleType ...
        /// </summary>
        public object removeInvalidHandleType(JsString tagName){return null;}
        /// <summary>
        /// Must be called if you manually reposition a dd element. ...
        /// </summary>
        public object resetConstraints(bool maintainOffset){return null;}
        /// <summary>
        /// Allows you to specify that an element other than the linked element
        /// will be moved with the cursor during a drag ...
        /// </summary>
        public object setDragElId(JsString id){return null;}
        /// <summary>
        /// Allows you to specify a child of the linked element that should be
        /// used to initiate the drag operation. ...
        /// </summary>
        public object setHandleElId(JsString id){return null;}
        /// <summary>
        /// Stores the initial placement of the linked element. ...
        /// </summary>
        public object setInitPosition(JsNumber diffX, JsNumber diffY){return null;}
        /// <summary>
        /// Allows you to set an element outside of the linked element as a drag
        /// handle ...
        /// </summary>
        public object setOuterHandleElId(JsString id){return null;}
        /// <summary>
        /// Configures the padding for the target zone in px. ...
        /// </summary>
        public object setPadding(JsNumber iTop, JsNumber iRight, JsNumber iBot, JsNumber iLeft){return null;}
        /// <summary>
        /// By default, the element can be dragged any place on the screen. ...
        /// </summary>
        public object setXConstraint(JsNumber iLeft, JsNumber iRight, JsNumber iTickSize){return null;}
        /// <summary>
        /// By default, the element can be dragged any place on the screen. ...
        /// </summary>
        public object setYConstraint(JsNumber iUp, JsNumber iDown, JsNumber iTickSize){return null;}
        /// <summary>
        /// Abstract method called after a drag/drop object is clicked
        /// and the drag or mousedown time thresholds have beeen met. ...
        /// </summary>
        public object startDrag(JsNumber X, JsNumber Y){return null;}
        /// <summary>
        /// toString method ...
        /// </summary>
        public JsString toString(){return null;}
        /// <summary>
        /// Unlocks this instace ...
        /// </summary>
        public object unlock(){return null;}
        /// <summary>
        /// Removes all drag and drop hooks for this element ...
        /// </summary>
        public object unreg(){return null;}
        public bool available{get;set;}
        public object config{get;set;}
        public object defaultPadding{get;set;}
        /// <summary>
        /// The group defines a logical collection of DragDrop objects that are
        /// related. ...
        /// </summary>
        public object groups{get;set;}
        /// <summary>
        /// By default, drags can only be initiated if the mousedown occurs in the
        /// region the linked element is. ...
        /// </summary>
        public bool hasOuterHandles{get;set;}
        /// <summary>
        /// The id of the element associated with this object. ...
        /// </summary>
        public JsString id{get;set;}
        /// <summary>
        /// Set to false to enable a DragDrop object to fire drag events while dragging
        /// over its own Element. ...
        /// </summary>
        public bool ignoreSelf{get;set;}
        public JsArray invalidHandleClasses{get;set;}
        /// <summary>
        /// An object who's property names identify the IDs of elements to be considered invalid as drag handles. ...
        /// </summary>
        public object invalidHandleIds{get;set;}
        /// <summary>
        /// An object who's property names identify HTML tags to be considered invalid as drag handles. ...
        /// </summary>
        public object invalidHandleTypes{get;set;}
        /// <summary>
        /// By default, all instances can be a drop target. ...
        /// </summary>
        public bool isTarget{get;set;}
        /// <summary>
        /// Maintain offsets when we resetconstraints. ...
        /// </summary>
        public bool maintainOffset{get;set;}
        /// <summary>
        /// When set to true, other DD objects in cooperating DDGroups do not receive
        /// notification events when this DD object is ...
        /// </summary>
        public bool moveOnly{get;set;}
        /// <summary>
        /// The padding configured for this drag and drop object for calculating
        /// the drop zone intersection with this object. ...
        /// </summary>
        public JsNumber padding{get;set;}
        /// <summary>
        /// By default the drag and drop instance will only respond to the primary
        /// button click (left button for a right-handed m...
        /// </summary>
        public bool primaryButtonOnly{get;set;}
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// horizontal graduation/interval. ...
        /// </summary>
        public JsNumber xTicks{get;set;}
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// vertical graduation/interval. ...
        /// </summary>
        public JsNumber yTicks{get;set;}
        public DragDrop(Ext.dd.DragDropConfig config){}
        public DragDrop(){}
    }
    #endregion
    #region DragDropConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DragDropConfig : Ext.BaseConfig
    {
    }
    #endregion
    #region DragDropEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DragDropEvents : Ext.BaseEvents
    {
    }
    #endregion
}
#endregion
