//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.selection
namespace Ext.selection
{
    #region CheckboxModel
    /// <summary>
    /// A selection model that renders a column of checkboxes that can be toggled to
    /// select or deselect rows. The default mode for this selection model is MULTI. The selection model will inject a header for the checkboxes in the first view
    /// and according to the &#39;injectCheckbox&#39; configuration.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CheckboxModel : RowModel
    {
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public new object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public new object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public new object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public new object clearManagedListeners(){return null;}
        /// <summary>
        /// Retrieve a configuration to be used in a HeaderContainer. ...
        /// </summary>
        public object getHeaderConfig(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public new object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public new object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public new object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public new object resumeEvents(){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public new object un(JsString eventName, JsAction handler, object scope=null){return null;}
    }
    #endregion
    #region CheckboxModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CheckboxModelConfig
    {
        public bool checkOnly{get;set;}
        /// <summary>
        /// Instructs the SelectionModel whether or not to inject the checkbox header
        /// automatically or not. ...
        /// </summary>
        public object injectCheckbox{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// Modes of selection. ...
        /// </summary>
        public JsString mode{get;set;}
    }
    #endregion
    #region CheckboxModelEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class CheckboxModelEvents
    {
    }
    #endregion
}
#endregion
