//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.window
namespace Ext.window
{
    #region Window
    /// <summary>
    /// A specialized panel intended for use as an application window.  Windows are floated, resizable, and
    /// draggable by default.  Windows can be maximized to fill the viewport,
    /// restored to their prior size, and can be minimized. Windows can also be linked to a Ext.ZIndexManager or managed by the Ext.WindowManager to provide
    /// grouping, activation, to front, to back and other application-specific behavior. By default, Windows will be rendered to document.body. To constrain a Window to another element
    /// specify renderTo. As with all Containers, it is important to consider how you want the Window
    /// to size and arrange any child Components. Choose an appropriate layout configuration which lays out
    /// child Components in the required manner.
    /// Example: Ext.create(&#39;Ext.window.Window&#39;, {
    /// title: &#39;Hello&#39;,
    /// height: 200,
    /// width: 400,
    /// layout: &#39;fit&#39;,
    /// items: {  // Let&#39;s put an empty grid in just to illustrate fit layout
    /// xtype: &#39;grid&#39;,
    /// border: false,
    /// columns: [{header: &#39;World&#39;}],                 // One header just for show. There&#39;s no data,
    /// store: Ext.create(&#39;Ext.data.ArrayStore&#39;, {}) // A dummy empty data store
    /// }
    /// }).show();
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Window : Ext.panel.Panel, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Gets the configured default focus item. ...
        /// </summary>
        public object getFocusEl(){return null;}
        /// <summary>
        /// Fits the window within its current container and automatically replaces
        /// the 'maximize' tool button with the 'restore'...
        /// </summary>
        public Window maximize(){return null;}
        /// <summary>
        /// Placeholder method for minimizing the window. ...
        /// </summary>
        public Window minimize(){return null;}
        /// <summary>
        /// Restores a maximized  window back to its original
        /// size and position prior to being maximized and also replaces
        /// the 'r...
        /// </summary>
        public Window restore(){return null;}
        /// <summary>
        /// A shortcut method for toggling between maximize and restore based on the current maximized
        /// state of the window. ...
        /// </summary>
        public Window toggleMaximize(){return null;}
        /// <summary>
        /// If this Window is configured draggable, this property will contain
        /// an instance of Ext.util.ComponentDragger (A subcla...
        /// </summary>
        public new Ext.util.ComponentDragger dd{get;set;}
    }
    #endregion
    #region WindowConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class WindowConfig
    {
        public object animateTarget{get;set;}
        public JsString baseCls{get;set;}
        /// <summary>
        /// True to display the 'close' tool button and allow the user to close the window, false to
        /// hide the button and disallow...
        /// </summary>
        public bool closable{get;set;}
        /// <summary>
        /// True to render the window collapsed, false to render it expanded (defaults to false). ...
        /// </summary>
        public bool collapsed{get;set;}
        /// <summary>
        /// True to constrain the window within its containing element, false to allow it to fall outside of its
        /// containing element. ...
        /// </summary>
        public bool constrain{get;set;}
        /// <summary>
        /// True to constrain the window header within its containing element (allowing the window body to fall outside
        /// of its co...
        /// </summary>
        public bool constrainHeader{get;set;}
        /// <summary>
        /// Specifies a Component to receive focus when this Window is focused. ...
        /// </summary>
        public object defaultFocus{get;set;}
        /// <summary>
        /// True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true). ...
        /// </summary>
        public bool draggable{get;set;}
        /// <summary>
        /// True to always expand the window when it is displayed, false to keep it in its current state (which may be
        /// collapsed)...
        /// </summary>
        public bool expandOnShow{get;set;}
        /// <summary>
        /// Render this Window hidden (default is true). ...
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
        /// and di...
        /// </summary>
        public bool maximizable{get;set;}
        /// <summary>
        /// True to initially display the window in a maximized state. ...
        /// </summary>
        public bool maximized{get;set;}
        /// <summary>
        /// True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
        /// and di...
        /// </summary>
        public bool minimizable{get;set;}
        /// <summary>
        /// True to make the window modal and mask everything behind it when displayed, false to display it without
        /// restricting a...
        /// </summary>
        public bool modal{get;set;}
        /// <summary>
        /// Allows override of the built-in processing for the escape key. ...
        /// </summary>
        public JsAction onEsc{get;set;}
        /// <summary>
        /// True to render the window body with a transparent background so that it will blend into the framing
        /// elements, false t...
        /// </summary>
        public bool plain{get;set;}
        /// <summary>
        /// Specify as true to allow user resizing at each edge and corner of the window, false to disable
        /// resizing (defaults to ...
        /// </summary>
        public object resizable{get;set;}
        /// <summary>
        /// The X position of the left edge of the window on initial showing. ...
        /// </summary>
        public JsNumber x{get;set;}
        /// <summary>
        /// The Y position of the top edge of the window on initial showing. ...
        /// </summary>
        public JsNumber y{get;set;}
    }
    #endregion
    #region WindowEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class WindowEvents
    {
        /// <summary>
        /// Fires after the window has been visually activated via setActive. ...
        /// </summary>
        public static JsString activate="activate";
        /// <summary>
        /// Fires after the window has been visually deactivated via setActive. ...
        /// </summary>
        public static JsString deactivate="deactivate";
        /// <summary>
        /// Fires after the window has been maximized. ...
        /// </summary>
        public static JsString maximize="maximize";
        /// <summary>
        /// Fires after the window has been minimized. ...
        /// </summary>
        public static JsString minimize="minimize";
        /// <summary>
        /// Fires after the window has been resized. ...
        /// </summary>
        public static JsString resize="resize";
        /// <summary>
        /// Fires after the window has been restored to its original size after being maximized. ...
        /// </summary>
        public static JsString restore="restore";
    }
    #endregion
}
#endregion
