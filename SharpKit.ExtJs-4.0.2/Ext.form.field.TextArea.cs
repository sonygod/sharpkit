//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form.field
namespace Ext.form.field
{
    #region TextArea
    /// <summary>
    /// This class creates a multiline text field, which can be used as a direct replacement for traditional
    /// textarea fields. In addition, it supports automatically growing the height of the textarea to
    /// fit its content. All of the configuration options from Ext.form.field.Text can be used on TextArea.
    /// Example usage: Ext.create(&#39;Ext.form.FormPanel&#39;, {
    /// title      : &#39;Sample TextArea&#39;,
    /// width      : 400,
    /// bodyPadding: 10,
    /// renderTo   : Ext.getBody(),
    /// items: [{
    /// xtype     : &#39;textareafield&#39;,
    /// grow      : true,
    /// name      : &#39;message&#39;,
    /// fieldLabel: &#39;Message&#39;,
    /// anchor    : &#39;100%&#39;
    /// }]
    /// });
    /// Some other useful configuration options when using grow are growMin and growMax. These
    /// allow you to set the minimum and maximum grow heights for the textarea.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TextArea : Text, Labelable, Ext.form.field.Field, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Automatically grows the field to accomodate the height of the text up to the maximum field height allowed. ...
        /// </summary>
        public new object autoSize(){return null;}
        /// <summary>
        /// override
        /// To get the natural width of the textarea element, we do a simple calculation based on the
        /// 'cols' config. ...
        /// </summary>
        public new object getBodyNaturalWidth(){return null;}
    }
    #endregion
    #region TextAreaConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextAreaConfig
    {
        /// <summary>
        /// An initial value for the 'cols' attribute on the textarea element. ...
        /// </summary>
        public JsNumber cols{get;set;}
        /// <summary>
        /// True if you want the enter key to be classed as a special key. ...
        /// </summary>
        public bool enterIsSpecial{get;set;}
        /// <summary>
        /// A string that will be appended to the field's current value for the purposes of calculating the target
        /// field size. ...
        /// </summary>
        public JsString growAppend{get;set;}
        public JsNumber growMax{get;set;}
        public JsNumber growMin{get;set;}
        /// <summary>
        /// true to prevent scrollbars from appearing regardless of how much text is
        /// in the field. ...
        /// </summary>
        public bool preventScrollbars{get;set;}
    }
    #endregion
    #region TextAreaEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class TextAreaEvents
    {
    }
    #endregion
}
#endregion
