//***************************************************
//* This file was generated by tool
//* 20/07/2011 19:12:24
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.dd
namespace Ext.dd
{
    #region DragTracker
    /// <summary>
    /// A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,
    /// as well as during the drag. This is useful for components such as Ext.slider.Multi, where there is
    /// an element that can be dragged around to change the Slider&#39;s value.
    /// DragTracker provides a series of template methods that should be overridden to provide functionality
    /// in response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.
    /// See Ext.slider.Multi&#39;s initEvents function for an example implementation.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DragTracker : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Returns the drag target. ...
        /// </summary>
        public Ext.core.Element getDragTarget(){return null;}
        /// <summary>
        /// Returns the X, Y offset of the current mouse position from the mousedown point. ...
        /// </summary>
        public JsArray getOffset(object constrainMode){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Initializes the DragTracker on a given element. ...
        /// </summary>
        public object initEl(object el){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. ...
        /// </summary>
        public object onBeforeStart(Ext.EventObject e){return null;}
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. ...
        /// </summary>
        public object onDrag(Ext.EventObject e){return null;}
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. ...
        /// </summary>
        public object onEnd(Ext.EventObject e){return null;}
        /// <summary>
        /// Template method which should be overridden by each DragTracker instance. ...
        /// </summary>
        public object onStart(Ext.EventObject e){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        public bool active{get;set;}
        /// <summary>
        /// Only valid during drag operations. ...
        /// </summary>
        public HtmlElement dragTarget{get;set;}
    }
    #endregion
    #region DragTrackerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DragTrackerConfig : Ext.BaseConfig
    {
        /// <summary>
        /// Defaults to false. ...
        /// </summary>
        public object autoStart{get;set;}
        /// <summary>
        /// A Region (Or an element from which a Region measurement will be read) which is used to constrain
        /// the result of the ge...
        /// </summary>
        public object constrainTo{get;set;}
        /// <summary>
        /// Optional. ...
        /// </summary>
        public JsString @delegate{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// A CSS class to add to the DragTracker's target element when the element (or, if the delegate option is used,
        /// when a d...
        /// </summary>
        public JsString overCls{get;set;}
        /// <summary>
        /// Specify false to enable default actions on onMouseDown events. ...
        /// </summary>
        public bool preventDefault{get;set;}
        /// <summary>
        /// Specify true to stop the mousedown event from bubbling to outer listeners from the target element (or its delegates). ...
        /// </summary>
        public bool stopEvent{get;set;}
        /// <summary>
        /// Number of pixels the drag target must be moved before dragging is
        /// considered to have started. ...
        /// </summary>
        public JsNumber tolerance{get;set;}
        /// <summary>
        /// Defaults to false. ...
        /// </summary>
        public bool trackOver{get;set;}
    }
    #endregion
    #region DragTrackerEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class DragTrackerEvents : Ext.BaseEvents
    {
        /// <summary>
        /// ...
        /// </summary>
        public static JsString beforestart="beforestart";
        /// <summary>
        /// ...
        /// </summary>
        public static JsString drag="drag";
        /// <summary>
        /// ...
        /// </summary>
        public static JsString dragend="dragend";
        /// <summary>
        /// ...
        /// </summary>
        public static JsString dragstart="dragstart";
        /// <summary>
        /// Fires when the mouse button is pressed down, but before a drag operation begins. ...
        /// </summary>
        public static JsString mousedown="mousedown";
        /// <summary>
        /// Fired when the mouse is moved. ...
        /// </summary>
        public static JsString mousemove="mousemove";
        /// <summary>
        /// Only available when trackOver is true
        /// Fires when the mouse exits the DragTracker's target element (or if delegate i...
        /// </summary>
        public static JsString mouseout="mouseout";
        /// <summary>
        /// Only available when trackOver is true
        /// Fires when the mouse enters the DragTracker's target element (or if delegate ...
        /// </summary>
        public static JsString mouseover="mouseover";
        /// <summary>
        /// ...
        /// </summary>
        public static JsString mouseup="mouseup";
    }
    #endregion
}
#endregion
