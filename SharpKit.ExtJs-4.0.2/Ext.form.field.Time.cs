//***************************************************
//* This file was generated by tool
//* 20/07/2011 18:51:19
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.form.field
namespace Ext.form.field
{
    #region Time
    /// <summary>
    /// Provides a time input field with a time dropdown and automatic time validation. This field recognizes and uses JavaScript Date objects as its main value type (only the time
    /// portion of the date is used; the month/day/year are ignored). In addition, it recognizes string values which
    /// are parsed according to the format and/or altFormats configs. These may be reconfigured
    /// to use time formats appropriate for the user&#39;s locale. The field may be limited to a certain range of times by using the minValue and maxValue
    /// configs, and the interval between time options in the dropdown can be changed with the increment config.  Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
    /// title: &#39;Time Card&#39;,
    /// width: 300,
    /// bodyPadding: 10,
    /// renderTo: Ext.getBody(),
    /// items: [{
    /// xtype: &#39;timefield&#39;,
    /// name: &#39;in&#39;,
    /// fieldLabel: &#39;Time In&#39;,
    /// minValue: &#39;6:00 AM&#39;,
    /// maxValue: &#39;8:00 PM&#39;,
    /// increment: 30,
    /// anchor: &#39;100%&#39;
    /// }, {
    /// xtype: &#39;timefield&#39;,
    /// name: &#39;out&#39;,
    /// fieldLabel: &#39;Time Out&#39;,
    /// minValue: &#39;6:00 AM&#39;,
    /// maxValue: &#39;8:00 PM&#39;,
    /// increment: 30,
    /// anchor: &#39;100%&#39;
    /// }]
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Time : Picker, Labelable, Ext.form.field.Field, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// Runs all of Time's validations and returns an array of any errors. ...
        /// </summary>
        public new JsArray getErrors(object value){return null;}
        /// <summary>
        /// Replaces any existing maxValue with the new time and refreshes the picker's range. ...
        /// </summary>
        public object setMaxValue(object value){return null;}
        /// <summary>
        /// Replaces any existing minValue with the new time and refreshes the picker's range. ...
        /// </summary>
        public object setMinValue(object value){return null;}
    }
    #endregion
    #region TimeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TimeConfig
    {
        /// <summary>
        /// Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
        /// format...
        /// </summary>
        public JsString altFormats{get;set;}
        /// <summary>
        /// The default time format string which can be overriden for localization support. ...
        /// </summary>
        public JsString format{get;set;}
        public JsNumber increment{get;set;}
        public JsString invalidText{get;set;}
        /// <summary>
        /// The error text to display when the entered time is after maxValue (defaults to
        /// 'The time in this field must be equal ...
        /// </summary>
        public JsString maxText{get;set;}
        /// <summary>
        /// The maximum allowed time. ...
        /// </summary>
        public object maxValue{get;set;}
        /// <summary>
        /// The error text to display when the entered time is before minValue (defaults to
        /// 'The time in this field must be equal...
        /// </summary>
        public JsString minText{get;set;}
        /// <summary>
        /// The minimum allowed time. ...
        /// </summary>
        public object minValue{get;set;}
        /// <summary>
        /// The maximum height of the Ext.picker.Time dropdown. ...
        /// </summary>
        public JsNumber pickerMaxHeight{get;set;}
        /// <summary>
        /// Whether the Tab key should select the currently highlighted item. ...
        /// </summary>
        public bool selectOnTab{get;set;}
        /// <summary>
        /// The date format string which will be submitted to the server. ...
        /// </summary>
        public JsString submitFormat{get;set;}
        /// <summary>
        /// An additional CSS class used to style the trigger button. ...
        /// </summary>
        public JsString triggerCls{get;set;}
    }
    #endregion
    #region TimeEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class TimeEvents
    {
    }
    #endregion
}
#endregion
