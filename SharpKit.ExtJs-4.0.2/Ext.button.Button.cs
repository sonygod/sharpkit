//***************************************************
//* This file was generated by tool
//* 20/07/2011 17:29:50
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.button
namespace Ext.button
{
    #region Button
    /// <summary>
    /// Create simple buttons with this component. Customisations include aligned icons, dropdown menus, tooltips
    /// and sizing options. Specify a handler to run code when
    /// a user clicks the button, or use listeners for other events such as
    /// mouseover.
    /// Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// text: &#39;Click me&#39;,
    /// renderTo: Ext.getBody(),
    /// handler: function() {
    /// alert(&#39;You clicked the button!&#39;)
    /// }
    /// });
    /// The handler configuration can also be updated dynamically using the setHandler method.
    /// Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// text    : &#39;Dyanmic Handler Button&#39;,
    /// renderTo: Ext.getBody(),
    /// handler : function() {
    /// //this button will spit out a different number every time you click it.
    /// //so firstly we must check if that number is already set:
    /// if (this.clickCount) {
    /// //looks like the property is already set, so lets just add 1 to that number and alert the user
    /// this.clickCount++;
    /// alert(&#39;You have clicked the button &quot;&#39; + this.clickCount + &#39;&quot; times.\n\nTry clicking it again..&#39;);
    /// } else {
    /// //if the clickCount property is not set, we will set it and alert the user
    /// this.clickCount = 1;
    /// alert(&#39;You just clicked the button for the first time!\n\nTry pressing it again..&#39;);
    /// }
    /// }
    /// });
    /// A button within a container: Ext.create(&#39;Ext.Container&#39;, {
    /// renderTo: Ext.getBody(),
    /// items   : [
    /// {
    /// xtype: &#39;button&#39;,
    /// text : &#39;My Button&#39;
    /// }
    /// ]
    /// });
    /// A useful option of Button is the scale configuration. This configuration has three different options:
    /// &#39;small&#39; &#39;medium&#39; &#39;large&#39;
    /// Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// renderTo: document.body,
    /// text    : &#39;Click me&#39;,
    /// scale   : &#39;large&#39;
    /// });
    /// Buttons can also be toggled. To enable this, you simple set the enableToggle property to true.
    /// Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// renderTo: Ext.getBody(),
    /// text: &#39;Click Me&#39;,
    /// enableToggle: true
    /// });
    /// You can assign a menu to a button by using the menu configuration. This standard configuration can either be a reference to a menu
    /// object, a menu id or a menu config blob. When assigning a menu to a button, an arrow is automatically added to the button.
    /// You can change the alignment of the arrow using the arrowAlign configuration on button.
    /// Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// text      : &#39;Menu button&#39;,
    /// renderTo  : Ext.getBody(),
    /// arrowAlign: &#39;bottom&#39;,
    /// menu      : [
    /// {text: &#39;Item 1&#39;},
    /// {text: &#39;Item 2&#39;},
    /// {text: &#39;Item 3&#39;},
    /// {text: &#39;Item 4&#39;}
    /// ]
    /// });
    /// Using listeners, you can easily listen to events fired by any component, using the listeners configuration or using the addListener method.
    /// Button has a variety of different listeners:
    /// click toggle mouseover mouseout mouseshow menuhide menutriggerover menutriggerout Example usage: Ext.create(&#39;Ext.Button&#39;, {
    /// text     : &#39;Button&#39;,
    /// renderTo : Ext.getBody(),
    /// listeners: {
    /// click: function() {
    /// //this == the button, as we are in the local scope
    /// this.setText(&#39;I was clicked!&#39;);
    /// },
    /// mouseover: function() {
    /// //set a new config which says we moused over, if not already set
    /// if (!this.mousedOver) {
    /// this.mousedOver = true;
    /// alert(&#39;You moused over a button!\n\nI wont do this again.&#39;);
    /// }
    /// }
    /// }
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Button : Ext.Component, Ext.util.Floating, Ext.util.Observable, Ext.util.Animate, Ext.state.Stateful
    {
        /// <summary>
        /// This method returns an object which provides substitution parameters for the XTemplate used
        /// to create this Button's D...
        /// </summary>
        public JsArray getTemplateArgs(){return null;}
        /// <summary>
        /// Gets the text for this Button ...
        /// </summary>
        public JsString getText(){return null;}
        /// <summary>
        /// Returns true if the button has a menu and it is visible ...
        /// </summary>
        public bool hasVisibleMenu(){return false;}
        /// <summary>
        /// Hide this button's menu (if it has one) ...
        /// </summary>
        public object hideMenu(){return null;}
        /// <summary>
        /// Assigns this Button's click handler ...
        /// </summary>
        public Button setHandler(JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Show this button's menu (if it has one) ...
        /// </summary>
        public object showMenu(){return null;}
        /// <summary>
        /// If a state it passed, it becomes the pressed state otherwise the current state is toggled. ...
        /// </summary>
        public Button toggle(bool state=false, bool supressEvent=false){return null;}
        /// <summary>
        /// Read-only. ...
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Read-only. ...
        /// </summary>
        public bool hidden{get;set;}
        public Ext.menu.Menu menu{get;set;}
        /// <summary>
        /// Read-only. ...
        /// </summary>
        public bool pressed{get;set;}
        /// <summary>
        /// (Optional)
        /// A Template used to create the Button's DOM structure. ...
        /// </summary>
        public Ext.Template template{get;set;}
    }
    #endregion
    #region ButtonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ButtonConfig
    {
        /// <summary>
        /// False to not allow a pressed Button to be depressed (defaults to undefined). ...
        /// </summary>
        public bool allowDepress{get;set;}
        /// <summary>
        /// (Optional) The side of the Button box to render the arrow if the button has an associated menu. ...
        /// </summary>
        public JsString arrowAlign{get;set;}
        public JsString arrowCls{get;set;}
        /// <summary>
        /// By default, if a width is not specified the button will attempt to stretch horizontally to fit its content. ...
        /// </summary>
        public bool autoWidth{get;set;}
        /// <summary>
        /// The base CSS class to add to all buttons. ...
        /// </summary>
        public JsString baseCls{get;set;}
        public object baseParams{get;set;}
        /// <summary>
        /// The DOM event that will fire the handler of the button. ...
        /// </summary>
        public JsString clickEvent{get;set;}
        public JsString cls{get;set;}
        public bool disabled{get;set;}
        public bool enableToggle{get;set;}
        /// <summary>
        /// The CSS class to add to a button when it is in the focussed state. ...
        /// </summary>
        public JsString focusCls{get;set;}
        public bool handleMouseEvents{get;set;}
        /// <summary>
        /// A function called when the button is clicked (can be used instead of click event). ...
        /// </summary>
        public JsAction handler{get;set;}
        public bool hidden{get;set;}
        /// <summary>
        /// The path to an image to display in the button (the image will be set as the background-image
        /// CSS property of the butt...
        /// </summary>
        public JsString icon{get;set;}
        /// <summary>
        /// (Optional) The side of the Button box to render the icon. ...
        /// </summary>
        public JsString iconAlign{get;set;}
        public JsString iconCls{get;set;}
        /// <summary>
        /// Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to unde...
        /// </summary>
        public object menu{get;set;}
        /// <summary>
        /// The CSS class to add to a button when it's menu is active. ...
        /// </summary>
        public JsString menuActiveCls{get;set;}
        public JsString menuAlign{get;set;}
        /// <summary>
        /// The minimum width for this button (used to give a set of buttons a common width). ...
        /// </summary>
        public JsNumber minWidth{get;set;}
        /// <summary>
        /// The CSS class to add to a button when it is in the over (hovered) state. ...
        /// </summary>
        public JsString overCls{get;set;}
        /// <summary>
        /// If used in a Toolbar, the
        /// text to be used if this item is shown in the overflow menu. ...
        /// </summary>
        public JsString overflowText{get;set;}
        /// <summary>
        /// An object literal of parameters to pass to the url when the href property is specified. ...
        /// </summary>
        public object @params{get;set;}
        public bool pressed{get;set;}
        /// <summary>
        /// The CSS class to add to a button when it is in the pressed state. ...
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// True to prevent the default action when the clickEvent is processed. ...
        /// </summary>
        public bool preventDefault{get;set;}
        /// <summary>
        /// True to repeat fire the click event while the mouse is down. ...
        /// </summary>
        public object repeat{get;set;}
        /// <summary>
        /// (Optional) The size of the Button. ...
        /// </summary>
        public JsString scale{get;set;}
        /// <summary>
        /// The scope (this reference) in which the
        /// handler and toggleHandler is
        /// executed. ...
        /// </summary>
        public object scope{get;set;}
        public JsNumber tabIndex{get;set;}
        public JsString text{get;set;}
        public JsString toggleGroup{get;set;}
        /// <summary>
        /// Function called when a Button with enableToggle set to true is clicked. ...
        /// </summary>
        public JsAction toggleHandler{get;set;}
        public object tooltip{get;set;}
        /// <summary>
        /// The type of tooltip to use. ...
        /// </summary>
        public JsString tooltipType{get;set;}
        public JsString type{get;set;}
    }
    #endregion
    #region ButtonEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ButtonEvents
    {
        /// <summary>
        /// Fires when this button is clicked ...
        /// </summary>
        public static JsString click="click";
        /// <summary>
        /// If this button has a menu, this event fires when it is hidden ...
        /// </summary>
        public static JsString menuhide="menuhide";
        /// <summary>
        /// If this button has a menu, this event fires when it is shown ...
        /// </summary>
        public static JsString menushow="menushow";
        /// <summary>
        /// If this button has a menu, this event fires when the mouse leaves the menu triggering element ...
        /// </summary>
        public static JsString menutriggerout="menutriggerout";
        /// <summary>
        /// If this button has a menu, this event fires when the mouse enters the menu triggering element ...
        /// </summary>
        public static JsString menutriggerover="menutriggerover";
        /// <summary>
        /// Fires when the mouse exits the button ...
        /// </summary>
        public static JsString mouseout="mouseout";
        /// <summary>
        /// Fires when the mouse hovers over the button ...
        /// </summary>
        public static JsString mouseover="mouseover";
        /// <summary>
        /// Fires when the 'pressed' state of this button changes (only if enableToggle = true) ...
        /// </summary>
        public static JsString toggle="toggle";
    }
    #endregion
}
#endregion
