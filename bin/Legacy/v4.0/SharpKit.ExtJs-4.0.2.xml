<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.ExtJs-4.0.2</name>
    </assembly>
    <members>
        <member name="T:Ext.view.View">
            <summary>
            A mechanism for displaying data using custom layout templates and formatting. DataView uses an Ext.XTemplate
            as its internal templating mechanism, and is bound to an Ext.data.Store
            so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
            provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
            mouseover, mouseout, etc. as well as a built-in selection model. In order to use these features, an itemSelector
            config must be provided for the DataView to determine what nodes it will be working with. The example below binds a DataView to a Ext.data.Store and renders it into an Ext.panel.Panel.  Ext.regModel(&#39;Image&#39;, {
            Fields: [
            {name:&#39;src&#39;, type:&#39;string&#39;},
            {name:&#39;caption&#39;, type:&#39;string&#39;}
            ]
            });
            Ext.create(&#39;Ext.data.Store&#39;, {
            id:&#39;imagesStore&#39;,
            model: &#39;Image&#39;,
            data: [
            {src:&#39;http://www.sencha.com/img/20110215-feat-drawing.png&#39;, caption:&#39;Drawing &amp;amp; Charts&#39;},
            {src:&#39;http://www.sencha.com/img/20110215-feat-data.png&#39;, caption:&#39;Advanced Data&#39;},
            {src:&#39;http://www.sencha.com/img/20110215-feat-html5.png&#39;, caption:&#39;Overhauled Theme&#39;},
            {src:&#39;http://www.sencha.com/img/20110215-feat-perf.png&#39;, caption:&#39;Performance Tuned&#39;}
            ]
            });
            var imageTpl = new Ext.XTemplate(
            &#39;&amp;amp;lt;tpl for=&quot;.&quot;&amp;amp;gt;&#39;,
            &#39;&amp;amp;lt;div style=&quot;thumb-wrap&quot;&amp;amp;gt;&#39;,
            &#39;&amp;amp;lt;img src=&quot;{src}&quot; /&amp;amp;gt;&#39;,
            &#39;&amp;amp;lt;br/&amp;amp;gt;&amp;amp;lt;span&amp;amp;gt;{caption}&amp;amp;lt;/span&amp;amp;gt;&#39;,
            &#39;&amp;amp;lt;/div&amp;amp;gt;&#39;,
            &#39;&amp;amp;lt;/tpl&amp;amp;gt;&#39;
            );
            Ext.create(&#39;Ext.DataView&#39;, {
            store: Ext.data.StoreManager.lookup(&#39;imagesStore&#39;),
            tpl: imageTpl,
            itemSelector: &#39;div.thumb-wrap&#39;,
            emptyText: &#39;No images available&#39;,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.view.AbstractView">
            <summary>
            This is an abstract superclass and should not be used directly. Please see Ext.view.View.
            </summary>
        </member>
        <member name="T:Ext.Component">
            <summary>
            Base class for all Ext components.  All subclasses of Component may participate in the automated
            Ext component lifecycle of creation, rendering and destruction which is provided by the Container class.
            Components may be added to a Container through the items config option at the time the Container is created,
            or they may be added dynamically via the add method. The Component base class has built-in support for basic hide/show and enable/disable and size control behavior. All Components are registered with the Ext.ComponentManager on construction so that they can be referenced at any time via
            Ext.getCmp, passing the id. All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component. See the Creating new UI controls tutorial for details on how
            and to either extend or augment ExtJs base classes to create custom Components. Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
            xtype like getXType and isXType. This is the list of all valid xtypes: xtype            Class
            -------------    ------------------
            button           Ext.button.Button
            buttongroup      Ext.container.ButtonGroup
            colorpalette     Ext.picker.Color
            component        Ext.Component
            container        Ext.container.Container
            cycle            Ext.button.Cycle
            dataview         Ext.view.View
            datepicker       Ext.picker.Date
            editor           Ext.Editor
            editorgrid       Ext.grid.plugin.Editing
            grid             Ext.grid.Panel
            multislider      Ext.slider.Multi
            panel            Ext.panel.Panel
            progress         Ext.ProgressBar
            slider           Ext.slider.Single
            spacer           Ext.toolbar.Spacer
            splitbutton      Ext.button.Split
            tabpanel         Ext.tab.Panel
            treepanel        Ext.tree.Panel
            viewport         Ext.container.Viewport
            window           Ext.window.Window
            Toolbar components
            ---------------------------------------
            paging           Ext.toolbar.Paging
            toolbar          Ext.toolbar.Toolbar
            tbfill           Ext.toolbar.Fill
            tbitem           Ext.toolbar.Item
            tbseparator      Ext.toolbar.Separator
            tbspacer         Ext.toolbar.Spacer
            tbtext           Ext.toolbar.TextItem
            Menu components
            ---------------------------------------
            menu             Ext.menu.Menu
            menucheckitem    Ext.menu.CheckItem
            menuitem         Ext.menu.Item
            menuseparator    Ext.menu.Separator
            menutextitem     Ext.menu.Item
            Form components
            ---------------------------------------
            form             Ext.form.Panel
            checkbox         Ext.form.field.Checkbox
            combo            Ext.form.field.ComboBox
            datefield        Ext.form.field.Date
            displayfield     Ext.form.field.Display
            field            Ext.form.field.Base
            fieldset         Ext.form.FieldSet
            hidden           Ext.form.field.Hidden
            htmleditor       Ext.form.field.HtmlEditor
            label            Ext.form.Label
            numberfield      Ext.form.field.Number
            radio            Ext.form.field.Radio
            radiogroup       Ext.form.RadioGroup
            textarea         Ext.form.field.TextArea
            textfield        Ext.form.field.Text
            timefield        Ext.form.field.Time
            trigger          Ext.form.field.Trigger
            Chart components
            ---------------------------------------
            chart            Ext.chart.Chart
            barchart         Ext.chart.series.Bar
            columnchart      Ext.chart.series.Column
            linechart        Ext.chart.series.Line
            piechart         Ext.chart.series.Pie
            It should not usually be necessary to instantiate a Component because there are provided subclasses which implement specialized Component
            use cases which over most application needs. However it is possible to instantiate a base Component, and it will be renderable,
            or will particpate in layouts as the child item of a Container:
            Ext.create(&#39;Ext.Component&#39;, {
            html: &#39;Hello world!&#39;,
            width: 300,
            height: 200,
            padding: 20,
            style: {
            color: &#39;#FFFFFF&#39;,
            backgroundColor:&#39;#000000&#39;
            },
            renderTo: Ext.getBody()
            });
            The Component above creates its encapsulating div upon render, and use the configured HTML as content. More complex
            internal structure may be created using the renderTpl configuration, although to display database-derived mass
            data, it is recommended that an ExtJS data-backed Component such as a View, or
            GridPanel, or TreePanel be used.
            </summary>
        </member>
        <member name="T:Ext.AbstractComponent">
            <summary>
            An abstract base class which provides shared methods for Components across the Sencha product line. Please refer to sub class&#39;s documentation
            </summary>
        </member>
        <member name="T:Ext.Base">
            <summary>
            The root of all classes created with Ext.define
            All prototype and static members of this class are inherited by any other class
            </summary>
        </member>
        <member name="M:Ext.Base.callOverridden(System.Object)">
            <summary>
            Call the original method that was previously overridden with override
            Ext.define('My.Cat', {
            constructor: functi...
            </summary>
        </member>
        <member name="M:Ext.Base.callOverridden">
            <summary>
            Call the original method that was previously overridden with override
            Ext.define('My.Cat', {
            constructor: functi...
            </summary>
        </member>
        <member name="M:Ext.Base.callParent(System.Object)">
            <summary>
            Call the parent's overridden method. ...
            </summary>
        </member>
        <member name="M:Ext.Base.callParent">
            <summary>
            Call the parent's overridden method. ...
            </summary>
        </member>
        <member name="M:Ext.Base.getName">
            <summary>
            Get the current class' name in string format. ...
            </summary>
        </member>
        <member name="M:Ext.Base.initConfig(System.Object)">
            <summary>
            Initialize configuration for this class. ...
            </summary>
        </member>
        <member name="M:Ext.Base.statics">
            <summary>
            Get the reference to the class from which this object was instantiated. ...
            </summary>
        </member>
        <member name="P:Ext.Base.self">
            <summary>
            Get the reference to the current class from which this object was instantiated. ...
            </summary>
        </member>
        <member name="T:Ext.util.Observable">
            <summary>
            Base class that provides a common interface for publishing events. Subclasses are expected to to have a property
            &quot;events&quot; with all the events defined, and, optionally, a property &quot;listeners&quot; with configured listeners defined. For example: Ext.define(&#39;Employee&#39;, {
            extend: &#39;Ext.util.Observable&#39;,
            constructor: function(config){
            this.name = config.name;
            this.addEvents({
            &quot;fired&quot; : true,
            &quot;quit&quot; : true
            });
            // Copy configured listeners into *this* object so that the base class&#39;s
            // constructor will add them.
            this.listeners = config.listeners;
            // Call our superclass constructor to complete construction process.
            Employee.superclass.constructor.call(this, config)
            }
            });
            This could then be used like this: var newEmployee = new Employee({
            name: employeeName,
            listeners: {
            quit: function() {
            // By default, &quot;this&quot; will be the object that fired the event.
            alert(this.name + &quot; has quit!&quot;);
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.util.Observable.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.util.Observable.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="T:Ext.util.Animate">
            <summary>
            This animation class is a mixin. Ext.util.Animate provides an API for the creation of animated transitions of properties and styles.
            This class is used as a mixin and currently applied to Ext.core.Element, Ext.CompositeElement,
            Ext.draw.Sprite, Ext.draw.CompositeSprite, and Ext.Component.  Note that Components
            have a limited subset of what attributes can be animated such as top, left, x, y, height, width, and
            opacity (color, paddings, and margins can not be animated). Animation Basics All animations require three things - easing, duration, and to (the final end value for each property)
            you wish to animate. Easing and duration are defaulted values specified below.
            Easing describes how the intermediate values used during a transition will be calculated.
            Easing allows for a transition to change speed over its duration.
            You may use the defaults for easing and duration, but you must always set a
            to property which is the end value for all animations. Popular element &#39;to&#39; configurations are:  opacity x y color height width  Popular sprite &#39;to&#39; configurations are:  translation path scale stroke rotation  The default duration for animations is 250 (which is a 1/4 of a second).  Duration is denoted in
            milliseconds.  Therefore 1 second is 1000, 1 minute would be 60000, and so on. The default easing curve
            used for all animations is &#39;ease&#39;.  Popular easing functions are included and can be found in Easing. For example, a simple animation to fade out an element with a default easing and duration: var p1 = Ext.get(&#39;myElementId&#39;);
            p1.animate({
            to: {
            opacity: 0
            }
            });
            To make this animation fade out in a tenth of a second: var p1 = Ext.get(&#39;myElementId&#39;);
            p1.animate({
            duration: 100,
            to: {
            opacity: 0
            }
            });
            Animation Queues By default all animations are added to a queue which allows for animation via a chain-style API.
            For example, the following code will queue 4 animations which occur sequentially (one right after the other): p1.animate({
            to: {
            x: 500
            }
            }).animate({
            to: {
            y: 150
            }
            }).animate({
            to: {
            backgroundColor: &#39;#f00&#39;  //red
            }
            }).animate({
            to: {
            opacity: 0
            }
            });
            You can change this behavior by calling the syncFx method and all
            subsequent animations for the specified target will be run concurrently (at the same time). p1.syncFx();  //this will make all animations run at the same time
            p1.animate({
            to: {
            x: 500
            }
            }).animate({
            to: {
            y: 150
            }
            }).animate({
            to: {
            backgroundColor: &#39;#f00&#39;  //red
            }
            }).animate({
            to: {
            opacity: 0
            }
            });
            This works the same as: p1.animate({
            to: {
            x: 500,
            y: 150,
            backgroundColor: &#39;#f00&#39;  //red
            opacity: 0
            }
            });
            The stopAnimation method can be used to stop any
            currently running animations and clear any queued animations. Animation Keyframes You can also set up complex animations with keyframe which follows the
            CSS3 Animation configuration pattern. Note rotation, translation, and scaling can only be done for sprites.
            The previous example can be written with the following syntax: p1.animate({
            duration: 1000,  //one second total
            keyframes: {
            25: {     //from 0 to 250ms (25%)
            x: 0
            },
            50: {   //from 250ms to 500ms (50%)
            y: 0
            },
            75: {  //from 500ms to 750ms (75%)
            backgroundColor: &#39;#f00&#39;  //red
            },
            100: {  //from 750ms to 1sec
            opacity: 0
            }
            }
            });
            Animation Events Each animation you create has events for beforeanimation,
            afteranimate, and lastframe.
            Keyframed animations adds an additional keyframe event which
            fires for each keyframe in your animation. All animations support the listeners configuration to attact functions to these events. startAnimate: function() {
            var p1 = Ext.get(&#39;myElementId&#39;);
            p1.animate({
            duration: 100,
            to: {
            opacity: 0
            },
            listeners: {
            beforeanimate:  function() {
            // Execute my custom method before the animation
            this.myBeforeAnimateFn();
            },
            afteranimate: function() {
            // Execute my custom method after the animation
            this.myAfterAnimateFn();
            },
            scope: this
            });
            },
            myBeforeAnimateFn: function() {
            // My custom logic
            },
            myAfterAnimateFn: function() {
            // My custom logic
            }
            Due to the fact that animations run asynchronously, you can determine if an animation is currently
            running on any target by using the getActiveAnimation
            method.  This method will return false if there are no active animations or return the currently
            running Ext.fx.Anim instance. In this example, we&#39;re going to wait for the current animation to finish, then stop any other
            queued animations before we fade our element&#39;s opacity to 0: var curAnim = p1.getActiveAnimation();
            if (curAnim) {
            curAnim.on(&#39;afteranimate&#39;, function() {
            p1.stopAnimation();
            p1.animate({
            to: {
            opacity: 0
            }
            });
            });
            }
            </summary>
        </member>
        <member name="M:Ext.util.Animate.animate(System.Object)">
            <summary>
            Perform custom animation on this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.getActiveAnimation">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.hasActiveFx">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.sequenceFx">
            <summary>
            Ensures that all effects queued after sequenceFx is called on this object are
            run in sequence. ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.stopAnimation">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.stopFx">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.util.Animate.syncFx">
            <summary>
            Ensures that all effects queued after syncFx is called on this object are
            run concurrently. ...
            </summary>
        </member>
        <member name="T:Ext.state.Stateful">
            <summary>
            A mixin for being able to save the state of an object to an underlying
            Ext.state.Provider.
            </summary>
        </member>
        <member name="M:Ext.state.Stateful.addStateEvents(System.Object)">
            <summary>
            Add events that will trigger the state to be saved. ...
            </summary>
        </member>
        <member name="M:Ext.state.Stateful.applyState(System.Object)">
            <summary>
            Applies the state to the object. ...
            </summary>
        </member>
        <member name="M:Ext.state.Stateful.destroy">
            <summary>
            Destroys this stateful object. ...
            </summary>
        </member>
        <member name="M:Ext.state.Stateful.getState">
            <summary>
            Gets the current state of the object. ...
            </summary>
        </member>
        <member name="M:Ext.state.Stateful.getStateId">
            <summary>
            Gets the state id for this object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.#ctor(System.Object)">
            <summary>
            Creates new Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addClass(SharpKit.JavaScript.JsString)">
            <summary>
            Adds a CSS class to the top level element representing this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addCls(SharpKit.JavaScript.JsString)">
            <summary>
            Adds a CSS class to the top level element representing this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addClsWithUI(System.Object,System.Object)">
            <summary>
            Adds a cls to the uiCls array, which will also call addUIClsToElement and adds
            to all elements of this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addStateEvents(System.Object)">
            <summary>
            Add events that will trigger the state to be saved. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.addUIClsToElement(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Method which adds a specified UI + uiCls to the components element. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.afterComponentLayout(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean,Ext.Component)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.animate(System.Object)">
            <summary>
            Perform custom animation on this object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.applyState(System.Object)">
            <summary>
            Applies the state to the object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.beforeComponentLayout(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean,Ext.Component)">
            <summary>
            Occurs before componentLayout is run. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.destroy">
            <summary>
            Destroys the Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.disable(System.Boolean)">
            <summary>
            Disable the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.disable">
            <summary>
            Disable the component.
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.doAutoRender">
            <summary>
            Handles autoRender. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.doComponentLayout(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This method needs to be called whenever you change something on this component that requires the Component's
            layout t...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.enable(System.Boolean)">
            <summary>
            Enable the component ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.findLayoutController">
            <summary>
            This method finds the topmost active layout who's processing will eventually determine the size and position of this
            ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.forceComponentLayout">
            <summary>
            Forces this component to redo its componentLayout. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getActiveAnimation">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getBubbleTarget">
            <summary>
            Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getEl">
            <summary>
            Retrieves the top level element representing this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getHeight">
            <summary>
            Gets the current height of the component's underlying element. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getId">
            <summary>
            Retrieves the id of this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getInsertPosition(System.Object)">
            <summary>
            This function takes the position argument passed to onRender and returns a
            DOM element that you can use in the insert...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getLoader">
            <summary>
            Gets the Ext.ComponentLoader for this Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getPlugin(System.Object)">
            <summary>
            Retrieves a plugin by its pluginId which has been bound to this
            component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getSize">
            <summary>
            Gets the current size of the component's underlying element. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getState">
            <summary>
            The supplied default state gathering method for the AbstractComponent class. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getStateId">
            <summary>
            Gets the state id for this object. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getWidth">
            <summary>
            Gets the current width of the component's underlying element. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.getXTypes">
            <summary>
            Returns this Component's xtype hierarchy as a slash-delimited string. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.hasActiveFx">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.hasUICls(SharpKit.JavaScript.JsString)">
            <summary>
            Checks if there is currently a specified uiCls ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.is(SharpKit.JavaScript.JsString)">
            <summary>
            Tests whether this Component matches the selector string. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isDescendantOf(Ext.container.Container)">
            <summary>
            Determines whether this component is the descendant of a particular container. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isDisabled">
            <summary>
            Method to determine whether this Component is currently disabled. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isDraggable">
            <summary>
            Method to determine whether this Component is draggable. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isDroppable">
            <summary>
            Method to determine whether this Component is droppable. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isFloating">
            <summary>
            Method to determine whether this Component is floating. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isHidden">
            <summary>
            Method to determine whether this Component is currently set to hidden. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isVisible(System.Boolean)">
            <summary>
            Returns true if this component is visible. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.isXType(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Tests whether or not this Component is of a specific xtype. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.nextNode(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the next node in the Component tree in tree traversal order. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.nextSibling(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the next sibling of this Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.on(SharpKit.JavaScript.JsString,System.Delegate,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.on(SharpKit.JavaScript.JsString,System.Delegate,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.on(SharpKit.JavaScript.JsString,System.Delegate)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.previousNode(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the previous node in the Component tree in tree traversal order. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.previousSibling(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the previous sibling of this Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.removeCls(System.Object)">
            <summary>
            Removes a CSS class from the top level element representing this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.removeClsWithUI(System.Object,System.Object)">
            <summary>
            Removes a cls to the uiCls array, which will also call removeUIClsFromElement and removes
            it from all elements of thi...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.removeUIClsFromElement(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Method which removes a specified UI + uiCls from the components element. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.sequenceFx">
            <summary>
            Ensures that all effects queued after sequenceFx is called on this object are
            run in sequence. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setDisabled(System.Boolean)">
            <summary>
            Enable or disable the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setDocked(System.Object,System.Object)">
            <summary>
            Sets the dock position of this component in its parent panel. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setHeight(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the height of the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setLoading(System.Object,System.Boolean)">
            <summary>
            This method allows you to show or hide a LoadMask on top of this component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the left and top of the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setSize(System.Object,System.Object)">
            <summary>
            Sets the width and height of this Component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setUI(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the UI for the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setVisible(System.Boolean)">
            <summary>
            Convenience function to hide or show this component by boolean. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.setWidth(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the width of the component. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.stopAnimation">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.stopFx">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.syncFx">
            <summary>
            Ensures that all effects queued after syncFx is called on this object are
            run concurrently. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.up(SharpKit.JavaScript.JsString)">
            <summary>
            Walks up the ownerCt axis looking for an ancestor Container which matches
            the passed simple selector. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractComponent.update(System.Object,System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            Update the content area of a component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponent.id">
            <summary>
            The unique id of this component instance.
            It should not be necessary to use this configuration except for singleton objects in your application. Components created with an id may be accessed globally using Ext.getCmp.
            Instead of using assigned ids, use the itemId config, and ComponentQuery which provides selector-based searching for Sencha Components analogous to DOM querying. The Container class contains shortcut methods to query its descendant Components by selector.
            Note that this id will also be used as the element id for the containing HTML element that is rendered to the page for this component. This allows you to write id-based CSS rules to style the specific instance of this component uniquely, and also to select sub-elements using this component's id as the parent.
            Note: to avoid complications imposed by a unique id also see itemId.
            Note: to access the container of a Component see ownerCt.
            Defaults to an auto-assigned id.
            </summary>
        </member>
        <member name="P:Ext.AbstractComponent.itemId">
            <summary>
            An itemId can be used as an alternative way to get a reference to a component when no object reference is available.
            Instead of using an id with Ext.getCmp, use itemId with Ext.container.Container.getComponent which will retrieve itemId's or id's.
            Since itemId's are an index to the container's internal MixedCollection, the itemId is scoped locally to the container -- avoiding potential conflicts with Ext.ComponentManager which requires a unique id.
            </summary>
        </member>
        <member name="P:Ext.AbstractComponent.frameSize">
            <summary>
            Read-only property indicating the width of any framing elements which were added within the encapsulating element
            to ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponent.maskOnDisable">
            <summary>
            This is an internal flag that you use when creating custom components. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponent.ownerCt">
            <summary>
            This Component's owner Container (defaults to undefined, and is set automatically when
            this Component is added to a C...
            </summary>
        </member>
        <member name="T:Ext.util.Floating">
            <summary>
            A mixin to add floating capability to a Component
            </summary>
        </member>
        <member name="M:Ext.util.Floating.alignTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Aligns this floating Component to the specified element ...
            </summary>
        </member>
        <member name="M:Ext.util.Floating.center">
            <summary>
            Center this Component in its container. ...
            </summary>
        </member>
        <member name="M:Ext.util.Floating.doConstrain(System.Object)">
            <summary>
            Moves this floating Component into a constrain region. ...
            </summary>
        </member>
        <member name="M:Ext.util.Floating.setActive(System.Boolean,Ext.Component)">
            <summary>
            This method is called internally by Ext.ZIndexManager to signal that a floating
            Component has either been moved to th...
            </summary>
        </member>
        <member name="M:Ext.util.Floating.toBack">
            <summary>
            Sends this Component to the back of (lower z-index than) any other visible windows ...
            </summary>
        </member>
        <member name="M:Ext.util.Floating.toFront(System.Boolean)">
            <summary>
            Brings this floating Component to the front of any other visible, floating Components managed by the same ZIndexManag...
            </summary>
        </member>
        <member name="M:Ext.Component.#ctor(System.Object)">
            <summary>
            Creates new Component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.alignTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Aligns this floating Component to the specified element ...
            </summary>
        </member>
        <member name="M:Ext.Component.bubble(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.center">
            <summary>
            Center this Component in its container. ...
            </summary>
        </member>
        <member name="M:Ext.Component.cloneConfig(System.Object)">
            <summary>
            Clone the current component using the original config values passed into this instance by default. ...
            </summary>
        </member>
        <member name="M:Ext.Component.doConstrain(System.Object)">
            <summary>
            Moves this floating Component into a constrain region. ...
            </summary>
        </member>
        <member name="M:Ext.Component.findParentBy(SharpKit.JavaScript.JsAction)">
            <summary>
            Find a container above this component at any level by a custom function. ...
            </summary>
        </member>
        <member name="M:Ext.Component.findParentByType(System.Object)">
            <summary>
            Find a container above this component at any level by xtype or class
            See also the up method. ...
            </summary>
        </member>
        <member name="M:Ext.Component.focus(System.Boolean,System.Object)">
            <summary>
            Try to focus this component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.getBox(System.Boolean)">
            <summary>
            Gets the current box measurements of the component's underlying element. ...
            </summary>
        </member>
        <member name="M:Ext.Component.getPosition(System.Boolean)">
            <summary>
            Gets the current XY position of the component's underlying element. ...
            </summary>
        </member>
        <member name="M:Ext.Component.getXType">
            <summary>
            Gets the xtype for this component as registered with Ext.ComponentManager. ...
            </summary>
        </member>
        <member name="M:Ext.Component.hide(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Hides this Component, setting it to invisible using the configured hideMode. ...
            </summary>
        </member>
        <member name="M:Ext.Component.setActive(System.Boolean,Ext.Component)">
            <summary>
            This method is called internally by Ext.ZIndexManager to signal that a floating
            Component has either been moved to th...
            </summary>
        </member>
        <member name="M:Ext.Component.setAutoScroll(System.Boolean)">
            <summary>
            Sets the overflow on the content element of the component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.setPagePosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the page XY position of the component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.setPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the left and top of the component. ...
            </summary>
        </member>
        <member name="M:Ext.Component.show(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shows this Component, rendering it first if autoRender or floating are true. ...
            </summary>
        </member>
        <member name="M:Ext.Component.show">
            <summary>
            Shows this Component, rendering it first if autoRender or floating are true. ...
            </summary>
        </member>
        <member name="M:Ext.Component.toBack">
            <summary>
            Sends this Component to the back of (lower z-index than) any other visible windows ...
            </summary>
        </member>
        <member name="M:Ext.Component.toFront(System.Boolean)">
            <summary>
            Brings this floating Component to the front of any other visible, floating Components managed by the same ZIndexManag...
            </summary>
        </member>
        <member name="M:Ext.Component.toFront">
            <summary>
            Brings this floating Component to the front of any other visible, floating Components managed by the same ZIndexManag...
            </summary>
        </member>
        <member name="M:Ext.Component.updateBox(System.Object)">
            <summary>
            Sets the current box measurements of the component's underlying element. ...
            </summary>
        </member>
        <member name="P:Ext.Component.floatParent">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.Component.zIndexManager">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.bindStore(Ext.data.Store,System.Object)">
            <summary>
            Changes the data store bound to this view and refreshes it. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.collectData(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber)">
            <summary>
            Function which can be overridden which returns the data object passed to this
            DataView's template to render the whole...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.deselect(System.Object,System.Boolean)">
            <summary>
            Deselects a record instance by record instance or index. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.findItemByChild(Ext.Unknown.HTMLElement)">
            <summary>
            Returns the template node the passed child belongs to, or null if it doesn't belong to one. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.findTargetByEvent(Ext.EventObject)">
            <summary>
            Returns the template node by the Ext.EventObject or null if it is not found. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getNode(System.Object)">
            <summary>
            Gets a template node. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getNodes(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Gets a range nodes. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getRecord(System.Object)">
            <summary>
            Gets a record from a node ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getRecords(SharpKit.JavaScript.JsArray)">
            <summary>
            Gets an array of the records from an array of nodes ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getSelectedNodes">
            <summary>
            Gets the currently selected nodes. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getSelectedRecords">
            <summary>
            Gets an array of the selected records ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getSelectionCount">
            <summary>
            Gets the number of selected nodes. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getSelectionModel">
            <summary>
            Gets the selection model for this view. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.getStore">
            <summary>
            Returns the store associated with this DataView. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.indexOf(System.Object)">
            <summary>
            Finds the index of the passed node. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.isSelected(System.Object)">
            <summary>
            Returns true if the passed node is selected, else false. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.prepareData(System.Object,SharpKit.JavaScript.JsNumber,Ext.Unknown.Record)">
            <summary>
            Function which can be overridden to provide custom formatting for each Record that is used by this
            DataView's templat...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.refreshNode(SharpKit.JavaScript.JsNumber)">
            <summary>
            Refreshes an individual node's data from the store. ...
            </summary>
        </member>
        <member name="M:Ext.view.AbstractView.select(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Selects a record instance by record instance or index. ...
            </summary>
        </member>
        <member name="M:Ext.view.View.clearHighlight">
            <summary>
            Un-highlight the currently highlighted item, if any. ...
            </summary>
        </member>
        <member name="M:Ext.view.View.highlightItem(Ext.Unknown.HTMLElement)">
            <summary>
            Highlight a given item in the DataView. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.autoEl">
            <summary>
            A tag name or DomHelper spec used to create the Element which will
            encapsulate this Component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.autoRender">
            <summary>
            This config is intended mainly for floating Components which may or may not be shown. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.autoShow">
            <summary>
            True to automatically show the component upon creation. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.baseCls">
            <summary>
            The base CSS class to apply to this components's element. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.border">
            <summary>
            Specifies the border for this component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.componentLayout">
            <summary>
            The sizing and positioning of a Component's internal Elements is the responsibility of
            the Component's layout manager...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.contentEl">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.disabledCls">
            <summary>
            CSS class to add when the Component is disabled. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.floating">
            <summary>
            Create the Component as a floating and use absolute positioning. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.frame">
            <summary>
            Specify as true to have the Component inject framing elements within the Component at render time to
            provide a graphi...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.hideMode">
            <summary>
            A String which specifies how this Component's encapsulating DOM element will be hidden. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.html">
            <summary>
            An HTML fragment, or a DomHelper specification to use as the layout element
            content (defaults to ''). ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.id">
            <summary>
            The unique id of this component instance (defaults to an auto-assigned id). ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.itemId">
            <summary>
            An itemId can be used as an alternative way to get a reference to a component
            when no object reference is available. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.margin">
            <summary>
            Specifies the margin for this component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.maxHeight">
            <summary>
            The maximum value in pixels which this Component will set its height to. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.maxWidth">
            <summary>
            The maximum value in pixels which this Component will set its width to. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.minHeight">
            <summary>
            The minimum value in pixels which this Component will set its height to. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.minWidth">
            <summary>
            The minimum value in pixels which this Component will set its width to. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.overCls">
            <summary>
            An optional extra CSS class that will be added to this component's Element when the mouse moves
            over the Element, and...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.padding">
            <summary>
            Specifies the padding for this component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.plugins">
            <summary>
            An object or array of objects that will provide custom functionality for this component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.renderSelectors">
            <summary>
            An object containing properties specifying DomQuery selectors which identify child elements
            created by the render pro...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.renderTo">
            <summary>
            Specify the id of the element, a DOM element or an existing Element that this component
            will be rendered into. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.renderTpl">
            <summary>
            An XTemplate used to create the internal structure inside this Component's
            encapsulating Element. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.saveBuffer">
            <summary>
            A buffer to be applied if many state events are fired within
            a short period. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.stateEvents">
            <summary>
            An array of events that, when fired, should trigger this object to
            save its state (defaults to none). ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.stateId">
            <summary>
            The unique id for this object to use for state management purposes. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.stateful">
            <summary>
            A flag which causes the object to attempt to restore the state of
            internal properties from a saved state on startup. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.style">
            <summary>
            A custom style specification to be applied to this component's Element. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.styleHtmlCls">
            <summary>
            The class that is added to the content target when you set styleHtmlContent to true. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.styleHtmlContent">
            <summary>
            True to automatically style the html inside the content target of this component (body for panels). ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.tpl">
            <summary>
            An Ext.Template, Ext.XTemplate
            or an array of strings to form an Ext.XTemplate. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.tplWriteMode">
            <summary>
            The Ext.(X)Template method to use when
            updating the content area of the Component. ...
            </summary>
        </member>
        <member name="P:Ext.AbstractComponentConfig.ui">
            <summary>
            A set style for a component. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.autoScroll">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when
            necessary, false...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.draggable">
            <summary>
            Specify as true to make a floating Component draggable using the Component's encapsulating element as the drag handle. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.floating">
            <summary>
            Specify as true to float the Component outside of the document flow using CSS absolute positioning. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.focusOnToFront">
            <summary>
            Specifies whether the floated component should be automatically focused when it is
            brought to the front. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.maintainFlex">
            <summary>
            Only valid when a sibling element of a Splitter within a VBox or
            HBox layout. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.resizable">
            <summary>
            Specify as true to apply a Resizer to this Component
            after rendering. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.resizeHandles">
            <summary>
            A valid Ext.resizer.Resizer handles config string (defaults to 'all'). ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.shadow">
            <summary>
            Specifies whether the floating component should be given a shadow. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.toFrontOnShow">
            <summary>
            True to automatically call toFront when the show method is called
            on an already visible, floating component (default ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.blockRefresh">
            <summary>
            Set this to true to ignore datachanged events on the bound store. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.disableSelection">
            <summary>
            true to disable selection within the DataView. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.emptyText">
            <summary>
            The text to display in the view when there is no data to display (defaults to ''). ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.itemSelector">
            <summary>
            @required
            This is a required setting. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.itemTpl">
            <summary>
            The inner portion of the item template to be rendered. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.loadMask">
            <summary>
            False to disable a load mask from displaying will the view is loading. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.loadingHeight">
            <summary>
            If specified, gives an explicit height for the data view when it is showing the loadingText,
            if that is specified. ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.loadingText">
            <summary>
            A string to display during data load operations (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.multiSelect">
            <summary>
            True to allow selection of more than one item at a time, false to allow selection of only a single item
            at a time or ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.overItemCls">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.simpleSelect">
            <summary>
            True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
            false t...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.singleSelect">
            <summary>
            True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.view.AbstractViewConfig.tpl">
            <summary>
            @required
            The HTML fragment or an array of fragments that will make up the template used by this DataView. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.activate">
            <summary>
            Fires after a Component has been visually activated. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.added">
            <summary>
            Fires after a Component had been added to a Container. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.afterrender">
            <summary>
            Fires after the component rendering is finished. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforeactivate">
            <summary>
            Fires before a Component has been visually activated. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforedeactivate">
            <summary>
            Fires before a Component has been visually deactivated. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforedestroy">
            <summary>
            Fires before the component is destroyed. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforehide">
            <summary>
            Fires before the component is hidden when calling the hide method. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforerender">
            <summary>
            Fires before the component is rendered. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforeshow">
            <summary>
            Fires before the component is shown when calling the show method. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforestaterestore">
            <summary>
            Fires before the state of the object is restored. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.beforestatesave">
            <summary>
            Fires before the state of the object is saved to the configured state provider. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.deactivate">
            <summary>
            Fires after a Component has been visually deactivated. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.destroy">
            <summary>
            Fires after the component is destroyed. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.disable">
            <summary>
            Fires after the component is disabled. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.enable">
            <summary>
            Fires after the component is enabled. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.hide">
            <summary>
            Fires after the component is hidden. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.move">
            <summary>
            Fires after the component is moved. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.removed">
            <summary>
            Fires when a component is removed from an Ext.container.Container ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.render">
            <summary>
            Fires after the component markup is rendered. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.resize">
            <summary>
            Fires after the component is resized. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.show">
            <summary>
            Fires after the component is shown when calling the show method. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.staterestore">
            <summary>
            Fires after the state of the object is restored. ...
            </summary>
        </member>
        <member name="F:Ext.AbstractComponentEvents.statesave">
            <summary>
            Fires after the state of the object is saved to the configured state provider. ...
            </summary>
        </member>
        <member name="F:Ext.view.AbstractViewEvents.beforerefresh">
            <summary>
            Fires before the view is refreshed ...
            </summary>
        </member>
        <member name="F:Ext.view.AbstractViewEvents.itemadd">
            <summary>
            Fires when the nodes associated with an recordset have been added to the underlying store ...
            </summary>
        </member>
        <member name="F:Ext.view.AbstractViewEvents.itemremove">
            <summary>
            Fires when the node associated with an individual record is removed ...
            </summary>
        </member>
        <member name="F:Ext.view.AbstractViewEvents.itemupdate">
            <summary>
            Fires when the node associated with an individual record is updated ...
            </summary>
        </member>
        <member name="F:Ext.view.AbstractViewEvents.refresh">
            <summary>
            Fires when the view is refreshed ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainerclick">
            <summary>
            Fires before the click event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainercontextmenu">
            <summary>
            Fires before the contextmenu event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainerdblclick">
            <summary>
            Fires before the dblclick event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainerkeydown">
            <summary>
            Fires before the keydown event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainermousedown">
            <summary>
            Fires before the mousedown event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainermouseout">
            <summary>
            Fires before the mouseout event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainermouseover">
            <summary>
            Fires before the mouseover event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforecontainermouseup">
            <summary>
            Fires before the mouseup event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemclick">
            <summary>
            Fires before the click event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemcontextmenu">
            <summary>
            Fires before the contextmenu event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemdblclick">
            <summary>
            Fires before the dblclick event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemkeydown">
            <summary>
            Fires before the keydown event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemmousedown">
            <summary>
            Fires before the mousedown event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemmouseenter">
            <summary>
            Fires before the mouseenter event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemmouseleave">
            <summary>
            Fires before the mouseleave event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeitemmouseup">
            <summary>
            Fires before the mouseup event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.beforeselect">
            <summary>
            Fires before a selection is made. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containerclick">
            <summary>
            Fires when the container is clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containercontextmenu">
            <summary>
            Fires when the container is right clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containerdblclick">
            <summary>
            Fires when the container is double clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containerkeydown">
            <summary>
            Fires when a key is pressed while the container is focused, and no item is currently selected. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containermouseout">
            <summary>
            Fires when you move the mouse out of the container. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containermouseover">
            <summary>
            Fires when you move the mouse over the container. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.containermouseup">
            <summary>
            Fires when there is a mouse up on the container ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemclick">
            <summary>
            Fires when an item is clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemcontextmenu">
            <summary>
            Fires when an item is right clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemdblclick">
            <summary>
            Fires when an item is double clicked. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemkeydown">
            <summary>
            Fires when a key is pressed while an item is currently selected. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemmousedown">
            <summary>
            Fires when there is a mouse down on an item ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemmouseenter">
            <summary>
            Fires when the mouse enters an item. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemmouseleave">
            <summary>
            Fires when the mouse leaves an item. ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.itemmouseup">
            <summary>
            Fires when there is a mouse up on an item ...
            </summary>
        </member>
        <member name="F:Ext.view.ViewEvents.selectionchange">
            <summary>
            Fires when the selected nodes change. ...
            </summary>
        </member>
        <member name="T:Ext.menu.CheckItem">
            <summary>
            A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.  Example Usage Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 110,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            xtype: &#39;menucheckitem&#39;,
            text: &#39;select all&#39;
            },{
            xtype: &#39;menucheckitem&#39;,
            text: &#39;select specific&#39;,
            },{
            iconCls: &#39;add16&#39;,
            text: &#39;icon item&#39;
            },{
            text: &#39;regular item&#39;
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.menu.Item">
            <summary>
            A base class for all menu items that require menu-related functionality such as click handling,
            sub-menus, icons, etc.  Example Usage: Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 100,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;icon item&#39;,
            iconCls: &#39;add16&#39;
            },{
            text: &#39;text item&#39;,
            },{
            text: &#39;plain item&#39;,
            plain: true
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.menu.Item.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets the click handler of this item ...
            </summary>
        </member>
        <member name="M:Ext.menu.Item.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the iconCls of this item ...
            </summary>
        </member>
        <member name="M:Ext.menu.Item.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the text of this item ...
            </summary>
        </member>
        <member name="P:Ext.menu.Item.menu">
            <summary>
            Either an instance of Ext.menu.Menu or a config object for an Ext.menu.Menu
            which will act as a sub-menu to this item. ...
            </summary>
        </member>
        <member name="M:Ext.menu.CheckItem.disableCheckChange">
            <summary>
            Disables just the checkbox functionality of this menu Item. ...
            </summary>
        </member>
        <member name="M:Ext.menu.CheckItem.enableCheckChange">
            <summary>
            Reenables the checkbox functionality of this menu item after having been disabled by disableCheckChange ...
            </summary>
        </member>
        <member name="M:Ext.menu.CheckItem.setChecked(System.Boolean,System.Boolean)">
            <summary>
            Sets the checked state of the item ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.activeCls">
            <summary>
            The CSS class added to the menu item when the item is activated (focused/mouseover). ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.canActivate">
            <summary>
            Whether or not this menu item can be activated when focused/mouseovered. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.clickHideDelay">
            <summary>
            The delay in milliseconds to wait before hiding the menu after clicking the menu item. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.destroyMenu">
            <summary>
            Whether or not to destroy any associated sub-menu when this item is destroyed. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.disabledCls">
            <summary>
            The CSS class added to the menu item when the item is disabled. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.hideOnClick">
            <summary>
            Whether to not to hide the owning menu when this item is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.href">
            <summary>
            The href attribute to use for the underlying anchor link. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.hrefTarget">
            <summary>
            The target attribute to use for the underlying anchor link. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.icon">
            <summary>
            The path to an icon to display in this item. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.iconCls">
            <summary>
            A CSS class that specifies a background-image to use as the icon for this item. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.menuAlign">
            <summary>
            The default Ext.Element.getAlignToXY anchor position value for this
            item's sub-menu relative to this item's position. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.menuExpandDelay">
            <summary>
            The delay in milliseconds before this item's sub-menu expands after this item is moused over. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.menuHideDelay">
            <summary>
            The delay in milliseconds before this item's sub-menu hides after this item is moused out. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.plain">
            <summary>
            Whether or not this item is plain text/html with no icon or visual activation. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.text">
            <summary>
            The text/html to display in this item. ...
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.checkedCls">
            <summary>
            The CSS class used by cls to show the checked state. ...
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.groupCls">
            <summary>
            The CSS class applied to this item's icon image to denote being a part of a radio group. ...
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.hideOnClick">
            <summary>
            Whether to not to hide the owning menu when this item is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.uncheckedCls">
            <summary>
            The CSS class used by cls to show the unchecked state. ...
            </summary>
        </member>
        <member name="F:Ext.menu.ItemEvents.activate">
            <summary>
            Fires when this item is activated ...
            </summary>
        </member>
        <member name="F:Ext.menu.ItemEvents.click">
            <summary>
            Fires when this item is clicked ...
            </summary>
        </member>
        <member name="F:Ext.menu.ItemEvents.deactivate">
            <summary>
            Fires when this tiem is deactivated ...
            </summary>
        </member>
        <member name="F:Ext.menu.CheckItemEvents.beforecheckchange">
            <summary>
            Fires before a change event. ...
            </summary>
        </member>
        <member name="F:Ext.menu.CheckItemEvents.checkchange">
            <summary>
            Fires after a change event. ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Container">
            <summary>
            This class is intended to be extended or created via the layout
            configuration property.  See Ext.container.Container.layout for additional details.
            </summary>
        </member>
        <member name="T:Ext.layout.container.AbstractContainer">
            <summary>
            Please refer to sub classes documentation
            </summary>
        </member>
        <member name="T:Ext.layout.Layout">
            <summary>
            Base Layout class - extended by ComponentLayout and ContainerLayout
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractContainer.getLayoutItems">
            <summary>
            Returns an array of child components either for a render phase (Performed in the beforeLayout method of the layout's
            ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractContainer.getRenderTarget">
            <summary>
            Returns the element into which rendering must take place. ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractContainer.getTarget">
            <summary>
            Returns the owner component's resize element. ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.Container.getRenderedItems">
            <summary>
            Returns all items that are rendered ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.Container.getVisibleItems">
            <summary>
            Returns all items that are both rendered and visible ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AbstractContainerConfig.itemCls">
            <summary>
            An optional extra CSS class that will be added to the container. ...
            </summary>
        </member>
        <member name="T:Ext.grid.plugin.CellEditing">
            <summary>
            The Ext.grid.plugin.CellEditing plugin injects editing at a cell level for a Grid. Only a single
            cell will be editable at a time. The field that will be used for the editor is defined at the
            field. The editor can be a field instance or a field configuration. If an editor is not specified for a particular column then that cell will not be editable and it will
            be skipped when activated via the mouse or the keyboard. The editor may be shared for each column in the grid, or a different one may be specified for each column.
            An appropriate field type should be chosen to match the data structure that it will be editing. For example,
            to edit a date, it would be useful to specify Ext.form.field.Date as the editor.  Example Usage Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;simpsonsStore&#39;,
            fields:[&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            data:{&#39;items&#39;:[
            {&quot;name&quot;:&quot;Lisa&quot;, &quot;email&quot;:&quot;lisa@simpsons.com&quot;, &quot;phone&quot;:&quot;555-111-1224&quot;},
            {&quot;name&quot;:&quot;Bart&quot;, &quot;email&quot;:&quot;bart@simpsons.com&quot;, &quot;phone&quot;:&quot;555--222-1234&quot;},
            {&quot;name&quot;:&quot;Homer&quot;, &quot;email&quot;:&quot;home@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1244&quot;},
            {&quot;name&quot;:&quot;Marge&quot;, &quot;email&quot;:&quot;marge@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1254&quot;}
            ]},
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;
            }
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: Ext.data.StoreManager.lookup(&#39;simpsonsStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;, field: &#39;textfield&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1,
            editor: {
            xtype:&#39;textfield&#39;,
            allowBlank:false
            }
            },
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            selType: &#39;cellmodel&#39;,
            plugins: [
            Ext.create(&#39;Ext.grid.plugin.CellEditing&#39;, {
            clicksToEdit: 1
            })
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.grid.plugin.Editing">
            <summary>
            This class provides an abstract grid editing plugin on selected columns.
            The editable columns are specified by providing an editor
            in the column configuration. Note:* This class should not be used directly. See Ext.grid.plugin.CellEditing and
            Ext.grid.plugin.RowEditing.
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.cancelEdit">
            <summary>
            Cancel any active edit that is in progress. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.completeEdit">
            <summary>
            Complete the edit if there is an active edit in progress. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.startEdit(System.Object,System.Object)">
            <summary>
            Start editing the specified record, using the specified Column definition to define which field is being edited. ...
            </summary>
            <param name="record">The Store data record which backs the row to be edited, or index of the record in Store.</param>
            <param name="columnHeader">The Column object defining the column to be edited, or index of the column.</param>
        </member>
        <member name="M:Ext.grid.plugin.Editing.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.Editing.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.CellEditing.cancelEdit">
            <summary>
            Cancel any active editing. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.CellEditing.startEdit(Ext.data.Model,Ext.data.Model)">
            <summary>
            Start editing the specified record, using the specified Column definition to define which field is being edited. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.CellEditing.startEditByPosition(System.Object)">
            <summary>
            Starts editing by position (row/column) ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.EditingConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.CellEditingEvents.beforeedit">
            <summary>
            Fires before cell editing is triggered. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.CellEditingEvents.edit">
            <summary>
            Fires after a cell is edited. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.CellEditingEvents.validateedit">
            <summary>
            Fires after a cell is edited, but before the value is set in the record. ...
            </summary>
        </member>
        <member name="T:Ext.grid.feature.GroupingSummary">
            <summary>
            This feature adds an aggregate summary row at the bottom of each group that is provided
            by the Ext.grid.feature.Grouping feature. There are 2 aspects to the summary: Calculation The summary value needs to be calculated for each column in the grid. This is controlled
            by the summaryType option specified on the column. There are several built in summary types,
            which can be specified as a string on the column configuration. These call underlying methods
            on the store:  count sum min max average  Alternatively, the summaryType can be a function definition. If this is the case,
            the function is called with an array of records to calculate the summary value. Rendering Similar to a column, the summary also supports a summaryRenderer function. This
            summaryRenderer is called before displaying a value. The function is optional, if
            not specified the default calculated value is shown. The summaryRenderer is called with:  value {Object} - The calculated value. summaryData {Object} - Contains all raw summary values for the row. field {String} - The name of the field we are calculating  Example Usage Ext.define(&#39;TestResult&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;student&#39;, &#39;subject&#39;, {
            name: &#39;mark&#39;,
            type: &#39;int&#39;
            }]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            width: 200,
            height: 240,
            renderTo: document.body,
            features: [{
            groupHeaderTpl: &#39;Subject: {name}&#39;,
            ftype: &#39;groupingsummary&#39;
            }],
            store: {
            model: &#39;TestResult&#39;,
            groupField: &#39;subject&#39;,
            data: [{
            student: &#39;Student 1&#39;,
            subject: &#39;Math&#39;,
            mark: 84
            },{
            student: &#39;Student 1&#39;,
            subject: &#39;Science&#39;,
            mark: 72
            },{
            student: &#39;Student 2&#39;,
            subject: &#39;Math&#39;,
            mark: 96
            },{
            student: &#39;Student 2&#39;,
            subject: &#39;Science&#39;,
            mark: 68
            }]
            },
            columns: [{
            dataIndex: &#39;student&#39;,
            text: &#39;Name&#39;,
            summaryType: &#39;count&#39;,
            summaryRenderer: function(value){
            return Ext.String.format(&#39;{0} student{1}&#39;, value, value !== 1 ? &#39;s&#39; : &#39;&#39;);
            }
            }, {
            dataIndex: &#39;mark&#39;,
            text: &#39;Mark&#39;,
            summaryType: &#39;average&#39;
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.grid.feature.Grouping">
            <summary>
            This feature allows to display the grid rows aggregated into groups as specified by the Ext.data.Store.groupers
            specified on the Store. The group will show the title for the group name and then the appropriate records for the group
            underneath. The groups can also be expanded and collapsed. Extra Events This feature adds several extra events that will be fired on the grid to interact with the groups:  groupclick groupdblclick groupcontextmenu groupexpand groupcollapse  Menu Augmentation This feature adds extra options to the grid column menu to provide the user with functionality to modify the grouping.
            This can be disabled by setting the enableGroupingMenu option. The option to disallow grouping from being turned off
            by thew user is enableNoGroups. Controlling Group Text The groupHeaderTpl is used to control the rendered title for each group. It can modified to customized
            the default display. Example Usage var groupingFeature = Ext.create(&#39;Ext.grid.feature.Grouping&#39;, {
            groupHeaderTpl: &#39;Group: {name} ({rows.length})&#39;, //print the number of items in the group
            startCollapsed: true // start all groups collapsed
            });
            </summary>
        </member>
        <member name="T:Ext.grid.feature.Feature">
            <summary>
            A feature is a type of plugin that is specific to the Ext.grid.Panel. It provides several
            hooks that allows the developer to inject additional functionality at certain points throughout the
            grid creation cycle. This class provides the base template methods that are available to the developer,
            it should be extended. There are several built in features that extend this class, for example:  Ext.grid.feature.Grouping - Shows grid rows in groups as specified by the Ext.data.Store Ext.grid.feature.RowBody - Adds a body section for each grid row that can contain markup. Ext.grid.feature.Summary - Adds a summary row at the bottom of the grid with aggregate totals for a column.  Using Features A feature is added to the grid by specifying it an array of features in the configuration: var groupingFeature = Ext.create(&#39;Ext.grid.feature.Grouping&#39;);
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            // other options
            features: [groupingFeature]
            });
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.attachEvents">
            <summary>
            Approriate place to attach events to the view, selectionmodel, headerCt, etc ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.disable">
            <summary>
            Disable a feature ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.enable">
            <summary>
            Enable a feature ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.getAdditionalData(System.Object,SharpKit.JavaScript.JsNumber,Ext.data.Model,System.Object)">
            <summary>
            Provide additional data to the prepareData call within the grid view. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.getFireEventArgs(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Abstract method to be overriden when a feature should add additional
            arguments to its event signature. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.getMetaRowTplFragments">
            <summary>
            Allows a feature to inject member methods into the metaRowTpl. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.mutateMetaRowTpl(System.Object)">
            <summary>
            Allows a feature to mutate the metaRowTpl. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Feature.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.Feature.collectData">
            <summary>
            Most features will not modify the data returned to the view. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.Feature.eventPrefix">
            <summary>
            Prefix to use when firing events on the view. ...
            </summary>
        </member>
        <member name="T:Ext.grid.feature.AbstractSummary">
            <summary>
            A small abstract class that contains the shared behaviour for any summary
            calculations to be used in the grid.
            </summary>
        </member>
        <member name="M:Ext.grid.feature.AbstractSummary.getColumnValue(Ext.grid.column.Column,System.Object)">
            <summary>
            Gets the value for the column from the attached data. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.AbstractSummary.toggleSummaryRow(System.Boolean)">
            <summary>
            Toggle whether or not to show the summary row. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.getColumnValue(Ext.grid.column.Column,System.Object)">
            <summary>
            Gets the value for the column from the attached data. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.toggleSummaryRow(System.Boolean)">
            <summary>
            Toggle whether or not to show the summary row. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.GroupingSummary.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.util.ObservableConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.FeatureConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.GroupingConfig.groupHeaderTpl">
            <summary>
            Template snippet, this cannot be an actual template. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.GroupingSummaryConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.GroupingSummaryConfig.remoteRoot">
            <summary>
            .  The name of the property
            which contains the Array of summary objects. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.GroupingSummaryConfig.showSummaryRow">
            <summary>
            True to show the summary row. ...
            </summary>
        </member>
        <member name="F:Ext.grid.feature.GroupingEvents.groupclick">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.feature.GroupingEvents.groupcollapse">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.feature.GroupingEvents.groupcontextmenu">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.feature.GroupingEvents.groupdblclick">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.feature.GroupingEvents.groupexpand">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.form.RadioGroup">
            <summary>
            A field container which has a specialized layout for arranging
            Ext.form.field.Radio controls into columns, and provides convenience Ext.form.field.Field
            methods for getting, setting, and validating the
            group of radio buttons as a whole. Validation Individual radio buttons themselves have no default validation behavior, but
            sometimes you want to require a user to select one of a group of radios. RadioGroup
            allows this by setting the config allowBlank:false; when the user does not check at
            one of the radio buttons, the entire group will be highlighted as invalid and the
            error message will be displayed according to the msgTarget config. Layout The default layout for RadioGroup makes it easy to arrange the radio buttons into
            columns; see the columns and vertical config documentation for details. You may also
            use a completely different layout by setting the layout to one of the other supported layout
            types; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case
            the Radio components at any depth will still be managed by the RadioGroup&#39;s validation.  Example usage Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;RadioGroup Example&#39;,
            width: 300,
            height: 125,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items:[{
            xtype: &#39;radiogroup&#39;,
            fieldLabel: &#39;Two Columns&#39;,
            // Arrange radio buttons into two columns, distributed vertically
            columns: 2,
            vertical: true,
            items: [
            {boxLabel: &#39;Item 1&#39;, name: &#39;rb&#39;, inputValue: &#39;1&#39;},
            {boxLabel: &#39;Item 2&#39;, name: &#39;rb&#39;, inputValue: &#39;2&#39;, checked: true},
            {boxLabel: &#39;Item 3&#39;, name: &#39;rb&#39;, inputValue: &#39;3&#39;},
            {boxLabel: &#39;Item 4&#39;, name: &#39;rb&#39;, inputValue: &#39;4&#39;},
            {boxLabel: &#39;Item 5&#39;, name: &#39;rb&#39;, inputValue: &#39;5&#39;},
            {boxLabel: &#39;Item 6&#39;, name: &#39;rb&#39;, inputValue: &#39;6&#39;}
            ]
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.form.CheckboxGroup">
            <summary>
            A field container which has a specialized layout for arranging
            Ext.form.field.Checkbox controls into columns, and provides convenience Ext.form.field.Field methods
            for getting, setting, and validating the group
            of checkboxes as a whole. Validation Individual checkbox fields themselves have no default validation behavior, but
            sometimes you want to require a user to select at least one of a group of checkboxes. CheckboxGroup
            allows this by setting the config allowBlank:false; when the user does not check at
            least one of the checkboxes, the entire group will be highlighted as invalid and the
            error message will be displayed according to the msgTarget config. Layout The default layout for CheckboxGroup makes it easy to arrange the checkboxes into
            columns; see the columns and vertical config documentation for details. You may also
            use a completely different layout by setting the layout to one of the other supported layout
            types; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case
            the checkbox components at any depth will still be managed by the CheckboxGroup&#39;s validation.  Example usage Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Checkbox Group&#39;,
            width: 300,
            height: 125,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items:[{
            xtype: &#39;checkboxgroup&#39;,
            fieldLabel: &#39;Two Columns&#39;,
            // Arrange radio buttons into two columns, distributed vertically
            columns: 2,
            vertical: true,
            items: [
            {boxLabel: &#39;Item 1&#39;, name: &#39;rb&#39;, inputValue: &#39;1&#39;},
            {boxLabel: &#39;Item 2&#39;, name: &#39;rb&#39;, inputValue: &#39;2&#39;, checked: true},
            {boxLabel: &#39;Item 3&#39;, name: &#39;rb&#39;, inputValue: &#39;3&#39;},
            {boxLabel: &#39;Item 4&#39;, name: &#39;rb&#39;, inputValue: &#39;4&#39;},
            {boxLabel: &#39;Item 5&#39;, name: &#39;rb&#39;, inputValue: &#39;5&#39;},
            {boxLabel: &#39;Item 6&#39;, name: &#39;rb&#39;, inputValue: &#39;6&#39;}
            ]
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.form.FieldContainer">
            <summary>
            FieldContainer is a derivation of Container that implements the
            Labelable mixin. This allows it to be configured so that it is rendered with
            a field label and optional error message around its sub-items.
            This is useful for arranging a group of fields or other components within a single item in a form, so
            that it lines up nicely with other fields. A common use is for grouping a set of related fields under
            a single label in a form. The container&#39;s configured items will be layed out within the field body area according to the
            configured layout type. The default layout is &#39;autocontainer&#39;. Like regular fields, FieldContainer can inherit its decoration configuration from the
            fieldDefaults of an enclosing FormPanel. In addition,
            FieldContainer itself can pass fieldDefaults to any fields
            it may itself contain. If you are grouping a set of Checkbox or Radio
            fields in a single labeled container, consider using a Ext.form.CheckboxGroup
            or Ext.form.RadioGroup instead as they are specialized for handling those types.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;FieldContainer Example&#39;,
            width: 550,
            bodyPadding: 10,
            items: [{
            xtype: &#39;fieldcontainer&#39;,
            fieldLabel: &#39;Last Three Jobs&#39;,
            labelWidth: 100,
            // The body area will contain three text fields, arranged
            // horizontally, separated by draggable splitters.
            layout: &#39;hbox&#39;,
            items: [{
            xtype: &#39;textfield&#39;,
            flex: 1
            }, {
            xtype: &#39;splitter&#39;
            }, {
            xtype: &#39;textfield&#39;,
            flex: 1
            }, {
            xtype: &#39;splitter&#39;
            }, {
            xtype: &#39;textfield&#39;,
            flex: 1
            }]
            }],
            renderTo: Ext.getBody()
            });
            Usage of fieldDefaults:  Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;FieldContainer Example&#39;,
            width: 350,
            bodyPadding: 10,
            items: [{
            xtype: &#39;fieldcontainer&#39;,
            fieldLabel: &#39;Your Name&#39;,
            labelWidth: 75,
            defaultType: &#39;textfield&#39;,
            // Arrange fields vertically, stretched to full width
            layout: &#39;anchor&#39;,
            defaults: {
            layout: &#39;100%&#39;
            },
            // These config values will be applied to both sub-fields, except
            // for Last Name which will use its own msgTarget.
            fieldDefaults: {
            msgTarget: &#39;under&#39;,
            labelAlign: &#39;top&#39;
            },
            items: [{
            fieldLabel: &#39;First Name&#39;,
            name: &#39;firstName&#39;
            }, {
            fieldLabel: &#39;Last Name&#39;,
            name: &#39;lastName&#39;,
            msgTarget: &#39;under&#39;
            }]
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.container.Container">
            <summary>
            Base class for any Ext.Component that may contain other Components. Containers handle the
            basic behavior of containing items, namely adding, inserting and removing items. The most commonly used Container classes are Ext.panel.Panel, Ext.window.Window and Ext.tab.Panel.
            If you do not need the capabilities offered by the aforementioned classes you can create a lightweight
            Container to be encapsulated by an HTML element to your specifications by using the
            autoEl config option.  The code below illustrates how to explicitly create a Container:
            // explicitly create a Container
            Ext.create(&#39;Ext.container.Container&#39;, {
            layout: {
            type: &#39;hbox&#39;
            },
            width: 400,
            renderTo: Ext.getBody(),
            border: 1,
            style: {borderColor:&#39;#000000&#39;, borderStyle:&#39;solid&#39;, borderWidth:&#39;1px&#39;},
            defaults: {
            labelWidth: 80,
            // implicitly create Container by specifying xtype
            xtype: &#39;datefield&#39;,
            flex: 1,
            style: {
            padding: &#39;10px&#39;
            }
            },
            items: [{
            xtype: &#39;datefield&#39;,
            name: &#39;startDate&#39;,
            fieldLabel: &#39;Start date&#39;
            },{
            xtype: &#39;datefield&#39;,
            name: &#39;endDate&#39;,
            fieldLabel: &#39;End date&#39;
            }]
            });
            Layout Container classes delegate the rendering of child Components to a layout
            manager class which must be configured into the Container using the
            layout configuration property. When either specifying child items of a Container,
            or dynamically adding Components to a Container, remember to
            consider how you wish the Container to arrange those child elements, and
            whether those child elements need to be sized using one of Ext&#39;s built-in
            layout schemes. By default, Containers use the
            Auto scheme which only
            renders child components, appending them one after the other inside the
            Container, and does not apply any sizing at all. A common mistake is when a developer neglects to specify a
            layout (e.g. widgets like GridPanels or
            TreePanels are added to Containers for which no layout
            has been specified). If a Container is left to use the default
            {Ext.layout.container.Auto Auto} scheme, none of its
            child components will be resized, or changed in any way when the Container
            is resized. Certain layout managers allow dynamic addition of child components.
            Those that do include Ext.layout.container.Card,
            Ext.layout.container.Anchor, Ext.layout.container.VBox, Ext.layout.container.HBox, and
            Ext.layout.container.Table. For example:
            //  Create the GridPanel.
            var myNewGrid = new Ext.grid.Panel({
            store: myStore,
            headers: myHeaders,
            title: &#39;Results&#39;, // the title becomes the title of the tab
            });
            myTabPanel.add(myNewGrid); // Ext.tab.Panel implicitly uses Card
            myTabPanel.setActiveTab(myNewGrid);
            The example above adds a newly created GridPanel to a TabPanel. Note that
            a TabPanel uses Ext.layout.container.Card as its layout manager which
            means all its child items are sized to fit
            exactly into its client area.
            Overnesting is a common problem.
            An example of overnesting occurs when a GridPanel is added to a TabPanel
            by wrapping the GridPanel inside a wrapping Panel (that has no
            layout specified) and then add that wrapping Panel
            to the TabPanel. The point to realize is that a GridPanel is a
            Component which can be added directly to a Container. If the wrapping Panel
            has no layout configuration, then the overnested
            GridPanel will not be sized as expected. Adding via remote configuration A server side script can be used to add Components which are generated dynamically on the server.
            An example of adding a GridPanel to a TabPanel where the GridPanel is generated by the server
            based on certain parameters:
            // execute an Ajax request to invoke server side script:
            Ext.Ajax.request({
            url: &#39;gen-invoice-grid.php&#39;,
            // send additional parameters to instruct server script
            params: {
            startDate: Ext.getCmp(&#39;start-date&#39;).getValue(),
            endDate: Ext.getCmp(&#39;end-date&#39;).getValue()
            },
            // process the response object to add it to the TabPanel:
            success: function(xhr) {
            var newComponent = eval(xhr.responseText); // see discussion below
            myTabPanel.add(newComponent); // add the component to the TabPanel
            myTabPanel.setActiveTab(newComponent);
            },
            failure: function() {
            Ext.Msg.alert(&quot;Grid create failed&quot;, &quot;Server communication failure&quot;);
            }
            });
            The server script needs to return a JSON representation of a configuration object, which, when decoded
            will return a config object with an xtype. The server might return the following
            JSON: {
            &quot;xtype&quot;: &#39;grid&#39;,
            &quot;title&quot;: &#39;Invoice Report&#39;,
            &quot;store&quot;: {
            &quot;model&quot;: &#39;Invoice&#39;,
            &quot;proxy&quot;: {
            &quot;type&quot;: &#39;ajax&#39;,
            &quot;url&quot;: &#39;get-invoice-data.php&#39;,
            &quot;reader&quot;: {
            &quot;type&quot;: &#39;json&#39;
            &quot;record&quot;: &#39;transaction&#39;,
            &quot;idProperty&quot;: &#39;id&#39;,
            &quot;totalRecords&quot;: &#39;total&#39;
            })
            },
            &quot;autoLoad&quot;: {
            &quot;params&quot;: {
            &quot;startDate&quot;: &#39;01/01/2008&#39;,
            &quot;endDate&quot;: &#39;01/31/2008&#39;
            }
            }
            },
            &quot;headers&quot;: [
            {&quot;header&quot;: &quot;Customer&quot;, &quot;width&quot;: 250, &quot;dataIndex&quot;: &#39;customer&#39;, &quot;sortable&quot;: true},
            {&quot;header&quot;: &quot;Invoice Number&quot;, &quot;width&quot;: 120, &quot;dataIndex&quot;: &#39;invNo&#39;, &quot;sortable&quot;: true},
            {&quot;header&quot;: &quot;Invoice Date&quot;, &quot;width&quot;: 100, &quot;dataIndex&quot;: &#39;date&#39;, &quot;renderer&quot;: Ext.util.Format.dateRenderer(&#39;M d, y&#39;), &quot;sortable&quot;: true},
            {&quot;header&quot;: &quot;Value&quot;, &quot;width&quot;: 120, &quot;dataIndex&quot;: &#39;value&#39;, &quot;renderer&quot;: &#39;usMoney&#39;, &quot;sortable&quot;: true}
            ]
            }
            When the above code fragment is passed through the eval function in the success handler
            of the Ajax request, the result will be a config object which, when added to a Container, will cause instantiation
            of a GridPanel. Be sure that the Container is configured with a layout which sizes and positions the child items to your requirements. Note: since the code above is generated by a server script, the autoLoad params for
            the Store, the user&#39;s preferred date format, the metadata to allow generation of the Model layout, and the ColumnModel
            can all be generated into the code since these are all known on the server.
            </summary>
        </member>
        <member name="T:Ext.container.AbstractContainer">
            <summary>
            An abstract base class which provides shared methods for Containers across the Sencha product line. Please refer to sub class&#39;s documentation
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.add(System.Object)">
            <summary>
            Adds Component(s) to this Container. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.beforeLayout">
            <summary>
            Occurs before componentLayout is run. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.cascade(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cascades down the component/container heirarchy from this component (passed in the first call), calling the specified...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.child(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves the first direct child of this container which matches the passed selector. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.doLayout">
            <summary>
            Manually force this container's layout to be recalculated. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.down(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves the first descendant of this container which matches the passed selector. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.getComponent(System.Object)">
            <summary>
            Examines this container's items property
            and gets a direct child component of this container. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.getLayout">
            <summary>
            Returns the layout instance currently associated with this Container. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.insert(SharpKit.JavaScript.JsNumber,Ext.Component)">
            <summary>
            Inserts a Component into this Container at a specified index. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.move(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Moves a Component within the Container ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.query(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves all descendant components which match the passed selector. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.remove(System.Object,System.Boolean)">
            <summary>
            Removes a component from this container. ...
            </summary>
        </member>
        <member name="M:Ext.container.AbstractContainer.removeAll(System.Boolean)">
            <summary>
            Removes all components from this container. ...
            </summary>
        </member>
        <member name="M:Ext.container.Container.getChildByElement(System.Object)">
            <summary>
            Return the immediate child Component in which the passed element is located. ...
            </summary>
        </member>
        <member name="T:Ext.form.Labelable">
            <summary>
            A mixin which allows a component to be configured and decorated with a label and/or error message as is
            common for form fields. This is used by e.g. Ext.form.field.Base and Ext.form.FieldContainer
            to let them be managed by the Field layout. *NOTE**: This mixin is mainly for internal library use and most users should not need to use it directly. It
            is more likely you will want to use one of the component classes that import this mixin, such as
            Ext.form.field.Base or Ext.form.FieldContainer. Use of this mixin does not make a component a field in the logical sense, meaning it does not provide any
            logic or state related to values or validation; that is handled by the related Ext.form.field.Field
            mixin. These two mixins may be used separately (for example Ext.form.FieldContainer is Labelable but not a
            Field), or in combination (for example Ext.form.field.Base implements both and has logic for connecting the
            two.) Component classes which use this mixin should use the Field layout
            or a derivation thereof to properly size and position the label and message according to the component config.
            They must also call the initLabelable method during component initialization to ensure the mixin gets
            set up correctly.
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getActiveError">
            <summary>
            Gets the active error message for this component, if any. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getActiveErrors">
            <summary>
            Gets an Array of any active error messages currently applied to the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getBodyNaturalWidth">
            <summary>
            Calculate and return the natural width of the bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getFieldLabel">
            <summary>
            Returns the label for the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getInputId">
            <summary>
            Get the input id, if any, for this component. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getLabelableRenderData">
            <summary>
            Generates the arguments for the field decorations rendering template. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getLabelableSelectors">
            <summary>
            Returns the additional Ext.AbstractComponent.renderSelectors for selecting the field
            decoration elements from the ren...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.getSubTplMarkup">
            <summary>
            Gets the markup to be inserted into the outer template's bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.hasActiveError">
            <summary>
            Tells whether the field currently has an active error message. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.initLabelable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.setActiveError(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the active error message to the given string. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.setActiveErrors(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the active error message to an Array of error messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.setFieldDefaults(System.Object)">
            <summary>
            Applies a set of default configuration values to this Labelable instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.Labelable.unsetActiveError">
            <summary>
            Clears the active error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.Labelable.bodyEl">
            <summary>
            The div Element wrapping the component's contents. ...
            </summary>
        </member>
        <member name="P:Ext.form.Labelable.errorEl">
            <summary>
            The div Element that will contain the component's error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.Labelable.isFieldLabelable">
            <summary>
            Flag denoting that this object is labelable as a field. ...
            </summary>
        </member>
        <member name="P:Ext.form.Labelable.labelEl">
            <summary>
            The label Element for this component. ...
            </summary>
        </member>
        <member name="T:Ext.form.FieldAncestor">
            <summary>
            A mixin for Ext.container.Container components that are likely to have form fields in their
            items subtree. Adds the following capabilities:  Methods for handling the addition and removal of Ext.form.Labelable and Ext.form.field.Field
            instances at any depth within the container. Events (fieldvaliditychange and fielderrorchange) for handling changes to the state
            of individual fields at the container level. Automatic application of fieldDefaults config properties to each field added within the
            container, to facilitate uniform configuration of all fields.  This mixin is primarily for internal use by Ext.form.Panel and Ext.form.FieldContainer,
            and should not normally need to be used directly.
            </summary>
        </member>
        <member name="M:Ext.form.FieldAncestor.initFieldAncestor">
            <summary>
            Initializes the FieldAncestor's state; this must be called from the initComponent method
            of any components importing ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldAncestor.onFieldAdded(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldAncestor.onFieldRemoved(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldAncestor.onLabelableAdded(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldAncestor.onLabelableRemoved(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getActiveError">
            <summary>
            Gets the active error message for this component, if any. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getActiveErrors">
            <summary>
            Gets an Array of any active error messages currently applied to the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getBodyNaturalWidth">
            <summary>
            Calculate and return the natural width of the bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getCombinedErrors(SharpKit.JavaScript.JsArray)">
            <summary>
            Takes an Array of invalid Ext.form.field.Field objects and builds a combined list of error
            messages from them. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getFieldLabel">
            <summary>
            Returns the combined field label if combineLabels is set to true and if there is no
            set fieldLabel. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getInputId">
            <summary>
            Get the input id, if any, for this component. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getLabelableRenderData">
            <summary>
            Generates the arguments for the field decorations rendering template. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getLabelableSelectors">
            <summary>
            Returns the additional Ext.AbstractComponent.renderSelectors for selecting the field
            decoration elements from the ren...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.getSubTplMarkup">
            <summary>
            Gets the markup to be inserted into the outer template's bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.hasActiveError">
            <summary>
            Tells whether the field currently has an active error message. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.initFieldAncestor">
            <summary>
            Initializes the FieldAncestor's state; this must be called from the initComponent method
            of any components importing ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.initLabelable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.onFieldAdded(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.onFieldRemoved(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.onLabelableAdded(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.onLabelableRemoved(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.setActiveError(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the active error message to the given string. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.setActiveErrors(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the active error message to an Array of error messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.setFieldDefaults(System.Object)">
            <summary>
            Applies a set of default configuration values to this Labelable instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldContainer.unsetActiveError">
            <summary>
            Clears the active error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainer.bodyEl">
            <summary>
            The div Element wrapping the component's contents. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainer.errorEl">
            <summary>
            The div Element that will contain the component's error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainer.isFieldLabelable">
            <summary>
            Flag denoting that this object is labelable as a field. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainer.labelEl">
            <summary>
            The label Element for this component. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Field">
            <summary>
            This mixin provides a common interface for the logical behavior and state of form fields, including:  Getter and setter methods for field values Events and methods for tracking value and validity changes Methods for triggering validation  *NOTE**: When implementing custom fields, it is most likely that you will want to extend the Ext.form.field.Base
            component class rather than using this mixin directly, as BaseField contains additional logic for generating an
            actual DOM complete with label and error message display and a form input field,
            plus methods that bind the Field value getters and setters to the input field&#39;s value. If you do want to implement this mixin directly and don&#39;t want to extend Ext.form.field.Base, then
            you will most likely want to override the following methods with custom implementations: getValue,
            setValue, and getErrors. Other methods may be overridden as needed but their base
            implementations should be sufficient for common cases. You will also need to make sure that initField
            is called during the component&#39;s initialization.
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.batchChanges(System.Object)">
            <summary>
            A utility for grouping a set of modifications which may trigger value changes into a single
            transaction, to prevent e...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.checkChange">
            <summary>
            Checks whether the value of the field has changed since the last time it was checked. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.checkDirty">
            <summary>
            Checks the isDirty state of the field and if it has changed since the last time
            it was checked, fires the dirtychange...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.clearInvalid">
            <summary>
            Clear any invalid styles/messages for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.extractFileInput">
            <summary>
            Only relevant if the instance's isFileUpload method returns true. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.getErrors(System.Object)">
            <summary>
            Runs this field's validators and returns an array of error messages for any validation failures. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.getModelData">
            <summary>
            Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when
            Ext.form.Basic.updateRe...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.getName">
            <summary>
            Returns the name attribute of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.getSubmitData">
            <summary>
            Returns the parameter(s) that would be included in a standard form submit for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.getValue">
            <summary>
            Returns the current data value of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.initField">
            <summary>
            Initializes this Field mixin on the current instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.initValue">
            <summary>
            Initializes the field's value based on the initial config. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.isDirty">
            <summary>
            Returns true if the value of this Field has been changed from its originalValue. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.isEqual(System.Object,System.Object)">
            <summary>
            Returns whether two field values are logically equal. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.isFileUpload">
            <summary>
            Returns whether this Field is a file upload field; if it returns true, forms will use
            special techniques for submitti...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.isValid">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.markInvalid(System.Object)">
            <summary>
            Associate one or more error messages with this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.resetOriginalValue">
            <summary>
            Resets the field's originalValue property so it matches the current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.setValue(System.Object)">
            <summary>
            Sets a data value into the field and runs the change detection and validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Field.validate">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value, and fires the vali...
            </summary>
        </member>
        <member name="P:Ext.form.field.Field.isFormField">
            <summary>
            Flag denoting that this component is a Field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Field.originalValue">
            <summary>
            The original value of the field as configured in the value configuration, or as loaded by
            the last form load operatio...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.batchChanges(System.Object)">
            <summary>
            A utility for grouping a set of modifications which may trigger value changes into a single
            transaction, to prevent e...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.checkChange">
            <summary>
            Checks whether the value of the field has changed since the last time it was checked. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.checkDirty">
            <summary>
            Checks the isDirty state of the field and if it has changed since the last time
            it was checked, fires the dirtychange...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.clearInvalid">
            <summary>
            Clear any invalid styles/messages for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.extractFileInput">
            <summary>
            Only relevant if the instance's isFileUpload method returns true. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getChecked">
            <summary>
            Returns an Array of all checkboxes in the container which are currently checked ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getErrors(System.Object)">
            <summary>
            Runs CheckboxGroup's validations and returns an array of any errors. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getModelData">
            <summary>
            Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when
            Ext.form.Basic.updateRe...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getName">
            <summary>
            Returns the name attribute of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getSubmitData">
            <summary>
            Returns the parameter(s) that would be included in a standard form submit for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getValue">
            <summary>
            Returns an object containing the values of all checked checkboxes within the group. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.initField">
            <summary>
            Initializes this Field mixin on the current instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.initValue">
            <summary>
            Initializes the field's value based on the initial config. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.isDirty">
            <summary>
            Returns true if the value of this Field has been changed from its originalValue. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.isEqual(System.Object,System.Object)">
            <summary>
            Returns whether two field values are logically equal. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.isFileUpload">
            <summary>
            Returns whether this Field is a file upload field; if it returns true, forms will use
            special techniques for submitti...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.isValid">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.markInvalid(System.Object)">
            <summary>
            Associate one or more error messages with this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.onFieldAdded(System.Object)">
            <summary>
            When a checkbox is added to the group, monitor it for changes ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.reset">
            <summary>
            Resets the checked state of all checkboxes in the group to their
            originally loaded values and clears any validation m...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.resetOriginalValue">
            <summary>
            Resets the field's originalValue property so it matches the current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.setValue(System.Object)">
            <summary>
            Sets the value(s) of all checkboxes in the group. ...
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.validate">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value, and fires the vali...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.isFormField">
            <summary>
            Flag denoting that this component is a Field. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.originalValue">
            <summary>
            The original value of the field as configured in the value configuration, or as loaded by
            the last form load operatio...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.activeItem">
            <summary>
            A string component id or the numeric index of the component that should be initially activated within the
            container's...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.autoDestroy">
            <summary>
            If true the container will automatically destroy any contained component that is removed from it, else
            destruction mu...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.bubbleEvents">
            <summary>
            An array of events that, when fired, should be bubbled to any parent container. ...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.defaultType">
            <summary>
            The default xtype of child Components to create in this Container when
            a child item is specified as a raw configurati...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.defaults">
            <summary>
            This option is a means of applying default settings to all added items whether added through the items
            config or via ...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.items">
            <summary>
            A single item, or an array of child Components to be added to this container
            Unless configured with a layout, a Con...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.layout">
            <summary>
            *Important: In order for child items to be correctly sized and
            positioned, typically a layout manager must be specifi...
            </summary>
        </member>
        <member name="P:Ext.container.AbstractContainerConfig.suspendLayout">
            <summary>
            If true, suspend calls to doLayout. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.activeError">
            <summary>
            If specified, then the component will be displayed with this value as its active error when
            first rendered. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.activeErrorsTpl">
            <summary>
            The template used to format the Array of error messages passed to setActiveErrors
            into a single HTML string. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.autoFitErrors">
            <summary>
            Whether to adjust the component's body area to make room for 'side' or 'under'
            error messages. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.baseBodyCls">
            <summary>
            The CSS class to be applied to the body content element. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.clearCls">
            <summary>
            The CSS class to be applied to the special clearing div rendered directly after the field
            contents wrapper to provide...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.combineErrors">
            <summary>
            If set to true, the field container will automatically combine and display the validation errors from
            all the fields ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.combineLabels">
            <summary>
            If set to true, and there is no defined fieldLabel, the field container will automatically
            generate its label by comb...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.errorMsgCls">
            <summary>
            The CSS class to be applied to the error message element. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.fieldDefaults">
            <summary>
            If specified, the properties in this object are used as default config values for each
            Ext.form.Labelable instance (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.fieldLabel">
            <summary>
            The label for the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.formItemCls">
            <summary>
            A CSS class to be applied to the outermost element to denote that it is participating in the form
            field layout. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.hideEmptyLabel">
            <summary>
            When set to true, the label element (fieldLabel and labelSeparator) will be
            automatically hidden if the fieldLabel is...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.hideLabel">
            <summary>
            Set to true to completely hide the label element (fieldLabel and labelSeparator). ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelAlign">
            <summary>
            Controls the position and alignment of the fieldLabel. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelCls">
            <summary>
            The CSS class to be applied to the label element. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelConnector">
            <summary>
            The string to use when joining the labels of individual sub-fields, when combineLabels is
            set to true. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelPad">
            <summary>
            The amount of space in pixels between the fieldLabel and the input field. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelWidth">
            <summary>
            The width of the fieldLabel in pixels. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.labelableRenderTpl">
            <summary>
            The rendering template for the field decorations. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.msgTarget">
            <summary>
            The location where the error message text should display. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldContainerConfig.preventMark">
            <summary>
            true to disable displaying any error message set on this object. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.allowBlank">
            <summary>
            False to validate that at least one item in the group is checked (defaults to true). ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.columns">
            <summary>
            Specifies the number of columns to use when displaying grouped
            checkbox/radio controls using automatic layout. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.disabled">
            <summary>
            True to disable the field (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to baseBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.name">
            <summary>
            The name of the field (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.submitValue">
            <summary>
            Setting this to false will prevent the field from being
            submitted even when it is not disabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.validateOnChange">
            <summary>
            Specifies whether this field should be validated immediately whenever a change in its value is detected. ...
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.vertical">
            <summary>
            True to distribute contained controls across columns, completely filling each column
            top to bottom before starting on...
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroupConfig.allowBlank">
            <summary>
            True to allow every item in the group to be blank (defaults to true). ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.add">
            <summary>
            @bubbles
            Fires after any Ext.Component is added or inserted into the container. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.afterlayout">
            <summary>
            Fires when the components in this container are arranged by the associated layout manager. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.beforeadd">
            <summary>
            Fires before any Ext.Component is added or inserted into the container. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.beforecardswitch">
            <summary>
            Fires before this container switches the active card. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.beforeremove">
            <summary>
            Fires before any Ext.Component is removed from the container. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.cardswitch">
            <summary>
            Fires after this container switches the active card. ...
            </summary>
        </member>
        <member name="F:Ext.container.AbstractContainerEvents.remove">
            <summary>
            @bubbles
            Fires after any Ext.Component is removed from the container. ...
            </summary>
        </member>
        <member name="F:Ext.form.FieldContainerEvents.errorchange">
            <summary>
            Fires when the active error message is changed via setActiveError. ...
            </summary>
        </member>
        <member name="F:Ext.form.FieldContainerEvents.fielderrorchange">
            <summary>
            Fires when the active error message is changed for any one of the Ext.form.Labelable
            instances within this container. ...
            </summary>
        </member>
        <member name="F:Ext.form.CheckboxGroupEvents.change">
            <summary>
            Fires when a user-initiated change is detected in the value of the field. ...
            </summary>
        </member>
        <member name="F:Ext.form.CheckboxGroupEvents.dirtychange">
            <summary>
            Fires when a change in the field's isDirty state is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.CheckboxGroupEvents.validitychange">
            <summary>
            Fires when a change in the field's validity is detected. ...
            </summary>
        </member>
        <member name="T:Ext.form.Label">
            <summary>
            Produces a standalone &amp;lt;label /&amp;gt; element which can be inserted into a form and be associated with a field
            in that form using the forId property. *NOTE:** in most cases it will be more appropriate to use the fieldLabel
            and associated config properties (Ext.form.Labelable.labelAlign, Ext.form.Labelable.labelWidth,
            etc.) in field components themselves, as that allows labels to be uniformly sized throughout the form.
            Ext.form.Label should only be used when your layout can not be achieved with the standard
            field layout. You will likely be associating the label with a field component that extends Ext.form.field.Base, so
            you should make sure the forId is set to the same value as the inputId
            of that field. The label&#39;s text can be set using either the text or html configuration properties; the
            difference between the two is that the former will automatically escape HTML characters when rendering, while
            the latter will not.
            Example usage: This example creates a Label after its associated Text field, an arrangement that cannot currently
            be achieved using the standard Field layout&#39;s labelAlign. Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Field with Label&#39;,
            width: 400,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            layout: {
            type: &#39;hbox&#39;,
            align: &#39;middle&#39;
            },
            items: [{
            xtype: &#39;textfield&#39;,
            hideLabel: true,
            flex: 1
            }, {
            xtype: &#39;label&#39;,
            forId: &#39;myFieldId&#39;,
            text: &#39;My Awesome Field&#39;,
            margins: &#39;0 0 0 10&#39;
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.form.Label.setText(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Updates the label's innerHTML with the specified string. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelConfig.forId">
            <summary>
            The id of the input element to which this label will be bound via the standard HTML 'for'
            attribute. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelConfig.html">
            <summary>
            An HTML fragment that will be used as the label's innerHTML (defaults to ''). ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelConfig.text">
            <summary>
            The plain text to display within the label (defaults to ''). ...
            </summary>
        </member>
        <member name="T:Ext.form.action.DirectSubmit">
            <summary>
            Provides Ext.direct support for submitting form data. This example illustrates usage of Ext.direct.Direct to submit a form through Ext.Direct. var myFormPanel = new Ext.form.Panel({
            // configs for FormPanel
            title: &#39;Basic Information&#39;,
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            buttons:[{
            text: &#39;Submit&#39;,
            handler: function(){
            myFormPanel.getForm().submit({
            params: {
            foo: &#39;bar&#39;,
            uid: 34
            }
            });
            }
            }],
            // configs apply to child items
            defaults: {anchor: &#39;100%&#39;},
            defaultType: &#39;textfield&#39;,
            items: [{
            fieldLabel: &#39;Name&#39;,
            name: &#39;name&#39;
            },{
            fieldLabel: &#39;Email&#39;,
            name: &#39;email&#39;
            },{
            fieldLabel: &#39;Company&#39;,
            name: &#39;company&#39;
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a &#39;formHandler&#39;
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: [&#39;uid&#39;, &#39;foo&#39;]
            });
            The data packet sent to the server will resemble something like: {
            &quot;action&quot;:&quot;Profile&quot;,&quot;method&quot;:&quot;updateBasicInfo&quot;,&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:&quot;6&quot;,
            &quot;result&quot;:{
            &quot;success&quot;:true,
            &quot;id&quot;:{
            &quot;extAction&quot;:&quot;Profile&quot;,&quot;extMethod&quot;:&quot;updateBasicInfo&quot;,
            &quot;extType&quot;:&quot;rpc&quot;,&quot;extTID&quot;:&quot;6&quot;,&quot;extUpload&quot;:&quot;false&quot;,
            &quot;name&quot;:&quot;Aaron Conran&quot;,&quot;email&quot;:&quot;aaron@sencha.com&quot;,&quot;company&quot;:&quot;Sencha Inc.&quot;
            }
            }
            }
            The form will process a data packet returned by the server that is similar
            to the following: // sample success packet (batched requests)
            [
            {
            &quot;action&quot;:&quot;Profile&quot;,&quot;method&quot;:&quot;updateBasicInfo&quot;,&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:3,
            &quot;result&quot;:{
            &quot;success&quot;:true
            }
            }
            ]
            // sample failure packet (one request)
            {
            &quot;action&quot;:&quot;Profile&quot;,&quot;method&quot;:&quot;updateBasicInfo&quot;,&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:&quot;6&quot;,
            &quot;result&quot;:{
            &quot;errors&quot;:{
            &quot;email&quot;:&quot;already taken&quot;
            },
            &quot;success&quot;:false,
            &quot;foo&quot;:&quot;bar&quot;
            }
            }
            Also see the discussion in Ext.form.action.DirectLoad.
            </summary>
        </member>
        <member name="T:Ext.form.action.Submit">
            <summary>
            A class which handles submission of data from Forms
            and processes the returned response. Instances of this class are only created by a Form when
            submitting. Response Packet Criteria A response packet may contain:
            success property : Boolean
            The success property is required. errors property : Object
            The errors property,
            which is optional, contains error messages for invalid fields.  JSON Packets By default, response packets are assumed to be JSON, so a typical response
            packet may look like this: {
            success: false,
            errors: {
            clientCode: &quot;Client not found&quot;,
            portOfLoading: &quot;This field must not be null&quot;
            }
            } Other data may be placed into the response for processing by the Ext.form.Basic&#39;s callback
            or event handler methods. The object decoded from this JSON is available in the
            result property. Alternatively, if an errorReader is specified as an XmlReader:     errorReader: new Ext.data.reader.Xml({
            record : &#39;field&#39;,
            success: &#39;@success&#39;
            }, [
            &#39;id&#39;, &#39;msg&#39;
            ]
            )
            then the results may be sent back in XML format: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;message success=&quot;false&quot;&amp;gt;
            &amp;lt;errors&amp;gt;
            &amp;lt;field&amp;gt;
            &amp;lt;id&amp;gt;clientCode&amp;lt;/id&amp;gt;
            &amp;lt;msg&amp;gt;&amp;lt;![CDATA[Code not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;
            &amp;lt;/field&amp;gt;
            &amp;lt;field&amp;gt;
            &amp;lt;id&amp;gt;portOfLoading&amp;lt;/id&amp;gt;
            &amp;lt;msg&amp;gt;&amp;lt;![CDATA[Port not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;
            &amp;lt;/field&amp;gt;
            &amp;lt;/errors&amp;gt;
            &amp;lt;/message&amp;gt;
            Other elements may be placed into the response XML for processing by the Ext.form.Basic&#39;s callback
            or event handler methods. The XML document is available in the errorReader&#39;s xmlData property.
            </summary>
        </member>
        <member name="T:Ext.form.action.Action">
            <summary>
            The subclasses of this class provide actions to perform upon Forms. Instances of this class are only created by a Form when
            the Form needs to perform an action such as submit or load. The Configuration options
            listed for this class are set through the Form&#39;s action methods: submit,
            load and doAction The instance of Action which performed the action is passed to the success
            and failure callbacks of the Form&#39;s action methods (submit,
            load and doAction),
            and to the actioncomplete and
            actionfailed event handlers.
            </summary>
        </member>
        <member name="M:Ext.form.action.Action.#ctor(System.Object)">
            <summary>
            Creates new Action. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.Action.failureType">
            <summary>
            The type of failure detected will be one of these: CLIENT_INVALID,
            SERVER_INVALID, CONNECT_FAILURE, or
            LOAD_FAILURE. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.Action.type">
            <summary>
            The type of action this Action instance performs. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.failure">
            <summary>
            The function to call when a failure packet was received, or when an
            error ocurred in the Ajax communication. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.form">
            <summary>
            The BasicForm instance that
            is invoking this Action. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.headers">
            <summary>
            Extra headers to be sent in the AJAX request for submit and load actions. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.method">
            <summary>
            The HTTP method to use to access the requested URL. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.params">
            <summary>
            Extra parameter values to pass. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.reset">
            <summary>
            When set to true, causes the Form to be
            reset on Action success. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.scope">
            <summary>
            The scope in which to call the configured success and failure
            callback functions (the this reference for the callback...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.submitEmptyText">
            <summary>
            If set to true, the emptyText value will be sent with the form
            when it is submitted. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.success">
            <summary>
            The function to call when a valid success return packet is received. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.timeout">
            <summary>
            The number of seconds to wait for a server response before
            failing with the failureType as CONNECT_FAILURE. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.ActionConfig.url">
            <summary>
            The URL that the Action is to invoke. ...
            </summary>
        </member>
        <member name="P:Ext.form.action.SubmitConfig.clientValidation">
            <summary>
            Determines whether a Form's fields are validated
            in a final call to isValid prior to submission. ...
            </summary>
        </member>
        <member name="T:Ext.env.FeatureDetector">
            <summary>
            </summary>
        </member>
        <member name="T:Ext.dd.DragSource">
            <summary>
            A simple class that provides the basic implementation needed to make any element draggable.
            </summary>
        </member>
        <member name="T:Ext.dd.DDProxy">
            <summary>
            A DragDrop implementation that inserts an empty, bordered div into
            the document that follows the cursor during drag operations.  At the time of
            the click, the frame div is resized to the dimensions of the linked html
            element, and moved to the exact location of the linked element. References to the &quot;frame&quot; element refer to the single proxy element that
            was created to be dragged in place of all DDProxy elements on the
            page.
            </summary>
        </member>
        <member name="T:Ext.dd.DD">
            <summary>
            A DragDrop implementation where the linked element follows the
            mouse cursor during a drag.
            </summary>
        </member>
        <member name="T:Ext.dd.DragDrop">
            <summary>
            Defines the interface and base operation of items that that can be
            dragged or can be drop targets.  It was designed to be extended, overriding
            the event handlers for startDrag, onDrag, onDragOver and onDragOut.
            Up to three html elements can be associated with a DragDrop instance:  linked element: the element that is passed into the constructor.
            This is the element which defines the boundaries for interaction with
            other DragDrop objects. handle element(s): The drag operation only occurs if the element that
            was clicked matches a handle element.  By default this is the linked
            element, but there are times that you will want only a portion of the
            linked element to initiate the drag operation, and the setHandleElId()
            method provides a way to define this. drag element: this represents the element that would be moved along
            with the cursor during a drag operation.  By default, this is the linked
            element itself as in Ext.dd.DD.  setDragElId() lets you define
            a separate element that would be moved, as in Ext.dd.DDProxy.  This class should not be instantiated until the onload event to ensure that
            the associated elements are available.
            The following would define a DragDrop obj that would interact with any
            other DragDrop obj in the &quot;group1&quot; group: dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);
            Since none of the event handlers have been implemented, nothing would
            actually happen if you were to run the code above.  Normally you would
            override this class or one of the default implementations, but you can
            also override the methods you want on an instance of the class... dd.onDragDrop = function(e, id) {
            alert(&quot;dd was dropped on &quot; + id);
            }
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates new DragDrop. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addInvalidHandleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Lets you specify a css class of elements that will not initiate a drag ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addInvalidHandleId(SharpKit.JavaScript.JsString)">
            <summary>
            Lets you to specify an element id for a child of a drag handle
            that should not initiate a drag ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addInvalidHandleType(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to specify a tag name that should not start a drag operation
            when clicked. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addToGroup(SharpKit.JavaScript.JsString)">
            <summary>
            Adds this instance to a group of related drag/drop objects. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.applyConfig">
            <summary>
            Applies the configuration parameters that were passed into the constructor. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.clearConstraints">
            <summary>
            Clears any constraints applied to this instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.clearTicks">
            <summary>
            Clears any tick interval defined for this instance ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.constrainTo(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes the drag drop object's constraints to restrict movement to a certain element. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.endDrag(Ext.direct.Event)">
            <summary>
            Called when we are done dragging the object ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.getDragEl">
            <summary>
            Returns a reference to the actual element to drag. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.getEl">
            <summary>
            Returns a reference to the linked element ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.init(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets up the DragDrop object. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.initTarget(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Initializes Targeting functionality only... ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.isLocked">
            <summary>
            Returns true if this instance is locked, or the drag drop mgr is locked
            (meaning that all drag/drop is disabled on th...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.isValidHandleChild(Ext.Unknown.HTMLElement)">
            <summary>
            Checks the tag exclusion list to see if this click should be ignored ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.lock">
            <summary>
            Locks this instance ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onAvailable">
            <summary>
            Override the onAvailable method to do what is needed after the initial
            position was determined. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDrag(Ext.direct.Event)">
            <summary>
            Abstract method called during the onMouseMove event while dragging an
            object. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragDrop(Ext.direct.Event,System.Object)">
            <summary>
            Abstract method called when this item is dropped on another DragDrop
            obj ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragEnter(Ext.direct.Event,System.Object)">
            <summary>
            Abstract method called when this element fist begins hovering over
            another DragDrop obj ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragOut(Ext.direct.Event,System.Object)">
            <summary>
            Abstract method called when we are no longer hovering over an element ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragOver(Ext.direct.Event,System.Object)">
            <summary>
            Abstract method called when this element is hovering over another
            DragDrop obj ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onInvalidDrop(Ext.direct.Event)">
            <summary>
            Abstract method called when this item is dropped on an area with no
            drop target ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onMouseDown(Ext.direct.Event)">
            <summary>
            Called when a drag/drop obj gets a mousedown ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onMouseUp(Ext.direct.Event)">
            <summary>
            Called when a drag/drop obj gets a mouseup ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeFromGroup(SharpKit.JavaScript.JsString)">
            <summary>
            Removes this instance from the supplied interaction group ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an invalid css class ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleId(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an invalid handle id ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleType(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an excluded tag name set by addInvalidHandleType ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.resetConstraints(System.Boolean)">
            <summary>
            Must be called if you manually reposition a dd element. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setDragElId(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to specify that an element other than the linked element
            will be moved with the cursor during a drag ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setHandleElId(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to specify a child of the linked element that should be
            used to initiate the drag operation. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setInitPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Stores the initial placement of the linked element. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setOuterHandleElId(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to set an element outside of the linked element as a drag
            handle ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setPadding(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Configures the padding for the target zone in px. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setXConstraint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            By default, the element can be dragged any place on the screen. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setYConstraint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            By default, the element can be dragged any place on the screen. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.startDrag(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Abstract method called after a drag/drop object is clicked
            and the drag or mousedown time thresholds have beeen met. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.toString">
            <summary>
            toString method ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.unlock">
            <summary>
            Unlocks this instace ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.unreg">
            <summary>
            Removes all drag and drop hooks for this element ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.groups">
            <summary>
            The group defines a logical collection of DragDrop objects that are
            related. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.hasOuterHandles">
            <summary>
            By default, drags can only be initiated if the mousedown occurs in the
            region the linked element is. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.id">
            <summary>
            The id of the element associated with this object. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.ignoreSelf">
            <summary>
            Set to false to enable a DragDrop object to fire drag events while dragging
            over its own Element. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.invalidHandleIds">
            <summary>
            An object who's property names identify the IDs of elements to be considered invalid as drag handles. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.invalidHandleTypes">
            <summary>
            An object who's property names identify HTML tags to be considered invalid as drag handles. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.isTarget">
            <summary>
            By default, all instances can be a drop target. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.maintainOffset">
            <summary>
            Maintain offsets when we resetconstraints. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.moveOnly">
            <summary>
            When set to true, other DD objects in cooperating DDGroups do not receive
            notification events when this DD object is ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.padding">
            <summary>
            The padding configured for this drag and drop object for calculating
            the drop zone intersection with this object. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.primaryButtonOnly">
            <summary>
            By default the drag and drop instance will only respond to the primary
            button click (left button for a right-handed m...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.xTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a
            horizontal graduation/interval. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.yTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a
            vertical graduation/interval. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates new DD instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.alignElWithMouse(Ext.Unknown.HTMLElement,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the element to the location of the mousedown or click event,
            maintaining the cursor location relative to the loc...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.applyConfig">
            <summary>
            Sets up config options specific to this class. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.autoOffset(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the pointer offset to the distance between the linked element's top
            left corner and the location the element was...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.b4Drag(System.Object)">
            <summary>
            Event that fires prior to the onDrag event. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.b4MouseDown(System.Object)">
            <summary>
            Event that fires prior to the onMouseDown event. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.cachePosition(System.Object,System.Object)">
            <summary>
            Saves the most recent position so that we can reset the constraints and
            tick marks on-demand. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.setDelta(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the pointer offset. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DD.setDragElPos(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the drag element to the location of the mousedown or click event,
            maintaining the cursor location relative to th...
            </summary>
        </member>
        <member name="P:Ext.dd.DD.scroll">
            <summary>
            When set to true, the utility automatically tries to scroll the browser
            window when a drag and drop element is dragge...
            </summary>
        </member>
        <member name="M:Ext.dd.DDProxy.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates new DDProxy. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DDProxy.createFrame">
            <summary>
            Creates the proxy element if it does not yet exist ...
            </summary>
        </member>
        <member name="M:Ext.dd.DDProxy.initFrame">
            <summary>
            Initialization for the drag frame element. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DDProxy.centerFrame">
            <summary>
            By default the frame is positioned exactly where the drag element is, so
            we use the cursor offset provided by Ext.dd.DD. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DDProxy.resizeFrame">
            <summary>
            By default we resize the drag frame to be the same size as the element
            we want to drag (this is to get the frame effe...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.#ctor(System.Object,System.Object)">
            <summary>
            Creates new drag-source. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.afterDragDrop(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            after a valid drag drop has occurr...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.afterDragEnter(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            when the dragged item enters the d...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.afterDragOut(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            after the dragged item is dragged ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.afterDragOver(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            while the dragged item is over the...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.afterInvalidDrop(Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            after an invalid drop has occurred...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.beforeDragDrop(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the dragged
            item is dropped...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.beforeDragEnter(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            before the dragged item enters the...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.beforeDragOut(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the dragged
            item is dragged...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.beforeDragOver(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action
            while the dragged item is over the...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.beforeInvalidDrop(Ext.dd.DragDrop,Ext.direct.Event,SharpKit.JavaScript.JsString)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action after an invalid
            drop has occurred. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.getDragData(System.Object)">
            <summary>
            Returns the data object associated with this drag source ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.getProxy">
            <summary>
            Returns the drag source's underlying Ext.dd.StatusProxy ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.hideProxy">
            <summary>
            Hides the drag source's Ext.dd.StatusProxy ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.onBeforeDrag(System.Object,Ext.direct.Event)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the initial
            drag event begi...
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.onStartDrag(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            An empty function by default, but provided so that you can perform a custom action once the initial
            drag event has be...
            </summary>
        </member>
        <member name="P:Ext.dd.DragSourceConfig.animRepair">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragSourceConfig.ddGroup">
            <summary>
            A named drag drop group to which this object belongs. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragSourceConfig.repairHighlightColor">
            <summary>
            The color to use when visually highlighting the drag source in the afterRepair
            method after a failed drop (defaults t...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.WebStorage">
            <summary>
            WebStorageProxy is simply a superclass for the localStorage and
            sessionStorage proxies. It uses the new HTML5 key/value client-side storage
            objects to save model instances for offline use.
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Client">
            <summary>
            Base class for any client-side storage. Used as a superclass for Memory and
            Web Storage proxies. Do not use directly, use one of the subclasses instead.
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Proxy">
            <summary>
            Proxies are used by Stores to handle the loading and saving of Model data.
            Usually developers will not need to create or interact with proxies directly. Types of Proxy There are two main types of Proxy - Client and Server. The Client proxies
            save their data locally and include the following subclasses:  LocalStorageProxy - saves its data to localStorage if the browser supports it SessionStorageProxy - saves its data to sessionStorage if the browsers supports it MemoryProxy - holds data in memory only, any data is lost when the page is refreshed  The Server proxies save their data by sending requests to some remote server. These proxies include:  Ajax - sends requests to a server on the same domain JsonP - uses JSON-P to send requests to a server on a different domain Direct - uses Ext.direct to send requests  Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four operations
            are mapped to the methods create, read, update and destroy respectively. Each Proxy subclass
            implements these functions. The CRUD methods each expect an Operation object as the sole argument. The Operation encapsulates
            information about the action the Store wishes to perform, the model instances that are to be modified, etc.
            See the Operation documentation for more details. Each CRUD method also accepts a callback function to be
            called asynchronously on completion. Proxies also support batching of Operations via a batch object, invoked by the batch method.
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.#ctor(System.Object)">
            <summary>
            Creates the Proxy ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.batch(System.Object,System.Object)">
            <summary>
            Performs a batch of Operations, in the order specified by batchOrder. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.create(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Performs the given create operation. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.destroy(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Performs the given destroy operation. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.getModel">
            <summary>
            Returns the model attached to this Proxy ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.getReader">
            <summary>
            Returns the reader currently attached to this proxy instance ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.getWriter">
            <summary>
            Returns the writer currently attached to this proxy instance ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.read(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Performs the given read operation. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.setModel(System.Object,System.Boolean)">
            <summary>
            Sets the model associated with this proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.setReader(System.Object)">
            <summary>
            Sets the Proxy's Reader by string, config object or Reader instance ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.setWriter(System.Object)">
            <summary>
            Sets the Proxy's Writer by string, config object or Writer instance ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Proxy.update(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Performs the given update operation. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Client.clear">
            <summary>
            Abstract function that must be implemented by each ClientProxy subclass. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.WebStorage.#ctor(System.Object)">
            <summary>
            Creates the proxy, throws an error if local storage is not supported in the current browser ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.WebStorage.clear">
            <summary>
            Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.WebStorage.setRecord(Ext.data.Model,SharpKit.JavaScript.JsString)">
            <summary>
            Saves the given record in the Proxy. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ProxyConfig.batchActions">
            <summary>
            True to batch actions of a particular type when synchronizing the store. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ProxyConfig.batchOrder">
            <summary>
            Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ProxyConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ProxyConfig.model">
            <summary>
            The name of the Model to tie to this Proxy. ...
            </summary>
        </member>
        <member name="T:Ext.chart.Chart">
            <summary>
            The Ext.chart package provides the capability to visualize data.
            Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart.
            A chart configuration object has some overall styling options as well as an array of axes
            and series. A chart instance example could look like:     Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 800,
            height: 600,
            animate: true,
            store: store1,
            shadow: true,
            theme: &#39;Category1&#39;,
            legend: {
            position: &#39;right&#39;
            },
            axes: [ ...some axes options... ],
            series: [ ...some series options... ]
            });
            In this example we set the width and height of the chart, we decide whether our series are
            animated or not and we select a store to be bound to the chart. We also turn on shadows for all series,
            select a color theme Category1 for coloring the series, set the legend to the right part of the chart and
            then tell the chart to render itself in the body element of the document. For more information about the axes and
            series configurations please check the documentation of each series (Line, Bar, Pie, etc).
            </summary>
        </member>
        <member name="T:Ext.draw.Component">
            <summary>
            The Draw Component is a surface in which sprites can be rendered. The Draw Component
            manages and holds a Surface instance: an interface that has
            an SVG or VML implementation depending on the browser capabilities and where
            Sprites can be appended.
            One way to create a draw component is: var drawComponent = Ext.create(&#39;Ext.draw.Component&#39;, {
            viewBox: false,
            items: [{
            type: &#39;circle&#39;,
            fill: &#39;#79BB3F&#39;,
            radius: 100,
            x: 100,
            y: 100
            }]
            });
            Ext.create(&#39;Ext.Window&#39;, {
            width: 215,
            height: 235,
            layout: &#39;fit&#39;,
            items: [drawComponent]
            }).show();
            In this case we created a draw component and added a sprite to it.
            The type of the sprite is circle so if you run this code you&#39;ll see a yellow-ish
            circle in a Window. When setting viewBox to false we are responsible for setting the object&#39;s position and
            dimensions accordingly. You can also add sprites by using the surface&#39;s add method: drawComponent.surface.add({
            type: &#39;circle&#39;,
            fill: &#39;#79BB3F&#39;,
            radius: 100,
            x: 100,
            y: 100
            });
            For more information on Sprites, the core elements added to a draw component&#39;s surface,
            refer to the Ext.draw.Sprite documentation.
            </summary>
        </member>
        <member name="M:Ext.draw.Component.createSurface">
            <summary>
            Create the Surface instance. ...
            </summary>
        </member>
        <member name="T:Ext.chart.theme.Theme">
            <summary>
            Provides chart theming. Used as mixins by Ext.chart.Chart.
            </summary>
        </member>
        <member name="T:Ext.chart.Mask">
            <summary>
            Defines a mask for a chart&#39;s series.
            The &#39;chart&#39; member must be set prior to rendering. A Mask can be used to select a certain region in a chart.
            When enabled, the select event will be triggered when a
            region is selected by the mask, allowing the user to perform
            other tasks like zooming on that region, etc. In order to use the mask one has to set the Chart mask option to
            true, vertical or horizontal. Then a possible configuration for the
            listener could be:     items: {
            xtype: &#39;chart&#39;,
            animate: true,
            store: store1,
            mask: &#39;horizontal&#39;,
            listeners: {
            select: {
            fn: function(me, selection) {
            me.setZoom(selection);
            me.mask.hide();
            }
            }
            },
            In this example we zoom the chart to that particular region. You can also get
            a handle to a mask instance from the chart object. The chart.mask element is a
            Ext.Panel.
            </summary>
        </member>
        <member name="T:Ext.chart.Navigation">
            <summary>
            Handles panning and zooming capabilities. Used as mixin by Ext.chart.Chart.
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.#ctor(System.Object)">
            <summary>
            Creates new Mask. ...
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.bindStore(Ext.data.Store,System.Object)">
            <summary>
            Changes the data store bound to this chart and refreshes it. ...
            </summary>
        </member>
        <member name="P:Ext.draw.ComponentConfig.autoSize">
            <summary>
            Turn on autoSize support which will set the bounding div's size to the natural size of the contents. ...
            </summary>
        </member>
        <member name="P:Ext.draw.ComponentConfig.enginePriority">
            <summary>
            Defines the priority order for which Surface implementation to use. ...
            </summary>
        </member>
        <member name="P:Ext.draw.ComponentConfig.gradients">
            <summary>
            (optional) Define a set of gradients that can be used as fill property in sprites. ...
            </summary>
        </member>
        <member name="P:Ext.draw.ComponentConfig.viewBox">
            <summary>
            Turn on view box support which will scale and position items in the draw component to fit to the component while
            main...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.animate">
            <summary>
            (optional) true for the default animation (easing: 'ease' and duration: 500)
            or a standard animation config object to...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.background">
            <summary>
            (optional) Set the chart background. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.enginePriority">
            <summary>
            Defines the priority order for which Surface implementation to use. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.gradients">
            <summary>
            (optional) Define a set of gradients that can be used as fill property in sprites. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.insetPadding">
            <summary>
            (optional) Set the amount of inset padding in pixels for the chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.legend">
            <summary>
            (optional) true for the default legend display or a legend config object. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.resize">
            <summary>
            Redraw the chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.theme">
            <summary>
            (optional) The name of the theme to be used. ...
            </summary>
        </member>
        <member name="F:Ext.chart.ChartEvents.beforerefresh">
            <summary>
            Fires before a refresh to the chart data is called. ...
            </summary>
        </member>
        <member name="F:Ext.chart.ChartEvents.refresh">
            <summary>
            Fires after the chart data has been refreshed. ...
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Abstract">
            <summary>
            Base class for all axis classes.
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Abstract.#ctor(System.Object)">
            <summary>
            Creates new Axis. ...
            </summary>
        </member>
        <member name="T:Ext.AbstractPlugin">
            <summary>
            The AbstractPlugin class is the base class from which user-implemented plugins should inherit. This class defines the essential API of plugins as used by Components by defining the following methods:  init : The plugin initialization method which the owning Component calls at Component initialization
            time.The Component passes itself as the sole parameter.Subclasses should set up bidirectional
            links between the plugin and its client Component here. destroy : The plugin cleanup method which the owning Component calls at Component destruction time.Use
            this method to break links between the plugin and the Component and to free any allocated resources. enable : The base implementation just sets the plugin&#39;s disabled flag to false disable : The base implementation just sets the plugin&#39;s disabled flag to true
            </summary>
        </member>
        <member name="M:Ext.AbstractPlugin.destroy">
            <summary>
            The destroy method is invoked by the owning Component at the time the Component is being destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractPlugin.disable">
            <summary>
            The base implementation just sets the plugin's disabled flag to true
            Plugin subclasses which need more complex proc...
            </summary>
        </member>
        <member name="M:Ext.AbstractPlugin.enable">
            <summary>
            The base implementation just sets the plugin's disabled flag to false
            Plugin subclasses which need more complex pro...
            </summary>
        </member>
        <member name="M:Ext.AbstractPlugin.init(Ext.Component)">
            <summary>
            The init method is invoked after initComponent has been run for the client Component. ...
            </summary>
        </member>
        <member name="T:Ext.WindowManager">
            <summary>
            The default global floating Component group that is available automatically. This manages instances of floating Components which were rendered programatically without
            being added to a Container, and for floating Components which were added into non-floating Containers. Floating Containers create their own instance of ZIndexManager, and floating Components added at any depth below
            there are managed by that ZIndexManager.
            </summary>
        </member>
        <member name="T:Ext.ZIndexManager">
            <summary>
            A class that manages a group of Ext.Component.floating Components and provides z-order management,
            and Component activation behavior, including masking below the active (topmost) Component. Floating Components which are rendered directly into the document (Such as Windows which are
            shown are managed by a global instance. Floating Components which are descendants of floating Containers
            (For example a {Ext.view.BoundList BoundList} within an Window, or a Menu),
            are managed by a ZIndexManager owned by that floating Container. So ComboBox dropdowns within Windows will have managed z-indices
            guaranteed to be correct, relative to the Window.
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.bringToFront(System.Object)">
            <summary>
            Brings the specified Component to the front of any other active Components in this ZIndexManager. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for every Component in this ZIndexManager, passing each
            Component as the only pa...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.eachBottomUp(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for every Component in this ZIndexManager, passing each
            Component as the only pa...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.eachTopDown(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for every Component in this ZIndexManager, passing each
            Component as the only pa...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.get(System.Object)">
            <summary>
            Gets a registered Component by id. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.getActive">
            <summary>
            Gets the currently-active Component in this ZIndexManager. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.getBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns zero or more Components in this ZIndexManager using the custom search function passed to this method. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.hideAll">
            <summary>
            Hides all Components managed by this ZIndexManager. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.register(Ext.Component)">
            <summary>
            Registers a floating Ext.Component with this ZIndexManager. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.sendToBack(System.Object)">
            <summary>
            Sends the specified Component to the back of other active Components in this ZIndexManager. ...
            </summary>
        </member>
        <member name="M:Ext.ZIndexManager.unregister(Ext.Component)">
            <summary>
            Unregisters a Ext.Component from this ZIndexManager. ...
            </summary>
        </member>
        <member name="T:Ext.util.KeyMap">
            <summary>
            Handles mapping keys to actions for an element. One key map can be used for multiple actions.
            The constructor accepts the same config object as defined by addBinding.
            If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
            combination it will call the function with this signature (if the match is a multi-key
            combination the callback will still be called only once): (String key, Ext.EventObject e)
            A KeyMap can also handle a string representation of keys.
            Usage: // map one key by key code
            var map = new Ext.util.KeyMap(&quot;my-element&quot;, {
            key: 13, // or Ext.EventObject.ENTER
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to one action by string
            var map = new Ext.util.KeyMap(&quot;my-element&quot;, {
            key: &quot;a\r\n\t&quot;,
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to multiple actions by strings and array of codes
            var map = new Ext.util.KeyMap(&quot;my-element&quot;, [
            {
            key: [10,13],
            fn: function(){ alert(&quot;Return was pressed&quot;); }
            }, {
            key: &quot;abc&quot;,
            fn: function(){ alert(&#39;a, b or c was pressed&#39;); }
            }, {
            key: &quot;\t&quot;,
            ctrl:true,
            shift:true,
            fn: function(){ alert(&#39;Control + shift + tab was pressed.&#39;); }
            }
            ]);
            Note: A KeyMap starts enabled
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.#ctor(System.Object,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Creates new KeyMap. ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.addBinding(System.Object)">
            <summary>
            Add a new binding to this KeyMap. ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.destroy(System.Boolean)">
            <summary>
            Destroys the KeyMap instance and removes all handlers. ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.disable">
            <summary>
            Disable this KeyMap ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.enable">
            <summary>
            Enables this KeyMap ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.isEnabled">
            <summary>
            Returns true if this KeyMap is enabled ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for adding a single key listener ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyMap.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean. ...
            </summary>
        </member>
        <member name="T:Ext.toolbar.TextItem">
            <summary>
            A simple class that renders text directly into a toolbar. Example usage   Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Panel with TextItem&#39;,
            width: 300,
            height: 200,
            tbar: [
            {xtype: &#39;tbtext&#39;, text: &#39;Sample TextItem&#39;}
            ],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.toolbar.Item">
            <summary>
            The base class that other non-interacting Toolbar Item classes should extend in order to
            get some basic common toolbar item functionality.
            </summary>
        </member>
        <member name="M:Ext.toolbar.TextItem.#ctor(System.Object)">
            <summary>
            Creates a new TextItem ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.TextItem.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Updates this item's text, setting the text to be used as innerHTML. ...
            </summary>
        </member>
        <member name="T:Ext.TaskManager">
            <summary>
            A static Ext.util.TaskRunner instance that can be used to start and stop arbitrary tasks.  See
            Ext.util.TaskRunner for supported methods and task config properties. // Start a simple clock task that updates a div once per second
            var task = {
            run: function(){
            Ext.fly(&#39;clock&#39;).update(new Date().format(&#39;g:i:s A&#39;));
            },
            interval: 1000 //1 second
            }
            Ext.TaskManager.start(task);
            See the start method for details about how to configure a task object.
            </summary>
        </member>
        <member name="T:Ext.util.TaskRunner">
            <summary>
            Provides the ability to execute one or more arbitrary tasks in a multithreaded
            manner.  Generally, you can use the singleton Ext.TaskManager instead, but
            if needed, you can create separate instances of TaskRunner.  Any number of
            separate tasks can be started at any time and will run independently of each
            other. Example usage: // Start a simple clock task that updates a div once per second
            var updateClock = function(){
            Ext.fly(&#39;clock&#39;).update(new Date().format(&#39;g:i:s A&#39;));
            }
            var task = {
            run: updateClock,
            interval: 1000 //1 second
            }
            var runner = new Ext.util.TaskRunner();
            runner.start(task);
            // equivalent using TaskManager
            Ext.TaskManager.start({
            run: updateClock,
            interval: 1000
            });
            See the start method for details about how to configure a task object. Also see Ext.util.DelayedTask.
            </summary>
        </member>
        <member name="M:Ext.util.TaskRunner.#ctor(SharpKit.JavaScript.JsNumber)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.util.TaskRunner.start(System.Object)">
            <summary>
            Starts a new task. ...
            </summary>
        </member>
        <member name="M:Ext.util.TaskRunner.stop(System.Object)">
            <summary>
            Stops an existing running task. ...
            </summary>
        </member>
        <member name="M:Ext.util.TaskRunner.stopAll">
            <summary>
            Stops all tasks that are currently running. ...
            </summary>
        </member>
        <member name="T:Ext.tab.Panel">
            <summary>
            A basic tab container. TabPanels can be used exactly like a standard Ext.panel.Panel for layout purposes, but also
            have special support for containing child Components (items) that are managed
            using a CardLayout layout manager, and displayed as separate tabs. Note: By default, a tab&#39;s close tool destroys the child tab Component and all its descendants. This makes the child tab
            Component, and all its descendants unusable. To enable re-use of a tab, configure the TabPanel with autoDestroy: false. TabPanel&#39;s layout: TabPanels use a Dock layout to position the TabBar at the top of the widget. Panels added to the TabPanel will have their
            header hidden by default because the Tab will automatically take the Panel&#39;s configured title and icon. TabPanels use their header or footer element (depending on the tabPosition
            configuration) to accommodate the tab selector buttons. This means that a TabPanel will not display any configured title, and will not display any
            configured header tools. To display a header, embed the TabPanel in a Panel which uses layout:&#39;fit&#39;. Controlling tabs:
            Configuration options for the Ext.tab.Tab that represents the component can be passed in by specifying the tabConfig option: Ext.create(&#39;Ext.tab.Panel&#39;, {
            width: 400,
            height: 400,
            renderTo: document.body,
            items: [{
            title: &#39;Foo&#39;
            }, {
            title: &#39;Bar&#39;,
            tabConfig: {
            title: &#39;Custom Title&#39;,
            tooltip: &#39;A button tooltip&#39;
            }
            }]
            });
            Examples: Here is a basic TabPanel rendered to the body. This also shows the useful configuration activeTab, which allows you to set the active tab on render.
            If you do not set an activeTab, no tabs will be active by default.
            Example usage: Ext.create(&#39;Ext.tab.Panel&#39;, {
            width: 300,
            height: 200,
            activeTab: 0,
            items: [
            {
            title: &#39;Tab 1&#39;,
            bodyPadding: 10,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            It is easy to control the visibility of items in the tab bar. Specify hidden: true to have the
            tab button hidden initially. Items can be subsequently hidden and show by accessing the
            tab property on the child item. Example usage: var tabs = Ext.create(&#39;Ext.tab.Panel&#39;, {
            width: 400,
            height: 400,
            renderTo: document.body,
            items: [{
            title: &#39;Home&#39;,
            html: &#39;Home&#39;,
            itemId: &#39;home&#39;
            }, {
            title: &#39;Users&#39;,
            html: &#39;Users&#39;,
            itemId: &#39;users&#39;,
            hidden: true
            }, {
            title: &#39;Tickets&#39;,
            html: &#39;Tickets&#39;,
            itemId: &#39;tickets&#39;
            }]
            });
            setTimeout(function(){
            tabs.child(&#39;#home&#39;).tab.hide();
            var users = tabs.child(&#39;#users&#39;);
            users.tab.show();
            tabs.setActiveTab(users);
            }, 1000);
            You can remove the background of the TabBar by setting the plain property to true. Example usage: Ext.create(&#39;Ext.tab.Panel&#39;, {
            width: 300,
            height: 200,
            activeTab: 0,
            plain: true,
            items: [
            {
            title: &#39;Tab 1&#39;,
            bodyPadding: 10,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            Another useful configuration of TabPanel is tabPosition. This allows you to change the position where the tabs are displayed. The available
            options for this are &#39;top&#39; (default) and &#39;bottom&#39;.
            Example usage: Ext.create(&#39;Ext.tab.Panel&#39;, {
            width: 300,
            height: 200,
            activeTab: 0,
            bodyPadding: 10,
            tabPosition: &#39;bottom&#39;,
            items: [
            {
            title: &#39;Tab 1&#39;,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            The setActiveTab is a very useful method in TabPanel which will allow you to change the current active tab. You can either give it an index or
            an instance of a tab. Example usage: var tabs = Ext.create(&#39;Ext.tab.Panel&#39;, {
            items: [
            {
            id   : &#39;my-tab&#39;,
            title: &#39;Tab 1&#39;,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            var tab = Ext.getCmp(&#39;my-tab&#39;);
            Ext.create(&#39;Ext.button.Button&#39;, {
            renderTo: Ext.getBody(),
            text    : &#39;Select the first tab&#39;,
            scope   : this,
            handler : function() {
            tabs.setActiveTab(tab);
            }
            });
            Ext.create(&#39;Ext.button.Button&#39;, {
            text    : &#39;Select the second tab&#39;,
            scope   : this,
            handler : function() {
            tabs.setActiveTab(1);
            },
            renderTo : Ext.getBody()
            });
            The getActiveTab is a another useful method in TabPanel which will return the current active tab. Example usage: var tabs = Ext.create(&#39;Ext.tab.Panel&#39;, {
            items: [
            {
            title: &#39;Tab 1&#39;,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            Ext.create(&#39;Ext.button.Button&#39;, {
            text    : &#39;Get active tab&#39;,
            scope   : this,
            handler : function() {
            var tab = tabs.getActiveTab();
            alert(&#39;Current tab: &#39; + tab.title);
            },
            renderTo : Ext.getBody()
            });
            Adding a new tab is very simple with a TabPanel. You simple call the add method with an config object for a panel. Example usage: var tabs = Ext.Create(&#39;Ext.tab.Panel&#39;, {
            items: [
            {
            title: &#39;Tab 1&#39;,
            html : &#39;A simple tab&#39;
            },
            {
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            Ext.create(&#39;Ext.button.Button&#39;, {
            text    : &#39;New tab&#39;,
            scope   : this,
            handler : function() {
            var tab = tabs.add({
            title: &#39;Tab &#39; + (tabs.items.length + 1), //we use the tabs.items property to get the length of current items/tabs
            html : &#39;Another one&#39;
            });
            tabs.setActiveTab(tab);
            },
            renderTo : Ext.getBody()
            });
            Additionally, removing a tab is very also simple with a TabPanel. You simple call the remove method with an config object for a panel. Example usage: var tabs = Ext.Create(&#39;Ext.tab.Panel&#39;, {
            items: [
            {
            title: &#39;Tab 1&#39;,
            html : &#39;A simple tab&#39;
            },
            {
            id   : &#39;remove-this-tab&#39;,
            title: &#39;Tab 2&#39;,
            html : &#39;Another one&#39;
            }
            ],
            renderTo : Ext.getBody()
            });
            Ext.Create(&#39;Ext.button.Button&#39;, {
            text    : &#39;Remove tab&#39;,
            scope   : this,
            handler : function() {
            var tab = Ext.getCmp(&#39;remove-this-tab&#39;);
            tabs.remove(tab);
            },
            renderTo : Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.panel.Panel">
            <summary>
            Panel is a container that has specific functionality and structural components that make
            it the perfect building block for application-oriented user interfaces. Panels are, by virtue of their inheritance from Ext.container.Container, capable
            of being configured with a layout, and containing child Components. When either specifying child items of a Panel, or dynamically adding Components
            to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
            those child elements need to be sized using one of Ext&amp;#39;s built-in layout schemes. By
            default, Panels use the Auto scheme. This simply renders
            child components, appending them one after the other inside the Container, and does not apply any sizing
            at all.  A Panel may also contain bottom and top toolbars, along with separate
            header, footer and body sections (see frame for additional
            information). Panel also provides built-in collapsible, expandable and closable behavior.
            Panels can be easily dropped into any Container or layout, and the
            layout and rendering pipeline is completely managed by the framework. Note: By default, the close header tool destroys the Panel resulting in removal of the Panel
            and the destruction of any descendant Components. This makes the Panel object, and all its descendants unusable. To enable the close
            tool to simply hide a Panel for later re-use, configure the Panel with closeAction: &#39;hide&#39;. Usually, Panels are used as constituents within an application, in which case, they would be used as child items of Containers,
            and would themselves use Ext.Components as child items. However to illustrate simply rendering a Panel into the document,
            here&amp;#39;s how to do it:
            Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Hello&#39;,
            width: 200,
            html: &#39;&amp;lt;p&amp;gt;World!&amp;lt;/p&amp;gt;&#39;,
            renderTo: document.body
            });
            A more realistic scenario is a Panel created to house input fields which will not be rendered, but used as a constituent part of a Container:
            var filterPanel = Ext.create(&#39;Ext.panel.Panel&#39;, {
            bodyPadding: 5,  // Don&amp;#39;t want content to crunch against the borders
            title: &#39;Filters&#39;,
            items: [{
            xtype: &#39;datefield&#39;,
            fieldLabel: &#39;Start date&#39;
            }, {
            xtype: &#39;datefield&#39;,
            fieldLabel: &#39;End date&#39;
            }]
            });
            Note that the Panel above is not configured to render into the document, nor is it configured with a size or position. In a real world scenario,
            the Container into which the Panel is added will use a layout to render, size and position its child Components. Panels will often use specific layouts to provide an application with shape and structure by containing and arranging child
            Components:
            var resultsPanel = Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Results&#39;,
            width: 600,
            height: 400,
            renderTo: document.body,
            layout: {
            type: &#39;vbox&#39;,       // Arrange child items vertically
            align: &#39;stretch&#39;,    // Each takes up full width
            padding: 5
            },
            items: [{               // Results grid specified as a config object with an xtype of &#39;grid&#39;
            xtype: &#39;grid&#39;,
            columns: [{header: &#39;Column One&#39;}],            // One header just for show. There&amp;#39;s no data,
            store: Ext.create(&#39;Ext.data.ArrayStore&#39;, {}), // A dummy empty data store
            flex: 1                                       // Use 1/3 of Container&amp;#39;s height (hint to Box layout)
            }, {
            xtype: &#39;splitter&#39;   // A splitter between the two child items
            }, {                    // Details Panel specified as a config object (no xtype defaults to &#39;panel&#39;).
            title: &#39;Details&#39;,
            bodyPadding: 5,
            items: [{
            fieldLabel: &#39;Data item&#39;,
            xtype: &#39;textfield&#39;
            }], // An array of form fields
            flex: 2             // Use 2/3 of Container&amp;#39;s height (hint to Box layout)
            }]
            });
            The example illustrates one possible method of displaying search results. The Panel contains a grid with the resulting data arranged
            in rows. Each selected row may be displayed in detail in the Panel below. The vbox layout is used
            to arrange the two vertically. It is configured to stretch child items horizontally to full width. Child items may either be configured
            with a numeric height, or with a flex value to distribute available space proportionately. This Panel itself may be a child item of, for exaple, a Ext.tab.Panel which will size its child items to fit within its
            content area. Using these techniques, as long as the layout is chosen and configured correctly, an application may have any level of
            nested containment, all dynamically sized according to configuration, the user&amp;#39;s preference and available browser size.
            </summary>
        </member>
        <member name="T:Ext.panel.AbstractPanel">
            <summary>
            A base class which provides methods common to Panel classes across the Sencha product range. Please refer to sub class&#39;s documentation
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.addDocked(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adds docked item(s) to the panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.getComponent(System.Object)">
            <summary>
            Attempts a default component lookup (see Ext.container.Container.getComponent). ...
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.getDockedComponent(System.Object)">
            <summary>
            Finds a docked component by id, itemId or position. ...
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.getDockedItems(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieve an array of all currently docked Components. ...
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.insertDocked(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Inserts docked item(s) to the panel at the indicated position. ...
            </summary>
        </member>
        <member name="M:Ext.panel.AbstractPanel.removeDocked(Ext.Component,System.Boolean)">
            <summary>
            Removes the docked item from the panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.close">
            <summary>
            Closes the Panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.collapse(SharpKit.JavaScript.JsString,System.Boolean,System.Object)">
            <summary>
            Collapses the panel body so that the body becomes hidden. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.expand(System.Boolean)">
            <summary>
            Expands the panel body so that it becomes visible. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Set the iconCls for the panel&#39;s header. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Set a title for the panel&#39;s header. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Panel.toggleCollapse">
            <summary>
            Shortcut for performing an expand or collapse based on the current state of the panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.Panel.dd">
            <summary>
            If this Panel is configured draggable, this property will contain
            an instance of Ext.dd.DragSource which handles drag...
            </summary>
        </member>
        <member name="M:Ext.tab.Panel.getActiveTab">
            <summary>
            Returns the item that is currently active inside this TabPanel. ...
            </summary>
        </member>
        <member name="M:Ext.tab.Panel.getTabBar">
            <summary>
            Returns the Ext.tab.Bar currently used in this TabPanel ...
            </summary>
        </member>
        <member name="M:Ext.tab.Panel.setActiveTab(Ext.Component)">
            <summary>
            Makes the given card active (makes it the visible card in the TabPanel's CardLayout and highlights the Tab) ...
            </summary>
        </member>
        <member name="P:Ext.tab.Panel.hasItemsLeft">
            <summary>
            At this point the item hasn't been removed from the items collection. ...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.bodyBorder">
            <summary>
            A shortcut to add or remove the border on the body of a panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.bodyCls">
            <summary>
            A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element. ...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.bodyPadding">
            <summary>
            A shortcut for setting a padding style on the body element. ...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.bodyStyle">
            <summary>
            Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,
            an ob...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.defaultDockWeights">
            <summary>
            This object holds the default weights applied to dockedItems that have no weight. ...
            </summary>
        </member>
        <member name="P:Ext.panel.AbstractPanelConfig.dockedItems">
            <summary>
            A component or series of components to be added as docked items to this panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.animCollapse">
            <summary>
            true to animate the transition when the panel is collapsed, false to skip the
            animation (defaults to true if the Ext....
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.bbar">
            <summary>
            Convenience method. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.buttonAlign">
            <summary>
            The alignment of any buttons added to this panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.buttons">
            <summary>
            Convenience method used for adding buttons docked to the bottom of the panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.closable">
            <summary>
            True to display the 'close' tool button and allow the user to close the window, false to
            hide the button and disallow...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.closeAction">
            <summary>
            The action to take when the close header tool is clicked:
            'destroy' : Default
            remove the window from the DOM and des...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.collapseDirection">
            <summary>
            The direction to collapse the Panel when the toggle button is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.collapseFirst">
            <summary>
            true to make sure the collapse/expand toggle button always renders first (to the left of)
            any other tools in the pane...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.collapseMode">
            <summary>
            Important: this config is only effective for collapsible Panels which are direct child items of a border layout. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.collapsible">
            <summary>
            True to make the panel collapsible and have an expand/collapse toggle Tool added into
            the header tool button area. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.dockedItems">
            <summary>
            A component or series of components to be added as docked items to this panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.fbar">
            <summary>
            Convenience method used for adding items to the bottom of the panel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.floatable">
            <summary>
            Important: This config is only effective for collapsible Panels which are direct child items of a border layout. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.headerPosition">
            <summary>
            Specify as 'top', 'bottom', 'left' or 'right'. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.lbar">
            <summary>
            Convenience method. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.minButtonWidth">
            <summary>
            Minimum width of all footer toolbar buttons in pixels (defaults to 75). ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.overlapHeader">
            <summary>
            True to overlap the header in a panel over the framing of the panel itself. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.placeholder">
            <summary>
            Important: This config is only effective for collapsible Panels which are direct child items of a border layout
            when ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.preventHeader">
            <summary>
            Prevent a Header from being created and shown. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.rbar">
            <summary>
            Convenience method. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.tbar">
            <summary>
            Convenience method. ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.title">
            <summary>
            The title text to be used to display in the panel header (defaults to ''). ...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.titleCollapse">
            <summary>
            true to allow expanding and collapsing the panel (when collapsible = true)
            by clicking anywhere in the header bar, fa...
            </summary>
        </member>
        <member name="P:Ext.panel.PanelConfig.tools">
            <summary>
            An array of Ext.panel.Tool configs/instances to be added to the header tool area. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.deferredRender">
            <summary>
            true by default to defer the rendering of child items
            to the browsers DOM until a tab is activated. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.itemCls">
            <summary>
            The class added to each child item of this TabPanel. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.layout">
            <summary>
            Optional configuration object for the internal card layout. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.minTabWidth">
            <summary>
            The minimum width for a tab in the tabBar. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.removePanelHeader">
            <summary>
            True to instruct each Panel added to the TabContainer to not render its header
            element. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.tabBar">
            <summary>
            Optional configuration object for the internal Ext.tab.Bar. ...
            </summary>
        </member>
        <member name="P:Ext.tab.PanelConfig.tabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to 'top'). ...
            </summary>
        </member>
        <member name="F:Ext.panel.AbstractPanelEvents.bodyresize">
            <summary>
            Fires after the Panel has been resized. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.beforecollapse">
            <summary>
            Fires before this panel is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.beforeexpand">
            <summary>
            Fires before this panel is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.collapse">
            <summary>
            Fires after this Panel hass collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.expand">
            <summary>
            Fires after this Panel has expanded. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.iconchange">
            <summary>
            Fires after the Panel iconCls has been set or changed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.PanelEvents.titlechange">
            <summary>
            Fires after the Panel title has been set or changed. ...
            </summary>
        </member>
        <member name="F:Ext.tab.PanelEvents.beforetabchange">
            <summary>
            Fires before a tab change (activated by setActiveTab). ...
            </summary>
        </member>
        <member name="F:Ext.tab.PanelEvents.tabchange">
            <summary>
            Fires when a new tab has been activated (activated by setActiveTab). ...
            </summary>
        </member>
        <member name="T:Ext.slider.Multi">
            <summary>
            Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis
            clicking and animation. Can be added as an item to any container. In addition,
            Example usage:
            Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:
            Ext.create(&#39;Ext.slider.Multi&#39;, {
            width: 200,
            values: [25, 50, 75],
            increment: 5,
            minValue: 0,
            maxValue: 100,
            //this defaults to true, setting to false allows the thumbs to pass each other
            constrainThumbs: false,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.Base">
            <summary>
            Base class for form fields that provides default event handling, rendering, and other common functionality
            needed by all form field types. Utilizes the Ext.form.field.Field mixin for value handling and validation,
            and the Ext.form.Labelable mixin to provide label and error message display. In most cases you will want to use a subclass, such as Ext.form.field.Text or Ext.form.field.Checkbox,
            rather than creating instances of this class directly. However if you are implementing a custom form field,
            using this as the parent class is recommended. Values and Conversions Because BaseField implements the Field mixin, it has a main value that can be initialized with the
            value config and manipulated via the getValue and setValue methods. This main
            value can be one of many data types appropriate to the current field, for instance a Date
            field would use a JavaScript Date object as its value type. However, because the field is rendered as a HTML
            input, this value data type can not always be directly used in the rendered field. Therefore BaseField introduces the concept of a &quot;raw value&quot;. This is the value of the rendered HTML input field,
            and is normally a String. The getRawValue and setRawValue methods can be used to directly
            work with the raw value, though it is recommended to use getValue and setValue in most cases. Conversion back and forth between the main value and the raw value is handled by the valueToRaw and
            rawToValue methods. If you are implementing a subclass that uses a non-String value data type, you
            should override these methods to handle the conversion. Rendering The content of the field body is defined by the fieldSubTpl XTemplate, with its argument data
            created by the getSubTplData method. Override this template and/or method to create custom
            field renderings.
            Example usage: // A simple subclass of BaseField that creates a HTML5 search field. Redirects to the
            // searchUrl when the Enter key is pressed.
            Ext.define(&#39;Ext.form.SearchField&#39;, {
            extend: &#39;Ext.form.field.Base&#39;,
            alias: &#39;widget.searchfield&#39;,
            inputType: &#39;search&#39;,
            // Config defining the search URL
            searchUrl: &#39;http://www.google.com/search?q={0}&#39;,
            // Add specialkey listener
            initComponent: function() {
            this.callParent();
            this.on(&#39;specialkey&#39;, this.checkEnterKey, this);
            },
            // Handle enter key presses, execute the search if the field has a value
            checkEnterKey: function(field, e) {
            var value = this.getValue();
            if (e.getKey() === e.ENTER &amp;amp;&amp;amp; !Ext.isEmpty(value)) {
            location.href = Ext.String.format(this.searchUrl, value);
            }
            }
            });
            Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;BaseField Example&#39;,
            bodyPadding: 5,
            width: 250,
            // Fields will be arranged vertically, stretched to full width
            layout: &#39;anchor&#39;,
            defaults: {
            anchor: &#39;100%&#39;
            },
            items: [{
            xtype: &#39;searchfield&#39;,
            fieldLabel: &#39;Search&#39;,
            name: &#39;query&#39;
            }]
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.batchChanges(System.Object)">
            <summary>
            A utility for grouping a set of modifications which may trigger value changes into a single
            transaction, to prevent e...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.checkChange">
            <summary>
            Checks whether the value of the field has changed since the last time it was checked. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.checkDirty">
            <summary>
            Checks the isDirty state of the field and if it has changed since the last time
            it was checked, fires the dirtychange...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.clearInvalid">
            <summary>
            Clear any invalid styles/messages for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.extractFileInput">
            <summary>
            Only relevant if the instance's isFileUpload method returns true. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getActiveError">
            <summary>
            Gets the active error message for this component, if any. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getActiveErrors">
            <summary>
            Gets an Array of any active error messages currently applied to the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getBodyNaturalWidth">
            <summary>
            Calculate and return the natural width of the bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getErrors(System.Object)">
            <summary>
            Runs this field's validators and returns an array of error messages for any validation failures. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getFieldLabel">
            <summary>
            Returns the label for the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getInputId">
            <summary>
            Returns the input id for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getLabelableRenderData">
            <summary>
            Generates the arguments for the field decorations rendering template. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getLabelableSelectors">
            <summary>
            Returns the additional Ext.AbstractComponent.renderSelectors for selecting the field
            decoration elements from the ren...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getModelData">
            <summary>
            Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when
            Ext.form.Basic.updateRe...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getName">
            <summary>
            Returns the name attribute of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getRawValue">
            <summary>
            Returns the raw value of the field, without performing any normalization, conversion, or validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getSubTplData">
            <summary>
            Creates and returns the data object to be used when rendering the fieldSubTpl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getSubTplMarkup">
            <summary>
            Gets the markup to be inserted into the outer template's bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getSubmitData">
            <summary>
            Returns the parameter(s) that would be included in a standard form submit for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getSubmitValue">
            <summary>
            Returns the value that would be included in a standard form submit for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.getValue">
            <summary>
            Returns the current data value of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.hasActiveError">
            <summary>
            Tells whether the field currently has an active error message. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.initField">
            <summary>
            Initializes this Field mixin on the current instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.initLabelable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.initValue">
            <summary>
            Initializes the field's value based on the initial config. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.isDirty">
            <summary>
            Returns true if the value of this Field has been changed from its originalValue. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.isEqual(System.Object,System.Object)">
            <summary>
            Returns whether two field values are logically equal. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.isFileUpload">
            <summary>
            Returns whether this Field is a file upload field; if it returns true, forms will use
            special techniques for submitti...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.isValid">
            <summary>
            Returns whether or not the field value is currently valid by
            validating the processed raw value
            of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.markInvalid(System.Object)">
            <summary>
            Display one or more error messages associated with this field, using msgTarget to determine how to
            display the messag...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.processRawValue(System.Object)">
            <summary>
            Performs any necessary manipulation of a raw field value to prepare it for conversion
            and/or validation, for instance...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.rawToValue(System.Object)">
            <summary>
            Converts a raw input field value into a mixed-type value that is suitable for this particular field type. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.resetOriginalValue">
            <summary>
            Resets the field's originalValue property so it matches the current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setActiveError(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the active error message to the given string. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setActiveErrors(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the active error message to an Array of error messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setFieldDefaults(System.Object)">
            <summary>
            Applies a set of default configuration values to this Labelable instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setFieldStyle(System.Object)">
            <summary>
            Set the CSS style of the field input element. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setRawValue(System.Object)">
            <summary>
            Sets the field's raw value directly, bypassing value conversion, change detection, and
            validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setReadOnly(System.Boolean)">
            <summary>
            Sets the read only state of this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.setValue(System.Object)">
            <summary>
            Sets a data value into the field and runs the change detection and validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.unsetActiveError">
            <summary>
            Clears the active error message(s). ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.validate">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value, and fires the vali...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.validateValue(System.Object)">
            <summary>
            Uses getErrors to build an array of validation errors. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Base.valueToRaw(System.Object)">
            <summary>
            Converts a mixed-type value to a raw representation suitable for displaying in the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.bodyEl">
            <summary>
            The div Element wrapping the component's contents. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.errorEl">
            <summary>
            The div Element that will contain the component's error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.inputEl">
            <summary>
            The input Element for this Field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.isFieldLabelable">
            <summary>
            Flag denoting that this object is labelable as a field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.isFormField">
            <summary>
            Flag denoting that this component is a Field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.labelEl">
            <summary>
            The label Element for this component. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Base.originalValue">
            <summary>
            The original value of the field as configured in the value configuration, or as loaded by
            the last form load operatio...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.addThumb(SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a new thumb and adds it to the slider ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.getValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the current value of the slider ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.getValues">
            <summary>
            Returns an array of values - one for the location of each thumb ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.setMaxValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the maximum value for the slider instance. ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.setMinValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the minimum value for the slider instance. ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.setValue(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean,System.Object)">
            <summary>
            Programmatically sets the value of the Slider. ...
            </summary>
        </member>
        <member name="M:Ext.slider.Multi.syncThumbs">
            <summary>
            Synchronizes thumbs position to the proper proportion of the total component width based
            on the current slider value. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.activeError">
            <summary>
            If specified, then the component will be displayed with this value as its active error when
            first rendered. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.activeErrorsTpl">
            <summary>
            The template used to format the Array of error messages passed to setActiveErrors
            into a single HTML string. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.autoFitErrors">
            <summary>
            Whether to adjust the component's body area to make room for 'side' or 'under'
            error messages. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.baseBodyCls">
            <summary>
            The CSS class to be applied to the body content element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.checkChangeBuffer">
            <summary>
            Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.checkChangeEvents">
            <summary>
            A list of event names that will be listened for on the field's input element, which
            will cause the field's value to b...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.clearCls">
            <summary>
            The CSS class to be applied to the special clearing div rendered directly after the field
            contents wrapper to provide...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.disabled">
            <summary>
            True to disable the field (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.errorMsgCls">
            <summary>
            The CSS class to be applied to the error message element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.fieldLabel">
            <summary>
            The label for the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.fieldStyle">
            <summary>
            Optional CSS style(s) to be applied to the field input element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.formItemCls">
            <summary>
            A CSS class to be applied to the outermost element to denote that it is participating in the form
            field layout. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.hideEmptyLabel">
            <summary>
            When set to true, the label element (fieldLabel and labelSeparator) will be
            automatically hidden if the fieldLabel is...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.hideLabel">
            <summary>
            Set to true to completely hide the label element (fieldLabel and labelSeparator). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.inputId">
            <summary>
            The id that will be given to the generated input DOM element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.inputType">
            <summary>
            The type attribute for input fields -- e.g. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.invalidText">
            <summary>
            The error text to use when marking a field invalid and no message is provided
            (defaults to 'The value in this field i...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelAlign">
            <summary>
            Controls the position and alignment of the fieldLabel. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelCls">
            <summary>
            The CSS class to be applied to the label element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelPad">
            <summary>
            The amount of space in pixels between the fieldLabel and the input field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelWidth">
            <summary>
            The width of the fieldLabel in pixels. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.labelableRenderTpl">
            <summary>
            The rendering template for the field decorations. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.msgTarget">
            <summary>
            The location where the error message text should display. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.name">
            <summary>
            The name of the field (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.preventMark">
            <summary>
            true to disable displaying any error message set on this object. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.readOnly">
            <summary>
            true to mark the field as readOnly in HTML
            (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.submitValue">
            <summary>
            Setting this to false will prevent the field from being
            submitted even when it is not disabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.tabIndex">
            <summary>
            The tabIndex for this field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.validateOnBlur">
            <summary>
            Whether the field should validate when it loses focus (defaults to true). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.BaseConfig.validateOnChange">
            <summary>
            Specifies whether this field should be validated immediately whenever a change in its value is detected. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.animate">
            <summary>
            Turn on or off animation. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.clickToChange">
            <summary>
            Determines whether or not clicking on the Slider axis will change the slider. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.constrainThumbs">
            <summary>
            True to disallow thumbs from overlapping one another. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.decimalPrecision">
            <summary>
            .
            The number of decimal places to which to round the Slider's value. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.increment">
            <summary>
            How many units to change the slider when adjusting by drag and drop. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.keyIncrement">
            <summary>
            How many units to change the Slider when adjusting with keyboard navigation. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.maxValue">
            <summary>
            The maximum value for the Slider. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.minValue">
            <summary>
            The minimum value for the Slider. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.tipText">
            <summary>
            A function used to display custom text for the slider tip. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.useTips">
            <summary>
            True to use an Ext.slider.Tip to display tips for the value. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.value">
            <summary>
            A value with which to initialize the slider. ...
            </summary>
        </member>
        <member name="P:Ext.slider.MultiConfig.values">
            <summary>
            Array of Number values with which to initalize the slider. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.blur">
            <summary>
            Fires when this field loses input focus. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.change">
            <summary>
            Fires when a user-initiated change is detected in the value of the field. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.dirtychange">
            <summary>
            Fires when a change in the field's isDirty state is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.errorchange">
            <summary>
            Fires when the active error message is changed via setActiveError. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.focus">
            <summary>
            Fires when this field receives input focus. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.specialkey">
            <summary>
            Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.BaseEvents.validitychange">
            <summary>
            Fires when a change in the field's validity is detected. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.beforechange">
            <summary>
            Fires before the slider value is changed. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.change">
            <summary>
            Fires when the slider value is changed. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.changecomplete">
            <summary>
            Fires when the slider value is changed by the user and any drag operations have completed. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.drag">
            <summary>
            Fires continuously during the drag operation while the mouse is moving. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.dragend">
            <summary>
            Fires after the drag operation has completed. ...
            </summary>
        </member>
        <member name="F:Ext.slider.MultiEvents.dragstart">
            <summary>
            Fires after a drag operation has started. ...
            </summary>
        </member>
        <member name="T:Ext.resizer.Resizer">
            <summary>
            Applies drag handles to an element or component to make it resizable. The
            drag handles are inserted into the element (or component&#39;s element) and
            positioned absolute. Textarea and img elements will be wrapped with an additional div because
            these elements do not support child nodes. The original element can be accessed
            through the originalTarget property. Here is the list of valid resize handles: Value   Description
            ------  -------------------
            &#39;n&#39;     north
            &#39;s&#39;     south
            &#39;e&#39;     east
            &#39;w&#39;     west
            &#39;nw&#39;    northwest
            &#39;sw&#39;    southwest
            &#39;se&#39;    southeast
            &#39;ne&#39;    northeast
            &#39;all&#39;   all
            Here&#39;s an example showing the creation of a typical Resizer:
            Ext.create(&#39;Ext.resizer.Resizer&#39;, {
            el: &#39;elToResize&#39;,
            handles: &#39;all&#39;,
            minWidth: 200,
            minHeight: 100,
            maxWidth: 500,
            maxHeight: 400,
            pinned: true
            });
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.getEl">
            <summary>
            Returns the element that was configured with the el or target config property. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.getTarget">
            <summary>
            Returns the element or component that was configured with the target config property. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.resizeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Perform a manual resize and fires the 'resize' event. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.resizer.Resizer.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.Resizer.originalTarget">
            <summary>
            Reference to the original resize target if the element of the original
            resize target was an IMG or a TEXTAREA which m...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.constrainTo">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.dynamic">
            <summary>
            Specify as true to update the target (Element or Component) dynamically during dragging. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.handles">
            <summary>
            String consisting of the resize handles to display. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.height">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.heightIncrement">
            <summary>
            The increment to snap the height resize in pixels. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.pinned">
            <summary>
            True to ensure that the resize handles are always
            visible, false indicates resizing by cursor changes only (defaults ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.transparent">
            <summary>
            True for transparent handles. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.ResizerConfig.width">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="F:Ext.resizer.ResizerEvents.beforeresize">
            <summary>
            Fired before resize is allowed. ...
            </summary>
        </member>
        <member name="F:Ext.resizer.ResizerEvents.resize">
            <summary>
            Fired after a resize. ...
            </summary>
        </member>
        <member name="F:Ext.resizer.ResizerEvents.resizedrag">
            <summary>
            Fires during resizing. ...
            </summary>
        </member>
        <member name="T:Ext.panel.Table">
            <summary>
            TablePanel is the basis of both TreePanel and GridPanel. TablePanel aggregates:  a Selection Model a View a Store Scrollers Ext.grid.header.Container
            </summary>
        </member>
        <member name="M:Ext.panel.Table.determineScrollbars">
            <summary>
            Request a recalculation of scrollbars and put them in if they are needed. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.getSelectionModel">
            <summary>
            Returns the selection model being used and creates it via the configuration
            if it has not been created already. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.getStore">
            <summary>
            Returns the store associated with this Panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.getView">
            <summary>
            Gets the view for this panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.hideHorizontalScroller">
            <summary>
            Hide the verticalScroller and remove the horizontalScrollerPresentCls. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.hideVerticalScroller">
            <summary>
            Hide the verticalScroller and remove the verticalScrollerPresentCls. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.initHorizontalScroller">
            <summary>
            Returns the horizontal scroller config. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.initVerticalScroller">
            <summary>
            Returns the vertical scroller config. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.invalidateScroller">
            <summary>
            Invalides scrollers that are present and forces a recalculation. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.reconfigure(Ext.data.Store,SharpKit.JavaScript.JsArray)">
            <summary>
            Reconfigure the table with a new store/column. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.scrollByDeltaX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Scrolls the TablePanel by deltaX ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.scrollByDeltaY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Scrolls the TablePanel by deltaY ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.setScrollTop(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the scrollTop of the TablePanel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.showHorizontalScroller">
            <summary>
            Show the horizontalScroller and add the horizontalScrollerPresentCls. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Table.showVerticalScroller">
            <summary>
            Show the verticalScroller and add the verticalScrollerPresentCls. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.columns">
            <summary>
            An array of column definition objects which define all columns that appear in this grid. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.deferRowRender">
            <summary>
            Defaults to true to enable deferred row rendering. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.enableColumnHide">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.enableColumnMove">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.enableColumnResize">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.forceFit">
            <summary>
            Specify as true to force the columns to fit into the available width. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.scroll">
            <summary>
            Valid values are 'both', 'horizontal' or 'vertical'. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.scrollDelta">
            <summary>
            Number of pixels to scroll when scrolling with mousewheel. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.sortableColumns">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.store">
            <summary>
            The Store the grid should use as its data source (required).
            </summary>
        </member>
        <member name="P:Ext.panel.TableConfig.viewConfig">
            <summary>
            A config object that will be applied to the grid's UI view. Any of the config options available for Ext.view.Table can be specified here. This option is ignored if view is specified.
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainerclick">
            <summary>
            Fires before the click event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainercontextmenu">
            <summary>
            Fires before the contextmenu event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainerdblclick">
            <summary>
            Fires before the dblclick event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainermousedown">
            <summary>
            Fires before the mousedown event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainermouseout">
            <summary>
            Fires before the mouseout event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainermouseover">
            <summary>
            Fires before the mouseover event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforecontainermouseup">
            <summary>
            Fires before the mouseup event on the container is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemclick">
            <summary>
            Fires before the click event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemcontextmenu">
            <summary>
            Fires before the contextmenu event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemdblclick">
            <summary>
            Fires before the dblclick event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemmousedown">
            <summary>
            Fires before the mousedown event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemmouseenter">
            <summary>
            Fires before the mouseenter event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemmouseleave">
            <summary>
            Fires before the mouseleave event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeitemmouseup">
            <summary>
            Fires before the mouseup event on an item is processed. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.beforeselect">
            <summary>
            Fires before a selection is made. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containerclick">
            <summary>
            Fires when the container is clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containercontextmenu">
            <summary>
            Fires when the container is right clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containerdblclick">
            <summary>
            Fires when the container is double clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containermouseout">
            <summary>
            Fires when you move the mouse out of the container. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containermouseover">
            <summary>
            Fires when you move the mouse over the container. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.containermouseup">
            <summary>
            Fires when there is a mouse up on the container ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemclick">
            <summary>
            Fires when an item is clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemcontextmenu">
            <summary>
            Fires when an item is right clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemdblclick">
            <summary>
            Fires when an item is double clicked. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemmousedown">
            <summary>
            Fires when there is a mouse down on an item ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemmouseenter">
            <summary>
            Fires when the mouse enters an item. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemmouseleave">
            <summary>
            Fires when the mouse leaves an item. ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.itemmouseup">
            <summary>
            Fires when there is a mouse up on an item ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.reconfigure">
            <summary>
            Fires after a reconfigure ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.scrollerhide">
            <summary>
            Fires when a scroller is hidden ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.scrollershow">
            <summary>
            Fires when a scroller is shown ...
            </summary>
        </member>
        <member name="F:Ext.panel.TableEvents.selectionchange">
            <summary>
            Fires when the selected nodes change. ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Box">
            <summary>
            Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.
            </summary>
        </member>
        <member name="M:Ext.layout.container.Box.updateChildBoxes(SharpKit.JavaScript.JsArray)">
            <summary>
            Resizes and repositions each child component ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.BoxConfig.animate">
            <summary>
            If truthy, child Component are animated into position whenever the Container
            is layed out. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.BoxConfig.defaultMargins">
            <summary>
            If the individual contained items do not have a margins
            property specified or margin specified via CSS, the default m...
            </summary>
        </member>
        <member name="P:Ext.layout.container.BoxConfig.flex">
            <summary>
            This configuration option is to be applied to child items of the container managed
            by this layout. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.BoxConfig.pack">
            <summary>
            Controls how the child items of the container are packed together. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.BoxConfig.padding">
            <summary>
            Sets the padding to be applied to all child items managed by this layout. ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Absolute">
            <summary>
            This is a layout that inherits the anchoring of Ext.layout.container.Anchor and adds the
            ability for x/y positioning using the standard x and y component config options. This class is intended to be extended or created via the layout
            configuration property.  See Ext.container.Container.layout for additional details.  Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Absolute Layout&#39;,
            width: 300,
            height: 275,
            layout:&#39;absolute&#39;,
            layoutConfig: {
            // layout-specific configs go here
            //itemCls: &#39;x-abs-layout-item&#39;,
            },
            url:&#39;save-form.php&#39;,
            defaultType: &#39;textfield&#39;,
            items: [{
            x: 10,
            y: 10,
            xtype:&#39;label&#39;,
            text: &#39;Send To:&#39;
            },{
            x: 80,
            y: 10,
            name: &#39;to&#39;,
            anchor:&#39;90%&#39;  // anchor width by percentage
            },{
            x: 10,
            y: 40,
            xtype:&#39;label&#39;,
            text: &#39;Subject:&#39;
            },{
            x: 80,
            y: 40,
            name: &#39;subject&#39;,
            anchor: &#39;90%&#39;  // anchor width by percentage
            },{
            x:0,
            y: 80,
            xtype: &#39;textareafield&#39;,
            name: &#39;msg&#39;,
            anchor: &#39;100% 100%&#39;  // anchor width and height
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.layout.container.Anchor">
            <summary>
            This is a layout that enables anchoring of contained elements relative to the container&#39;s dimensions.
            If the container is resized, all anchored items are automatically rerendered according to their
            anchor rules. This class is intended to be extended or created via the layout: &#39;anchor&#39; Ext.layout.container.AbstractContainer.layout
            config, and should generally not need to be created directly via the new keyword. AnchorLayout does not have any direct config options (other than inherited ones). By default,
            AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the
            container using the AnchorLayout can supply an anchoring-specific config property of anchorSize.
            If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating
            anchor measurements based on it instead, allowing the container to be sized independently of the anchoring
            logic if necessary.  For example: Ext.create(&#39;Ext.Panel&#39;, {
            width: 500,
            height: 400,
            title: &quot;AnchorLayout Panel&quot;,
            layout: &#39;anchor&#39;,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;panel&#39;,
            title: &#39;75% Width and 20% Height&#39;,
            anchor: &#39;75% 20%&#39;
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Offset -300 Width &amp;amp; -200 Height&#39;,
            anchor: &#39;-300 -200&#39;
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Mixed Offset and Percent&#39;,
            anchor: &#39;-250 20%&#39;
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.layout.container.AnchorConfig.anchor">
            <summary>
            This configuation option is to be applied to child items of a container managed by
            this layout (ie. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AnchorConfig.defaultAnchor">
            <summary>
            Default anchor for all child container items applied if no anchor or specific width is set on the child item. ...
            </summary>
        </member>
        <member name="T:Ext.fx.target.Element">
            <summary>
            This class represents a animation target for an Ext.core.Element. In general this class will not be
            created directly, the Ext.core.Element will be passed to the animation and
            and the appropriate target will be created.
            </summary>
        </member>
        <member name="T:Ext.fx.target.Target">
            <summary>
            This class specifies a generic target for an animation. It provides a wrapper around a
            series of different types of objects to allow for a generic animation API.
            A target can be a single object or a Composite object containing other objects that are
            to be animated. This class and it&#39;s subclasses are generally not created directly, the
            underlying animation will create the appropriate Ext.fx.target.Target object by passing
            the instance to be animated. The following types of objects can be animated:  Components Elements Sprites
            </summary>
        </member>
        <member name="M:Ext.fx.target.Target.#ctor(System.Object)">
            <summary>
            Creates new Target. ...
            </summary>
        </member>
        <member name="T:Ext.draw.engine.Vml">
            <summary>
            Provides specific methods to draw with VML.
            </summary>
        </member>
        <member name="T:Ext.draw.Surface">
            <summary>
            A Surface is an interface to render methods inside a draw Ext.draw.Component.
            A Surface contains methods to render sprites, get bounding boxes of sprites, add
            sprites to the canvas, initialize other graphic components, etc. One of the most used
            methods for this class is the add method, to add Sprites to the surface. Most of the Surface methods are abstract and they have a concrete implementation
            in VML or SVG engines. A Surface instance can be accessed as a property of a draw component. For example: drawComponent.surface.add({
            type: &#39;circle&#39;,
            fill: &#39;#ffc&#39;,
            radius: 100,
            x: 100,
            y: 100
            });
            The configuration object passed in the add method is the same as described in the Ext.draw.Sprite
            class documentation. Listeners You can also add event listeners to the surface using the Observable listener syntax. Supported events are:  mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave click  For example: drawComponent.surface.on({
            &#39;mousemove&#39;: function() {
            console.log(&#39;moving the mouse over the surface&#39;);
            }
            });
            Example var drawComponent = Ext.create(&#39;Ext.draw.Component&#39;, {
            width: 800,
            height: 600,
            renderTo: document.body
            }), surface = drawComponent.surface;
            surface.add([{
            type: &#39;circle&#39;,
            radius: 10,
            fill: &#39;#f00&#39;,
            x: 10,
            y: 10,
            group: &#39;circles&#39;
            }, {
            type: &#39;circle&#39;,
            radius: 10,
            fill: &#39;#0f0&#39;,
            x: 50,
            y: 50,
            group: &#39;circles&#39;
            }, {
            type: &#39;circle&#39;,
            radius: 10,
            fill: &#39;#00f&#39;,
            x: 100,
            y: 100,
            group: &#39;circles&#39;
            }, {
            type: &#39;rect&#39;,
            width: 20,
            height: 20,
            fill: &#39;#f00&#39;,
            x: 10,
            y: 10,
            group: &#39;rectangles&#39;
            }, {
            type: &#39;rect&#39;,
            width: 20,
            height: 20,
            fill: &#39;#0f0&#39;,
            x: 50,
            y: 50,
            group: &#39;rectangles&#39;
            }, {
            type: &#39;rect&#39;,
            width: 20,
            height: 20,
            fill: &#39;#00f&#39;,
            x: 100,
            y: 100,
            group: &#39;rectangles&#39;
            }]);
            // Get references to my groups
            circles = surface.getGroup(&#39;circles&#39;);
            rectangles = surface.getGroup(&#39;rectangles&#39;);
            // Animate the circles down
            circles.animate({
            duration: 1000,
            to: {
            translate: {
            y: 200
            }
            }
            });
            // Animate the rectangles across
            rectangles.animate({
            duration: 1000,
            to: {
            translate: {
            x: 200
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.#ctor(System.Object)">
            <summary>
            Creates new Surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.add">
            <summary>
            Adds a Sprite to the surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.addCls(System.Object,System.Object)">
            <summary>
            Adds one or more CSS classes to the element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.addGradient">
            <summary>
            Adds a gradient definition to the Surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.destroy">
            <summary>
            Destroys the surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.getGroup(SharpKit.JavaScript.JsString)">
            <summary>
            Returns a new group or an existent group associated with the current surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.getId">
            <summary>
            Retrieves the id of this component. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.remove(Ext.draw.Sprite,System.Boolean)">
            <summary>
            Removes a given sprite from the surface, optionally destroying the sprite in the process. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.removeAll(System.Boolean)">
            <summary>
            Removes all sprites from the surface, optionally destroying the sprites in the process. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.removeCls(System.Object,System.Object)">
            <summary>
            Removes one or more CSS classes from the element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.setSize(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the size of the surface. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.setStyle(System.Object,System.Object)">
            <summary>
            Sets CSS style attributes to an element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.setText(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Changes the text in the sprite element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Surface.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.draw.engine.Vml.addGradient(System.Object)">
            <summary>
            Adds a definition to this Surface for a linear gradient. ...
            </summary>
        </member>
        <member name="P:Ext.draw.SurfaceConfig.height">
            <summary>
            The height of this component in pixels (defaults to auto). ...
            </summary>
        </member>
        <member name="P:Ext.draw.SurfaceConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.draw.SurfaceConfig.width">
            <summary>
            The width of this component in pixels (defaults to auto). ...
            </summary>
        </member>
        <member name="T:Ext.draw.engine.Svg">
            <summary>
            Provides specific methods to draw with SVG.
            </summary>
        </member>
        <member name="M:Ext.draw.engine.Svg.applyZIndex(Ext.draw.Sprite)">
            <summary>
            Insert or move a given sprite's element to the correct place in the DOM list for its zIndex ...
            </summary>
        </member>
        <member name="M:Ext.draw.engine.Svg.getRegion">
            <summary>
            Get the region for the surface's canvas area ...
            </summary>
        </member>
        <member name="M:Ext.draw.engine.Svg.hasCls(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Checks if the specified CSS class exists on this element's DOM node. ...
            </summary>
        </member>
        <member name="T:Ext.direct.Transaction">
            <summary>
            Supporting Class for Ext.Direct (not intended to be used directly).
            </summary>
        </member>
        <member name="M:Ext.direct.Transaction.#ctor(System.Object)">
            <summary>
            Creates new Transaction. ...
            </summary>
        </member>
        <member name="T:Ext.dd.ScrollManager">
            <summary>
            Provides automatic scrolling of overflow regions in the page during drag operations. The ScrollManager configs will be used as the defaults for any scroll container registered with it,
            but you can also override most of the configs per scroll container by adding a
            ddScrollConfig object to the target element that contains these properties: hthresh,
            vthresh, increment and frequency.  Example usage:
            var el = Ext.get(&#39;scroll-ct&#39;);
            el.ddScrollConfig = {
            vthresh: 50,
            hthresh: -1,
            frequency: 100,
            increment: 200
            };
            Ext.dd.ScrollManager.register(el);
            Note: This class uses &quot;Point Mode&quot; and is untested in &quot;Intersect Mode&quot;.
            </summary>
        </member>
        <member name="M:Ext.dd.ScrollManager.refreshCache">
            <summary>
            Manually trigger a cache refresh. ...
            </summary>
        </member>
        <member name="M:Ext.dd.ScrollManager.register(System.Object)">
            <summary>
            Registers new overflow element(s) to auto scroll ...
            </summary>
        </member>
        <member name="M:Ext.dd.ScrollManager.unregister(System.Object)">
            <summary>
            Unregisters overflow element(s) so they are no longer scrolled ...
            </summary>
        </member>
        <member name="P:Ext.dd.ScrollManager.ddGroup">
            <summary>
            The named drag drop group to which this container belongs (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.dd.ScrollManager.hthresh">
            <summary>
            The number of pixels from the right or left edge of a container the pointer needs to be to
            trigger scrolling (default...
            </summary>
        </member>
        <member name="P:Ext.dd.ScrollManager.vthresh">
            <summary>
            The number of pixels from the top or bottom edge of a container the pointer needs to be to
            trigger scrolling (default...
            </summary>
        </member>
        <member name="T:Ext.data.TreeStore">
            <summary>
            The TreeStore is a store implementation that is backed by by an Ext.data.Tree.
            It provides convenience methods for loading nodes, as well as the ability to use
            the hierarchical tree structure combined with a store. This class is generally used
            in conjunction with Ext.tree.Panel. This class also relays many events from
            the Tree for convenience. Using Models If no Model is specified, an implicit model will be created that implements Ext.data.NodeInterface.
            The standard Tree fields will also be copied onto the Model for maintaining their state. Reading Nested Data For the tree to read nested data, the Ext.data.reader.Reader must be configured with a root property,
            so the reader can find nested data for each node. If a root is not specified, it will default to
            &#39;children&#39;.
            </summary>
        </member>
        <member name="T:Ext.data.AbstractStore">
            <summary>
            AbstractStore is a superclass of Ext.data.Store and Ext.data.TreeStore. It&#39;s never used directly,
            but offers a set of methods used by both of those subclasses. We&#39;ve left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what
            you&#39;re probably looking for is Ext.data.Store. If you&#39;re still interested, here&#39;s a brief description of what
            AbstractStore is and is not. AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be
            given a Model that represents the type of data in the Store. It also expects to be given a
            Proxy that handles the loading of data into the Store. AbstractStore provides a few helpful methods such as load and sync, which load and save data
            respectively, passing the requests through the configured proxy. Both built-in Store subclasses add extra
            behavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -
            in Ext.data.Store the data is saved as a flat MixedCollection, whereas in
            TreeStore we use a Ext.data.Tree to maintain the data&#39;s hierarchy. The store provides filtering and sorting support. This sorting/filtering can happen on the client side
            or can be completed on the server. This is controlled by the remoteSort and (@link #remoteFilter{ config
            options. For more information see the sort and filter methods.
            </summary>
        </member>
        <member name="T:Ext.util.Sortable">
            <summary>
            A mixin which allows a data component to be sorted. This is used by e.g. Ext.data.Store and Ext.data.TreeStore. *NOTE**: This mixin is mainly for internal library use and most users should not need to use it directly. It
            is more likely you will want to use one of the component classes that import this mixin, such as
            Ext.data.Store or Ext.data.TreeStore.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.initSortable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.sort(System.Object,SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Sorts the data in the Store by one or more of its properties. ...
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.isSortable">
            <summary>
            Flag denoting that this object is sortable. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getNewRecords">
            <summary>
            Returns all Model instances that are either currently a phantom (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getProxy">
            <summary>
            Returns the proxy currently attached to this proxy instance ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getRemovedRecords">
            <summary>
            Returns any records that have been removed from the store but not yet destroyed on the proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getUpdatedRecords">
            <summary>
            Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.initSortable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.isLoading">
            <summary>
            Returns true if the Store is currently performing a load operation ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.load(System.Object)">
            <summary>
            Loads the Store using its configured proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.removeAll">
            <summary>
            Removes all records from the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.setProxy(System.Object)">
            <summary>
            Sets the Store's Proxy by string, config object or Proxy instance ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.sort(System.Object,SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Sorts the data in the Store by one or more of its properties. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.sync">
            <summary>
            Synchronizes the Store with its Proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.batchUpdateMode">
            <summary>
            Sets the updating behavior based on batch synchronization. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.defaultProxyType">
            <summary>
            The string type of the Proxy to create if none is specified. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.filterOnLoad">
            <summary>
            If true, any filters attached to this Store will be run after loading data, before the datachanged event is fired. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.isDestroyed">
            <summary>
            True if the Store has already been destroyed via destroyStore. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.isSortable">
            <summary>
            Flag denoting that this object is sortable. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.sortOnLoad">
            <summary>
            If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired. ...
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.getNodeById(System.Object)">
            <summary>
            Returns the record node by id ...
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.getRootNode">
            <summary>
            Returns the root node for this tree. ...
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.load(System.Object)">
            <summary>
            Loads the Store using its configured proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.setRootNode(System.Object)">
            <summary>
            Sets the root node for this store. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStore.fields">
            <summary>
            If we have no fields declare for the store, add some defaults. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.autoLoad">
            <summary>
            If data is not specified, and if autoLoad is true or an Object, this store's load method
            is automatically called afte...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.autoSync">
            <summary>
            True to automatically sync the Store with its Proxy after every edit to one of its Records. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.fields">
            <summary>
            This may be used in place of specifying a model configuration. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.proxy">
            <summary>
            The Proxy to use for this Store. ...
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.storeId">
            <summary>
            Optional unique identifier for this store. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.clearOnLoad">
            <summary>
            Remove previously existing child nodes before loading. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.defaultRootId">
            <summary>
            The default root id. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.folderSort">
            <summary>
            Set to true to automatically prepend a leaf sorter. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.nodeParam">
            <summary>
            The name of the parameter sent to the server which contains the identifier of the node. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.root">
            <summary>
            The root node for this store. ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.add">
            <summary>
            Fired when a Model instance has been added to this Store ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.beforeload">
            <summary>
            Event description ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.beforesync">
            <summary>
            Called before a call to sync is executed. ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.clear">
            <summary>
            Fired after the removeAll method is called. ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.datachanged">
            <summary>
            Fires whenever the records in the Store have changed in some way - this could include adding or removing records,
            or ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.load">
            <summary>
            Fires whenever the store reads data from a remote data source. ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.remove">
            <summary>
            Fired when a Model instance has been removed from this Store ...
            </summary>
        </member>
        <member name="F:Ext.data.AbstractStoreEvents.update">
            <summary>
            Fires when a Record has been updated ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.append">
            <summary>
            Fires when a new child node is appended to a node in this store's tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforeappend">
            <summary>
            Fires before a new child is appended to a node in this store's tree, return false to cancel the append. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforecollapse">
            <summary>
            Fires before this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforeexpand">
            <summary>
            Fires before this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforeinsert">
            <summary>
            Fires before a new child is inserted in a node in this store's tree, return false to cancel the insert. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforemove">
            <summary>
            Fires before a node is moved to a new location in the store's tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.beforeremove">
            <summary>
            Fires before a child is removed from a node in this store's tree, return false to cancel the remove. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.collapse">
            <summary>
            Fires when this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.expand">
            <summary>
            Fires when this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.insert">
            <summary>
            Fires when a new child node is inserted in a node in this store's tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.move">
            <summary>
            Fires when a node is moved to a new location in the store's tree ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.remove">
            <summary>
            Fires when a child node is removed from a node in this store's tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.rootchange">
            <summary>
            Fires when the root node on this TreeStore is changed. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeStoreEvents.sort">
            <summary>
            Fires when this TreeStore is sorted. ...
            </summary>
        </member>
        <member name="T:Ext.data.Model">
            <summary>
            A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
            Cars, or any other real-world object that we want to model in the system. Models are registered via the model manager,
            and are used by stores, which are in turn used by many of the data-bound components in Ext. Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;name&#39;,  type: &#39;string&#39;},
            {name: &#39;age&#39;,   type: &#39;int&#39;},
            {name: &#39;phone&#39;, type: &#39;string&#39;},
            {name: &#39;alive&#39;, type: &#39;boolean&#39;, defaultValue: true}
            ],
            changeName: function() {
            var oldName = this.get(&#39;name&#39;),
            newName = oldName + &quot; The Barbarian&quot;;
            this.set(&#39;name&#39;, newName);
            }
            });
            The fields array is turned into a MixedCollection automatically by the ModelManager, and all
            other functions and properties are copied to the new Model&#39;s prototype. Now we can create instances of our User model and call any model logic we defined: var user = Ext.ModelManager.create({
            name : &#39;Conan&#39;,
            age  : 24,
            phone: &#39;555-555-5555&#39;
            }, &#39;User&#39;);
            user.changeName();
            user.get(&#39;name&#39;); //returns &quot;Conan The Barbarian&quot;
            Validations Models have built-in support for validations, which are executed against the validator functions in
            Ext.data.validations (see all validation functions). Validations are easy to add to models: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;name&#39;,     type: &#39;string&#39;},
            {name: &#39;age&#39;,      type: &#39;int&#39;},
            {name: &#39;phone&#39;,    type: &#39;string&#39;},
            {name: &#39;gender&#39;,   type: &#39;string&#39;},
            {name: &#39;username&#39;, type: &#39;string&#39;},
            {name: &#39;alive&#39;,    type: &#39;boolean&#39;, defaultValue: true}
            ],
            validations: [
            {type: &#39;presence&#39;,  field: &#39;age&#39;},
            {type: &#39;length&#39;,    field: &#39;name&#39;,     min: 2},
            {type: &#39;inclusion&#39;, field: &#39;gender&#39;,   list: [&#39;Male&#39;, &#39;Female&#39;]},
            {type: &#39;exclusion&#39;, field: &#39;username&#39;, list: [&#39;Admin&#39;, &#39;Operator&#39;]},
            {type: &#39;format&#39;,    field: &#39;username&#39;, matcher: /([a-z]+)[0-9]{2,3}/}
            ]
            });
            The validations can be run by simply calling the validate function, which returns a Ext.data.Errors
            object: var instance = Ext.ModelManager.create({
            name: &#39;Ed&#39;,
            gender: &#39;Male&#39;,
            username: &#39;edspencer&#39;
            }, &#39;User&#39;);
            var errors = instance.validate();
            Associations Models can have associations with other Models via belongsTo and
            hasMany associations. For example, let&#39;s say we&#39;re writing a blog administration
            application which deals with Users, Posts and Comments. We can express the relationships between these models like this: Ext.define(&#39;Post&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;user_id&#39;],
            belongsTo: &#39;User&#39;,
            hasMany  : {model: &#39;Comment&#39;, name: &#39;comments&#39;}
            });
            Ext.define(&#39;Comment&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;user_id&#39;, &#39;post_id&#39;],
            belongsTo: &#39;Post&#39;
            });
            Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;],
            hasMany: [
            &#39;Post&#39;,
            {model: &#39;Comment&#39;, name: &#39;comments&#39;}
            ]
            });
            See the docs for Ext.data.BelongsToAssociation and Ext.data.HasManyAssociation for details on the usage
            and configuration of associations. Note that associations can also be specified like this: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;],
            associations: [
            {type: &#39;hasMany&#39;, model: &#39;Post&#39;,    name: &#39;posts&#39;},
            {type: &#39;hasMany&#39;, model: &#39;Comment&#39;, name: &#39;comments&#39;}
            ]
            });
            Using a Proxy Models are great for representing types of data and relationships, but sooner or later we&#39;re going to want to
            load or save that data somewhere. All loading and saving of data is handled via a Proxy,
            which can be set directly on the Model: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
            proxy: {
            type: &#39;rest&#39;,
            url : &#39;/users&#39;
            }
            });
            Here we&#39;ve set up a Rest Proxy, which knows how to load and save data to and from a
            RESTful backend. Let&#39;s see how this works: var user = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;, email: &#39;ed@sencha.com&#39;}, &#39;User&#39;);
            user.save(); //POST /users
            Calling save on the new Model instance tells the configured RestProxy that we wish to persist this
            Model&#39;s data onto our server. RestProxy figures out that this Model hasn&#39;t been saved before because it doesn&#39;t
            have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
            (/users). We configure any Proxy on any Model and always follow this API - see Ext.data.proxy.Proxy for a full
            list. Loading data via the Proxy is equally easy: //get a reference to the User model class
            var User = Ext.ModelManager.getModel(&#39;User&#39;);
            //Uses the configured RestProxy to make a GET request to /users/123
            User.load(123, {
            success: function(user) {
            console.log(user.getId()); //logs 123
            }
            });
            Models can also be updated and destroyed easily: //the user Model we loaded in the last snippet:
            user.set(&#39;name&#39;, &#39;Edward Spencer&#39;);
            //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
            user.save({
            success: function() {
            console.log(&#39;The User was updated&#39;);
            }
            });
            //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
            user.destroy({
            success: function() {
            console.log(&#39;The User was destroyed!&#39;);
            }
            });
            Usage in Stores It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
            by creating a Store: var store = new Ext.data.Store({
            model: &#39;User&#39;
            });
            //uses the Proxy we set up on Model to load the Store data
            store.load();
            A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
            a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
            Store docs for more information on Stores.
            </summary>
        </member>
        <member name="M:Ext.data.Model.#ctor(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.beginEdit">
            <summary>
            Begin an edit. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.cancelEdit">
            <summary>
            Cancels all changes made in the current edit operation. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.commit(System.Boolean)">
            <summary>
            Usually called by the Ext.data.Store which owns the model instance. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.copy(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a copy (clone) of this Model instance. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.destroy(System.Object)">
            <summary>
            Destroys the model using the configured proxy ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.endEdit(System.Boolean)">
            <summary>
            End an edit. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.Model.get(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the value of the given field ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.getAssociatedData">
            <summary>
            Gets all of the data from this Models loaded associations. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.getChanges">
            <summary>
            Gets a hash of only the fields that have been modified since this Model was created or commited. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.getId">
            <summary>
            Returns the unique ID allocated to this model instance as defined by idProperty ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.getProxy">
            <summary>
            Returns the configured Proxy for this Model ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.isModified(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the passed field name has been modified
            since the load or last commit. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.isValid">
            <summary>
            Checks if the model is valid. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.join(Ext.data.Store)">
            <summary>
            Tells this model instance that it has been added to a store ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.reject(System.Boolean)">
            <summary>
            Usually called by the Ext.data.Store to which this model instance has been joined. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.save(System.Object)">
            <summary>
            Saves the model instance using the configured proxy ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.set(System.Object,System.Object)">
            <summary>
            Sets the given field to the given value, marks the instance as dirty ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.setDirty">
            <summary>
            Marks this Record as dirty. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.setId(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the model instance's id field to the given id ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.unjoin">
            <summary>
            Tells this model instance that it has been removed from the store ...
            </summary>
        </member>
        <member name="M:Ext.data.Model.validate">
            <summary>
            Validates the current data against all of its configured validations and returns an
            Errors object ...
            </summary>
        </member>
        <member name="P:Ext.data.Model.defaultProxyType">
            <summary>
            The string type of the default Model Proxy. ...
            </summary>
        </member>
        <member name="P:Ext.data.Model.editing">
            <summary>
            Internal flag used to track whether or not the model instance is currently being edited. ...
            </summary>
        </member>
        <member name="P:Ext.data.Model.phantom">
            <summary>
            true when the record does not yet exist in a server-side database (see
            setDirty). ...
            </summary>
        </member>
        <member name="P:Ext.data.ModelConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.data.ModelConfig.persistenceProperty">
            <summary>
            The property on this Persistable object that its data is saved to. ...
            </summary>
        </member>
        <member name="T:Ext.container.ButtonGroup">
            <summary>
            Provides a container for arranging a group of related Buttons in a tabular manner. Example usage:
            Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Panel with ButtonGroup&#39;,
            width: 300,
            height:200,
            renderTo: document.body,
            html: &#39;HTML Panel Content&#39;,
            tbar: [{
            xtype: &#39;buttongroup&#39;,
            columns: 3,
            title: &#39;Clipboard&#39;,
            items: [{
            text: &#39;Paste&#39;,
            scale: &#39;large&#39;,
            rowspan: 3,
            iconCls: &#39;add&#39;,
            iconAlign: &#39;top&#39;,
            cls: &#39;x-btn-as-arrow&#39;
            },{
            xtype:&#39;splitbutton&#39;,
            text: &#39;Menu Button&#39;,
            scale: &#39;large&#39;,
            rowspan: 3,
            iconCls: &#39;add&#39;,
            iconAlign: &#39;top&#39;,
            arrowAlign:&#39;bottom&#39;,
            menu: [{text: &#39;Menu Item 1&#39;}]
            },{
            xtype:&#39;splitbutton&#39;, text: &#39;Cut&#39;, iconCls: &#39;add16&#39;, menu: [{text: &#39;Cut Menu Item&#39;}]
            },{
            text: &#39;Copy&#39;, iconCls: &#39;add16&#39;
            },{
            text: &#39;Format&#39;, iconCls: &#39;add16&#39;
            }]
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.container.ButtonGroupConfig.baseCls">
            <summary>
            Defaults to 'x-btn-group'. ...
            </summary>
        </member>
        <member name="P:Ext.container.ButtonGroupConfig.columns">
            <summary>
            The columns configuration property passed to the
            configured layout manager. ...
            </summary>
        </member>
        <member name="P:Ext.container.ButtonGroupConfig.frame">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.container.ButtonGroupConfig.layout">
            <summary>
            Defaults to 'table'. ...
            </summary>
        </member>
        <member name="T:Ext.AbstractManager">
            <summary>
            Base Manager class
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.create(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Creates and returns an instance of whatever this manager manages, based on the supplied type and config object ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.each(System.Object,System.Object)">
            <summary>
            Executes the specified function once for each item in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.get(SharpKit.JavaScript.JsString)">
            <summary>
            Returns an item by id. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.getCount">
            <summary>
            Gets the number of items in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.isRegistered(SharpKit.JavaScript.JsString)">
            <summary>
            Checks if an item type is registered. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.onAvailable(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Registers a function that will be called when an item with the specified id is added to the manager. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.register(System.Object)">
            <summary>
            Registers an item to be managed ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.registerType(SharpKit.JavaScript.JsString,Ext.Unknown.Constructor)">
            <summary>
            Registers a new item constructor, keyed by a type key. ...
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.unregister(System.Object)">
            <summary>
            Unregisters an item by removing it from this manager ...
            </summary>
        </member>
        <member name="T:Ext.view.TableChunker">
            <summary>
            Produces optimized XTemplates for chunks of tables to be
            used in grids, trees and other table based widgets.
            </summary>
        </member>
        <member name="T:Ext.util.Region">
            <summary>
            This class represents a rectangular region in X,Y space, and performs geometric
            transformations or tests upon the region. This class may be used to compare the document regions occupied by elements.
            </summary>
        </member>
        <member name="M:Ext.util.Region.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a region from the bounding sides. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.adjust(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Modifies the current region to be adjusted by offsets. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.constrainTo(Ext.util.Region)">
            <summary>
            Modifies the current region to be constrained to the targetRegion. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.contains(Ext.util.Region)">
            <summary>
            Checks if this region completely contains the region that is passed in. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.copy">
            <summary>
            Create a copy of this Region. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.copyFrom(Ext.util.Region)">
            <summary>
            Copy the values of another Region to this Region ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.equals(Ext.util.Region)">
            <summary>
            Check whether this region is equivalent to the given region ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffset(SharpKit.JavaScript.JsString,Ext.util.Point)">
            <summary>
            Get the offset amount of a point outside the region ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffsetX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the offset amount on the x-axis ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffsetY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the offset amount on the y-axis ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.intersect(Ext.util.Region)">
            <summary>
            Checks if this region intersects the region passed in. ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBound(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Check whether the point / offset is out of bound ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBoundX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Check whether the offset is out of bound in the x-axis ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBoundY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Check whether the offset is out of bound in the y-axis ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.round">
            <summary>
            Round all the properties of this region ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.translateBy(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translate this region by the given offset amount ...
            </summary>
        </member>
        <member name="M:Ext.util.Region.union(Ext.util.Region)">
            <summary>
            Returns the smallest region that contains the current AND targetRegion. ...
            </summary>
        </member>
        <member name="T:Ext.util.Inflector">
            <summary>
            General purpose inflector class that pluralizes, singularizes and
            ordinalizes words. Sample usage: //turning singular words into plurals
            Ext.util.Inflector.pluralize(&#39;word&#39;); //&#39;words&#39;
            Ext.util.Inflector.pluralize(&#39;person&#39;); //&#39;people&#39;
            Ext.util.Inflector.pluralize(&#39;sheep&#39;); //&#39;sheep&#39;
            //turning plurals into singulars
            Ext.util.Inflector.singularize(&#39;words&#39;); //&#39;word&#39;
            Ext.util.Inflector.singularize(&#39;people&#39;); //&#39;person&#39;
            Ext.util.Inflector.singularize(&#39;sheep&#39;); //&#39;sheep&#39;
            //ordinalizing numbers
            Ext.util.Inflector.ordinalize(11); //&quot;11th&quot;
            Ext.util.Inflector.ordinalize(21); //&quot;21th&quot;
            Ext.util.Inflector.ordinalize(1043); //&quot;1043rd&quot;
            Customization The Inflector comes with a default set of US English pluralization rules. These can be augmented with additional
            rules if the default rules do not meet your application&#39;s requirements, or swapped out entirely for other languages.
            Here is how we might add a rule that pluralizes &quot;ox&quot; to &quot;oxen&quot;: Ext.util.Inflector.plural(/^(ox)$/i, &quot;$1en&quot;);
            Each rule consists of two items - a regular expression that matches one or more rules, and a replacement string.
            In this case, the regular expression will only match the string &quot;ox&quot;, and will replace that match with &quot;oxen&quot;.
            Here&#39;s how we could add the inverse rule: Ext.util.Inflector.singular(/^(ox)en$/i, &quot;$1&quot;);
            Note that the ox/oxen rules are present by default.
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.classify(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the correct Model name for a given string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.clearPlurals">
            <summary>
            Removes all registered pluralization rules ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.clearSingulars">
            <summary>
            Removes all registered singularization rules ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.isTransnumeral(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the given word is transnumeral (the word is its own singular and plural form - e.g. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.ordinalize(SharpKit.JavaScript.JsNumber)">
            <summary>
            Ordinalizes a given number by adding a prefix such as 'st', 'nd', 'rd' or 'th' based on the last digit of the
            number. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.plural(SharpKit.JavaScript.JsRegExp,SharpKit.JavaScript.JsString)">
            <summary>
            Adds a new pluralization rule to the Inflector. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.pluralize(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the pluralized form of a word (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.singular(SharpKit.JavaScript.JsRegExp,SharpKit.JavaScript.JsString)">
            <summary>
            Adds a new singularization rule to the Inflector. ...
            </summary>
        </member>
        <member name="M:Ext.util.Inflector.singularize(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the singularized form of a word (e.g. ...
            </summary>
        </member>
        <member name="T:Ext.util.Format">
            <summary>
            This class is a centralized place for formatting functions inside the library. It includes
            functions to format various different types of data, such as text, dates and numeric values. Localization
            This class contains several options for localization. These can be set once the library has loaded,
            all calls to the functions from that point will use the locale settings that were specified.
            Options include:
            - thousandSeparator
            - decimalSeparator
            - currenyPrecision
            - currencySign
            - currencyAtEnd
            This class also uses the default date format defined here: Ext.Date.defaultFormat. Using with renderers
            There are two helper functions that return a new function that can be used in conjunction with
            grid renderers: columns: [{
            dataIndex: &#39;date&#39;,
            renderer: Ext.util.Format.dateRenderer(&#39;Y-m-d&#39;)
            }, {
            dataIndex: &#39;time&#39;,
            renderer: Ext.util.Format.numberRenderer(&#39;0.000&#39;)
            }]
            Functions that only take a single argument can also be passed directly: columns: [{
            dataIndex: &#39;cost&#39;,
            renderer: Ext.util.Format.usMoney
            }, {
            dataIndex: &#39;productCode&#39;,
            renderer: Ext.util.Format.uppercase
            }]
            Using with XTemplates
            XTemplates can also directly use Ext.util.Format functions: new Ext.XTemplate([
            &#39;Date: {startDate:date(&quot;Y-m-d&quot;)}&#39;,
            &#39;Cost: {cost:usMoney}&#39;
            ]);
            </summary>
        </member>
        <member name="M:Ext.util.Format.capitalize">
            <summary>
            Capitalize the given string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.currency(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Format a number as a currency ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.date(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Formats the passed date using the specified format pattern. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.dateRenderer(SharpKit.JavaScript.JsString)">
            <summary>
            Returns a date rendering function that can be reused to apply a date format multiple times efficiently ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.defaultValue(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Checks a reference and converts it to the default value if it's empty ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.ellipsis">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.escapeRegex(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for use in a regular expression ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.fileSize(System.Object)">
            <summary>
            Simple format for a file size (xxx bytes, xxx KB, xxx MB) ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.format">
            <summary>
            Formats to a string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.htmlDecode">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') from their HTML character equivalents. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.htmlEncode">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') to their HTML character equivalents for literal display in web pages. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.leftPad">
            <summary>
            Adds left padding to a string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.lowercase(SharpKit.JavaScript.JsString)">
            <summary>
            Converts a string to all lower case letters ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.math">
            <summary>
            It does simple math for use in a template, for example:
            var tpl = new Ext.Template('{value} * 10 = {value:math("* 10...
            </summary>
        </member>
        <member name="M:Ext.util.Format.nl2br(SharpKit.JavaScript.JsString)">
            <summary>
            Converts newline characters to the HTML tag &lt;br/> ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.number(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Formats the passed number according to the passed format string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.numberRenderer(SharpKit.JavaScript.JsString)">
            <summary>
            Returns a number rendering function that can be reused to apply a number format multiple times efficiently ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.parseBox(System.Object)">
            <summary>
            Parses a number or string representing margin sizes into an object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.plural(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Selectively do a plural form of a word based on a numeric value. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.round(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Rounds the passed number to the required decimal precision. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.stripScripts(System.Object)">
            <summary>
            Strips all script tags ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.stripTags(System.Object)">
            <summary>
            Strips all HTML tags ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.substr(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a substring from within an original string ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.trim">
            <summary>
            Trims any whitespace from either side of a string. ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.undef(System.Object)">
            <summary>
            Checks a reference and converts it to empty string if it is undefined ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.uppercase(SharpKit.JavaScript.JsString)">
            <summary>
            Converts a string to all upper case letters ...
            </summary>
        </member>
        <member name="M:Ext.util.Format.usMoney(System.Object)">
            <summary>
            Format a number as US currency ...
            </summary>
        </member>
        <member name="P:Ext.util.Format.currencyAtEnd">
            <summary>
            This may be set to true to make the currency function
            append the currency sign to the formatted value. ...
            </summary>
        </member>
        <member name="P:Ext.util.Format.currencyPrecision">
            <summary>
            The number of decimal places that the currency function displays. ...
            </summary>
        </member>
        <member name="P:Ext.util.Format.currencySign">
            <summary>
            The currency sign that the currency function displays. ...
            </summary>
        </member>
        <member name="P:Ext.util.Format.decimalSeparator">
            <summary>
            The character that the number function uses as a decimal point. ...
            </summary>
        </member>
        <member name="P:Ext.util.Format.thousandSeparator">
            <summary>
            The character that the number function uses as a thousand separator. ...
            </summary>
        </member>
        <member name="T:Ext.selection.RowModel">
            <summary>
            Implement row based navigation via keyboard. Must synchronize across grid sections
            </summary>
        </member>
        <member name="T:Ext.selection.Model">
            <summary>
            Tracks what records are currently selected in a databound widget. This is an abstract class and is not meant to be directly used. DataBound UI widgets such as GridPanel, TreePanel, and ListView
            should subclass AbstractStoreSelectionModel and provide a way
            to binding to the component. The abstract methods onSelectChange and onLastFocusChanged should
            be implemented in these subclasses to update the UI widget.
            </summary>
        </member>
        <member name="M:Ext.selection.Model.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.deselect(System.Object,System.Boolean)">
            <summary>
            Deselects a record instance by record instance or index. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.deselectAll(System.Boolean)">
            <summary>
            Deselect all records in the view. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.deselectAll">
            <summary>
            Deselect all records in the view. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.getCount">
            <summary>
            Gets the count of selected records. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.getLastSelected">
            <summary>
            Returns the last selected record. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.getSelection">
            <summary>
            Returns an array of the currently selected records. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.getSelectionMode">
            <summary>
            Returns the current selectionMode. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.hasSelection">
            <summary>
            Returns true if there are any a selected records. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.isFocused(System.Object)">
            <summary>
            Determines if this record is currently focused. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.isLocked">
            <summary>
            Returns true if the selections are locked. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.isSelected(System.Object)">
            <summary>
            Returns true if the specified row is selected. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.select(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Selects a record instance by record instance or index. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.selectAll(System.Boolean)">
            <summary>
            Select all records in the view. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.setLastFocused(Ext.data.Model,System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.setLocked(System.Boolean)">
            <summary>
            Locks the current selection and disables any changes from
            happening to the selection. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.setSelectionMode(System.Object)">
            <summary>
            Sets the current selectionMode. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.selection.Model.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.selection.ModelConfig.allowDeselect">
            <summary>
            Allow users to deselect a record in a DataView, List or Grid. ...
            </summary>
        </member>
        <member name="P:Ext.selection.ModelConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.selection.ModelConfig.mode">
            <summary>
            Modes of selection. ...
            </summary>
        </member>
        <member name="P:Ext.selection.RowModelConfig.enableKeyNav">
            <summary>
            Turns on/off keyboard navigation within the grid. ...
            </summary>
        </member>
        <member name="F:Ext.selection.ModelEvents.selectionchange">
            <summary>
            Fired after a selection change has occurred ...
            </summary>
        </member>
        <member name="F:Ext.selection.RowModelEvents.beforedeselect">
            <summary>
            Fired before a record is deselected. ...
            </summary>
        </member>
        <member name="F:Ext.selection.RowModelEvents.beforeselect">
            <summary>
            Fired before a record is selected. ...
            </summary>
        </member>
        <member name="F:Ext.selection.RowModelEvents.deselect">
            <summary>
            Fired after a record is deselected ...
            </summary>
        </member>
        <member name="F:Ext.selection.RowModelEvents.select">
            <summary>
            Fired after a record is selected ...
            </summary>
        </member>
        <member name="T:Ext.selection.CheckboxModel">
            <summary>
            A selection model that renders a column of checkboxes that can be toggled to
            select or deselect rows. The default mode for this selection model is MULTI. The selection model will inject a header for the checkboxes in the first view
            and according to the &#39;injectCheckbox&#39; configuration.
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.getHeaderConfig">
            <summary>
            Retrieve a configuration to be used in a HeaderContainer. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.onHeaderClick(System.Object,System.Object,System.Object)">
            <summary>
            Toggle between selecting all and deselecting all when clicking on
            a checkbox header. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.renderer(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Generates the HTML to be rendered in the injected checkbox column for each row. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CheckboxModel.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.selection.CheckboxModelConfig.injectCheckbox">
            <summary>
            Instructs the SelectionModel whether or not to inject the checkbox header
            automatically or not. ...
            </summary>
        </member>
        <member name="P:Ext.selection.CheckboxModelConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.selection.CheckboxModelConfig.mode">
            <summary>
            Modes of selection. ...
            </summary>
        </member>
        <member name="T:Ext.panel.Proxy">
            <summary>
            A custom drag proxy implementation specific to Ext.panel.Panels. This class
            is primarily used internally for the Panel&#39;s drag drop implementation, and
            should never need to be created directly.
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.#ctor(Ext.panel.Panel,System.Object)">
            <summary>
            Creates new panel proxy. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.getEl">
            <summary>
            Gets the proxy's element ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.getGhost">
            <summary>
            Gets the proxy's ghost Panel ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.getProxy">
            <summary>
            Gets the proxy element. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.hide">
            <summary>
            Hides the proxy ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.moveProxy(Ext.Unknown.HTMLElement,Ext.Unknown.HTMLElement)">
            <summary>
            Moves the proxy to a different position in the DOM. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Proxy.show">
            <summary>
            Shows the proxy ...
            </summary>
        </member>
        <member name="P:Ext.panel.ProxyConfig.insertProxy">
            <summary>
            True to insert a placeholder proxy element
            while dragging the panel, false to drag with no proxy (defaults to true). ...
            </summary>
        </member>
        <member name="T:Ext.Object">
            <summary>
            A collection of useful static methods to deal with objects
            </summary>
        </member>
        <member name="M:Ext.Object.each(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Iterate through an object and invoke the given callback function for each iteration. ...
            </summary>
        </member>
        <member name="M:Ext.Object.fromQueryString(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Converts a query string back into an object. ...
            </summary>
        </member>
        <member name="M:Ext.Object.getKey(System.Object,System.Object)">
            <summary>
            Returns the first matching key corresponding to the given value. ...
            </summary>
        </member>
        <member name="M:Ext.Object.getKeys(System.Object)">
            <summary>
            Gets all keys of the given object as an array. ...
            </summary>
        </member>
        <member name="M:Ext.Object.getSize(System.Object)">
            <summary>
            Gets the total number of this object's own properties
            var size = Ext.Object.getSize({
            name: 'Jacky',
            loves: ...
            </summary>
        </member>
        <member name="M:Ext.Object.getValues(System.Object)">
            <summary>
            Gets all values of the given object as an array. ...
            </summary>
        </member>
        <member name="M:Ext.Object.merge(System.Object,System.Object,System.Object)">
            <summary>
            Merges any number of objects recursively without referencing them or their children. ...
            </summary>
        </member>
        <member name="M:Ext.Object.toQueryObjects(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Convert a name - value pair to an array of objects with support for nested structures; useful to construct
            query stri...
            </summary>
        </member>
        <member name="M:Ext.Object.toQueryString(System.Object,System.Boolean)">
            <summary>
            Takes an object and converts it to an encoded query string
            Non-recursive:
            Ext.Object.toQueryString({foo: 1, bar:...
            </summary>
        </member>
        <member name="T:Ext.ModelManager">
            <summary>
            The ModelManager keeps track of all Ext.data.Model types defined in your application. Creating Model Instances
            Model instances can be created by using the create function. It is also possible to do
            this by using the Model type directly. The following snippets are equivalent: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;first&#39;, &#39;last&#39;]
            });
            // method 1, create through the manager
            Ext.ModelManager.create({
            first: &#39;Ed&#39;,
            last: &#39;Spencer&#39;
            }, &#39;User&#39;);
            // method 2, create on the type directly
            new User({
            first: &#39;Ed&#39;,
            last: &#39;Spencer&#39;
            });
            Accessing Model Types
            A reference to a Model type can be obtained by using the getModel function. Since models types
            are normal classes, you can access the type directly. The following snippets are equivalent: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;first&#39;, &#39;last&#39;]
            });
            // method 1, access model type through the manager
            var UserType = Ext.ModelManager.getModel(&#39;User&#39;);
            // method 2, reference the type directly
            var UserType = User;
            </summary>
        </member>
        <member name="M:Ext.ModelManager.create(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a new instance of a Model using the given data. ...
            </summary>
        </member>
        <member name="M:Ext.ModelManager.getModel(System.Object)">
            <summary>
            Returns the Ext.data.Model for a given model name ...
            </summary>
        </member>
        <member name="T:Ext.menu.ColorPicker">
            <summary>
            A menu containing a Ext.picker.Color Component. Notes:  Although not listed here, the constructor for this class
            accepts all of the configuration options of Ext.picker.Color. If subclassing ColorMenu, any configuration options for the ColorPicker must be
            applied to the initialConfig property of the ColorMenu.
            Applying ColorPicker configuration settings to
            this will not affect the ColorPicker&#39;s configuration.   Example Usage var colorPicker = Ext.create(&#39;Ext.menu.ColorPicker&#39;, {
            value: &#39;000000&#39;
            });
            Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 90,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;choose a color&#39;,
            menu: colorPicker
            },{
            iconCls: &#39;add16&#39;,
            text: &#39;icon item&#39;
            },{
            text: &#39;regular item&#39;
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.menu.Menu">
            <summary>
            A menu object. This is the container to which you may add menu items. Menus may contain either menu items, or general Components.
            Menus may also contain docked items because it extends Ext.panel.Panel. To make a contained general Component line up with other menu items,
            specify iconCls: &#39;no-icon&#39; or indent: true.
            This reserves a space for an icon, and indents the Component in line with the other menu items.
            See Ext.form.field.ComboBox.getListParent for an example. By default, Menus are absolutely positioned, floating Components. By configuring a Menu with floating:false,
            a Menu may be used as a child of a Container.  Example Usage Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 100,
            margin: &#39;0 0 10 0&#39;,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;regular item 1&#39;
            },{
            text: &#39;regular item 2&#39;
            },{
            text: &#39;regular item 3&#39;
            }]
            });
            Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 100,
            plain: true,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;plain item 1&#39;
            },{
            text: &#39;plain item 2&#39;
            },{
            text: &#39;plain item 3&#39;
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.canActivateItem(System.Object)">
            <summary>
            Returns whether a menu item can be activated or not. ...
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.deactivateActiveItem">
            <summary>
            Deactivates the current active item on the menu, if one exists. ...
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.showBy(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Shows the floating menu by the specified Component or Element. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.allowOtherMenus">
            <summary>
            True to allow multiple menus to be displayed at the same time. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.defaultAlign">
            <summary>
            The default Ext.core.Element#getAlignToXY anchor position value for this menu
            relative to its element of origin. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.floating">
            <summary>
            A Menu configured as floating: true (the default) will be rendered as an absolutely positioned,
            floating Component. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.hidden">
            <summary>
            True to initially render the Menu as hidden, requiring to be shown manually. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.ignoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu)
            so that the submenu is not ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.minWidth">
            <summary>
            The minimum width of the Menu. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.plain">
            <summary>
            True to remove the incised line down the left side of the menu and to not
            indent general Component items. ...
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.showSeparator">
            <summary>
            True to show the icon separator. ...
            </summary>
        </member>
        <member name="P:Ext.menu.ColorPickerConfig.pickerId">
            <summary>
            An id to assign to the underlying color picker. ...
            </summary>
        </member>
        <member name="F:Ext.menu.MenuEvents.click">
            <summary>
            Fires when this menu is clicked ...
            </summary>
        </member>
        <member name="F:Ext.menu.MenuEvents.mouseenter">
            <summary>
            Fires when the mouse enters this menu ...
            </summary>
        </member>
        <member name="F:Ext.menu.MenuEvents.mouseleave">
            <summary>
            Fires when the mouse leaves this menu ...
            </summary>
        </member>
        <member name="F:Ext.menu.MenuEvents.mouseover">
            <summary>
            Fires when the mouse is hovering over this menu ...
            </summary>
        </member>
        <member name="F:Ext.menu.ColorPickerEvents.select">
            <summary>
            Fires when a date is selected from the Ext.picker.Color ...
            </summary>
        </member>
        <member name="T:Ext.LoadMask">
            <summary>
            A simple utility class for generically masking elements while loading data.  If the store
            config option is specified, the masking will be automatically synchronized with the store&#39;s loading
            process and the mask element will be cached for reuse. Example usage: // Basic mask:
            var myMask = new Ext.LoadMask(Ext.getBody(), {msg:&quot;Please wait...&quot;});
            myMask.show();
            </summary>
        </member>
        <member name="M:Ext.LoadMask.#ctor(System.Object,System.Object)">
            <summary>
            Creates new LoadMask. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.bindStore(Ext.data.Store,System.Object)">
            <summary>
            Changes the data store bound to this LoadMask. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.disable">
            <summary>
            Disables the mask to prevent it from being displayed ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.enable">
            <summary>
            Enables the mask so that it can be displayed ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.hide">
            <summary>
            Hide this LoadMask. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.isDisabled">
            <summary>
            Method to determine whether this LoadMask is currently disabled. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.show">
            <summary>
            Show this LoadMask over the configured Element. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.LoadMask.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.LoadMask.disabled">
            <summary>
            Read-only. ...
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.store">
            <summary>
            Optional Store to which the mask is bound. ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Card">
            <summary>
            This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be
            visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:&#39;card&#39; Ext.container.Container.layout config,
            and should generally not need to be created directly via the new keyword. The CardLayout&#39;s focal method is setActiveItem.  Since only one panel is displayed at a time,
            the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
            so that functionality must be provided by the developer. In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
            to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
            common navigation routine.  Note that other uses of a CardLayout (like a tab control) would require a
            completely different implementation.  For serious implementations, a better approach would be to extend
            CardLayout to provide the custom functionality needed.  Example usage: var navigate = function(panel, direction){
            // This routine could contain business logic required to manage the navigation steps.
            // It would call setActiveItem as needed, manage navigation button state, handle any
            // branching logic that might be required, handle alternate actions like cancellation
            // or finalization, etc.  A complete wizard implementation could get pretty
            // sophisticated depending on the complexity required, and should probably be
            // done as a subclass of CardLayout in a real-world implementation.
            var layout = panel.getLayout();
            layout[direction]();
            Ext.getCmp(&#39;move-prev&#39;).setDisabled(!layout.getPrev());
            Ext.getCmp(&#39;move-next&#39;).setDisabled(!layout.getNext());
            };
            Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Example Wizard&#39;,
            width: 300,
            height: 200,
            layout: &#39;card&#39;,
            activeItem: 0, // make sure the active item is set on the container config!
            bodyStyle: &#39;padding:15px&#39;,
            defaults: {
            // applied to each contained panel
            border: false
            },
            // just an example of one possible navigation scheme, using buttons
            bbar: [
            {
            id: &#39;move-prev&#39;,
            text: &#39;Back&#39;,
            handler: function(btn) {
            navigate(btn.up(&quot;panel&quot;), &quot;prev&quot;);
            },
            disabled: true
            },
            &#39;-&amp;gt;&#39;, // greedy spacer so that the buttons are aligned to each side
            {
            id: &#39;move-next&#39;,
            text: &#39;Next&#39;,
            handler: function(btn) {
            navigate(btn.up(&quot;panel&quot;), &quot;next&quot;);
            }
            }
            ],
            // the panels (or &quot;cards&quot;) within the layout
            items: [{
            id: &#39;card-0&#39;,
            html: &#39;&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;&#39;
            },{
            id: &#39;card-1&#39;,
            html: &#39;&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;&#39;
            },{
            id: &#39;card-2&#39;,
            html: &#39;&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;&#39;
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.layout.container.AbstractCard">
            <summary>
            This layout manages multiple child Components, each is fit to the Container, where only a single child Component
            can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:&#39;card&#39; Ext.container.Container.layout config,
            and should generally not need to be created directly via the new keyword. The CardLayout&#39;s focal method is setActiveItem.  Since only one panel is displayed at a time,
            the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
            so that functionality must be provided by the developer. Containers that are configured with a card layout will have a method setActiveItem dynamically added to it. var p = new Ext.panel.Panel({
            fullscreen: true,
            layout: &#39;card&#39;,
            items: [{
            html: &#39;Card 1&#39;
            },{
            html: &#39;Card 2&#39;
            }]
            });
            p.setActiveItem(1);
            </summary>
        </member>
        <member name="T:Ext.layout.container.Fit">
            <summary>
            This is a base class for layouts that contain a single item that automatically expands to fill the layout&#39;s
            container.  This class is intended to be extended or created via the layout:&#39;fit&#39; Ext.container.Container.layout
            config, and should generally not need to be created directly via the new keyword. FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:&#39;fit&#39; on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.
            Example usage:     Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Fit Layout&#39;,
            width: 300,
            height: 150,
            layout:&#39;fit&#39;,
            items: {
            title: &#39;Inner Panel&#39;,
            html: &#39;This is the inner panel content&#39;,
            bodyPadding: 20,
            border: false
            },
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.layout.container.AbstractFit">
            <summary>
            This is a base class for layouts that contain a single item that automatically expands to fill the layout&#39;s
            container.  This class is intended to be extended or created via the layout:&#39;fit&#39; Ext.container.Container.layout
            config, and should generally not need to be created directly via the new keyword. FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:&#39;fit&#39; on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.  Example usage: var p = new Ext.panel.Panel({
            title: &#39;Fit Layout&#39;,
            layout:&#39;fit&#39;,
            items: {
            title: &#39;Inner Panel&#39;,
            html: &#39;&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;&#39;,
            border: false
            }
            });
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractCard.getActiveItem">
            <summary>
            Return the active (visible) component in the layout. ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractCard.getNext">
            <summary>
            Return the active (visible) component in the layout to the next card ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractCard.getPrev">
            <summary>
            Return the active (visible) component in the layout to the previous card ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractCard.next">
            <summary>
            Sets the active (visible) component in the layout to the next card ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.AbstractCard.prev">
            <summary>
            Sets the active (visible) component in the layout to the previous card ...
            </summary>
        </member>
        <member name="M:Ext.layout.container.Card.setActiveItem(System.Object)">
            <summary>
            Makes the given card active. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AbstractCardConfig.deferredRender">
            <summary>
            True to render each contained item at the time it becomes active, false to render all contained items
            as soon as the ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Accordion">
            <summary>
            This is a layout that manages multiple Panels in an expandable accordion style such that only
            one Panel can be expanded at any given time. Each Panel has built-in support for expanding and collapsing. Note: Only Ext.Panels and all subclasses of Ext.panel.Panel may be used in an accordion layout Container.  Example usage: Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Accordion Layout&#39;,
            width: 300,
            height: 300,
            layout:&#39;accordion&#39;,
            defaults: {
            // applied to each contained panel
            bodyStyle: &#39;padding:15px&#39;
            },
            layoutConfig: {
            // layout-specific configs go here
            titleCollapse: false,
            animate: true,
            activeOnTop: true
            },
            items: [{
            title: &#39;Panel 1&#39;,
            html: &#39;Panel content!&#39;
            },{
            title: &#39;Panel 2&#39;,
            html: &#39;Panel content!&#39;
            },{
            title: &#39;Panel 3&#39;,
            html: &#39;Panel content!&#39;
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.layout.container.VBox">
            <summary>
            A layout that arranges items vertically down a Container. This layout optionally divides available vertical
            space between child items containing a numeric flex configuration. This layout may also be used to set the widths of child items by configuring it with the align option.
            Example usage: Ext.create(&#39;Ext.Panel&#39;, {
            width: 500,
            height: 400,
            title: &quot;VBoxLayout Panel&quot;,
            layout: {
            type: &#39;vbox&#39;,
            align: &#39;center&#39;
            },
            renderTo: document.body,
            items: [{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel One&#39;,
            width: 250,
            flex: 2
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel Two&#39;,
            width: 250,
            flex: 4
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel Three&#39;,
            width: &#39;50%&#39;,
            flex: 4
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.layout.container.VBoxConfig.align">
            <summary>
            Controls how the child items of the container are aligned. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.activeOnTop">
            <summary>
            Not implemented in PR4. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.animate">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and
            close di...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.autoWidth">
            <summary>
            This config is ignored in ExtJS 4.x. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.collapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
            in the cont...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.fill">
            <summary>
            True to adjust the active item's height to fill the available space in the container, false to use the
            item's current...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.hideCollapseTool">
            <summary>
            True to hide the contained Panels' collapse/expand toggle buttons, false to display them (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.multi">
            <summary>
            Defaults to false. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.AccordionConfig.titleCollapse">
            <summary>
            Not implemented in PR2. ...
            </summary>
        </member>
        <member name="T:Ext.grid.column.Boolean">
            <summary>
            A Column definition class which renders boolean data fields.  See the xtype
            config option of Ext.grid.column.Column for more details.  Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;sampleStore&#39;,
            fields:[
            {name: &#39;framework&#39;, type: &#39;string&#39;},
            {name: &#39;rocks&#39;, type: &#39;boolean&#39;}
            ],
            data:{&#39;items&#39;:[
            {&quot;framework&quot;:&quot;Ext JS 4&quot;, &quot;rocks&quot;:true},
            {&quot;framework&quot;:&quot;Sencha Touch&quot;, &quot;rocks&quot;:true},
            {&quot;framework&quot;:&quot;Ext GWT&quot;, &quot;rocks&quot;:true},
            {&quot;framework&quot;:&quot;Other Guys&quot;, &quot;rocks&quot;:false}
            ]},
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;
            }
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Boolean Column Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;sampleStore&#39;),
            columns: [
            {text: &#39;Framework&#39;,  dataIndex: &#39;framework&#39;, flex: 1},
            {
            xtype: &#39;booleancolumn&#39;,
            text: &#39;Rocks&#39;,
            trueText: &#39;Yes&#39;,
            falseText: &#39;No&#39;,
            dataIndex: &#39;rocks&#39;}
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.grid.column.Column">
            <summary>
            This class specifies the definition for a column inside a Ext.grid.Panel. It encompasses
            both the grid header configuration as well as displaying data within the grid itself. If the
            columns configuration is specified, this column will become a column group and can
            container other columns inside. In general, this class will not be created directly, rather
            an array of column configurations will be passed to the grid:  Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;employeeStore&#39;,
            fields:[&#39;firstname&#39;, &#39;lastname&#39;, &#39;senority&#39;, &#39;dep&#39;, &#39;hired&#39;],
            data:[
            {firstname:&quot;Michael&quot;, lastname:&quot;Scott&quot;, senority:7, dep:&quot;Manangement&quot;, hired:&quot;01/10/2004&quot;},
            {firstname:&quot;Dwight&quot;, lastname:&quot;Schrute&quot;, senority:2, dep:&quot;Sales&quot;, hired:&quot;04/01/2004&quot;},
            {firstname:&quot;Jim&quot;, lastname:&quot;Halpert&quot;, senority:3, dep:&quot;Sales&quot;, hired:&quot;02/22/2006&quot;},
            {firstname:&quot;Kevin&quot;, lastname:&quot;Malone&quot;, senority:4, dep:&quot;Accounting&quot;, hired:&quot;06/10/2007&quot;},
            {firstname:&quot;Angela&quot;, lastname:&quot;Martin&quot;, senority:5, dep:&quot;Accounting&quot;, hired:&quot;10/21/2008&quot;}
            ]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Column Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;employeeStore&#39;),
            columns: [
            {text: &#39;First Name&#39;,  dataIndex:&#39;firstname&#39;},
            {text: &#39;Last Name&#39;,  dataIndex:&#39;lastname&#39;},
            {text: &#39;Hired Month&#39;,  dataIndex:&#39;hired&#39;, xtype:&#39;datecolumn&#39;, format:&#39;M&#39;},
            {text: &#39;Deparment (Yrs)&#39;, xtype:&#39;templatecolumn&#39;, tpl:&#39;{dep} ({senority})&#39;}
            ],
            width: 400,
            renderTo: Ext.getBody()
            });
            Convenience Subclasses There are several column subclasses that provide default rendering for various data types  Ext.grid.column.Action: Renders icons that can respond to click events inline Ext.grid.column.Boolean: Renders for boolean values Ext.grid.column.Date: Renders for date values Ext.grid.column.Number: Renders for numeric values Ext.grid.column.Template: Renders a value using an Ext.XTemplate using the record data  Setting Sizes The columns are laid out by a Ext.layout.container.HBox layout, so a column can either
            be given an explicit width value or a flex configuration. If no width is specified the grid will
            automatically the size the column to 100px. For column groups, the size is calculated by measuring
            the width of the child columns, so a width option should not be specified in that case. Header Options  text: Sets the header text for the column sortable: Specifies whether the column can be sorted by clicking the header or using the column menu hideable: Specifies whether the column can be hidden using the column menu menuDisabled: Disables the column header menu draggable: Specifies whether the column header can be reordered by dragging groupable: Specifies whether the grid can be grouped by the column dataIndex. See also Ext.grid.feature.Grouping  Data Options  dataIndex: The dataIndex is the field in the underlying Ext.data.Store to use as the value for the column. renderer: Allows the underlying store value to be transformed before being displayed in the grid
            </summary>
        </member>
        <member name="T:Ext.grid.header.Container">
            <summary>
            Container which holds headers and is docked at the top or bottom of a TablePanel.
            The HeaderContainer drives resizing/moving/hiding of columns within the TableView.
            As headers are hidden, moved or resized the headercontainer is responsible for
            triggering changes within the view.
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getColumnCount">
            <summary>
            Returns the number of grid columns descended from this HeaderContainer. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getColumnMenu(System.Object)">
            <summary>
            Returns an array of menu CheckItems corresponding to all immediate children of the passed Container which have been c...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getFullWidth(System.Object)">
            <summary>
            Gets the full width of all columns that are visible. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getGridColumns(System.Boolean)">
            <summary>
            Returns an array of all columns which map to Store fields. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getHeaderAtIndex(System.Object)">
            <summary>
            Get a leaf level header by index regardless of what the nesting
            structure is. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getHeaderIndex(System.Object)">
            <summary>
            Get the index of a leaf level header regardless of what the nesting
            structure is. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getMenuItems">
            <summary>
            Returns an array of menu items to be placed into the shared menu
            across all headers in this header container. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.getVisibleGridColumns(System.Boolean)">
            <summary>
            Returns an array of the visible columns in the grid. ...
            </summary>
        </member>
        <member name="M:Ext.grid.header.Container.prepareData(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Maps the record data to base it on the header id's. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.getEditor(System.Object,System.Object)">
            <summary>
            Retrieves the editing field for editing associated with this header. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.getIndex">
            <summary>
            Returns the true grid column index assiciated with this Column only if this column is a base level Column. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.getSortParam">
            <summary>
            Returns the parameter to sort upon when sorting this header. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.renderer(System.Object,System.Object,Ext.data.Model,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,Ext.data.Store,Ext.view.View)">
            <summary>
            A renderer is an 'interceptor' method which can be used transform data (value, appearance, etc.) before it
            is rendered. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.setEditor(System.Object)">
            <summary>
            Sets the form field to be used for editing. ...
            </summary>
        </member>
        <member name="M:Ext.grid.column.Column.setText(System.Object)">
            <summary>
            Sets the header text for this Column. ...
            </summary>
        </member>
        <member name="P:Ext.grid.header.ContainerConfig.defaultWidth">
            <summary>
            Width of the header if no width or flex is specified. ...
            </summary>
        </member>
        <member name="P:Ext.grid.header.ContainerConfig.sortable">
            <summary>
            Provides the default sortable state for all Headers within this HeaderContainer. ...
            </summary>
        </member>
        <member name="P:Ext.grid.header.ContainerConfig.weight">
            <summary>
            HeaderContainer overrides the default weight of 0 for all docked items to 100. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.align">
            <summary>
            Sets the alignment of the header and rendered columns. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.columns">
            <summary>
            An optional array of sub-column definitions. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.dataIndex">
            <summary>
            Required. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.draggable">
            <summary>
            Indicates whether or not the header can be drag and drop re-ordered. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.groupable">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.hideable">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.menuDisabled">
            <summary>
            True to disabled the column header menu containing sort/hide options. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.sortable">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.tdCls">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.text">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ColumnConfig.renderer">
            <summary>
            A renderer is an 'interceptor' method which can be used transform data (value, appearance, etc.) before it is rendered
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.columnhide">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.columnmove">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.columnresize">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.columnshow">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.headerclick">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.headertriggerclick">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.menucreate">
            <summary>
            Fired immediately after the column header menu is created. ...
            </summary>
        </member>
        <member name="F:Ext.grid.header.ContainerEvents.sortchange">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.fx.Anim">
            <summary>
            This class manages animation for a specific target. The animation allows
            animation of various properties on the target, such as size, position, color and others. Starting Conditions The starting conditions for the animation are provided by the from configuration.
            Any/all of the properties in the from configuration can be specified. If a particular
            property is not defined, the starting value for that property will be read directly from the target. End Conditions The ending conditions for the animation are provided by the to configuration. These mark
            the final values once the animations has finished. The values in the from can mirror
            those in the to configuration to provide a starting point. Other Options  duration: Specifies the time period of the animation. easing: Specifies the easing of the animation. iterations: Allows the animation to repeat a number of times. alternate: Used in conjunction with iterations, reverses the direction every second iteration.  Example Code var myComponent = Ext.create(&#39;Ext.Component&#39;, {
            renderTo: document.body,
            width: 200,
            height: 200,
            style: &#39;border: 1px solid red;&#39;
            });
            new Ext.fx.Anim({
            target: myComponent,
            duration: 1000,
            from: {
            width: 400 //starting width 400
            },
            to: {
            width: 300, //end width 300
            height: 300 // end width 300
            }
            });
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Anim.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.fx.Anim.paused">
            <summary>
            Flag to determine if the animation is paused. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.alternate">
            <summary>
            Used in conjunction with iterations to reverse the animation each time an iteration completes. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.delay">
            <summary>
            Time to delay before starting the animation. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.duration">
            <summary>
            Time in milliseconds for a single animation to last. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.dynamic">
            <summary>
            Currently only for Component Animation: Only set a component's outer element size bypassing layouts. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.easing">
            <summary>
            This describes how the intermediate values used during a transition will be calculated. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.from">
            <summary>
            An object containing property/value pairs for the beginning of the animation. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.iterations">
            <summary>
            Number of times to execute the animation. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.keyframes">
            <summary>
            Animation keyframes follow the CSS3 Animation configuration pattern. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.target">
            <summary>
            The Ext.fx.target.Target to apply the animation to. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimConfig.to">
            <summary>
            An object containing property/value pairs for the end of the animation. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimEvents.afteranimate">
            <summary>
            Fires when the animation is complete. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimEvents.beforeanimate">
            <summary>
            Fires before the animation starts. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimEvents.lastframe">
            <summary>
            Fires when the animation's last frame has been set. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.VTypes">
            <summary>
            This is a singleton object which contains a set of commonly used field validation functions.
            The validations provided are basic and intended to be easily customizable and extended. To add custom VTypes specify the vtype validation
            test function, and optionally specify any corresponding error text to display and any keystroke
            filtering mask to apply. For example: // custom Vtype for vtype:&#39;time&#39;
            var timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\s[a|p]m)$/i;
            Ext.apply(Ext.form.field.VTypes, {
            //  vtype validation function
            time: function(val, field) {
            return timeTest.test(val);
            },
            // vtype Text property: The error text to display when the validation function returns false
            timeText: &#39;Not a valid time.  Must be in the format &quot;12:34 PM&quot;.&#39;,
            // vtype Mask property: The keystroke filter mask
            timeMask: /[\d\s:amp]/i
            });
            Another example: // custom Vtype for vtype:&#39;IPAddress&#39;
            Ext.apply(Ext.form.field.VTypes, {
            IPAddress:  function(v) {
            return /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(v);
            },
            IPAddressText: &#39;Must be a numeric IP address&#39;,
            IPAddressMask: /[\d\.]/i
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.VTypes.alpha(SharpKit.JavaScript.JsString)">
            <summary>
            The function used to validate alpha values ...
            </summary>
        </member>
        <member name="M:Ext.form.field.VTypes.alphanum(SharpKit.JavaScript.JsString)">
            <summary>
            The function used to validate alphanumeric values ...
            </summary>
        </member>
        <member name="M:Ext.form.field.VTypes.email(SharpKit.JavaScript.JsString)">
            <summary>
            The function used to validate email addresses. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.VTypes.url(SharpKit.JavaScript.JsString)">
            <summary>
            The function used to validate URLs ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.alphaMask">
            <summary>
            The keystroke filter mask to be applied on alpha input. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.alphaText">
            <summary>
            The error text to display when the alpha validation function returns false. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.alphanumMask">
            <summary>
            The keystroke filter mask to be applied on alphanumeric input. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.alphanumText">
            <summary>
            The error text to display when the alphanumeric validation function returns false. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.emailMask">
            <summary>
            The keystroke filter mask to be applied on email input. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.emailText">
            <summary>
            The error text to display when the email validation function returns false. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.VTypes.urlText">
            <summary>
            The error text to display when the url validation function returns false. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Checkbox">
            <summary>
            Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. Also serves as a
            parent class for radio buttons. Labeling: In addition to the standard field labeling options, checkboxes
            may be given an optional boxLabel which will be displayed immediately after checkbox. Also see
            Ext.form.CheckboxGroup for a convenient method of grouping related checkboxes. Values:
            The main value of a checkbox is a boolean, indicating whether or not the checkbox is checked.
            The following values will check the checkbox:
            true &#39;true&#39; &#39;1&#39; &#39;on&#39; Any other value will uncheck the checkbox. In addition to the main boolean value, you may also specify a separate inputValue. This will be
            sent as the parameter value when the form is submitted. You will want to set
            this value if you have multiple checkboxes with the same name. If not specified, the value on
            will be used.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            bodyPadding: 10,
            width      : 300,
            title      : &#39;Pizza Order&#39;,
            items: [
            {
            xtype      : &#39;fieldcontainer&#39;,
            fieldLabel : &#39;Toppings&#39;,
            defaultType: &#39;checkboxfield&#39;,
            items: [
            {
            boxLabel  : &#39;Anchovies&#39;,
            name      : &#39;topping&#39;,
            inputValue: &#39;1&#39;,
            id        : &#39;checkbox1&#39;
            }, {
            boxLabel  : &#39;Artichoke Hearts&#39;,
            name      : &#39;topping&#39;,
            inputValue: &#39;2&#39;,
            checked   : true,
            id        : &#39;checkbox2&#39;
            }, {
            boxLabel  : &#39;Bacon&#39;,
            name      : &#39;topping&#39;,
            inputValue: &#39;3&#39;,
            id        : &#39;checkbox3&#39;
            }
            ]
            }
            ],
            bbar: [
            {
            text: &#39;Select Bacon&#39;,
            handler: function() {
            var checkbox = Ext.getCmp(&#39;checkbox3&#39;);
            checkbox.setValue(true);
            }
            },
            &#39;-&#39;,
            {
            text: &#39;Select All&#39;,
            handler: function() {
            var checkbox1 = Ext.getCmp(&#39;checkbox1&#39;),
            checkbox2 = Ext.getCmp(&#39;checkbox2&#39;),
            checkbox3 = Ext.getCmp(&#39;checkbox3&#39;);
            checkbox1.setValue(true);
            checkbox2.setValue(true);
            checkbox3.setValue(true);
            }
            },
            {
            text: &#39;Deselect All&#39;,
            handler: function() {
            var checkbox1 = Ext.getCmp(&#39;checkbox1&#39;),
            checkbox2 = Ext.getCmp(&#39;checkbox2&#39;),
            checkbox3 = Ext.getCmp(&#39;checkbox3&#39;);
            checkbox1.setValue(false);
            checkbox2.setValue(false);
            checkbox3.setValue(false);
            }
            }
            ],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.getBodyNaturalWidth">
            <summary>
            Calculate and return the natural width of the bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.getRawValue">
            <summary>
            Returns the checked state of the checkbox. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.getSubmitValue">
            <summary>
            Returns the submit value for the checkbox which can be used when submitting forms. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.getValue">
            <summary>
            Returns the checked state of the checkbox. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.setRawValue(System.Object)">
            <summary>
            Sets the checked state of the checkbox. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Checkbox.setValue(System.Object)">
            <summary>
            Sets the checked state of the checkbox, and invokes change detection. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Checkbox.boxLabelEl">
            <summary>
            A reference to the label element created for the boxLabel. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Checkbox.originalValue">
            <summary>
            The original value of the field as configured in the checked configuration, or
            as loaded by the last form load operat...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.boxLabel">
            <summary>
            An optional text label that will appear next to the checkbox. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.boxLabelAlign">
            <summary>
            The position relative to the checkbox where the boxLabel should
            appear. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.handler">
            <summary>
            A function called when the checked value changes (can be used instead of
            handling the change event). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.inputValue">
            <summary>
            The value that should go into the generated input element's value attribute and
            should be used as the parameter value...
            </summary>
        </member>
        <member name="P:Ext.form.field.CheckboxConfig.uncheckedValue">
            <summary>
            If configured, this will be submitted as the checkbox's value during form
            submit if the checkbox is unchecked. ...
            </summary>
        </member>
        <member name="T:Ext.form.action.StandardSubmit">
            <summary>
            A class which handles submission of data from Forms using a standard
            &amp;lt;form&amp;gt; element submit. It does not handle the response from the submit. If validation of the form fields fails, the Form&#39;s Ext.form.Basic.afterAction method
            will be called. Otherwise, afterAction will not be called. Instances of this class are only created by a Form when
            submitting, when the form&#39;s Ext.form.Basic.standardSubmit
            config option is true.
            </summary>
        </member>
        <member name="P:Ext.form.action.StandardSubmitConfig.target">
            <summary>
            Optional target attribute to be used for the form when submitting. ...
            </summary>
        </member>
        <member name="T:Ext.DomQuery">
            <summary>
            Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
            DomQuery supports most of the CSS3 selectors spec, along with some custom selectors and basic XPath.
            All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example &quot;div.foo:nth-child(odd)[@foo=bar].bar:first&quot; would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.
            Element Selectors:   * any element  E an element with the tag E  E F All descendent elements of E that have the tag F  E &gt; F or E/F all direct children elements of E that have the tag F  E + F all elements with the tag F that are immediately preceded by an element with the tag E  E ~ F all elements with the tag F that are preceded by a sibling element with the tag E  Attribute Selectors: The use of &amp;#64; and quotes are optional. For example, div[&amp;#64;foo=&#39;bar&#39;] is also a valid attribute selector.   E[foo] has an attribute &quot;foo&quot;  E[foo=bar] has an attribute &quot;foo&quot; that equals &quot;bar&quot;  E[foo^=bar] has an attribute &quot;foo&quot; that starts with &quot;bar&quot;  E[foo$=bar] has an attribute &quot;foo&quot; that ends with &quot;bar&quot;  E[foo*=bar] has an attribute &quot;foo&quot; that contains the substring &quot;bar&quot;  E[foo%=2] has an attribute &quot;foo&quot; that is evenly divisible by 2  E[foo!=bar] attribute &quot;foo&quot; does not equal &quot;bar&quot;  Pseudo Classes:   E:first-child E is the first child of its parent  E:last-child E is the last child of its parent  E:nth-child(n) E is the nth child of its parent (1 based as per the spec)  E:nth-child(odd) E is an odd child of its parent  E:nth-child(even) E is an even child of its parent  E:only-child E is the only child of its parent  E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)   E:first the first E in the resultset  E:last the last E in the resultset  E:nth(n) the nth E in the resultset (1 based)  E:odd shortcut for :nth-child(odd)  E:even shortcut for :nth-child(even)  E:contains(foo) E&#39;s innerHTML contains the substring &quot;foo&quot;  E:nodeValue(foo) E contains a textNode with a nodeValue that equals &quot;foo&quot;  E:not(S) an E element that does not match simple selector S  E:has(S) an E element that has a descendent that matches simple selector S  E:next(S) an E element whose next sibling matches simple selector S  E:prev(S) an E element whose previous sibling matches simple selector S  E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\\  CSS Value Selectors:   E{display=none} css value &quot;display&quot; that equals &quot;none&quot;  E{display^=none} css value &quot;display&quot; that starts with &quot;none&quot;  E{display$=none} css value &quot;display&quot; that ends with &quot;none&quot;  E{display*=none} css value &quot;display&quot; that contains the substring &quot;none&quot;  E{display%=2} css value &quot;display&quot; that is evenly divisible by 2  E{display!=none} css value &quot;display&quot; that does not equal &quot;none&quot;
            </summary>
        </member>
        <member name="M:Ext.DomQuery.compile(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Compiles a selector/xpath query into a reusable function. ...
            </summary>
        </member>
        <member name="M:Ext.DomQuery.filter(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Filters an array of elements to only include matches of a simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.DomQuery.is(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the passed element(s) match the passed simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.DomQuery.select(SharpKit.JavaScript.JsString,Ext.Unknown.Node)">
            <summary>
            Selects an array of DOM nodes by CSS/XPath selector. ...
            </summary>
        </member>
        <member name="M:Ext.DomQuery.selectNode(SharpKit.JavaScript.JsString,Ext.Unknown.Node)">
            <summary>
            Selects a single element. ...
            </summary>
        </member>
        <member name="P:Ext.DomQuery.matchers">
            <summary>
            Collection of matching regular expressions and code snippets. ...
            </summary>
        </member>
        <member name="P:Ext.DomQuery.operators">
            <summary>
            Collection of operator comparison functions. ...
            </summary>
        </member>
        <member name="P:Ext.DomQuery.pseudos">
            <summary>
            Object hash of "pseudo class" filter functions which are used when filtering selections. ...
            </summary>
        </member>
        <member name="T:Ext.direct.RemotingProvider">
            <summary>
            The RemotingProvider exposes access to
            server side methods on the client (a remote procedure call (RPC) type of
            connection where the client can initiate a procedure on the server). This allows for code to be organized in a fashion that is maintainable,
            while providing a clear path between client and server, something that is
            not always apparent when using URLs. To accomplish this the server-side needs to describe what classes and methods
            are available on the client-side. This configuration will typically be
            outputted by the server-side Ext.Direct stack when the API description is built.
            </summary>
        </member>
        <member name="T:Ext.direct.JsonProvider">
            <summary>
            A base provider for communicating using JSON. This is an abstract class
            and should not be instanced directly.
            </summary>
        </member>
        <member name="T:Ext.direct.Provider">
            <summary>
            Ext.direct.Provider is an abstract class meant to be extended. For example ExtJs implements the following subclasses: Provider
            |
            +---JsonProvider
            |
            +---PollingProvider
            |
            +---RemotingProvider
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.connect">
            <summary>
            Abstract methods for subclasses to implement. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.disconnect">
            <summary>
            Abstract methods for subclasses to implement. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.isConnected">
            <summary>
            Returns whether or not the server-side is currently connected. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.on(SharpKit.JavaScript.JsString,System.Delegate)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.JsonProvider.createEvent(System.Object)">
            <summary>
            Create an event from a response object ...
            </summary>
        </member>
        <member name="P:Ext.direct.ProviderConfig.id">
            <summary>
            The unique id of the provider (defaults to an auto-assigned id). ...
            </summary>
        </member>
        <member name="P:Ext.direct.ProviderConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.actions">
            <summary>
            Object literal defining the server side actions and methods. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.enableBuffer">
            <summary>
            true or false to enable or disable combining of method
            calls. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.enableUrlEncode">
            <summary>
            Specify which param will hold the arguments for the method. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.maxRetries">
            <summary>
            Number of times to re-attempt delivery on failure of a call. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.namespace">
            <summary>
            Namespace for the Remoting Provider (defaults to the browser global scope of window). ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.timeout">
            <summary>
            The timeout to use for each request. ...
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.url">
            <summary>
            Required. ...
            </summary>
        </member>
        <member name="F:Ext.direct.ProviderEvents.connect">
            <summary>
            Fires when the Provider connects to the server-side ...
            </summary>
        </member>
        <member name="F:Ext.direct.ProviderEvents.data">
            <summary>
            Fires when the Provider receives data from the server-side ...
            </summary>
        </member>
        <member name="F:Ext.direct.ProviderEvents.disconnect">
            <summary>
            Fires when the Provider disconnects from the server-side ...
            </summary>
        </member>
        <member name="F:Ext.direct.ProviderEvents.exception">
            <summary>
            Fires when the Provider receives an exception from the server-side ...
            </summary>
        </member>
        <member name="F:Ext.direct.RemotingProviderEvents.beforecall">
            <summary>
            Fires immediately before the client-side sends off the RPC call. ...
            </summary>
        </member>
        <member name="F:Ext.direct.RemotingProviderEvents.call">
            <summary>
            Fires immediately after the request to the server-side is sent. ...
            </summary>
        </member>
        <member name="T:Ext.data.Field">
            <summary>
            Fields are used to define what a Model is. They aren&#39;t instantiated directly - instead, when we create a class
            that extends Ext.data.Model, it will automatically create a Field instance for each field configured in a
            Model. For example, we might set up a model like this: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;name&#39;, &#39;email&#39;,
            {name: &#39;age&#39;, type: &#39;int&#39;},
            {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;}
            ]
            });
            Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a
            couple of different formats here; if we only pass in the string name of the field (as with name and email), the
            field is set up with the &#39;auto&#39; type. It&#39;s as if we&#39;d done this instead: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;name&#39;, type: &#39;auto&#39;},
            {name: &#39;email&#39;, type: &#39;auto&#39;},
            {name: &#39;age&#39;, type: &#39;int&#39;},
            {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;}
            ]
            });
            Types and conversion The type is important - it&#39;s used to automatically convert data passed to the field into the correct
            format. In our example above, the name and email fields used the &#39;auto&#39; type and will just accept anything that is
            passed into them. The &#39;age&#39; field had an &#39;int&#39; type however, so if we passed 25.4 this would be rounded to 25. Sometimes a simple type isn&#39;t enough, or we want to perform some processing when we load a Field&#39;s data. We can
            do this using a convert function. Here, we&#39;re going to create a new field based on another:  Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;name&#39;, &#39;email&#39;,
            {name: &#39;age&#39;, type: &#39;int&#39;},
            {name: &#39;gender&#39;, type: &#39;string&#39;, defaultValue: &#39;Unknown&#39;},
            {
            name: &#39;firstName&#39;,
            convert: function(value, record) {
            var fullName  = record.get(&#39;name&#39;),
            splits    = fullName.split(&quot; &quot;),
            firstName = splits[0];
            return firstName;
            }
            }
            ]
            });
            Now when we create a new User, the firstName is populated automatically based on the name:  var ed = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;}, &#39;User&#39;);
            console.log(ed.get(&#39;firstName&#39;)); //logs &#39;Ed&#39;, based on our convert function
            In fact, if we log out all of the data inside ed, we&#39;ll see this:  console.log(ed.data);
            //outputs this:
            {
            age: 0,
            email: &quot;&quot;,
            firstName: &quot;Ed&quot;,
            gender: &quot;Unknown&quot;,
            name: &quot;Ed Spencer&quot;
            }
            The age field has been given a default of zero because we made it an int type. As an auto field, email has
            defaulted to an empty string. When we registered the User model we set gender&#39;s defaultValue to &#39;Unknown&#39;
            so we see that now. Let&#39;s correct that and satisfy ourselves that the types work as we expect:  ed.set(&#39;gender&#39;, &#39;Male&#39;);
            ed.get(&#39;gender&#39;); //returns &#39;Male&#39;
            ed.set(&#39;age&#39;, 25.4);
            ed.get(&#39;age&#39;); //returns 25 - we wanted an int, not a float, so no decimal places allowed
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.convert">
            <summary>
            (Optional) A function which converts the value provided by the Reader into an object that will be stored
            in the Model. ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.dateFormat">
            <summary>
            (Optional) Used when converting received data into a Date when the type is specified as "date". ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.defaultValue">
            <summary>
            (Optional) The default value used when a Model is being created by a Reader
            when the item referenced by the mapping d...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.mapping">
            <summary>
            (Optional) A path expression for use by the Ext.data.reader.Reader implementation
            that is creating the Model to extra...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.name">
            <summary>
            The name by which the field is referenced within the Model. ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.persist">
            <summary>
            False to exclude this field from the Ext.data.Model.modified fields in a model. ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortDir">
            <summary>
            (Optional) Initial direction to sort ("ASC" or  "DESC"). ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortType">
            <summary>
            (Optional) A function which converts a Field's value to a comparable value in order to ensure
            correct sort ordering. ...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.type">
            <summary>
            (Optional) The data type for automatic conversion from received data to the stored value if convert
            has not been spec...
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.useNull">
            <summary>
            (Optional) Use when converting received data into a Number type (either int or float). ...
            </summary>
        </member>
        <member name="T:Ext.core.DomHelper">
            <summary>
            The DomHelper class provides a layer of abstraction from DOM and transparently supports creating
            elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates
            from your DOM building code. DomHelper element specification object A specification object is used when creating elements. Attributes of this object
            are assumed to be element attributes, except for 4 special attributes:
            tag : The tag name of the element children : or cnAn array of the
            same kind of element definition objects to be created and appended. These can be nested
            as deep as you want. cls : The class attribute of the element.
            This will end up being either the &quot;class&quot; attribute on a HTML fragment or className
            for a DOM node, depending on whether DomHelper is using fragments or DOM. html : The innerHTML for the element  NOTE: For other arbitrary attributes, the value will currently not be automatically
            HTML-escaped prior to building the element&#39;s HTML string. This means that if your attribute value
            contains special characters that would not normally be allowed in a double-quoted attribute value,
            you must manually HTML-encode it beforehand (see Ext.String.htmlEncode) or risk
            malformed HTML being created. This behavior may change in a future release. Insertion methods Commonly used insertion methods:
            append :  insertBefore :  insertAfter :  overwrite :  createTemplate :  insertHtml :   Example This is an example, where an unordered list with 3 children items is appended to an existing
            element with id &#39;my-div&#39;: var dh = Ext.core.DomHelper; // create shorthand alias
            // specification object
            var spec = {
            id: &#39;my-ul&#39;,
            tag: &#39;ul&#39;,
            cls: &#39;my-list&#39;,
            // append children after creating
            children: [     // may also specify &#39;cn&#39; instead of &#39;children&#39;
            {tag: &#39;li&#39;, id: &#39;item0&#39;, html: &#39;List Item 0&#39;},
            {tag: &#39;li&#39;, id: &#39;item1&#39;, html: &#39;List Item 1&#39;},
            {tag: &#39;li&#39;, id: &#39;item2&#39;, html: &#39;List Item 2&#39;}
            ]
            };
            var list = dh.append(
            &#39;my-div&#39;, // the context element &#39;my-div&#39; can either be the id or the actual node
            spec      // the specification object
            );
            Element creation specification parameters in this class may also be passed as an Array of
            specification objects. This can be used to insert multiple sibling nodes into an existing
            container very efficiently. For example, to add more list items to the example above:
            dh.append(&#39;my-ul&#39;, [
            {tag: &#39;li&#39;, id: &#39;item3&#39;, html: &#39;List Item 3&#39;},
            {tag: &#39;li&#39;, id: &#39;item4&#39;, html: &#39;List Item 4&#39;}
            ]);
            Templating The real power is in the built-in templating. Instead of creating or appending any elements,
            createTemplate returns a Template object which can be used over and over to
            insert new elements. Revisiting the example above, we could utilize templating this time:
            // create the node
            var list = dh.append(&#39;my-div&#39;, {tag: &#39;ul&#39;, cls: &#39;my-list&#39;});
            // get template
            var tpl = dh.createTemplate({tag: &#39;li&#39;, id: &#39;item{0}&#39;, html: &#39;List Item {0}&#39;});
            for(var i = 0; i  An example using a template:
            var html = &#39;{2}&#39;;
            var tpl = new Ext.core.DomHelper.createTemplate(html);
            tpl.append(&#39;blog-roll&#39;, [&#39;link1&#39;, &#39;http://www.edspencer.net/&#39;, &quot;Ed&amp;#39;s Site&quot;]);
            tpl.append(&#39;blog-roll&#39;, [&#39;link2&#39;, &#39;http://www.dustindiaz.com/&#39;, &quot;Dustin&amp;#39;s Site&quot;]);
            The same example using named parameters:
            var html = &#39;{text}&#39;;
            var tpl = new Ext.core.DomHelper.createTemplate(html);
            tpl.append(&#39;blog-roll&#39;, {
            id: &#39;link1&#39;,
            url: &#39;http://www.edspencer.net/&#39;,
            text: &quot;Ed&amp;#39;s Site&quot;
            });
            tpl.append(&#39;blog-roll&#39;, {
            id: &#39;link2&#39;,
            url: &#39;http://www.dustindiaz.com/&#39;,
            text: &quot;Dustin&amp;#39;s Site&quot;
            });
            Compiling Templates Templates are applied using regular expressions. The performance is great, but if
            you are adding a bunch of DOM elements using the same template, you can increase
            performance even further by &amp;quot;compiling&amp;quot; the template.
            The way &quot;compile()&quot; works is the template is parsed and
            broken up at the different variable points and a dynamic function is created and eval&#39;ed.
            The generated function performs string concatenation of these parts and the passed
            variables instead of using regular expressions.
            var html = &#39;{text}&#39;;
            var tpl = new Ext.core.DomHelper.createTemplate(html);
            tpl.compile();
            //... use template like normal
            Performance Boost DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead
            of DOM can significantly boost performance. Element creation specification parameters may also be strings. If useDom is false,
            then the string is used as innerHTML. If useDom is true, a string specification
            results in the creation of a text node. Usage: Ext.core.DomHelper.useDom = true; // force it to use DOM; reduces performance
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.append(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and appends them to el. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.applyStyles(System.Object,System.Object)">
            <summary>
            Applies a style specification to an element. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.createDom(System.Object)">
            <summary>
            Creates new DOM element(s) without inserting them to the document. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.createTemplate(System.Object)">
            <summary>
            Creates a new Ext.Template from the DOM object spec. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.insertAfter(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them after el. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.insertBefore(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them before el. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.insertFirst(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them as the first child of el. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.insertHtml(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Inserts an HTML fragment into the DOM. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.markup(System.Object)">
            <summary>
            Returns the markup for the passed Element(s) config. ...
            </summary>
        </member>
        <member name="M:Ext.core.DomHelper.overwrite(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and overwrites the contents of el with them. ...
            </summary>
        </member>
        <member name="T:Ext.ComponentManager">
            <summary>
            Provides a registry of all Components (instances of Ext.Component or any subclass
            thereof) on a page so that they can be easily accessed by component id (see get, or the convenience method Ext.getCmp). This object also provides a registry of available Component classes
            indexed by a mnemonic code known as the Component&#39;s xtype.
            The xtype provides a way to avoid instantiating child Components
            when creating a full, nested config object for a complete Ext page. A child Component may be specified simply as a config object
            as long as the correct xtype is specified so that if and when the Component
            needs rendering, the correct type can be looked up for lazy instantiation. For a list of all available xtypes, see Ext.Component.
            </summary>
        </member>
        <member name="M:Ext.ComponentManager.create(System.Object,Ext.Unknown.Constructor)">
            <summary>
            Creates a new Component from the specified config object using the
            config object's xtype to determine the class to in...
            </summary>
        </member>
        <member name="T:Ext.chart.LegendItem">
            <summary>
            A single item of a legend (marker plus label)
            </summary>
        </member>
        <member name="T:Ext.draw.CompositeSprite">
            <summary>
            A composite Sprite handles a group of sprites with common methods to a sprite
            such as hide, show, setAttributes. These methods are applied to the set of sprites
            added to the group. CompositeSprite extends Ext.util.MixedCollection so you can use the same methods
            in MixedCollection to iterate through sprites, add and remove elements, etc. In order to create a CompositeSprite, one has to provide a handle to the surface where it is
            rendered: var group = Ext.create(&#39;Ext.draw.CompositeSprite&#39;, {
            surface: drawComponent.surface
            });
            Then just by using MixedCollection methods it&#39;s possible to add Ext.draw.Sprites: group.add(sprite1);
            group.add(sprite2);
            group.add(sprite3);
            And then apply common Sprite methods to them: group.setAttributes({
            fill: &#39;#f00&#39;
            }, true);
            </summary>
        </member>
        <member name="T:Ext.util.MixedCollection">
            <summary>
            Represents a collection of a set of key and value pairs. Each key in the MixedCollection
            must be unique, the same key cannot exist twice. This collection is ordered, items in the
            collection can be accessed by index  or via the key. Newly added items are added to
            the end of the collection. This class is similar to Ext.util.HashMap however it
            is heavier and provides more functionality. Sample usage:
            var coll = new Ext.util.MixedCollection();
            coll.add(&#39;key1&#39;, &#39;val1&#39;);
            coll.add(&#39;key2&#39;, &#39;val2&#39;);
            coll.add(&#39;key3&#39;, &#39;val3&#39;);
            console.log(coll.get(&#39;key1&#39;)); // prints &#39;val1&#39;
            console.log(coll.indexOfKey(&#39;key3&#39;)); // prints 2
            The MixedCollection also has support for sorting and filtering of the values in the collection.
            var coll = new Ext.util.MixedCollection();
            coll.add(&#39;key1&#39;, 100);
            coll.add(&#39;key2&#39;, -100);
            coll.add(&#39;key3&#39;, 17);
            coll.add(&#39;key4&#39;, 0);
            var biggerThanZero = coll.filterBy(function(value){
            return value &gt; 0;
            });
            console.log(biggerThanZero.getCount()); // prints 2
            </summary>
        </member>
        <member name="T:Ext.util.AbstractMixedCollection">
            <summary>
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.add(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Adds an item to the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.add(System.Object)">
            <summary>
            Adds an item to the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.addAll(System.Object)">
            <summary>
            Adds all elements of an Array or an Object to the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.clear">
            <summary>
            Removes all items from the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.clone">
            <summary>
            Creates a shallow copy of this collection ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.collect(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Collects unique values of a particular property in this MixedCollection ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.contains(System.Object)">
            <summary>
            Returns true if the collection contains the passed Object as an item. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.containsKey(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the collection contains the passed Object as a key. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for every item in the collection, passing the following arguments:
            item : Mixe...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.eachKey(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for every key in the collection, passing each
            key, and its associated item as th...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.filter(System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Filters the objects in this collection by a set of Filters, or by a single
            property/value pair with optional paramete...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.filterBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Filter by a function. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.findBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns the first item in the collection which elicits a true return value from the
            passed selection function. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.findIndex(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber,System.Boolean,System.Boolean)">
            <summary>
            Finds the index of the first matching object in this collection by a specific property/value. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.findIndexBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Find the index of the first matching object in this collection by a function. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.first">
            <summary>
            Returns the first item in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.get(System.Object)">
            <summary>
            Returns the item associated with the passed key OR index. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.getAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the item at the specified index. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.getByKey(System.Object)">
            <summary>
            Returns the item associated with the passed key. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.getCount">
            <summary>
            Returns the number of items in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.getKey(System.Object)">
            <summary>
            MixedCollection has a generic way to fetch keys if you implement getKey. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.getRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a range of items in this collection ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.indexOf(System.Object)">
            <summary>
            Returns index within the collection of the passed Object. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.indexOfKey(SharpKit.JavaScript.JsString)">
            <summary>
            Returns index within the collection of the passed key. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.insert(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Inserts an item at the specified index in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.last">
            <summary>
            Returns the last item in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.remove(System.Object)">
            <summary>
            Remove an item from the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.removeAll(SharpKit.JavaScript.JsArray)">
            <summary>
            Remove all items in the passed array from the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.removeAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Remove an item from a specified index in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.removeAtKey(SharpKit.JavaScript.JsString)">
            <summary>
            Removed an item associated with the passed key fom the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.replace(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Replaces an item in the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.sum(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Collects all of the values of the given property and returns their sum ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.util.AbstractMixedCollection.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.#ctor(System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            Creates new MixedCollection. ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.initSortable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.reorder(System.Object)">
            <summary>
            Reorders each of the items based on a mapping from old index to new index. ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.sort(System.Object,SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Sorts the data in the Store by one or more of its properties. ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.sortBy(SharpKit.JavaScript.JsAction)">
            <summary>
            Sorts the collection by a single sorter function ...
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.sortByKey(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Sorts this collection by keys. ...
            </summary>
        </member>
        <member name="P:Ext.util.MixedCollection.isSortable">
            <summary>
            Flag denoting that this object is sortable. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.add(System.Object,System.Object)">
            <summary>
            Add a Sprite to the Group ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.animate(System.Object)">
            <summary>
            Perform custom animation on this object. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.destroy">
            <summary>
            Destroys the SpriteGroup ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.getActiveAnimation">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.getBBox">
            <summary>
            Returns the group bounding box. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.hasActiveFx">
            <summary>
            Returns thq current animation if this object has any effects actively running or queued, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.hide(System.Object)">
            <summary>
            Hides all sprites. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.remove(System.Object)">
            <summary>
            Remove a Sprite from the Group ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.sequenceFx">
            <summary>
            Ensures that all effects queued after sequenceFx is called on this object are
            run in sequence. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.setAttributes(System.Object,System.Object)">
            <summary>
            Iterates through all sprites calling
            setAttributes on each one. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.show(System.Object)">
            <summary>
            Shows all sprites. ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.stopAnimation">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.stopFx">
            <summary>
            Stops any running effects and clears this object's internal effects queue if it contains
            any additional effects that ...
            </summary>
        </member>
        <member name="M:Ext.draw.CompositeSprite.syncFx">
            <summary>
            Ensures that all effects queued after syncFx is called on this object are
            run concurrently. ...
            </summary>
        </member>
        <member name="M:Ext.chart.LegendItem.createLegend(System.Object)">
            <summary>
            Creates all the individual sprites for this legend item ...
            </summary>
        </member>
        <member name="M:Ext.chart.LegendItem.updatePosition(System.Object)">
            <summary>
            Update the positions of all this item's sprites to match the root position
            of the legend box. ...
            </summary>
        </member>
        <member name="P:Ext.util.AbstractMixedCollectionConfig.allowFunctions">
            <summary>
            Specify true if the addAll
            function should add function references to the collection. ...
            </summary>
        </member>
        <member name="P:Ext.util.AbstractMixedCollectionConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.util.AbstractMixedCollectionEvents.add">
            <summary>
            Fires when an item is added to the collection. ...
            </summary>
        </member>
        <member name="F:Ext.util.AbstractMixedCollectionEvents.clear">
            <summary>
            Fires when the collection is cleared. ...
            </summary>
        </member>
        <member name="F:Ext.util.AbstractMixedCollectionEvents.remove">
            <summary>
            Fires when an item is removed from the collection. ...
            </summary>
        </member>
        <member name="F:Ext.util.AbstractMixedCollectionEvents.replace">
            <summary>
            Fires when an item is replaced in the collection. ...
            </summary>
        </member>
        <member name="T:Ext.app.Application">
            <summary>
            Represents an Ext JS 4 application, which is typically a single page app using a Viewport.
            A typical Ext.app.Application might look like this: Ext.application({
            name: &#39;MyApp&#39;,
            launch: function() {
            Ext.create(&#39;Ext.container.Viewport&#39;, {
            items: {
            html: &#39;My App&#39;
            }
            });
            }
            });
            This does several things. First it creates a global variable called &#39;MyApp&#39; - all of your Application&#39;s classes (such
            as its Models, Views and Controllers) will reside under this single namespace, which drastically lowers the chances
            of colliding global variables. When the page is ready and all of your JavaScript has loaded, your Application&#39;s launch function is called,
            at which time you can run the code that starts your app. Usually this consists of creating a Viewport, as we do in
            the example above. Telling Application about the rest of the app Because an Ext.app.Application represents an entire app, we should tell it about the other parts of the app - namely
            the Models, Views and Controllers that are bundled with the application. Let&#39;s say we have a blog management app; we
            might have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.
            Here&#39;s how we&#39;d tell our Application about all these things: Ext.application({
            name: &#39;Blog&#39;,
            models: [&#39;Post&#39;, &#39;Comment&#39;],
            controllers: [&#39;Posts&#39;, &#39;Comments&#39;],
            launch: function() {
            ...
            }
            });
            Note that we didn&#39;t actually list the Views directly in the Application itself. This is because Views are managed by
            Controllers, so it makes sense to keep those dependencies there. The Application will load each of the specified
            Controllers using the pathing conventions laid out in the application
            architecture guide - in this case expecting the controllers to reside in app/controller/Posts.js and
            app/controller/Comments.js. In turn, each Controller simply needs to list the Views it uses and they will be
            automatically loaded. Here&#39;s how our Posts controller like be defined: Ext.define(&#39;MyApp.controller.Posts&#39;, {
            extend: &#39;Ext.app.Controller&#39;,
            views: [&#39;posts.List&#39;, &#39;posts.Edit&#39;],
            //the rest of the Controller here
            });
            Because we told our Application about our Models and Controllers, and our Controllers about their Views, Ext JS will
            automatically load all of our app files for us. This means we don&#39;t have to manually add script tags into our html
            files whenever we add a new class, but more importantly it enables us to create a minimized build of our entire
            application using the Ext JS 4 SDK Tools. For more information about writing Ext JS 4 applications, please see the
            application architecture guide.
            </summary>
        </member>
        <member name="T:Ext.app.Controller">
            <summary>
            Controllers are the glue that binds an application together. All they really do is listen for events (usually from
            views) and take some action. Here&#39;s how we might create a Controller to manage Users: Ext.define(&#39;MyApp.controller.Users&#39;, {
            extend: &#39;Ext.app.Controller&#39;,
            init: function() {
            console.log(&#39;Initialized Users! This happens before the Application launch function is called&#39;);
            }
            });
            The init function is a special method that is called when your application boots. It is called before the
            Application&#39;s launch function is executed so gives a hook point to run any code before
            your Viewport is created. The init function is a great place to set up how your controller interacts with the view, and is usually used in
            conjunction with another Controller function - control. The control function
            makes it easy to listen to events on your view classes and take some action with a handler function. Let&#39;s update
            our Users controller to tell us when the panel is rendered: Ext.define(&#39;MyApp.controller.Users&#39;, {
            extend: &#39;Ext.app.Controller&#39;,
            init: function() {
            this.control({
            &#39;viewport &amp;gt; panel&#39;: {
            render: this.onPanelRendered
            }
            });
            },
            onPanelRendered: function() {
            console.log(&#39;The panel was rendered&#39;);
            }
            });
            We&#39;ve updated the init function to use this.control to set up listeners on views in our application. The control
            function uses the new ComponentQuery engine to quickly and easily get references to components on the page. If you
            are not familiar with ComponentQuery yet, be sure to check out THIS GUIDE for a full explanation. In brief though,
            it allows us to pass a CSS-like selector that will find every matching component on the page. In our init function above we supplied &#39;viewport &gt; panel&#39;, which translates to &quot;find me every Panel that is a direct
            child of a Viewport&quot;. We then supplied an object that maps event names (just &#39;render&#39; in this case) to handler
            functions. The overall effect is that whenever any component that matches our selector fires a &#39;render&#39; event, our
            onPanelRendered function is called. Using refs One of the most useful parts of Controllers is the new ref system. These use the new Ext.ComponentQuery to
            make it really easy to get references to Views on your page. Let&#39;s look at an example of this now: Ext.define(&#39;MyApp.controller.Users&#39;, {
            extend: &#39;Ext.app.Controller&#39;,
            refs: [
            {
            ref: &#39;list&#39;,
            selector: &#39;grid&#39;
            }
            ],
            init: function() {
            this.control({
            &#39;button&#39;: {
            click: this.refreshGrid
            }
            });
            },
            refreshGrid: function() {
            this.getList().store.load();
            }
            });
            This example assumes the existence of a Grid on the page, which contains a single button to
            refresh the Grid when clicked. In our refs array, we set up a reference to the grid. There are two parts to this -
            the &#39;selector&#39;, which is a ComponentQuery selector which finds any grid on the page and
            assigns it to the reference &#39;list&#39;. By giving the reference a name, we get a number of things for free. The first is the getList function that we use in
            the refreshGrid method above. This is generated automatically by the Controller based on the name of our ref, which
            was capitalized and prepended with get to go from &#39;list&#39; to &#39;getList&#39;. The way this works is that the first time getList is called by your code, the ComponentQuery selector is run and the
            first component that matches the selector (&#39;grid&#39; in this case) will be returned. All future calls to getList will
            use a cached reference to that grid. Usually it is advised to use a specific ComponentQuery selector that will only
            match a single View in your application (in the case above our selector will match any grid on the page). Bringing it all together, our init function is called when the application boots, at which time we call this.control
            to listen to any click on a button and call our refreshGrid function (again, this will
            match any button on the page so we advise a more specific selector than just &#39;button&#39;, but have left it this way for
            simplicity). When the button is clicked we use out getList function to refresh the grid. You can create any number of refs and control any number of components this way, simply adding more functions to
            your Controller as you go. For an example of real-world usage of Controllers see the Feed Viewer example in the
            examples/app/feed-viewer folder in the SDK download. Generated getter methods Refs aren&#39;t the only thing that generate convenient getter methods. Controllers often have to deal with Models and
            Stores so the framework offers a couple of easy ways to get access to those too. Let&#39;s look at another example: Ext.define(&#39;MyApp.controller.Users&#39;, {
            extend: &#39;Ext.app.Controller&#39;,
            models: [&#39;User&#39;],
            stores: [&#39;AllUsers&#39;, &#39;AdminUsers&#39;],
            init: function() {
            var User = this.getUserModel(),
            allUsers = this.getAllUsersStore();
            var ed = new User({name: &#39;Ed&#39;});
            allUsers.add(ed);
            }
            });
            By specifying Models and Stores that the Controller cares about, it again dynamically loads them from the appropriate
            locations (app/model/User.js, app/store/AllUsers.js and app/store/AdminUsers.js in this case) and creates getter
            functions for them all. The example above will create a new User model instance and add it to the AllUsers Store.
            Of course, you could do anything in this function but in this case we just did something simple to demonstrate the
            functionality. Further Reading For more information about writing Ext JS 4 applications, please see the
            application architecture guide. Also see the Ext.app.Application documentation.
            </summary>
        </member>
        <member name="M:Ext.app.Controller.#ctor(System.Object)">
            <summary>
            Creates new Controller. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.control(System.Object,System.Object)">
            <summary>
            Adds listeners to components selected via Ext.ComponentQuery. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.getController(System.Object)">
            <summary>
            Returns a reference to a controller with the given name ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.getModel(System.Object)">
            <summary>
            Returns a reference to a Model with the given name ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.getStore(System.Object)">
            <summary>
            Returns a reference to a store with the given name ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.getView(System.Object)">
            <summary>
            Returns a reference to a view with the given name ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.app.Controller.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.app.Application.#ctor(System.Object)">
            <summary>
            Creates new Application. ...
            </summary>
        </member>
        <member name="P:Ext.app.Application.launch">
            <summary>
            Called automatically when the page has completely loaded. ...
            </summary>
        </member>
        <member name="P:Ext.app.ControllerConfig.id">
            <summary>
            The id of this controller. ...
            </summary>
        </member>
        <member name="P:Ext.app.ControllerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.app.ApplicationConfig.appFolder">
            <summary>
            The path to the directory which contains all application's classes. ...
            </summary>
        </member>
        <member name="P:Ext.app.ApplicationConfig.defaultUrl">
            <summary>
            When the app is first loaded, this url will be redirected to. ...
            </summary>
        </member>
        <member name="P:Ext.app.ApplicationConfig.name">
            <summary>
            The name of your application. ...
            </summary>
        </member>
        <member name="P:Ext.app.ApplicationConfig.scope">
            <summary>
            The scope to execute the launch function in. ...
            </summary>
        </member>
        <member name="P:Ext.app.ApplicationConfig.launch">
            <summary>
            Called automatically when the page has completely loaded. This is an empty function that should be overridden by each application that needs to take action on page load
            </summary>
        </member>
        <member name="T:Ext.tree.View">
            <summary>
            </summary>
        </member>
        <member name="T:Ext.view.Table">
            <summary>
            This class encapsulates the user interface for a tabular data set.
            It acts as a centralized manager for controlling the various interface
            elements of the view. This includes handling events, such as row and cell
            level based DOM events. It also reacts to events from the underlying Ext.selection.Model
            to provide visual feedback to the user. This class does not provide ways to manipulate the underlying data of the configured
            Ext.data.Store. This is the base class for both Ext.grid.View and Ext.tree.View and is not
            to be used directly.
            </summary>
        </member>
        <member name="M:Ext.view.Table.addRowCls(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Add a CSS Class to a specific row. ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.focusRow(System.Object)">
            <summary>
            Focus a particular row and bring it into view. ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.getFeature(SharpKit.JavaScript.JsString)">
            <summary>
            Get a reference to a feature ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.getRowClass(Ext.data.Model,SharpKit.JavaScript.JsNumber,System.Object,Ext.data.Store)">
            <summary>
            Override this function to apply custom CSS classes to rows during rendering. ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.getTableChunker">
            <summary>
            Get the configured chunker or default of Ext.view.TableChunker ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.refresh">
            <summary>
            Refresh the grid view. ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.removeRowCls(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Remove a CSS Class from a specific row. ...
            </summary>
        </member>
        <member name="M:Ext.view.Table.saveScrollState">
            <summary>
            Save the scrollState in a private variable. ...
            </summary>
        </member>
        <member name="M:Ext.tree.View.collapse(Ext.data.Model,System.Boolean,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Collapse a record that is loaded in the view. ...
            </summary>
        </member>
        <member name="M:Ext.tree.View.expand(Ext.data.Model,System.Boolean,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand a record that is loaded in the view. ...
            </summary>
        </member>
        <member name="M:Ext.tree.View.getTreeStore">
            <summary>
            Gets the base TreeStore from the bound TreePanel. ...
            </summary>
        </member>
        <member name="M:Ext.tree.View.toggle(Ext.data.Record)">
            <summary>
            Toggle a record between expanded and collapsed. ...
            </summary>
        </member>
        <member name="T:Ext.tree.Panel">
            <summary>
            The TreePanel provides tree-structured UI representation of tree-structured data.
            A TreePanel must be bound to a Ext.data.TreeStore. TreePanel&#39;s support
            multiple columns through the columns configuration. Simple TreePanel using inline data.  Code: var store = Ext.create(&#39;Ext.data.TreeStore&#39;, {
            root: {
            expanded: true,
            children: [
            { text: &quot;detention&quot;, leaf: true },
            { text: &quot;homework&quot;, expanded: true, children: [
            { text: &quot;book report&quot;, leaf: true },
            { text: &quot;alegrbra&quot;, leaf: true}
            ] },
            { text: &quot;buy lottery tickets&quot;, leaf: true }
            ]
            }
            });
            Ext.create(&#39;Ext.tree.Panel&#39;, {
            title: &#39;Simple Tree&#39;,
            width: 200,
            height: 150,
            store: store,
            rootVisible: false,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="M:Ext.tree.Panel.collapseAll(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Collapse all nodes ...
            </summary>
        </member>
        <member name="M:Ext.tree.Panel.expandAll(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand all nodes ...
            </summary>
        </member>
        <member name="M:Ext.tree.Panel.expandPath(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand the tree to the path of a particular node. ...
            </summary>
        </member>
        <member name="M:Ext.tree.Panel.getChecked">
            <summary>
            Retrieve an array of checked records. ...
            </summary>
        </member>
        <member name="M:Ext.tree.Panel.selectPath(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand the tree to the path of a particular node, then selecti t. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.animate">
            <summary>
            True to enable animated expand/collapse. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.displayField">
            <summary>
            The field inside the model that will be used as the node's text. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.folderSort">
            <summary>
            True to automatically prepend a leaf sorter to the store. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.hideHeaders">
            <summary>
            True to hide the headers. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.lines">
            <summary>
            False to disable tree lines. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.root">
            <summary>
            Allows you to not specify a store on this TreePanel. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.rootVisible">
            <summary>
            False to hide the root node. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.singleExpand">
            <summary>
            True if only 1 node per branch may be expanded. ...
            </summary>
        </member>
        <member name="P:Ext.tree.PanelConfig.useArrows">
            <summary>
            True to use Vista-style arrows in the tree. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeitemappend">
            <summary>
            Fires before a new child is appended to a node in this tree, return false to cancel the append. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeitemcollapse">
            <summary>
            Fires before a node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeitemexpand">
            <summary>
            Fires before a node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeiteminsert">
            <summary>
            Fires before a new child is inserted in a node in this tree, return false to cancel the insert. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeitemmove">
            <summary>
            Fires before a node is moved to a new location in the tree. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeitemremove">
            <summary>
            Fires before a child is removed from a node in this tree, return false to cancel the remove. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.beforeload">
            <summary>
            Event description ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.checkchange">
            <summary>
            Fires when a node with a checkbox's checked property changes ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.itemappend">
            <summary>
            Fires when a new child node is appended to a node in the tree. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.itemcollapse">
            <summary>
            Fires when a node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.itemexpand">
            <summary>
            Fires when a node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.iteminsert">
            <summary>
            Fires when a new child node is inserted in a node in tree ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.itemmove">
            <summary>
            Fires when a node is moved to a new location in the tree ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.itemremove">
            <summary>
            Fires when a child node is removed from a node in the tree ...
            </summary>
        </member>
        <member name="F:Ext.tree.PanelEvents.load">
            <summary>
            Fires whenever the store reads data from a remote data source. ...
            </summary>
        </member>
        <member name="T:Ext.tab.Tab">
            <summary>
            Represents a single Tab in a TabPanel. A Tab is simply a slightly customized Button,
            styled to look like a tab. Tabs are optionally closable, and can also be disabled. 99% of the time you will not
            need to create Tabs manually as the framework does so automatically when you use a TabPanel
            </summary>
        </member>
        <member name="T:Ext.button.Button">
            <summary>
            Create simple buttons with this component. Customisations include aligned icons, dropdown menus, tooltips
            and sizing options. Specify a handler to run code when
            a user clicks the button, or use listeners for other events such as
            mouseover.
            Example usage: Ext.create(&#39;Ext.Button&#39;, {
            text: &#39;Click me&#39;,
            renderTo: Ext.getBody(),
            handler: function() {
            alert(&#39;You clicked the button!&#39;)
            }
            });
            The handler configuration can also be updated dynamically using the setHandler method.
            Example usage: Ext.create(&#39;Ext.Button&#39;, {
            text    : &#39;Dyanmic Handler Button&#39;,
            renderTo: Ext.getBody(),
            handler : function() {
            //this button will spit out a different number every time you click it.
            //so firstly we must check if that number is already set:
            if (this.clickCount) {
            //looks like the property is already set, so lets just add 1 to that number and alert the user
            this.clickCount++;
            alert(&#39;You have clicked the button &quot;&#39; + this.clickCount + &#39;&quot; times.\n\nTry clicking it again..&#39;);
            } else {
            //if the clickCount property is not set, we will set it and alert the user
            this.clickCount = 1;
            alert(&#39;You just clicked the button for the first time!\n\nTry pressing it again..&#39;);
            }
            }
            });
            A button within a container: Ext.create(&#39;Ext.Container&#39;, {
            renderTo: Ext.getBody(),
            items   : [
            {
            xtype: &#39;button&#39;,
            text : &#39;My Button&#39;
            }
            ]
            });
            A useful option of Button is the scale configuration. This configuration has three different options:
            &#39;small&#39; &#39;medium&#39; &#39;large&#39;
            Example usage: Ext.create(&#39;Ext.Button&#39;, {
            renderTo: document.body,
            text    : &#39;Click me&#39;,
            scale   : &#39;large&#39;
            });
            Buttons can also be toggled. To enable this, you simple set the enableToggle property to true.
            Example usage: Ext.create(&#39;Ext.Button&#39;, {
            renderTo: Ext.getBody(),
            text: &#39;Click Me&#39;,
            enableToggle: true
            });
            You can assign a menu to a button by using the menu configuration. This standard configuration can either be a reference to a menu
            object, a menu id or a menu config blob. When assigning a menu to a button, an arrow is automatically added to the button.
            You can change the alignment of the arrow using the arrowAlign configuration on button.
            Example usage: Ext.create(&#39;Ext.Button&#39;, {
            text      : &#39;Menu button&#39;,
            renderTo  : Ext.getBody(),
            arrowAlign: &#39;bottom&#39;,
            menu      : [
            {text: &#39;Item 1&#39;},
            {text: &#39;Item 2&#39;},
            {text: &#39;Item 3&#39;},
            {text: &#39;Item 4&#39;}
            ]
            });
            Using listeners, you can easily listen to events fired by any component, using the listeners configuration or using the addListener method.
            Button has a variety of different listeners:
            click toggle mouseover mouseout mouseshow menuhide menutriggerover menutriggerout Example usage: Ext.create(&#39;Ext.Button&#39;, {
            text     : &#39;Button&#39;,
            renderTo : Ext.getBody(),
            listeners: {
            click: function() {
            //this == the button, as we are in the local scope
            this.setText(&#39;I was clicked!&#39;);
            },
            mouseover: function() {
            //set a new config which says we moused over, if not already set
            if (!this.mousedOver) {
            this.mousedOver = true;
            alert(&#39;You moused over a button!\n\nI wont do this again.&#39;);
            }
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.button.Button.getPressed(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the pressed button in the passed group or null ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.getTemplateArgs">
            <summary>
            This method returns an object which provides substitution parameters for the XTemplate used
            to create this Button's D...
            </summary>
        </member>
        <member name="M:Ext.button.Button.getText">
            <summary>
            Gets the text for this Button ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.hasVisibleMenu">
            <summary>
            Returns true if the button has a menu and it is visible ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.hideMenu">
            <summary>
            Hide this button's menu (if it has one) ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Assigns this Button's click handler ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setIcon(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the background image (inline style) of the button. ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setParams(System.Object)">
            <summary>
            Only valid if the Button was originally configured with a url
            Sets the href of the link dynamically according to th...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setScale(SharpKit.JavaScript.JsString)">
            <summary>
            Method to change the scale of the button. ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets this Button's text ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.setTooltip(System.Object,System.Object)">
            <summary>
            Sets the tooltip for this Button. ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.showMenu">
            <summary>
            Show this button's menu (if it has one) ...
            </summary>
        </member>
        <member name="M:Ext.button.Button.toggle(System.Boolean,System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled. ...
            </summary>
        </member>
        <member name="P:Ext.button.Button.disabled">
            <summary>
            Read-only. ...
            </summary>
        </member>
        <member name="P:Ext.button.Button.hidden">
            <summary>
            Read-only. ...
            </summary>
        </member>
        <member name="P:Ext.button.Button.pressed">
            <summary>
            Read-only. ...
            </summary>
        </member>
        <member name="P:Ext.button.Button.template">
            <summary>
            (Optional)
            A Template used to create the Button's DOM structure. ...
            </summary>
        </member>
        <member name="M:Ext.tab.Tab.setCard(Ext.Component)">
            <summary>
            Sets this tab's attached card. ...
            </summary>
        </member>
        <member name="M:Ext.tab.Tab.setClosable(System.Boolean)">
            <summary>
            Sets the tab as either closable or not ...
            </summary>
        </member>
        <member name="P:Ext.tab.Tab.Boolean">
            <summary>
            Read-only property indicating that this tab is currently active. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.allowDepress">
            <summary>
            False to not allow a pressed Button to be depressed (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.arrowAlign">
            <summary>
            (Optional) The side of the Button box to render the arrow if the button has an associated menu. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.autoWidth">
            <summary>
            By default, if a width is not specified the button will attempt to stretch horizontally to fit its content. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.baseCls">
            <summary>
            The base CSS class to add to all buttons. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.clickEvent">
            <summary>
            The DOM event that will fire the handler of the button. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.focusCls">
            <summary>
            The CSS class to add to a button when it is in the focussed state. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.handler">
            <summary>
            A function called when the button is clicked (can be used instead of click event). ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.icon">
            <summary>
            The path to an image to display in the button (the image will be set as the background-image
            CSS property of the butt...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.iconAlign">
            <summary>
            (Optional) The side of the Button box to render the icon. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to unde...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.menuActiveCls">
            <summary>
            The CSS class to add to a button when it's menu is active. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.minWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width). ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.overCls">
            <summary>
            The CSS class to add to a button when it is in the over (hovered) state. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.overflowText">
            <summary>
            If used in a Toolbar, the
            text to be used if this item is shown in the overflow menu. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.params">
            <summary>
            An object literal of parameters to pass to the url when the href property is specified. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.pressedCls">
            <summary>
            The CSS class to add to a button when it is in the pressed state. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.preventDefault">
            <summary>
            True to prevent the default action when the clickEvent is processed. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.repeat">
            <summary>
            True to repeat fire the click event while the mouse is down. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.scale">
            <summary>
            (Optional) The size of the Button. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.scope">
            <summary>
            The scope (this reference) in which the
            handler and toggleHandler is
            executed. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.toggleHandler">
            <summary>
            Function called when a Button with enableToggle set to true is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.button.ButtonConfig.tooltipType">
            <summary>
            The type of tooltip to use. ...
            </summary>
        </member>
        <member name="P:Ext.tab.TabConfig.activeCls">
            <summary>
            The CSS class to be applied to a Tab when it is active. ...
            </summary>
        </member>
        <member name="P:Ext.tab.TabConfig.closable">
            <summary>
            True to make the Tab start closable (the close icon will be visible). ...
            </summary>
        </member>
        <member name="P:Ext.tab.TabConfig.closeText">
            <summary>
            The accessible text label for the close button link; only used when closable = true. ...
            </summary>
        </member>
        <member name="P:Ext.tab.TabConfig.disabledCls">
            <summary>
            The CSS class to be applied to a Tab when it is disabled. ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.click">
            <summary>
            Fires when this button is clicked ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.menuhide">
            <summary>
            If this button has a menu, this event fires when it is hidden ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.menushow">
            <summary>
            If this button has a menu, this event fires when it is shown ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.menutriggerout">
            <summary>
            If this button has a menu, this event fires when the mouse leaves the menu triggering element ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.menutriggerover">
            <summary>
            If this button has a menu, this event fires when the mouse enters the menu triggering element ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.mouseout">
            <summary>
            Fires when the mouse exits the button ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.mouseover">
            <summary>
            Fires when the mouse hovers over the button ...
            </summary>
        </member>
        <member name="F:Ext.button.ButtonEvents.toggle">
            <summary>
            Fires when the 'pressed' state of this button changes (only if enableToggle = true) ...
            </summary>
        </member>
        <member name="F:Ext.tab.TabEvents.activate">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.tab.TabEvents.beforeclose">
            <summary>
            Fires to indicate that the tab is to be closed, usually because the user has clicked the close button. ...
            </summary>
        </member>
        <member name="F:Ext.tab.TabEvents.deactivate">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.state.Manager">
            <summary>
            This is the global state manager. By default all components that are &quot;state aware&quot; check this class
            for state information if you don&#39;t pass them a custom state provider. In order for this class
            to be useful, it must be initialized with a provider when your application initializes. Example usage: // in your initialization function
            init : function(){
            Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
            var win = new Window(...);
            win.restoreState();
            }
            This class passes on calls from components to the underlying Ext.state.Provider so that
            there is a common interface that can be used without needing to refer to a specific provider instance
            in every component.
            </summary>
        </member>
        <member name="M:Ext.state.Manager.clear(SharpKit.JavaScript.JsString)">
            <summary>
            Clears a value from the state ...
            </summary>
        </member>
        <member name="M:Ext.state.Manager.get(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the current value for a key ...
            </summary>
        </member>
        <member name="M:Ext.state.Manager.getProvider">
            <summary>
            Gets the currently configured state provider ...
            </summary>
        </member>
        <member name="M:Ext.state.Manager.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets the value for a key ...
            </summary>
        </member>
        <member name="M:Ext.state.Manager.setProvider(Ext.state.Provider)">
            <summary>
            Configures the default state provider for your application ...
            </summary>
        </member>
        <member name="T:Ext.panel.Tool">
            <summary>
            This class is used to display small visual icons in the header of a panel. There are a set of
            25 icons that can be specified by using the type config. The handler config
            can be used to provide a function that will respond to any click events. In general, this class
            will not be instantiated directly, rather it will be created by specifying the Ext.panel.Panel.tools
            configuration on the Panel itself. Example Usage Ext.create(&#39;Ext.panel.Panel&#39;, {
            width: 200,
            height: 200,
            renderTo: document.body,
            title: &#39;A Panel&#39;,
            tools: [{
            type: &#39;help&#39;,
            handler: function(){
            // show help here
            }
            }, {
            itemId: &#39;refresh&#39;,
            type: &#39;refresh&#39;,
            hidden: true,
            handler: function(){
            // do refresh
            }
            }, {
            type: &#39;search&#39;,
            handler: function(event, target, owner, tool){
            // do search
            owner.child(&#39;#refresh&#39;).show();
            }
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.panel.Tool.setType(SharpKit.JavaScript.JsString)">
            <summary>
            Set the type of the tool. ...
            </summary>
        </member>
        <member name="P:Ext.panel.ToolConfig.handler">
            <summary>
            A function to execute when the tool is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.panel.ToolConfig.scope">
            <summary>
            The scope to execute the handler function. ...
            </summary>
        </member>
        <member name="P:Ext.panel.ToolConfig.stopEvent">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.panel.ToolConfig.type">
            <summary>
            The type of tool to render. ...
            </summary>
        </member>
        <member name="F:Ext.panel.ToolEvents.click">
            <summary>
            Fires when the tool is clicked ...
            </summary>
        </member>
        <member name="T:Ext.grid.RowNumberer">
            <summary>
            This is a utility class that can be passed into a Ext.grid.column.Column as a column config that provides
            an automatic row numbering column. Usage: columns: [
            Ext.create(&#39;Ext.grid.RowNumberer&#39;),
            {text: &quot;Company&quot;, flex: 1, sortable: true, dataIndex: &#39;company&#39;},
            {text: &quot;Price&quot;, width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: &#39;price&#39;},
            {text: &quot;Change&quot;, width: 120, sortable: true, dataIndex: &#39;change&#39;},
            {text: &quot;% Change&quot;, width: 120, sortable: true, dataIndex: &#39;pctChange&#39;},
            {text: &quot;Last Updated&quot;, width: 120, sortable: true, renderer: Ext.util.Format.dateRenderer(&#39;m/d/Y&#39;), dataIndex: &#39;lastChange&#39;}
            ]
            </summary>
        </member>
        <member name="T:Ext.grid.property.Store">
            <summary>
            A custom Ext.data.Store for the Ext.grid.property.Grid. This class handles the mapping
            between the custom data source objects supported by the grid and the Ext.grid.property.Property format
            used by the Ext.data.Store base class.
            </summary>
        </member>
        <member name="T:Ext.data.Store">
            <summary>
            The Store class encapsulates a client side cache of Model objects. Stores load
            data via a Proxy, and also provide functions for sorting,
            filtering and querying the model instances contained within it. Creating a Store is easy - we just tell it the Model and the Proxy to use to load and save its data: // Set up a model to use in our Store
            Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;firstName&#39;, type: &#39;string&#39;},
            {name: &#39;lastName&#39;,  type: &#39;string&#39;},
            {name: &#39;age&#39;,       type: &#39;int&#39;},
            {name: &#39;eyeColor&#39;,  type: &#39;string&#39;}
            ]
            });
            var myStore = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;ajax&#39;,
            url : &#39;/users.json&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;users&#39;
            }
            },
            autoLoad: true
            });
            In the example above we configured an AJAX proxy to load data from the url &#39;/users.json&#39;. We told our Proxy
            to use a JsonReader to parse the response from the server into Model object -
            see the docs on JsonReader for details. Inline data Stores can also load data inline. Internally, Store converts each of the objects we pass in as data
            into Model instances: new Ext.data.Store({
            model: &#39;User&#39;,
            data : [
            {firstName: &#39;Ed&#39;,    lastName: &#39;Spencer&#39;},
            {firstName: &#39;Tommy&#39;, lastName: &#39;Maintz&#39;},
            {firstName: &#39;Aaron&#39;, lastName: &#39;Conran&#39;},
            {firstName: &#39;Jamie&#39;, lastName: &#39;Avins&#39;}
            ]
            });
            Loading inline data using the method above is great if the data is in the correct format already (e.g. it doesn&#39;t need
            to be processed by a reader). If your inline data requires processing to decode the data structure,
            use a MemoryProxy instead (see the MemoryProxy docs for an example). Additional data can also be loaded locally using add. Loading Nested Data Applications often need to load sets of associated data - for example a CRM system might load a User and her Orders.
            Instead of issuing an AJAX request for the User and a series of additional AJAX requests for each Order, we can load a nested dataset
            and allow the Reader to automatically populate the associated models. Below is a brief example, see the Ext.data.reader.Reader intro
            docs for a full explanation: var store = new Ext.data.Store({
            autoLoad: true,
            model: &quot;User&quot;,
            proxy: {
            type: &#39;ajax&#39;,
            url : &#39;users.json&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;users&#39;
            }
            }
            });
            Which would consume a response like this: {
            &quot;users&quot;: [
            {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed&quot;,
            &quot;orders&quot;: [
            {
            &quot;id&quot;: 10,
            &quot;total&quot;: 10.76,
            &quot;status&quot;: &quot;invoiced&quot;
            },
            {
            &quot;id&quot;: 11,
            &quot;total&quot;: 13.45,
            &quot;status&quot;: &quot;shipped&quot;
            }
            ]
            }
            ]
            }
            See the Ext.data.reader.Reader intro docs for a full explanation. Filtering and Sorting Stores can be sorted and filtered - in both cases either remotely or locally. The sorters and filters are
            held inside MixedCollection instances to make them easy to manage. Usually it is sufficient to
            either just specify sorters and filters in the Store configuration or call sort or filter:
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            sorters: [
            {
            property : &#39;age&#39;,
            direction: &#39;DESC&#39;
            },
            {
            property : &#39;firstName&#39;,
            direction: &#39;ASC&#39;
            }
            ],
            filters: [
            {
            property: &#39;firstName&#39;,
            value   : /Ed/
            }
            ]
            });
            The new Store will keep the configured sorters and filters in the MixedCollection instances mentioned above. By default, sorting
            and filtering are both performed locally by the Store - see remoteSort and remoteFilter to allow the server to
            perform these operations instead. Filtering and sorting after the Store has been instantiated is also easy. Calling filter adds another filter to the Store
            and automatically filters the dataset (calling filter with no arguments simply re-applies all existing filters). Note that by
            default sortOnFilter is set to true, which means that your sorters are automatically reapplied if using local sorting. store.filter(&#39;eyeColor&#39;, &#39;Brown&#39;);
            Change the sorting at any time by calling sort: store.sort(&#39;height&#39;, &#39;ASC&#39;);
            Note that all existing sorters will be removed in favor of the new sorter data (if sort is called with no arguments,
            the existing sorters are just reapplied instead of being removed). To keep existing sorters and add new ones, just add them
            to the MixedCollection: store.sorters.add(new Ext.util.Sorter({
            property : &#39;shoeSize&#39;,
            direction: &#39;ASC&#39;
            }));
            store.sort();
            Registering with StoreManager Any Store that is instantiated with a storeId will automatically be registed with the StoreManager.
            This makes it easy to reuse the same store in multiple views: //this store can be used several times
            new Ext.data.Store({
            model: &#39;User&#39;,
            storeId: &#39;usersStore&#39;
            });
            new Ext.List({
            store: &#39;usersStore&#39;,
            //other config goes here
            });
            new Ext.view.View({
            store: &#39;usersStore&#39;,
            //other config goes here
            });
            Further Reading Stores are backed up by an ecosystem of classes that enables their operation. To gain a full understanding of these
            pieces and how they fit together, see:  Proxy - overview of what Proxies are and how they are used Model - the core class in the data package Reader - used by any subclass of ServerProxy to read a response
            </summary>
        </member>
        <member name="M:Ext.data.Store.#ctor(System.Object)">
            <summary>
            Creates the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.add(System.Object)">
            <summary>
            Adds Model instances to the Store by instantiating them based on a JavaScript object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.average(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the average value in the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.clearFilter(System.Boolean)">
            <summary>
            Revert to a view of the Record cache with no filtering applied. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.clearGrouping">
            <summary>
            Clear any groupers in the store ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.collect(SharpKit.JavaScript.JsString,System.Boolean,System.Boolean)">
            <summary>
            Collects unique values for a particular dataIndex from this store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.count(System.Boolean)">
            <summary>
            Gets the count of items in the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Calls the specified function for each of the Records in the cache. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.filter(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Filters the loaded set of records by a given set of filters. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.filterBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Filter by a function. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.findBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Find the index of the first matching Record in this Store by a function. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.findExact(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Finds the index of the first matching Record in this store by a specific field value. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.first(System.Boolean)">
            <summary>
            Convenience function for getting the first model instance in the store ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the Record at the specified index. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getById(SharpKit.JavaScript.JsString)">
            <summary>
            Get the Record with the specified id. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getCount">
            <summary>
            Gets the number of cached records. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getGroupString(Ext.data.Model)">
            <summary>
            Returns the string to group on for a given model instance. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getGroups(SharpKit.JavaScript.JsString)">
            <summary>
            Returns an object containing the result of applying grouping to the records in this store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getPageFromRecordIndex(SharpKit.JavaScript.JsNumber)">
            <summary>
            Determines the page from a record index ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a range of Records between specified indices. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.getTotalCount">
            <summary>
            Returns the total number of Model instances that the Proxy
            indicates exist. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.group(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Group data in the store ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.guaranteeRange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Guarantee a specific range, this will load the store with a range (that
            must be the pageSize or smaller) and take car...
            </summary>
        </member>
        <member name="M:Ext.data.Store.hasPendingRequests">
            <summary>
            Returns the number of pending requests out. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOf(Ext.data.Model)">
            <summary>
            Get the index within the cache of the passed Record. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOfId(SharpKit.JavaScript.JsString)">
            <summary>
            Get the index within the cache of the Record with the passed id. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOfTotal(Ext.data.Model)">
            <summary>
            Get the index within the entire dataset. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.insert(SharpKit.JavaScript.JsNumber,Ext.data.Model)">
            <summary>
            Inserts Model instances into the Store at the given index and fires the add event. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.isFiltered">
            <summary>
            Returns true if this store is currently filtered ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.isGrouped">
            <summary>
            Checks if the store is currently grouped ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.last(System.Boolean)">
            <summary>
            Convenience function for getting the last model instance in the store ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.load(System.Object)">
            <summary>
            Loads data into the Store via the configured proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.load">
            <summary>
            Loads data into the Store via the configured proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadData(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Loads an array of data straight into the Store ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadPage(SharpKit.JavaScript.JsNumber)">
            <summary>
            Loads a given 'page' of data by setting the start and limit values appropriately. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadRecords(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.max(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the maximum value in the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.min(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the minimum value in the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.nextPage">
            <summary>
            Loads the next 'page' in the current data set ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.prefetch(System.Object)">
            <summary>
            Prefetches data the Store using its configured proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.prefetchPage(SharpKit.JavaScript.JsNumber,System.Object,System.Object)">
            <summary>
            Prefetches a page of data. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.previousPage">
            <summary>
            Loads the previous 'page' in the current data set ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.purgeRecords">
            <summary>
            Purge the least recently used records in the prefetch if the purgeCount
            has been exceeded. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.queryBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Query the cached records in this Store using a filtering function. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.queryBy(System.Delegate)">
            <summary>
            Query the cached records in this Store using a filtering function. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.remove(System.Object,System.Object)">
            <summary>
            Removes the given record from the Store, firing the 'remove' event for each instance that is removed, plus a single
            '...
            </summary>
        </member>
        <member name="M:Ext.data.Store.removeAll(System.Boolean)">
            <summary>
            Remove all items from the store. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.removeAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Removes the model instance at the given index ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.sum(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Sums the value of property for each record between start
            and end and returns the result. ...
            </summary>
        </member>
        <member name="M:Ext.data.Store.sum(SharpKit.JavaScript.JsString)">
            <summary>
            Sums the value of property for each record between start
            and end and returns the result. ...
            </summary>
        </member>
        <member name="P:Ext.data.Store.groupDir">
            <summary>
            The direction in which sorting should be applied when grouping. ...
            </summary>
        </member>
        <member name="P:Ext.data.Store.groupField">
            <summary>
            The (optional) field by which to group data in the store. ...
            </summary>
        </member>
        <member name="P:Ext.data.Store.snapshot">
            <summary>
            A pristine (unfiltered) collection of the records in this store. ...
            </summary>
        </member>
        <member name="M:Ext.grid.property.Store.#ctor(Ext.grid.property.Grid,System.Object)">
            <summary>
            Creates new property store. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.buffered">
            <summary>
            Allow the store to buffer and pre-fetch pages of records. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.clearOnPageLoad">
            <summary>
            True to empty the store when loading another page via loadPage,
            nextPage or previousPage (defaults to true). ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.data">
            <summary>
            Optional array of Model instances or data objects to load locally. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.pageSize">
            <summary>
            The number of records considered to form a 'page'. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.proxy">
            <summary>
            The Proxy to use for this Store. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.purgePageCount">
            <summary>
            The number of pages to keep in the cache before purging additional records. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteFilter">
            <summary>
            True to defer any filtering operation to the server. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteGroup">
            <summary>
            True if the grouping should apply on the server side, false if it is local only (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteSort">
            <summary>
            True to defer any sorting operation to the server. ...
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.sortOnFilter">
            <summary>
            For local filtering only, causes sort to be called whenever filter is called,
            causing the sorters to be reapplied aft...
            </summary>
        </member>
        <member name="F:Ext.data.StoreEvents.beforeprefetch">
            <summary>
            Fires before a prefetch occurs. ...
            </summary>
        </member>
        <member name="F:Ext.data.StoreEvents.groupchange">
            <summary>
            Fired whenever the grouping in the grid changes ...
            </summary>
        </member>
        <member name="F:Ext.data.StoreEvents.load">
            <summary>
            Fires whenever records have been prefetched ...
            </summary>
        </member>
        <member name="T:Ext.grid.feature.Chunking">
            <summary>
            </summary>
        </member>
        <member name="T:Ext.Function">
            <summary>
            A collection of useful static methods to deal with function callbacks
            </summary>
        </member>
        <member name="M:Ext.Function.alias(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Create an alias to the provided method property with name methodName of object. ...
            </summary>
        </member>
        <member name="M:Ext.Function.bind(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Create a new function from the provided fn, change this to the provided scope, optionally
            overrides arguments for the...
            </summary>
        </member>
        <member name="M:Ext.Function.createBuffered(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Creates a delegate function, optionally with a bound scope which, when called, buffers
            the execution of the passed fu...
            </summary>
        </member>
        <member name="M:Ext.Function.createDelayed(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Creates a delegate (callback) which, when called, executes after a specific delay. ...
            </summary>
        </member>
        <member name="M:Ext.Function.createInterceptor(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Creates an interceptor function. ...
            </summary>
        </member>
        <member name="M:Ext.Function.createSequence(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Create a combined function call sequence of the original function + the passed function. ...
            </summary>
        </member>
        <member name="M:Ext.Function.createThrottled(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Creates a throttled version of the passed function which, when called repeatedly and
            rapidly, invokes the passed func...
            </summary>
        </member>
        <member name="M:Ext.Function.defer(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Calls this function after the number of millseconds specified, optionally in a specific scope. ...
            </summary>
        </member>
        <member name="M:Ext.Function.flexSetter(SharpKit.JavaScript.JsAction)">
            <summary>
            A very commonly used method throughout the framework. ...
            </summary>
        </member>
        <member name="M:Ext.Function.pass(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Create a new function from the provided fn, the arguments of which are pre-set to args. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Hidden">
            <summary>
            A basic hidden field for storing hidden values in forms that need to be passed in the form submit. This creates an actual input element with type=&quot;submit&quot; in the DOM. While its label is
            not rendered by default, it is still a real component and may be sized according to
            its owner container&#39;s layout. Because of this, in most cases it is more convenient and less problematic to simply
            pass hidden parameters directly when
            submitting the form. Example: new Ext.form.Panel({
            title: &#39;My Form&#39;,
            items: [{
            xtype: &#39;textfield&#39;,
            fieldLabel: &#39;Text Field&#39;,
            name: &#39;text_field&#39;,
            value: &#39;value from text field&#39;
            }, {
            xtype: &#39;hiddenfield&#39;,
            name: &#39;hidden_field_1&#39;,
            value: &#39;value from hidden field&#39;
            }],
            buttons: [{
            text: &#39;Submit&#39;,
            handler: function() {
            this.up(&#39;form&#39;).getForm().submit({
            params: {
            hidden_field_2: &#39;value from submit call&#39;
            }
            });
            }
            }]
            }); Submitting the above form will result in three values sent to the server:
            text_field=value+from+text+field&amp;hidden_field_1=value+from+hidden+field&amp;hidden_field_2=value+from+submit+call
            </summary>
        </member>
        <member name="T:Ext.form.Basic">
            <summary>
            Provides input field management, validation, submission, and form loading services for the collection
            of Field instances within a Ext.container.Container. It is recommended
            that you use a Ext.form.Panel as the form container, as that has logic to automatically
            hook up an instance of Ext.form.Basic (plus other conveniences related to field configuration.) Form Actions The Basic class delegates the handling of form loads and submits to instances of Ext.form.action.Action.
            See the various Action implementations for specific details of each one&#39;s functionality, as well as the
            documentation for doAction which details the configuration options that can be specified in
            each action call. The default submit Action is Ext.form.action.Submit, which uses an Ajax request to submit the
            form&#39;s values to a configured URL. To enable normal browser submission of an Ext form, use the
            standardSubmit config option. Note: File uploads are not performed using normal &#39;Ajax&#39; techniques; see the description for
            hasUpload for details. Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Basic Form&#39;,
            renderTo: Ext.getBody(),
            bodyPadding: 5,
            width: 350,
            // Any configuration items here will be automatically passed along to
            // the Ext.form.Basic instance when it gets created.
            // The form will submit an AJAX request to this URL when submitted
            url: &#39;save-form.php&#39;,
            items: [{
            fieldLabel: &#39;Field&#39;,
            name: &#39;theField&#39;
            }],
            buttons: [{
            text: &#39;Submit&#39;,
            handler: function() {
            // The getForm() method returns the Ext.form.Basic instance:
            var form = this.up(&#39;form&#39;).getForm();
            if (form.isValid()) {
            // Submit the Ajax request and handle the response
            form.submit({
            success: function(form, action) {
            Ext.Msg.alert(&#39;Success&#39;, action.result.msg);
            },
            failure: function(form, action) {
            Ext.Msg.alert(&#39;Failed&#39;, action.result.msg);
            }
            });
            }
            }
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.form.Basic.#ctor(Ext.container.Container,System.Object)">
            <summary>
            Creates new form. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.applyIfToFields(System.Object)">
            <summary>
            Calls Ext.applyIf for all field in this form with the passed object. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.applyToFields(System.Object)">
            <summary>
            Calls Ext.apply for all fields in this form with the passed object. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.checkDirty">
            <summary>
            Check whether the dirty state of the entire form has changed since it was last checked, and
            if so fire the dirtychang...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.checkValidity">
            <summary>
            Check whether the validity of the entire form has changed since it was last checked, and
            if so fire the validitychang...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.clearInvalid">
            <summary>
            Clears all invalid field messages in this form. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.destroy">
            <summary>
            Destroys this object. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.doAction(System.Object,System.Object)">
            <summary>
            Performs a predefined action (an implementation of Ext.form.action.Action)
            to perform application-specific processing. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.findField(SharpKit.JavaScript.JsString)">
            <summary>
            Find a specific Ext.form.field.Field in this form by id or name. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.getFieldValues(System.Boolean)">
            <summary>
            Retrieves the fields in the form as a set of key/value pairs, using their
            getModelData() method to collect the values. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.getFields">
            <summary>
            Return all the Ext.form.field.Field components in the owner container. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.getRecord">
            <summary>
            Returns the last Ext.data.Model instance that was loaded via loadRecord ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.hasInvalidField">
            <summary>
            Returns true if the form contains any invalid fields. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.hasUpload">
            <summary>
            Returns true if the form contains a file upload field. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.isDirty">
            <summary>
            Returns true if any fields in this form have changed from their original values. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.isValid">
            <summary>
            Returns true if client-side validation on the form is successful. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.load(System.Object)">
            <summary>
            Shortcut to do a load action. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.loadRecord(Ext.data.Model)">
            <summary>
            Loads an Ext.data.Model into this form by calling setValues with the
            record data. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.markInvalid(System.Object)">
            <summary>
            Mark fields in this form invalid in bulk. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.reset">
            <summary>
            Resets all fields in this form. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.setValues(System.Object)">
            <summary>
            Set values for fields in this form in bulk. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.submit(System.Object)">
            <summary>
            Shortcut to do a submit action. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.form.Basic.updateRecord(Ext.data.Record)">
            <summary>
            Persists the values in this form into the passed Ext.data.Model object in a beginEdit/endEdit block. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.api">
            <summary>
            (Optional) If specified, load and submit actions will be handled
            with Ext.form.action.DirectLoad and Ext.form.action....
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.baseParams">
            <summary>
            Parameters to pass with all requests. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.errorReader">
            <summary>
            An Ext.data.DataReader (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.paramOrder">
            <summary>
            A list of params to be executed server side. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.paramsAsHash">
            <summary>
            Only used for the api
            load configuration. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.reader">
            <summary>
            An Ext.data.DataReader (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.standardSubmit">
            <summary>
            If set to true, a standard HTML form submit is used instead
            of a XHR (Ajax) style form submission. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.trackResetOnLoad">
            <summary>
            If set to true, reset() resets to the last loaded
            or setValues() data instead of when the form was first created. ...
            </summary>
        </member>
        <member name="P:Ext.form.BasicConfig.waitMsgTarget">
            <summary>
            By default wait messages are displayed with Ext.MessageBox.wait. ...
            </summary>
        </member>
        <member name="F:Ext.form.BasicEvents.actioncomplete">
            <summary>
            Fires when an action is completed. ...
            </summary>
        </member>
        <member name="F:Ext.form.BasicEvents.actionfailed">
            <summary>
            Fires when an action fails. ...
            </summary>
        </member>
        <member name="F:Ext.form.BasicEvents.beforeaction">
            <summary>
            Fires before any action is performed. ...
            </summary>
        </member>
        <member name="F:Ext.form.BasicEvents.dirtychange">
            <summary>
            Fires when the dirty state of the entire form changes. ...
            </summary>
        </member>
        <member name="F:Ext.form.BasicEvents.validitychange">
            <summary>
            Fires when the validity of the entire form changes. ...
            </summary>
        </member>
        <member name="T:Ext.direct.RemotingEvent">
            <summary>
            An event that is fired when data is received from a
            Ext.direct.RemotingProvider. Contains a method to the
            related transaction for the direct request, see getTransaction
            </summary>
        </member>
        <member name="T:Ext.direct.Event">
            <summary>
            A base class for all Ext.direct events. An event is
            created after some kind of interaction with the server.
            The event class is essentially just a data structure
            to hold a direct response.
            </summary>
        </member>
        <member name="T:Ext.EventObject">
            <summary>
            Just as Ext.core.Element wraps around a native DOM node, Ext.EventObject
            wraps the browser&#39;s native event-object normalizing cross-browser differences,
            such as which mouse button is clicked, keys pressed, mechanisms to stop
            event-propagation along with a method to prevent default actions from taking place. For example: function handleClick(e, t){ // e is not a standard event object, it is a Ext.EventObject
            e.preventDefault();
            var target = e.getTarget(); // same as t (the target HTMLElement)
            ...
            }
            var myDiv = Ext.get(&quot;myDiv&quot;);  // get reference to an Ext.core.Element
            myDiv.on(         // &#39;on&#39; is shorthand for addListener
            &quot;click&quot;,      // perform an action on click of myDiv
            handleClick   // reference to the action handler
            );
            // other methods to do the same:
            Ext.EventManager.on(&quot;myDiv&quot;, &#39;click&#39;, handleClick);
            Ext.EventManager.addListener(&quot;myDiv&quot;, &#39;click&#39;, handleClick);
            </summary>
        </member>
        <member name="M:Ext.EventObject.correctWheelDelta(SharpKit.JavaScript.JsNumber)">
            <summary>
            Correctly scales a given wheel delta. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getCharCode">
            <summary>
            Gets the character code for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getKey">
            <summary>
            Returns a normalized keyCode for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getPageX">
            <summary>
            Gets the x coordinate of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getPageY">
            <summary>
            Gets the y coordinate of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getPoint">
            <summary>
            Returns a point object that consists of the object coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getRelatedTarget(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Gets the related target. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getTarget(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Gets the target for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getTarget(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Gets the target for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getTarget(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the target for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getTarget">
            <summary>
            Gets the target for the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getWheelDelta">
            <summary>
            Normalizes mouse wheel y-delta across browsers. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getWheelDeltas">
            <summary>
            Returns the mouse wheel deltas for this event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getX">
            <summary>
            Gets the x coordinate of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getXY">
            <summary>
            Gets the page coordinates of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.getY">
            <summary>
            Gets the y coordinate of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.hasModifier">
            <summary>
            Returns true if the control, meta, shift or alt key was pressed during this event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.injectEvent(System.Object)">
            <summary>
            Injects a DOM event using the data in this object and (optionally) a new target. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.isNavKeyPress">
            <summary>
            Checks if the key pressed was a "navigation" key ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.isSpecialKey">
            <summary>
            Checks if the key pressed was a "special" key ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.preventDefault">
            <summary>
            Prevents the browsers default handling of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.stopEvent">
            <summary>
            Stop the event (preventDefault and stopPropagation) ...
            </summary>
        </member>
        <member name="M:Ext.EventObject.stopPropagation">
            <summary>
            Cancels bubbling of the event. ...
            </summary>
        </member>
        <member name="P:Ext.EventObject.WHEEL_SCALE">
            <summary>
            The mouse wheel delta scaling factor. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Event.#ctor(System.Object)">
            <summary>
            Creates new Event. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Event.getData">
            <summary>
            Return the raw data for this event. ...
            </summary>
        </member>
        <member name="M:Ext.direct.RemotingEvent.getTransaction">
            <summary>
            Get the transaction associated with this event. ...
            </summary>
        </member>
        <member name="T:Ext.data.ResultSet">
            <summary>
            Simple wrapper class that represents a set of records returned by a Proxy.
            </summary>
        </member>
        <member name="M:Ext.data.ResultSet.#ctor(System.Object)">
            <summary>
            Creates the resultSet ...
            </summary>
        </member>
        <member name="P:Ext.data.ResultSet.totalRecords">
            <summary>
            DEPRECATED - will be removed in Ext JS 5.0. ...
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.count">
            <summary>
            The number of records in this ResultSet. ...
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.loaded">
            <summary>
            True if the records have already been loaded. ...
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.records">
            <summary>
            The array of record instances. ...
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.total">
            <summary>
            The total number of records reported by the data source. ...
            </summary>
        </member>
        <member name="T:Ext.data.Association">
            <summary>
            Associations enable you to express relationships between different Models. Let&#39;s say we&#39;re
            writing an ecommerce system where Users can make Orders - there&#39;s a relationship between these Models that we can
            express like this: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
            hasMany: {model: &#39;Order&#39;, name: &#39;orders&#39;}
            });
            Ext.define(&#39;Order&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;user_id&#39;, &#39;status&#39;, &#39;price&#39;],
            belongsTo: &#39;User&#39;
            });
            We&#39;ve set up two models - User and Order - and told them about each other. You can set up as many associations on
            each Model as you need using the two default types - hasMany and
            belongsTo. There&#39;s much more detail on the usage of each of those inside their
            documentation pages. If you&#39;re not familiar with Models already, there is plenty on those too. Further Reading  hasMany associations belongsTo associations using Models  Self association models We can also have models that create parent/child associations between the same type. Below is an example, where
            groups can be nested inside other groups:
            // Server Data
            {
            &quot;groups&quot;: {
            &quot;id&quot;: 10,
            &quot;parent_id&quot;: 100,
            &quot;name&quot;: &quot;Main Group&quot;,
            &quot;parent_group&quot;: {
            &quot;id&quot;: 100,
            &quot;parent_id&quot;: null,
            &quot;name&quot;: &quot;Parent Group&quot;
            },
            &quot;child_groups&quot;: [{
            &quot;id&quot;: 2,
            &quot;parent_id&quot;: 10,
            &quot;name&quot;: &quot;Child Group 1&quot;
            },{
            &quot;id&quot;: 3,
            &quot;parent_id&quot;: 10,
            &quot;name&quot;: &quot;Child Group 2&quot;
            },{
            &quot;id&quot;: 4,
            &quot;parent_id&quot;: 10,
            &quot;name&quot;: &quot;Child Group 3&quot;
            }]
            }
            }
            // Client code
            Ext.define(&#39;Group&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;parent_id&#39;, &#39;name&#39;],
            proxy: {
            type: &#39;ajax&#39;,
            url: &#39;data.json&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;groups&#39;
            }
            },
            associations: [{
            type: &#39;hasMany&#39;,
            model: &#39;Group&#39;,
            primaryKey: &#39;id&#39;,
            foreignKey: &#39;parent_id&#39;,
            autoLoad: true,
            associationKey: &#39;child_groups&#39; // read child data from child_groups
            }, {
            type: &#39;belongsTo&#39;,
            model: &#39;Group&#39;,
            primaryKey: &#39;id&#39;,
            foreignKey: &#39;parent_id&#39;,
            autoLoad: true,
            associationKey: &#39;parent_group&#39; // read parent data from parent_group
            }]
            });
            Ext.onReady(function(){
            Group.load(10, {
            success: function(group){
            console.log(group.getGroup().get(&#39;name&#39;));
            group.groups().each(function(rec){
            console.log(rec.get(&#39;name&#39;));
            });
            }
            });
            });
            </summary>
        </member>
        <member name="M:Ext.data.Association.#ctor(System.Object)">
            <summary>
            Creates the Association object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Association.getReader">
            <summary>
            Get a specialized reader for reading associated data ...
            </summary>
        </member>
        <member name="P:Ext.data.Association.associatedName">
            <summary>
            The name of the model is on the other end of the association (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.associatedModel">
            <summary>
            The string name of the model that is being associated with. ...
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.associationKey">
            <summary>
            The name of the property in the data to read the association from. ...
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.ownerModel">
            <summary>
            The string name of the model that owns the association. ...
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.primaryKey">
            <summary>
            The name of the primary key on the associated model. ...
            </summary>
        </member>
        <member name="T:Ext.chart.series.Scatter">
            <summary>
            Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
            These variables can be mapped into x, y coordinates and also to an element&#39;s radius/size, color, etc.
            As with all other series, the Scatter Series must be appended in the series Chart array configuration. See the Chart
            documentation for more information on creating charts. A typical configuration object for the scatter could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            theme:&#39;Category2&#39;,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;],
            title: &#39;Sample Values&#39;,
            grid: true,
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;left&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;
            }],
            series: [{
            type: &#39;scatter&#39;,
            markerConfig: {
            radius: 5,
            size: 5
            },
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data2&#39;
            }, {
            type: &#39;scatter&#39;,
            markerConfig: {
            radius: 5,
            size: 5
            },
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data3&#39;
            }]
            });
            In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
            data1, data2 and data3 respectively. All x-fields for the series must be the same field, in this case name.
            Each scatter series has a different styling configuration for markers, specified by the markerConfig object. Finally we set the left axis as
            axis to show the current values of the elements.
            </summary>
        </member>
        <member name="T:Ext.chart.series.Cartesian">
            <summary>
            Common base class for series implementations which plot values using x/y coordinates.
            </summary>
        </member>
        <member name="T:Ext.chart.series.Series">
            <summary>
            Series is the abstract class containing the common logic to all chart series. Series includes
            methods from Labels, Highlights, Tips and Callouts mixins. This class implements the logic of handling
            mouse events, animating, hiding, showing all elements and returning the color of the series to be used as a legend item. Listeners The series class supports listeners via the Observable syntax. Some of these listeners are:  itemmouseup When the user interacts with a marker. itemmousedown When the user interacts with a marker. itemmousemove When the user iteracts with a marker. afterrender Will be triggered when the animation ends or when the series has been rendered completely.  For example: series: [{
            type: &#39;column&#39;,
            axis: &#39;left&#39;,
            listeners: {
            &#39;afterrender&#39;: function() {
            console(&#39;afterrender&#39;);
            }
            },
            xField: &#39;category&#39;,
            yField: &#39;data1&#39;
            }]
            </summary>
        </member>
        <member name="T:Ext.chart.Label">
            <summary>
            Labels is a mixin whose methods are appended onto the Series class. Labels is an interface with methods implemented
            in each of the Series (Pie, Bar, etc) for label creation and label placement. The methods implemented by the Series are:  onCreateLabel(storeItem, item, i, display) Called each time a new label is created.
            The arguments of the method are:  storeItem The element of the store that is related to the label sprite. item The item related to the label sprite. An item is an object containing the position of the shape
            used to describe the visualization and also pointing to the actual shape (circle, rectangle, path, etc). i The index of the element created (i.e the first created label, second created label, etc) display The display type. May be false if the label is hidden   onPlaceLabel(label, storeItem, item, i, display, animate) Called for updating the position of the label.
            The arguments of the method are:  label The sprite label. storeItem The element of the store that is related to the label sprite item The item related to the label sprite. An item is an object containing the position of the shape
            used to describe the visualization and also pointing to the actual shape (circle, rectangle, path, etc). i The index of the element to be updated (i.e. whether it is the first, second, third from the labelGroup) display The display type. May be false if the label is hidden. animate A boolean value to set or unset animations for the labels.
            </summary>
        </member>
        <member name="T:Ext.chart.Highlight">
            <summary>
            A mixin providing highlight functionality for Ext.chart.series.Series.
            </summary>
        </member>
        <member name="M:Ext.chart.Highlight.highlightItem(System.Object)">
            <summary>
            Highlight the given series item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.Highlight.unHighlightItem">
            <summary>
            Un-highlight any existing highlights ...
            </summary>
        </member>
        <member name="T:Ext.chart.Tip">
            <summary>
            Provides tips for Ext.chart.series.Series.
            </summary>
        </member>
        <member name="T:Ext.chart.Callout">
            <summary>
            A mixin providing callout functionality for Ext.chart.series.Series.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.getItemForPoint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            For a given x/y point relative to the Surface, find a corresponding item from this
            series, if any. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.getLegendColor(System.Object)">
            <summary>
            Returns a string with the color to be used for the series legend item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.hideAll">
            <summary>
            Hides all the elements in the series. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.highlightItem(System.Object)">
            <summary>
            Highlight the given series item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.setTitle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Changes the value of the title for the series. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.showAll">
            <summary>
            Shows all the elements in the series. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Series.unHighlightItem">
            <summary>
            Un-highlight any existing highlights ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Scatter.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.color">
            <summary>
            The color of the label text. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.display">
            <summary>
            Specifies the presence and position of labels for each pie slice. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.field">
            <summary>
            The name of the field to be displayed in the label. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.font">
            <summary>
            The font used for the labels. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.highlight">
            <summary>
            If set to true it will highlight the markers or the series when hovering
            with the mouse. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.listeners">
            <summary>
            An (optional) object with event callbacks. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.minMargin">
            <summary>
            Specifies the minimum distance from a label to the origin of the visualization. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.orientation">
            <summary>
            Either "horizontal" or "vertical". ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.renderer">
            <summary>
            A function that can be overridden to set custom styling properties to each rendered element. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.tips">
            <summary>
            Add tooltips to the visualization's markers. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.SeriesConfig.type">
            <summary>
            The type of series. ...
            </summary>
        </member>
        <member name="F:Ext.chart.series.SeriesEvents.titlechange">
            <summary>
            Fires when the series title is changed via setTitle. ...
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Numeric">
            <summary>
            An axis to handle numeric values. This axis is used for quantitative data as
            opposed to the category axis. You can set mininum and maximum values to the
            axis so that the values are bound to that. If no values are set, then the
            scale will auto-adjust to the values.  For example: var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            grid: true,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            title: &#39;Sample Values&#39;,
            grid: {
            odd: {
            opacity: 1,
            fill: &#39;#ddd&#39;,
            stroke: &#39;#bbb&#39;,
            &#39;stroke-width&#39;: 1
            }
            },
            minimum: 0,
            adjustMinimumByMajorUnit: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;,
            grid: true,
            label: {
            rotate: {
            degrees: 315
            }
            }
            }],
            series: [{
            type: &#39;area&#39;,
            highlight: false,
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            style: {
            opacity: 0.93
            }
            }]
            });
            In this example we create an axis of Numeric type. We set a minimum value so that
            even if all series have values greater than zero, the grid starts at zero. We bind
            the axis onto the left part of the surface by setting position to left.
            We bind three different store fields to this axis by setting fields to an array.
            We set the title of the axis to Number of Hits by using the title property.
            We use a grid configuration to set odd background rows to a certain style and even rows
            to be transparent/ignored.
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Axis">
            <summary>
            Defines axis for charts. The axis position, type, style can be configured.
            The axes are defined in an axes array of configuration objects where the type,
            field, grid and other configuration options can be set. To know more about how
            to create a Chart please check the Chart class documentation. Here&#39;s an example for the axes part:
            An example of axis for a series (in this case for an area chart that has multiple layers of yFields) could be: axes: [{
            type: &#39;Numeric&#39;,
            grid: true,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;],
            title: &#39;Number of Hits&#39;,
            grid: {
            odd: {
            opacity: 1,
            fill: &#39;#ddd&#39;,
            stroke: &#39;#bbb&#39;,
            &#39;stroke-width&#39;: 1
            }
            },
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Month of the Year&#39;,
            grid: true,
            label: {
            rotate: {
            degrees: 315
            }
            }
            }]
            In this case we use a Numeric axis for displaying the values of the Area series and a Category axis for displaying the names of
            the store elements. The numeric axis is placed on the left of the screen, while the category axis is placed at the bottom of the chart.
            Both the category and numeric axes have grid set, which means that horizontal and vertical lines will cover the chart background. In the
            category axis the labels will be rotated so they can fit the space better.
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Axis.drawAxis(System.Object)">
            <summary>
            Renders the axis into the screen and updates it's position. ...
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Axis.drawGrid">
            <summary>
            Renders an horizontal and/or vertical grid into the Surface. ...
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Axis.drawLabel">
            <summary>
            Renders the labels in the axes. ...
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Axis.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the title of this axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Numeric.decimals">
            <summary>
            The number of decimals to round the value to. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Numeric.maximum">
            <summary>
            The maximum value drawn by the axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Numeric.minimum">
            <summary>
            The minimum value drawn by the axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Numeric.scale">
            <summary>
            The scaling algorithm to use on this axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.dashSize">
            <summary>
            The size of the dash marker. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.grid">
            <summary>
            The grid configuration enables you to set a background grid for an axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.length">
            <summary>
            Offset axis position. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.minorTickSteps">
            <summary>
            The number of small ticks between two major ticks. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.position">
            <summary>
            Where to set the axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.AxisConfig.width">
            <summary>
            Offset axis width. ...
            </summary>
        </member>
        <member name="T:Ext.view.BoundList">
            <summary>
            An internal used DataView for ComboBox, MultiSelect and ItemSelector.
            </summary>
        </member>
        <member name="P:Ext.view.BoundList.pagingToolbar">
            <summary>
            A reference to the PagingToolbar instance in this view. ...
            </summary>
        </member>
        <member name="P:Ext.view.BoundListConfig.pageSize">
            <summary>
            If greater than 0, a Ext.toolbar.Paging is displayed at the
            bottom of the list and store queries will execute with pa...
            </summary>
        </member>
        <member name="T:Ext.util.HashMap">
            <summary>
            Represents a collection of a set of key and value pairs. Each key in the HashMap
            must be unique, the same key cannot exist twice. Access to items is provided via
            the key only. Sample usage:
            var map = new Ext.util.HashMap();
            map.add(&#39;key1&#39;, 1);
            map.add(&#39;key2&#39;, 2);
            map.add(&#39;key3&#39;, 3);
            map.each(function(key, value, length){
            console.log(key, value, length);
            });
            The HashMap is an unordered class,
            there is no guarantee when iterating over the items that they will be in any particular
            order. If this is required, then use a Ext.util.MixedCollection.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.#ctor(System.Object)">
            <summary>
            Creates new HashMap. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.add(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Adds an item to the collection. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.clear(System.Object)">
            <summary>
            Removes all items from the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.clone">
            <summary>
            Performs a shallow copy on this hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.contains(System.Object)">
            <summary>
            Checks whether a value exists in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.containsKey(SharpKit.JavaScript.JsString)">
            <summary>
            Checks whether a key exists in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for each item in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.get(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves an item with a particular key. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getCount">
            <summary>
            Gets the number of items in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getKey(System.Object)">
            <summary>
            Extracts the key from an object. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getKeys">
            <summary>
            Return all of the keys in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getValues">
            <summary>
            Return all of the values in the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.remove(System.Object)">
            <summary>
            Remove an item from the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.removeAtKey(SharpKit.JavaScript.JsString)">
            <summary>
            Remove an item from the hash. ...
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.replace(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Replaces an item in the hash. ...
            </summary>
        </member>
        <member name="P:Ext.util.HashMapConfig.keyFn">
            <summary>
            A function that is used to retrieve a default key for a passed object. ...
            </summary>
        </member>
        <member name="F:Ext.util.HashMapEvents.add">
            <summary>
            Fires when a new item is added to the hash ...
            </summary>
        </member>
        <member name="F:Ext.util.HashMapEvents.clear">
            <summary>
            Fires when the hash is cleared. ...
            </summary>
        </member>
        <member name="F:Ext.util.HashMapEvents.remove">
            <summary>
            Fires when an item is removed from the hash. ...
            </summary>
        </member>
        <member name="F:Ext.util.HashMapEvents.replace">
            <summary>
            Fires when an item is replaced in the hash. ...
            </summary>
        </member>
        <member name="T:Ext.tip.Tip">
            <summary>
            This is the base class for Ext.tip.QuickTip and Ext.tip.ToolTip that provides the basic layout and
            positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
            tips that are displayed programmatically, or it can be extended to provide custom tip implementations.
            </summary>
        </member>
        <member name="M:Ext.tip.Tip.showAt(SharpKit.JavaScript.JsArray)">
            <summary>
            Shows this tip at the specified XY position. ...
            </summary>
        </member>
        <member name="M:Ext.tip.Tip.showBy(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Experimental. ...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.closeAction">
            <summary>
            The action to take when the close header tool is clicked:
            'destroy' :
            remove the window from the DOM and destroy
            it...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.constrainPosition">
            <summary>
            If true, then the tooltip will be automatically constrained to stay within
            the browser viewport. ...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.defaultAlign">
            <summary>
            Experimental. ...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.maxWidth">
            <summary>
            The maximum width of the tip in pixels (defaults to 300). ...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.shadow">
            <summary>
            True or "sides" for the default effect, "frame" for 4-way shadow, and "drop"
            for bottom-right shadow (defaults to "si...
            </summary>
        </member>
        <member name="P:Ext.tip.TipConfig.width">
            <summary>
            Width in pixels of the tip (defaults to auto). ...
            </summary>
        </member>
        <member name="T:Ext.String">
            <summary>
            A collection of useful static methods to deal with strings
            </summary>
        </member>
        <member name="M:Ext.String.capitalize(SharpKit.JavaScript.JsString)">
            <summary>
            Capitalize the given string ...
            </summary>
        </member>
        <member name="M:Ext.String.ellipsis(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length ...
            </summary>
        </member>
        <member name="M:Ext.String.escape(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for ' and \ ...
            </summary>
        </member>
        <member name="M:Ext.String.escapeRegex(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for use in a regular expression ...
            </summary>
        </member>
        <member name="M:Ext.String.format(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens. ...
            </summary>
        </member>
        <member name="M:Ext.String.htmlDecode(SharpKit.JavaScript.JsString)">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') from their HTML character equivalents. ...
            </summary>
        </member>
        <member name="M:Ext.String.htmlEncode(SharpKit.JavaScript.JsString)">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') to their HTML character equivalents for literal display in web pages. ...
            </summary>
        </member>
        <member name="M:Ext.String.leftPad(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Pads the left side of a string with a specified character. ...
            </summary>
        </member>
        <member name="M:Ext.String.toggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Utility function that allows you to easily switch a string between two alternating values. ...
            </summary>
        </member>
        <member name="M:Ext.String.trim(SharpKit.JavaScript.JsString)">
            <summary>
            Trims whitespace from either end of a string, leaving spaces within the string intact. ...
            </summary>
        </member>
        <member name="M:Ext.String.urlAppend(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Appends content to the query string of a URL, handling logic for whether to place
            a question mark or ampersand. ...
            </summary>
        </member>
        <member name="T:Ext.state.LocalStorageProvider">
            <summary>
            A Provider implementation which saves and retrieves state via the HTML5 localStorage object.
            If the browser does not support local storage, an exception will be thrown upon instantiating
            this class.
            </summary>
        </member>
        <member name="T:Ext.state.Provider">
            <summary>
            Abstract base class for state provider implementations. The provider is responsible
            for setting values  and extracting values to/from the underlying storage source. The
            storage source can vary and the details should be implemented in a subclass. For example
            a provider could use a server side database or the browser localstorage where supported. This class provides methods for encoding and decoding typed variables including
            dates and defines the Provider interface. By default these methods put the value and the
            type information into a delimited string that can be stored. These should be overridden in
            a subclass if you want to change the format of the encoded value and subsequent decoding.
            </summary>
        </member>
        <member name="M:Ext.state.Provider.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.clear(SharpKit.JavaScript.JsString)">
            <summary>
            Clears a value from the state ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.decodeValue(SharpKit.JavaScript.JsString)">
            <summary>
            Decodes a string previously encoded with encodeValue. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.encodeValue(System.Object)">
            <summary>
            Encodes a value including type information. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.get(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the current value for a key ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets the value for a key ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.state.Provider.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.state.ProviderConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.state.ProviderConfig.prefix">
            <summary>
            A string to prefix to items stored in the underlying state store. ...
            </summary>
        </member>
        <member name="F:Ext.state.ProviderEvents.statechange">
            <summary>
            Fires when a state change occurs. ...
            </summary>
        </member>
        <member name="T:Ext.picker.Time">
            <summary>
            A time picker which provides a list of times from which to choose. This is used by the
            Ext.form.field.Time class to allow browsing and selection of valid times, but could also be used
            with other components. By default, all times starting at midnight and incrementing every 15 minutes will be presented.
            This list of available times can be controlled using the minValue, maxValue, and
            increment configuration properties. The format of the times presented in the list can be
            customized with the format config. To handle when the user selects a time from the list, you can subscribe to the selectionchange
            event.  Code  new Ext.create(&#39;Ext.picker.Time&#39;, {
            width: 60,
            minValue: Ext.Date.parse(&#39;04:30:00 AM&#39;, &#39;h:i:s A&#39;),
            maxValue: Ext.Date.parse(&#39;08:00:00 AM&#39;, &#39;h:i:s A&#39;),
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="M:Ext.picker.Time.setMaxValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Set the maxValue and update the list of available times. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Time.setMinValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Set the minValue and update the list of available times. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Time.updateList">
            <summary>
            Update the list of available times in the list to be constrained within the
            minValue and maxValue. ...
            </summary>
        </member>
        <member name="P:Ext.picker.TimeConfig.format">
            <summary>
            The default time format string which can be overriden for localization support. ...
            </summary>
        </member>
        <member name="P:Ext.picker.TimeConfig.maxValue">
            <summary>
            The maximum time to be shown in the list of times. ...
            </summary>
        </member>
        <member name="P:Ext.picker.TimeConfig.minValue">
            <summary>
            The minimum time to be shown in the list of times. ...
            </summary>
        </member>
        <member name="T:Ext.grid.Panel">
            <summary>
            Grids are an excellent way of showing large amounts of tabular data on the client side. Essentially a supercharged
            &amp;lt;table&amp;gt;, GridPanel makes it easy to fetch, sort and filter large amounts of data. Grids are composed of 2 main pieces - a Store full of data and a set of columns to render.  Basic GridPanel Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;simpsonsStore&#39;,
            fields:[&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            data:{&#39;items&#39;:[
            {&quot;name&quot;:&quot;Lisa&quot;, &quot;email&quot;:&quot;lisa@simpsons.com&quot;, &quot;phone&quot;:&quot;555-111-1224&quot;},
            {&quot;name&quot;:&quot;Bart&quot;, &quot;email&quot;:&quot;bart@simpsons.com&quot;, &quot;phone&quot;:&quot;555--222-1234&quot;},
            {&quot;name&quot;:&quot;Homer&quot;, &quot;email&quot;:&quot;home@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1244&quot;},
            {&quot;name&quot;:&quot;Marge&quot;, &quot;email&quot;:&quot;marge@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1254&quot;}
            ]},
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;
            }
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: Ext.data.StoreManager.lookup(&#39;simpsonsStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1},
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            The code above produces a simple grid with three columns. We specified a Store which will load JSON data inline.
            In most apps we would be placing the grid inside another container and wouldn&#39;t need to use the
            height, width and renderTo configurations but they are included here to make it easy to get
            up and running. The grid we created above will contain a header bar with a title (&#39;Simpsons&#39;), a row of column headers directly underneath
            and finally the grid rows under the headers. Configuring columns By default, each column is sortable and will toggle between ASC and DESC sorting when you click on its header. Each
            column header is also reorderable by default, and each gains a drop-down menu with options to hide and show columns.
            It&#39;s easy to configure each column - here we use the same example as above and just modify the columns config: columns: [
            {
            header: &#39;Name&#39;,
            dataIndex: &#39;name&#39;,
            sortable: false,
            hideable: false,
            flex: 1
            },
            {
            header: &#39;Email&#39;,
            dataIndex: &#39;email&#39;,
            hidden: true
            },
            {
            header: &#39;Phone&#39;,
            dataIndex: &#39;phone&#39;,
            width: 100
            }
            ]
            We turned off sorting and hiding on the &#39;Name&#39; column so clicking its header now has no effect. We also made the Email
            column hidden by default (it can be shown again by using the menu on any other column). We also set the Phone column to
            a fixed with of 100px and flexed the Name column, which means it takes up all remaining width after the other columns
            have been accounted for. See the column docs for more details. Renderers As well as customizing columns, it&#39;s easy to alter the rendering of individual cells using renderers. A renderer is
            tied to a particular column and is passed the value that would be rendered into each cell in that column. For example,
            we could define a renderer function for the email column to turn each email address into a mailto link: columns: [
            {
            header: &#39;Email&#39;,
            dataIndex: &#39;email&#39;,
            renderer: function(value) {
            return Ext.String.format(&#39;&amp;lt;a href=&quot;mailto:{0}&quot;&amp;gt;{1}&amp;lt;/a&amp;gt;&#39;, value, value);
            }
            }
            ]
            See the column docs for more information on renderers. Selection Models Sometimes all you want is to render data onto the screen for viewing, but usually it&#39;s necessary to interact with or
            update that data. Grids use a concept called a Selection Model, which is simply a mechanism for selecting some part of
            the data in the grid. The two main types of Selection Model are RowSelectionModel, where entire rows are selected, and
            CellSelectionModel, where individual cells are selected. Grids use a Row Selection Model by default, but this is easy to customise like so: Ext.create(&#39;Ext.grid.Panel&#39;, {
            selType: &#39;cellmodel&#39;,
            store: ...
            });
            Specifying the cellmodel changes a couple of things. Firstly, clicking on a cell now
            selects just that cell (using a rowmodel will select the entire row), and secondly the
            keyboard navigation will walk from cell to cell instead of row to row. Cell-based selection models are usually used in
            conjunction with editing.  Editing Grid has built-in support for in-line editing. There are two chief editing modes - cell editing and row editing. Cell
            editing is easy to add to your existing column setup - here we&#39;ll just modify the example above to include an editor
            on both the name and the email columns: Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: Ext.data.StoreManager.lookup(&#39;simpsonsStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;, field: &#39;textfield&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1,
            field:{
            xtype:&#39;textfield&#39;,
            allowBlank:false
            }
            },
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            selType: &#39;cellmodel&#39;,
            plugins: [
            Ext.create(&#39;Ext.grid.plugin.CellEditing&#39;, {
            clicksToEdit: 1
            })
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            This requires a little explanation. We&#39;re passing in store and columns as normal, but
            this time we&#39;ve also specified a field on two of our columns. For the Name column we just want a default
            textfield to edit the value, so we specify &#39;textfield&#39;. For the Email column we customized the editor slightly by
            passing allowBlank: false, which will provide inline validation. To support cell editing, we also specified that the grid should use the &#39;cellmodel&#39; selType, and created an
            instance of the CellEditing plugin, which we configured to activate each editor after a
            single click.  Row Editing The other type of editing is row-based editing, using the RowEditor component. This enables you to edit an entire row
            at a time, rather than editing cell by cell. Row Editing works in exactly the same way as cell editing, all we need to
            do is change the plugin type to Ext.grid.plugin.RowEditing, and set the selType to &#39;rowmodel&#39;: Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: Ext.data.StoreManager.lookup(&#39;simpsonsStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;, field: &#39;textfield&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1,
            field:{
            xtype:&#39;textfield&#39;,
            allowBlank:false
            }
            },
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            selType: &#39;rowmodel&#39;,
            plugins: [
            Ext.create(&#39;Ext.grid.plugin.RowEditing&#39;, {
            clicksToEdit: 1
            })
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            Again we passed some configuration to our Ext.grid.plugin.RowEditing plugin, and now when we click each row a row
            editor will appear and enable us to edit each of the columns we have specified an editor for. Sorting &amp;amp; Filtering Every grid is attached to a Store, which provides multi-sort and filtering capabilities. It&#39;s
            easy to set up a grid to be sorted from the start: var myGrid = Ext.create(&#39;Ext.grid.Panel&#39;, {
            store: {
            fields: [&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            sorters: [&#39;name&#39;, &#39;phone&#39;]
            },
            columns: [
            {text: &#39;Name&#39;,  dataIndex: &#39;name&#39;},
            {text: &#39;Email&#39;, dataIndex: &#39;email&#39;}
            ]
            });
            Sorting at run time is easily accomplished by simply clicking each column header. If you need to perform sorting on
            more than one field at run time it&#39;s easy to do so by adding new sorters to the store: myGrid.store.sort([
            {property: &#39;name&#39;,  direction: &#39;ASC&#39;},
            {property: &#39;email&#39;, direction: &#39;DESC&#39;},
            ]);
            Grouping Grid supports the grouping of rows by any field. For example if we had a set of employee records, we might want to
            group by the department that each employee works in. Here&#39;s how we might set that up: var store = Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;employeeStore&#39;,
            fields:[&#39;name&#39;, &#39;senority&#39;, &#39;department&#39;],
            groupField: &#39;department&#39;,
            data:{&#39;employees&#39;:[
            {&quot;name&quot;:&quot;Michael Scott&quot;, &quot;senority&quot;:7, &quot;department&quot;:&quot;Manangement&quot;},
            {&quot;name&quot;:&quot;Dwight Schrute&quot;, &quot;senority&quot;:2, &quot;department&quot;:&quot;Sales&quot;},
            {&quot;name&quot;:&quot;Jim Halpert&quot;, &quot;senority&quot;:3, &quot;department&quot;:&quot;Sales&quot;},
            {&quot;name&quot;:&quot;Kevin Malone&quot;, &quot;senority&quot;:4, &quot;department&quot;:&quot;Accounting&quot;},
            {&quot;name&quot;:&quot;Angela Martin&quot;, &quot;senority&quot;:5, &quot;department&quot;:&quot;Accounting&quot;}
            ]},
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;employees&#39;
            }
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Employees&#39;,
            store: Ext.data.StoreManager.lookup(&#39;employeeStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;},
            {header: &#39;Senority&#39;, dataIndex: &#39;senority&#39;}
            ],
            features: [{ftype:&#39;grouping&#39;}],
            width: 200,
            height: 275,
            renderTo: Ext.getBody()
            });
            Infinite Scrolling Grid supports infinite scrolling as an alternative to using a paging toolbar. Your users can scroll through thousands
            of records without the performance penalties of renderering all the records on screen at once. The grid should be bound
            to a store with a pageSize specified. var grid = Ext.create(&#39;Ext.grid.Panel&#39;, {
            // Use a PagingGridScroller (this is interchangeable with a PagingToolbar)
            verticalScrollerType: &#39;paginggridscroller&#39;,
            // do not reset the scrollbar when the view refreshs
            invalidateScrollerOnRefresh: false,
            // infinite scrolling does not support selection
            disableSelection: true,
            // ...
            });
            Paging Grid supports paging through large sets of data via a PagingToolbar or PagingGridScroller (see the Infinite Scrolling section above).
            To leverage paging via a toolbar or scroller, you need to set a pageSize configuration on the Store. var itemsPerPage = 2;   // set the number of items you want per page
            var store = Ext.create(&#39;Ext.data.Store&#39;, {
            id:&#39;simpsonsStore&#39;,
            autoLoad: false,
            fields:[&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            pageSize: itemsPerPage, // items per page
            proxy: {
            type: &#39;ajax&#39;,
            url: &#39;pagingstore.js&#39;,  // url that will load data with respect to start and limit params
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;,
            totalProperty: &#39;total&#39;
            }
            }
            });
            // specify segment of data you want to load using params
            store.load({
            params:{
            start:0,
            limit: itemsPerPage
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: store,
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1},
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            width: 400,
            height: 125,
            dockedItems: [{
            xtype: &#39;pagingtoolbar&#39;,
            store: store,   // same store GridPanel is using
            dock: &#39;bottom&#39;,
            displayInfo: true
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.HtmlEditor">
            <summary>
            Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be
            automatically hidden when needed. These are noted in the config options where appropriate. The editor&#39;s toolbar buttons have tooltips defined in the buttonTips property, but they are not
            enabled by default unless the global Ext.tip.QuickTipManager singleton is initialized. An Editor is a sensitive component that can&#39;t be used in all spots standard fields can be used. Putting an Editor within
            any element that has display set to &#39;none&#39; can cause problems in Safari and Firefox due to their default iframe reloading bugs.  Example usage  // Simple example rendered with default options:
            Ext.tip.QuickTips.init();  // enable tooltips
            Ext.create(&#39;Ext.form.HtmlEditor&#39;, {
            width: 580,
            height: 250,
            renderTo: Ext.getBody()
            });
            // Passed via xtype into a container and with custom options:
            Ext.tip.QuickTips.init();  // enable tooltips
            new Ext.panel.Panel({
            title: &#39;HTML Editor&#39;,
            renderTo: Ext.getBody(),
            width: 550,
            height: 250,
            frame: true,
            layout: &#39;fit&#39;,
            items: {
            xtype: &#39;htmleditor&#39;,
            enableColors: false,
            enableAlignments: false
            }
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.batchChanges(System.Object)">
            <summary>
            A utility for grouping a set of modifications which may trigger value changes into a single
            transaction, to prevent e...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.checkChange">
            <summary>
            Checks whether the value of the field has changed since the last time it was checked. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.checkDirty">
            <summary>
            Checks the isDirty state of the field and if it has changed since the last time
            it was checked, fires the dirtychange...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.cleanHtml(SharpKit.JavaScript.JsString)">
            <summary>
            Protected method that will not generally be called directly. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.clearInvalid">
            <summary>
            Clear any invalid styles/messages for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.execCmd(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Executes a Midas editor command directly on the editor document. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.extractFileInput">
            <summary>
            Only relevant if the instance's isFileUpload method returns true. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getActiveError">
            <summary>
            Gets the active error message for this component, if any. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getActiveErrors">
            <summary>
            Gets an Array of any active error messages currently applied to the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getBodyNaturalWidth">
            <summary>
            Calculate and return the natural width of the bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getDocMarkup">
            <summary>
            Protected method that will not generally be called directly. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getErrors(System.Object)">
            <summary>
            Runs this field's validators and returns an array of error messages for any validation failures. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getFieldLabel">
            <summary>
            Returns the label for the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getInputId">
            <summary>
            Get the input id, if any, for this component. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getLabelableRenderData">
            <summary>
            Generates the arguments for the field decorations rendering template. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getLabelableSelectors">
            <summary>
            Returns the additional Ext.AbstractComponent.renderSelectors for selecting the field
            decoration elements from the ren...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getModelData">
            <summary>
            Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when
            Ext.form.Basic.updateRe...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getName">
            <summary>
            Returns the name attribute of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getSubTplMarkup">
            <summary>
            Gets the markup to be inserted into the outer template's bodyEl. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getSubmitData">
            <summary>
            Returns the parameter(s) that would be included in a standard form submit for this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getToolbar">
            <summary>
            Returns the editor's toolbar. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.getValue">
            <summary>
            Returns the current data value of the field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.hasActiveError">
            <summary>
            Tells whether the field currently has an active error message. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.initField">
            <summary>
            Initializes this Field mixin on the current instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.initLabelable">
            <summary>
            Performs initialization of this mixin. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.initValue">
            <summary>
            Initializes the field's value based on the initial config. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.insertAtCursor(SharpKit.JavaScript.JsString)">
            <summary>
            Inserts the passed text at the current cursor position. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.isDirty">
            <summary>
            Returns true if the value of this Field has been changed from its originalValue. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.isEqual(System.Object,System.Object)">
            <summary>
            Returns whether two field values are logically equal. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.isFileUpload">
            <summary>
            Returns whether this Field is a file upload field; if it returns true, forms will use
            special techniques for submitti...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.isValid">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.markInvalid(System.Object)">
            <summary>
            Associate one or more error messages with this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.pushValue">
            <summary>
            method that will not generally be called directly. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.relayCmd(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and
            toolbar updates. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.resetOriginalValue">
            <summary>
            Resets the field's originalValue property so it matches the current value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.setActiveError(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the active error message to the given string. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.setActiveErrors(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the active error message to an Array of error messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.setFieldDefaults(System.Object)">
            <summary>
            Applies a set of default configuration values to this Labelable instance. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.setReadOnly(System.Boolean)">
            <summary>
            Sets the read only state of this field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.setValue(System.Object)">
            <summary>
            Sets a data value into the field and runs the change detection and validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.syncValue">
            <summary>
            method that will not generally be called directly. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.toggleSourceEdit(System.Boolean)">
            <summary>
            Toggles the editor between standard and source edit mode. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.unsetActiveError">
            <summary>
            Clears the active error message(s). ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.updateToolbar">
            <summary>
            Protected method that will not generally be called directly. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.HtmlEditor.validate">
            <summary>
            Returns whether or not the field value is currently valid by validating the
            field's current value, and fires the vali...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.bodyEl">
            <summary>
            The div Element wrapping the component's contents. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.buttonTips">
            <summary>
            Object collection of toolbar tooltips for the buttons in the editor. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.errorEl">
            <summary>
            The div Element that will contain the component's error message(s). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.isFieldLabelable">
            <summary>
            Flag denoting that this object is labelable as a field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.isFormField">
            <summary>
            Flag denoting that this component is a Field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.labelEl">
            <summary>
            The label Element for this component. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditor.originalValue">
            <summary>
            The original value of the field as configured in the value configuration, or as loaded by
            the last form load operatio...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.activeError">
            <summary>
            If specified, then the component will be displayed with this value as its active error when
            first rendered. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.activeErrorsTpl">
            <summary>
            The template used to format the Array of error messages passed to setActiveErrors
            into a single HTML string. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.autoFitErrors">
            <summary>
            Whether to adjust the component's body area to make room for 'side' or 'under'
            error messages. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.baseBodyCls">
            <summary>
            The CSS class to be applied to the body content element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.clearCls">
            <summary>
            The CSS class to be applied to the special clearing div rendered directly after the field
            contents wrapper to provide...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.defaultValue">
            <summary>
            A default value to be put into the editor to resolve focus issues (defaults to &#160; (Non-breaking space) in Opera a...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.disabled">
            <summary>
            True to disable the field (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.enableFont">
            <summary>
            Enable font selection. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.enableLinks">
            <summary>
            Enable the create link button. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.enableLists">
            <summary>
            Enable the bullet and numbered list buttons. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.enableSourceEdit">
            <summary>
            Enable the switch to source edit button. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.errorMsgCls">
            <summary>
            The CSS class to be applied to the error message element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.fieldLabel">
            <summary>
            The label for the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.formItemCls">
            <summary>
            A CSS class to be applied to the outermost element to denote that it is participating in the form
            field layout. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.hideEmptyLabel">
            <summary>
            When set to true, the label element (fieldLabel and labelSeparator) will be
            automatically hidden if the fieldLabel is...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.hideLabel">
            <summary>
            Set to true to completely hide the label element (fieldLabel and labelSeparator). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelAlign">
            <summary>
            Controls the position and alignment of the fieldLabel. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelCls">
            <summary>
            The CSS class to be applied to the label element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelPad">
            <summary>
            The amount of space in pixels between the fieldLabel and the input field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelWidth">
            <summary>
            The width of the fieldLabel in pixels. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.labelableRenderTpl">
            <summary>
            The rendering template for the field decorations. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.msgTarget">
            <summary>
            The location where the error message text should display. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.name">
            <summary>
            The name of the field (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.preventMark">
            <summary>
            true to disable displaying any error message set on this object. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.submitValue">
            <summary>
            Setting this to false will prevent the field from being
            submitted even when it is not disabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.HtmlEditorConfig.validateOnChange">
            <summary>
            Specifies whether this field should be validated immediately whenever a change in its value is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.activate">
            <summary>
            Fires when the editor is first receives the focus. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.beforepush">
            <summary>
            Fires before the iframe editor is updated with content from the textarea. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.beforesync">
            <summary>
            Fires before the textarea is updated with content from the editor iframe. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.change">
            <summary>
            Fires when a user-initiated change is detected in the value of the field. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.dirtychange">
            <summary>
            Fires when a change in the field's isDirty state is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.editmodechange">
            <summary>
            Fires when the editor switches edit modes ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.errorchange">
            <summary>
            Fires when the active error message is changed via setActiveError. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.initialize">
            <summary>
            Fires when the editor is fully initialized (including the iframe) ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.push">
            <summary>
            Fires when the iframe editor is updated with content from the textarea. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.sync">
            <summary>
            Fires when the textarea is updated with content from the editor iframe. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.HtmlEditorEvents.validitychange">
            <summary>
            Fires when a change in the field's validity is detected. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FieldConfig.disabled">
            <summary>
            True to disable the field (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FieldConfig.name">
            <summary>
            The name of the field (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FieldConfig.submitValue">
            <summary>
            Setting this to false will prevent the field from being
            submitted even when it is not disabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FieldConfig.validateOnChange">
            <summary>
            Specifies whether this field should be validated immediately whenever a change in its value is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.FieldEvents.change">
            <summary>
            Fires when a user-initiated change is detected in the value of the field. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.FieldEvents.dirtychange">
            <summary>
            Fires when a change in the field's isDirty state is detected. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.FieldEvents.validitychange">
            <summary>
            Fires when a change in the field's validity is detected. ...
            </summary>
        </member>
        <member name="T:Ext.env.Browser">
            <summary>
            Provide useful information about the current browser.
            Should not be manually instantiated unless for unit-testing; access the global instance stored in Ext.browser instead. Example: if (Ext.browser.is.IE) {
            // IE specific code here
            }
            if (Ext.browser.is.WebKit) {
            // WebKit specific code here
            }
            console.log(&quot;Version &quot; + Ext.browser.version);
            For a full list of supported values, refer to: is @borrows Ext.Base.extend
            </summary>
        </member>
        <member name="M:Ext.env.Browser.is(SharpKit.JavaScript.JsString)">
            <summary>
            A "hybrid" property, can be either accessed as a method call, i.e:
            if (Ext.browser.is('IE')) { ... ...
            </summary>
        </member>
        <member name="T:Ext.dd.DropZone">
            <summary>
            This class provides a container DD instance that allows dropping on multiple child target nodes. By default, this class requires that child nodes accepting drop are registered with Ext.dd.Registry.
            However a simpler way to allow a DropZone to manage any number of target elements is to configure the
            DropZone with an implementation of getTargetFromEvent which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event&#39;s getTarget method to identify a node based on a
            Ext.DomQuery selector. Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
            a drop target, that target is passed as the first parameter to onNodeEnter, onNodeOver,
            onNodeOut, onNodeDrop. You may configure the instance of DropZone with implementations
            of these methods to provide application-specific behaviour for these events to update both
            application state, and UI state. For example to make a GridPanel a cooperating target with the example illustrated in
            DragZone, the following technique might be used: myGridPanel.on(&#39;render&#39;, function() {
            myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
            // If the mouse is over a grid row, return that node. This is
            // provided as the &quot;target&quot; parameter in all &quot;onNodeXXXX&quot; node event handling functions
            getTargetFromEvent: function(e) {
            return e.getTarget(myGridPanel.getView().rowSelector);
            },
            // On entry into a target node, highlight that node.
            onNodeEnter : function(target, dd, e, data){
            Ext.fly(target).addCls(&#39;my-row-highlight-class&#39;);
            },
            // On exit from a target node, unhighlight that node.
            onNodeOut : function(target, dd, e, data){
            Ext.fly(target).removeCls(&#39;my-row-highlight-class&#39;);
            },
            // While over a target node, return the default drop allowed class which
            // places a &quot;tick&quot; icon into the drag proxy.
            onNodeOver : function(target, dd, e, data){
            return Ext.dd.DropZone.prototype.dropAllowed;
            },
            // On node drop we can interrogate the target to find the underlying
            // application object that is the real target of the dragged data.
            // In this case, it is a Record in the GridPanel&#39;s Store.
            // We can use the data set up by the DragZone&#39;s getDragData method to read
            // any data we decided to attach in the DragZone&#39;s getDragData method.
            onNodeDrop : function(target, dd, e, data){
            var rowIndex = myGridPanel.getView().findRowIndex(target);
            var r = myGridPanel.getStore().getAt(rowIndex);
            Ext.Msg.alert(&#39;Drop gesture&#39;, &#39;Dropped Record id &#39; + data.draggedRecord.id +
            &#39; on Record id &#39; + r.id);
            return true;
            }
            });
            }
            See the DragZone documentation for details about building a DragZone which
            cooperates with this DropZone.
            </summary>
        </member>
        <member name="T:Ext.dd.DropTarget">
            <summary>
            A simple class that provides the basic implementation needed to make any element a drop target that can have
            draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.
            </summary>
        </member>
        <member name="T:Ext.dd.DDTarget">
            <summary>
            A DragDrop implementation that does not move, but can be a drop
            target.  You would get the same result by simply omitting implementation
            for the event callbacks, but this way we reduce the processing cost of the
            event listener and the callbacks.
            </summary>
        </member>
        <member name="M:Ext.dd.DDTarget.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates new DDTarget. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.#ctor(System.Object,System.Object)">
            <summary>
            Creates new DropTarget. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyDrop(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the dragged item has
            been dropped on it. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyEnter(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the source is now over the
            target. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyOut(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the source has been dragged
            out of the ta...
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyOver(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls continuously while it is being dragged over the target. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.getTargetFromEvent(Ext.direct.Event)">
            <summary>
            Returns a custom data object associated with the DOM node that is the target of the event. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.notifyDrop(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop zone that the dragged item has
            been dropped on it. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.notifyEnter(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop zone that the source is now over
            the zone. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.notifyOut(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop zone that the source has been dragged
            out of the zone...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.notifyOver(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            The function a Ext.dd.DragSource calls continuously while it is being dragged over the drop zone. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onContainerDrop(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dropped on it,
            but not on any of its registered...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onContainerOver(Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called while the DropZone determines that a Ext.dd.DragSource is being dragged over it,
            but not over any of its regis...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onNodeDrop(System.Object,Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dropped onto
            the drop node. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onNodeEnter(System.Object,Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has entered a drop node
            that has either been registered ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onNodeOut(System.Object,Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dragged out of
            the drop node without dropping. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.onNodeOver(System.Object,Ext.dd.DragSource,Ext.direct.Event,System.Object)">
            <summary>
            Called while the DropZone determines that a Ext.dd.DragSource is over a drop node
            that has either been registered or ...
            </summary>
        </member>
        <member name="P:Ext.dd.DropTargetConfig.ddGroup">
            <summary>
            A named drag drop group to which this object belongs. ...
            </summary>
        </member>
        <member name="T:Ext.data.writer.Writer">
            <summary>
            Base Writer class used by most subclasses of Ext.data.proxy.Server. This class is
            responsible for taking a set of Ext.data.Operation objects and a Ext.data.Request
            object and modifying that request based on the Operations. For example a Ext.data.writer.Json would format the Operations and their Ext.data.Model
            instances based on the config options passed to the JsonWriter&#39;s constructor. Writers are not needed for any kind of local storage - whether via a
            Web Storage proxy (see localStorage
            and sessionStorage) or just in memory via a
            MemoryProxy.
            </summary>
        </member>
        <member name="M:Ext.data.writer.Writer.#ctor(System.Object)">
            <summary>
            Creates new Writer. ...
            </summary>
        </member>
        <member name="M:Ext.data.writer.Writer.getRecordData(System.Object)">
            <summary>
            Formats the data for each record before sending it to the server. ...
            </summary>
        </member>
        <member name="M:Ext.data.writer.Writer.write(Ext.data.Request)">
            <summary>
            Prepares a Proxy's Ext.data.Request object ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.WriterConfig.nameProperty">
            <summary>
            This property is used to read the key for each value that will be sent to the server. ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.WriterConfig.writeAllFields">
            <summary>
            True to write all fields from the record to the server. ...
            </summary>
        </member>
        <member name="T:Ext.data.reader.Array">
            <summary>
            Data reader class to create an Array of Ext.data.Model objects from an Array.
            Each element of that Array represents a row of data fields. The
            fields are pulled into a Record object using as a subscript, the mapping property
            of the field definition if it exists, or the field&#39;s ordinal position in the definition. Example code: Employee = Ext.define(&#39;Employee&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;,
            {name: &#39;name&#39;, mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which
            {name: &#39;occupation&#39;, mapping: 2}    // precludes using the ordinal position as the index.
            ]
            });
            var myReader = new Ext.data.reader.Array({
            model: &#39;Employee&#39;
            }, Employee);
            This would consume an Array like this: [ [1, &#39;Bill&#39;, &#39;Gardener&#39;], [2, &#39;Ben&#39;, &#39;Horticulturalist&#39;] ]
            </summary>
        </member>
        <member name="T:Ext.data.reader.Json">
            <summary>
            The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually
            happens as a result of loading a Store - for example we might create something like this: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;]
            });
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;ajax&#39;,
            url : &#39;users.json&#39;,
            reader: {
            type: &#39;json&#39;
            }
            }
            });
            The example above creates a &#39;User&#39; model. Models are explained in the Model docs if you&#39;re
            not already familiar with them. We created the simplest type of JSON Reader possible by simply telling our Store&#39;s
            Proxy that we want a JSON Reader. The Store automatically passes the configured model to the
            Store, so it is as if we passed this instead:
            reader: {
            type : &#39;json&#39;,
            model: &#39;User&#39;
            }
            The reader we set up is ready to read data from our server - at the moment it will accept a response like this: [
            {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed Spencer&quot;,
            &quot;email&quot;: &quot;ed@sencha.com&quot;
            },
            {
            &quot;id&quot;: 2,
            &quot;name&quot;: &quot;Abe Elias&quot;,
            &quot;email&quot;: &quot;abe@sencha.com&quot;
            }
            ]
            Reading other JSON formats If you already have your JSON format defined and it doesn&#39;t look quite like what we have above, you can usually
            pass JsonReader a couple of configuration options to make it parse your format. For example, we can use the
            root configuration to parse data that comes back like this: {
            &quot;users&quot;: [
            {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed Spencer&quot;,
            &quot;email&quot;: &quot;ed@sencha.com&quot;
            },
            {
            &quot;id&quot;: 2,
            &quot;name&quot;: &quot;Abe Elias&quot;,
            &quot;email&quot;: &quot;abe@sencha.com&quot;
            }
            ]
            }
            To parse this we just pass in a root configuration that matches the &#39;users&#39; above: reader: {
            type: &#39;json&#39;,
            root: &#39;users&#39;
            }
            Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata
            around each record inside a nested structure like this: {
            &quot;total&quot;: 122,
            &quot;offset&quot;: 0,
            &quot;users&quot;: [
            {
            &quot;id&quot;: &quot;ed-spencer-1&quot;,
            &quot;value&quot;: 1,
            &quot;user&quot;: {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed Spencer&quot;,
            &quot;email&quot;: &quot;ed@sencha.com&quot;
            }
            }
            ]
            }
            In the case above the record data is nested an additional level inside the &quot;users&quot; array as each &quot;user&quot; item has
            additional metadata surrounding it (&#39;id&#39; and &#39;value&#39; in this case). To parse data out of each &quot;user&quot; item in the
            JSON above we need to specify the record configuration like this: reader: {
            type  : &#39;json&#39;,
            root  : &#39;users&#39;,
            record: &#39;user&#39;
            }
            Response metadata The server can return additional data in its response, such as the total number of records
            and the success status of the response. These are typically included in the JSON response
            like this: {
            &quot;total&quot;: 100,
            &quot;success&quot;: true,
            &quot;users&quot;: [
            {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed Spencer&quot;,
            &quot;email&quot;: &quot;ed@sencha.com&quot;
            }
            ]
            }
            If these properties are present in the JSON response they can be parsed out by the JsonReader and used by the
            Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
            options: reader: {
            type : &#39;json&#39;,
            root : &#39;users&#39;,
            totalProperty  : &#39;total&#39;,
            successProperty: &#39;success&#39;
            }
            These final options are not necessary to make the Reader work, but can be useful when the server needs to report
            an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
            returned.
            </summary>
        </member>
        <member name="T:Ext.data.reader.Reader">
            <summary>
            Readers are used to interpret data to be loaded into a Model instance or a Store
            - usually in response to an AJAX request. This is normally handled transparently by passing some configuration to either the
            Model or the Store in question - see their documentation for further details. Loading Nested Data Readers have the ability to automatically load deeply-nested data objects based on the associations
            configured on each Model. Below is an example demonstrating the flexibility of these associations in a fictional CRM system which
            manages a User, their Orders, OrderItems and Products. First we&#39;ll define the models:
            Ext.define(&quot;User&quot;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;name&#39;
            ],
            hasMany: {model: &#39;Order&#39;, name: &#39;orders&#39;},
            proxy: {
            type: &#39;rest&#39;,
            url : &#39;users.json&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;users&#39;
            }
            }
            });
            Ext.define(&quot;Order&quot;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;total&#39;
            ],
            hasMany  : {model: &#39;OrderItem&#39;, name: &#39;orderItems&#39;, associationKey: &#39;order_items&#39;},
            belongsTo: &#39;User&#39;
            });
            Ext.define(&quot;OrderItem&quot;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;price&#39;, &#39;quantity&#39;, &#39;order_id&#39;, &#39;product_id&#39;
            ],
            belongsTo: [&#39;Order&#39;, {model: &#39;Product&#39;, associationKey: &#39;product&#39;}]
            });
            Ext.define(&quot;Product&quot;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;name&#39;
            ],
            hasMany: &#39;OrderItem&#39;
            });
            This may be a lot to take in - basically a User has many Orders, each of which is composed of several OrderItems. Finally,
            each OrderItem has a single Product. This allows us to consume data like this: {
            &quot;users&quot;: [
            {
            &quot;id&quot;: 123,
            &quot;name&quot;: &quot;Ed&quot;,
            &quot;orders&quot;: [
            {
            &quot;id&quot;: 50,
            &quot;total&quot;: 100,
            &quot;order_items&quot;: [
            {
            &quot;id&quot;      : 20,
            &quot;price&quot;   : 40,
            &quot;quantity&quot;: 2,
            &quot;product&quot; : {
            &quot;id&quot;: 1000,
            &quot;name&quot;: &quot;MacBook Pro&quot;
            }
            },
            {
            &quot;id&quot;      : 21,
            &quot;price&quot;   : 20,
            &quot;quantity&quot;: 3,
            &quot;product&quot; : {
            &quot;id&quot;: 1001,
            &quot;name&quot;: &quot;iPhone&quot;
            }
            }
            ]
            }
            ]
            }
            ]
            }
            The JSON response is deeply nested - it returns all Users (in this case just 1 for simplicity&#39;s sake), all of the Orders
            for each User (again just 1 in this case), all of the OrderItems for each Order (2 order items in this case), and finally
            the Product associated with each OrderItem. Now we can read the data and use it as follows:
            var store = new Ext.data.Store({
            model: &quot;User&quot;
            });
            store.load({
            callback: function() {
            //the user that was loaded
            var user = store.first();
            console.log(&quot;Orders for &quot; + user.get(&#39;name&#39;) + &quot;:&quot;)
            //iterate over the Orders for each User
            user.orders().each(function(order) {
            console.log(&quot;Order ID: &quot; + order.getId() + &quot;, which contains items:&quot;);
            //iterate over the OrderItems for each Order
            order.orderItems().each(function(orderItem) {
            //we know that the Product data is already loaded, so we can use the synchronous getProduct
            //usually, we would use the asynchronous version (see Ext.data.BelongsToAssociation)
            var product = orderItem.getProduct();
            console.log(orderItem.get(&#39;quantity&#39;) + &#39; orders of &#39; + product.get(&#39;name&#39;));
            });
            });
            }
            });
            Running the code above results in the following: Orders for Ed:
            Order ID: 50, which contains items:
            2 orders of MacBook Pro
            3 orders of iPhone
            </summary>
        </member>
        <member name="M:Ext.data.reader.Reader.#ctor(System.Object)">
            <summary>
            Creates new Reader. ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Reader.getResponseData(System.Object)">
            <summary>
            Takes a raw response object (as passed to this.read) and returns the useful data segment of it. ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Reader.read(System.Object)">
            <summary>
            Reads the given response object. ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Reader.readRecords(System.Object)">
            <summary>
            Abstracts common functionality used by all Reader subclasses. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.Reader.rawData">
            <summary>
            The raw data object that was last passed to readRecords. ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Json.readRecords(System.Object)">
            <summary>
            Reads a JSON object and returns a ResultSet. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.Json.jsonData">
            <summary>
            DEPRECATED - will be removed in Ext JS 5.0. ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Array.#ctor(System.Object)">
            <summary>
            Create a new ArrayReader ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.idProperty">
            <summary>
            Name of the property within a row object
            that contains a record identifier value. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.implicitIncludes">
            <summary>
            True to automatically parse models nested within other models in a response
            object. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.messageProperty">
            <summary>
            The name of the property which contains a response message. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.root">
            <summary>
            Required. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.successProperty">
            <summary>
            Name of the property from which to
            retrieve the success attribute. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.ReaderConfig.totalProperty">
            <summary>
            Name of the property from which to
            retrieve the total number of records in the dataset. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.JsonConfig.record">
            <summary>
            The optional location within the JSON response that the record data itself can be found at. ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.JsonConfig.useSimpleAccessors">
            <summary>
            True to ensure that field names/mappings are treated as literals when
            reading values. ...
            </summary>
        </member>
        <member name="T:Ext.data.HasManyAssociation">
            <summary>
            Represents a one-to-many relationship between two models. Usually created indirectly via a model definition: Ext.define(&#39;Product&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;id&#39;,      type: &#39;int&#39;},
            {name: &#39;user_id&#39;, type: &#39;int&#39;},
            {name: &#39;name&#39;,    type: &#39;string&#39;}
            ]
            });
            Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;id&#39;,   type: &#39;int&#39;},
            {name: &#39;name&#39;, type: &#39;string&#39;}
            ],
            // we can use the hasMany shortcut on the model to create a hasMany association
            hasMany: {model: &#39;Product&#39;, name: &#39;products&#39;}
            });
            Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives
            us a new function on every User instance, in this case the function is called &#39;products&#39; because that is the name
            we specified in the association configuration above. This new function returns a specialized Store which is automatically filtered to load
            only Products for the given model instance: //first, we load up a User with id of 1
            var user = Ext.ModelManager.create({id: 1, name: &#39;Ed&#39;}, &#39;User&#39;);
            //the user.products function was created automatically by the association and returns a Store
            //the created store is automatically scoped to the set of Products for the User with id of 1
            var products = user.products();
            //we still have all of the usual Store functions, for example it&#39;s easy to add a Product for this User
            products.add({
            name: &#39;Another Product&#39;
            });
            //saves the changes to the store - this automatically sets the new Product&#39;s user_id to 1 before saving
            products.sync();
            The new Store is only instantiated the first time you call products() to conserve memory and processing time,
            though calling products() a second time returns the same store instance. Custom filtering The Store is automatically furnished with a filter - by default this filter tells the store to only return
            records where the associated model&#39;s foreign key matches the owner model&#39;s primary key. For example, if a User
            with ID = 100 hasMany Products, the filter loads only Products with user_id == 100. Sometimes we want to filter by another field - for example in the case of a Twitter search application we may
            have models for Search and Tweet: Ext.define(&#39;Search&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;query&#39;
            ],
            hasMany: {
            model: &#39;Tweet&#39;,
            name : &#39;tweets&#39;,
            filterProperty: &#39;query&#39;
            }
            });
            Ext.define(&#39;Tweet&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            &#39;id&#39;, &#39;text&#39;, &#39;from_user&#39;
            ]
            });
            //returns a Store filtered by the filterProperty
            var store = new Search({query: &#39;Sencha Touch&#39;}).tweets();
            The tweets association above is filtered by the query property by setting the filterProperty, and is
            equivalent to this: var store = new Ext.data.Store({
            model: &#39;Tweet&#39;,
            filters: [
            {
            property: &#39;query&#39;,
            value   : &#39;Sencha Touch&#39;
            }
            ]
            });
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.autoLoad">
            <summary>
            True to automatically load the related store from a remote source when instantiated. ...
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.filterProperty">
            <summary>
            Optionally overrides the default filter that is set up on the associated Store. ...
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.foreignKey">
            <summary>
            The name of the foreign key on the associated model that links it to the owner
            model. ...
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.name">
            <summary>
            The name of the function to create on the owner model to retrieve the child store. ...
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.storeConfig">
            <summary>
            Optional configuration object that will be passed to the generated Store. ...
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.type">
            <summary>
            The type configuration can be used when creating associations using a configuration object. ...
            </summary>
        </member>
        <member name="T:SharpKit.ExtJs.ExtJsCompiler">
            <summary>
            This class is designed to allow JsMode.Clr runtime conversion to ExtJs native types, in order to use it, 
            mark your classes in JsType(JsMode.Clr)
            copy this file to your project, include the generated js file
            and call SharpKit.ExtJs.ExtJsCompiler.CompileExtJs() after all of your script includes
            </summary>
        </member>
        <member name="T:SharpKit.ExtJs.JsType">
            <summary>
            A type used internally by the Js Type System
            </summary>
        </member>
        <member name="T:Ext.window.Window">
            <summary>
            A specialized panel intended for use as an application window.  Windows are floated, resizable, and
            draggable by default.  Windows can be maximized to fill the viewport,
            restored to their prior size, and can be minimized. Windows can also be linked to a Ext.ZIndexManager or managed by the Ext.WindowManager to provide
            grouping, activation, to front, to back and other application-specific behavior. By default, Windows will be rendered to document.body. To constrain a Window to another element
            specify renderTo. As with all Containers, it is important to consider how you want the Window
            to size and arrange any child Components. Choose an appropriate layout configuration which lays out
            child Components in the required manner.
            Example: Ext.create(&#39;Ext.window.Window&#39;, {
            title: &#39;Hello&#39;,
            height: 200,
            width: 400,
            layout: &#39;fit&#39;,
            items: {  // Let&#39;s put an empty grid in just to illustrate fit layout
            xtype: &#39;grid&#39;,
            border: false,
            columns: [{header: &#39;World&#39;}],                 // One header just for show. There&#39;s no data,
            store: Ext.create(&#39;Ext.data.ArrayStore&#39;, {}) // A dummy empty data store
            }
            }).show();
            </summary>
        </member>
        <member name="M:Ext.window.Window.getFocusEl">
            <summary>
            Gets the configured default focus item. ...
            </summary>
        </member>
        <member name="M:Ext.window.Window.maximize">
            <summary>
            Fits the window within its current container and automatically replaces
            the 'maximize' tool button with the 'restore'...
            </summary>
        </member>
        <member name="M:Ext.window.Window.minimize">
            <summary>
            Placeholder method for minimizing the window. ...
            </summary>
        </member>
        <member name="M:Ext.window.Window.restore">
            <summary>
            Restores a maximized  window back to its original
            size and position prior to being maximized and also replaces
            the 'r...
            </summary>
        </member>
        <member name="M:Ext.window.Window.toggleMaximize">
            <summary>
            A shortcut method for toggling between maximize and restore based on the current maximized
            state of the window. ...
            </summary>
        </member>
        <member name="P:Ext.window.Window.dd">
            <summary>
            If this Window is configured draggable, this property will contain
            an instance of Ext.util.ComponentDragger (A subcla...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.closable">
            <summary>
            True to display the 'close' tool button and allow the user to close the window, false to
            hide the button and disallow...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.collapsed">
            <summary>
            True to render the window collapsed, false to render it expanded (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.constrain">
            <summary>
            True to constrain the window within its containing element, false to allow it to fall outside of its
            containing element. ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.constrainHeader">
            <summary>
            True to constrain the window header within its containing element (allowing the window body to fall outside
            of its co...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.defaultFocus">
            <summary>
            Specifies a Component to receive focus when this Window is focused. ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.draggable">
            <summary>
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true). ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.expandOnShow">
            <summary>
            True to always expand the window when it is displayed, false to keep it in its current state (which may be
            collapsed)...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.hidden">
            <summary>
            Render this Window hidden (default is true). ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
            and di...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.maximized">
            <summary>
            True to initially display the window in a maximized state. ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
            and di...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.modal">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without
            restricting a...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.onEsc">
            <summary>
            Allows override of the built-in processing for the escape key. ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.plain">
            <summary>
            True to render the window body with a transparent background so that it will blend into the framing
            elements, false t...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.resizable">
            <summary>
            Specify as true to allow user resizing at each edge and corner of the window, false to disable
            resizing (defaults to ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.x">
            <summary>
            The X position of the left edge of the window on initial showing. ...
            </summary>
        </member>
        <member name="P:Ext.window.WindowConfig.y">
            <summary>
            The Y position of the top edge of the window on initial showing. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.activate">
            <summary>
            Fires after the window has been visually activated via setActive. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.deactivate">
            <summary>
            Fires after the window has been visually deactivated via setActive. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.maximize">
            <summary>
            Fires after the window has been maximized. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.minimize">
            <summary>
            Fires after the window has been minimized. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.resize">
            <summary>
            Fires after the window has been resized. ...
            </summary>
        </member>
        <member name="F:Ext.window.WindowEvents.restore">
            <summary>
            Fires after the window has been restored to its original size after being maximized. ...
            </summary>
        </member>
        <member name="T:Ext.Version">
            <summary>
            A utility class that wrap around a string version number and provide convenient
            method to perform comparison. See also: compare. Example: var version = new Ext.Version(&#39;1.0.2beta&#39;);
            console.log(&quot;Version is &quot; + version); // Version is 1.0.2beta
            console.log(version.getMajor()); // 1
            console.log(version.getMinor()); // 0
            console.log(version.getPatch()); // 2
            console.log(version.getBuild()); // 0
            console.log(version.getRelease()); // beta
            console.log(version.isGreaterThan(&#39;1.0.1&#39;)); // True
            console.log(version.isGreaterThan(&#39;1.0.2alpha&#39;)); // True
            console.log(version.isGreaterThan(&#39;1.0.2RC&#39;)); // False
            console.log(version.isGreaterThan(&#39;1.0.2&#39;)); // False
            console.log(version.isLessThan(&#39;1.0.2&#39;)); // True
            console.log(version.match(1.0)); // True
            console.log(version.match(&#39;1.0.2&#39;)); // True
            </summary>
        </member>
        <member name="M:Ext.Version.#ctor(System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.Version.deprecate(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Create a closure for deprecated code. ...
            </summary>
        </member>
        <member name="M:Ext.Version.equals(System.Object)">
            <summary>
            Returns whether this version equals to the supplied argument ...
            </summary>
        </member>
        <member name="M:Ext.Version.getBuild">
            <summary>
            Returns the build component value ...
            </summary>
        </member>
        <member name="M:Ext.Version.getMajor">
            <summary>
            Returns the major component value ...
            </summary>
        </member>
        <member name="M:Ext.Version.getMinor">
            <summary>
            Returns the minor component value ...
            </summary>
        </member>
        <member name="M:Ext.Version.getPatch">
            <summary>
            Returns the patch component value ...
            </summary>
        </member>
        <member name="M:Ext.Version.getRelease">
            <summary>
            Returns the release component value ...
            </summary>
        </member>
        <member name="M:Ext.Version.getShortVersion">
            <summary>
            Returns shortVersion version without dots and release ...
            </summary>
        </member>
        <member name="M:Ext.Version.getVersion(SharpKit.JavaScript.JsString)">
            <summary>
            Get the version number of the supplied package name; will return the last registered version
            (last Ext.setVersion cal...
            </summary>
        </member>
        <member name="M:Ext.Version.isGreaterThan(System.Object)">
            <summary>
            Returns whether this version if greater than the supplied argument ...
            </summary>
        </member>
        <member name="M:Ext.Version.isLessThan(System.Object)">
            <summary>
            Returns whether this version if smaller than the supplied argument ...
            </summary>
        </member>
        <member name="M:Ext.Version.match(System.Object)">
            <summary>
            Returns whether this version matches the supplied argument. ...
            </summary>
        </member>
        <member name="M:Ext.Version.setVersion(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Set version number for the given package name. ...
            </summary>
        </member>
        <member name="M:Ext.Version.toArray">
            <summary>
            Returns this format: [major, minor, patch, build, release]. ...
            </summary>
        </member>
        <member name="T:Ext.tip.ToolTip">
            <summary>
            ToolTip is a Ext.tip.Tip implementation that handles the common case of displaying a
            tooltip when hovering over a certain element or elements on the page. It allows fine-grained
            control over the tooltip&#39;s alignment relative to the target element or mouse, and the timing
            of when it is automatically shown and hidden. This implementation does not have a built-in method of automatically populating the tooltip&#39;s
            text based on the target element; you must either configure a fixed html value for each
            ToolTip instance, or implement custom logic (e.g. in a beforeshow event listener) to
            generate the appropriate tooltip content on the fly. See Ext.tip.QuickTip for a more
            convenient way of automatically populating and configuring a tooltip based on specific DOM
            attributes of each target element. Basic Example var tip = Ext.create(&#39;Ext.tip.ToolTip&#39;, {
            target: &#39;clearButton&#39;,
            html: &#39;Press this button to clear the form&#39;
            });
            Delegation In addition to attaching a ToolTip to a single element, you can also use delegation to attach
            one ToolTip to many elements under a common parent. This is more efficient than creating many
            ToolTip instances. To do this, point the target config to a common ancestor of all the
            elements, and then set the delegate config to a CSS selector that will select all the
            appropriate sub-elements. When using delegation, it is likely that you will want to programmatically change the content
            of the ToolTip based on each delegate element; you can do this by implementing a custom
            listener for the beforeshow event. Example: var store = Ext.create(&#39;Ext.data.ArrayStore&#39;, {
            fields: [&#39;company&#39;, &#39;price&#39;, &#39;change&#39;],
            data: [
            [&#39;3m Co&#39;,                               71.72, 0.02],
            [&#39;Alcoa Inc&#39;,                           29.01, 0.42],
            [&#39;Altria Group Inc&#39;,                    83.81, 0.28],
            [&#39;American Express Company&#39;,            52.55, 0.01],
            [&#39;American International Group, Inc.&#39;,  64.13, 0.31],
            [&#39;AT&amp;amp;T Inc.&#39;,                           31.61, -0.48]
            ]
            });
            var grid = Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Array Grid&#39;,
            store: store,
            columns: [
            {text: &#39;Company&#39;, flex: 1, dataIndex: &#39;company&#39;},
            {text: &#39;Price&#39;, width: 75, dataIndex: &#39;price&#39;},
            {text: &#39;Change&#39;, width: 75, dataIndex: &#39;change&#39;}
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            grid.getView().on(&#39;render&#39;, function(view) {
            view.tip = Ext.create(&#39;Ext.tip.ToolTip&#39;, {
            // The overall target element.
            target: view.el,
            // Each grid row causes its own seperate show and hide.
            delegate: view.itemSelector,
            // Moving within the row should not hide the tip.
            trackMouse: true,
            // Render immediately so that tip.body can be referenced prior to the first show.
            renderTo: Ext.getBody(),
            listeners: {
            // Change content dynamically depending on which element triggered the show.
            beforeshow: function updateTipBody(tip) {
            tip.update(&#39;Over company &quot;&#39; + view.getRecord(tip.triggerElement).get(&#39;company&#39;) + &#39;&quot;&#39;);
            }
            }
            });
            });
            Alignment The following configuration properties allow control over how the ToolTip is aligned relative to
            the target element and/or mouse pointer:  anchor anchorToTarget anchorOffset trackMouse mouseOffset  Showing/Hiding The following configuration properties allow control over how and when the ToolTip is automatically
            shown and hidden:  autoHide showDelay hideDelay dismissDelay
            </summary>
        </member>
        <member name="M:Ext.tip.ToolTip.hide">
            <summary>
            Hides this tooltip if visible. ...
            </summary>
        </member>
        <member name="M:Ext.tip.ToolTip.setTarget(System.Object)">
            <summary>
            Binds this ToolTip to the specified element. ...
            </summary>
        </member>
        <member name="M:Ext.tip.ToolTip.show">
            <summary>
            Shows this tooltip at the current event target XY position. ...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTip.triggerElement">
            <summary>
            When a ToolTip is configured with the delegate
            option to cause selected child elements of the target
            Element to each ...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.anchor">
            <summary>
            If specified, indicates that the tip should be anchored to a
            particular side of the target element or mouse pointer (...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.anchorOffset">
            <summary>
            A numeric pixel value used to offset the
            default position of the anchor arrow (defaults to 0). ...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.anchorToTarget">
            <summary>
            True to anchor the tooltip to the target
            element, false to anchor it relative to the mouse coordinates (defaults
            to t...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.autoHide">
            <summary>
            True to automatically hide the tooltip after the
            mouse exits the target element or after the dismissDelay
            has expired...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.delegate">
            <summary>
            A DomQuery selector which allows selection of individual elements within the
            target element to trigger showing and hi...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.dismissDelay">
            <summary>
            Delay in milliseconds before the tooltip
            automatically hides (defaults to 5000). ...
            </summary>
        </member>
        <member name="P:Ext.tip.ToolTipConfig.hideDelay">
            <summary>
            Delay in milliseconds after the mouse exits the
            target element but before the tooltip actually hides (defaults to 200). ...
            </summary>
        </member>
        <member name="T:Ext.tab.Bar">
            <summary>
            TabBar is used internally by a TabPanel and wouldn&#39;t usually need to be created manually.
            </summary>
        </member>
        <member name="T:Ext.panel.Header">
            <summary>
            Simple header class which is used for on Ext.panel.Panel and Ext.window.Window
            </summary>
        </member>
        <member name="M:Ext.panel.Header.addTool(System.Object)">
            <summary>
            Add a tool to the header ...
            </summary>
        </member>
        <member name="M:Ext.panel.Header.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class that provides the icon image for this panel. ...
            </summary>
        </member>
        <member name="M:Ext.panel.Header.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the title of the header. ...
            </summary>
        </member>
        <member name="P:Ext.tab.BarConfig.maxTabWidth">
            <summary>
            The maximum width for each tab. ...
            </summary>
        </member>
        <member name="P:Ext.tab.BarConfig.minTabWidth">
            <summary>
            The minimum width for each tab. ...
            </summary>
        </member>
        <member name="F:Ext.tab.BarEvents.change">
            <summary>
            Fired when the currently-active tab has changed ...
            </summary>
        </member>
        <member name="T:Ext.Loader">
            <summary>
            Ext.Loader is the heart of the new dynamic dependency loading capability in Ext JS 4+. It is most commonly used
            via the Ext.require shorthand. Ext.Loader supports both asynchronous and synchronous loading
            approaches, and leverage their advantages for the best development flow. We&#39;ll discuss about the pros and cons
            of each approach: Asynchronous Loading  Advantages:   Cross-domain  No web server needed: you can run the application via the file system protocol
            (i.e: file://path/to/your/index.html)  Best possible debugging experience: error messages come with the exact file name and line number   Disadvantages:   Dependencies need to be specified before-hand    Method 1: Explicitly include what you need: // Syntax
            Ext.require({String/Array} expressions);
            // Example: Single alias
            Ext.require(&#39;widget.window&#39;);
            // Example: Single class name
            Ext.require(&#39;Ext.window.Window&#39;);
            // Example: Multiple aliases / class names mix
            Ext.require([&#39;widget.window&#39;, &#39;layout.border&#39;, &#39;Ext.data.Connection&#39;]);
            // Wildcards
            Ext.require([&#39;widget.*&#39;, &#39;layout.*&#39;, &#39;Ext.data.*&#39;]);
            Method 2: Explicitly exclude what you don&#39;t need: // Syntax: Note that it must be in this chaining format.
            Ext.exclude({String/Array} expressions)
            .require({String/Array} expressions);
            // Include everything except Ext.data.*
            Ext.exclude(&#39;Ext.data.*&#39;).require(&#39;*&#39;);&#160;
            // Include all widgets except widget.checkbox*,
            // which will match widget.checkbox, widget.checkboxfield, widget.checkboxgroup, etc.
            Ext.exclude(&#39;widget.checkbox*&#39;).require(&#39;widget.*&#39;);
            Synchronous Loading on Demand  Advantages:   There&#39;s no need to specify dependencies before-hand, which is always the convenience of including
            ext-all.js before   Disadvantages:   Not as good debugging experience since file name won&#39;t be shown (except in Firebug at the moment)  Must be from the same domain due to XHR restriction  Need a web server, same reason as above    There&#39;s one simple rule to follow: Instantiate everything with Ext.create instead of the new keyword Ext.create(&#39;widget.window&#39;, { ... }); // Instead of new Ext.window.Window({...});
            Ext.create(&#39;Ext.window.Window&#39;, {}); // Same as above, using full class name instead of alias
            Ext.widget(&#39;window&#39;, {}); // Same as above, all you need is the traditional `xtype`
            Behind the scene, Ext.ClassManager will automatically check whether the given class name / alias has already
            existed on the page. If it&#39;s not, Ext.Loader will immediately switch itself to synchronous mode and automatic load
            the given class and all its dependencies. Hybrid Loading - The Best of Both Worlds It has all the advantages combined from asynchronous and synchronous loading. The development flow is simple: Step 1: Start writing your application using synchronous approach. Ext.Loader will automatically fetch all dependencies on demand as they&#39;re needed during run-time. For example: Ext.onReady(function(){
            var window = Ext.createWidget(&#39;window&#39;, {
            width: 500,
            height: 300,
            layout: {
            type: &#39;border&#39;,
            padding: 5
            },
            title: &#39;Hello Dialog&#39;,
            items: [{
            title: &#39;Navigation&#39;,
            collapsible: true,
            region: &#39;west&#39;,
            width: 200,
            html: &#39;Hello&#39;,
            split: true
            }, {
            title: &#39;TabPanel&#39;,
            region: &#39;center&#39;
            }]
            });
            window.show();
            })
            Step 2: Along the way, when you need better debugging ability, watch the console for warnings like these: [Ext.Loader] Synchronously loading &#39;Ext.window.Window&#39;; consider adding Ext.require(&#39;Ext.window.Window&#39;) before your application&#39;s code ClassManager.js:432
            [Ext.Loader] Synchronously loading &#39;Ext.layout.container.Border&#39;; consider adding Ext.require(&#39;Ext.layout.container.Border&#39;) before your application&#39;s code
            Simply copy and paste the suggested code above Ext.onReady, e.g.: Ext.require(&#39;Ext.window.Window&#39;);
            Ext.require(&#39;Ext.layout.container.Border&#39;);
            Ext.onReady(...);
            Everything should now load via asynchronous mode. Deployment It&#39;s important to note that dynamic loading should only be used during development on your local machines.
            During production, all dependencies should be combined into one single JavaScript file. Ext.Loader makes
            the whole process of transitioning from / to between development / maintenance and production as easy as
            possible. Internally Ext.Loader.history maintains the list of all dependencies
            your application needs in the exact loading sequence. It&#39;s as simple as concatenating all files in this
            array into one, then include it on top of your application. This process will be automated with Sencha Command, to be released and documented towards Ext JS 4 Final.
            </summary>
        </member>
        <member name="M:Ext.Loader.exclude(System.Object)">
            <summary>
            Explicitly exclude files from being loaded. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.getConfig(SharpKit.JavaScript.JsString)">
            <summary>
            Get the config value corresponding to the specified name. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.getPath(SharpKit.JavaScript.JsString)">
            <summary>
            Translates a className to a file path by adding the the proper prefix and converting the .'s to /'s. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.onReady(SharpKit.JavaScript.JsAction,System.Object,System.Boolean,System.Object)">
            <summary>
            Adds new listener to be executed when all required scripts are fully loaded. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.require(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Loads all classes by the given names and all their direct dependencies;
            optionally executes the given callback functi...
            </summary>
        </member>
        <member name="M:Ext.Loader.setConfig(System.Object,System.Object)">
            <summary>
            Set the configuration for the loader. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.setPath(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the path of a namespace. ...
            </summary>
        </member>
        <member name="M:Ext.Loader.syncRequire(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Synchronously loads all classes by the given names and all their direct dependencies;
            optionally executes the given c...
            </summary>
        </member>
        <member name="P:Ext.Loader.history">
            <summary>
            An array of class names to keep track of the dependency loading order. ...
            </summary>
        </member>
        <member name="P:Ext.LoaderConfig.disableCachingParam">
            <summary>
            The get parameter name for the cache buster's timestamp. ...
            </summary>
        </member>
        <member name="P:Ext.LoaderConfig.paths">
            <summary>
            The mapping from namespaces to file paths
            {
            'Ext': '.', // This is set by default, Ext.layout.container.Containe...
            </summary>
        </member>
        <member name="T:Ext.Layer">
            <summary>
            An extended Ext.core.Element object that supports a shadow and shim, constrain to viewport and
            automatic maintaining of shadow/shim positions.
            </summary>
        </member>
        <member name="T:Ext.core.Element">
            <summary>
            Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences. All instances of this class inherit the methods of Ext.fx.Anim making visual effects easily available to all DOM elements. Note that the events documented in this class are not Ext events, they encapsulate browser events. To
            access the underlying browser event, see Ext.EventObject.browserEvent. Some older
            browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs. Usage: // by id
            var el = Ext.get(&quot;my-div&quot;);
            // by DOM element reference
            var el = Ext.get(myDivElement);
            Animations When an element is manipulated, by default there is no animation. var el = Ext.get(&quot;my-div&quot;);
            // no animation
            el.setWidth(100);
            Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter.  This
            parameter can be specified as boolean (true) for default animation effects. // default animation
            el.setWidth(100, true);
            To configure the effects, an object literal with animation options to use as the Element animation
            configuration object can also be specified. Note that the supported Element animation configuration
            options are a subset of the Ext.fx.Anim animation options specific to Fx effects.  The supported
            Element animation configuration options are: Option    Default   Description
            --------- --------  ---------------------------------------------
            duration  .35       The duration of the animation in seconds
            easing    easeOut   The easing method
            callback  none      A function to execute when the anim completes
            scope     this      The scope (this) of the callback function
            // Element animation options object
            var opt = {
            duration: 1,
            easing: &#39;elasticIn&#39;,
            callback: this.foo,
            scope: this
            };
            // animation with some options set
            el.setWidth(100, opt);
            The Element animation object being used for the animation will be set on the options
            object as &quot;anim&quot;, which allows you to stop or manipulate the animation. Here is an example: // using the &quot;anim&quot; property to get the Anim object
            if(opt.anim.isAnimated()){
            opt.anim.stop();
            }
            Also see the animate method for another animation technique.  Composite (Collections of) Elements For working with collections of Elements, see Ext.CompositeElement
            </summary>
        </member>
        <member name="M:Ext.core.Element.addCls(System.Object)">
            <summary>
            Adds one or more CSS classes to the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addClsOnClick(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addClsOnFocus(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when this element has the focus ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addClsOnOver(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is over this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addKeyListener(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Convenience method for constructing a KeyMap ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addKeyMap(System.Object)">
            <summary>
            Creates a KeyMap for this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.adjustWidth(System.Object)">
            <summary>
            TODO: Look at this ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.alignTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.appendChild(System.Object)">
            <summary>
            Appends the passed element(s) to this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.appendTo(System.Object)">
            <summary>
            Appends this element to the passed element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.applyStyles(System.Object)">
            <summary>
            More flexible version of setStyle for setting style properties. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.blur">
            <summary>
            Tries to blur the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.boxWrap(SharpKit.JavaScript.JsString)">
            <summary>
            Wraps the specified element with a special 9 element markup/CSS block that renders by default as
            a gray container wit...
            </summary>
        </member>
        <member name="M:Ext.core.Element.center(System.Object)">
            <summary>
            Centers the Element in either the viewport, or another Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.child(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single direct child based on the passed CSS selector (the selector should not contain an id). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.clean(System.Boolean)">
            <summary>
            Removes Empty, or whitespace filled text nodes. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.clearListeners">
            <summary>
            Removes all previous added listeners from this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.clearOpacity">
            <summary>
            Clears any opacity settings from this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.clearPositioning(SharpKit.JavaScript.JsString)">
            <summary>
            Clear positioning back to the default when the document was loaded ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.clip">
            <summary>
            Store the current overflow setting and clip overflow on the element - use unclip to remove ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.contains(System.Object)">
            <summary>
            Returns true if this element is an ancestor of the passed element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.createChild(System.Object,Ext.Unknown.HTMLElement,System.Boolean)">
            <summary>
            Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e...
            </summary>
        </member>
        <member name="M:Ext.core.Element.createProxy(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates a proxy element of this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.createShim">
            <summary>
            Creates an iframe shim for this element to keep selects and other windowed objects from
            showing through. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.destroy">
            <summary>
            Removes this element's dom reference. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.down(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single child at any depth below this element based on the passed CSS selector (the selector should not cont...
            </summary>
        </member>
        <member name="M:Ext.core.Element.enableDisplayMode(SharpKit.JavaScript.JsString)">
            <summary>
            Convenience method for setVisibilityMode(Element.DISPLAY) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.fadeIn(System.Object)">
            <summary>
            Fade an element in (from transparent to opaque). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.fadeOut(System.Object)">
            <summary>
            Fade an element out (from opaque to transparent). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.findParent(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.findParentNode(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.first(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the first child, skipping text nodes ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.fly(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.frame(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getActiveElement">
            <summary>
            Returns the active element in the DOM. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getAlignToXY(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Gets the x,y coordinates to align this element with another element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getAnchorXY(SharpKit.JavaScript.JsString,System.Boolean,System.Object)">
            <summary>
            Gets the x,y coordinates specified by the anchor position on the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getAttribute(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Returns the value of an attribute from the element's underlying DOM node. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getAttributeNS(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Returns the value of a namespaced attribute from the element's underlying DOM node. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getBorderWidth(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the width of the border(s) for the specified side(s) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getBottom(System.Boolean)">
            <summary>
            Gets the bottom Y coordinate of the element (element Y position + element height) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getBox(System.Boolean,System.Boolean)">
            <summary>
            Return an object defining the area of this Element which can be passed to setBox to
            set another Element's size/locati...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getCenterXY">
            <summary>
            Calculates the x, y to center this element on the screen ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getColor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Return the CSS color for the specified CSS attribute. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getComputedHeight">
            <summary>
            Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
            when...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getComputedWidth">
            <summary>
            Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
            when ne...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getConstrainVector(System.Object,System.Object)">
            <summary>
            Returns the [X, Y] vector by which this element must be translated to make a best attempt
            to constrain within the pas...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getFrameWidth(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the sum width of the padding and borders for the passed "sides". ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getLeft(System.Boolean)">
            <summary>
            Gets the left X coordinate ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getLoader">
            <summary>
            Gets this element's ElementLoader ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getMargin(SharpKit.JavaScript.JsString)">
            <summary>
            Returns an object with properties top, left, right and bottom representing the margins of this element unless sides i...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getOffsetsTo(System.Object)">
            <summary>
            Returns the offsets of this element from the passed element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getPadding(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the width of the padding(s) for the specified side(s) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getPageBox(System.Boolean)">
            <summary>
            Return an object defining the area of this Element which can be passed to setBox to
            set another Element's size/locati...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getPositioning">
            <summary>
            Gets an object with all CSS positioning properties. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getRegion">
            <summary>
            Returns the region of this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getRight(System.Boolean)">
            <summary>
            Gets the right X coordinate of the element (element X position + element width) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getScroll">
            <summary>
            Returns the current scroll position of the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getSize(System.Boolean)">
            <summary>
            Returns the size of the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getStyle(SharpKit.JavaScript.JsString)">
            <summary>
            Normalizes currentStyle and computedStyle. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getStyleSize">
            <summary>
            Returns the dimensions of the element available to lay content out in. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getStyles(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Returns an object with properties matching the styles requested. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getTextWidth(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the width in pixels of the passed text, or the width of the text in this Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getTop(System.Boolean)">
            <summary>
            Gets the top Y coordinate ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getValue(System.Boolean)">
            <summary>
            Returns the value of the "value" attribute ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getViewRegion">
            <summary>
            Returns the content region of this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getViewSize">
            <summary>
            Returns the dimensions of the element available to lay content out in. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getX">
            <summary>
            Gets the current X position of the element based on page coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getXY">
            <summary>
            Gets the current position of the element based on page coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.getY">
            <summary>
            Gets the current Y position of the element based on page coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.ghost(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Slides the element while fading it out of view. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.hasCls(SharpKit.JavaScript.JsString)">
            <summary>
            Checks if the specified CSS class exists on this element's DOM node. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.hide(System.Object)">
            <summary>
            Hide this element - Uses display mode to determine whether to use "display" or "visibility". ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.highlight(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be
            changed using the "...
            </summary>
        </member>
        <member name="M:Ext.core.Element.hover(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.initDD(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a Ext.dd.DD drag drop object for this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.initDDProxy(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a Ext.dd.DDProxy object for this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.initDDTarget(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a Ext.dd.DDTarget object for this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.insertAfter(System.Object)">
            <summary>
            Inserts this element after the passed element in the DOM ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.insertBefore(System.Object)">
            <summary>
            Inserts this element before the passed element in the DOM ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.insertFirst(System.Object,System.Object)">
            <summary>
            Inserts (or creates) an element (or DomHelper config) as the first child of this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.insertHtml(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Inserts an html fragment into this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.insertSibling(System.Object,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.is(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if this element matches the passed simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.isBorderBox">
            <summary>
            Tests various css rules/browsers to determine if this element uses a border box ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.isDisplayed">
            <summary>
            Returns true if display is not "none" ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.isMasked">
            <summary>
            Returns true if this element is masked. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.isScrollable">
            <summary>
            Returns true if this element is scrollable. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.isVisible(System.Boolean)">
            <summary>
            Checks whether the element is currently visible using both visibility and display properties. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.last(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the last child, skipping text nodes ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.load(System.Object)">
            <summary>
            Direct access to the Ext.ElementLoader Ext.ElementLoader.load method. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.mask(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Puts a mask over this element to disable user interaction. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.monitorMouseLeave(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Monitors this Element for the mouse leaving. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.move(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Move this element relative to its current position. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.moveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.next(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the next sibling, skipping text nodes ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler (shorthand for addListener). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.parent(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the parent node for this element, optionally chaining up trying to match a selector ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.pause(SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a pause before any subsequent queued effects begin. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.position(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Initializes positioning on this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.prev(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the previous sibling, skipping text nodes ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.puff(System.Object)">
            <summary>
            Fades the element out while slowly expanding it in all directions. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.purgeAllListeners">
            <summary>
            Recursively removes all previous added listeners from this element and its children ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.query(SharpKit.JavaScript.JsString)">
            <summary>
            Selects child nodes based on the passed CSS selector (the selector should not contain an id). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.radioCls(System.Object)">
            <summary>
            Adds one or more CSS classes to this element and removes the same class(es) from all siblings. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.relayEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Create an event handler on this element such that when the event fires and is handled by this element,
            it will be rel...
            </summary>
        </member>
        <member name="M:Ext.core.Element.remove">
            <summary>
            Removes this element's dom reference. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.removeAllListeners">
            <summary>
            Removes all previous added listeners from this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.removeAnchor">
            <summary>
            Remove any anchor to this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.removeCls(System.Object)">
            <summary>
            Removes one or more CSS classes from the element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler from this element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.repaint">
            <summary>
            Forces the browser to repaint this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.replace(System.Object)">
            <summary>
            Replaces the passed element with this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.replaceCls(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Replaces a CSS class on the element with another. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.replaceWith(System.Object)">
            <summary>
            Replaces this element with the passed element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.scale(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Animates the transition of an element's dimensions from a starting height/width
            to an ending height/width. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.scroll(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Scrolls this element the specified direction. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.scrollIntoView(System.Object,System.Boolean)">
            <summary>
            Scrolls this element into view within the passed container. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.scrollTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Scrolls this element the specified scroll point. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.select(System.Object,System.Boolean,System.Object)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods
            to be applied to many related elements in...
            </summary>
        </member>
        <member name="M:Ext.core.Element.serializeForm(System.Object)">
            <summary>
            Serializes a DOM form into a url encoded string ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.set(System.Object,System.Boolean)">
            <summary>
            Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setBottom(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS bottom style. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setBounds(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object,System.Object,System.Object)">
            <summary>
            Sets the element's position and size in one shot. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setBox(System.Object,System.Boolean,System.Object)">
            <summary>
            Sets the element's box. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setDisplayed(System.Object)">
            <summary>
            Sets the CSS display property. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setHeight(System.Object,System.Object)">
            <summary>
            Set the height of this Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setLeft(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's left position directly using CSS style (instead of setX). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setLeftTop(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Quick set left and top adding default units ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setLocation(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setOpacity(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Set the opacity of the element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setPositioning(System.Object)">
            <summary>
            Set positioning with an object returned by getPositioning(). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setRegion(Ext.util.Region,System.Object)">
            <summary>
            Sets the element's position and size the specified region. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setRight(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS right style. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setSize(System.Object,System.Object,System.Object)">
            <summary>
            Set the size of this Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setStyle(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Wrapper for setting style properties, also takes single object parameter of multiple styles. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setTop(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's top position directly using CSS style (instead of setY). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setVisibilityMode(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the element's visibility mode. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setVisible(System.Boolean,System.Object)">
            <summary>
            Sets the visibility of the element (see details). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setWidth(System.Object,System.Object)">
            <summary>
            Set the width of this Element. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setX(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the X position of the element based on page coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setXY(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.setY(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the Y position of the element based on page coordinates. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.shift(System.Object)">
            <summary>
            Animates the transition of any combination of an element's dimensions, xy position and/or opacity. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.show(System.Object)">
            <summary>
            Show this element - Uses display mode to determine whether to use "display" or "visibility". ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.slideOut(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Slides the element out of view. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.swallowEvent(System.Object,System.Boolean)">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.switchOff(System.Object)">
            <summary>
            Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.toggle(System.Object)">
            <summary>
            Toggles the element's visibility or display, depending on visibility mode. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.toggleCls(SharpKit.JavaScript.JsString)">
            <summary>
            Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.translatePoints(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translates the passed page coordinates into left/top css values for this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler from this element (see removeListener for additional notes). ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.unclip">
            <summary>
            Return clipping (overflow) to original clipping before clip was called ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.unmask">
            <summary>
            Removes a previously applied mask. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.unselectable">
            <summary>
            Disables text selection for this element (normalized across browsers) ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.up(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.update(SharpKit.JavaScript.JsString)">
            <summary>
            Update the innerHTML of this element ...
            </summary>
        </member>
        <member name="M:Ext.core.Element.wrap(System.Object,System.Boolean)">
            <summary>
            Creates and wraps this element with another element ...
            </summary>
        </member>
        <member name="M:Ext.Layer.#ctor(System.Object,System.Object)">
            <summary>
            Creates new Layer. ...
            </summary>
        </member>
        <member name="M:Ext.Layer.setZIndex(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the z-index of this layer and adjusts any shadow and shim z-indexes. ...
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.hideMode">
            <summary>
            A String which specifies how this Layer will be hidden. ...
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.shadow">
            <summary>
            True to automatically create an Ext.Shadow, or a string indicating the
            shadow's display Ext.Shadow.mode. ...
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.useDisplay">
            <summary>
            Defaults to use css offsets to hide the Layer. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMActivate">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMAttrModified">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMCharacterDataModified">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMFocusIn">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMFocusOut">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMNodeInserted">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMNodeInsertedIntoDocument">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMNodeRemoved">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMNodeRemovedFromDocument">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.DOMSubtreeModified">
            <summary>
            Where supported. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.abort">
            <summary>
            Fires when an object/image is stopped from loading before completely loaded. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.blur">
            <summary>
            Fires when an element loses focus either via the pointing device or by tabbing navigation. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.change">
            <summary>
            Fires when a control loses the input focus and its value has been modified since gaining focus. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.click">
            <summary>
            Fires when a mouse click is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.contextmenu">
            <summary>
            Fires when a right click is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.dblclick">
            <summary>
            Fires when a mouse double click is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.error">
            <summary>
            Fires when an object/image/frame cannot be loaded properly. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.focus">
            <summary>
            Fires when an element receives focus either via the pointing device or by tab navigation. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.keydown">
            <summary>
            Fires when a keydown is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.keypress">
            <summary>
            Fires when a keypress is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.keyup">
            <summary>
            Fires when a keyup is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.load">
            <summary>
            Fires when the user agent finishes loading all content within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mousedown">
            <summary>
            Fires when a mousedown is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mouseenter">
            <summary>
            Fires when the mouse enters the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mouseleave">
            <summary>
            Fires when the mouse leaves the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mousemove">
            <summary>
            Fires when a mousemove is detected with the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mouseout">
            <summary>
            Fires when a mouseout is detected with the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mouseover">
            <summary>
            Fires when a mouseover is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.mouseup">
            <summary>
            Fires when a mouseup is detected within the element. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.reset">
            <summary>
            Fires when a form is reset. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.resize">
            <summary>
            Fires when a document view is resized. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.scroll">
            <summary>
            Fires when a document view is scrolled. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.select">
            <summary>
            Fires when a user selects some text in a text field, including input and textarea. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.submit">
            <summary>
            Fires when a form is submitted. ...
            </summary>
        </member>
        <member name="F:Ext.core.ElementEvents.unload">
            <summary>
            Fires when the user agent removes all content from a window or frame. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Time">
            <summary>
            Provides a time input field with a time dropdown and automatic time validation. This field recognizes and uses JavaScript Date objects as its main value type (only the time
            portion of the date is used; the month/day/year are ignored). In addition, it recognizes string values which
            are parsed according to the format and/or altFormats configs. These may be reconfigured
            to use time formats appropriate for the user&#39;s locale. The field may be limited to a certain range of times by using the minValue and maxValue
            configs, and the interval between time options in the dropdown can be changed with the increment config.  Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Time Card&#39;,
            width: 300,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;timefield&#39;,
            name: &#39;in&#39;,
            fieldLabel: &#39;Time In&#39;,
            minValue: &#39;6:00 AM&#39;,
            maxValue: &#39;8:00 PM&#39;,
            increment: 30,
            anchor: &#39;100%&#39;
            }, {
            xtype: &#39;timefield&#39;,
            name: &#39;out&#39;,
            fieldLabel: &#39;Time Out&#39;,
            minValue: &#39;6:00 AM&#39;,
            maxValue: &#39;8:00 PM&#39;,
            increment: 30,
            anchor: &#39;100%&#39;
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.Picker">
            <summary>
            An abstract class for fields that have a single trigger which opens a &quot;picker&quot; popup below
            the field, e.g. a combobox menu list or a date picker. It provides a base implementation for
            toggling the picker&#39;s visibility when the trigger is clicked, as well as keyboard navigation
            and some basic events. Sizing and alignment of the picker can be controlled via the matchFieldWidth
            and pickerAlign/pickerOffset config properties respectively. You would not normally use this class directly, but instead use it as the parent class for
            a specific picker field implementation. Subclasses must implement the createPicker method
            to create a picker component appropriate for the field.
            </summary>
        </member>
        <member name="T:Ext.form.field.Trigger">
            <summary>
            Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
            The trigger has no default action, so you must assign a function to implement the trigger click handler by
            overriding onTriggerClick. You can create a Trigger field directly, as it renders exactly like a combobox
            for which you can provide a custom implementation.
            For example: Ext.define(&#39;Ext.ux.CustomTrigger&#39;, {
            extend: &#39;Ext.form.field.Trigger&#39;,
            alias: &#39;widget.customtrigger&#39;,
            // override onTriggerClick
            onTriggerClick: function() {
            Ext.Msg.alert(&#39;Status&#39;, &#39;You clicked my trigger!&#39;);
            }
            });
            Ext.create(&#39;Ext.form.FormPanel&#39;, {
            title: &#39;Form with TriggerField&#39;,
            bodyPadding: 5,
            width: 350,
            renderTo: Ext.getBody(),
            items:[{
            xtype: &#39;customtrigger&#39;,
            fieldLabel: &#39;Sample Trigger&#39;,
            emptyText: &#39;click the trigger&#39;,
            }]
            });
            However, in general you will most likely want to use Trigger as the base class for a reusable component.
            Ext.form.field.Date and Ext.form.field.ComboBox are perfect examples of this.
            </summary>
        </member>
        <member name="T:Ext.form.field.Text">
            <summary>
            A basic text field.  Can be used as a direct replacement for traditional text inputs,
            or as the base class for more sophisticated input controls (like Ext.form.field.TextArea
            and Ext.form.field.ComboBox). Has support for empty-field placeholder values (see emptyText). Validation The Text field has a useful set of validations built in:  allowBlank for making the field required minLength for requiring a minimum value length maxLength for setting a maximum value length (with enforceMaxLength to add it
            as the maxlength attribute on the input element) regex to specify a custom regular expression for validation  In addition, custom validations may be added:  vtype specifies a virtual type implementation from Ext.form.field.VTypes which can contain
            custom validation logic validator allows a custom arbitrary function to be called during validation  The details around how and when each of these validation options get used are described in the
            documentation for getErrors. By default, the field value is checked for validity immediately while the user is typing in the
            field. This can be controlled with the validateOnChange, checkChangeEvents, and
            checkChangeBugger configurations. Also see the details on Form Validation in the
            Ext.form.Panel class documentation. Masking and Character Stripping Text fields can be configured with custom regular expressions to be applied to entered values before
            validation: see maskRe and stripCharsRe for details.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Contact Info&#39;,
            width: 300,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;textfield&#39;,
            name: &#39;name&#39;,
            fieldLabel: &#39;Name&#39;,
            allowBlank: false  // requires a non-empty value
            }, {
            xtype: &#39;textfield&#39;,
            name: &#39;email&#39;,
            fieldLabel: &#39;Email Address&#39;,
            vtype: &#39;email&#39;  // requires value to be a valid email address format
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.autoSize">
            <summary>
            Automatically grows the field to accomodate the width of the text up to the maximum field width allowed. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.getBodyNaturalWidth">
            <summary>
            override
            To get the natural width of the inputEl, we do a simple calculation based on the
            'size' config. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.getErrors(System.Object)">
            <summary>
            Validates a value according to the field's validation rules and returns an array of errors
            for any failing validations. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.getRawValue">
            <summary>
            Returns the raw String value of the field, without performing any normalization, conversion, or validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.processRawValue(SharpKit.JavaScript.JsString)">
            <summary>
            Performs any necessary manipulation of a raw String value to prepare it for conversion
            and/or validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.reset">
            <summary>
            Resets the current field value to the originally-loaded value and clears any validation messages. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.selectText(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Selects text in this field ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Text.setValue(System.Object)">
            <summary>
            Sets a data value into the field and runs the change detection and validation. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Trigger.#ctor(System.Object)">
            <summary>
            Create a new Trigger field. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Trigger.getTriggerWidth">
            <summary>
            Get the total width of the trigger button area. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Trigger.onTriggerClick(Ext.EventObject)">
            <summary>
            The function that should handle the trigger's click event. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Trigger.setEditable(System.Boolean)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Trigger.setReadOnly(System.Boolean)">
            <summary>
            ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Trigger.triggerEl">
            <summary>
            A composite of all the trigger button elements. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Trigger.triggerWrap">
            <summary>
            A reference to the div element wrapping the trigger button(s). ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Picker.alignPicker">
            <summary>
            Aligns the picker to the ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Picker.collapse">
            <summary>
            Collapse this field's picker dropdown. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Picker.expand">
            <summary>
            Expand this field's picker dropdown. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Picker.getPicker">
            <summary>
            Return a reference to the picker component for this field, creating it if necessary by
            calling createPicker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Picker.onTriggerClick">
            <summary>
            Handles the trigger click; by default toggles between expanding and collapsing the
            picker component. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Picker.createPicker">
            <summary>
            Create and return the component to be used as this field's picker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Time.getErrors(System.Object)">
            <summary>
            Runs all of Time's validations and returns an array of any errors. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Time.setMaxValue(System.Object)">
            <summary>
            Replaces any existing maxValue with the new time and refreshes the picker's range. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Time.setMinValue(System.Object)">
            <summary>
            Replaces any existing minValue with the new time and refreshes the picker's range. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.emptyCls">
            <summary>
            The CSS class to apply to an empty field to style the emptyText
            (defaults to 'x-form-empty-field'). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.emptyText">
            <summary>
            The default text to place into an empty field (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.enforceMaxLength">
            <summary>
            True to set the maxLength property on the underlying input field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.growAppend">
            <summary>
            A string that will be appended to the field's current value for the purposes of calculating the target
            field size. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.maxLength">
            <summary>
            Maximum input field length allowed by validation (defaults to Number.MAX_VALUE). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.maxLengthText">
            <summary>
            Error text to display if the maximum length
            validation fails (defaults to 'The maximum length for this field is {maxL...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.minLengthText">
            <summary>
            Error text to display if the minimum length
            validation fails (defaults to 'The minimum length for this field is {minL...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.regex">
            <summary>
            A JavaScript RegExp object to be tested against the field value during validation
            (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.size">
            <summary>
            An initial value for the 'size' attribute on the text input element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.validator">
            <summary>
            A custom validation function to be called during field validation (getErrors)
            (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextConfig.vtypeText">
            <summary>
            A custom error message to display in place of the default message provided
            for the vtype currently set for this field...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.editable">
            <summary>
            false to prevent the user from typing text directly into the field;
            the field can only have its value set via an acti...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.readOnly">
            <summary>
            true to prevent the user from changing the field, and
            hides the trigger. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.repeatTriggerClick">
            <summary>
            true to attach a click repeater
            to the trigger. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.selectOnFocus">
            <summary>
            true to select any existing text in the field immediately on focus. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.triggerBaseCls">
            <summary>
            The base CSS class that is always added to the trigger button. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TriggerConfig.triggerCls">
            <summary>
            An additional CSS class used to style the trigger button. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.PickerConfig.editable">
            <summary>
            false to prevent the user from typing text directly into the field;
            the field can only have its value set via selecti...
            </summary>
        </member>
        <member name="P:Ext.form.field.PickerConfig.matchFieldWidth">
            <summary>
            Whether the picker dropdown's width should be explicitly set to match the width of the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.PickerConfig.openCls">
            <summary>
            A class to be added to the field's bodyEl element when the picker is opened. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.PickerConfig.pickerAlign">
            <summary>
            The alignment position with which to align the picker. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.PickerConfig.pickerOffset">
            <summary>
            An offset [x,y] to use in addition to the pickerAlign when positioning the picker. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.altFormats">
            <summary>
            Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
            format...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.format">
            <summary>
            The default time format string which can be overriden for localization support. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.maxText">
            <summary>
            The error text to display when the entered time is after maxValue (defaults to
            'The time in this field must be equal ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.maxValue">
            <summary>
            The maximum allowed time. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.minText">
            <summary>
            The error text to display when the entered time is before minValue (defaults to
            'The time in this field must be equal...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.minValue">
            <summary>
            The minimum allowed time. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.pickerMaxHeight">
            <summary>
            The maximum height of the Ext.picker.Time dropdown. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.selectOnTab">
            <summary>
            Whether the Tab key should select the currently highlighted item. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.submitFormat">
            <summary>
            The date format string which will be submitted to the server. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TimeConfig.triggerCls">
            <summary>
            An additional CSS class used to style the trigger button. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.TextEvents.autosize">
            <summary>
            Fires when the autoSize function is triggered and the field is
            resized according to the grow/growMin/growMax configs ...
            </summary>
        </member>
        <member name="F:Ext.form.field.TextEvents.keydown">
            <summary>
            Keydown input field event. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.TextEvents.keypress">
            <summary>
            Keypress input field event. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.TextEvents.keyup">
            <summary>
            Keyup input field event. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.PickerEvents.collapse">
            <summary>
            Fires when the field's picker is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.PickerEvents.expand">
            <summary>
            Fires when the field's picker is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.PickerEvents.select">
            <summary>
            Fires when a value is selected via the picker. ...
            </summary>
        </member>
        <member name="T:Ext.form.action.Load">
            <summary>
            A class which handles loading of data from a server into the Fields of an Ext.form.Basic. Instances of this class are only created by a Form when
            loading. Response Packet Criteria A response packet must contain:
            success property : Boolean data property : Object The data property contains the values of Fields to load.
            The individual value object for each Field is passed to the Field&#39;s
            setValue method.  JSON Packets By default, response packets are assumed to be JSON, so for the following form load call:
            var myFormPanel = new Ext.form.Panel({
            title: &#39;Client and routing info&#39;,
            items: [{
            fieldLabel: &#39;Client&#39;,
            name: &#39;clientName&#39;
            }, {
            fieldLabel: &#39;Port of loading&#39;,
            name: &#39;portOfLoading&#39;
            }, {
            fieldLabel: &#39;Port of discharge&#39;,
            name: &#39;portOfDischarge&#39;
            }]
            });
            myFormPanel.getForm().load({
            url: &#39;/getRoutingInfo.php&#39;,
            params: {
            consignmentRef: myConsignmentRef
            },
            failure: function(form, action) {
            Ext.Msg.alert(&quot;Load failed&quot;, action.result.errorMessage);
            }
            });
            a success response packet may look like this: {
            success: true,
            data: {
            clientName: &quot;Fred. Olsen Lines&quot;,
            portOfLoading: &quot;FXT&quot;,
            portOfDischarge: &quot;OSL&quot;
            }
            }
            while a failure response packet may look like this: {
            success: false,
            errorMessage: &quot;Consignment reference not found&quot;
            } Other data may be placed into the response for processing the Form&#39;s
            callback or event handler methods. The object decoded from this JSON is available in the
            result property.
            </summary>
        </member>
        <member name="T:Ext.dd.DragDropManager">
            <summary>
            DragDropManager is a singleton that tracks the element interaction for
            all DragDrop items in the window.  Generally, you will not call
            this class directly, but it does have helper methods that could
            be useful in your DragDrop implementations.
            </summary>
        </member>
        <member name="T:Ext.data.writer.Xml">
            <summary>
            This class is used to write Ext.data.Model data to the server in an XML format.
            The documentRoot property is used to specify the root element in the XML document.
            The record option is used to specify the element name for each record that will make
            up the XML document.
            </summary>
        </member>
        <member name="P:Ext.data.writer.XmlConfig.documentRoot">
            <summary>
            The name of the root element of the document. ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.XmlConfig.header">
            <summary>
            A header to use in the XML document (such as setting the encoding or version). ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.XmlConfig.record">
            <summary>
            The name of the node to use for each record. ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Ajax">
            <summary>
            AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to
            load data from the server, usually to be placed into a Store. Let&#39;s take a look at a typical
            setup. Here we&#39;re going to set up a Store that has an AjaxProxy. To prepare, we&#39;ll also set up a
            Model: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;]
            });
            //The Store contains the AjaxProxy as an inline configuration
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;ajax&#39;,
            url : &#39;users.json&#39;
            }
            });
            store.load();
            Our example is going to load user data into a Store, so we start off by defining a Model
            with the fields that we expect the server to return. Next we set up the Store itself, along with a proxy
            configuration. This configuration was automatically turned into an Ext.data.proxy.Ajax instance, with the url we
            specified being passed into AjaxProxy&#39;s constructor. It&#39;s as if we&#39;d done this: new Ext.data.proxy.Ajax({
            url: &#39;users.json&#39;,
            model: &#39;User&#39;,
            reader: &#39;json&#39;
            });
            A couple of extra configurations appeared here - model and reader. These are set by default
            when we create the proxy via the Store - the Store already knows about the Model, and Proxy&#39;s default
            Reader is JsonReader. Now when we call store.load(), the AjaxProxy springs into action, making a request to the url we configured
            (&#39;users.json&#39; in this case). As we&#39;re performing a read, it sends a GET request to that url (see actionMethods
            to customize this - by default any kind of read will be sent as a GET request and any kind of write will be sent as a
            POST request). Limitations AjaxProxy cannot be used to retrieve data from other domains. If your application is running on http://domainA.com
            it cannot load data from http://domainB.com because browsers have a built-in security policy that prohibits domains
            talking to each other via AJAX. If you need to read data from another domain and can&#39;t set up a proxy server (some software that runs on your own
            domain&#39;s web server and transparently forwards requests to http://domainB.com, making it look like they actually came
            from http://domainA.com), you can use Ext.data.proxy.JsonP and a technique known as JSON-P (JSON with
            Padding), which can help you get around the problem so long as the server on http://domainB.com is set up to support
            JSON-P responses. See JsonPProxy&#39;s introduction docs for more details. Readers and Writers AjaxProxy can be configured to use any type of Reader to decode the server&#39;s response. If
            no Reader is supplied, AjaxProxy will default to using a JsonReader. Reader configuration
            can be passed in as a simple object, which the Proxy automatically turns into a Reader
            instance: var proxy = new Ext.data.proxy.Ajax({
            model: &#39;User&#39;,
            reader: {
            type: &#39;xml&#39;,
            root: &#39;users&#39;
            }
            });
            proxy.getReader(); //returns an XmlReader instance based on the config we supplied
            Url generation AjaxProxy automatically inserts any sorting, filtering, paging and grouping options into the url it generates for
            each request. These are controlled with the following configuration options:  pageParam - controls how the page number is sent to the server
            (see also startParam and limitParam) sortParam - controls how sort information is sent to the server groupParam - controls how grouping information is sent to the server filterParam - controls how filter information is sent to the server  Each request sent by AjaxProxy is described by an Operation. To see how we can
            customize the generated urls, let&#39;s say we&#39;re loading the Proxy with the following Operation: var operation = new Ext.data.Operation({
            action: &#39;read&#39;,
            page  : 2
            });
            Now we&#39;ll issue the request for this Operation by calling read: var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;
            });
            proxy.read(operation); //GET /users?page=2
            Easy enough - the Proxy just copied the page property from the Operation. We can customize how this page data is
            sent to the server: var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;,
            pagePage: &#39;pageNumber&#39;
            });
            proxy.read(operation); //GET /users?pageNumber=2
            Alternatively, our Operation could have been configured to send start and limit parameters instead of page: var operation = new Ext.data.Operation({
            action: &#39;read&#39;,
            start : 50,
            limit : 25
            });
            var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;
            });
            proxy.read(operation); //GET /users?start=50&amp;limit=25
            Again we can customize this url: var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;,
            startParam: &#39;startIndex&#39;,
            limitParam: &#39;limitIndex&#39;
            });
            proxy.read(operation); //GET /users?startIndex=50&amp;limitIndex=25
            AjaxProxy will also send sort and filter information to the server. Let&#39;s take a look at how this looks with a
            more expressive Operation object: var operation = new Ext.data.Operation({
            action: &#39;read&#39;,
            sorters: [
            new Ext.util.Sorter({
            property : &#39;name&#39;,
            direction: &#39;ASC&#39;
            }),
            new Ext.util.Sorter({
            property : &#39;age&#39;,
            direction: &#39;DESC&#39;
            })
            ],
            filters: [
            new Ext.util.Filter({
            property: &#39;eyeColor&#39;,
            value   : &#39;brown&#39;
            })
            ]
            });
            This is the type of object that is generated internally when loading a Store with sorters
            and filters defined. By default the AjaxProxy will JSON encode the sorters and filters, resulting in something like
            this (note that the url is escaped before sending the request, but is left unescaped here for clarity): var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;
            });
            proxy.read(operation); //GET /users?sort=[{&quot;property&quot;:&quot;name&quot;,&quot;direction&quot;:&quot;ASC&quot;},{&quot;property&quot;:&quot;age&quot;,&quot;direction&quot;:&quot;DESC&quot;}]&amp;filter=[{&quot;property&quot;:&quot;eyeColor&quot;,&quot;value&quot;:&quot;brown&quot;}]
            We can again customize how this is created by supplying a few configuration options. Let&#39;s say our server is set
            up to receive sorting information is a format like &quot;sortBy=name#ASC,age#DESC&quot;. We can configure AjaxProxy to provide
            that format like this:  var proxy = new Ext.data.proxy.Ajax({
            url: &#39;/users&#39;,
            sortParam: &#39;sortBy&#39;,
            filterParam: &#39;filterBy&#39;,
            //our custom implementation of sorter encoding - turns our sorters into &quot;name#ASC,age#DESC&quot;
            encodeSorters: function(sorters) {
            var length   = sorters.length,
            sortStrs = [],
            sorter, i;
            for (i = 0; i  We can also provide a custom encodeFilters function to encode our filters.
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Server">
            <summary>
            ServerProxy is a superclass of JsonPProxy and AjaxProxy,
            and would not usually be used directly. ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
            called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now an
            alias of AjaxProxy).
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.afterRequest(Ext.data.Request,System.Boolean)">
            <summary>
            Optional callback function which can be used to clean up after a request has been completed. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.buildRequest(Ext.data.Operation)">
            <summary>
            Creates and returns an Ext.data.Request object based on the options passed by the Store
            that this Proxy is attached to. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.buildUrl(Ext.data.Request)">
            <summary>
            Generates a url based on a given Ext.data.Request object. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.doRequest(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            In ServerProxy subclasses, the create, read, update and destroy methods all pass
            through to doRequest. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.encodeFilters(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes the array of Ext.util.Filter objects into a string to be sent in the request url. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.encodeSorters(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes the array of Ext.util.Sorter objects into a string to be sent in the request url. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Server.processResponse(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Ajax.#ctor">
            <summary>
            Note that if this HttpProxy is being used by a Store, then the
            Store's call to load will override any specified callb...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Ajax.getMethod(Ext.data.Request)">
            <summary>
            Returns the HTTP method name for a given request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.Ajax.actionMethods">
            <summary>
            Mapping of action name to HTTP request method. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.api">
            <summary>
            Specific urls to call on CRUD action methods "create", "read", "update" and "destroy". ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.directionParam">
            <summary>
            The name of the direction parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.extraParams">
            <summary>
            Extra parameters that will be included on every request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.filterParam">
            <summary>
            The name of the 'filter' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.groupParam">
            <summary>
            The name of the 'group' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.limitParam">
            <summary>
            The name of the 'limit' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.noCache">
            <summary>
            (optional) Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.pageParam">
            <summary>
            The name of the 'page' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.reader">
            <summary>
            The Ext.data.reader.Reader to use to decode the server's response. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.simpleSortMode">
            <summary>
            Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a remote...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.sortParam">
            <summary>
            The name of the 'sort' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.startParam">
            <summary>
            The name of the 'start' parameter to send in a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.timeout">
            <summary>
            (optional) The number of milliseconds to wait for a response. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.ServerConfig.writer">
            <summary>
            The Ext.data.writer.Writer to use to encode any request sent to the server. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.AjaxConfig.headers">
            <summary>
            Any headers to add to the Ajax request. ...
            </summary>
        </member>
        <member name="F:Ext.data.proxy.ServerEvents.exception">
            <summary>
            Fires when the server returns an exception ...
            </summary>
        </member>
        <member name="T:Ext.util.DelayedTask">
            <summary>
            The DelayedTask class provides a convenient way to &quot;buffer&quot; the execution of a method,
            performing setTimeout where a new timeout cancels the old timeout. When called, the
            task will wait the specified time period before executing. If durng that time period,
            the task is called again, the original call will be cancelled. This continues so that
            the function is only called a single time for each iteration. This method is especially useful for things like detecting whether a user has finished
            typing in a text field. An example would be performing validation on a keypress. You can
            use this class to buffer the keypress events for a certain number of milliseconds, and
            perform only if they stop for that amount of time. Usage var task = new Ext.util.DelayedTask(function(){
            alert(Ext.getDom(&#39;myInputField&#39;).value.length);
            });
            // Wait 500ms before calling our function. If the user presses another key
            // during that 500ms, it will be cancelled and we&#39;ll wait another 500ms.
            Ext.get(&#39;myInputField&#39;).on(&#39;keypress&#39;, function(){
            task.delay(500);
            });
            Note that we are using a DelayedTask here to illustrate a point. The configuration
            option buffer for addListener/on will
            also setup a delayed task for you to buffer events.
            </summary>
        </member>
        <member name="M:Ext.util.DelayedTask.#ctor(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            The parameters to this constructor serve as defaults and are not required. ...
            </summary>
        </member>
        <member name="M:Ext.util.DelayedTask.cancel">
            <summary>
            Cancel the last queued timeout ...
            </summary>
        </member>
        <member name="M:Ext.util.DelayedTask.delay(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cancels any pending timeout and queues a new one ...
            </summary>
        </member>
        <member name="T:Ext.resizer.Handle">
            <summary>
            Provides a handle for 9-point resizing of Elements or Components.
            </summary>
        </member>
        <member name="T:Ext.layout.container.Border">
            <summary>
            This is a multi-pane, application-oriented UI layout style that supports multiple
            nested panels, automatic bars between regions and built-in
            expanding and collapsing of regions. This class is intended to be extended or created via the layout:&#39;border&#39; Ext.container.Container.layout config, and should generally not need to be created directly
            via the new keyword.  Example usage:      Ext.create(&#39;Ext.panel.Panel&#39;, {
            width: 500,
            height: 400,
            title: &#39;Border Layout&#39;,
            layout: &#39;border&#39;,
            items: [{
            title: &#39;South Region is resizable&#39;,
            region: &#39;south&#39;,     // position for region
            xtype: &#39;panel&#39;,
            height: 100,
            split: true,         // enable resizing
            margins: &#39;0 5 5 5&#39;
            },{
            // xtype: &#39;panel&#39; implied by default
            title: &#39;West Region is collapsible&#39;,
            region:&#39;west&#39;,
            xtype: &#39;panel&#39;,
            margins: &#39;5 0 0 5&#39;,
            width: 200,
            collapsible: true,   // make collapsible
            id: &#39;west-region-container&#39;,
            layout: &#39;fit&#39;
            },{
            title: &#39;Center Region&#39;,
            region: &#39;center&#39;,     // center region is required, no width/height specified
            xtype: &#39;panel&#39;,
            layout: &#39;fit&#39;,
            margins: &#39;5 5 0 0&#39;
            }],
            renderTo: Ext.getBody()
            });
            Notes:  Any Container using the Border layout must have a child item with region:&#39;center&#39;.
            The child item in the center region will always be resized to fill the remaining space not used by
            the other regions in the layout. Any child items with a region of west or east may be configured with either
            an initial width, or a Ext.layout.container.Box.flex value, or an initial percentage width string (Which is simply divided by 100 and used as a flex value). The &#39;center&#39; region has a flex value of 1. Any child items with a region of north or south may be configured with either
            an initial height, or a Ext.layout.container.Box.flex value, or an initial percentage height string (Which is simply divided by 100 and used as a flex value). The &#39;center&#39; region has a flex value of 1. The regions of a BorderLayout are fixed at render time and thereafter, its child Components may not be removed or added.To add/remove
            Components within a BorderLayout, have them wrapped by an additional Container which is directly
            managed by the BorderLayout.  If the region is to be collapsible, the Container used directly
            by the BorderLayout manager should be a Panel.  In the following example a Container (an Ext.panel.Panel)
            is added to the west region:
            wrc = Ext.getCmp(&#39;west-region-container&#39;);
            wrc.removeAll();
            wrc.add({
            title: &#39;Added Panel&#39;,
            html: &#39;Some content&#39;
            });
            There is no BorderLayout.Region class in ExtJS 4.0+
            </summary>
        </member>
        <member name="M:Ext.layout.container.Border.getPlaceholder(Ext.panel.Panel)">
            <summary>
            Return the placeholder Component to which the passed child Panel of the layout will collapse. ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Auto">
            <summary>
            The AutoLayout is the default layout manager delegated by Ext.container.Container to
            render any child Components when no layout is configured into
            a Container..  AutoLayout provides only a passthrough of any layout calls
            to any child containers.
            Example usage: Ext.create(&#39;Ext.Panel&#39;, {
            width: 500,
            height: 280,
            title: &quot;AutoLayout Panel&quot;,
            layout: &#39;auto&#39;,
            renderTo: document.body,
            items: [{
            xtype: &#39;panel&#39;,
            title: &#39;Top Inner Panel&#39;,
            width: &#39;75%&#39;,
            height: 90
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Bottom Inner Panel&#39;,
            width: &#39;75%&#39;,
            height: 90
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.grid.property.HeaderContainer">
            <summary>
            A custom HeaderContainer for the Ext.grid.property.Grid.  Generally it should not need to be used directly.
            </summary>
        </member>
        <member name="M:Ext.grid.property.HeaderContainer.#ctor(Ext.grid.property.Grid,System.Object)">
            <summary>
            Creates new HeaderContainer. ...
            </summary>
        </member>
        <member name="T:Ext.fx.target.CompositeElementCSS">
            <summary>
            This class represents a animation target for a Ext.CompositeElement, where the
            constituent elements support CSS based animation. It allows each Ext.core.Element in
            the group to be animated as a whole. In general this class will not be created directly,
            the Ext.CompositeElement will be passed to the animation and the appropriate target
            will be created.
            </summary>
        </member>
        <member name="T:Ext.fx.target.CompositeElement">
            <summary>
            This class represents a animation target for a Ext.CompositeElement. It allows
            each Ext.core.Element in the group to be animated as a whole. In general this class will not be
            created directly, the Ext.CompositeElement will be passed to the animation and
            and the appropriate target will be created.
            </summary>
        </member>
        <member name="T:Ext.form.field.TextArea">
            <summary>
            This class creates a multiline text field, which can be used as a direct replacement for traditional
            textarea fields. In addition, it supports automatically growing the height of the textarea to
            fit its content. All of the configuration options from Ext.form.field.Text can be used on TextArea.
            Example usage: Ext.create(&#39;Ext.form.FormPanel&#39;, {
            title      : &#39;Sample TextArea&#39;,
            width      : 400,
            bodyPadding: 10,
            renderTo   : Ext.getBody(),
            items: [{
            xtype     : &#39;textareafield&#39;,
            grow      : true,
            name      : &#39;message&#39;,
            fieldLabel: &#39;Message&#39;,
            anchor    : &#39;100%&#39;
            }]
            });
            Some other useful configuration options when using grow are growMin and growMax. These
            allow you to set the minimum and maximum grow heights for the textarea.
            </summary>
        </member>
        <member name="M:Ext.form.field.TextArea.autoSize">
            <summary>
            Automatically grows the field to accomodate the height of the text up to the maximum field height allowed. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.TextArea.getBodyNaturalWidth">
            <summary>
            override
            To get the natural width of the textarea element, we do a simple calculation based on the
            'cols' config. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextAreaConfig.cols">
            <summary>
            An initial value for the 'cols' attribute on the textarea element. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextAreaConfig.enterIsSpecial">
            <summary>
            True if you want the enter key to be classed as a special key. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextAreaConfig.growAppend">
            <summary>
            A string that will be appended to the field's current value for the purposes of calculating the target
            field size. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.TextAreaConfig.preventScrollbars">
            <summary>
            true to prevent scrollbars from appearing regardless of how much text is
            in the field. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.ComboBox">
            <summary>
            A combobox control with support for autocomplete, remote loading, and many other features. A ComboBox is like a combination of a traditional HTML text &amp;lt;input&amp;gt; field and a &amp;lt;select&amp;gt;
            field; the user is able to type freely into the field, and/or pick values from a dropdown selection
            list. The user can input any value by default, even if it does not appear in the selection list;
            to prevent free-form values and restrict them to items in the list, set forceSelection to true. The selection list&#39;s options are populated from any Ext.data.Store, including remote
            stores. The data items in the store are mapped to each option&#39;s displayed text and backing value via
            the valueField and displayField configurations, respectively. If your store is not remote, i.e. it depends only on local data and is loaded up front, you should be
            sure to set the queryMode to &#39;local&#39;, as this will improve responsiveness for the user.  Example usage: // The data store containing the list of states
            var states = Ext.create(&#39;Ext.data.Store&#39;, {
            fields: [&#39;abbr&#39;, &#39;name&#39;],
            data : [
            {&quot;abbr&quot;:&quot;AL&quot;, &quot;name&quot;:&quot;Alabama&quot;},
            {&quot;abbr&quot;:&quot;AK&quot;, &quot;name&quot;:&quot;Alaska&quot;},
            {&quot;abbr&quot;:&quot;AZ&quot;, &quot;name&quot;:&quot;Arizona&quot;}
            //...
            ]
            });
            // Create the combo box, attached to the states data store
            Ext.create(&#39;Ext.form.ComboBox&#39;, {
            fieldLabel: &#39;Choose State&#39;,
            store: states,
            queryMode: &#39;local&#39;,
            displayField: &#39;name&#39;,
            valueField: &#39;abbr&#39;,
            renderTo: Ext.getBody()
            });
            Events To do something when something in ComboBox is selected, configure the select event: var cb = Ext.create(&#39;Ext.form.ComboBox&#39;, {
            // all of your config options
            listeners:{
            scope: yourScope,
            &#39;select&#39;: yourFunction
            }
            });
            // Alternatively, you can assign events after the object is created:
            var cb = new Ext.form.field.ComboBox(yourOptions);
            cb.on(&#39;select&#39;, yourFunction, yourScope);
            Multiple Selection ComboBox also allows selection of multiple items from the list; to enable multi-selection set the
            multiSelect config to true.
            </summary>
        </member>
        <member name="M:Ext.form.field.ComboBox.clearValue">
            <summary>
            Clears any value currently set in the ComboBox. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.ComboBox.doQuery(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Executes a query to filter the dropdown list. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.ComboBox.select(System.Object)">
            <summary>
            Selects an item by a Model, or by a key value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.ComboBox.setValue(System.Object,System.Object)">
            <summary>
            Sets the specified value(s) into the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBox.lastQuery">
            <summary>
            The value of the match string used to filter the store. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.autoSelect">
            <summary>
            true to automatically highlight the first result gathered by the data store
            in the dropdown list when it is opened. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.delimiter">
            <summary>
            The character(s) used to separate the display values of multiple selected items
            when multiSelect = true. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.displayField">
            <summary>
            The underlying data field name to bind to this
            ComboBox (defaults to 'text'). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.forceSelection">
            <summary>
            true to restrict the selected value to one of the values in the list,
            false to allow the user to set arbitrary text i...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.listConfig">
            <summary>
            An optional set of configuration properties that will be passed to the Ext.view.BoundList's
            constructor. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.minChars">
            <summary>
            The minimum number of characters the user must type before autocomplete and
            typeAhead activate (defaults to 4 if quer...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.multiSelect">
            <summary>
            If set to true, allows the combo field to hold more than one value at a time, and allows selecting
            multiple items fro...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.pageSize">
            <summary>
            If greater than 0, a Ext.toolbar.Paging is displayed in the
            footer of the dropdown list and the filter queries will e...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.queryDelay">
            <summary>
            The length of time in milliseconds to delay between the start of typing and
            sending the query to filter the dropdown ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.queryMode">
            <summary>
            The mode in which the ComboBox uses the configured Store. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.queryParam">
            <summary>
            Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with
            queryMode: 'rem...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.selectOnTab">
            <summary>
            Whether the Tab key should select the currently highlighted item. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.store">
            <summary>
            The data source to which this combo is bound (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.transform">
            <summary>
            The id, DOM node or Ext.core.Element of an existing HTML &lt;select&gt; element to
            convert into a ComboBox. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.triggerAction">
            <summary>
            The action to execute when the trigger is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.triggerCls">
            <summary>
            An additional CSS class used to style the trigger button. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.typeAhead">
            <summary>
            true to populate and autoselect the remainder of the text being
            typed after a configurable delay (typeAheadDelay) if ...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.valueField">
            <summary>
            @required
            The underlying data value name to bind to this ComboBox (defaults to match
            the value of the displayField co...
            </summary>
        </member>
        <member name="P:Ext.form.field.ComboBoxConfig.valueNotFoundText">
            <summary>
            When using a name/value combo, if the value passed to setValue is not found in
            the store, valueNotFoundText will be d...
            </summary>
        </member>
        <member name="F:Ext.form.field.ComboBoxEvents.beforequery">
            <summary>
            Fires before all queries are processed. ...
            </summary>
        </member>
        <member name="T:Ext.form.action.DirectLoad">
            <summary>
            Provides Ext.direct.Manager support for loading form data. This example illustrates usage of Ext.direct.Direct to load a form through Ext.Direct. var myFormPanel = new Ext.form.Panel({
            // configs for FormPanel
            title: &#39;Basic Information&#39;,
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            // configs apply to child items
            defaults: {anchor: &#39;100%&#39;},
            defaultType: &#39;textfield&#39;,
            items: [{
            fieldLabel: &#39;Name&#39;,
            name: &#39;name&#39;
            },{
            fieldLabel: &#39;Email&#39;,
            name: &#39;email&#39;
            },{
            fieldLabel: &#39;Company&#39;,
            name: &#39;company&#39;
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a &#39;formHandler&#39;
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: [&#39;uid&#39;, &#39;foo&#39;]
            });
            // load the form
            myFormPanel.getForm().load({
            // pass 2 arguments to server side getBasicInfo method (len=2)
            params: {
            foo: &#39;bar&#39;,
            uid: 34
            }
            });
            The data packet sent to the server will resemble something like: [
            {
            &quot;action&quot;:&quot;Profile&quot;,&quot;method&quot;:&quot;getBasicInfo&quot;,&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:2,
            &quot;data&quot;:[34,&quot;bar&quot;] // note the order of the params
            }
            ]
            The form will process a data packet returned by the server that is similar
            to the following format: [
            {
            &quot;action&quot;:&quot;Profile&quot;,&quot;method&quot;:&quot;getBasicInfo&quot;,&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:2,
            &quot;result&quot;:{
            &quot;success&quot;:true,
            &quot;data&quot;:{
            &quot;name&quot;:&quot;Fred Flintstone&quot;,
            &quot;company&quot;:&quot;Slate Rock and Gravel&quot;,
            &quot;email&quot;:&quot;fred.flintstone@slaterg.com&quot;
            }
            }
            }
            ]
            </summary>
        </member>
        <member name="T:Ext.ElementLoader">
            <summary>
            A class used to load remote content to an Element. Sample usage: Ext.get(&#39;el&#39;).load({
            url: &#39;myPage.php&#39;,
            scripts: true,
            params: {
            id: 1
            }
            });
            In general this class will not be instanced directly, rather the Ext.core.Element.load method
            will be used.
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.abort">
            <summary>
            Aborts the active load request ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.destroy">
            <summary>
            Destroys the loader. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.getTarget">
            <summary>
            Get the target of this loader. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.isAutoRefreshing">
            <summary>
            Checks whether the loader is automatically refreshing. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.load(System.Object)">
            <summary>
            Load new data from the server. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.setTarget(System.Object)">
            <summary>
            Set an {Ext.Element} as the target of this loader. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.startAutoRefresh(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Automatically refreshes the content over a specified period. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.stopAutoRefresh">
            <summary>
            Clears any auto refresh. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.ElementLoader.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.ajaxOptions">
            <summary>
            Any additional options to be passed to the request, for example timeout or headers. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.autoLoad">
            <summary>
            True to have the loader make a request as soon as it is created. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.baseParams">
            <summary>
            Params that will be attached to every request. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.params">
            <summary>
            Any params to be attached to the Ajax request. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.renderer">
            <summary>
            A custom function to render the content to the element. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.target">
            <summary>
            The target element for the loader. ...
            </summary>
        </member>
        <member name="P:Ext.ElementLoaderConfig.url">
            <summary>
            The url to retrieve the content from. ...
            </summary>
        </member>
        <member name="F:Ext.ElementLoaderEvents.beforeload">
            <summary>
            Fires before a load request is made to the server. ...
            </summary>
        </member>
        <member name="F:Ext.ElementLoaderEvents.exception">
            <summary>
            Fires after a successful load. ...
            </summary>
        </member>
        <member name="T:Ext.Date">
            <summary>
            A set of useful static methods to deal with date
            Note that if Ext.Date is required and loaded, it will copy all methods / properties to
            this object for convenience The date parsing and formatting syntax contains a subset of
            PHP&#39;s date() function, and the formats that are
            supported will provide results equivalent to their PHP versions. The following is a list of all currently supported formats:
            Format  Description                                                               Example returned values
            ------  -----------------------------------------------------------------------   -----------------------
            d     Day of the month, 2 digits with leading zeros                             01 to 31
            D     A short textual representation of the day of the week                     Mon to Sun
            j     Day of the month without leading zeros                                    1 to 31
            l     A full textual representation of the day of the week                      Sunday to Saturday
            N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
            S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
            w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
            z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
            W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
            F     A full textual representation of a month, such as January or March        January to December
            m     Numeric representation of a month, with leading zeros                     01 to 12
            M     A short textual representation of a month                                 Jan to Dec
            n     Numeric representation of a month, without leading zeros                  1 to 12
            t     Number of days in the given month                                         28 to 31
            L     Whether it&amp;#39;s a leap year                                                  1 if it is a leap year, 0 otherwise.
            o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
            belongs to the previous or next year, that year is used instead)
            Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
            y     A two digit representation of a year                                      Examples: 99 or 03
            a     Lowercase Ante meridiem and Post meridiem                                 am or pm
            A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
            g     12-hour format of an hour without leading zeros                           1 to 12
            G     24-hour format of an hour without leading zeros                           0 to 23
            h     12-hour format of an hour with leading zeros                              01 to 12
            H     24-hour format of an hour with leading zeros                              00 to 23
            i     Minutes, with leading zeros                                               00 to 59
            s     Seconds, with leading zeros                                               00 to 59
            u     Decimal fraction of a second                                              Examples:
            (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
            100 (i.e. 0.100s) or
            999 (i.e. 0.999s) or
            999876543210 (i.e. 0.999876543210s)
            O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
            P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
            T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
            Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
            c     ISO 8601 date
            Notes:                                                                    Examples:
            1) If unspecified, the month / day defaults to the current month / day,   1991 or
            the time defaults to midnight, while the timezone defaults to the      1992-10 or
            browser&#39;s timezone. If a time is specified, it must include both hours 1993-09-20 or
            and minutes. The &quot;T&quot; delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
            are optional.                                                          1995-07-18T17:21:28-02:00 or
            2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
            least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
            of digits allowed), and may be delimited by either a &#39;.&#39; or a &#39;,&#39;      1998-04-15T20:24:31.2468Z or
            Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
            date-time granularity which are supported, or see                         2000-02-13T21:25:33
            http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
            U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
            MS    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
            \/Date(1238606590509+0800)\/
            Example usage (note that you must escape format specifiers with &#39;\&#39; to render them as character literals): // Sample date:
            // &#39;Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)&#39;
            var dt = new Date(&#39;1/10/2007 03:05:01 PM GMT-0600&#39;);
            console.log(Ext.Date.format(dt, &#39;Y-m-d&#39;));                          // 2007-01-10
            console.log(Ext.Date.format(dt, &#39;F j, Y, g:i a&#39;));                  // January 10, 2007, 3:05 pm
            console.log(Ext.Date.format(dt, &#39;l, \\t\\he jS \\of F Y h:i:s A&#39;)); // Wednesday, the 10th of January 2007 03:05:01 PM
            Here are some standard date/time patterns that you might find helpful.  They
            are not part of the source of Ext.Date, but to use them you can simply copy this
            block of code into any script that is included after Ext.Date and they will also become
            globally available on the Date object.  Feel free to add or remove patterns as needed in your code. Ext.Date.patterns = {
            ISO8601Long:&quot;Y-m-d H:i:s&quot;,
            ISO8601Short:&quot;Y-m-d&quot;,
            ShortDate: &quot;n/j/Y&quot;,
            LongDate: &quot;l, F d, Y&quot;,
            FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
            MonthDay: &quot;F d&quot;,
            ShortTime: &quot;g:i A&quot;,
            LongTime: &quot;g:i:s A&quot;,
            SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
            UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
            YearMonth: &quot;F, Y&quot;
            };
            Example usage: var dt = new Date();
            console.log(Ext.Date.format(dt, Ext.Date.patterns.ShortDate));
            Developer-written, custom formats may be used by supplying both a formatting and a parsing function
            which perform to specialized requirements. The functions are stored in parseFunctions and formatFunctions.
            </summary>
        </member>
        <member name="M:Ext.Date.add(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Provides a convenient method for performing basic date arithmetic. ...
            </summary>
        </member>
        <member name="M:Ext.Date.between(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsDate)">
            <summary>
            Checks if a date falls on or between the given start and end dates. ...
            </summary>
        </member>
        <member name="M:Ext.Date.clearTime(SharpKit.JavaScript.JsDate,System.Boolean)">
            <summary>
            Attempts to clear all time information from this Date by setting the time to midnight of the same day,
            automatically ...
            </summary>
        </member>
        <member name="M:Ext.Date.clone(SharpKit.JavaScript.JsDate)">
            <summary>
            Creates and returns a new Date instance with the exact same date value as the called instance. ...
            </summary>
        </member>
        <member name="M:Ext.Date.format(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsString)">
            <summary>
            Formats a date given the supplied format string. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getDayOfYear(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the numeric day number of the year, adjusted for leap year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getDaysInMonth(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the number of days in the current month, adjusted for leap year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getElapsed(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsDate)">
            <summary>
            Returns the number of milliseconds between two dates ...
            </summary>
        </member>
        <member name="M:Ext.Date.getFirstDateOfMonth(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the date of the first day of the month in which this date resides. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getFirstDayOfMonth(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the first day of the current month, adjusted for leap year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getGMTOffset(SharpKit.JavaScript.JsDate,System.Boolean)">
            <summary>
            Get the offset from GMT of the current date (equivalent to the format specifier 'O'). ...
            </summary>
        </member>
        <member name="M:Ext.Date.getLastDateOfMonth(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the date of the last day of the month in which this date resides. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getLastDayOfMonth(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the last day of the current month, adjusted for leap year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.getSuffix(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the English ordinal suffix of the current day (equivalent to the format specifier 'S'). ...
            </summary>
        </member>
        <member name="M:Ext.Date.getTimezone(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the timezone abbreviation of the current date (equivalent to the format specifier 'T'). ...
            </summary>
        </member>
        <member name="M:Ext.Date.getWeekOfYear(SharpKit.JavaScript.JsDate)">
            <summary>
            Get the numeric ISO-8601 week number of the year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.isDST(SharpKit.JavaScript.JsDate)">
            <summary>
            Checks if the current date is affected by Daylight Saving Time (DST). ...
            </summary>
        </member>
        <member name="M:Ext.Date.isLeapYear(SharpKit.JavaScript.JsDate)">
            <summary>
            Checks if the current date falls within a leap year. ...
            </summary>
        </member>
        <member name="M:Ext.Date.now">
            <summary>
            Returns the current timestamp ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Memory">
            <summary>
            In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
            every page refresh. Usually this Proxy isn&#39;t used directly, serving instead as a helper to a Store where a
            reader is required to load data. For example, say we have a Store for a User model and have some inline data we want
            to load, but this data isn&#39;t in quite the right format: we can use a MemoryProxy with a JsonReader to read it into
            our Store: //this is the model we will be using in the store
            Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;id&#39;,    type: &#39;int&#39;},
            {name: &#39;name&#39;,  type: &#39;string&#39;},
            {name: &#39;phone&#39;, type: &#39;string&#39;, mapping: &#39;phoneNumber&#39;}
            ]
            });
            //this data does not line up to our model fields - the phone field is called phoneNumber
            var data = {
            users: [
            {
            id: 1,
            name: &#39;Ed Spencer&#39;,
            phoneNumber: &#39;555 1234&#39;
            },
            {
            id: 2,
            name: &#39;Abe Elias&#39;,
            phoneNumber: &#39;666 1234&#39;
            }
            ]
            };
            //note how we set the &#39;root&#39; in the reader to match the data structure above
            var store = new Ext.data.Store({
            autoLoad: true,
            model: &#39;User&#39;,
            data : data,
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;users&#39;
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Memory.read(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Reads data from the configured data object. ...
            </summary>
        </member>
        <member name="T:Ext.data.BelongsToAssociation">
            <summary>
            Represents a many to one association with another model. The owner model is expected to have
            a foreign key which references the primary key of the associated model: Ext.define(&#39;Category&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;id&#39;,   type: &#39;int&#39;},
            {name: &#39;name&#39;, type: &#39;string&#39;}
            ]
            });
            Ext.define(&#39;Product&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            {name: &#39;id&#39;,          type: &#39;int&#39;},
            {name: &#39;category_id&#39;, type: &#39;int&#39;},
            {name: &#39;name&#39;,        type: &#39;string&#39;}
            ],
            // we can use the belongsTo shortcut on the model to create a belongsTo association
            belongsTo: {type: &#39;belongsTo&#39;, model: &#39;Category&#39;}
            });
            In the example above we have created models for Products and Categories, and linked them together
            by saying that each Product belongs to a Category. This automatically links each Product to a Category
            based on the Product&#39;s category_id, and provides new functions on the Product model: Generated getter function The first function that is added to the owner model is a getter function: var product = new Product({
            id: 100,
            category_id: 20,
            name: &#39;Sneakers&#39;
            });
            product.getCategory(function(category, operation) {
            //do something with the category object
            alert(category.get(&#39;id&#39;)); //alerts 20
            }, this);
            The getCategory function was created on the Product model when we defined the association. This uses the
            Category&#39;s configured proxy to load the Category asynchronously, calling the provided
            callback when it has loaded. The new getCategory function will also accept an object containing success, failure and callback properties
            - callback will always be called, success will only be called if the associated model was loaded successfully
            and failure will only be called if the associatied model could not be loaded: product.getCategory({
            callback: function(category, operation) {}, //a function that will always be called
            success : function(category, operation) {}, //a function that will only be called if the load succeeded
            failure : function(category, operation) {}, //a function that will only be called if the load did not succeed
            scope   : this //optionally pass in a scope object to execute the callbacks in
            });
            In each case above the callbacks are called with two arguments - the associated model instance and the
            operation object that was executed to load that instance. The Operation object is
            useful when the instance could not be loaded. Generated setter function The second generated function sets the associated model instance - if only a single argument is passed to
            the setter then the following two calls are identical: //this call
            product.setCategory(10);
            //is equivalent to this call:
            product.set(&#39;category_id&#39;, 10);
            If we pass in a second argument, the model will be automatically saved and the second argument passed to
            the owner model&#39;s save method: product.setCategory(10, function(product, operation) {
            //the product has been saved
            alert(product.get(&#39;category_id&#39;)); //now alerts 10
            });
            //alternative syntax:
            product.setCategory(10, {
            callback: function(product, operation), //a function that will always be called
            success : function(product, operation), //a function that will only be called if the load succeeded
            failure : function(product, operation), //a function that will only be called if the load did not succeed
            scope   : this //optionally pass in a scope object to execute the callbacks in
            })
            Customisation Associations reflect on the models they are linking to automatically set up properties such as the
            primaryKey and foreignKey. These can alternatively be specified: Ext.define(&#39;Product&#39;, {
            fields: [...],
            associations: [
            {type: &#39;belongsTo&#39;, model: &#39;Category&#39;, primaryKey: &#39;unique_id&#39;, foreignKey: &#39;cat_id&#39;}
            ]
            });
            Here we replaced the default primary key (defaults to &#39;id&#39;) and foreign key (calculated as &#39;category_id&#39;)
            with our own settings. Usually this will not be needed.
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.foreignKey">
            <summary>
            The name of the foreign key on the owner model that links it to the associated
            model. ...
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.getterName">
            <summary>
            The name of the getter function that will be added to the local model's prototype. ...
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.setterName">
            <summary>
            The name of the setter function that will be added to the local model's prototype. ...
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.type">
            <summary>
            The type configuration can be used when creating associations using a configuration object. ...
            </summary>
        </member>
        <member name="T:Ext.CompositeElementLite">
            <summary>
            This class encapsulates a collection of DOM elements, providing methods to filter
            members, or to perform collective actions upon the whole set. Although they are not listed, this class supports all of the methods of Ext.core.Element and
            Ext.fx.Anim. The methods from these classes will be performed on all the elements in this collection. Example: var els = Ext.select(&quot;#some-el div.some-class&quot;);
            // or select directly from an existing element
            var el = Ext.get(&#39;some-el&#39;);
            el.select(&#39;div.some-class&#39;);
            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
            els.setWidth(100).hide(true);
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.add(System.Object,System.Object)">
            <summary>
            Adds elements to this Composite object. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.clear">
            <summary>
            Removes all elements. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.contains(System.Object)">
            <summary>
            Returns true if this composite contains the passed element ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Calls the passed function for each element in this composite. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.fill(System.Object)">
            <summary>
            Clears this Composite and adds the elements passed. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.filter(System.Object)">
            <summary>
            Filters this composite to only elements that match the passed selector. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.first">
            <summary>
            Returns the first Element ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.getCount">
            <summary>
            Returns the number of elements in this Composite. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.indexOf(System.Object)">
            <summary>
            Find the index of the passed element within the composite collection. ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.item(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a flyweight Element of the dom element object at the specified index ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.last">
            <summary>
            Returns the last Element ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.removeElement(System.Object,System.Boolean)">
            <summary>
            Removes the specified element(s). ...
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.replaceElement(System.Object,System.Object,System.Boolean)">
            <summary>
            Replaces the specified element with the passed element. ...
            </summary>
        </member>
        <member name="P:Ext.CompositeElementLite.elements">
            <summary>
            The Array of DOM elements which this CompositeElement encapsulates. ...
            </summary>
        </member>
        <member name="T:Ext.chart.series.Column">
            <summary>
            Creates a Column Chart. Much of the methods are inherited from Bar. A Column Chart is a useful visualization technique to display quantitative information for different
            categories that can show some progression (or regression) in the data set.
            As with all other series, the Column Series must be appended in the series Chart array configuration. See the Chart
            documentation for more information. A typical configuration object for the column series could be:  Example var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;data1&#39;],
            label: {
            renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
            },
            title: &#39;Sample Values&#39;,
            grid: true,
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;left&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;
            }],
            axes: [{
            type: &#39;Numeric&#39;,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;],
            label: {
            renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
            },
            title: &#39;Sample Values&#39;,
            grid: true,
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;
            }],
            series: [{
            type: &#39;column&#39;,
            axis: &#39;left&#39;,
            highlight: true,
            tips: {
            trackMouse: true,
            width: 140,
            height: 28,
            renderer: function(storeItem, item) {
            this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + storeItem.get(&#39;data1&#39;) + &#39; $&#39;);
            }
            },
            label: {
            display: &#39;insideEnd&#39;,
            &#39;text-anchor&#39;: &#39;middle&#39;,
            field: &#39;data1&#39;,
            renderer: Ext.util.Format.numberRenderer(&#39;0&#39;),
            orientation: &#39;vertical&#39;,
            color: &#39;#333&#39;
            },
            xField: &#39;name&#39;,
            yField: &#39;data1&#39;
            }]
            });
            In this configuration we set column as the series type, bind the values of the bars to the bottom axis, set highlight to true so that bars are smoothly highlighted
            when hovered and bind the xField or category field to the data store name property and the yField as the data1 property of a store element.
            </summary>
        </member>
        <member name="T:Ext.chart.series.Bar">
            <summary>
            Creates a Bar Chart. A Bar Chart is a useful visualization technique to display quantitative information for
            different categories that can show some progression (or regression) in the dataset. As with all other series, the Bar
            Series must be appended in the series Chart array configuration. See the Chart documentation for more information.
            A typical configuration object for the bar series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;data1&#39;],
            label: {
            renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
            },
            title: &#39;Sample Values&#39;,
            grid: true,
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;left&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;
            }],
            series: [{
            type: &#39;bar&#39;,
            axis: &#39;bottom&#39;,
            highlight: true,
            tips: {
            trackMouse: true,
            width: 140,
            height: 28,
            renderer: function(storeItem, item) {
            this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + storeItem.get(&#39;data1&#39;) + &#39; views&#39;);
            }
            },
            label: {
            display: &#39;insideEnd&#39;,
            field: &#39;data1&#39;,
            renderer: Ext.util.Format.numberRenderer(&#39;0&#39;),
            orientation: &#39;horizontal&#39;,
            color: &#39;#333&#39;,
            &#39;text-anchor&#39;: &#39;middle&#39;
            },
            xField: &#39;name&#39;,
            yField: [&#39;data1&#39;]
            }]
            });
            In this configuration we set bar as the series type, bind the values of the bar to the bottom axis and set the
            xField or category field to the name parameter of the store. We also set highlight to true which enables smooth
            animations when bars are hovered. We also set some configuration for the bar labels to be displayed inside the bar,
            to display the information found in the data1 property of each element store, to render a formated text with the
            Ext.util.Format we pass in, to have an horizontal orientation (as opposed to a vertical one) and we also set
            other styles like color, text-anchor, etc.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Bar.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Bar.getLegendColor(System.Object)">
            <summary>
            Returns a string with the color to be used for the series legend item. ...
            </summary>
        </member>
        <member name="T:Ext.util.Sorter">
            <summary>
            Represents a single sorter that can be applied to a Store. The sorter is used
            to compare two values against each other for the purpose of ordering them. Ordering
            is achieved by specifying either:
            - A sorting property
            - A sorting function As a contrived example, we can specify a custom sorter that sorts by rank: Ext.define(&#39;Person&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;name&#39;, &#39;rank&#39;]
            });
            Ext.create(&#39;Ext.data.Store&#39;, {
            model: &#39;Person&#39;,
            proxy: &#39;memory&#39;,
            sorters: [{
            sorterFn: function(o1, o2){
            var getRank = function(o){
            var name = o.get(&#39;rank&#39;);
            if (name === &#39;first&#39;) {
            return 1;
            } else if (name === &#39;second&#39;) {
            return 2;
            } else {
            return 3;
            }
            },
            rank1 = getRank(o1),
            rank2 = getRank(o2);
            if (rank1 === rank2) {
            return 0;
            }
            return rank1 &amp;lt; rank2 ? -1 : 1;
            }
            }],
            data: [{
            name: &#39;Person1&#39;,
            rank: &#39;second&#39;
            }, {
            name: &#39;Person2&#39;,
            rank: &#39;third&#39;
            }, {
            name: &#39;Person3&#39;,
            rank: &#39;first&#39;
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.setDirection(SharpKit.JavaScript.JsString)">
            <summary>
            Set the sorting direction for this sorter. ...
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.toggle">
            <summary>
            Toggles the sorting direction for this sorter. ...
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.updateSortFunction(SharpKit.JavaScript.JsAction)">
            <summary>
            Update the sort function for this sorter. ...
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.direction">
            <summary>
            The direction to sort by. ...
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.property">
            <summary>
            The property to sort by. ...
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.root">
            <summary>
            Optional root property. ...
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.sorterFn">
            <summary>
            A specific sorter function to execute. ...
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.transform">
            <summary>
            A function that will be run on each value before
            it is compared in the sorter. ...
            </summary>
        </member>
        <member name="T:Ext.PluginManager">
            <summary>
            Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin&#39;s ptype.
            The xtype provides a way to avoid instantiating child Components
            when creating a full, nested config object for a complete Ext page. A child Component may be specified simply as a config object
            as long as the correct xtype is specified so that if and when the Component
            needs rendering, the correct type can be looked up for lazy instantiation. For a list of all available xtypes, see Ext.Component.
            </summary>
        </member>
        <member name="M:Ext.PluginManager.create(System.Object,Ext.Unknown.Constructor)">
            <summary>
            Creates a new Plugin from the specified config object using the
            config object's ptype to determine the class to insta...
            </summary>
        </member>
        <member name="M:Ext.PluginManager.findByType(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Returns all plugins registered with the given type. ...
            </summary>
        </member>
        <member name="T:Ext.grid.feature.Summary">
            <summary>
            This feature is used to place a summary row at the bottom of the grid. If using a grouping,
            see Ext.grid.feature.GroupingSummary. There are 2 aspects to calculating the summaries,
            calculation and rendering. Calculation The summary value needs to be calculated for each column in the grid. This is controlled
            by the summaryType option specified on the column. There are several built in summary types,
            which can be specified as a string on the column configuration. These call underlying methods
            on the store:  count sum min max average  Alternatively, the summaryType can be a function definition. If this is the case,
            the function is called with an array of records to calculate the summary value. Rendering Similar to a column, the summary also supports a summaryRenderer function. This
            summaryRenderer is called before displaying a value. The function is optional, if
            not specified the default calculated value is shown. The summaryRenderer is called with:  value {Object} - The calculated value. summaryData {Object} - Contains all raw summary values for the row. field {String} - The name of the field we are calculating  Example Usage Ext.define(&#39;TestResult&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;student&#39;, {
            name: &#39;mark&#39;,
            type: &#39;int&#39;
            }]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            width: 200,
            height: 140,
            renderTo: document.body,
            features: [{
            ftype: &#39;summary&#39;
            }],
            store: {
            model: &#39;TestResult&#39;,
            data: [{
            student: &#39;Student 1&#39;,
            mark: 84
            },{
            student: &#39;Student 2&#39;,
            mark: 72
            },{
            student: &#39;Student 3&#39;,
            mark: 96
            },{
            student: &#39;Student 4&#39;,
            mark: 68
            }]
            },
            columns: [{
            dataIndex: &#39;student&#39;,
            text: &#39;Name&#39;,
            summaryType: &#39;count&#39;,
            summaryRenderer: function(value, summaryData, dataIndex) {
            return Ext.String.format(&#39;{0} student{1}&#39;, value, value !== 1 ? &#39;s&#39; : &#39;&#39;);
            }
            }, {
            dataIndex: &#39;mark&#39;,
            text: &#39;Mark&#39;,
            summaryType: &#39;average&#39;
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.getColumnValue(Ext.grid.column.Column,System.Object)">
            <summary>
            Gets the value for the column from the attached data. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.toggleSummaryRow(System.Boolean)">
            <summary>
            Toggle whether or not to show the summary row. ...
            </summary>
        </member>
        <member name="M:Ext.grid.feature.Summary.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.AbstractSummaryConfig.showSummaryRow">
            <summary>
            True to show the summary row. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.SummaryConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.grid.feature.SummaryConfig.showSummaryRow">
            <summary>
            True to show the summary row. ...
            </summary>
        </member>
        <member name="T:Ext.fx.target.Sprite">
            <summary>
            This class represents a animation target for a Ext.draw.Sprite. In general this class will not be
            created directly, the Ext.draw.Sprite will be passed to the animation and
            and the appropriate target will be created.
            </summary>
        </member>
        <member name="P:Ext.form.FieldAncestorConfig.fieldDefaults">
            <summary>
            If specified, the properties in this object are used as default config values for each
            Ext.form.Labelable instance (e.g. ...
            </summary>
        </member>
        <member name="F:Ext.form.FieldAncestorEvents.fielderrorchange">
            <summary>
            Fires when the active error message is changed for any one of the Ext.form.Labelable
            instances within this container. ...
            </summary>
        </member>
        <member name="T:Ext.dd.StatusProxy">
            <summary>
            A specialized drag proxy that supports a drop status icon, Ext.Layer styles and auto-repair.  This is the
            default drag proxy used by all Ext.dd components.
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.#ctor(System.Object)">
            <summary>
            Creates new StatusProxy. ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.getEl">
            <summary>
            Returns the underlying proxy Ext.Layer ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.getGhost">
            <summary>
            Returns the ghost element ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.hide(System.Boolean)">
            <summary>
            Hides the proxy ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.repair(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Causes the proxy to return to its position of origin via an animation. ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.reset(System.Boolean)">
            <summary>
            Resets the status indicator to the default dropNotAllowed value ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.setStatus(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the proxy's visual element to indicate the status of whether or not drop is allowed
            over the current target e...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.show">
            <summary>
            Displays this proxy ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.stop">
            <summary>
            Stops the repair animation if it's currently running ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.sync">
            <summary>
            Force the Layer to sync its shadow and shim positions to the element ...
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.update(System.Object)">
            <summary>
            Updates the contents of the ghost element ...
            </summary>
        </member>
        <member name="T:Ext.data.SortTypes">
            <summary>
            This class defines a series of static methods that are used on a
            Ext.data.Field for performing sorting. The methods cast the
            underlying values into a data type that is appropriate for sorting on
            that particular field.  If a Ext.data.Field.type is specified,
            the sortType will be set to a sane default if the sortType is not
            explicitly defined on the field. The sortType will make any necessary
            modifications to the value and return it.  asText - Removes any tags and converts the value to a string asUCText - Removes any tags and converts the value to an uppercase string asUCText - Converts the value to an uppercase string asDate - Converts the value into Unix epoch time asFloat - Converts the value to a floating point number asInt - Converts the value to an integer number
            It is also possible to create a custom sortType that can be used throughout
            an application.
            Ext.apply(Ext.data.SortTypes, {
            asPerson: function(person){
            // expects an object with a first and last name property
            return person.lastName.toUpperCase() + person.firstName.toLowerCase();
            }
            });
            Ext.define(&#39;Employee&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [{
            name: &#39;person&#39;,
            sortType: &#39;asPerson&#39;
            }, {
            name: &#39;salary&#39;,
            type: &#39;float&#39; // sortType set to asFloat
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asDate(System.Object)">
            <summary>
            Date sorting ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asFloat(System.Object)">
            <summary>
            Float sorting ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asInt(System.Object)">
            <summary>
            Integer sorting ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCString(System.Object)">
            <summary>
            Case insensitive string ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only - Case insensitive ...
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.none(System.Object)">
            <summary>
            Default sort that does nothing ...
            </summary>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            SharpKit interfaces for Ext JS 4.
            Ext JS 4 is a pure JavaScript application framework that works everywhere from IE6 to Chrome 11. It enables you to create the best cross-platform applications using nothing but a browser, and has a phenomenal API.
            </summary>
        </member>
        <member name="T:Ext.util.History">
            <summary>
            History management component that allows you to register arbitrary tokens that signify application
            history state on navigation actions.  You can then handle the history change event in order
            to reset your application UI to the appropriate state when the user navigates forward or backward through
            the browser history stack. Initializing
            The init method of the History object must be called before using History. This sets up the internal
            state and must be the first thing called before using History. Setup
            The History objects requires elements on the page to keep track of the browser history. For older versions of IE,
            an IFrame is required to do the tracking. For other browsers, a hidden field can be used. The history objects expects
            these to be on the page before the init method is called. The following markup is suggested in order
            to support all browsers: &amp;lt;form id=&quot;history-form&quot; class=&quot;x-hide-display&quot;&amp;gt;
            &amp;lt;input type=&quot;hidden&quot; id=&quot;x-history-field&quot; /&amp;gt;
            &amp;lt;iframe id=&quot;x-history-frame&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
            &amp;lt;/form&amp;gt;
            </summary>
        </member>
        <member name="M:Ext.util.History.add(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Add a new token to the history stack. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.back">
            <summary>
            Programmatically steps back one step in browser history (equivalent to the user pressing the Back button). ...
            </summary>
        </member>
        <member name="M:Ext.util.History.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.util.History.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.util.History.forward">
            <summary>
            Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button). ...
            </summary>
        </member>
        <member name="M:Ext.util.History.getToken">
            <summary>
            Retrieves the currently-active history token. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.util.History.init(System.Boolean,System.Object)">
            <summary>
            Initialize the global History instance. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.util.History.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.util.History.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.util.HistoryConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.util.HistoryEvents.change">
            <summary>
            Fires when navigation back or forwards within the local page's history occurs. ...
            </summary>
        </member>
        <member name="F:Ext.util.HistoryEvents.ready">
            <summary>
            Fires when the Ext.util.History singleton has been initialized and is ready for use. ...
            </summary>
        </member>
        <member name="T:Ext.toolbar.Spacer">
            <summary>
            A simple element that adds extra horizontal space between items in a toolbar.
            By default a 2px wide space is added via css specification: .x-toolbar .x-toolbar-spacer {
            width:2px;
            }
            Example  Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Toolbar Spacer Example&#39;,
            width: 300,
            height: 200,
            tbar : [
            &#39;Item 1&#39;,
            {xtype: &#39;tbspacer&#39;}, // or &#39; &#39;
            &#39;Item 2&#39;,
            // space width is also configurable via javascript
            {xtype: &#39;tbspacer&#39;, width: 50}, // add a 50px space
            &#39;Item 3&#39;
            ],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.toolbar.Fill">
            <summary>
            A non-rendering placeholder item which instructs the Toolbar&#39;s Layout to begin using
            the right-justified button container.  Example Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Toolbar Fill Example&#39;,
            width: 300,
            height: 200,
            tbar : [
            &#39;Item 1&#39;,
            {xtype: &#39;tbfill&#39;}, // or &#39;-&amp;gt;&#39;
            &#39;Item 2&#39;
            ],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.supports">
            <summary>
            Determines information about features are supported in the current environment
            </summary>
        </member>
        <member name="P:Ext.supports.Direct2DBug">
            <summary>
            True if when asking for an element's dimension via offsetWidth or offsetHeight,
            getBoundingClientRect, etc. ...
            </summary>
        </member>
        <member name="P:Ext.supports.DisplayChangeInputSelectionBug">
            <summary>
            True if INPUT elements lose their
            selection when their display style is changed. ...
            </summary>
        </member>
        <member name="P:Ext.supports.DisplayChangeTextAreaSelectionBug">
            <summary>
            True if TEXTAREA elements lose their
            selection when their display style is changed. ...
            </summary>
        </member>
        <member name="P:Ext.supports.RightMargin">
            <summary>
            True if the device supports right margin. ...
            </summary>
        </member>
        <member name="T:Ext.picker.Date">
            <summary>
            A date picker. This class is used by the Ext.form.field.Date field to allow browsing and
            selection of valid dates in a popup next to the field, but may also be used with other components. Typically you will need to implement a handler function to be notified when the user chooses a color from the
            picker; you can register the handler using the select event, or by implementing the handler
            method. By default the user will be allowed to pick any date; this can be changed by using the minDate,
            maxDate, disabledDays, disabledDatesRE, and/or disabledDates configs. All the string values documented below may be overridden by including an Ext locale file in your page. Example usage: new Ext.panel.Panel({
            title: &#39;Choose a future date:&#39;,
            width: 200,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;datepicker&#39;,
            minDate: new Date(),
            handler: function(picker, date) {
            // do something with the selected date
            }
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.picker.Date.getValue">
            <summary>
            Gets the current selected value of the date field ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.hideMonthPicker">
            <summary>
            Hides the month picker, if it's visible. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.selectToday">
            <summary>
            Sets the current value to today. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.setDisabledDates(System.Object)">
            <summary>
            Replaces any existing disabled dates with new values and refreshes the DatePicker. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.setDisabledDays(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.setMaxDate(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing maxDate with the new value and refreshes the DatePicker. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.setMinDate(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing minDate with the new value and refreshes the DatePicker. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.setValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Sets the value of the date field ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.showMonthPicker">
            <summary>
            Show the month picker ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.showNextMonth(System.Object)">
            <summary>
            Show the next month. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.showNextYear">
            <summary>
            Show the next year. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.showPrevMonth(System.Object)">
            <summary>
            Show the previous month. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Date.showPrevYear">
            <summary>
            Show the previous year. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.disableAnim">
            <summary>
            True to disable animations when showing the month picker. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.disabledCellCls">
            <summary>
            The class to apply to disabled cells. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.disabledDates">
            <summary>
            An array of 'dates' to disable, as strings. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.disabledDatesRE">
            <summary>
            JavaScript regular expression used to disable a pattern of dates (defaults to null). ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.disabledDays">
            <summary>
            An array of days to disable, 0-based. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.focusOnShow">
            <summary>
            True to automatically focus the picker on show. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.format">
            <summary>
            The default date format string which can be overriden for localization support. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.handler">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.keyNavConfig">
            <summary>
            Specifies optional custom key event handlers for the Ext.util.KeyNav
            attached to this date picker. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.longDayFormat">
            <summary>
            The format for displaying a date in a longer format. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.scope">
            <summary>
            The scope (this reference) in which the handler
            function will be called. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.selectedCls">
            <summary>
            The class to apply to the selected cell. ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.showToday">
            <summary>
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
            that selects ...
            </summary>
        </member>
        <member name="P:Ext.picker.DateConfig.todayTip">
            <summary>
            A string used to format the message for displaying in a tooltip over the button that
            selects the current date. ...
            </summary>
        </member>
        <member name="F:Ext.picker.DateEvents.select">
            <summary>
            Fires when a date is selected ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Radio">
            <summary>
            Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked
            at a time within a group of radios with the same name. Labeling:
            In addition to the standard field labeling options, radio buttons
            may be given an optional boxLabel which will be displayed immediately to the right of the input. Also
            see Ext.form.RadioGroup for a convenient method of grouping related radio buttons. Values:
            The main value of a Radio field is a boolean, indicating whether or not the radio is checked. The following values will check the radio:
            true &#39;true&#39; &#39;1&#39; &#39;on&#39; Any other value will uncheck it. In addition to the main boolean value, you may also specify a separate inputValue. This will be sent
            as the parameter value when the form is submitted. You will want to set this
            value if you have multiple radio buttons with the same name, as is almost always the case.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title      : &#39;Order Form&#39;,
            width      : 300,
            bodyPadding: 10,
            renderTo   : Ext.getBody(),
            items: [
            {
            xtype      : &#39;fieldcontainer&#39;,
            fieldLabel : &#39;Size&#39;,
            defaultType: &#39;radiofield&#39;,
            defaults: {
            flex: 1
            },
            layout: &#39;hbox&#39;,
            items: [
            {
            boxLabel  : &#39;M&#39;,
            name      : &#39;size&#39;,
            inputValue: &#39;m&#39;,
            id        : &#39;radio1&#39;
            }, {
            boxLabel  : &#39;L&#39;,
            name      : &#39;size&#39;,
            inputValue: &#39;l&#39;,
            id        : &#39;radio2&#39;
            }, {
            boxLabel  : &#39;XL&#39;,
            name      : &#39;size&#39;,
            inputValue: &#39;xl&#39;,
            id        : &#39;radio3&#39;
            }
            ]
            },
            {
            xtype      : &#39;fieldcontainer&#39;,
            fieldLabel : &#39;Color&#39;,
            defaultType: &#39;radiofield&#39;,
            defaults: {
            flex: 1
            },
            layout: &#39;hbox&#39;,
            items: [
            {
            boxLabel  : &#39;Blue&#39;,
            name      : &#39;color&#39;,
            inputValue: &#39;blue&#39;,
            id        : &#39;radio4&#39;
            }, {
            boxLabel  : &#39;Grey&#39;,
            name      : &#39;color&#39;,
            inputValue: &#39;grey&#39;,
            id        : &#39;radio5&#39;
            }, {
            boxLabel  : &#39;Black&#39;,
            name      : &#39;color&#39;,
            inputValue: &#39;black&#39;,
            id        : &#39;radio6&#39;
            }
            ]
            }
            ],
            bbar: [
            {
            text: &#39;Smaller Size&#39;,
            handler: function() {
            var radio1 = Ext.getCmp(&#39;radio1&#39;),
            radio2 = Ext.getCmp(&#39;radio2&#39;),
            radio3 = Ext.getCmp(&#39;radio3&#39;);
            //if L is selected, change to M
            if (radio2.getValue()) {
            radio1.setValue(true);
            return;
            }
            //if XL is selected, change to L
            if (radio3.getValue()) {
            radio2.setValue(true);
            return;
            }
            //if nothing is set, set size to S
            radio1.setValue(true);
            }
            },
            {
            text: &#39;Larger Size&#39;,
            handler: function() {
            var radio1 = Ext.getCmp(&#39;radio1&#39;),
            radio2 = Ext.getCmp(&#39;radio2&#39;),
            radio3 = Ext.getCmp(&#39;radio3&#39;);
            //if M is selected, change to L
            if (radio1.getValue()) {
            radio2.setValue(true);
            return;
            }
            //if L is selected, change to XL
            if (radio2.getValue()) {
            radio3.setValue(true);
            return;
            }
            //if nothing is set, set size to XL
            radio3.setValue(true);
            }
            },
            &#39;-&#39;,
            {
            text: &#39;Select color&#39;,
            menu: {
            indent: false,
            items: [
            {
            text: &#39;Blue&#39;,
            handler: function() {
            var radio = Ext.getCmp(&#39;radio4&#39;);
            radio.setValue(true);
            }
            },
            {
            text: &#39;Grey&#39;,
            handler: function() {
            var radio = Ext.getCmp(&#39;radio5&#39;);
            radio.setValue(true);
            }
            },
            {
            text: &#39;Black&#39;,
            handler: function() {
            var radio = Ext.getCmp(&#39;radio6&#39;);
            radio.setValue(true);
            }
            }
            ]
            }
            }
            ]
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.Radio.getGroupValue">
            <summary>
            If this radio is part of a group, it will return the selected value ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Radio.getSubmitValue">
            <summary>
            Returns the submit value for the checkbox which can be used when submitting forms. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Radio.setValue(System.Object)">
            <summary>
            Sets either the checked/unchecked status of this Radio, or, if a string value
            is passed, checks a sibling Radio of th...
            </summary>
        </member>
        <member name="T:Ext.form.field.Number">
            <summary>
            A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,
            and numeric validation to limit the value to a range of valid numbers. The range of acceptable number
            values can be controlled by setting the minValue and maxValue configs, and fractional
            decimals can be disallowed by setting allowDecimals to false. By default, the number field is also rendered with a set of up/down spinner buttons and has
            up/down arrow key and mouse wheel event listeners attached for incrementing/decrementing the value by the
            step value. To hide the spinner buttons set hideTrigger:true; to disable the arrow key
            and mouse wheel handlers set keyNavEnabled:false and
            mouseWheelEnabled:false. See the example below. Example usage:  Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;On The Wall&#39;,
            width: 300,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;numberfield&#39;,
            anchor: &#39;100%&#39;,
            name: &#39;bottles&#39;,
            fieldLabel: &#39;Bottles of Beer&#39;,
            value: 99,
            maxValue: 99,
            minValue: 0
            }],
            buttons: [{
            text: &#39;Take one down, pass it around&#39;,
            handler: function() {
            this.up(&#39;form&#39;).down(&#39;[name=bottles]&#39;).spinDown();
            }
            }]
            });
            Removing UI Enhancements  Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Personal Info&#39;,
            width: 300,
            bodyPadding: 10,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;numberfield&#39;,
            anchor: &#39;100%&#39;,
            name: &#39;age&#39;,
            fieldLabel: &#39;Age&#39;,
            minValue: 0, //prevents negative numbers
            // Remove spinner buttons, and arrow key and mouse wheel listeners
            hideTrigger: true,
            keyNavEnabled: false,
            mouseWheelEnabled: false
            }]
            });
            Using Step Ext.create(&#39;Ext.form.Panel&#39;, {
            renderTo: Ext.getBody(),
            title: &#39;Step&#39;,
            width: 300,
            bodyPadding: 10,
            items: [{
            xtype: &#39;numberfield&#39;,
            anchor: &#39;100%&#39;,
            name: &#39;evens&#39;,
            fieldLabel: &#39;Even Numbers&#39;,
            // Set step so it skips every other number
            step: 2,
            value: 0,
            // Add change handler to force user-entered numbers to evens
            listeners: {
            change: function(field, value) {
            value = parseInt(value, 10);
            field.setValue(value + value % 2);
            }
            }
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.Spinner">
            <summary>
            A field with a pair of up/down spinner buttons. This class is not normally instantiated directly,
            instead it is subclassed and the onSpinUp and onSpinDown methods are implemented
            to handle when the buttons are clicked. A good example of this is the Ext.form.field.Number field
            which uses the spinner to increment and decrement the field&#39;s value by its step
            config value.
            For example:  Ext.define(&#39;Ext.ux.CustomSpinner&#39;, {
            extend: &#39;Ext.form.field.Spinner&#39;,
            alias: &#39;widget.customspinner&#39;,
            // override onSpinUp (using step isn&#39;t neccessary)
            onSpinUp: function() {
            var me = this;
            if (!me.readOnly) {
            var val = me.step; // set the default value to the step value
            if(me.getValue() !== &#39;&#39;) {
            val = parseInt(me.getValue().slice(0, -5)); // gets rid of &quot; Pack&quot;
            }
            me.setValue((val + me.step) + &#39; Pack&#39;);
            }
            },
            // override onSpinDown
            onSpinDown: function() {
            var me = this;
            if (!me.readOnly) {
            if(me.getValue() !== &#39;&#39;) {
            val = parseInt(me.getValue().slice(0, -5)); // gets rid of &quot; Pack&quot;
            }
            me.setValue((val - me.step) + &#39; Pack&#39;);
            }
            }
            });
            Ext.create(&#39;Ext.form.FormPanel&#39;, {
            title: &#39;Form with SpinnerField&#39;,
            bodyPadding: 5,
            width: 350,
            renderTo: Ext.getBody(),
            items:[{
            xtype: &#39;customspinner&#39;,
            fieldLabel: &#39;How Much Beer?&#39;,
            step: 6
            }]
            });
            By default, pressing the up and down arrow keys will also trigger the onSpinUp and onSpinDown methods;
            to prevent this, set keyNavEnabled = false.
            </summary>
        </member>
        <member name="M:Ext.form.field.Spinner.setSpinDownEnabled(System.Boolean)">
            <summary>
            Sets whether the spinner down button is enabled. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Spinner.setSpinUpEnabled(System.Boolean)">
            <summary>
            Sets whether the spinner up button is enabled. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Spinner.spinDown">
            <summary>
            Triggers the spinner to step down; fires the spin and spindown events and calls the
            onSpinDown method. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Spinner.spinUp">
            <summary>
            Triggers the spinner to step up; fires the spin and spinup events and calls the
            onSpinUp method. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.Spinner.onSpinDown">
            <summary>
            This method is called when the spinner down button is clicked, or when the down arrow key is pressed
            if keyNavEnabled...
            </summary>
        </member>
        <member name="P:Ext.form.field.Spinner.onSpinUp">
            <summary>
            This method is called when the spinner up button is clicked, or when the up arrow key is pressed
            if keyNavEnabled is ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Number.getErrors(System.Object)">
            <summary>
            Runs all of Number's validations and returns an array of any errors. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Number.setMaxValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Replaces any existing maxValue with the new value. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Number.setMinValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Replaces any existing minValue with the new value. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.SpinnerConfig.keyNavEnabled">
            <summary>
            Specifies whether the up and down arrow keys should trigger spinning up and down. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.SpinnerConfig.mouseWheelEnabled">
            <summary>
            Specifies whether the mouse wheel should trigger spinning up and down while the field has
            focus. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.SpinnerConfig.repeatTriggerClick">
            <summary>
            Whether a click repeater should be
            attached to the spinner buttons. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.SpinnerConfig.spinDownEnabled">
            <summary>
            Specifies whether the down spinner button is enabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.SpinnerConfig.spinUpEnabled">
            <summary>
            Specifies whether the up spinner button is enabled. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.autoStripChars">
            <summary>
            True to automatically strip not allowed characters from the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.maxText">
            <summary>
            Error text to display if the maximum value validation fails (defaults to 'The maximum
            value for this field is {maxVal...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.maxValue">
            <summary>
            The maximum allowed value (defaults to Number.MAX_VALUE). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.minText">
            <summary>
            Error text to display if the minimum value validation fails (defaults to 'The minimum
            value for this field is {minVal...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.minValue">
            <summary>
            The minimum allowed value (defaults to Number.NEGATIVE_INFINITY). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.nanText">
            <summary>
            Error text to display if the value is not a valid number. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.negativeText">
            <summary>
            Error text to display if the value is negative and minValue is set to
            0. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.NumberConfig.step">
            <summary>
            Specifies a numeric interval by which the field's value will be incremented or
            decremented when the user invokes the ...
            </summary>
        </member>
        <member name="F:Ext.form.field.SpinnerEvents.spin">
            <summary>
            Fires when the spinner is made to spin up or down. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.SpinnerEvents.spindown">
            <summary>
            Fires when the spinner is made to spin down. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.SpinnerEvents.spinup">
            <summary>
            Fires when the spinner is made to spin up. ...
            </summary>
        </member>
        <member name="T:Ext.flash.Component">
            <summary>
            A simple Component for displaying an Adobe Flash SWF movie. The movie will be sized and can participate
            in layout like any other Component. This component requires the third-party SWFObject library version 2.2 or above. It is not included within
            the ExtJS distribution, so you will have to include it into your page manually in order to use this component.
            The SWFObject library can be downloaded from the SWFObject project page
            and then simply import it into the head of your HTML document: &amp;lt;script type=&quot;text/javascript&quot; src=&quot;path/to/local/swfobject.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
            Configuration This component allows several options for configuring how the target Flash movie is embedded. The most
            important is the required url which points to the location of the Flash movie to load. Other
            configurations include:  backgroundColor wmode flashVars flashParams flashAttributes  Example usage: var win = Ext.widget(&#39;window&#39;, {
            title: &quot;It&#39;s a tiger!&quot;,
            layout: &#39;fit&#39;,
            width: 300,
            height: 300,
            x: 20,
            y: 20,
            resizable: true,
            items: {
            xtype: &#39;flash&#39;,
            url: &#39;tiger.swf&#39;
            }
            });
            win.show();
            Express Install Adobe provides a tool called Express Install
            that offers users an easy way to upgrade their Flash player. If you wish to make use of this, you should set
            the static EXPRESS_INSTALL_URL property to the location of your Express Install SWF file: Ext.flash.Component.EXPRESS_INSTALL_URL = &#39;path/to/local/expressInstall.swf&#39;;
            </summary>
        </member>
        <member name="M:Ext.flash.Component.getSwfId">
            <summary>
            Retrieve the id of the SWF object/embed element ...
            </summary>
        </member>
        <member name="P:Ext.flash.Component.swf">
            <summary>
            A reference to the object or embed element into which the SWF file is loaded. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.backgroundColor">
            <summary>
            The background color of the SWF movie. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.expressInstall">
            <summary>
            True to prompt the user to install flash if not installed. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.flashAttributes">
            <summary>
            A set of key value pairs to be passed to the flash object as attributes. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.flashParams">
            <summary>
            A set of key value pairs to be passed to the flash object as parameters. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.flashVars">
            <summary>
            A set of key value pairs to be passed to the flash object as flash variables. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.flashVersion">
            <summary>
            Indicates the version the flash content was published for. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.swfHeight">
            <summary>
            The height of the embedded SWF movie inside the component. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.swfWidth">
            <summary>
            The width of the embedded SWF movie inside the component. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.url">
            <summary>
            The URL of the SWF file to include. ...
            </summary>
        </member>
        <member name="P:Ext.flash.ComponentConfig.wmode">
            <summary>
            The wmode of the flash object. ...
            </summary>
        </member>
        <member name="F:Ext.flash.ComponentEvents.failure">
            <summary>
            Fired when the Flash movie embedding fails ...
            </summary>
        </member>
        <member name="F:Ext.flash.ComponentEvents.success">
            <summary>
            Fired when the Flash movie has been successfully embedded ...
            </summary>
        </member>
        <member name="T:Ext.direct.Manager">
            <summary>
            Overview Ext.Direct aims to streamline communication between the client and server
            by providing a single interface that reduces the amount of common code
            typically required to validate data and handle returned data packets
            (reading data, error conditions, etc). The Ext.direct namespace includes several classes for a closer integration
            with the server-side. The Ext.data namespace also includes classes for working
            with Ext.data.Stores which are backed by data from an Ext.Direct method. Specification For additional information consult the
            Ext.Direct Specification. Providers Ext.Direct uses a provider architecture, where one or more providers are
            used to transport data to and from the server. There are several providers
            that exist in the core at the moment:  JsonProvider for simple JSON operations PollingProvider for repeated requests RemotingProvider exposes server side
            on the client.  A provider does not need to be invoked directly, providers are added via
            Ext.direct.Manager.addProvider. Router Ext.Direct utilizes a &quot;router&quot; on the server to direct requests from the client
            to the appropriate server-side method. Because the Ext.Direct API is completely
            platform-agnostic, you could completely swap out a Java based server solution
            and replace it with one that uses C# without changing the client side JavaScript
            at all. Server side events Custom events from the server may be handled by the client by adding
            listeners, for example: {&quot;type&quot;:&quot;event&quot;,&quot;name&quot;:&quot;message&quot;,&quot;data&quot;:&quot;Successfully polled at: 11:19:30 am&quot;}
            // add a handler for a &#39;message&#39; event sent by the server
            Ext.direct.Manager.on(&#39;message&#39;, function(e){
            out.append(String.format(&#39;&amp;lt;p&gt;&amp;lt;i&gt;{0}&amp;lt;/i&gt;&amp;lt;/p&gt;&#39;, e.data));
            out.el.scrollTo(&#39;t&#39;, 100000, true);
            });
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.addProvider(System.Object)">
            <summary>
            Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.getProvider(System.Object)">
            <summary>
            Retrieve a provider by the
            id specified when the provider is
            added. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.removeProvider(System.Object)">
            <summary>
            Removes the provider. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.direct.Manager.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.direct.ManagerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.direct.ManagerEvents.event">
            <summary>
            Fires after an event. ...
            </summary>
        </member>
        <member name="F:Ext.direct.ManagerEvents.exception">
            <summary>
            Fires after an event exception. ...
            </summary>
        </member>
        <member name="T:Ext.dd.Registry">
            <summary>
            Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
            directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.getHandle(System.Object)">
            <summary>
            Returns the handle registered for a DOM Node by id ...
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.getHandleFromEvent(Ext.direct.Event)">
            <summary>
            Returns the handle that is registered for the DOM node that is the target of the event ...
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.getTarget(System.Object)">
            <summary>
            Returns a custom data object that is registered for a DOM node by id ...
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.getTargetFromEvent(Ext.direct.Event)">
            <summary>
            Returns a custom data object that is registered for the DOM node that is the target of the event ...
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.register(System.Object,System.Object)">
            <summary>
            Resgister a drag drop element ...
            </summary>
        </member>
        <member name="M:Ext.dd.Registry.unregister(System.Object)">
            <summary>
            Unregister a drag drop element ...
            </summary>
        </member>
        <member name="T:Ext.data.StoreManager">
            <summary>
            Contains a collection of all stores that are created that have an identifier.
            An identifier can be assigned by setting the storeId
            property. When a store is in the StoreManager, it can be referred to via it&#39;s identifier:
            Ext.create(&#39;Ext.data.Store&#39;, {
            model: &#39;SomeModel&#39;,
            storeId: &#39;myStore&#39;
            });
            var store = Ext.data.StoreManager.lookup(&#39;myStore&#39;);
            Also note that the lookup method is aliased to Ext.getStore for convenience.
            If a store is registered with the StoreManager, you can also refer to the store by it&#39;s identifier when
            registering it with any Component that consumes data from a store:
            Ext.create(&#39;Ext.data.Store&#39;, {
            model: &#39;SomeModel&#39;,
            storeId: &#39;myStore&#39;
            });
            Ext.create(&#39;Ext.view.View&#39;, {
            store: &#39;myStore&#39;,
            // other configuration here
            });
            TODO: Make this an AbstractMgr
            </summary>
        </member>
        <member name="M:Ext.data.StoreManager.lookup(System.Object)">
            <summary>
            Gets a registered Store by id ...
            </summary>
        </member>
        <member name="M:Ext.data.StoreManager.register(Ext.data.Store,Ext.data.Store,Ext.data.Store)">
            <summary>
            Registers one or more Stores with the StoreManager. ...
            </summary>
        </member>
        <member name="M:Ext.data.StoreManager.unregister(System.Object,System.Object,System.Object)">
            <summary>
            Unregisters one or more Stores with the StoreManager ...
            </summary>
        </member>
        <member name="T:Ext.data.DirectStore">
            <summary>
            Small helper class to create an Ext.data.Store configured with an
            Ext.data.proxy.Direct and Ext.data.reader.Json to make interacting
            with an Ext.Direct Server-side Provider easier.
            To create a different proxy/reader combination create a basic Ext.data.Store
            configured as needed. *Note: Although they are not listed, this class inherits all of the config options of:  Store   JsonReader  root idProperty totalProperty  DirectProxy  directFn paramOrder paramsAsHash
            </summary>
        </member>
        <member name="M:Ext.data.DirectStore.#ctor(System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.CompositeElement">
            <summary>
            This class encapsulates a collection of DOM elements, providing methods to filter
            members, or to perform collective actions upon the whole set. Although they are not listed, this class supports all of the methods of Ext.core.Element and
            Ext.fx.Anim. The methods from these classes will be performed on all the elements in this collection. All methods return this and can be chained. Usage: var els = Ext.select(&quot;#some-el div.some-class&quot;, true);
            // or select directly from an existing element
            var el = Ext.get(&#39;some-el&#39;);
            el.select(&#39;div.some-class&#39;, true);
            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
            els.setWidth(100).hide(true);
            </summary>
        </member>
        <member name="T:Ext.ComponentQuery">
            <summary>
            Provides searching of Components within Ext.ComponentManager (globally) or a specific
            Ext.container.Container on the document with a similar syntax to a CSS selector. Components can be retrieved by using their xtype with an optional . prefix  component or .component gridpanel or .gridpanel  An itemId or id must be prefixed with a #  #myContainer  Attributes must be wrapped in brackets  component[autoScroll] panel[title=&quot;Test&quot;]  Member expressions from candidate Components may be tested. If the expression returns a truthy value,
            the candidate Component will be included in the query: var disabledFields = myFormPanel.query(&quot;{isDisabled()}&quot;);
            Pseudo classes may be used to filter results in the same way as in DomQuery: // Function receives array and returns a filtered array.
            Ext.ComponentQuery.pseudos.invalid = function(items) {
            var i = 0, l = items.length, c, result = [];
            for (; i &amp;lt; l; i++) {
            if (!(c = items[i]).isValid()) {
            result.push(c);
            }
            }
            return result;
            };
            var invalidFields = myFormPanel.query(&#39;field:invalid&#39;);
            if (invalidFields.length) {
            invalidFields[0].getEl().scrollIntoView(myFormPanel.body);
            for (var i = 0, l = invalidFields.length; i &amp;lt; l; i++) {
            invalidFields[i].getEl().frame(&quot;red&quot;);
            }
            }
            Default pseudos include:  not  Queries return an array of components.
            Here are some example queries. // retrieve all Ext.Panels in the document by xtype
            var panelsArray = Ext.ComponentQuery.query(&#39;panel&#39;);
            // retrieve all Ext.Panels within the container with an id myCt
            var panelsWithinmyCt = Ext.ComponentQuery.query(&#39;#myCt panel&#39;);
            // retrieve all direct children which are Ext.Panels within myCt
            var directChildPanel = Ext.ComponentQuery.query(&#39;#myCt &amp;gt; panel&#39;);
            // retrieve all grids and trees
            var gridsAndTrees = Ext.ComponentQuery.query(&#39;gridpanel, treepanel&#39;);
            For easy access to queries based from a particular Container see the Ext.container.Container.query,
            Ext.container.Container.down and Ext.container.Container.child methods. Also see
            Ext.Component.up.
            </summary>
        </member>
        <member name="M:Ext.ComponentQuery.is(Ext.Component,SharpKit.JavaScript.JsString)">
            <summary>
            Tests whether the passed Component matches the selector string. ...
            </summary>
        </member>
        <member name="M:Ext.ComponentQuery.query(SharpKit.JavaScript.JsString,Ext.container.Container)">
            <summary>
            Returns an array of matched Components from within the passed root object. ...
            </summary>
        </member>
        <member name="M:Ext.ComponentQuery.query(SharpKit.JavaScript.JsString)">
            <summary>
            Returns an array of matched Components.
            </summary>
        </member>
        <member name="T:Ext.chart.series.Radar">
            <summary>
            Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for
            a constrained number of categories.
            As with all other series, the Radar series must be appended in the series Chart array configuration. See the Chart
            documentation for more information. A typical configuration object for the radar series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            theme:&#39;Category2&#39;,
            store: store,
            axes: [{
            type: &#39;Radial&#39;,
            position: &#39;radial&#39;,
            label: {
            display: true
            }
            }],
            series: [{
            type: &#39;radar&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data3&#39;,
            showInLegend: true,
            showMarkers: true,
            markerConfig: {
            radius: 5,
            size: 5
            },
            style: {
            &#39;stroke-width&#39;: 2,
            fill: &#39;none&#39;
            }
            },{
            type: &#39;radar&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data2&#39;,
            showMarkers: true,
            showInLegend: true,
            markerConfig: {
            radius: 5,
            size: 5
            },
            style: {
            &#39;stroke-width&#39;: 2,
            fill: &#39;none&#39;
            }
            },{
            type: &#39;radar&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data5&#39;,
            showMarkers: true,
            showInLegend: true,
            markerConfig: {
            radius: 5,
            size: 5
            },
            style: {
            &#39;stroke-width&#39;: 2,
            fill: &#39;none&#39;
            }
            }]
            });
            In this configuration we add three series to the chart. Each of these series is bound to the same categories field, name but bound to different properties for each category,
            data1, data2 and data3 respectively. All series display markers by having showMarkers enabled. The configuration for the markers of each series can be set by adding properties onto
            the markerConfig object. Finally we override some theme styling properties by adding properties to the style object.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Radar.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="T:Ext.Ajax">
            <summary>
            A singleton instance of an Ext.data.Connection. This class
            is used to communicate with your server side code. It can be used as follows: Ext.Ajax.request({
            url: &#39;page.php&#39;,
            params: {
            id: 1
            },
            success: function(response){
            var text = response.responseText;
            // process server response here
            }
            });
            Default options for all requests can be set by changing a property on the Ext.Ajax class: Ext.Ajax.timeout = 60000; // 60 seconds
            Any options specified in the request method for the Ajax request will override any
            defaults set on the Ext.Ajax class. In the code sample below, the timeout for the
            request will be 60 seconds. Ext.Ajax.timeout = 120000; // 120 seconds
            Ext.Ajax.request({
            url: &#39;page.aspx&#39;,
            timeout: 60000
            });
            In general, this class will be used for all Ajax requests in your application.
            The main reason for creating a separate Ext.data.Connection is for a
            series of requests that share common settings that are different to all other
            requests in the application.
            </summary>
        </member>
        <member name="T:Ext.data.Connection">
            <summary>
            The Connection class encapsulates a connection to the page&#39;s originating domain, allowing requests to be made either
            to a configured URL, or to a URL specified at request time. Requests made by this class are asynchronous, and will return immediately. No data from the server will be available
            to the statement immediately following the request call. To process returned data, use a success callback
            in the request options object, or an event listener. File Uploads File uploads are not performed using normal &quot;Ajax&quot; techniques, that is they are not performed using XMLHttpRequests.
            Instead the form is submitted in the standard manner with the DOM &amp;lt;form&amp;gt; element temporarily modified to have its
            target set to refer to a dynamically generated, hidden &amp;lt;iframe&amp;gt; which is inserted into the document but removed
            after the return data has been gathered. The server response is parsed by the browser to create the document for the IFRAME. If the server is using JSON to
            send the return object, then the Content-Type header must be set to &quot;text/html&quot; in order to tell the browser to
            insert the text unchanged into the document body. Characters which are significant to an HTML parser must be sent as HTML entities, so encode &quot;&amp;lt;&quot; as &quot;&amp;amp;lt;&quot;, &quot;&amp;amp;&quot; as
            &quot;&amp;amp;amp;&quot; etc. The response text is retrieved from the document, and a fake XMLHttpRequest object is created containing a
            responseText property in order to conform to the requirements of event handlers and callbacks. Be aware that file upload packets are sent with the content type multipart/form and some server technologies
            (notably JEE) may require some custom processing in order to retrieve parameter names and parameter values from the
            packet content. Also note that it&#39;s not possible to check the response code of the hidden iframe, so the success handler will ALWAYS fire.
            </summary>
        </member>
        <member name="M:Ext.data.Connection.abort(System.Object)">
            <summary>
            Aborts any outstanding request. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.isLoading(System.Object)">
            <summary>
            Determine whether this object has a request outstanding. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.parseStatus(SharpKit.JavaScript.JsNumber)">
            <summary>
            Check if the response status was successful ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.request(System.Object)">
            <summary>
            Sends an HTTP request to a remote server. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.setOptions(System.Object,System.Object)">
            <summary>
            Set various options such as the url, params for the request ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Connection.upload(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Upload a form using a hidden iframe. ...
            </summary>
        </member>
        <member name="M:Ext.Ajax.request(System.Object)">
            <summary>
            Sends an HTTP request to a remote server. ...
            </summary>
        </member>
        <member name="P:Ext.Ajax.autoAbort">
            <summary>
            Whether a new request should abort any pending requests. ...
            </summary>
        </member>
        <member name="P:Ext.Ajax.disableCaching">
            <summary>
            True to add a unique cache-buster param to GET requests. ...
            </summary>
        </member>
        <member name="P:Ext.Ajax.extraParams">
            <summary>
            An object containing properties which are used as extra parameters to each request made
            by this object (defaults to u...
            </summary>
        </member>
        <member name="P:Ext.Ajax.method">
            <summary>
            The default HTTP method to be used for requests. ...
            </summary>
        </member>
        <member name="P:Ext.Ajax.timeout">
            <summary>
            The timeout in milliseconds to be used for requests. ...
            </summary>
        </member>
        <member name="P:Ext.Ajax.url">
            <summary>
            The default URL to be used for requests to the server. ...
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.disableCaching">
            <summary>
            (Optional) True to add a unique cache-buster param to GET requests. ...
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.disableCachingParam">
            <summary>
            (Optional) Change the parameter which is sent went disabling caching
            through a cache buster. ...
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.timeout">
            <summary>
            (Optional) The timeout in milliseconds to be used for requests. ...
            </summary>
        </member>
        <member name="F:Ext.data.ConnectionEvents.beforerequest">
            <summary>
            Fires before a network request is made to retrieve a data object. ...
            </summary>
        </member>
        <member name="F:Ext.data.ConnectionEvents.requestcomplete">
            <summary>
            Fires if the request was successfully completed. ...
            </summary>
        </member>
        <member name="F:Ext.data.ConnectionEvents.requestexception">
            <summary>
            Fires if an error HTTP status was returned from the server. ...
            </summary>
        </member>
        <member name="T:Ext.util.TextMetrics">
            <summary>
            Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
            wide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and
            should not contain any HTML, otherwise it may not be measured correctly. The measurement works by copying the relevant CSS styles that can affect the font related display,
            then checking the size of an element that is auto-sized. Note that if the text is multi-lined, you must
            provide a fixed width when doing the measurement. If multiple measurements are being done on the same element, you create a new instance to initialize
            to avoid the overhead of copying the styles to the element repeatedly.
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.#ctor(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates new TextMetrics. ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.bind(System.Object)">
            <summary>
            Binds this TextMetrics instance to a new element ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.destroy">
            <summary>
            Destroy this instance ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.getHeight(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the measured height of the specified text ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.getSize(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the size of the specified text based on the internal element's style and width properties ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.getWidth(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the measured width of the specified text ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.measure(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Measures the size of the specified text ...
            </summary>
        </member>
        <member name="M:Ext.util.TextMetrics.setFixedWidth(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets a fixed width on the internal measurement element. ...
            </summary>
        </member>
        <member name="T:Ext.util.Grouper">
            <summary>
            Represents a single grouper that can be applied to a Store. The grouper works
            in the same fashion as the Ext.util.Sorter.
            </summary>
        </member>
        <member name="M:Ext.util.Grouper.getGroupString(Ext.data.Model)">
            <summary>
            Returns the value for grouping to be used. ...
            </summary>
        </member>
        <member name="T:Ext.util.ComponentDragger">
            <summary>
            A subclass of Ext.dd.DragTracker which handles dragging any Component. This is configured with a Component to be made draggable, and a config object for the
            Ext.dd.DragTracker class. A  delegate may be provided which may be either the element to use as the mousedown target
            or a Ext.DomQuery selector to activate multiple mousedown targets.
            </summary>
        </member>
        <member name="T:Ext.dd.DragTracker">
            <summary>
            A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,
            as well as during the drag. This is useful for components such as Ext.slider.Multi, where there is
            an element that can be dragged around to change the Slider&#39;s value.
            DragTracker provides a series of template methods that should be overridden to provide functionality
            in response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.
            See Ext.slider.Multi&#39;s initEvents function for an example implementation.
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.getDragTarget">
            <summary>
            Returns the drag target. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.getOffset(System.Object)">
            <summary>
            Returns the X, Y offset of the current mouse position from the mousedown point. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.initEl(System.Object)">
            <summary>
            Initializes the DragTracker on a given element. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onBeforeStart(Ext.EventObject)">
            <summary>
            Template method which should be overridden by each DragTracker instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onDrag(Ext.EventObject)">
            <summary>
            Template method which should be overridden by each DragTracker instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onEnd(Ext.EventObject)">
            <summary>
            Template method which should be overridden by each DragTracker instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onStart(Ext.EventObject)">
            <summary>
            Template method which should be overridden by each DragTracker instance. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTracker.dragTarget">
            <summary>
            Only valid during drag operations. ...
            </summary>
        </member>
        <member name="M:Ext.util.ComponentDragger.#ctor(System.Object,System.Object)">
            <summary>
            Creates new ComponentDragger. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.autoStart">
            <summary>
            Defaults to false. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.constrainTo">
            <summary>
            A Region (Or an element from which a Region measurement will be read) which is used to constrain
            the result of the ge...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.delegate">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.overCls">
            <summary>
            A CSS class to add to the DragTracker's target element when the element (or, if the delegate option is used,
            when a d...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.preventDefault">
            <summary>
            Specify false to enable default actions on onMouseDown events. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.stopEvent">
            <summary>
            Specify true to stop the mousedown event from bubbling to outer listeners from the target element (or its delegates). ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.tolerance">
            <summary>
            Number of pixels the drag target must be moved before dragging is
            considered to have started. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.trackOver">
            <summary>
            Defaults to false. ...
            </summary>
        </member>
        <member name="P:Ext.util.ComponentDraggerConfig.delegate">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.beforestart">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.drag">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.dragend">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.dragstart">
            <summary>
            ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.mousedown">
            <summary>
            Fires when the mouse button is pressed down, but before a drag operation begins. ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.mousemove">
            <summary>
            Fired when the mouse is moved. ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.mouseout">
            <summary>
            Only available when trackOver is true
            Fires when the mouse exits the DragTracker's target element (or if delegate i...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.mouseover">
            <summary>
            Only available when trackOver is true
            Fires when the mouse enters the DragTracker's target element (or if delegate ...
            </summary>
        </member>
        <member name="F:Ext.dd.DragTrackerEvents.mouseup">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.tree.ViewDDPlugin">
            <summary>
            This plugin provides drag and/or drop functionality for a TreeView. It creates a specialized instance of DragZone which knows how to drag out of a TreeView
            and loads the data object which is passed to a cooperating DragZone&#39;s methods with the following properties: copy : Boolean
            The value of the TreeView&#39;s copy property, or true if the TreeView was configured
            with allowCopy: true and the control key was pressed when the drag operation was begun. view : TreeView
            The source TreeView from which the drag originated. ddel : HtmlElement
            The drag proxy element which moves with the mouse item : HtmlElement
            The TreeView node upon which the mousedown event was registered. records : Array
            An Array of Models representing the selected data being dragged from the source TreeView.  It also creates a specialized instance of Ext.dd.DropZone which cooperates with other DropZones which are members of the same
            ddGroup which processes such data objects. Adding this plugin to a view means that two new events may be fired from the client TreeView, beforedrop and
            drop
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.allowParentInsert">
            <summary>
            Allow inserting a dragged node between an expanded parent node and its first child that will become a
            sibling of the ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.ddGroup">
            <summary>
            A named drag drop group to which this object belongs. ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.dragGroup">
            <summary>
            The ddGroup to which the DragZone will belong. ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.dropGroup">
            <summary>
            The ddGroup to which the DropZone will belong. ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.expandDelay">
            <summary>
            The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node
            over the target...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.nodeHighlightColor">
            <summary>
            The color to use when visually highlighting the dragged
            or dropped node (defaults to 'c3daf9' - light blue). ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.nodeHighlightOnDrop">
            <summary>
            Whether or not to highlight any nodes after they are
            successfully dropped on their target. ...
            </summary>
        </member>
        <member name="P:Ext.tree.ViewDDPluginConfig.nodeHighlightOnRepair">
            <summary>
            Whether or not to highlight any nodes after they are
            repaired from an unsuccessful drag/drop. ...
            </summary>
        </member>
        <member name="F:Ext.tree.ViewDDPluginEvents.beforedrop">
            <summary>
            This event is fired through the TreeView. ...
            </summary>
        </member>
        <member name="F:Ext.tree.ViewDDPluginEvents.drop">
            <summary>
            This event is fired through the TreeView. ...
            </summary>
        </member>
        <member name="T:Ext.resizer.Splitter">
            <summary>
            This class functions between siblings of a VBox or HBox
            layout to resize both immediate siblings. By default it will set the size of both siblings. One of the siblings may be configured with
            maintainFlex: true which will cause it not to receive a new size explicitly, but to be resized
            by the layout. A Splitter may be configured to show a centered mini-collapse tool orientated to collapse the collapseTarget.
            The Splitter will then call that sibling Panel&#39;s collapse or expand method
            to perform the appropriate operation (depending on the sibling collapse state). To create the mini-collapse tool but take care
            of collapsing yourself, configure the splitter with performCollapse false.
            </summary>
        </member>
        <member name="P:Ext.resizer.Splitter.orientation">
            <summary>
            Orientation of this Splitter. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.SplitterConfig.collapseTarget">
            <summary>
            A string describing the relative position of the immediate sibling Panel to collapse. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.SplitterConfig.collapsedCls">
            <summary>
            A class to add to the splitter when it is collapsed. ...
            </summary>
        </member>
        <member name="P:Ext.resizer.SplitterConfig.collapsible">
            <summary>
            true to show a mini-collapse tool in the Splitter to toggle expand and collapse on the collapseTarget Panel. ...
            </summary>
        </member>
        <member name="T:Ext.grid.plugin.RowEditing">
            <summary>
            The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. When editing begins,
            a small floating dialog will be shown for the appropriate row. Each editable column will show a field
            for editing. There is a button to save or cancel all changes for the edit. The field that will be used for the editor is defined at the
            field. The editor can be a field instance or a field configuration.
            If an editor is not specified for a particular column then that column won&#39;t be editable and the value of
            the column will be displayed. The editor may be shared for each column in the grid, or a different one may be specified for each column.
            An appropriate field type should be chosen to match the data structure that it will be editing. For example,
            to edit a date, it would be useful to specify Ext.form.field.Date as the editor.  Example Usage Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;simpsonsStore&#39;,
            fields:[&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            data:{&#39;items&#39;:[
            {&quot;name&quot;:&quot;Lisa&quot;, &quot;email&quot;:&quot;lisa@simpsons.com&quot;, &quot;phone&quot;:&quot;555-111-1224&quot;},
            {&quot;name&quot;:&quot;Bart&quot;, &quot;email&quot;:&quot;bart@simpsons.com&quot;, &quot;phone&quot;:&quot;555--222-1234&quot;},
            {&quot;name&quot;:&quot;Homer&quot;, &quot;email&quot;:&quot;home@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1244&quot;},
            {&quot;name&quot;:&quot;Marge&quot;, &quot;email&quot;:&quot;marge@simpsons.com&quot;, &quot;phone&quot;:&quot;555-222-1254&quot;}
            ]},
            proxy: {
            type: &#39;memory&#39;,
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;
            }
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: Ext.data.StoreManager.lookup(&#39;simpsonsStore&#39;),
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;, field: &#39;textfield&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1,
            editor: {
            xtype:&#39;textfield&#39;,
            allowBlank:false
            }
            },
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            selType: &#39;rowmodel&#39;,
            plugins: [
            Ext.create(&#39;Ext.grid.plugin.RowEditing&#39;, {
            clicksToEdit: 1
            })
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.RowEditingConfig.autoCancel">
            <summary>
            true to automatically cancel any pending changes when the row editor begins editing a new row. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.RowEditingConfig.clicksToMoveEditor">
            <summary>
            The number of clicks to move the row editor to a new row while it is visible and actively editing another row. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.RowEditingConfig.errorSummary">
            <summary>
            true to show a tooltip that summarizes all validation errors present
            in the row editor. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.RowEditingEvents.beforeedit">
            <summary>
            Fires before row editing is triggered. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.RowEditingEvents.edit">
            <summary>
            Fires after a row is edited. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.RowEditingEvents.validateedit">
            <summary>
            Fires after a cell is edited, but before the value is set in the record. ...
            </summary>
        </member>
        <member name="T:Ext.grid.column.Template">
            <summary>
            A Column definition class which renders a value by processing a Model&#39;s
            data using a configured XTemplate.   Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;employeeStore&#39;,
            fields:[&#39;firstname&#39;, &#39;lastname&#39;, &#39;senority&#39;, &#39;department&#39;],
            groupField: &#39;department&#39;,
            data:[
            {firstname:&quot;Michael&quot;, lastname:&quot;Scott&quot;, senority:7, department:&quot;Manangement&quot;},
            {firstname:&quot;Dwight&quot;, lastname:&quot;Schrute&quot;, senority:2, department:&quot;Sales&quot;},
            {firstname:&quot;Jim&quot;, lastname:&quot;Halpert&quot;, senority:3, department:&quot;Sales&quot;},
            {firstname:&quot;Kevin&quot;, lastname:&quot;Malone&quot;, senority:4, department:&quot;Accounting&quot;},
            {firstname:&quot;Angela&quot;, lastname:&quot;Martin&quot;, senority:5, department:&quot;Accounting&quot;}
            ]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Column Template Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;employeeStore&#39;),
            columns: [
            {text: &#39;Full Name&#39;,  xtype:&#39;templatecolumn&#39;, tpl:&#39;{firstname} {lastname}&#39;, flex:1},
            {text: &#39;Deparment (Yrs)&#39;, xtype:&#39;templatecolumn&#39;, tpl:&#39;{department} ({senority})&#39;}
            ],
            height: 200,
            width: 300,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.Date">
            <summary>
            Provides a date input field with a date picker dropdown and automatic date
            validation. This field recognizes and uses the JavaScript Date object as its main value type. In addition,
            it recognizes string values which are parsed according to the format and/or altFormats
            configs. These may be reconfigured to use date formats appropriate for the user&#39;s locale. The field may be limited to a certain range of dates by using the minValue, maxValue,
            disabledDays, and disabledDates config parameters. These configurations will be used both
            in the field&#39;s validation, and in the date picker dropdown by preventing invalid dates from being selected.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            width: 300,
            bodyPadding: 10,
            title: &#39;Dates&#39;,
            items: [{
            xtype: &#39;datefield&#39;,
            anchor: &#39;100%&#39;,
            fieldLabel: &#39;From&#39;,
            name: &#39;from_date&#39;,
            maxValue: new Date()  // limited to the current date or prior
            }, {
            xtype: &#39;datefield&#39;,
            anchor: &#39;100%&#39;,
            fieldLabel: &#39;To&#39;,
            name: &#39;to_date&#39;,
            value: new Date()  // defaults to today
            }],
            renderTo: Ext.getBody()
            });
            Date Formats Examples This example shows a couple of different date format parsing scenarios. Both use custom date format
            configurations; the first one matches the configured format while the second matches the altFormats. Ext.create(&#39;Ext.form.Panel&#39;, {
            renderTo: Ext.getBody(),
            width: 300,
            bodyPadding: 10,
            title: &#39;Dates&#39;,
            items: [{
            xtype: &#39;datefield&#39;,
            anchor: &#39;100%&#39;,
            fieldLabel: &#39;Date&#39;,
            name: &#39;date&#39;,
            // The value matches the format; will be parsed and displayed using that format.
            format: &#39;m d Y&#39;,
            value: &#39;2 4 1978&#39;
            }, {
            xtype: &#39;datefield&#39;,
            anchor: &#39;100%&#39;,
            fieldLabel: &#39;Date&#39;,
            name: &#39;date&#39;,
            // The value does not match the format, but does match an altFormat; will be parsed
            // using the altFormat and displayed using the format.
            format: &#39;m d Y&#39;,
            altFormats: &#39;m,d,Y|m.d.Y&#39;,
            value: &#39;2.4.1978&#39;
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.getErrors(System.Object)">
            <summary>
            Runs all of Date's validations and returns an array of any errors. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.safeParse(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Attempts to parse a given string value using a given date format. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.setDisabledDates(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled dates with new values and refreshes the Date picker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.setDisabledDays(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled days (by index, 0-6) with new values and refreshes the Date picker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.setMaxValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing maxValue with the new value and refreshes the Date picker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.setMinValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing minValue with the new value and refreshes the Date picker. ...
            </summary>
        </member>
        <member name="M:Ext.form.field.Date.setValue(System.Object)">
            <summary>
            Sets the value of the date field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.altFormats">
            <summary>
            Multiple date formats separated by "|" to try when parsing a user input value and it
            does not match the defined forma...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.disabledDates">
            <summary>
            An array of "dates" to disable, as strings. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.disabledDays">
            <summary>
            An array of days to disable, 0 based (defaults to undefined). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.format">
            <summary>
            The default date format string which can be overriden for localization support. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.invalidText">
            <summary>
            The error text to display when the date in the field is invalid (defaults to
            '{value} is not a valid date - it must b...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.maxText">
            <summary>
            The error text to display when the date in the cell is after maxValue (defaults to
            'The date in this field must be be...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.maxValue">
            <summary>
            The maximum allowed date. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.minText">
            <summary>
            The error text to display when the date in the cell is before minValue (defaults to
            'The date in this field must be a...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.minValue">
            <summary>
            The minimum allowed date. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.showToday">
            <summary>
            false to hide the footer area of the Date picker containing the Today button and disable
            the keyboard handler for spa...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.submitFormat">
            <summary>
            The date format string which will be submitted to the server. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.DateConfig.triggerCls">
            <summary>
            An additional CSS class used to style the trigger button. ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.LocalStorage">
            <summary>
            The LocalStorageProxy uses the new HTML5 localStorage API to save Model data locally on
            the client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
            LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it. localStorage is extremely useful for saving user-specific information without needing to build server-side
            infrastructure to support it. Let&#39;s imagine we&#39;re writing a Twitter search application and want to save the user&#39;s
            searches locally so they can easily perform a saved search again later. We&#39;d start by creating a Search model: Ext.define(&#39;Search&#39;, {
            fields: [&#39;id&#39;, &#39;query&#39;],
            extend: &#39;Ext.data.Model&#39;,
            proxy: {
            type: &#39;localstorage&#39;,
            id  : &#39;twitter-Searches&#39;
            }
            });
            Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we
            need to pass to the LocalStorage proxy is an id. This is important as it separates the Model data in this
            Proxy from all others. The localStorage API puts all data into a single shared namespace, so by setting an id we
            enable LocalStorageProxy to manage the saved Search data. Saving our data into localStorage is easy and would usually be done with a Store: //our Store automatically picks up the LocalStorageProxy defined on the Search model
            var store = new Ext.data.Store({
            model: &quot;Search&quot;
            });
            //loads any existing Search data from localStorage
            store.load();
            //now add some Searches
            store.add({query: &#39;Sencha Touch&#39;});
            store.add({query: &#39;Ext JS&#39;});
            //finally, save our Search data to localStorage
            store.sync();
            The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model
            data and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether: var search = Ext.ModelManager.create({query: &#39;Sencha Animator&#39;}, &#39;Search&#39;);
            //uses the configured LocalStorageProxy to save the new Search to localStorage
            search.save();
            Limitations If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
            A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
            local storage object. It&#39;s important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
            but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
            throw an error.
            </summary>
        </member>
        <member name="T:Ext.ExtContext">
            <summary>
            The Ext namespace (global object) encapsulates all classes, singletons, and utility methods provided by Sencha&#39;s libraries.
            Most user interface Components are at a lower level of nesting in the namespace, but many common utility functions are provided
            as direct properties of the Ext namespace.  Also many frequently used methods from other classes are provided as shortcuts within the Ext namespace.
            For example Ext.getCmp aliases Ext.ComponentManager.get.  Many applications are initiated with Ext.onReady which is called once the DOM is ready.
            This ensures all scripts have been loaded, preventing dependency issues. For example  Ext.onReady(function(){
            new Ext.Component({
            renderTo: document.body,
            html: &#39;DOM ready!&#39;
            });
            });
            For more information about how to use the Ext classes, see  The Learning Center The FAQ The forums
            </summary>
        </member>
        <member name="M:Ext.ExtContext.addBehaviors(System.Object)">
            <summary>
            Applies event listeners to elements by selectors when the document is ready. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.application(System.Object)">
            <summary>
            Loads Ext.app.Application class and starts it up with given configuration after the page is ready. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.apply(System.Object,System.Object,System.Object)">
            <summary>
            Copies all the properties of config to the specified object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.apply(System.Object,System.Object)">
            <summary>
            Copies all the properties of config to the specified object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.applyIf(System.Object,System.Object)">
            <summary>
            Copies all the properties of config to object if they don't already exist. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.bind(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Create a new function from the provided fn, change this to the provided scope, optionally
            overrides arguments for the...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.callback(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber)">
            <summary>
            Execute a callback function in a particular scope. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.clean(SharpKit.JavaScript.JsArray)">
            <summary>
            Old alias to Ext.Array.clean
            Filter through an array and remove empty item as defined in Ext.isEmpty
            See Ext.Array....
            </summary>
        </member>
        <member name="M:Ext.ExtContext.clone(System.Object)">
            <summary>
            Clone almost any type of variable including array, object, DOM nodes and Date without keeping the old reference ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.copyTo(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Copies a set of named properties fom the source object to the destination object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.create(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Instantiate a class by either full name, alias or alternate name. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.create(SharpKit.JavaScript.JsString)">
            <summary>
            Instantiate a class by either full name, alias or alternate name. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.createByAlias(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Instantiate a class by its alias. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.createWidget(SharpKit.JavaScript.JsString)">
            <summary>
            Old name for widget. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.decode(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Shorthand for Ext.JSON.decode ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.defer(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Calls this function after the number of millseconds specified, optionally in a specific scope. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.define(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Defines a class. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.define(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Defines a class. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.destroy(System.Object,System.Object,System.Object)">
            <summary>
            Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
            DOM (if applicab...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.destroyMembers(System.Object,System.Object,System.Object)">
            <summary>
            Attempts to destroy and then remove a set of named properties of the passed object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.each(System.Object,System.Delegate,System.Object,System.Boolean)">
            <summary>
            Iterates an array or an iterable value and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.each(System.Object,System.Delegate)">
            <summary>
            Iterates an array or an iterable value and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.emptyFn">
            <summary>
            A reusable empty function ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.encode(System.Object)">
            <summary>
            Shorthand for Ext.JSON.encode ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.escapeRe(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for use in a regular expression ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.exclude(System.Object)">
            <summary>
            Explicitly exclude files from being loaded. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.extend(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            This method deprecated. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.flatten(System.Object)">
            <summary>
            Old alias to Ext.Array.flatten
            Recursively flattens into 1-d Array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.fly(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.get(System.Object)">
            <summary>
            Retrieves Ext.core.Element objects. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getBody">
            <summary>
            Returns the current document body as an Ext.core.Element. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getClass(System.Object)">
            <summary>
            Get the class of the provided object; returns null if it's not an instance
            of any class created with Ext.define. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getClassName(System.Object)">
            <summary>
            Get the name of the class by its reference or its instance. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getCmp(SharpKit.JavaScript.JsString)">
            <summary>
            This is shorthand reference to Ext.ComponentManager.get. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getDoc">
            <summary>
            Returns the current HTML document object as an Ext.core.Element. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getDom(System.Object,System.Object)">
            <summary>
            Return the dom node for the passed String (id), dom node, or Ext.core.Element. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getHead">
            <summary>
            Returns the current document head as an Ext.core.Element. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getOrientation">
            <summary>
            Returns the current orientation of the mobile device ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getScrollBarWidth(System.Boolean)">
            <summary>
            Utility method for getting the width of the browser's vertical scrollbar. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getScrollbarSize(System.Boolean)">
            <summary>
            Returns the size of the browser scrollbars. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.getStore(System.Object)">
            <summary>
            Gets a registered Store by id (shortcut to Ext.data.StoreManager.lookup) ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.htmlDecode(SharpKit.JavaScript.JsString)">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') from their HTML character equivalents. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.htmlEncode(SharpKit.JavaScript.JsString)">
            <summary>
            Convert certain characters (&amp;, &lt;, >, and ') to their HTML character equivalents for literal display in web pages. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.id(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Generates unique ids. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.invoke(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Invokes a method on each item in an Array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isArray(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Array, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isBoolean(System.Object)">
            <summary>
            Returns true if the passed value is a boolean. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isDate(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Date object, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isDefined(System.Object)">
            <summary>
            Returns true if the passed value is defined. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isElement(System.Object)">
            <summary>
            Returns true if the passed value is an HTMLElement ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isEmpty(System.Object,System.Boolean)">
            <summary>
            Returns true if the passed value is empty, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isEmpty(System.Object)">
            <summary>
            Returns true if the passed value is empty, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isFunction(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Function, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isIterable(System.Object)">
            <summary>
            Returns true if the passed value is iterable, false otherwise ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isNumber(System.Object)">
            <summary>
            Returns true if the passed value is a number. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isNumeric(System.Object)">
            <summary>
            Validates that a value is numeric. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isObject(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Object, false otherwise. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isPrimitive(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isString(System.Object)">
            <summary>
            Returns true if the passed value is a string. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.isTextNode(System.Object)">
            <summary>
            Returns true if the passed value is a TextNode ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.iterate(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Iterates either an array or an object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.log(System.Object)">
            <summary>
            Logs a message. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.max(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Old alias to Ext.Array.max
            Returns the maximum value in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.mean(SharpKit.JavaScript.JsArray)">
            <summary>
            Old alias to Ext.Array.mean
            Calculates the mean of all items in the array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.merge">
            <summary>
            A convenient alias method for Ext.Object.merge ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.min(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Old alias to Ext.Array.min
            Returns the minimum value in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.namespace(SharpKit.JavaScript.JsString[])">
            <summary>
            Creates namespaces to be used for scoping variables and classes so that they are not global. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.ns(SharpKit.JavaScript.JsString[])">
            <summary>
            Convenient alias for Ext.namespace
            Creates namespaces to be used for scoping variables and classes so that they are ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.num">
            <summary>
            This method is deprecated, please use Ext.Number.from instead ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.onDocumentReady">
            <summary>
            Alias for Ext.EventManager.onDocumentReady ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.onReady(SharpKit.JavaScript.JsAction,System.Object,System.Boolean,System.Object)">
            <summary>
            Adds new listener to be executed when all required scripts are fully loaded. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.override``1(System.Object)">
            <summary>
            Proxy to Ext.Base.override. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.partition(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Partitions the set into two sets: a true set and a false set. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.pass(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Create a new function from the provided fn, the arguments of which are pre-set to args. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.pluck(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Old alias to Ext.Array.pluck
            Plucks the value of a property from each item in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.preg(SharpKit.JavaScript.JsString,Ext.Unknown.Constructor)">
            <summary>
            Shorthand for Ext.PluginManager.registerType ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.query(SharpKit.JavaScript.JsString,Ext.Unknown.Node)">
            <summary>
            Selects an array of DOM nodes by CSS/XPath selector. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.regModel(System.Object)">
            <summary>
            Creates a new Model class from the specified config object. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.regStore(SharpKit.JavaScript.JsString,System.Object,Ext.Unknown.Constructor)">
            <summary>
            Creates a new store for the given id and config, then registers it with the Store Mananger. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.removeNode(Ext.Unknown.HTMLElement)">
            <summary>
            Removes a DOM node from the document. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.require(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Loads all classes by the given names and all their direct dependencies;
            optionally executes the given callback functi...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.require(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Loads all classes by the given names and all their direct dependencies;
            optionally executes the given callback functi...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.require(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads all classes by the given names and all their direct dependencies;
            optionally executes the given callback functi...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.require(System.Object)">
            <summary>
            Loads all classes by the given names and all their direct dependencies;
            optionally executes the given callback functi...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.select(System.Object,System.Boolean,System.Object)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods
            to be applied to many related elements in...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.sum(SharpKit.JavaScript.JsArray)">
            <summary>
            Old alias to Ext.Array.sum
            Calculates the sum of all items in the given array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.syncRequire(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Synchronously loads all classes by the given names and all their direct dependencies;
            optionally executes the given c...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.toArray(System.Object,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Converts any iterable (numeric indices and a length property) into a true array. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.toSentence(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsString)">
            <summary>
            Turns an array into a sentence, joined by a specified connector - e.g.:
            Ext.toSentence(['Adama', 'Tigh', 'Roslin']); ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.type(System.Object)">
            <summary>
            Old alias to typeOf
            Returns the type of the given variable in string format. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.typeOf(System.Object)">
            <summary>
            Returns the type of the given variable in string format. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.unique(SharpKit.JavaScript.JsArray)">
            <summary>
            Old alias to Ext.Array.unique
            Returns a new array with unique items ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.urlAppend(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Appends content to the query string of a URL, handling logic for whether to place
            a question mark or ampersand. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.urlDecode">
            <summary>
            A convenient alias method for Ext.Object.fromQueryString ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.urlEncode">
            <summary>
            A convenient alias method for Ext.Object.toQueryString ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.value(System.Object,System.Object,System.Boolean)">
            <summary>
            Utility method for returning a default value if the passed value is empty. ...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.valueFrom(System.Object,System.Object,System.Boolean)">
            <summary>
            Returns the given value itself if it's not empty, as described in isEmpty; returns the default
            value (second argument...
            </summary>
        </member>
        <member name="M:Ext.ExtContext.widget(SharpKit.JavaScript.JsString)">
            <summary>
            Convenient shorthand to create a widget by its xtype, also see Ext.ClassManager.instantiateByAlias
            var button = Ext....
            </summary>
        </member>
        <member name="M:Ext.ExtContext.zip(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Zips N sets together. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.BLANK_IMAGE_URL">
            <summary>
            URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.SSL_SECURE_URL">
            <summary>
            URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
            the IE insecure content...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.USE_NATIVE_JSON">
            <summary>
            Indicates whether to use native browser parsing for JSON methods. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.enableNestedListenerRemoval">
            <summary>
            EXPERIMENTAL - True to cascade listener removal to child elements when an element is removed. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.isGecko">
            <summary>
            True if the detected browser uses the Gecko layout engine (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.isGecko3">
            <summary>
            True if the detected browser uses a Gecko 1.9+ layout engine (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.isGecko4">
            <summary>
            True if the detected browser uses a Gecko 2.0+ layout engine (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.scopeResetCSS">
            <summary>
            True to scope the reset CSS to be just applied to Ext components. ...
            </summary>
        </member>
        <member name="P:Ext.ExtContext.useShims">
            <summary>
            By default, Ext intelligently decides whether floating elements should be shimmed. ...
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Gauge">
            <summary>
            Gauge Axis is the axis to be used with a Gauge series. The Gauge axis
            displays numeric data from an interval defined by the minimum, maximum and
            step configuration properties. The placement of the numeric data can be changed
            by altering the margin option that is set to 10 by default. A possible configuration for this axis would look like: axes: [{
            type: &#39;gauge&#39;,
            position: &#39;gauge&#39;,
            minimum: 0,
            maximum: 100,
            steps: 10,
            margin: 7
            }],
            </summary>
        </member>
        <member name="M:Ext.chart.axis.Gauge.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the title of this axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.GaugeConfig.margin">
            <summary>
            (optional) the offset positioning of the tick marks and labels in pixels. ...
            </summary>
        </member>
        <member name="T:Ext.button.Split">
            <summary>
            A split button that provides a built-in dropdown arrow that can fire an event separately from the default
            click event of the button.  Typically this would be used to display a dropdown menu that provides additional
            options to the primary button action, but any custom handler can provide the arrowclick implementation.
            Example usage: // display a dropdown menu:
            Ext.create(&#39;Ext.button.Split&#39;, {
            renderTo: &#39;button-ct&#39;, // the container id
            text: &#39;Options&#39;,
            handler: optionsHandler, // handle a click on the button itself
            menu: new Ext.menu.Menu({
            items: [
            // these items will render as dropdown menu items when the arrow is clicked:
            {text: &#39;Item 1&#39;, handler: item1Handler},
            {text: &#39;Item 2&#39;, handler: item2Handler}
            ]
            })
            });
            // Instead of showing a menu, you provide any type of custom
            // functionality you want when the dropdown arrow is clicked:
            Ext.create(&#39;Ext.button.Split&#39;, {
            renderTo: &#39;button-ct&#39;,
            text: &#39;Options&#39;,
            handler: optionsHandler,
            arrowHandler: myCustomHandler
            });
            </summary>
        </member>
        <member name="M:Ext.button.Split.setArrowHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets this button's arrow click handler. ...
            </summary>
        </member>
        <member name="F:Ext.button.SplitEvents.arrowclick">
            <summary>
            Fires when this button's arrow is clicked ...
            </summary>
        </member>
        <member name="T:Ext.Action">
            <summary>
            An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
            can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
            updates across any components that support the Action interface (primarily Ext.toolbar.Toolbar, Ext.button.Button
            and Ext.menu.Menu components). Use a single Action instance as the config object for any number of UI Components which share the same configuration. The
            Action not only supplies the configuration, but allows all Components based upon it to have a common set of methods
            called at once through a single call to the Action. Any Component that is to be configured with an Action must also support
            the following methods: setText(string) setIconCls(string) setDisabled(boolean) setVisible(boolean) setHandler(function). This allows the Action to control its associated Components. Example usage: // Define the shared Action.  Each Component below will have the same
            // display text and icon, and will display the same message on click.
            var action = new Ext.Action({
            text: &#39;Do something&#39;,
            handler: function(){
            Ext.Msg.alert(&#39;Click&#39;, &#39;You did something.&#39;);
            },
            iconCls: &#39;do-something&#39;,
            itemId: &#39;myAction&#39;
            });
            var panel = new Ext.panel.Panel({
            title: &#39;Actions&#39;,
            width: 500,
            height: 300,
            tbar: [
            // Add the Action directly to a toolbar as a menu button
            action,
            {
            text: &#39;Action Menu&#39;,
            // Add the Action to a menu as a text item
            menu: [action]
            }
            ],
            items: [
            // Add the Action to the panel body as a standard button
            new Ext.button.Button(action)
            ],
            renderTo: Ext.getBody()
            });
            // Change the text for all components using the Action
            action.setText(&#39;Something else&#39;);
            // Reference an Action through a container using the itemId
            var btn = panel.getComponent(&#39;myAction&#39;);
            var aRef = btn.baseAction;
            aRef.setText(&#39;New text&#39;);
            </summary>
        </member>
        <member name="M:Ext.Action.#ctor(System.Object)">
            <summary>
            Creates new Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.disable">
            <summary>
            Disables all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for each Component currently tied to this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.enable">
            <summary>
            Enables all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.execute(System.Object,System.Object,System.Object)">
            <summary>
            Executes this Action manually using the handler function specified in the original config object
            or the handler funct...
            </summary>
        </member>
        <member name="M:Ext.Action.getIconCls">
            <summary>
            Gets the icon CSS class currently used by all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.getText">
            <summary>
            Gets the text currently displayed by all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.hide">
            <summary>
            Hides all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.isDisabled">
            <summary>
            Returns true if the components using this Action are currently disabled, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.Action.isHidden">
            <summary>
            Returns true if the components configured by this Action are currently hidden, else returns false. ...
            </summary>
        </member>
        <member name="M:Ext.Action.setDisabled(System.Boolean)">
            <summary>
            Sets the disabled state of all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets the function that will be called by each Component using this action when its primary event is triggered. ...
            </summary>
        </member>
        <member name="M:Ext.Action.setHidden(System.Boolean)">
            <summary>
            Sets the hidden state of all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the icon CSS class for all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the text to be displayed by all components configured by this Action. ...
            </summary>
        </member>
        <member name="M:Ext.Action.show">
            <summary>
            Shows all components configured by this Action. ...
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.handler">
            <summary>
            The function that will be invoked by each component tied to this Action
            when the component's primary event is trigger...
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.iconCls">
            <summary>
            The CSS class selector that specifies a background image to be used as the header icon for
            all components configured ...
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.scope">
            <summary>
            The scope (this reference) in which the
            handler is executed. ...
            </summary>
        </member>
        <member name="T:Ext.XTemplate">
            <summary>
            A template class that supports advanced functionality like: Autofilling arrays using templates and sub-templates Conditional processing with basic comparison operators Basic math function support Execute arbitrary inline code with special built-in template variables Custom member functions Many special tags and built-in operators that aren&#39;t defined as part of
            the API, but are supported in the templates that can be created  XTemplate provides the templating mechanism built into: Ext.view.View  The Ext.Template describes
            the acceptable parameters to pass to the constructor. The following
            examples demonstrate all of the supported features.  Sample Data  This is the data object used for reference in each code example: var data = {
            name: &#39;Tommy Maintz&#39;,
            title: &#39;Lead Developer&#39;,
            company: &#39;Sencha Inc.&#39;,
            email: &#39;tommy@sencha.com&#39;,
            address: &#39;5 Cups Drive&#39;,
            city: &#39;Palo Alto&#39;,
            state: &#39;CA&#39;,
            zip: &#39;44102&#39;,
            drinks: [&#39;Coffee&#39;, &#39;Soda&#39;, &#39;Water&#39;],
            kids: [{
            name: &#39;Joshua&#39;,
            age:3
            },{
            name: &#39;Matthew&#39;,
            age:2
            },{
            name: &#39;Solomon&#39;,
            age:0
            }]
            };
            Auto filling of arrays  The tpl tag and the for operator are used
            to process the provided data object:
            If the value specified in for is an array, it will auto-fill,
            repeating the template block inside the tpl tag for each item in the
            array. If for=&quot;.&quot; is specified, the data object provided is examined. While processing an array, the special variable {#}
            will provide the current array index + 1 (starts at 1, not 0).   &amp;lt;tpl for=&quot;.&quot;&gt;...&amp;lt;/tpl&gt;       // loop through array at root node
            &amp;lt;tpl for=&quot;foo&quot;&gt;...&amp;lt;/tpl&gt;     // loop through array at foo node
            &amp;lt;tpl for=&quot;foo.bar&quot;&gt;...&amp;lt;/tpl&gt; // loop through array at foo.bar node
            Using the sample data above:
            var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;.&quot;&gt;&#39;,       // process the data.kids node
            &#39;&amp;lt;p&gt;{#}. {name}&amp;lt;/p&gt;&#39;,  // use current array index to autonumber
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
            An example illustrating how the for property can be leveraged
            to access specified members of the provided data object to populate the template: var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Title: {title}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Company: {company}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,     // interrogate the kids property within the data
            &#39;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data);  // pass the root node of the data object
            Flat arrays that contain values (and not objects) can be auto-rendered
            using the special {.} variable inside a loop.  This variable
            will represent the value of the array at the current index: var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;{name}\&amp;#39;s favorite beverages:&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;tpl for=&quot;drinks&quot;&gt;&#39;,
            &#39;&amp;lt;div&gt; - {.}&amp;lt;/div&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;
            );
            tpl.overwrite(panel.body, data);
            When processing a sub-template, for example while looping through a child array,
            you can access the parent object&#39;s members via the parent object: var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,
            &#39;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&#39;,
            &#39;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data);
            Conditional processing with basic comparison operators  The tpl tag and the if operator are used
            to provide conditional checks for deciding whether or not to render specific
            parts of the template. Notes: Double quotes must be encoded if used within the conditional There is no else operator &amp;mdash; if needed, two opposite
            if statements should be used.  &amp;lt;tpl if=&quot;age &amp;gt; 1 &amp;amp;&amp;amp; age &amp;lt; 10&quot;&gt;Child&amp;lt;/tpl&gt;
            &amp;lt;tpl if=&quot;age &gt;= 10 &amp;&amp; age Teenager&amp;lt;/tpl&gt;
            &amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;...&amp;lt;/tpl&gt;
            &amp;lt;tpl if=&quot;id==\&#39;download\&#39;&quot;&gt;...&amp;lt;/tpl&gt;
            &amp;lt;tpl if=&quot;needsIcon&quot;&gt;&amp;lt;img src=&quot;{icon}&quot; class=&quot;{iconCls}&quot;/&gt;&amp;lt;/tpl&gt;
            // no good:
            &amp;lt;tpl if=&quot;name == &quot;Tommy&quot;&quot;&gt;Hello&amp;lt;/tpl&gt;
            // encode &amp;#34; if it is part of the condition, e.g.
            &amp;lt;tpl if=&quot;name == &amp;#38;quot;Tommy&amp;#38;quot;&quot;&gt;Hello&amp;lt;/tpl&gt;
            Using the sample data above:
            var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,
            &#39;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&#39;,
            &#39;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data);
            Basic math support  The following basic math operators may be applied directly on numeric
            data values: + - * /
            For example:
            var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,
            &#39;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&#39;,  // {#}: {name}&amp;lt;/p&gt;&#39;,  // In 5 Years: {age+5}&amp;lt;/p&gt;&#39;,  // Dad: {parent.name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data);
            Execute arbitrary inline code with special built-in template variables  Anything between {[ ... ]} is considered code to be executed
            in the scope of the template. There are some special variables available in that code:
            values: The values in the current scope. If you are using
            scope changing sub-templates, you can change what values is. parent: The scope (values) of the ancestor template. xindex: If you are in a looping template, the index of the
            loop you are in (1-based). xcount: If you are in a looping template, the total length
            of the array you are looping.
            This example demonstrates basic row striping using an inline code block and the
            xindex variable: var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,
            &#39;&amp;lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;&#39;,
            &#39;{name}&#39;,
            &#39;&amp;lt;/div&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;
            );
            tpl.overwrite(panel.body, data);
            Template member functions  One or more member functions can be specified in a configuration
            object passed into the XTemplate constructor for more complex processing: var tpl = new Ext.XTemplate(
            &#39;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;p&gt;Kids: &#39;,
            &#39;&amp;lt;tpl for=&quot;kids&quot;&gt;&#39;,
            &#39;&amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;&#39;,
            &#39;&amp;lt;p&gt;Girl: {name} - {age}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            // use opposite if statement to simulate &#39;else&#39; processing:
            &#39;&amp;lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;&#39;,
            &#39;&amp;lt;p&gt;Boy: {name} - {age}&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            &#39;&amp;lt;tpl if=&quot;this.isBaby(age)&quot;&gt;&#39;,
            &#39;&amp;lt;p&gt;{name} is a baby!&amp;lt;/p&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&#39;,
            &#39;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&#39;,
            {
            // XTemplate configuration:
            compiled: true,
            // member functions:
            isGirl: function(name){
            return name == &#39;Sara Grace&#39;;
            },
            isBaby: function(age){
            return age
            </summary>
        </member>
        <member name="T:Ext.Template">
            <summary>
            Represents an HTML fragment template. Templates may be precompiled
            for greater performance. An instance of this class may be created by passing to the constructor either
            a single argument, or multiple arguments:  single argument : String/Array
            The single argument may be either a String or an Array: String :  var t = new Ext.Template(&quot;&amp;lt;div&gt;Hello {0}.&amp;lt;/div&gt;&quot;);
            t.append(&#39;some-element&#39;, [&#39;foo&#39;]);
            Array :
            An Array will be combined with join(&#39;&#39;).
            var t = new Ext.Template([
            &#39;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&#39;,
            &#39;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;&#39;,
            &#39;&amp;lt;/div&amp;gt;&#39;,
            ]);
            t.compile();
            t.append(&#39;some-element&#39;, {id: &#39;myid&#39;, cls: &#39;myclass&#39;, name: &#39;foo&#39;, value: &#39;bar&#39;});
            multiple arguments : String, Object, Array, ...
            Multiple arguments will be combined with join(&#39;&#39;).
            var t = new Ext.Template(
            &#39;&amp;lt;div name=&quot;{id}&quot;&amp;gt;&#39;,
            &#39;&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name} {value}&amp;lt;/span&amp;gt;&#39;,
            &#39;&amp;lt;/div&amp;gt;&#39;,
            // a configuration object:
            {
            compiled: true,      // compile immediately
            }
            );
            Notes:  For a list of available format functions, see Ext.util.Format. disableFormats reduces apply time
            when no formatting is required.
            </summary>
        </member>
        <member name="M:Ext.Template.append(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and appends
            the new node(s) to the specified el. ...
            </summary>
        </member>
        <member name="M:Ext.Template.apply(System.Object)">
            <summary>
            Alias for applyTemplate
            Returns an HTML fragment of this template with the specified values applied. ...
            </summary>
        </member>
        <member name="M:Ext.Template.applyTemplate(System.Object)">
            <summary>
            Returns an HTML fragment of this template with the specified values applied. ...
            </summary>
        </member>
        <member name="M:Ext.Template.compile">
            <summary>
            Compiles the template into an internal function, eliminating the RegEx overhead. ...
            </summary>
        </member>
        <member name="M:Ext.Template.insertAfter(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el. ...
            </summary>
        </member>
        <member name="M:Ext.Template.insertBefore(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el. ...
            </summary>
        </member>
        <member name="M:Ext.Template.insertFirst(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el. ...
            </summary>
        </member>
        <member name="M:Ext.Template.overwrite(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s). ...
            </summary>
        </member>
        <member name="M:Ext.Template.set(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Sets the HTML used as the template and optionally compiles it. ...
            </summary>
        </member>
        <member name="M:Ext.XTemplate.apply(System.Object)">
            <summary>
            Alias for applyTemplate
            Returns an HTML fragment of this template with the specified values applied. ...
            </summary>
        </member>
        <member name="M:Ext.XTemplate.applyTemplate(System.Object)">
            <summary>
            Returns an HTML fragment of this template with the specified values applied. ...
            </summary>
        </member>
        <member name="M:Ext.XTemplate.compile">
            <summary>
            Compile the template to a function for optimized performance. ...
            </summary>
        </member>
        <member name="P:Ext.TemplateConfig.disableFormats">
            <summary>
            true to disable format functions in the template. ...
            </summary>
        </member>
        <member name="T:Ext.window.MessageBox">
            <summary>
            Utility class for generating different styles of message boxes.  The singleton instance, Ext.Msg can also be used.
            Note that a MessageBox is asynchronous.  Unlike a regular JavaScript alert (which will halt
            browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
            that should only run after some user feedback from the MessageBox, you must use a callback function
            (see the function parameter for show for more details).    Example usage: // Basic alert:
            Ext.Msg.alert(&#39;Status&#39;, &#39;Changes saved successfully.&#39;);
            // Prompt for user data and process the result using a callback:
            Ext.Msg.prompt(&#39;Name&#39;, &#39;Please enter your name:&#39;, function(btn, text){
            if (btn == &#39;ok&#39;){
            // process text value and close...
            }
            });
            // Show a dialog using config options:
            Ext.Msg.show({
            title:&#39;Save Changes?&#39;,
            msg: &#39;You are closing a tab that has unsaved changes. Would you like to save your changes?&#39;,
            buttons: Ext.Msg.YESNOCANCEL,
            fn: processResult,
            animateTarget: &#39;elId&#39;,
            icon: Ext.window.MessageBox.QUESTION
            });
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.alert(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Delegate,System.Object)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.alert(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Delegate)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.alert(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.confirm(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.progress(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Displays a message box with a progress bar. ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.prompt(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's p...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.setIcon(SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified icon to the dialog. ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.show(System.Object)">
            <summary>
            Displays a new message box, or reinitializes an existing message box, based on the config options
            passed in. ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.updateProgress(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Updates a progress-style message box's text and progress bar. ...
            </summary>
        </member>
        <member name="M:Ext.window.MessageBox.wait(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Displays a message box with an infinitely auto-updating progress bar. ...
            </summary>
        </member>
        <member name="P:Ext.window.MessageBox.buttonText">
            <summary>
            An object containing the default button text strings that can be overriden for localized language support. ...
            </summary>
        </member>
        <member name="P:Ext.window.MessageBox.minProgressWidth">
            <summary>
            The minimum width in pixels of the message box if it is a progress-style dialog. ...
            </summary>
        </member>
        <member name="P:Ext.window.MessageBox.minPromptWidth">
            <summary>
            The minimum width in pixels of the message box if it is a prompt dialog. ...
            </summary>
        </member>
        <member name="P:Ext.state.StatefulConfig.saveBuffer">
            <summary>
            A buffer to be applied if many state events are fired within
            a short period. ...
            </summary>
        </member>
        <member name="P:Ext.state.StatefulConfig.stateEvents">
            <summary>
            An array of events that, when fired, should trigger this object to
            save its state (defaults to none). ...
            </summary>
        </member>
        <member name="P:Ext.state.StatefulConfig.stateId">
            <summary>
            The unique id for this object to use for state management purposes. ...
            </summary>
        </member>
        <member name="P:Ext.state.StatefulConfig.stateful">
            <summary>
            A flag which causes the object to attempt to restore the state of
            internal properties from a saved state on startup. ...
            </summary>
        </member>
        <member name="F:Ext.state.StatefulEvents.beforestaterestore">
            <summary>
            Fires before the state of the object is restored. ...
            </summary>
        </member>
        <member name="F:Ext.state.StatefulEvents.beforestatesave">
            <summary>
            Fires before the state of the object is saved to the configured state provider. ...
            </summary>
        </member>
        <member name="F:Ext.state.StatefulEvents.staterestore">
            <summary>
            Fires after the state of the object is restored. ...
            </summary>
        </member>
        <member name="F:Ext.state.StatefulEvents.statesave">
            <summary>
            Fires after the state of the object is saved to the configured state provider. ...
            </summary>
        </member>
        <member name="T:Ext.slider.Tip">
            <summary>
            Simple plugin for using an Ext.tip.Tip with a slider to show the slider value. In general this
            class is not created directly, instead pass the Ext.slider.Multi.useTips and
            Ext.slider.Multi.tipText configuration options to the slider directly.
            Example usage:     Ext.create(&#39;Ext.slider.Single&#39;, {
            width: 214,
            minValue: 0,
            maxValue: 100,
            useTips: true,
            renderTo: Ext.getBody()
            });
            Optionally provide your own tip text by passing tipText:  new Ext.slider.Single({
            width: 214,
            minValue: 0,
            maxValue: 100,
            useTips: true,
            tipText: function(thumb){
            return Ext.String.format(&#39;{0}% complete&#39;, thumb.value);
            }
            });
            </summary>
        </member>
        <member name="M:Ext.slider.Tip.getText(Ext.slider.Thumb)">
            <summary>
            Used to create the text that appears in the Tip's body. ...
            </summary>
        </member>
        <member name="T:Ext.menu.Separator">
            <summary>
            Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
            add one of these by using &quot;-&quot; in your call to add() or in your items config rather than creating one directly.  Code Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 100,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;icon item&#39;,
            iconCls: &#39;add16&#39;
            },{
            xtype: &#39;menuseparator&#39;
            },{
            text: &#39;seperator above&#39;,
            },{
            text: &#39;regular item&#39;,
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.menu.SeparatorConfig.separatorCls">
            <summary>
            The CSS class used by the separator item to show the incised line. ...
            </summary>
        </member>
        <member name="T:Ext.menu.DatePicker">
            <summary>
            A menu containing an Ext.picker.Date Component. Notes:  Although not listed here, the constructor for this class
            accepts all of the configuration options of Ext.picker.Date. If subclassing DateMenu, any configuration options for the DatePicker must be
            applied to the initialConfig property of the DateMenu.
            Applying DatePicker configuration settings to
            this will not affect the DatePicker&#39;s configuration.   Example Usage var dateMenu = Ext.create(&#39;Ext.menu.DatePicker&#39;, {
            handler: function(dp, date){
            Ext.Msg.alert(&#39;Date Selected&#39;, &#39;You choose {0}.&#39;, Ext.Date.format(date, &#39;M j, Y&#39;));
            }
            });
            Ext.create(&#39;Ext.menu.Menu&#39;, {
            width: 100,
            height: 90,
            floating: false,  // usually you want this set to True (default)
            renderTo: Ext.getBody(),  // usually rendered by it&#39;s containing component
            items: [{
            text: &#39;choose a date&#39;,
            menu: dateMenu
            },{
            iconCls: &#39;add16&#39;,
            text: &#39;icon item&#39;
            },{
            text: &#39;regular item&#39;
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.menu.DatePickerConfig.pickerId">
            <summary>
            An id to assign to the underlying date picker. ...
            </summary>
        </member>
        <member name="F:Ext.menu.DatePickerEvents.select">
            <summary>
            Fires when a date is selected from the Ext.picker.Date ...
            </summary>
        </member>
        <member name="T:Ext.grid.column.Date">
            <summary>
            A Column definition class which renders a passed date according to the default locale, or a configured
            format.  Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;sampleStore&#39;,
            fields:[
            {name: &#39;symbol&#39;, type: &#39;string&#39;},
            {name: &#39;date&#39;, type: &#39;date&#39;},
            {name: &#39;change&#39;, type: &#39;number&#39;},
            {name: &#39;volume&#39;, type: &#39;number&#39;},
            {name: &#39;topday&#39;, type: &#39;date&#39;}
            ],
            data:[
            {symbol:&quot;msft&quot;, date:&#39;2011/04/22&#39;, change:2.43, volume:61606325, topday:&#39;04/01/2010&#39;},
            {symbol:&quot;goog&quot;, date:&#39;2011/04/22&#39;, change:0.81, volume:3053782, topday:&#39;04/11/2010&#39;},
            {symbol:&quot;apple&quot;, date:&#39;2011/04/22&#39;, change:1.35, volume:24484858, topday:&#39;04/28/2010&#39;},
            {symbol:&quot;sencha&quot;, date:&#39;2011/04/22&#39;, change:8.85, volume:5556351, topday:&#39;04/22/2010&#39;}
            ]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Date Column Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;sampleStore&#39;),
            columns: [
            {text: &#39;Symbol&#39;,  dataIndex: &#39;symbol&#39;, flex: 1},
            {text: &#39;Date&#39;,  dataIndex: &#39;date&#39;, xtype: &#39;datecolumn&#39;, format:&#39;Y-m-d&#39;},
            {text: &#39;Change&#39;,  dataIndex: &#39;change&#39;, xtype: &#39;numbercolumn&#39;, format:&#39;0.00&#39;},
            {text: &#39;Volume&#39;,  dataIndex: &#39;volume&#39;, xtype: &#39;numbercolumn&#39;, format:&#39;0,000&#39;},
            {text: &#39;Top Day&#39;,  dataIndex: &#39;topday&#39;, xtype: &#39;datecolumn&#39;, format:&#39;l&#39;}
            ],
            height: 200,
            width: 450,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="P:Ext.grid.column.DateConfig.format">
            <summary>
            A formatting string as used by Ext.Date.format to format a Date for this Column. ...
            </summary>
        </member>
        <member name="T:Ext.grid.column.Action">
            <summary>
            A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click
            handler for each icon.  Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;employeeStore&#39;,
            fields:[&#39;firstname&#39;, &#39;lastname&#39;, &#39;senority&#39;, &#39;dep&#39;, &#39;hired&#39;],
            data:[
            {firstname:&quot;Michael&quot;, lastname:&quot;Scott&quot;},
            {firstname:&quot;Dwight&quot;, lastname:&quot;Schrute&quot;},
            {firstname:&quot;Jim&quot;, lastname:&quot;Halpert&quot;},
            {firstname:&quot;Kevin&quot;, lastname:&quot;Malone&quot;},
            {firstname:&quot;Angela&quot;, lastname:&quot;Martin&quot;}
            ]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Action Column Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;employeeStore&#39;),
            columns: [
            {text: &#39;First Name&#39;,  dataIndex:&#39;firstname&#39;},
            {text: &#39;Last Name&#39;,  dataIndex:&#39;lastname&#39;},
            {
            xtype:&#39;actioncolumn&#39;,
            width:50,
            items: [{
            icon: &#39;images/edit.png&#39;,  // Use a URL in the icon config
            tooltip: &#39;Edit&#39;,
            handler: function(grid, rowIndex, colIndex) {
            var rec = grid.getStore().getAt(rowIndex);
            alert(&quot;Edit &quot; + rec.get(&#39;firstname&#39;));
            }
            },{
            icon: &#39;images/delete.png&#39;,
            tooltip: &#39;Delete&#39;,
            handler: function(grid, rowIndex, colIndex) {
            var rec = grid.getStore().getAt(rowIndex);
            alert(&quot;Terminate &quot; + rec.get(&#39;firstname&#39;));
            }
            }]
            }
            ],
            width: 250,
            renderTo: Ext.getBody()
            });
            The action column can be at any index in the columns array, and a grid can have any number of
            action columns.
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.altText">
            <summary>
            The alt text to use for the image element. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.getClass">
            <summary>
            A function which returns the CSS class to apply to the icon image. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.handler">
            <summary>
            A function called when the icon is clicked. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.icon">
            <summary>
            The URL of an image to display as the clickable element in the column. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.iconCls">
            <summary>
            A CSS class to apply to the icon image. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.items">
            <summary>
            An Array which may contain multiple icon definitions, each element of which may contain:
            icon : StringThe url of an...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.scope">
            <summary>
            The scope (this reference) in which the handler
            and getClass fuctions are executed. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.stopSelection">
            <summary>
            Defaults to true. ...
            </summary>
        </member>
        <member name="P:Ext.grid.column.ActionConfig.tooltip">
            <summary>
            A tooltip message to be displayed on hover. ...
            </summary>
        </member>
        <member name="T:Ext.fx.target.ElementCSS">
            <summary>
            This class represents a animation target for an Ext.core.Element that supports CSS
            based animation. In general this class will not be created directly, the Ext.core.Element
            will be passed to the animation and the appropriate target will be created.
            </summary>
        </member>
        <member name="T:Ext.fx.target.CompositeSprite">
            <summary>
            This class represents a animation target for a Ext.draw.CompositeSprite. It allows
            each Ext.draw.Sprite in the group to be animated as a whole. In general this class will not be
            created directly, the Ext.draw.CompositeSprite will be passed to the animation and
            and the appropriate target will be created.
            </summary>
        </member>
        <member name="T:Ext.fx.target.Component">
            <summary>
            This class represents a animation target for a Ext.Component. In general this class will not be
            created directly, the Ext.Component will be passed to the animation and
            and the appropriate target will be created.
            </summary>
        </member>
        <member name="T:Ext.FocusManager">
            <summary>
            The FocusManager is responsible for globally:  Managing component focus Providing basic keyboard navigation (optional) Provide a visual cue for focused components, in the form of a focus ring/frame.  To activate the FocusManager, simply call &amp;lt;code&amp;gt;Ext.FocusManager.enable();&amp;lt;/code&amp;gt;. In turn, you may
            deactivate the FocusManager by subsequently calling &amp;lt;code&amp;gt;Ext.FocusManager.disable();&amp;lt;/code&amp;gt;.  The
            FocusManager is disabled by default. To enable the optional focus frame, pass true or {focusFrame: true} to enable. Another feature of the FocusManager is to provide basic keyboard focus navigation scoped to any Ext.container.Container
            that would like to have navigation between its child Ext.Component&#39;s. The Ext.container.Container can simply
            call Ext.FocusManager.subscribe to take advantage of this feature, and can at any time call
            Ext.FocusManager.unsubscribe to turn the navigation off.
            </summary>
        </member>
        <member name="M:Ext.FocusManager.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.addXTypeToWhitelist(System.Object)">
            <summary>
            Adds the specified xtype to the whitelist. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.disable">
            <summary>
            Disables the FocusManager by turning of all automatic focus management and keyboard navigation ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.enable(System.Object)">
            <summary>
            Enables the FocusManager by turning on all automatic focus management and keyboard navigation ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.enable">
            <summary>
            Enables the FocusManager by turning on all automatic focus management and keyboard navigation ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.removeXTypeFromWhitelist(System.Object)">
            <summary>
            Removes the specified xtype from the whitelist. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.subscribe(Ext.container.Container,System.Object)">
            <summary>
            Subscribes an Ext.container.Container to provide basic keyboard focus navigation between its child Ext.Component's. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="M:Ext.FocusManager.unsubscribe(Ext.container.Container)">
            <summary>
            Unsubscribes an Ext.container.Container from keyboard focus management. ...
            </summary>
        </member>
        <member name="P:Ext.FocusManager.focusedCmp">
            <summary>
            The currently focused component. ...
            </summary>
        </member>
        <member name="P:Ext.FocusManager.whitelist">
            <summary>
            A list of xtypes that should ignore certain navigation input keys and
            allow for the default browser event/behavior. ...
            </summary>
        </member>
        <member name="P:Ext.FocusManagerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.FocusManagerEvents.beforecomponentfocus">
            <summary>
            Fires before a component becomes focused. ...
            </summary>
        </member>
        <member name="F:Ext.FocusManagerEvents.componentfocus">
            <summary>
            Fires after a component becomes focused. ...
            </summary>
        </member>
        <member name="F:Ext.FocusManagerEvents.disable">
            <summary>
            Fires when the FocusManager is disabled ...
            </summary>
        </member>
        <member name="F:Ext.FocusManagerEvents.enable">
            <summary>
            Fires when the FocusManager is enabled ...
            </summary>
        </member>
        <member name="T:Ext.direct.ExceptionEvent">
            <summary>
            An event that is fired when an exception is received from a Ext.direct.RemotingProvider
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Rest">
            <summary>
            RestProxy is a specialization of the AjaxProxy which simply maps the four actions
            (create, read, update and destroy) to RESTful HTTP verbs. For example, let&#39;s set up a Model
            with an inline RestProxy Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
            proxy: {
            type: &#39;rest&#39;,
            url : &#39;/users&#39;
            }
            });
            Now we can create a new User instance and save it via the RestProxy. Doing this will cause the Proxy to send a
            POST request to &#39;/users&#39;:
            var user = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;, email: &#39;ed@sencha.com&#39;}, &#39;User&#39;);
            user.save(); //POST /users
            Let&#39;s expand this a little and provide a callback for the Ext.data.Model.save call to update the Model
            once it has been created. We&#39;ll assume the creation went successfully and that the server gave this user an ID of
            123: user.save({
            success: function(user) {
            user.set(&#39;name&#39;, &#39;Khan Noonien Singh&#39;);
            user.save(); //PUT /users/123
            }
            });
            Now that we&#39;re no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting
            the relevant url for that user. Now let&#39;s delete this user, which will use the DELETE method:     user.destroy(); //DELETE /users/123
            Finally, when we perform a load of a Model or Store, RestProxy will use the GET method: //1. Load via Store
            //the Store automatically picks up the Proxy from the User model
            var store = new Ext.data.Store({
            model: &#39;User&#39;
            });
            store.load(); //GET /users
            //2. Load directly from the Model
            //GET /users/123
            Ext.ModelManager.getModel(&#39;User&#39;).load(123, {
            success: function(user) {
            console.log(user.getId()); //outputs 123
            }
            });
            Url generation RestProxy is able to automatically generate the urls above based on two configuration options - appendId
            and format. If appendId is true (it is by default) then RestProxy will automatically append the ID of the
            Model instance in question to the configured url, resulting in the &#39;/users/123&#39; that we saw above. If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
            RestProxy will automatically insert a &#39;/&#39; before the ID if one is not already present. new Ext.data.proxy.Rest({
            url: &#39;/users&#39;,
            appendId: true //default
            });
            // Collection url: /users
            // Instance url  : /users/123
            RestProxy can also optionally append a format string to the end of any generated url: new Ext.data.proxy.Rest({
            url: &#39;/users&#39;,
            format: &#39;json&#39;
            });
            // Collection url: /users.json
            // Instance url  : /users/123.json
            If further customization is needed, simply implement the buildUrl method and add your custom generated
            url onto the Request object that is passed to buildUrl. See
            RestProxy&#39;s implementation for an example of
            how to achieve this. Note that RestProxy inherits from AjaxProxy, which already injects all of the sorter,
            filter, group and paging options into the generated url. See the AjaxProxy docs for more
            details.
            </summary>
        </member>
        <member name="M:Ext.data.proxy.Rest.buildUrl(System.Object)">
            <summary>
            Specialized version of buildUrl that incorporates the appendId and format options into the
            generated url. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.Rest.actionMethods">
            <summary>
            Mapping of action name to HTTP request method. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.RestConfig.appendId">
            <summary>
            True to automatically append the ID of a Model instance when performing a request based
            on that single instance. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.RestConfig.batchActions">
            <summary>
            True to batch actions of a particular type when synchronizing the store. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.RestConfig.format">
            <summary>
            Optional data format to send to the server when making any request (e.g. ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.JsonP">
            <summary>
            JsonPProxy is useful when you need to load data from a domain other than the one your application is running
            on. If your application is running on http://domainA.com it cannot use Ajax to load its
            data from http://domainB.com because cross-domain ajax requests are prohibited by the browser. We can get around this using a JsonPProxy. JsonPProxy injects a &amp;lt;script&amp;gt; tag into the DOM whenever
            an AJAX request would usually be made. Let&#39;s say we want to load data from http://domainB.com/users - the script tag
            that would be injected might look like this: &amp;lt;script src=&quot;http://domainB.com/users?callback=someCallback&quot;&amp;gt;&amp;lt;/script&amp;gt;
            When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
            other type of JavaScript include. By passing a callback in the url above, we&#39;re telling domainB&#39;s server that we
            want to be notified when the result comes in and that it should call our callback function with the data it sends
            back. So long as the server formats the response to look like this, everything will work: someCallback({
            users: [
            {
            id: 1,
            name: &quot;Ed Spencer&quot;,
            email: &quot;ed@sencha.com&quot;
            }
            ]
            });
            As soon as the script finishes loading, the &#39;someCallback&#39; function that we passed in the url is called with the
            JSON object that the server returned. JsonPProxy takes care of all of this automatically. It formats the url you pass, adding the callback
            parameter automatically. It even creates a temporary callback function, waits for it to be called and then puts
            the data into the Proxy making it look just like you loaded it through a normal AjaxProxy.
            Here&#39;s how we might set that up: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;]
            });
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;jsonp&#39;,
            url : &#39;http://domainB.com/users&#39;
            }
            });
            store.load();
            That&#39;s all we need to do - JsonPProxy takes care of the rest. In this case the Proxy will have injected a
            script tag like this:
            &amp;lt;script src=&quot;http://domainB.com/users?callback=stcCallback001&quot; id=&quot;stcScript001&quot;&amp;gt;&amp;lt;/script&amp;gt;
            Customization Most parts of this script tag can be customized using the callbackParam, callbackPrefix and
            scriptIdPrefix configurations. For example:
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;jsonp&#39;,
            url : &#39;http://domainB.com/users&#39;,
            callbackParam: &#39;theCallbackFunction&#39;,
            callbackPrefix: &#39;ABC&#39;,
            scriptIdPrefix: &#39;injectedScript&#39;
            }
            });
            store.load();
            Would inject a script tag like this: &amp;lt;script src=&quot;http://domainB.com/users?theCallbackFunction=ABC001&quot; id=&quot;injectedScript001&quot;&amp;gt;&amp;lt;/script&amp;gt;
            Implementing on the server side The remote server side needs to be configured to return data in this format. Here are suggestions for how you
            might achieve this using Java, PHP and ASP.net: Java: boolean jsonP = false;
            String cb = request.getParameter(&quot;callback&quot;);
            if (cb != null) {
            jsonP = true;
            response.setContentType(&quot;text/javascript&quot;);
            } else {
            response.setContentType(&quot;application/x-json&quot;);
            }
            Writer out = response.getWriter();
            if (jsonP) {
            out.write(cb + &quot;(&quot;);
            }
            out.print(dataBlock.toJsonString());
            if (jsonP) {
            out.write(&quot;);&quot;);
            }
            PHP: $callback = $_REQUEST[&#39;callback&#39;];
            // Create the output object.
            $output = array(&#39;a&#39; =&gt; &#39;Apple&#39;, &#39;b&#39; =&gt; &#39;Banana&#39;);
            //start output
            if ($callback) {
            header(&#39;Content-Type: text/javascript&#39;);
            echo $callback . &#39;(&#39; . json_encode($output) . &#39;);&#39;;
            } else {
            header(&#39;Content-Type: application/x-json&#39;);
            echo json_encode($output);
            }
            ASP.net: String jsonString = &quot;{success: true}&quot;;
            String cb = Request.Params.Get(&quot;callback&quot;);
            String responseString = &quot;&quot;;
            if (!String.IsNullOrEmpty(cb)) {
            responseString = cb + &quot;(&quot; + jsonString + &quot;)&quot;;
            } else {
            responseString = jsonString;
            }
            Response.Write(responseString);
            </summary>
        </member>
        <member name="M:Ext.data.proxy.JsonP.abort">
            <summary>
            Aborts the current server request if one is currently running ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.JsonP.buildUrl(Ext.data.Request)">
            <summary>
            Generates a url based on a given Ext.data.Request object. ...
            </summary>
        </member>
        <member name="M:Ext.data.proxy.JsonP.encodeRecords(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes an array of records into a string suitable to be appended to the script src url. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.JsonPConfig.autoAppendParams">
            <summary>
            True to automatically append the request's params to the generated url. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.JsonPConfig.recordParam">
            <summary>
            The param name to use when passing records to the server (e.g. ...
            </summary>
        </member>
        <member name="F:Ext.data.proxy.JsonPEvents.exception">
            <summary>
            Fires when the server returns an exception ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.color">
            <summary>
            The color of the label text. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.display">
            <summary>
            Specifies the presence and position of labels for each pie slice. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.field">
            <summary>
            The name of the field to be displayed in the label. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.font">
            <summary>
            The font used for the labels. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.minMargin">
            <summary>
            Specifies the minimum distance from a label to the origin of the visualization. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.orientation">
            <summary>
            Either "horizontal" or "vertical". ...
            </summary>
        </member>
        <member name="P:Ext.chart.LabelConfig.renderer">
            <summary>
            Optional function for formatting the label into a displayable value. ...
            </summary>
        </member>
        <member name="T:Ext.view.BoundListKeyNav">
            <summary>
            A specialized Ext.util.KeyNav implementation for navigating a Ext.view.BoundList using
            the keyboard. The up, down, pageup, pagedown, home, and end keys move the active highlight
            through the list. The enter key invokes the selection model&#39;s select action using the highlighted item.
            </summary>
        </member>
        <member name="T:Ext.util.KeyNav">
            <summary>
            Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
            navigation keys to function calls that will get called when the keys are pressed, providing an easy
            way to implement custom navigation schemes for any UI component. The following are all of the possible keys that can be implemented: enter, space, left, right, up, down, tab, esc,
            pageUp, pageDown, del, backspace, home, end.  Usage: var nav = new Ext.util.KeyNav(&quot;my-element&quot;, {
            &quot;left&quot; : function(e){
            this.moveLeft(e.ctrlKey);
            },
            &quot;right&quot; : function(e){
            this.moveRight(e.ctrlKey);
            },
            &quot;enter&quot; : function(e){
            this.save();
            },
            scope : this
            });
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.#ctor(System.Object,System.Object)">
            <summary>
            Creates new KeyNav. ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.destroy(System.Boolean)">
            <summary>
            Destroy this KeyNav (this is the same as calling disable). ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.disable">
            <summary>
            Disable this KeyNav ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.enable">
            <summary>
            Enable this KeyNav ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.getKeyEvent(System.Object)">
            <summary>
            Determines the event to bind to listen for keys. ...
            </summary>
        </member>
        <member name="M:Ext.util.KeyNav.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean. ...
            </summary>
        </member>
        <member name="M:Ext.view.BoundListKeyNav.highlightAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Highlights the item at the given index. ...
            </summary>
        </member>
        <member name="M:Ext.view.BoundListKeyNav.selectHighlighted(System.Object)">
            <summary>
            Triggers selection of the currently highlighted item according to the behavior of
            the configured SelectionModel. ...
            </summary>
        </member>
        <member name="P:Ext.util.KeyNavConfig.defaultEventAction">
            <summary>
            The method to call on the Ext.EventObject after this KeyNav intercepts a key. ...
            </summary>
        </member>
        <member name="P:Ext.util.KeyNavConfig.forceKeyDown">
            <summary>
            Handle the keydown event instead of keypress (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.view.BoundListKeyNavConfig.boundList">
            <summary>
            @required
            The Ext.view.BoundList instance for which key navigation will be managed. ...
            </summary>
        </member>
        <member name="P:Ext.util.FloatingConfig.focusOnToFront">
            <summary>
            Specifies whether the floated component should be automatically focused when it is
            brought to the front. ...
            </summary>
        </member>
        <member name="P:Ext.util.FloatingConfig.shadow">
            <summary>
            Specifies whether the floating component should be given a shadow. ...
            </summary>
        </member>
        <member name="T:Ext.Shadow">
            <summary>
            Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
            and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
            functionality that can also provide the same shadow effect, see the Ext.Layer class.
            </summary>
        </member>
        <member name="M:Ext.Shadow.#ctor(System.Object)">
            <summary>
            Creates new Shadow. ...
            </summary>
        </member>
        <member name="M:Ext.Shadow.hide">
            <summary>
            Hides this shadow ...
            </summary>
        </member>
        <member name="M:Ext.Shadow.isVisible">
            <summary>
            Returns true if the shadow is visible, else false ...
            </summary>
        </member>
        <member name="M:Ext.Shadow.realign(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Direct alignment when values are already available. ...
            </summary>
        </member>
        <member name="M:Ext.Shadow.setZIndex(SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the z-index of this shadow ...
            </summary>
        </member>
        <member name="M:Ext.Shadow.show(System.Object)">
            <summary>
            Displays the shadow under the target element ...
            </summary>
        </member>
        <member name="P:Ext.ShadowConfig.mode">
            <summary>
            The shadow display mode. ...
            </summary>
        </member>
        <member name="T:Ext.Number">
            <summary>
            A collection of useful static methods to deal with numbers
            </summary>
        </member>
        <member name="M:Ext.Number.constrain(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Checks whether or not the passed number is within a desired range. ...
            </summary>
        </member>
        <member name="M:Ext.Number.from(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Validate that a value is numeric and convert it to a number if necessary. ...
            </summary>
        </member>
        <member name="M:Ext.Number.snap(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Snaps the passed number between stopping points based upon a passed increment value. ...
            </summary>
        </member>
        <member name="M:Ext.Number.toFixed(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Formats a number using fixed-point notation ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Table">
            <summary>
            This layout allows you to easily render content into an HTML table.  The total number of columns can be
            specified, and rowspan and colspan can be used to create complex layouts within the table.
            This class is intended to be extended or created via the layout: {type: &#39;table&#39;} Ext.container.Container.layout config, and should generally not need to be created directly via the new keyword. Note that when creating a layout via config, the layout-specific config properties must be passed in via
            the Ext.container.Container.layout object which will then be applied internally to the layout.  In the
            case of TableLayout, the only valid layout config properties are columns and tableAttrs.
            However, the items added to a TableLayout can supply the following table-specific config properties:  rowspan Applied to the table cell containing the item. colspan Applied to the table cell containing the item. cellId An id applied to the table cell containing the item. cellCls A CSS class name added to the table cell containing the item.  The basic concept of building up a TableLayout is conceptually very similar to building up a standard
            HTML table.  You simply add each panel (or &quot;cell&quot;) that you want to include along with any span attributes
            specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
            Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
            total column count in the layoutConfig and start adding panels in their natural order from left to right,
            top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
            how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
            up correctly in your overall layout or you&#39;ll end up with missing and/or extra cells!  Example usage:  // This code will generate a layout table that is 3 columns by 2 rows
            // with some spanning included.  The basic layout will be:
            // +--------+-----------------+
            // |   A    |   B             |
            // |        |--------+--------|
            // |        |   C    |   D    |
            // +--------+--------+--------+
            Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Table Layout&#39;,
            width: 300,
            height: 150,
            layout: {
            type: &#39;table&#39;,
            // The total column count must be specified here
            columns: 3
            },
            defaults: {
            // applied to each contained panel
            bodyStyle:&#39;padding:20px&#39;
            },
            items: [{
            html: &#39;Cell A content&#39;,
            rowspan: 2
            },{
            html: &#39;Cell B content&#39;,
            colspan: 2
            },{
            html: &#39;Cell C content&#39;,
            cellCls: &#39;highlight&#39;
            },{
            html: &#39;Cell D content&#39;
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="P:Ext.layout.container.TableConfig.columns">
            <summary>
            The total number of columns to create in the table for this layout. ...
            </summary>
        </member>
        <member name="P:Ext.layout.container.TableConfig.tableAttrs">
            <summary>
            An object containing properties which are added to the DomHelper specification
            used to create the layout's table...
            </summary>
        </member>
        <member name="P:Ext.layout.container.TableConfig.tdAttrs">
            <summary>
            An object containing properties which are added to the DomHelper specification
            used to create the layout's &lt;td&gt;...
            </summary>
        </member>
        <member name="P:Ext.layout.container.TableConfig.trAttrs">
            <summary>
            An object containing properties which are added to the DomHelper specification
            used to create the layout's &lt;tr&gt;...
            </summary>
        </member>
        <member name="T:Ext.layout.container.Column">
            <summary>
            This is the layout style of choice for creating structural layouts in a multi-column format where the width of
            each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
            This class is intended to be extended or created via the layout:&#39;column&#39; Ext.container.Container.layout config,
            and should generally not need to be created directly via the new keyword. ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
            specific config property of columnWidth that can be included in the config of any panel added to it.  The
            layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
            If width or columnWidth is not specified for a given panel, its width will default to the panel&#39;s width (or auto). The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
            The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
            less than 1 (e.g., .25). The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
            set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
            specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
            pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
            the total remaining container width.  In other words, percentage width panels are designed to fill the space
            left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
            with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
            layout may not render as expected.
            Example usage:     // All columns are percentages -- they must add up to 1
            Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Column Layout - Percentage Only&#39;,
            width: 350,
            height: 250,
            layout:&#39;column&#39;,
            items: [{
            title: &#39;Column 1&#39;,
            columnWidth: .25
            },{
            title: &#39;Column 2&#39;,
            columnWidth: .55
            },{
            title: &#39;Column 3&#39;,
            columnWidth: .20
            }],
            renderTo: Ext.getBody()
            });
            //
            // Mix of width and columnWidth -- all columnWidth values must add up
            // to 1. The first column will take up exactly 120px, and the last two
            // columns will fill the remaining container width.
            Ext.create(&#39;Ext.Panel&#39;, {
            title: &#39;Column Layout - Mixed&#39;,
            width: 350,
            height: 250,
            layout:&#39;column&#39;,
            items: [{
            title: &#39;Column 1&#39;,
            width: 120
            },{
            title: &#39;Column 2&#39;,
            columnWidth: .7
            },{
            title: &#39;Column 3&#39;,
            columnWidth: .3
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.form.field.File">
            <summary>
            A file upload field which has custom styling and allows control over the button text and other
            features of text fields like empty text.
            It uses a hidden file input element behind the scenes to allow user selection of a file and to
            perform the actual upload during form submit. Because there is no secure cross-browser way to programmatically set the value of a file input,
            the standard Field setValue method is not implemented. The getValue method will return
            a value that is browser-dependent; some have just the file name, some have a full path, some use
            a fake path.
            Example Usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Upload a Photo&#39;,
            width: 400,
            bodyPadding: 10,
            frame: true,
            renderTo: Ext.getBody(),
            items: [{
            xtype: &#39;filefield&#39;,
            name: &#39;photo&#39;,
            fieldLabel: &#39;Photo&#39;,
            labelWidth: 50,
            msgTarget: &#39;side&#39;,
            allowBlank: false,
            anchor: &#39;100%&#39;,
            buttonText: &#39;Select Photo...&#39;
            }],
            buttons: [{
            text: &#39;Upload&#39;,
            handler: function() {
            var form = this.up(&#39;form&#39;).getForm();
            if(form.isValid()){
            form.submit({
            url: &#39;photo-upload.php&#39;,
            waitMsg: &#39;Uploading your photo...&#39;,
            success: function(fp, o) {
            Ext.Msg.alert(&#39;Success&#39;, &#39;Your photo &quot;&#39; + o.result.file + &#39;&quot; has been uploaded.&#39;);
            }
            });
            }
            }
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.form.field.File.button">
            <summary>
            A reference to the trigger Button component created for this upload field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.File.fileInputEl">
            <summary>
            A reference to the invisible file input element created for this upload field. ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FileConfig.buttonMargin">
            <summary>
            The number of pixels of space reserved between the button and the text field
            (defaults to 3). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FileConfig.buttonOnly">
            <summary>
            True to display the file upload field as a button with no visible
            text field (defaults to false). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FileConfig.buttonText">
            <summary>
            The button text to display on the upload button (defaults to
            'Browse...'). ...
            </summary>
        </member>
        <member name="P:Ext.form.field.FileConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="F:Ext.form.field.FileEvents.change">
            <summary>
            Fires when the underlying file input field's value has changed from the user
            selecting a new file from the system fil...
            </summary>
        </member>
        <member name="T:Ext.draw.Color">
            <summary>
            Represents an RGB color and provides helper functions get
            color components in HSL color space.
            </summary>
        </member>
        <member name="M:Ext.draw.Color.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates new Color. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getBlue">
            <summary>
            Get the blue component of the color, in the range 0..255. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getDarker(SharpKit.JavaScript.JsNumber)">
            <summary>
            Return a new color that is darker than this color. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getGrayscale">
            <summary>
            Returns the gray value (0 to 255) of the color. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getGreen">
            <summary>
            Get the green component of the color, in the range 0..255. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getHSL">
            <summary>
            Get the equivalent HSL components of the color. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getLighter(SharpKit.JavaScript.JsNumber)">
            <summary>
            Return a new color that is lighter than this color. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getRGB">
            <summary>
            Get the RGB values. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.getRed">
            <summary>
            Get the red component of the color, in the range 0..255. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Color.toString">
            <summary>
            Return the color in the hex format, i.e. ...
            </summary>
        </member>
        <member name="P:Ext.draw.ColorConfig.lightnessFactor">
            <summary>
            The default factor to compute the lighter or darker color. ...
            </summary>
        </member>
        <member name="T:Ext.data.validations">
            <summary>
            This singleton contains a set of validation functions that can be used to validate any type
            of data. They are most often used in Models, where they are automatically
            set up and executed.
            </summary>
        </member>
        <member name="M:Ext.data.validations.exclusion(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Validates that the given value is present in the configured list ...
            </summary>
        </member>
        <member name="M:Ext.data.validations.format(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the given value passes validation against the configured matcher regex ...
            </summary>
        </member>
        <member name="M:Ext.data.validations.inclusion(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Validates that the given value is present in the configured list ...
            </summary>
        </member>
        <member name="M:Ext.data.validations.length(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the given value is between the configured min and max values ...
            </summary>
        </member>
        <member name="M:Ext.data.validations.presence(System.Object,System.Object)">
            <summary>
            Validates that the given value is present ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.SessionStorage">
            <summary>
            Proxy which uses HTML5 session storage as its data storage/retrieval mechanism.
            If this proxy is used in a browser where session storage is not supported, the constructor will throw an error.
            A session storage proxy requires a unique ID which is used as a key in which all record data are stored in the
            session storage object. It&#39;s important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
            but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
            throw an error. Proxies are almost always used with a store: new Ext.data.Store({
            proxy: {
            type: &#39;sessionstorage&#39;,
            id  : &#39;myProxyKey&#39;
            }
            });
            Alternatively you can instantiate the Proxy directly: new Ext.data.proxy.SessionStorage({
            id  : &#39;myOtherProxyKey&#39;
            });
            Note that session storage is different to local storage (see Ext.data.proxy.LocalStorage) - if a browser
            session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
            don&#39;t affect the Ext.data.proxy.LocalStorage - the data are preserved.
            </summary>
        </member>
        <member name="T:Ext.chart.series.Gauge">
            <summary>
            Creates a Gauge Chart. Gauge Charts are used to show progress in a certain variable. There are two ways of using the Gauge chart.
            One is setting a store element into the Gauge and selecting the field to be used from that store. Another one is instanciating the
            visualization and using the setValue method to adjust the value you want. A chart/series configuration for the Gauge visualization could look like this: {
            xtype: &#39;chart&#39;,
            store: store,
            axes: [{
            type: &#39;gauge&#39;,
            position: &#39;gauge&#39;,
            minimum: 0,
            maximum: 100,
            steps: 10,
            margin: -10
            }],
            series: [{
            type: &#39;gauge&#39;,
            field: &#39;data1&#39;,
            donut: false,
            colorSet: [&#39;#F49D10&#39;, &#39;#ddd&#39;]
            }]
            }
            In this configuration we create a special Gauge axis to be used with the gauge visualization (describing half-circle markers), and also we&#39;re
            setting a maximum, minimum and steps configuration options into the axis. The Gauge series configuration contains the store field to be bound to
            the visual display and the color set to be used with the visualization.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Gauge.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Gauge.getLegendColor(System.Object)">
            <summary>
            Returns the color of the series (to be displayed as color for the series legend item). ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Gauge.setValue(System.Object)">
            <summary>
            Sets the Gauge chart to the current specified value. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.GaugeConfig.angleField">
            <summary>
            The store record field name to be used for the pie angles. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.GaugeConfig.donut">
            <summary>
            Use the entire disk or just a fraction of it for the gauge. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.GaugeConfig.needle">
            <summary>
            Use the Gauge Series as an area series or add a needle to it. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.GaugeConfig.showInLegend">
            <summary>
            Whether to add the pie chart elements as legend items. ...
            </summary>
        </member>
        <member name="T:Ext.chart.series.Area">
            <summary>
            Creates a Stacked Area Chart. The stacked area chart is useful when displaying multiple aggregated layers of information.
            As with all other series, the Area Series must be appended in the *series* Chart array configuration. See the Chart
            documentation for more information. A typical configuration object for the area series could be:
            var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            grid: true,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            title: &#39;Sample Values&#39;,
            grid: {
            odd: {
            opacity: 1,
            fill: &#39;#ddd&#39;,
            stroke: &#39;#bbb&#39;,
            &#39;stroke-width&#39;: 1
            }
            },
            minimum: 0,
            adjustMinimumByMajorUnit: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;,
            grid: true,
            label: {
            rotate: {
            degrees: 315
            }
            }
            }],
            series: [{
            type: &#39;area&#39;,
            highlight: false,
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            style: {
            opacity: 0.93
            }
            }]
            });
            In this configuration we set area as the type for the series, set highlighting options to true for highlighting elements on hover,
            take the left axis to measure the data in the area series, set as xField (x values) the name field of each element in the store,
            and as yFields (aggregated layers) seven data fields from the same store. Then we override some theming styles by adding some opacity
            to the style object.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.getLegendColor(System.Object)">
            <summary>
            Returns the color of the series (to be displayed as color for the series legend item). ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.highlightItem(System.Object)">
            <summary>
            Highlight the specified item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.highlightSeries(System.Object)">
            <summary>
            Highlight this entire series. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.unHighlightItem(System.Object)">
            <summary>
            un-highlights the specified item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Area.unHighlightSeries(System.Object)">
            <summary>
            UnHighlight this entire series. ...
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Time">
            <summary>
            A type of axis whose units are measured in time values. Use this axis
            for listing dates that you will want to group or dynamically change.
            If you just want to display dates as categories then use the
            Category class for axis instead. For example: axes: [{
            type: &#39;Time&#39;,
            position: &#39;bottom&#39;,
            fields: &#39;date&#39;,
            title: &#39;Day&#39;,
            dateFormat: &#39;M d&#39;,
            groupBy: &#39;year,month,day&#39;,
            aggregateOp: &#39;sum&#39;,
            constrain: true,
            fromDate: new Date(&#39;1/1/11&#39;),
            toDate: new Date(&#39;1/7/11&#39;)
            }]
            In this example we&#39;re creating a time axis that has as title Day.
            The field the axis is bound to is date.
            The date format to use to display the text for the axis labels is M d
            which is a three letter month abbreviation followed by the day number.
            The time axis will show values for dates between fromDate and toDate.
            Since constrain is set to true all other values for other dates not between
            the fromDate and toDate will not be displayed.
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.aggregateOp">
            <summary>
            Aggregation operation when grouping. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.calculateByLabelSize">
            <summary>
            The minimum value drawn by the axis. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.constrain">
            <summary>
            If true, the values of the chart will be rendered only if they belong between the fromDate and toDate. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.dateFormat">
            <summary>
            Indicates the format the date will be rendered on. ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.step">
            <summary>
            An array with two components: The first is the unit of the step (day, month, year, etc). ...
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Time.timeUnit">
            <summary>
            Indicates the time unit to use for each step. ...
            </summary>
        </member>
        <member name="T:Ext.util.Memento">
            <summary>
            This class manages a set of captured properties from an object. These captured properties
            can later be restored to an object.
            </summary>
        </member>
        <member name="M:Ext.util.Memento.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new memento and optionally captures properties from the target object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Memento.capture(System.Object,System.Object)">
            <summary>
            Captures the specified properties from the target object in this memento. ...
            </summary>
        </member>
        <member name="M:Ext.util.Memento.remove(System.Object)">
            <summary>
            Removes the specified properties from this memento. ...
            </summary>
        </member>
        <member name="M:Ext.util.Memento.restore(System.Object,System.Boolean,System.Object)">
            <summary>
            Restores the specified properties from this memento to the target object. ...
            </summary>
        </member>
        <member name="M:Ext.util.Memento.restoreAll(System.Boolean,System.Object)">
            <summary>
            Restores all captured properties in this memento to the target object. ...
            </summary>
        </member>
        <member name="T:Ext.util.Filter">
            <summary>
            Represents a filter that can be applied to a MixedCollection. Can either simply
            filter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the context
            of MixedCollections, though Stores frequently create them when filtering and searching on their
            records. Example usage: //set up a fictional MixedCollection containing a few people to filter on
            var allNames = new Ext.util.MixedCollection();
            allNames.addAll([
            {id: 1, name: &#39;Ed&#39;,    age: 25},
            {id: 2, name: &#39;Jamie&#39;, age: 37},
            {id: 3, name: &#39;Abe&#39;,   age: 32},
            {id: 4, name: &#39;Aaron&#39;, age: 26},
            {id: 5, name: &#39;David&#39;, age: 32}
            ]);
            var ageFilter = new Ext.util.Filter({
            property: &#39;age&#39;,
            value   : 32
            });
            var longNameFilter = new Ext.util.Filter({
            filterFn: function(item) {
            return item.name.length &gt; 4;
            }
            });
            //a new MixedCollection with the 3 names longer than 4 characters
            var longNames = allNames.filter(longNameFilter);
            //a new MixedCollection with the 2 people of age 24:
            var youngFolk = allNames.filter(ageFilter);
            </summary>
        </member>
        <member name="M:Ext.util.Filter.#ctor(System.Object)">
            <summary>
            Creates new Filter. ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.anyMatch">
            <summary>
            True to allow any match - no regex start/end line anchors will be added. ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.caseSensitive">
            <summary>
            True to make the regex case sensitive (adds 'i' switch to regex). ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.exactMatch">
            <summary>
            True to force exact match (^ and $ characters added to the regex). ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.filterFn">
            <summary>
            A custom filter function which is passed each item in the Ext.util.MixedCollection
            in turn. ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.property">
            <summary>
            The property to filter on. ...
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.root">
            <summary>
            Optional root property. ...
            </summary>
        </member>
        <member name="T:Ext.util.CSS">
            <summary>
            Utility class for manipulating CSS rules
            </summary>
        </member>
        <member name="M:Ext.util.CSS.createStyleSheet(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Creates a stylesheet from a text blob of rules. ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.getRule(System.Object,System.Boolean)">
            <summary>
            Gets an an individual CSS rule by selector(s) ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.getRules(System.Boolean)">
            <summary>
            Gets all css rules for the document ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.refreshCache">
            <summary>
            Refresh the rule cache if you have dynamically added stylesheets ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.removeStyleSheet(SharpKit.JavaScript.JsString)">
            <summary>
            Removes a style or link tag by id ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.swapStyleSheet(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Dynamically swaps an existing stylesheet reference for a new one ...
            </summary>
        </member>
        <member name="M:Ext.util.CSS.updateRule(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Updates a rule property ...
            </summary>
        </member>
        <member name="T:Ext.toolbar.Toolbar">
            <summary>
            Basic Toolbar class. Although the defaultType for Toolbar is button, Toolbar
            elements (child items for the Toolbar container) may be virtually any type of Component. Toolbar elements can be created explicitly via their
            constructors, or implicitly via their xtypes, and can be added dynamically. Some items have shortcut strings for creation:      Shortcut   xtype           Class                           Description                                               -&amp;gt;   tbspacer   Ext.toolbar.Fill   begin using the right-justified button container   |     -   tbseparator   Ext.toolbar.Separator   add a vertical separator bar between toolbar items |        tbspacer   Ext.toolbar.Spacer   add horiztonal space between elements              |
            Example usage: Ext.create(&#39;Ext.toolbar.Toolbar&#39;, {
            renderTo: document.body,
            width   : 500,
            items: [
            {
            // xtype: &#39;button&#39;, // default for Toolbars
            text: &#39;Button&#39;
            },
            {
            xtype: &#39;splitbutton&#39;,
            text : &#39;Split Button&#39;
            },
            // begin using the right-justified button container
            &#39;-&amp;gt;&#39;, // same as {xtype: &#39;tbfill&#39;}, // Ext.toolbar.Fill
            {
            xtype    : &#39;textfield&#39;,
            name     : &#39;field1&#39;,
            emptyText: &#39;enter search term&#39;
            },
            // add a vertical separator bar between toolbar items
            &#39;-&#39;, // same as {xtype: &#39;tbseparator&#39;} to create Ext.toolbar.Separator
            &#39;text 1&#39;, // same as {xtype: &#39;tbtext&#39;, text: &#39;text1&#39;} to create Ext.toolbar.TextItem
            {xtype: &#39;tbspacer&#39;},// same as &#39; &#39; to create Ext.toolbar.Spacer
            &#39;text 2&#39;,
            {xtype: &#39;tbspacer&#39;, width: 50}, // add a 50px space
            &#39;text 3&#39;
            ]
            });
            Toolbars have enable and disable methods which when called, will enable/disable all items within your toolbar.
            Example usage: Ext.create(&#39;Ext.toolbar.Toolbar&#39;, {
            renderTo: document.body,
            width   : 400,
            items: [
            {
            text: &#39;Button&#39;
            },
            {
            xtype: &#39;splitbutton&#39;,
            text : &#39;Split Button&#39;
            },
            &#39;-&amp;gt;&#39;,
            {
            xtype    : &#39;textfield&#39;,
            name     : &#39;field1&#39;,
            emptyText: &#39;enter search term&#39;
            }
            ]
            });
            Example usage: var enableBtn = Ext.create(&#39;Ext.button.Button&#39;, {
            text    : &#39;Enable All Items&#39;,
            disabled: true,
            scope   : this,
            handler : function() {
            //disable the enable button and enable the disable button
            enableBtn.disable();
            disableBtn.enable();
            //enable the toolbar
            toolbar.enable();
            }
            });
            var disableBtn = Ext.create(&#39;Ext.button.Button&#39;, {
            text    : &#39;Disable All Items&#39;,
            scope   : this,
            handler : function() {
            //enable the enable button and disable button
            disableBtn.disable();
            enableBtn.enable();
            //disable the toolbar
            toolbar.disable();
            }
            });
            var toolbar = Ext.create(&#39;Ext.toolbar.Toolbar&#39;, {
            renderTo: document.body,
            width   : 400,
            margin  : &#39;5 0 0 0&#39;,
            items   : [enableBtn, disableBtn]
            });
            Adding items to and removing items from a toolbar is as simple as calling the add and remove methods. There is also a removeAll method
            which remove all items within the toolbar.
            Example usage: var toolbar = Ext.create(&#39;Ext.toolbar.Toolbar&#39;, {
            renderTo: document.body,
            width   : 700,
            items: [
            {
            text: &#39;Example Button&#39;
            }
            ]
            });
            var addedItems = [];
            Ext.create(&#39;Ext.toolbar.Toolbar&#39;, {
            renderTo: document.body,
            width   : 700,
            margin  : &#39;5 0 0 0&#39;,
            items   : [
            {
            text   : &#39;Add a button&#39;,
            scope  : this,
            handler: function() {
            var text = prompt(&#39;Please enter the text for your button:&#39;);
            addedItems.push(toolbar.add({
            text: text
            }));
            }
            },
            {
            text   : &#39;Add a text item&#39;,
            scope  : this,
            handler: function() {
            var text = prompt(&#39;Please enter the text for your item:&#39;);
            addedItems.push(toolbar.add(text));
            }
            },
            {
            text   : &#39;Add a toolbar seperator&#39;,
            scope  : this,
            handler: function() {
            addedItems.push(toolbar.add(&#39;-&#39;));
            }
            },
            {
            text   : &#39;Add a toolbar spacer&#39;,
            scope  : this,
            handler: function() {
            addedItems.push(toolbar.add(&#39;-&amp;gt;&#39;));
            }
            },
            &#39;-&amp;gt;&#39;,
            {
            text   : &#39;Remove last inserted item&#39;,
            scope  : this,
            handler: function() {
            if (addedItems.length) {
            toolbar.remove(addedItems.pop());
            } else if (toolbar.items.length) {
            toolbar.remove(toolbar.items.last());
            } else {
            alert(&#39;No items in the toolbar&#39;);
            }
            }
            },
            {
            text   : &#39;Remove all items&#39;,
            scope  : this,
            handler: function() {
            toolbar.removeAll();
            }
            }
            ]
            });
            </summary>
        </member>
        <member name="M:Ext.toolbar.Toolbar.#ctor(System.Object)">
            <summary>
            Creates a new Toolbar ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Toolbar.add(System.Object,System.Object,System.Object)">
            <summary>
            Adds element(s) to the toolbar -- this function takes a variable number of
            arguments of mixed type and adds them to t...
            </summary>
        </member>
        <member name="P:Ext.toolbar.ToolbarConfig.enableOverflow">
            <summary>
            Defaults to false. ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.ToolbarConfig.layout">
            <summary>
            This class assigns a default layout (layout:'hbox'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.ToolbarConfig.vertical">
            <summary>
            Set to true to make the toolbar vertical. ...
            </summary>
        </member>
        <member name="F:Ext.toolbar.ToolbarEvents.overflowchange">
            <summary>
            Fires after the overflow state has changed. ...
            </summary>
        </member>
        <member name="T:Ext.toolbar.Separator">
            <summary>
            A simple class that adds a vertical separator bar between toolbar items
            (css class:&#39;x-toolbar-separator&#39;).  Example Ext.create(&#39;Ext.panel.Panel&#39;, {
            title: &#39;Toolbar Seperator Example&#39;,
            width: 300,
            height: 200,
            tbar : [
            &#39;Item 1&#39;,
            {xtype: &#39;tbseparator&#39;}, // or &#39;-&#39;
            &#39;Item 2&#39;
            ],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="T:Ext.state.CookieProvider">
            <summary>
            A Provider implementation which saves and retrieves state via cookies.
            The CookieProvider supports the usual cookie options, such as:  path expires domain secure     var cp = new Ext.state.CookieProvider({
            path: &quot;/cgi-bin/&quot;,
            expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
            domain: &quot;sencha.com&quot;
            });
            Ext.state.Manager.setProvider(cp);
            </summary>
        </member>
        <member name="M:Ext.state.CookieProvider.#ctor(System.Object)">
            <summary>
            Creates a new CookieProvider. ...
            </summary>
        </member>
        <member name="P:Ext.state.CookieProviderConfig.domain">
            <summary>
            The domain to save the cookie for. ...
            </summary>
        </member>
        <member name="T:Ext.menu.Manager">
            <summary>
            Provides a common registry of all menus on a page.
            </summary>
        </member>
        <member name="M:Ext.menu.Manager.get(System.Object)">
            <summary>
            Returns a Ext.menu.Menu object ...
            </summary>
        </member>
        <member name="M:Ext.menu.Manager.hideAll">
            <summary>
            Hides all menus that are currently visible ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.CheckboxGroup">
            <summary>
            This layout implements the column arrangement for Ext.form.CheckboxGroup and Ext.form.RadioGroup.
            It groups the component&#39;s sub-items into columns based on the component&#39;s
            columns and Ext.form.CheckboxGroup.vertical config properties.
            </summary>
        </member>
        <member name="T:Ext.JSON">
            <summary>
            Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t
            mess with the Object prototype
            http://www.json.org/js.html
            </summary>
        </member>
        <member name="M:Ext.JSON.decode(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Decodes (parses) a JSON string to an object. ...
            </summary>
        </member>
        <member name="M:Ext.JSON.encode(System.Object)">
            <summary>
            Encodes an Object, Array or other value ...
            </summary>
        </member>
        <member name="M:Ext.JSON.encodeDate(SharpKit.JavaScript.JsDate)">
            <summary>
            Encodes a Date. ...
            </summary>
        </member>
        <member name="T:Ext.grid.column.Number">
            <summary>
            A Column definition class which renders a numeric data field according to a format string.  Code Ext.create(&#39;Ext.data.Store&#39;, {
            storeId:&#39;sampleStore&#39;,
            fields:[
            {name: &#39;symbol&#39;, type: &#39;string&#39;},
            {name: &#39;price&#39;, type: &#39;number&#39;},
            {name: &#39;change&#39;, type: &#39;number&#39;},
            {name: &#39;volume&#39;, type: &#39;number&#39;},
            ],
            data:[
            {symbol:&quot;msft&quot;, price:25.76, change:2.43, volume:61606325},
            {symbol:&quot;goog&quot;, price:525.73, change:0.81, volume:3053782},
            {symbol:&quot;apple&quot;, price:342.41, change:1.35, volume:24484858},
            {symbol:&quot;sencha&quot;, price:142.08, change:8.85, volume:5556351}
            ]
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Number Column Demo&#39;,
            store: Ext.data.StoreManager.lookup(&#39;sampleStore&#39;),
            columns: [
            {text: &#39;Symbol&#39;,  dataIndex: &#39;symbol&#39;, flex: 1},
            {text: &#39;Current Price&#39;,  dataIndex: &#39;price&#39;, renderer: Ext.util.Format.usMoney},
            {text: &#39;Change&#39;,  dataIndex: &#39;change&#39;, xtype: &#39;numbercolumn&#39;, format:&#39;0.00&#39;},
            {text: &#39;Volume&#39;,  dataIndex: &#39;volume&#39;, xtype: &#39;numbercolumn&#39;, format:&#39;0,000&#39;}
            ],
            height: 200,
            width: 400,
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="P:Ext.grid.column.NumberConfig.format">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column
            (defaults to '0,000.0...
            </summary>
        </member>
        <member name="T:Ext.fx.Easing">
            <summary>
            This class contains a series of function definitions used to modify values during an animation.
            They describe how the intermediate values used during a transition will be calculated. It allows for a transition to change
            speed over its duration. The following options are available:  linear The default easing type backIn backOut bounceIn bounceOut ease easeIn easeOut easeInOut elasticIn elasticOut cubic-bezier(x1, y1, x2, y2)  Note that cubic-bezier will create a custom easing curve following the CSS3 transition-timing-function
            specification.  The four values specify points P1 and P2 of the curve as (x1, y1, x2, y2). All values must
            be in the range [0, 1] or the definition is invalid.
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.activeError">
            <summary>
            If specified, then the component will be displayed with this value as its active error when
            first rendered. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.activeErrorsTpl">
            <summary>
            The template used to format the Array of error messages passed to setActiveErrors
            into a single HTML string. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.autoFitErrors">
            <summary>
            Whether to adjust the component's body area to make room for 'side' or 'under'
            error messages. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.baseBodyCls">
            <summary>
            The CSS class to be applied to the body content element. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.clearCls">
            <summary>
            The CSS class to be applied to the special clearing div rendered directly after the field
            contents wrapper to provide...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.errorMsgCls">
            <summary>
            The CSS class to be applied to the error message element. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.fieldBodyCls">
            <summary>
            An extra CSS class to be applied to the body content element in addition to fieldBodyCls. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.fieldLabel">
            <summary>
            The label for the field. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.formItemCls">
            <summary>
            A CSS class to be applied to the outermost element to denote that it is participating in the form
            field layout. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.hideEmptyLabel">
            <summary>
            When set to true, the label element (fieldLabel and labelSeparator) will be
            automatically hidden if the fieldLabel is...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.hideLabel">
            <summary>
            Set to true to completely hide the label element (fieldLabel and labelSeparator). ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelAlign">
            <summary>
            Controls the position and alignment of the fieldLabel. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelCls">
            <summary>
            The CSS class to be applied to the label element. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelPad">
            <summary>
            The amount of space in pixels between the fieldLabel and the input field. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelWidth">
            <summary>
            The width of the fieldLabel in pixels. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.labelableRenderTpl">
            <summary>
            The rendering template for the field decorations. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.msgTarget">
            <summary>
            The location where the error message text should display. ...
            </summary>
        </member>
        <member name="P:Ext.form.LabelableConfig.preventMark">
            <summary>
            true to disable displaying any error message set on this object. ...
            </summary>
        </member>
        <member name="F:Ext.form.LabelableEvents.errorchange">
            <summary>
            Fires when the active error message is changed via setActiveError. ...
            </summary>
        </member>
        <member name="T:Ext.data.NodeInterface">
            <summary>
            This class is meant to be used as a set of methods that are applied to the prototype of a
            Record to decorate it with a Node API. This means that models used in conjunction with a tree
            will have all of the tree related methods available on the model. In general this class will
            not be used directly by the developer.
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.appendChild(System.Object,System.Object,System.Object)">
            <summary>
            Insert node(s) as the last child node of this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.bubble(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Bubbles up the tree from this node, calling the specified function with each node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.cascadeBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cascades down the tree from this node, calling the specified function with each node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.collapse(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Collapse this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.collapseChildren(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Collapse all the children of this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.contains(Ext.Unknown.Node)">
            <summary>
            Returns true if this node is an ancestor (at any point) of the passed node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.copy(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Creates a copy (clone) of this Node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.createNode(System.Object)">
            <summary>
            Ensures that the passed object is an instance of a Record with the NodeInterface applied ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.destroy(System.Object)">
            <summary>
            Destroys the node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.eachChild(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Interates the child nodes of this node, calling the specified function with each node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.expand(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.expandChildren(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand all the children of this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.findChild(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Finds the first child that has the attribute with the specified value. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.getChildAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the child node at the specified index. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.getDepth">
            <summary>
            Returns depth of this node (the root node has a depth of 0) ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.hasChildNodes">
            <summary>
            Returns true if this node has one or more child nodes, else false. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.indexOf(Ext.Unknown.Node)">
            <summary>
            Returns the index of a child node ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.insertBefore(Ext.Unknown.Node,Ext.Unknown.Node,System.Object)">
            <summary>
            Inserts the first node before the second node in this nodes childNodes collection. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.insertChild(SharpKit.JavaScript.JsNumber,Ext.data.Model)">
            <summary>
            Insert a node into this node ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isAncestor(Ext.Unknown.Node)">
            <summary>
            Returns true if the passed node is an ancestor (at any point) of this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isExpandable">
            <summary>
            Returns true if this node has one or more child nodes, or if the expandable
            node attribute is explicitly specified as...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isExpanded">
            <summary>
            Returns true if this node is expaned ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isFirst">
            <summary>
            Returns true if this node is the first child of its parent ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isLast">
            <summary>
            Returns true if this node is the last child of its parent ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isLeaf">
            <summary>
            Returns true if this node is a leaf ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isLoaded">
            <summary>
            Returns true if this node is loaded ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isLoading">
            <summary>
            Returns true if this node is loading ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isRoot">
            <summary>
            Returns true if this node is the root node ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.isVisible">
            <summary>
            Returns true if this node is visible ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.remove(System.Boolean,System.Object)">
            <summary>
            Removes this node from its parent ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.removeAll(System.Boolean,System.Object)">
            <summary>
            Removes all child nodes from this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.removeChild(Ext.Unknown.Node,System.Boolean,System.Object,System.Object)">
            <summary>
            Removes a child node from this node. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.replaceChild(Ext.Unknown.Node,Ext.Unknown.Node,System.Object)">
            <summary>
            Replaces one child node in this node with another. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.sort(SharpKit.JavaScript.JsAction,System.Boolean,System.Boolean)">
            <summary>
            Sorts this nodes children using the supplied sort function. ...
            </summary>
        </member>
        <member name="M:Ext.data.NodeInterface.updateInfo(System.Object)">
            <summary>
            Updates general data of this node like isFirst, isLast, depth. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.append">
            <summary>
            Fires when a new child node is appended ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforeappend">
            <summary>
            Fires before a new child is appended, return false to cancel the append. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforecollapse">
            <summary>
            Fires before this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforeexpand">
            <summary>
            Fires before this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforeinsert">
            <summary>
            Fires before a new child is inserted, return false to cancel the insert. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforemove">
            <summary>
            Fires before this node is moved to a new location in the tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.beforeremove">
            <summary>
            Fires before a child is removed, return false to cancel the remove. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.collapse">
            <summary>
            Fires when this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.expand">
            <summary>
            Fires when this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.insert">
            <summary>
            Fires when a new child node is inserted. ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.move">
            <summary>
            Fires when this node is moved to a new location in the tree ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.remove">
            <summary>
            Fires when a child node is removed ...
            </summary>
        </member>
        <member name="F:Ext.data.NodeInterfaceEvents.sort">
            <summary>
            Fires when this node's childNodes are sorted. ...
            </summary>
        </member>
        <member name="T:Ext.data.Batch">
            <summary>
            Provides a mechanism to run one or more operations in a given order. Fires the &#39;operationcomplete&#39; event
            after the completion of each Operation, and the &#39;complete&#39; event when all Operations have been successfully executed. Fires an &#39;exception&#39;
            event if any of the Operations encounter an exception. Usually these are only used internally by Ext.data.proxy.Proxy classes
            </summary>
        </member>
        <member name="M:Ext.data.Batch.#ctor(System.Object)">
            <summary>
            Creates new Batch object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.add(System.Object)">
            <summary>
            Adds a new operation to this batch ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.pause">
            <summary>
            Pauses execution of the batch, but does not cancel the current operation ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.runOperation(SharpKit.JavaScript.JsNumber)">
            <summary>
            Executes a operation by its numeric index ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.start">
            <summary>
            Kicks off the execution of the batch, continuing from the next operation if the previous
            operation encountered an exc...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.Batch.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.data.Batch.hasException">
            <summary>
            True if this batch has encountered an exception. ...
            </summary>
        </member>
        <member name="P:Ext.data.Batch.total">
            <summary>
            The total number of operations in this batch. ...
            </summary>
        </member>
        <member name="P:Ext.data.BatchConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.data.BatchEvents.complete">
            <summary>
            Fired when all operations of this batch have been completed ...
            </summary>
        </member>
        <member name="F:Ext.data.BatchEvents.exception">
            <summary>
            Fired when a operation encountered an exception ...
            </summary>
        </member>
        <member name="F:Ext.data.BatchEvents.operationcomplete">
            <summary>
            Fired when each operation of the batch completes ...
            </summary>
        </member>
        <member name="T:Ext.container.Viewport">
            <summary>
            A specialized container representing the viewable application area (the browser viewport). The Viewport renders itself to the document body, and automatically sizes itself to the size of
            the browser viewport and manages window resizing. There may only be one Viewport created
            in a page. Like any Container, a Viewport will only perform sizing and positioning
            on its child Components if you configure it with a layout. A Common layout used with Viewports is border layout, but if the
            required layout is simpler, a different layout should be chosen. For example, to simply make a single child item occupy all available space, use fit layout. To display one &quot;active&quot; item at full size from a choice of several child items, use card layout. Inner layouts are available by virtue of the fact that all Panels
            added to the Viewport, either through its items, or through the items, or the add
            method of any of its child Panels may themselves have a layout. The Viewport does not provide scrolling, so child Panels within the Viewport should provide
            for scrolling if needed using the autoScroll config.
            An example showing a classic application border layout: Ext.create(&#39;Ext.container.Viewport&#39;, {
            layout: &#39;border&#39;,
            renderTo: Ext.getBody(),
            items: [{
            region: &#39;north&#39;,
            html: &#39;&amp;lt;h1 class=&quot;x-panel-header&quot;&amp;gt;Page Title&amp;lt;/h1&amp;gt;&#39;,
            autoHeight: true,
            border: false,
            margins: &#39;0 0 5 0&#39;
            }, {
            region: &#39;west&#39;,
            collapsible: true,
            title: &#39;Navigation&#39;,
            width: 150
            // could use a TreePanel or AccordionLayout for navigational items
            }, {
            region: &#39;south&#39;,
            title: &#39;South Panel&#39;,
            collapsible: true,
            html: &#39;Information goes here&#39;,
            split: true,
            height: 100,
            minHeight: 100
            }, {
            region: &#39;east&#39;,
            title: &#39;East Panel&#39;,
            collapsible: true,
            split: true,
            width: 150
            }, {
            region: &#39;center&#39;,
            xtype: &#39;tabpanel&#39;, // TabPanel itself has no title
            activeTab: 0,      // First tab active by default
            items: {
            title: &#39;Default Tab&#39;,
            html: &#39;The first tab\&#39;s content. Others may be added dynamically&#39;
            }
            }]
            });
            </summary>
        </member>
        <member name="T:Ext.Class">
            <summary>
            Handles class creation throughout the whole framework. Note that most of the time Ext.define should
            be used instead, since it&#39;s a higher level wrapper that aliases to Ext.ClassManager.create
            to enable namespacing and dynamic dependency resolution. Basic syntax: Ext.define(className, properties);
            in which properties is an object represent a collection of properties that apply to the class. See
            Ext.ClassManager.create for more detailed instructions. Ext.define(&#39;Person&#39;, {
            name: &#39;Unknown&#39;,
            constructor: function(name) {
            if (name) {
            this.name = name;
            }
            return this;
            },
            eat: function(foodType) {
            alert(&quot;I&#39;m eating: &quot; + foodType);
            return this;
            }
            });
            var aaron = new Person(&quot;Aaron&quot;);
            aaron.eat(&quot;Sandwich&quot;); // alert(&quot;I&#39;m eating: Sandwich&quot;);
            Ext.Class has a powerful set of extensible pre-processors which takes care of
            everything related to class creation, including but not limited to inheritance, mixins, configuration, statics, etc. Inheritance: Ext.define(&#39;Developer&#39;, {
            extend: &#39;Person&#39;,
            constructor: function(name, isGeek) {
            this.isGeek = isGeek;
            // Apply a method from the parent class&#39; prototype
            this.callParent([name]);
            return this;
            },
            code: function(language) {
            alert(&quot;I&#39;m coding in: &quot; + language);
            this.eat(&quot;Bugs&quot;);
            return this;
            }
            });
            var jacky = new Developer(&quot;Jacky&quot;, true);
            jacky.code(&quot;JavaScript&quot;); // alert(&quot;I&#39;m coding in: JavaScript&quot;);
            // alert(&quot;I&#39;m eating: Bugs&quot;);
            See Ext.Base.callParent for more details on calling superclass&#39; methods Mixins: Ext.define(&#39;CanPlayGuitar&#39;, {
            playGuitar: function() {
            alert(&quot;F#...G...D...A&quot;);
            }
            });
            Ext.define(&#39;CanComposeSongs&#39;, {
            composeSongs: function() { ... }
            });
            Ext.define(&#39;CanSing&#39;, {
            sing: function() {
            alert(&quot;I&#39;m on the highway to hell...&quot;)
            }
            });
            Ext.define(&#39;Musician&#39;, {
            extend: &#39;Person&#39;,
            mixins: {
            canPlayGuitar: &#39;CanPlayGuitar&#39;,
            canComposeSongs: &#39;CanComposeSongs&#39;,
            canSing: &#39;CanSing&#39;
            }
            })
            Ext.define(&#39;CoolPerson&#39;, {
            extend: &#39;Person&#39;,
            mixins: {
            canPlayGuitar: &#39;CanPlayGuitar&#39;,
            canSing: &#39;CanSing&#39;
            },
            sing: function() {
            alert(&quot;Ahem....&quot;);
            this.mixins.canSing.sing.call(this);
            alert(&quot;[Playing guitar at the same time...]&quot;);
            this.playGuitar();
            }
            });
            var me = new CoolPerson(&quot;Jacky&quot;);
            me.sing(); // alert(&quot;Ahem...&quot;);
            // alert(&quot;I&#39;m on the highway to hell...&quot;);
            // alert(&quot;[Playing guitar at the same time...]&quot;);
            // alert(&quot;F#...G...D...A&quot;);
            Config: Ext.define(&#39;SmartPhone&#39;, {
            config: {
            hasTouchScreen: false,
            operatingSystem: &#39;Other&#39;,
            price: 500
            },
            isExpensive: false,
            constructor: function(config) {
            this.initConfig(config);
            return this;
            },
            applyPrice: function(price) {
            this.isExpensive = (price &amp;gt; 500);
            return price;
            },
            applyOperatingSystem: function(operatingSystem) {
            if (!(/^(iOS|Android|BlackBerry)$/i).test(operatingSystem)) {
            return &#39;Other&#39;;
            }
            return operatingSystem;
            }
            });
            var iPhone = new SmartPhone({
            hasTouchScreen: true,
            operatingSystem: &#39;iOS&#39;
            });
            iPhone.getPrice(); // 500;
            iPhone.getOperatingSystem(); // &#39;iOS&#39;
            iPhone.getHasTouchScreen(); // true;
            iPhone.hasTouchScreen(); // true
            iPhone.isExpensive; // false;
            iPhone.setPrice(600);
            iPhone.getPrice(); // 600
            iPhone.isExpensive; // true;
            iPhone.setOperatingSystem(&#39;AlienOS&#39;);
            iPhone.getOperatingSystem(); // &#39;Other&#39;
            Statics: Ext.define(&#39;Computer&#39;, {
            statics: {
            factory: function(brand) {
            // &#39;this&#39; in static methods refer to the class itself
            return new this(brand);
            }
            },
            constructor: function() { ... }
            });
            var dellComputer = Computer.factory(&#39;Dell&#39;);
            Also see Ext.Base.statics and Ext.Base.self for more details on accessing
            static properties within class methods
            </summary>
        </member>
        <member name="M:Ext.Class.#ctor(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Creates new class. ...
            </summary>
        </member>
        <member name="M:Ext.Class.getDefaultPreprocessors">
            <summary>
            Retrieve the array stack of default pre-processors ...
            </summary>
        </member>
        <member name="M:Ext.Class.getPreprocessor(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieve a pre-processor callback function by its name, which has been registered before ...
            </summary>
        </member>
        <member name="M:Ext.Class.registerPreprocessor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Register a new pre-processor to be used during the class creation process registerPreprocessor ...
            </summary>
        </member>
        <member name="M:Ext.Class.setDefaultPreprocessorPosition(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Insert this pre-processor at a specific position in the stack, optionally relative to
            any existing pre-processor. ...
            </summary>
        </member>
        <member name="M:Ext.Class.setDefaultPreprocessors(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the default array stack of default pre-processors ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.alias">
            <summary>
            List of short aliases for class names. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.alternateClassName">
            <summary>
            Defines alternate names for this class. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.config">
            <summary>
            List of configuration options with their default values, for which automatically
            accessor methods are generated. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.extend">
            <summary>
            The parent class that this class extends. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.inheritableStatics">
            <summary>
            List of inheritable static methods for this class. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.mixins">
            <summary>
            List of classes to mix into this class. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.requires">
            <summary>
            List of classes that have to be loaded before instanciating this class. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.singleton">
            <summary>
            When set to true, the class will be instanciated as singleton. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.statics">
            <summary>
            List of static methods for this class. ...
            </summary>
        </member>
        <member name="P:Ext.ClassConfig.uses">
            <summary>
            List of classes to load together with this class. ...
            </summary>
        </member>
        <member name="T:Ext.util.Point">
            <summary>
            Represents a 2D point with x and y properties, useful for comparison and instantiation
            from an event: var point = Ext.util.Point.fromEvent(e);
            </summary>
        </member>
        <member name="M:Ext.util.Point.equals(System.Object)">
            <summary>
            Compare this point and another point ...
            </summary>
        </member>
        <member name="M:Ext.util.Point.isWithin(System.Object,System.Object)">
            <summary>
            Whether the given point is not away from this point within the given threshold amount. ...
            </summary>
        </member>
        <member name="M:Ext.util.Point.roundedEquals(System.Object)">
            <summary>
            Compare this point with another point when the x and y values of both points are rounded. ...
            </summary>
        </member>
        <member name="M:Ext.util.Point.toString">
            <summary>
            Returns a human-eye-friendly string that represents this point,
            useful for debugging ...
            </summary>
        </member>
        <member name="M:Ext.util.Point.translate(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translate this region by the given offset amount. ...
            </summary>
        </member>
        <member name="T:Ext.picker.Color">
            <summary>
            ColorPicker provides a simple color palette for choosing colors. The picker can be rendered to any container.
            The available default to a standard 40-color palette; this can be customized with the colors config. Typically you will need to implement a handler function to be notified when the user chooses a color from the
            picker; you can register the handler using the select event, or by implementing the handler
            method. Here&#39;s an example of typical usage: var cp = new Ext.picker.Color({
            value: &#39;993300&#39;,  // initial selected color
            renderTo: &#39;my-div&#39;
            });
            cp.on(&#39;select&#39;, function(picker, selColor){
            // do something with selColor
            });
            </summary>
        </member>
        <member name="M:Ext.picker.Color.getValue">
            <summary>
            Get the currently selected color value. ...
            </summary>
        </member>
        <member name="M:Ext.picker.Color.select(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects the specified color in the picker (fires the select event) ...
            </summary>
        </member>
        <member name="P:Ext.picker.Color.colors">
            <summary>
            An array of 6-digit color hex code strings (without the # symbol). ...
            </summary>
        </member>
        <member name="P:Ext.picker.ColorConfig.clickEvent">
            <summary>
            The DOM event that will cause a color to be selected. ...
            </summary>
        </member>
        <member name="P:Ext.picker.ColorConfig.handler">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.picker.ColorConfig.scope">
            <summary>
            The scope (this reference) in which the handler
            function will be called. ...
            </summary>
        </member>
        <member name="P:Ext.picker.ColorConfig.value">
            <summary>
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). ...
            </summary>
        </member>
        <member name="F:Ext.picker.ColorEvents.select">
            <summary>
            Fires when a color is selected ...
            </summary>
        </member>
        <member name="T:Ext.Img">
            <summary>
            Simple helper class for easily creating image components. This simply renders an image tag to the DOM
            with the configured src.  Example usage: var changingImage = Ext.create(&#39;Ext.Img&#39;, {
            src: &#39;http://www.sencha.com/img/20110215-feat-html5.png&#39;,
            renderTo: Ext.getBody()
            });
            // change the src of the image programmatically
            changingImage.setSrc(&#39;http://www.sencha.com/img/20110215-feat-perf.png&#39;);
            </summary>
        </member>
        <member name="M:Ext.Img.setSrc(System.Object)">
            <summary>
            Updates the src of the image ...
            </summary>
        </member>
        <member name="T:Ext.grid.plugin.HeaderResizer">
            <summary>
            Plugin to add header resizing functionality to a HeaderContainer.
            Always resizing header to the left of the splitter you are resizing. Todo: Consider RTL support, columns would always calculate to the right of
            the splitter instead of to the left.
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.grid.plugin.HeaderResizer.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.HeaderResizerConfig.dynamic">
            <summary>
            Set to true to resize on the fly rather than using a proxy marker. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.HeaderResizerConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="T:Ext.form.Panel">
            <summary>
            FormPanel provides a standard container for forms. It is essentially a standard Ext.panel.Panel which
            automatically creates a BasicForm for managing any Ext.form.field.Field
            objects that are added as descendants of the panel. It also includes conveniences for configuring and
            working with the BasicForm and the collection of Fields. Layout By default, FormPanel is configured with layout:&#39;anchor&#39; for
            the layout of its immediate child items. This can be changed to any of the supported container layouts.
            The layout of sub-containers is configured in the standard way. BasicForm Although not listed as configuration options of FormPanel, the FormPanel class accepts all
            of the config options supported by the Ext.form.Basic class, and will pass them along to
            the internal BasicForm when it is created. Note**: If subclassing FormPanel, any configuration options for the BasicForm must be applied to
            the initialConfig property of the FormPanel. Applying BasicForm
            configuration settings to this will not* affect the BasicForm&#39;s configuration. The following events fired by the BasicForm will be re-fired by the FormPanel and can therefore be
            listened for on the FormPanel itself:  beforeaction actionfailed actioncomplete validitychange dirtychange  Field Defaults The fieldDefaults config option conveniently allows centralized configuration of default values
            for all fields added as descendants of the FormPanel. Any config option recognized by implementations
            of Ext.form.Labelable may be included in this object. See the fieldDefaults documentation
            for details of how the defaults are applied. Form Validation With the default configuration, form fields are validated on-the-fly while the user edits their values.
            This can be controlled on a per-field basis (or via the fieldDefaults config) with the field
            config properties Ext.form.field.Field.validateOnChange and Ext.form.field.Base.checkChangeEvents,
            and the FormPanel&#39;s config properties pollForChanges and pollInterval. Any component within the FormPanel can be configured with formBind: true. This will cause that
            component to be automatically disabled when the form is invalid, and enabled when it is valid. This is most
            commonly used for Button components to prevent submitting the form in an invalid state, but can be used on
            any component type. For more information on form validation see the following:  Ext.form.field.Field.validateOnChange pollForChanges and pollInterval Ext.form.field.VTypes BasicForm.doAction clientValidation notes  Form Submission By default, Ext Forms are submitted through Ajax, using Ext.form.action.Action. See the documentation for
            Ext.form.Basic for details.
            Example usage: Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Simple Form&#39;,
            bodyPadding: 5,
            width: 350,
            // The form will submit an AJAX request to this URL when submitted
            url: &#39;save-form.php&#39;,
            // Fields will be arranged vertically, stretched to full width
            layout: &#39;anchor&#39;,
            defaults: {
            anchor: &#39;100%&#39;
            },
            // The fields
            defaultType: &#39;textfield&#39;,
            items: [{
            fieldLabel: &#39;First Name&#39;,
            name: &#39;first&#39;,
            allowBlank: false
            },{
            fieldLabel: &#39;Last Name&#39;,
            name: &#39;last&#39;,
            allowBlank: false
            }],
            // Reset and Submit buttons
            buttons: [{
            text: &#39;Reset&#39;,
            handler: function() {
            this.up(&#39;form&#39;).getForm().reset();
            }
            }, {
            text: &#39;Submit&#39;,
            formBind: true, //only enabled once the form is valid
            disabled: true,
            handler: function() {
            var form = this.up(&#39;form&#39;).getForm();
            if (form.isValid()) {
            form.submit({
            success: function(form, action) {
            Ext.Msg.alert(&#39;Success&#39;, action.result.msg);
            },
            failure: function(form, action) {
            Ext.Msg.alert(&#39;Failed&#39;, action.result.msg);
            }
            });
            }
            }
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="M:Ext.form.Panel.checkChange">
            <summary>
            Forces each field within the form panel to
            check if its value has changed. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.getForm">
            <summary>
            Provides access to the Form which this Panel contains. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.getRecord">
            <summary>
            Returns the currently loaded Ext.data.Model instance if one was loaded via loadRecord. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.getValues">
            <summary>
            Convenience function for fetching the current value of each field in the form. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.initFieldAncestor">
            <summary>
            Initializes the FieldAncestor's state; this must be called from the initComponent method
            of any components importing ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.load(System.Object)">
            <summary>
            This is a proxy for the underlying BasicForm's Ext.form.Basic.load call. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.loadRecord(Ext.data.Model)">
            <summary>
            Loads an Ext.data.Model into this form (internally just calls Ext.form.Basic.loadRecord)
            See also trackResetOnLoad. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.onFieldAdded(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.onFieldRemoved(Ext.form.field.Field)">
            <summary>
            Called when a Ext.form.field.Field instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.onLabelableAdded(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is added to the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.onLabelableRemoved(Ext.form.Labelable)">
            <summary>
            Called when a Ext.form.Labelable instance is removed from the container's subtree. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.startPolling(SharpKit.JavaScript.JsNumber)">
            <summary>
            Start an interval task to continuously poll all the fields in the form for changes in their
            values. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.stopPolling">
            <summary>
            Stop a running interval task that was started by startPolling. ...
            </summary>
        </member>
        <member name="M:Ext.form.Panel.submit(System.Object)">
            <summary>
            This is a proxy for the underlying BasicForm's Ext.form.Basic.submit call. ...
            </summary>
        </member>
        <member name="P:Ext.form.PanelConfig.fieldDefaults">
            <summary>
            If specified, the properties in this object are used as default config values for each
            Ext.form.Labelable instance (e.g. ...
            </summary>
        </member>
        <member name="P:Ext.form.PanelConfig.layout">
            <summary>
            The Ext.container.Container.layout for the form panel's immediate child items. ...
            </summary>
        </member>
        <member name="P:Ext.form.PanelConfig.pollForChanges">
            <summary>
            If set to true, sets up an interval task (using the pollInterval) in which the
            panel's fields are repeatedly checked ...
            </summary>
        </member>
        <member name="P:Ext.form.PanelConfig.pollInterval">
            <summary>
            Interval in milliseconds at which the form's fields are checked for value changes. ...
            </summary>
        </member>
        <member name="F:Ext.form.PanelEvents.fielderrorchange">
            <summary>
            Fires when the active error message is changed for any one of the Ext.form.Labelable
            instances within this container. ...
            </summary>
        </member>
        <member name="T:Ext.Editor">
            <summary>
            The Editor class is used to provide inline editing for elements on the page. The editor
            is backed by a Ext.form.field.Field that will be displayed to edit the underlying content.
            The editor is a floating Component, when the editor is shown it is automatically aligned to
            display over the top of the bound element it is editing. The Editor contains several options
            for how to handle key presses:
            completeOnEnter cancelOnEsc swallowKeys
            It also has options for how to use the value once the editor has been activated:
            revertInvalid ignoreNoChange updateEl
            Sample usage:
            var editor = new Ext.Editor({
            updateEl: true, // update the innerHTML of the bound element when editing completes
            field: {
            xtype: &#39;textfield&#39;
            }
            });
            var el = Ext.get(&#39;my-text&#39;); // The element to &#39;edit&#39;
            editor.startEdit(el); // The value of the field will be taken as the innerHTML of the element.
            </summary>
        </member>
        <member name="M:Ext.Editor.cancelEdit(System.Boolean)">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. ...
            </summary>
        </member>
        <member name="M:Ext.Editor.completeEdit(System.Boolean)">
            <summary>
            Ends the editing process, persists the changed value to the underlying field, and hides the editor. ...
            </summary>
        </member>
        <member name="M:Ext.Editor.getValue">
            <summary>
            Gets the data value of the editor ...
            </summary>
        </member>
        <member name="M:Ext.Editor.realign(System.Boolean)">
            <summary>
            Realigns the editor to the bound field based on the current alignment config value. ...
            </summary>
        </member>
        <member name="M:Ext.Editor.setValue(System.Object)">
            <summary>
            Sets the data value of the editor ...
            </summary>
        </member>
        <member name="M:Ext.Editor.startEdit(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Starts the editing process and shows the editor. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.allowBlur">
            <summary>
            True to complete the editing process if in edit mode when the
            field is blurred. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.autoSize">
            <summary>
            True for the editor to automatically adopt the size of the underlying field. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.cancelOnEsc">
            <summary>
            True to cancel the edit when the escape key is pressed. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.completeOnEnter">
            <summary>
            True to complete the edit when the enter key is pressed. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.ignoreNoChange">
            <summary>
            True to skip the edit completion process (no save, no events fired) if the user completes an edit and
            the value has n...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.offsets">
            <summary>
            The offsets to use when aligning (see Ext.core.Element.alignTo for more details. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.parentEl">
            <summary>
            An element to render to. ...
            </summary>
        </member>
        <member name="P:Ext.EditorConfig.revertInvalid">
            <summary>
            True to automatically revert the field value and cancel the edit when the user completes an edit and the field
            valida...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.beforecomplete">
            <summary>
            Fires after a change has been made to the field, but before the change is reflected in the underlying
            field. ...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.beforestartedit">
            <summary>
            Fires when editing is initiated, but before the value changes. ...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.canceledit">
            <summary>
            Fires after editing has been canceled and the editor's value has been reset. ...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.complete">
            <summary>
            Fires after editing is complete and any changed value has been written to the underlying field. ...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.specialkey">
            <summary>
            Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. ...
            </summary>
        </member>
        <member name="F:Ext.EditorEvents.startedit">
            <summary>
            Fires when this editor is displayed ...
            </summary>
        </member>
        <member name="T:Ext.direct.PollingProvider">
            <summary>
            Provides for repetitive polling of the server at distinct intervals.
            The initial request for data originates from the client, and then is responded to by the
            server. All configurations for the PollingProvider should be generated by the server-side
            API portion of the Ext.Direct stack. An instance of PollingProvider may be created directly via the new keyword or by simply
            specifying type = &#39;polling&#39;.  For example: var pollA = new Ext.direct.PollingProvider({
            type:&#39;polling&#39;,
            url: &#39;php/pollA.php&#39;,
            });
            Ext.direct.Manager.addProvider(pollA);
            pollA.disconnect();
            Ext.direct.Manager.addProvider(
            {
            type:&#39;polling&#39;,
            url: &#39;php/pollB.php&#39;,
            id: &#39;pollB-provider&#39;
            }
            );
            var pollB = Ext.direct.Manager.getProvider(&#39;pollB-provider&#39;);
            </summary>
        </member>
        <member name="M:Ext.direct.PollingProvider.connect">
            <summary>
            Connect to the server-side and begin the polling process. ...
            </summary>
        </member>
        <member name="M:Ext.direct.PollingProvider.disconnect">
            <summary>
            Disconnect from the server-side and stop the polling process. ...
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProviderConfig.url">
            <summary>
            The url which the PollingProvider should contact with each request. ...
            </summary>
        </member>
        <member name="F:Ext.direct.PollingProviderEvents.beforepoll">
            <summary>
            Fired immediately before a poll takes place, an event handler can return false
            in order to cancel the poll. ...
            </summary>
        </member>
        <member name="F:Ext.direct.PollingProviderEvents.poll">
            <summary>
            This event has not yet been implemented. ...
            </summary>
        </member>
        <member name="T:Ext.data.JsonP">
            <summary>
            This class is used to create JSONP requests. JSONP is a mechanism that allows for making
            requests for data cross domain. More information is available here:
            http://en.wikipedia.org/wiki/JSONP
            </summary>
        </member>
        <member name="M:Ext.data.JsonP.abort(System.Object)">
            <summary>
            Abort a request. ...
            </summary>
        </member>
        <member name="M:Ext.data.JsonP.request(System.Object)">
            <summary>
            Makes a JSONP request. ...
            </summary>
        </member>
        <member name="P:Ext.data.JsonP.callbackKey">
            <summary>
            Specifies the GET parameter that will be sent to the server containing the function name to be executed when
            the requ...
            </summary>
        </member>
        <member name="P:Ext.data.JsonP.disableCaching">
            <summary>
            True to add a unique cache-buster param to requests. ...
            </summary>
        </member>
        <member name="P:Ext.data.JsonP.disableCachingParam">
            <summary>
            Change the parameter which is sent went disabling caching through a cache buster. ...
            </summary>
        </member>
        <member name="P:Ext.data.JsonP.timeout">
            <summary>
            A default timeout for any JsonP requests. ...
            </summary>
        </member>
        <member name="T:Ext.ClassManager">
            <summary>
            Ext.ClassManager manages all classes and handles mapping from string class name to
            actual class objects throughout the whole framework. It is not generally accessed directly, rather through
            these convenient shorthands:  Ext.define Ext.create Ext.widget Ext.getClass Ext.getClassName
            </summary>
        </member>
        <member name="M:Ext.ClassManager.create(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Defines a class. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.get(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieve a class by its name. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getAliasesByName(SharpKit.JavaScript.JsString)">
            <summary>
            Get the aliases of a class by the class name ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getByAlias(SharpKit.JavaScript.JsString)">
            <summary>
            Get a reference to the class by its alias. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getClass(System.Object)">
            <summary>
            Get the class of the provided object; returns null if it's not an instance
            of any class created with Ext.define. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getDisplayName(System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getName(System.Object)">
            <summary>
            Get the name of the class by its reference or its instance. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getNameByAlias(SharpKit.JavaScript.JsString)">
            <summary>
            Get the name of a class by its alias. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getNameByAlternate(SharpKit.JavaScript.JsString)">
            <summary>
            Get the name of a class by its alternate name. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.getNamesByExpression(SharpKit.JavaScript.JsString)">
            <summary>
            Converts a string expression to an array of matching class names. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.instantiate(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Instantiate a class by either full name, alias or alternate name. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.instantiateByAlias(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Instantiate a class by its alias. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.isCreated(SharpKit.JavaScript.JsString)">
            <summary>
            Checks if a class has already been created. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.registerPostprocessor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Register a post-processor function. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets a name reference to a class. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.setAlias(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Register the alias for a class. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.setDefaultPostprocessorPosition(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Insert this post-processor at a specific position in the stack, optionally relative to
            any existing post-processor ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.setDefaultPostprocessors(System.Object)">
            <summary>
            Set the default post processors array stack which are applied to every class. ...
            </summary>
        </member>
        <member name="M:Ext.ClassManager.setNamespace(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates a namespace and assign the value to the created object
            Ext.ClassManager.setNamespace('MyCompany.pkg.Example'...
            </summary>
        </member>
        <member name="T:Ext.chart.series.Pie">
            <summary>
            Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different
            categories that also have a meaning as a whole.
            As with all other series, the Pie Series must be appended in the series Chart array configuration. See the Chart
            documentation for more information. A typical configuration object for the pie series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            store: store,
            theme: &#39;Base:gradients&#39;,
            series: [{
            type: &#39;pie&#39;,
            field: &#39;data1&#39;,
            showInLegend: true,
            tips: {
            trackMouse: true,
            width: 140,
            height: 28,
            renderer: function(storeItem, item) {
            //calculate and display percentage on hover
            var total = 0;
            store.each(function(rec) {
            total += rec.get(&#39;data1&#39;);
            });
            this.setTitle(storeItem.get(&#39;name&#39;) + &#39;: &#39; + Math.round(storeItem.get(&#39;data1&#39;) / total * 100) + &#39;%&#39;);
            }
            },
            highlight: {
            segment: {
            margin: 20
            }
            },
            label: {
            field: &#39;name&#39;,
            display: &#39;rotate&#39;,
            contrast: true,
            font: &#39;18px Arial&#39;
            }
            }]
            });
            In this configuration we set pie as the type for the series, set an object with specific style properties for highlighting options
            (triggered when hovering elements). We also set true to showInLegend so all the pie slices can be represented by a legend item.
            We set data1 as the value of the field to determine the angle span for each pie slice. We also set a label configuration object
            where we set the field name of the store field to be renderer as text for the label. The labels will also be displayed rotated.
            We set contrast to true to flip the color of the label if it is to similar to the background color. Finally, we set the font family
            and size through the font parameter.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Pie.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Pie.getLegendColor(System.Object)">
            <summary>
            Returns the color of the series (to be displayed as color for the series legend item). ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Pie.highlightItem(System.Object)">
            <summary>
            Highlight the specified item. ...
            </summary>
        </member>
        <member name="M:Ext.chart.series.Pie.unHighlightItem(System.Object)">
            <summary>
            un-highlights the specified item. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.PieConfig.angleField">
            <summary>
            The store record field name to be used for the pie angles. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.PieConfig.donut">
            <summary>
            Whether to set the pie chart as donut chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.PieConfig.lengthField">
            <summary>
            The store record field name to be used for the pie slice lengths. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.PieConfig.showInLegend">
            <summary>
            Whether to add the pie chart elements as legend items. ...
            </summary>
        </member>
        <member name="T:Ext.chart.Legend">
            <summary>
            Defines a legend for a chart&#39;s series.
            The &#39;chart&#39; member must be set prior to rendering.
            The legend class displays a list of legend items each of them related with a
            series being rendered. In order to render the legend item of the proper series
            the series configuration object must have showInSeries set to true. The legend configuration object accepts a position as parameter.
            The position parameter can be left, right top or bottom. For example: legend: {
            position: &#39;right&#39;
            },
            Full example:     var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            store: store,
            shadow: true,
            theme: &#39;Category1&#39;,
            legend: {
            position: &#39;top&#39;
            },
            axes: [{
            type: &#39;Numeric&#39;,
            grid: true,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            title: &#39;Sample Values&#39;,
            grid: {
            odd: {
            opacity: 1,
            fill: &#39;#ddd&#39;,
            stroke: &#39;#bbb&#39;,
            &#39;stroke-width&#39;: 1
            }
            },
            minimum: 0,
            adjustMinimumByMajorUnit: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;,
            grid: true,
            label: {
            rotate: {
            degrees: 315
            }
            }
            }],
            series: [{
            type: &#39;area&#39;,
            highlight: false,
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            style: {
            opacity: 0.93
            }
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.chart.Legend.#ctor(System.Object)">
            <summary>
            Creates new Legend. ...
            </summary>
        </member>
        <member name="P:Ext.chart.Legend.isVertical">
            <summary>
            Whether the legend box is oriented vertically, i.e. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LegendConfig.boxZIndex">
            <summary>
            Sets the z-index for the legend. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LegendConfig.position">
            <summary>
            The position of the legend in relation to the chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LegendConfig.x">
            <summary>
            X-position of the legend box. ...
            </summary>
        </member>
        <member name="P:Ext.chart.LegendConfig.y">
            <summary>
            Y-position of the legend box. ...
            </summary>
        </member>
        <member name="T:Ext.button.Cycle">
            <summary>
            A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements.  The button automatically
            cycles through each menu item on click, raising the button&#39;s change event (or calling the button&#39;s
            changeHandler function, if supplied) for the active menu item. Clicking on the arrow section of the
            button displays the dropdown menu just like a normal SplitButton.
            Example usage: Ext.create(&#39;Ext.button.Cycle&#39;, {
            showText: true,
            prependText: &#39;View as &#39;,
            renderTo: Ext.getBody(),
            menu: {
            id: &#39;view-type-menu&#39;,
            items: [{
            text:&#39;text only&#39;,
            iconCls:&#39;view-text&#39;,
            checked:true
            },{
            text:&#39;HTML&#39;,
            iconCls:&#39;view-html&#39;
            }]
            },
            changeHandler:function(cycleBtn, activeItem){
            Ext.Msg.alert(&#39;Change View&#39;, activeItem.text);
            }
            });
            </summary>
        </member>
        <member name="M:Ext.button.Cycle.getActiveItem">
            <summary>
            Gets the currently active menu item. ...
            </summary>
        </member>
        <member name="M:Ext.button.Cycle.setActiveItem(Ext.menu.CheckItem,System.Boolean)">
            <summary>
            Sets the button's active menu item. ...
            </summary>
        </member>
        <member name="M:Ext.button.Cycle.toggleSelected">
            <summary>
            This is normally called internally on button click, but can be called externally to advance the button's
            active item ...
            </summary>
        </member>
        <member name="P:Ext.button.CycleConfig.changeHandler">
            <summary>
            A callback function that will be invoked each time the active menu
            item in the button's menu has changed. ...
            </summary>
        </member>
        <member name="P:Ext.button.CycleConfig.forceIcon">
            <summary>
            A css class which sets an image to be used as the static icon for this button. ...
            </summary>
        </member>
        <member name="P:Ext.button.CycleConfig.items">
            <summary>
            Deprecated as of 4.0. ...
            </summary>
        </member>
        <member name="P:Ext.button.CycleConfig.prependText">
            <summary>
            A static string to prepend before the active item's text when displayed as the
            button's text (only applies when showT...
            </summary>
        </member>
        <member name="P:Ext.button.CycleConfig.showText">
            <summary>
            True to display the active item's text as the button text (defaults to false). ...
            </summary>
        </member>
        <member name="F:Ext.button.CycleEvents.change">
            <summary>
            Fires after the button's active menu item has changed. ...
            </summary>
        </member>
        <member name="T:Ext.toolbar.Paging">
            <summary>
            As the amount of records increases, the time required for the browser to render
            them increases. Paging is used to reduce the amount of data exchanged with the client.
            Note: if there are more records/rows than can be viewed in the available screen area, vertical
            scrollbars will be added. Paging is typically handled on the server side (see exception below). The client sends
            parameters to the server side, which the server needs to interpret and then respond with the
            appropriate data. Ext.toolbar.Paging is a specialized toolbar that is bound to a Ext.data.Store
            and provides automatic paging control. This Component loads blocks
            of data into the store by passing paramNames used for
            paging criteria.  PagingToolbar is typically used as one of the Grid&#39;s toolbars:    var itemsPerPage = 2;   // set the number of items you want per page
            var store = Ext.create(&#39;Ext.data.Store&#39;, {
            id:&#39;simpsonsStore&#39;,
            autoLoad: false,
            fields:[&#39;name&#39;, &#39;email&#39;, &#39;phone&#39;],
            pageSize: itemsPerPage, // items per page
            proxy: {
            type: &#39;ajax&#39;,
            url: &#39;pagingstore.js&#39;,  // url that will load data with respect to start and limit params
            reader: {
            type: &#39;json&#39;,
            root: &#39;items&#39;,
            totalProperty: &#39;total&#39;
            }
            }
            });
            // specify segment of data you want to load using params
            store.load({
            params:{
            start:0,
            limit: itemsPerPage
            }
            });
            Ext.create(&#39;Ext.grid.Panel&#39;, {
            title: &#39;Simpsons&#39;,
            store: store,
            columns: [
            {header: &#39;Name&#39;,  dataIndex: &#39;name&#39;},
            {header: &#39;Email&#39;, dataIndex: &#39;email&#39;, flex:1},
            {header: &#39;Phone&#39;, dataIndex: &#39;phone&#39;}
            ],
            width: 400,
            height: 125,
            dockedItems: [{
            xtype: &#39;pagingtoolbar&#39;,
            store: store,   // same store GridPanel is using
            dock: &#39;bottom&#39;,
            displayInfo: true
            }],
            renderTo: Ext.getBody()
            });
            To use paging, pass the paging requirements to the server when the store is first loaded. store.load({
            params: {
            // specify params for the first page load if using paging
            start: 0,
            limit: myPageSize,
            // other params
            foo:   &#39;bar&#39;
            }
            });
            If using store&#39;s autoLoad configuration: var myStore = new Ext.data.Store({
            autoLoad: {start: 0, limit: 25},
            ...
            });
            The packet sent back from the server would have this form: {
            &quot;success&quot;: true,
            &quot;results&quot;: 2000,
            &quot;rows&quot;: [ // *Note: this must be an Array
            { &quot;id&quot;:  1, &quot;name&quot;: &quot;Bill&quot;, &quot;occupation&quot;: &quot;Gardener&quot; },
            { &quot;id&quot;:  2, &quot;name&quot;:  &quot;Ben&quot;, &quot;occupation&quot;: &quot;Horticulturalist&quot; },
            ...
            { &quot;id&quot;: 25, &quot;name&quot;:  &quot;Sue&quot;, &quot;occupation&quot;: &quot;Botanist&quot; }
            ]
            }
            Paging with Local Data Paging can also be accomplished with local data using extensions:  Ext.ux.data.PagingStore Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.bind(Ext.data.Store)">
            <summary>
            Binds the paging toolbar to the specified Ext.data.Store (deprecated) ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.bindStore(Ext.data.Store,System.Boolean)">
            <summary>
            Binds the paging toolbar to the specified Ext.data.Store ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.doRefresh">
            <summary>
            Refresh the current page, has the same effect as clicking the 'refresh' button. ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.moveFirst">
            <summary>
            Move to the first page, has the same effect as clicking the 'first' button. ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.moveLast">
            <summary>
            Move to the last page, has the same effect as clicking the 'last' button. ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.moveNext">
            <summary>
            Move to the next page, has the same effect as clicking the 'next' button. ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.movePrevious">
            <summary>
            Move to the previous page, has the same effect as clicking the 'previous' button. ...
            </summary>
        </member>
        <member name="M:Ext.toolbar.Paging.unbind(Ext.data.Store)">
            <summary>
            Unbinds the paging toolbar from the specified Ext.data.Store (deprecated) ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.afterPageText">
            <summary>
            Customizable piece of the default paging text (defaults to 'of {0}'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.displayMsg">
            <summary>
            The paging status message to display (defaults to 'Displaying {0} - {1} of {2}'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.firstText">
            <summary>
            The quicktip text displayed for the first page button (defaults to 'First Page'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.lastText">
            <summary>
            The quicktip text displayed for the last page button (defaults to 'Last Page'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.nextText">
            <summary>
            The quicktip text displayed for the next page button (defaults to 'Next Page'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.prependButtons">
            <summary>
            true to insert any configured items before the paging buttons. ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.prevText">
            <summary>
            The quicktip text displayed for the previous page button (defaults to 'Previous Page'). ...
            </summary>
        </member>
        <member name="P:Ext.toolbar.PagingConfig.refreshText">
            <summary>
            The quicktip text displayed for the Refresh button (defaults to 'Refresh'). ...
            </summary>
        </member>
        <member name="F:Ext.toolbar.PagingEvents.beforechange">
            <summary>
            Fires just before the active page is changed. ...
            </summary>
        </member>
        <member name="F:Ext.toolbar.PagingEvents.change">
            <summary>
            Fires after the active page has been changed. ...
            </summary>
        </member>
        <member name="T:Ext.tip.QuickTipManager">
            <summary>
            Provides attractive and customizable tooltips for any element. The QuickTips
            singleton is used to configure and manage tooltips globally for multiple elements
            in a generic manner.  To create individual tooltips with maximum customizability,
            you should consider either Ext.tip.Tip or Ext.tip.ToolTip. Quicktips can be configured via tag attributes directly in markup, or by
            registering quick tips programmatically via the register method. The singleton&#39;s instance of Ext.tip.QuickTip is available via
            getQuickTip, and supports all the methods, and all the all the
            configuration properties of Ext.tip.QuickTip. These settings will apply to all
            tooltips shown by the singleton. Below is the summary of the configuration properties which can be used.
            For detailed descriptions see the config options for the QuickTip class QuickTips singleton configs (all are optional)  dismissDelay hideDelay maxWidth minWidth showDelay trackMouse  Target element configs (optional unless otherwise noted)  autoHide cls dismissDelay (overrides singleton value) target (required) text (required) title width  Here is an example showing how some of these config options could be used:  Code // Init the singleton.  Any tag-based quick tips will start working.
            Ext.tip.QuickTipManager.init();
            // Apply a set of config properties to the singleton
            Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
            maxWidth: 200,
            minWidth: 100,
            showDelay: 50      // Show 50ms after entering target
            });
            // Create a small panel to add a quick tip to
            Ext.create(&#39;Ext.container.Container&#39;, {
            id: &#39;quickTipContainer&#39;,
            width: 200,
            height: 150,
            style: {
            backgroundColor:&#39;#000000&#39;
            },
            renderTo: Ext.getBody()
            });
            // Manually register a quick tip for a specific element
            Ext.tip.QuickTipManager.register({
            target: &#39;quickTipContainer&#39;,
            title: &#39;My Tooltip&#39;,
            text: &#39;This tooltip was added in code&#39;,
            width: 100,
            dismissDelay: 10000 // Hide after 10 seconds hover
            });
            To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with
            the data- namespace.  The HTML element itself is automatically set as the quick tip target. Here is the summary
            of supported attributes (optional unless otherwise noted):  hide: Specifying &quot;user&quot; is equivalent to setting autoHide = false.  Any other value will be the same as autoHide = true. qclass: A CSS class to be applied to the quick tip (equivalent to the &#39;cls&#39; target element config). qtip (required): The quick tip text (equivalent to the &#39;text&#39; target element config). qtitle: The quick tip title (equivalent to the &#39;title&#39; target element config). qwidth: The quick tip width (equivalent to the &#39;width&#39; target element config).  Here is an example of configuring an HTML element to display a tooltip from markup: // Add a quick tip to an HTML button
            &amp;lt;input type=&quot;button&quot; value=&quot;OK&quot; data-qtitle=&quot;OK Button&quot; data-qwidth=&quot;100&quot;
            data-qtip=&quot;This is a quick tip from markup!&quot;&amp;gt;&amp;lt;/input&amp;gt;
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.destroy">
            <summary>
            Destroy the QuickTips instance. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.disable">
            <summary>
            Disable quick tips globally. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.enable">
            <summary>
            Enable quick tips globally. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.getQuickTip">
            <summary>
            Gets the single QuickTip instance used to show tips from all registered elements. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.init(System.Boolean,System.Object)">
            <summary>
            Initialize the global QuickTips instance and prepare any quick tips. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.isEnabled">
            <summary>
            Returns true if quick tips are enabled, else false. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.register(System.Object)">
            <summary>
            Configures a new quick tip instance and assigns it to a target element. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.tips(System.Object)">
            <summary>
            Alias of register. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTipManager.unregister(System.Object)">
            <summary>
            Removes any registered quick tip from the target element and destroys it. ...
            </summary>
        </member>
        <member name="T:Ext.is">
            <summary>
            Determines information about the current platform the application is running on.
            </summary>
        </member>
        <member name="T:Ext.grid.plugin.DragDrop">
            <summary>
            This plugin provides drag and/or drop functionality for a GridView. It creates a specialized instance of DragZone which knows how to drag out of a GridView
            and loads the data object which is passed to a cooperating DragZone&#39;s methods with the following properties: copy : Boolean
            The value of the GridView&#39;s copy property, or true if the GridView was configured
            with allowCopy: true and the control key was pressed when the drag operation was begun. view : GridView
            The source GridView from which the drag originated. ddel : HtmlElement
            The drag proxy element which moves with the mouse item : HtmlElement
            The GridView node upon which the mousedown event was registered. records : Array
            An Array of Models representing the selected data being dragged from the source GridView.  It also creates a specialized instance of Ext.dd.DropZone which cooperates with other DropZones which are members of the same
            ddGroup which processes such data objects. Adding this plugin to a view means that two new events may be fired from the client GridView, beforedrop and
            drop
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.DragDropConfig.ddGroup">
            <summary>
            A named drag drop group to which this object belongs. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.DragDropConfig.dragGroup">
            <summary>
            The ddGroup to which the DragZone will belong. ...
            </summary>
        </member>
        <member name="P:Ext.grid.plugin.DragDropConfig.dropGroup">
            <summary>
            The ddGroup to which the DropZone will belong. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.DragDropEvents.beforedrop">
            <summary>
            This event is fired through the GridView. ...
            </summary>
        </member>
        <member name="F:Ext.grid.plugin.DragDropEvents.drop">
            <summary>
            This event is fired through the GridView. ...
            </summary>
        </member>
        <member name="T:Ext.grid.feature.RowBody">
            <summary>
            The rowbody feature enhances the grid&#39;s markup to have an additional
            tr -&gt; td -&gt; div which spans the entire width of the original row. This is useful to to associate additional information with a particular
            record in a grid. Rowbodies are initially hidden unless you override getAdditionalData. Will expose additional events on the gridview with the prefix of &#39;rowbody&#39;.
            For example: &#39;rowbodyclick&#39;, &#39;rowbodydblclick&#39;, &#39;rowbodycontextmenu&#39;.
            </summary>
        </member>
        <member name="M:Ext.grid.feature.RowBody.getAdditionalData(System.Object,SharpKit.JavaScript.JsNumber,Ext.data.Model,System.Object)">
            <summary>
            Provide additional data to the prepareData call within the grid view. ...
            </summary>
        </member>
        <member name="T:Ext.EventManager">
            <summary>
            Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
            several useful events directly.
            See Ext.EventObject for more details on normalized event objects.
            </summary>
        </member>
        <member name="M:Ext.EventManager.addListener(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to an element. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getId(System.Object)">
            <summary>
            Get the id of the element. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getKeyEvent">
            <summary>
            Indicates which event to use for getting key presses. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getPageX(System.Object)">
            <summary>
            Gets the x coordinate from the event ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getPageXY(System.Object)">
            <summary>
            Gets the x &amp; ycoordinate from the event ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getPageY(System.Object)">
            <summary>
            Gets the y coordinate from the event ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getRelatedTarget(System.Object)">
            <summary>
            Gets the related target from the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.getTarget(System.Object)">
            <summary>
            Gets the target of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.on">
            <summary>
            Alias for Ext.EventManager.addListener ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.onDocumentReady(SharpKit.JavaScript.JsAction,System.Object,System.Boolean)">
            <summary>
            Adds a listener to be notified when the document is ready (before onload and before images are loaded). ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.onWindowResize(SharpKit.JavaScript.JsAction,System.Object,System.Boolean)">
            <summary>
            Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 millisecon...
            </summary>
        </member>
        <member name="M:Ext.EventManager.preventDefault(Ext.direct.Event)">
            <summary>
            Prevents the browsers default handling of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.purgeElement(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Recursively removes all previous added listeners from an element and its children. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeAll(System.Object)">
            <summary>
            Removes all event handers from an element. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeListener(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler from an element. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeResizeListener(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes the passed window resize listener. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeUnloadListener(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes the passed window unload listener. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.stopEvent(Ext.direct.Event)">
            <summary>
            Stop the event (preventDefault and stopPropagation) ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.stopPropagation(Ext.direct.Event)">
            <summary>
            Cancels bubbling of the event. ...
            </summary>
        </member>
        <member name="M:Ext.EventManager.un">
            <summary>
            Alias for Ext.EventManager.removeListener ...
            </summary>
        </member>
        <member name="T:Ext.draw.Sprite">
            <summary>
            A Sprite is an object rendered in a Drawing surface. There are different options and types of sprites.
            The configuration of a Sprite is an object with the following properties:  type - (String) The type of the sprite. Possible options are &#39;circle&#39;, &#39;path&#39;, &#39;rect&#39;, &#39;text&#39;, &#39;square&#39;, &#39;image&#39;. group - (String/Array) The group that this sprite belongs to, or an array of groups. Only relevant when added to a Ext.draw.Surface. width - (Number) Used in rectangle sprites, the width of the rectangle. height - (Number) Used in rectangle sprites, the height of the rectangle. size - (Number) Used in square sprites, the dimension of the square. radius - (Number) Used in circle sprites, the radius of the circle. x - (Number) The position along the x-axis. y - (Number) The position along the y-axis. path - (Array) Used in path sprites, the path of the sprite written in SVG-like path syntax. opacity - (Number) The opacity of the sprite. fill - (String) The fill color. stroke - (String) The stroke color. stroke-width - (Number) The width of the stroke. font - (String) Used with text type sprites. The full font description. Uses the same syntax as the CSS font parameter. text - (String) Used with text type sprites. The text itself. translate - (Object) Defines a translation for the Sprite. There&#39;s more information on this property below. rotate - (Object) Defines a rotation for the Sprite. There&#39;s more information on this property below. scale - (Object) Defines a scaling for the Sprite. There&#39;s more information on this property below.  Translation For translate, the configuration object contains x and y attributes that indicate where to
            translate the object. For example: sprite.setAttributes({
            translate: {
            x: 10,
            y: 10
            }
            }, true);
            Rotation For rotation, the configuration object contains x and y attributes for the center of the rotation (which are optional),
            and a degrees attribute that specifies the rotation in degrees. For example: sprite.setAttributes({
            rotate: {
            degrees: 90
            }
            }, true);
            That example will create a 90 degrees rotation using the centroid of the Sprite as center of rotation, whereas: sprite.setAttributes({
            rotate: {
            x: 0,
            y: 0,
            degrees: 90
            }
            }, true);
            will create a rotation around the (0, 0) axis. Scaling For scaling, the configuration object contains x and y attributes for the x-axis and y-axis scaling. For example: sprite.setAttributes({
            scale: {
            x: 10,
            y: 3
            }
            }, true);
            You can also specify the center of scaling by adding cx and cy as properties: sprite.setAttributes({
            scale: {
            cx: 0,
            cy: 0,
            x: 10,
            y: 3
            }
            }, true);
            That last example will scale a sprite taking as centers of scaling the (0, 0) coordinate. Creating and adding a Sprite to a Surface Sprites can be created with a reference to a Ext.draw.Surface  var drawComponent = Ext.create(&#39;Ext.draw.Component&#39;, options here...);
            var sprite = Ext.create(&#39;Ext.draw.Sprite&#39;, {
            type: &#39;circle&#39;,
            fill: &#39;#ff0&#39;,
            surface: drawComponent.surface,
            radius: 5
            });
            Sprites can also be added to the surface as a configuration object:  var sprite = drawComponent.surface.add({
            type: &#39;circle&#39;,
            fill: &#39;#ff0&#39;,
            radius: 5
            });
            In order to properly apply properties and render the sprite we have to
            show the sprite setting the option redraw to true:  sprite.show(true);
            The constructor configuration object of the Sprite can also be used and passed into the Ext.draw.Surface
            add method to append a new sprite to the canvas. For example: drawComponent.surface.add({
            type: &#39;circle&#39;,
            fill: &#39;#ffc&#39;,
            radius: 100,
            x: 100,
            y: 100
            });
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.addCls(System.Object)">
            <summary>
            Adds one or more CSS classes to the element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.destroy">
            <summary>
            Removes the sprite and clears all listeners. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.getBBox">
            <summary>
            Retrieve the bounding box of the sprite. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.hide(System.Boolean)">
            <summary>
            Hide the sprite. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.redraw">
            <summary>
            Redraw the sprite. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.remove">
            <summary>
            Remove the sprite. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.removeCls(System.Object)">
            <summary>
            Removes one or more CSS classes from the element. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.setAttributes(System.Object,System.Boolean)">
            <summary>
            Change the attributes of the sprite. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.setStyle(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Wrapper for setting style properties, also takes single object parameter of multiple styles. ...
            </summary>
        </member>
        <member name="M:Ext.draw.Sprite.show(System.Boolean)">
            <summary>
            Show the sprite. ...
            </summary>
        </member>
        <member name="P:Ext.draw.Sprite.dd">
            <summary>
            If this Sprite is configured draggable, this property will contain
            an instance of Ext.dd.DragSource which handles dra...
            </summary>
        </member>
        <member name="P:Ext.draw.SpriteConfig.font">
            <summary>
            Used with text type sprites. ...
            </summary>
        </member>
        <member name="P:Ext.draw.SpriteConfig.group">
            <summary>
            The group that this sprite belongs to, or an array of groups. ...
            </summary>
        </member>
        <member name="P:Ext.draw.SpriteConfig.text">
            <summary>
            Used with text type sprites. ...
            </summary>
        </member>
        <member name="P:Ext.draw.SpriteConfig.type">
            <summary>
            The type of the sprite. ...
            </summary>
        </member>
        <member name="T:Ext.data.Types">
            <summary>
            This is s static class containing the system-supplied data types which may be given to a Field. The properties in this class are used as type indicators in the Field class, so to
            test whether a Field is of a certain type, compare the type property against properties
            of this class. Developers may add their own application-specific data types to this class. Definition names must be UPPERCASE.
            each type definition must contain three properties:  convert : FunctionA function to convert raw data values from a data block into the data
            to be stored in the Field. The function is passed the collowing parameters:
            v : MixedThe data value as read by the Reader, if undefined will use
            the configured defaultValue. rec : MixedThe data object containing the row as read by the Reader.
            Depending on the Reader type, this could be an Array (ArrayReader), an object
            (JsonReader), or an XML element.  sortType : Function A function to convert the stored data into comparable form, as defined by Ext.data.SortTypes. type : String A textual data type name.  For example, to create a VELatLong field (See the Microsoft Bing Mapping API) containing the latitude/longitude value of a datapoint on a map from a JsonReader data block
            which contained the properties lat and long, you would define a new data type like this: // Add a new Field data type which stores a VELatLong object in the Record.
            Ext.data.Types.VELATLONG = {
            convert: function(v, data) {
            return new VELatLong(data.lat, data.long);
            },
            sortType: function(v) {
            return v.Latitude;  // When sorting, order by latitude
            },
            type: &#39;VELatLong&#39;
            };
            Then, when declaring a Model, use
            var types = Ext.data.Types; // allow shorthand type access
            Ext.define(&#39;Unit&#39;,
            extend: &#39;Ext.data.Model&#39;,
            fields: [
            { name: &#39;unitName&#39;, mapping: &#39;UnitName&#39; },
            { name: &#39;curSpeed&#39;, mapping: &#39;CurSpeed&#39;, type: types.INT },
            { name: &#39;latitude&#39;, mapping: &#39;lat&#39;, type: types.FLOAT },
            { name: &#39;latitude&#39;, mapping: &#39;lat&#39;, type: types.FLOAT },
            { name: &#39;position&#39;, type: types.VELATLONG }
            ]
            });
            </summary>
        </member>
        <member name="P:Ext.data.Types.BOOL">
            <summary>
            This data type means that the raw data is converted into a boolean before it is placed into
            a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.BOOLEAN">
            <summary>
            This data type means that the raw data is converted into a boolean before it is placed into
            a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.DATE">
            <summary>
            This data type means that the raw data is converted into a Date before it is placed into a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.FLOAT">
            <summary>
            This data type means that the raw data is converted into a number before it is placed into a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.INT">
            <summary>
            This data type means that the raw data is converted into an integer before it is placed into a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.INTEGER">
            <summary>
            This data type means that the raw data is converted into an integer before it is placed into a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.NUMBER">
            <summary>
            This data type means that the raw data is converted into a number before it is placed into a Record. ...
            </summary>
        </member>
        <member name="P:Ext.data.Types.stripRe">
            <summary>
            A regular expression for stripping non-numeric characters from a numeric value. ...
            </summary>
        </member>
        <member name="T:Ext.data.Tree">
            <summary>
            This class is used as a container for a series of nodes. The nodes themselves maintain
            the relationship between parent/child. The tree itself acts as a manager. It gives functionality
            to retrieve a node by its identifier: getNodeById. The tree also relays events from any of it&#39;s child nodes, allowing them to be handled in a
            centralized fashion. In general this class is not used directly, rather used internally
            by other parts of the framework.
            </summary>
        </member>
        <member name="M:Ext.data.Tree.#ctor(Ext.Unknown.Node)">
            <summary>
            Creates new Tree object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getNodeById(SharpKit.JavaScript.JsString)">
            <summary>
            Gets a node in this tree by its id. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getRootNode">
            <summary>
            Returns the root node for this tree. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.setRootNode(Ext.data.NodeInterface)">
            <summary>
            Sets the root node for this tree. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.data.Tree.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.data.TreeConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.append">
            <summary>
            Fires when a new child node is appended to a node in this tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforeappend">
            <summary>
            Fires before a new child is appended to a node in this tree, return false to cancel the append. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforecollapse">
            <summary>
            Fires before this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforeexpand">
            <summary>
            Fires before this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforeinsert">
            <summary>
            Fires before a new child is inserted in a node in this tree, return false to cancel the insert. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforemove">
            <summary>
            Fires before a node is moved to a new location in the tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.beforeremove">
            <summary>
            Fires before a child is removed from a node in this tree, return false to cancel the remove. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.collapse">
            <summary>
            Fires when this node is collapsed. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.expand">
            <summary>
            Fires when this node is expanded. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.insert">
            <summary>
            Fires when a new child node is inserted in a node in this tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.move">
            <summary>
            Fires when a node is moved to a new location in the tree ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.remove">
            <summary>
            Fires when a child node is removed from a node in this tree. ...
            </summary>
        </member>
        <member name="F:Ext.data.TreeEvents.rootchange">
            <summary>
            Fires whenever the root node is changed in the tree. ...
            </summary>
        </member>
        <member name="T:Ext.data.Request">
            <summary>
            Simple class that represents a Request that will be made by any Ext.data.proxy.Server subclass.
            All this class does is standardize the representation of a Request as used by any ServerProxy subclass,
            it does not contain any actual logic or perform the request itself.
            </summary>
        </member>
        <member name="M:Ext.data.Request.#ctor(System.Object)">
            <summary>
            Creates the Request object. ...
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.action">
            <summary>
            The name of the action this Request represents. ...
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.method">
            <summary>
            The HTTP method to use on this Request (defaults to 'GET'). ...
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.params">
            <summary>
            HTTP request params. ...
            </summary>
        </member>
        <member name="T:Ext.data.proxy.Direct">
            <summary>
            This class is used to send requests to the server using Ext.direct. When a request is made,
            the transport mechanism is handed off to the appropriate Provider
            to complete the call. Specifying the function This proxy expects a Direct remoting method to be passed in order to be able to complete requests.
            This can be done by specifying the directFn configuration. This will use the same direct
            method for all requests. Alternatively, you can provide an api configuration. This
            allows you to specify a different remoting method for each CRUD action. Parameters This proxy provides options to help configure which parameters will be sent to the server.
            By specifying the paramsAsHash option, it will send an object literal containing each
            of the passed parameters. The paramOrder option can be used to specify the order in which
            the remoting method parameters are passed. Example Usage Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;firstName&#39;, &#39;lastName&#39;],
            proxy: {
            type: &#39;direct&#39;,
            directFn: MyApp.getUsers,
            paramOrder: &#39;id&#39; // Tells the proxy to pass the id as the first parameter to the remoting method.
            }
            });
            User.load(1);
            </summary>
        </member>
        <member name="P:Ext.data.proxy.DirectConfig.directFn">
            <summary>
            Function to call when executing a request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.DirectConfig.extraParams">
            <summary>
            Extra parameters that will be included on every read request. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.DirectConfig.paramOrder">
            <summary>
            Defaults to undefined. ...
            </summary>
        </member>
        <member name="P:Ext.data.proxy.DirectConfig.paramsAsHash">
            <summary>
            Send parameters as a collection of named arguments (defaults to true). ...
            </summary>
        </member>
        <member name="T:Ext.data.ArrayStore">
            <summary>
            Small helper class to make creating Ext.data.Stores from Array data easier. An ArrayStore will be
            automatically configured with a Ext.data.reader.Array. A store configuration would be something like: var store = Ext.create(&#39;Ext.data.ArrayStore&#39;, {
            // store configs
            autoDestroy: true,
            storeId: &#39;myStore&#39;,
            // reader configs
            idIndex: 0,
            fields: [
            &#39;company&#39;,
            {name: &#39;price&#39;, type: &#39;float&#39;},
            {name: &#39;change&#39;, type: &#39;float&#39;},
            {name: &#39;pctChange&#39;, type: &#39;float&#39;},
            {name: &#39;lastChange&#39;, type: &#39;date&#39;, dateFormat: &#39;n/j h:ia&#39;}
            ]
            });
            This store is configured to consume a returned object of the form: var myData = [
            [&#39;3m Co&#39;,71.72,0.02,0.03,&#39;9/1 12:00am&#39;],
            [&#39;Alcoa Inc&#39;,29.01,0.42,1.47,&#39;9/1 12:00am&#39;],
            [&#39;Boeing Co.&#39;,75.43,0.53,0.71,&#39;9/1 12:00am&#39;],
            [&#39;Hewlett-Packard Co.&#39;,36.53,-0.03,-0.08,&#39;9/1 12:00am&#39;],
            [&#39;Wal-Mart Stores, Inc.&#39;,45.45,0.73,1.63,&#39;9/1 12:00am&#39;]
            ];
            An object literal of this form could also be used as the data config option. Note: Although not listed here, this class accepts all of the configuration options of
            ArrayReader.
            </summary>
        </member>
        <member name="T:Ext.chart.axis.Category">
            <summary>
            A type of axis that displays items in categories. This axis is generally used to
            display categorical information like names of items, month names, quarters, etc.
            but no quantitative values. For that other type of information Number
            axis are more suitable. As with other axis you can set the position of the axis and its title. For example:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            grid: true,
            position: &#39;left&#39;,
            fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            title: &#39;Sample Values&#39;,
            grid: {
            odd: {
            opacity: 1,
            fill: &#39;#ddd&#39;,
            stroke: &#39;#bbb&#39;,
            &#39;stroke-width&#39;: 1
            }
            },
            minimum: 0,
            adjustMinimumByMajorUnit: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;,
            grid: true,
            label: {
            rotate: {
            degrees: 315
            }
            }
            }],
            series: [{
            type: &#39;area&#39;,
            highlight: false,
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            style: {
            opacity: 0.93
            }
            }]
            });
            In this example with set the category axis to the bottom of the surface, bound the axis to
            the name property and set as title Month of the Year.
            </summary>
        </member>
        <member name="P:Ext.chart.axis.Category.calculateCategoryCount">
            <summary>
            Indicates whether or not to calculate the number of categories (ticks and
            labels) when there is not enough room to di...
            </summary>
        </member>
        <member name="T:Ext.Array">
            <summary>
            A set of useful static methods to deal with arrays; provide missing methods for older browsers.
            </summary>
        </member>
        <member name="M:Ext.Array.clean(SharpKit.JavaScript.JsArray)">
            <summary>
            Filter through an array and remove empty item as defined in Ext.isEmpty
            See filter ...
            </summary>
        </member>
        <member name="M:Ext.Array.clone(SharpKit.JavaScript.JsArray)">
            <summary>
            Clone a flat array without referencing the previous one. ...
            </summary>
        </member>
        <member name="M:Ext.Array.contains(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Checks whether or not the given array contains the specified item ...
            </summary>
        </member>
        <member name="M:Ext.Array.difference(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray)">
            <summary>
            Perform a set difference A-B by subtracting all items in array B from array A. ...
            </summary>
        </member>
        <member name="M:Ext.Array.each(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Boolean)">
            <summary>
            Iterates an array or an iterable value and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.Array.each(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Iterates an array or an iterable value and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.Array.each(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Iterates an array or an iterable value and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.Array.erase(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Removes items from an array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.every(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function for each array element until the function returns a falsy value. ...
            </summary>
        </member>
        <member name="M:Ext.Array.filter(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Creates a new array with all of the elements of this array for which
            the provided filtering function returns true. ...
            </summary>
        </member>
        <member name="M:Ext.Array.flatten(System.Object)">
            <summary>
            Recursively flattens into 1-d Array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.forEach(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Iterates an array and invoke the given callback function for each item. ...
            </summary>
        </member>
        <member name="M:Ext.Array.from(System.Object,System.Boolean)">
            <summary>
            Converts a value to an array if it's not already an array; returns:
            An empty array if given value is undefined or n...
            </summary>
        </member>
        <member name="M:Ext.Array.include(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Push an item into the array only if the array doesn't contain it yet ...
            </summary>
        </member>
        <member name="M:Ext.Array.indexOf(SharpKit.JavaScript.JsArray,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the index of the provided item in the given array, a supplement for the
            missing arrayPrototype.indexOf in Interne...
            </summary>
        </member>
        <member name="M:Ext.Array.indexOf(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Get the index of the provided item in the given array, a supplement for the
            missing arrayPrototype.indexOf in Interne...
            </summary>
        </member>
        <member name="M:Ext.Array.insert(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsArray)">
            <summary>
            Inserts items in to an array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.intersect(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray)">
            <summary>
            Merge multiple arrays into one with unique items that exist in all of the arrays. ...
            </summary>
        </member>
        <member name="M:Ext.Array.map(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Creates a new array with the results of calling a provided function on every element in this array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.max(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Returns the maximum value in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.mean(SharpKit.JavaScript.JsArray)">
            <summary>
            Calculates the mean of all items in the array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.merge(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray)">
            <summary>
            Merge multiple arrays into one with unique items. ...
            </summary>
        </member>
        <member name="M:Ext.Array.min(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Returns the minimum value in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.pluck(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Plucks the value of a property from each item in the Array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.remove(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Removes the specified item from the array if it exists ...
            </summary>
        </member>
        <member name="M:Ext.Array.replace(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces items in an array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.slice(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a shallow copy of a part of an array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.some(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function for each array element until the function returns a truthy value. ...
            </summary>
        </member>
        <member name="M:Ext.Array.sort(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction)">
            <summary>
            Sorts the elements of an Array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.splice(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Replaces items in an array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.sum(SharpKit.JavaScript.JsArray)">
            <summary>
            Calculates the sum of all items in the given array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.toArray(System.Object,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Converts any iterable (numeric indices and a length property) into a true array. ...
            </summary>
        </member>
        <member name="M:Ext.Array.union(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray)">
            <summary>
            Merge multiple arrays into one with unique items. ...
            </summary>
        </member>
        <member name="M:Ext.Array.unique(SharpKit.JavaScript.JsArray)">
            <summary>
            Returns a new array with unique items ...
            </summary>
        </member>
        <member name="T:Ext.util.Cookies">
            <summary>
            Utility class for setting/reading values from browser cookies.
            Values can be written using the set method.
            Values can be read using the get method.
            A cookie can be invalidated on the client machine using the clear method.
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.clear(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Removes a cookie with the provided name from the browser
            if found by setting its expiration date to sometime in the p...
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.get(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves cookies that are accessible by the current page. ...
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.set(SharpKit.JavaScript.JsString,System.Object,System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Create a cookie with the specified name and value. ...
            </summary>
        </member>
        <member name="T:Ext.util.ClickRepeater">
            <summary>
            A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the
            mouse is pressed. The interval between firings may be specified in the config but
            defaults to 20 milliseconds. Optionally, a CSS class may be applied to the element during the time it is pressed.
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.#ctor(System.Object,System.Object)">
            <summary>
            Creates new ClickRepeater. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.disable(System.Object)">
            <summary>
            Disables the repeater and stops events from firing. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.enable">
            <summary>
            Enables the repeater and allows events to fire. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.util.ClickRepeaterConfig.accelerate">
            <summary>
            True if autorepeating should start slowly and accelerate. ...
            </summary>
        </member>
        <member name="P:Ext.util.ClickRepeaterConfig.delay">
            <summary>
            The initial delay before the repeating event begins firing. ...
            </summary>
        </member>
        <member name="P:Ext.util.ClickRepeaterConfig.interval">
            <summary>
            The interval between firings of the "click" event. ...
            </summary>
        </member>
        <member name="P:Ext.util.ClickRepeaterConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="F:Ext.util.ClickRepeaterEvents.click">
            <summary>
            Fires on a specified interval during the time the element is pressed. ...
            </summary>
        </member>
        <member name="F:Ext.util.ClickRepeaterEvents.mousedown">
            <summary>
            Fires when the mouse button is depressed. ...
            </summary>
        </member>
        <member name="F:Ext.util.ClickRepeaterEvents.mouseup">
            <summary>
            Fires when the mouse key is released. ...
            </summary>
        </member>
        <member name="M:Ext.selection.CellModel.getCurrentPosition">
            <summary>
            Returns the current position in the format {row: row, column: column}
            </summary>
            <returns>Position in the format {row: row, column: column}</returns>
        </member>
        <member name="M:Ext.selection.CellModel.setCurrentPosition(System.Object)">
            <summary>
            Sets the current position
            </summary>
            <param name="pos">Position in the format {row: row, column: column}</param>
        </member>
        <member name="P:Ext.selection.CellModelConfig.enableKeyNav">
            <summary>
            Turns on/off keyboard navigation within the grid.
            </summary>
        </member>
        <member name="P:Ext.selection.CellModelConfig.preventWrap">
            <summary>
            Set this configuration to true to prevent wrapping around of selection as a user navigates to the first or last column.
            </summary>
        </member>
        <member name="F:Ext.selection.CellModelEvents.deselect">
            <summary>
            Fired after a cell is deselected
            </summary>
        </member>
        <member name="F:Ext.selection.CellModelEvents.select">
            <summary>
            Fired after a cell is selected
            </summary>
        </member>
        <member name="T:Ext.grid.View">
            <summary>
            The grid View class provides extra Ext.grid.Panel specific functionality to the
            Ext.view.Table. In general, this class is not instanced directly, instead a viewConfig
            option is passed to the grid: Ext.create(&#39;Ext.grid.Panel&#39;, {
            // other options
            viewConfig: {
            stripeRows: false
            }
            });
            Drag Drop
            Drag and drop functionality can be achieved in the grid by attaching a Ext.grid.plugin.DragDrop plugin
            when creating the view. Ext.create(&#39;Ext.grid.Panel&#39;, {
            // other options
            viewConfig: {
            plugins: {
            ddGroup: &#39;people-group&#39;,
            ptype: &#39;gridviewdragdrop&#39;,
            enableDrop: false
            }
            }
            });
            </summary>
        </member>
        <member name="P:Ext.grid.ViewConfig.stripeRows">
            <summary>
            true to stripe the rows. ...
            </summary>
        </member>
        <member name="T:Ext.grid.property.Property">
            <summary>
            A specific Ext.data.Model type that represents a name/value pair and is made to work with the
            Ext.grid.property.Grid.  Typically, Properties do not need to be created directly as they can be
            created implicitly by simply using the appropriate data configs either via the Ext.grid.property.Grid.source
            config property or by calling Ext.grid.property.Grid.setSource.  However, if the need arises, these records
            can also be created explicitly as shown below.  Example usage: var rec = new Ext.grid.property.Property({
            name: &#39;birthday&#39;,
            value: Ext.Date.parse(&#39;17/06/1962&#39;, &#39;d/m/Y&#39;)
            });
            // Add record to an already populated grid
            grid.store.addSorted(rec);
            </summary>
        </member>
        <member name="M:Ext.grid.property.Property.#ctor(System.Object)">
            <summary>
            ...
            </summary>
        </member>
        <member name="T:Ext.grid.property.Grid">
            <summary>
            A specialized grid implementation intended to mimic the traditional property grid as typically seen in
            development IDEs.  Each row in the grid represents a property of some object, and the data is stored
            as a set of name/value pairs in Properties.  Example usage: var grid = new Ext.grid.property.Grid({
            title: &#39;Properties Grid&#39;,
            width: 300,
            renderTo: &#39;grid-ct&#39;,
            source: {
            &quot;(name)&quot;: &quot;My Object&quot;,
            &quot;Created&quot;: Ext.Date.parse(&#39;10/15/2006&#39;, &#39;m/d/Y&#39;),
            &quot;Available&quot;: false,
            &quot;Version&quot;: .01,
            &quot;Description&quot;: &quot;A test object&quot;
            }
            });
            </summary>
        </member>
        <member name="M:Ext.grid.property.Grid.getSource">
            <summary>
            Gets the source data object containing the property data. ...
            </summary>
        </member>
        <member name="M:Ext.grid.property.Grid.removeProperty(SharpKit.JavaScript.JsString)">
            <summary>
            Removes a property from the grid. ...
            </summary>
        </member>
        <member name="M:Ext.grid.property.Grid.setProperty(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Sets the value of a property. ...
            </summary>
        </member>
        <member name="M:Ext.grid.property.Grid.setSource(System.Object)">
            <summary>
            Sets the source data object containing the property data. ...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.customEditors">
            <summary>
            An object containing name/value pairs of custom editor type definitions that allow
            the grid to support additional typ...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.customRenderers">
            <summary>
            An object containing name/value pairs of custom renderer type definitions that allow
            the grid to support custom rende...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.nameColumnWidth">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.nameField">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.propertyNames">
            <summary>
            An object containing custom property name/display name pairs. ...
            </summary>
        </member>
        <member name="P:Ext.grid.property.GridConfig.valueField">
            <summary>
            Optional. ...
            </summary>
        </member>
        <member name="F:Ext.grid.property.GridEvents.beforepropertychange">
            <summary>
            Fires before a property value changes. ...
            </summary>
        </member>
        <member name="F:Ext.grid.property.GridEvents.propertychange">
            <summary>
            Fires after a property value has changed. ...
            </summary>
        </member>
        <member name="T:Ext.dd.DragZone">
            <summary>
            This class provides a container DD instance that allows dragging of multiple child source nodes. This class does not move the drag target nodes, but a proxy element which may contain
            any DOM structure you wish. The DOM element to show in the proxy is provided by either a
            provided implementation of getDragData, or by registered draggables registered with Ext.dd.Registry If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some
            application object (For example nodes in a DataView) then use of this class
            is the most efficient way to &quot;activate&quot; those nodes. By default, this class requires that draggable child nodes are registered with Ext.dd.Registry.
            However a simpler way to allow a DragZone to manage any number of draggable elements is to configure
            the DragZone with  an implementation of the getDragData method which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event&#39;s getTarget method to identify a node based on a
            Ext.DomQuery selector. For example, to make the nodes of a DataView draggable, use the following
            technique. Knowledge of the use of the DataView is required: myDataView.on(&#39;render&#39;, function(v) {
            myDataView.dragZone = new Ext.dd.DragZone(v.getEl(), {
            //      On receipt of a mousedown event, see if it is within a DataView node.
            //      Return a drag data object if so.
            getDragData: function(e) {
            //          Use the DataView&#39;s own itemSelector (a mandatory property) to
            //          test if the mousedown is within one of the DataView&#39;s nodes.
            var sourceEl = e.getTarget(v.itemSelector, 10);
            //          If the mousedown is within a DataView node, clone the node to produce
            //          a ddel element for use by the drag proxy. Also add application data
            //          to the returned data object.
            if (sourceEl) {
            d = sourceEl.cloneNode(true);
            d.id = Ext.id();
            return {
            ddel: d,
            sourceEl: sourceEl,
            repairXY: Ext.fly(sourceEl).getXY(),
            sourceStore: v.store,
            draggedRecord: v.getRecord(sourceEl)
            }
            }
            },
            //      Provide coordinates for the proxy to slide back to on failed drag.
            //      This is the original XY coordinates of the draggable element captured
            //      in the getDragData method.
            getRepairXY: function() {
            return this.dragData.repairXY;
            }
            });
            }); See the DropZone documentation for details about building a DropZone which
            cooperates with this DragZone.
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.#ctor(System.Object,System.Object)">
            <summary>
            Creates new DragZone. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.afterRepair">
            <summary>
            Called after a repair of an invalid drop. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.getDragData(Ext.EventObject)">
            <summary>
            Called when a mousedown occurs in this container. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.getRepairXY(Ext.EventObject)">
            <summary>
            Called before a repair of an invalid drop to get the XY to animate to. ...
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.onInitDrag(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Called once drag threshold has been reached to initialize the proxy element. ...
            </summary>
        </member>
        <member name="P:Ext.dd.DragZone.dragData">
            <summary>
            This property contains the data representing the dragged object. ...
            </summary>
        </member>
        <member name="T:Ext.data.reader.Xml">
            <summary>
            The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually
            happens as a result of loading a Store - for example we might create something like this: Ext.define(&#39;User&#39;, {
            extend: &#39;Ext.data.Model&#39;,
            fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;]
            });
            var store = new Ext.data.Store({
            model: &#39;User&#39;,
            proxy: {
            type: &#39;ajax&#39;,
            url : &#39;users.xml&#39;,
            reader: {
            type: &#39;xml&#39;,
            record: &#39;user&#39;
            }
            }
            });
            The example above creates a &#39;User&#39; model. Models are explained in the Model docs if you&#39;re
            not already familiar with them. We created the simplest type of XML Reader possible by simply telling our Store&#39;s
            Proxy that we want a XML Reader. The Store automatically passes the configured model to the
            Store, so it is as if we passed this instead:
            reader: {
            type : &#39;xml&#39;,
            model: &#39;User&#39;,
            record: &#39;user&#39;
            }
            The reader we set up is ready to read data from our server - at the moment it will accept a response like this: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Ed Spencer&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;ed@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Abe Elias&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;abe@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            The XML Reader uses the configured record option to pull out the data for each record - in this case we
            set record to &#39;user&#39;, so each &amp;lt;user&amp;gt; above will be converted into a User model. Reading other XML formats If you already have your XML format defined and it doesn&#39;t look quite like what we have above, you can usually
            pass XmlReader a couple of configuration options to make it parse your format. For example, we can use the
            root configuration to parse data that comes back like this: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;users&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Ed Spencer&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;ed@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Abe Elias&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;abe@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;/users&amp;gt;
            To parse this we just pass in a root configuration that matches the &#39;users&#39; above: reader: {
            type  : &#39;xml&#39;,
            root  : &#39;users&#39;,
            record: &#39;user&#39;
            }
            Note that XmlReader doesn&#39;t care whether your root and record elements are nested deep inside
            a larger structure, so a response like this will still work:
            &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;deeply&amp;gt;
            &amp;lt;nested&amp;gt;
            &amp;lt;xml&amp;gt;
            &amp;lt;users&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Ed Spencer&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;ed@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Abe Elias&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;abe@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;/users&amp;gt;
            &amp;lt;/xml&amp;gt;
            &amp;lt;/nested&amp;gt;
            &amp;lt;/deeply&amp;gt;
            Response metadata The server can return additional data in its response, such as the total number of records
            and the success status of the response. These are typically included in the XML response
            like this: &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;total&amp;gt;100&amp;lt;/total&amp;gt;
            &amp;lt;success&amp;gt;true&amp;lt;/success&amp;gt;
            &amp;lt;users&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Ed Spencer&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;ed@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;user&amp;gt;
            &amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Abe Elias&amp;lt;/name&amp;gt;
            &amp;lt;email&amp;gt;abe@sencha.com&amp;lt;/email&amp;gt;
            &amp;lt;/user&amp;gt;
            &amp;lt;/users&amp;gt;
            If these properties are present in the XML response they can be parsed out by the XmlReader and used by the
            Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
            options: reader: {
            type: &#39;xml&#39;,
            root: &#39;users&#39;,
            totalProperty  : &#39;total&#39;,
            successProperty: &#39;success&#39;
            }
            These final options are not necessary to make the Reader work, but can be useful when the server needs to report
            an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
            returned. Response format Note: in order for the browser to parse a returned XML document, the Content-Type header in the HTTP
            response must be set to &quot;text/xml&quot; or &quot;application/xml&quot;. This is very important - the XmlReader will not
            work correctly otherwise.
            </summary>
        </member>
        <member name="M:Ext.data.reader.Xml.getData(System.Object)">
            <summary>
            Normalizes the data object ...
            </summary>
        </member>
        <member name="M:Ext.data.reader.Xml.readRecords(System.Object)">
            <summary>
            Parses an XML document and returns a ResultSet containing the model instances ...
            </summary>
        </member>
        <member name="P:Ext.data.reader.Xml.xmlData">
            <summary>
            DEPRECATED - will be removed in Ext JS 5.0. ...
            </summary>
        </member>
        <member name="T:Ext.data.Operation">
            <summary>
            Represents a single read or write operation performed by a Proxy.
            Operation objects are used to enable communication between Stores and Proxies. Application
            developers should rarely need to interact with Operation objects directly. Several Operations can be batched together in a batch.
            </summary>
        </member>
        <member name="M:Ext.data.Operation.#ctor(System.Object)">
            <summary>
            Creates new Operation object. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.allowWrite">
            <summary>
            Checks whether this operation should cause writing to occur. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getError">
            <summary>
            Returns the error string or object that was set using setException ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getRecords">
            <summary>
            Returns an array of Ext.data.Model instances as set by the Proxy. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getResultSet">
            <summary>
            Returns the ResultSet object (if set by the Proxy). ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.hasException">
            <summary>
            Returns true if this Operation encountered an exception (see also getError) ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isComplete">
            <summary>
            Returns true if the Operation has been completed ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isRunning">
            <summary>
            Returns true if the Operation has been started but has not yet completed. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isStarted">
            <summary>
            Returns true if the Operation has been started. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setCompleted">
            <summary>
            Marks the Operation as completed ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setException(System.Object)">
            <summary>
            Marks the Operation as having experienced an exception. ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setStarted">
            <summary>
            Marks the Operation as started ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setSuccessful">
            <summary>
            Marks the Operation as successful ...
            </summary>
        </member>
        <member name="M:Ext.data.Operation.wasSuccessful">
            <summary>
            Returns true if the Operation has completed and was successful ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.action">
            <summary>
            The action being performed by this Operation. ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.filters">
            <summary>
            Optional array of filter objects. ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.group">
            <summary>
            Optional grouping configuration. ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.limit">
            <summary>
            The number of records to load. ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.sorters">
            <summary>
            Optional array of sorter objects. ...
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.synchronous">
            <summary>
            True if this Operation is to be executed synchronously (defaults to true). ...
            </summary>
        </member>
        <member name="T:Ext.ComponentLoader">
            <summary>
            This class is used to load content via Ajax into a Ext.Component. In general
            this class will not be instanced directly, rather a loader configuration will be passed to the
            constructor of the Ext.Component. HTML Renderer By default, the content loaded will be processed as raw html. The response text
            from the request is taken and added to the component. This can be used in
            conjunction with the scripts option to execute any inline scripts in
            the resulting content. Using this renderer has the same effect as passing the
            Ext.Component.html configuration option. Data Renderer This renderer allows content to be added by using JSON data and a Ext.XTemplate.
            The content received from the response is passed to the Ext.Component.update method.
            This content is run through the attached Ext.Component.tpl and the data is added to
            the Component. Using this renderer has the same effect as using the Ext.Component.data
            configuration in conjunction with a Ext.Component.tpl. Component Renderer This renderer can only be used with a Ext.container.Container and subclasses. It allows for
            Components to be loaded remotely into a Container. The response is expected to be a single/series of
            Ext.Component configuration objects. When the response is received, the data is decoded
            and then passed to Ext.container.Container.add. Using this renderer has the same effect as specifying
            the Ext.container.Container.items configuration on a Container. Custom Renderer A custom function can be passed to handle any other special case, see the renderer option. Example Usage new Ext.Component({
            tpl: &#39;{firstName} - {lastName}&#39;,
            loader: {
            url: &#39;myPage.php&#39;,
            renderer: &#39;data&#39;,
            params: {
            userId: 1
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.ComponentLoader.setOptions(System.Object,System.Object)">
            <summary>
            Get the target of this loader. ...
            </summary>
        </member>
        <member name="M:Ext.ComponentLoader.setTarget(System.Object)">
            <summary>
            Set a {Ext.Component} as the target of this loader. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentLoaderConfig.loadMask">
            <summary>
            True or a Ext.LoadMask configuration to enable masking during loading. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentLoaderConfig.renderer">
            <summary>
            The type of content that is to be loaded into, which can be one of 3 types:
            html : Loads raw html content, see Ext....
            </summary>
        </member>
        <member name="P:Ext.ComponentLoaderConfig.scripts">
            <summary>
            True to parse any inline script tags in the response. ...
            </summary>
        </member>
        <member name="P:Ext.ComponentLoaderConfig.target">
            <summary>
            The target Ext.Component for the loader. ...
            </summary>
        </member>
        <member name="T:Ext.chart.series.Line">
            <summary>
            Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
            categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
            As with all other series, the Line Series must be appended in the series Chart array configuration. See the Chart
            documentation for more information. A typical configuration object for the line series could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
            fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
            data: [
            {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
            {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
            {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
            {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
            {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
            ]
            });
            Ext.create(&#39;Ext.chart.Chart&#39;, {
            renderTo: Ext.getBody(),
            width: 500,
            height: 300,
            animate: true,
            store: store,
            axes: [{
            type: &#39;Numeric&#39;,
            position: &#39;bottom&#39;,
            fields: [&#39;data1&#39;],
            label: {
            renderer: Ext.util.Format.numberRenderer(&#39;0,0&#39;)
            },
            title: &#39;Sample Values&#39;,
            grid: true,
            minimum: 0
            }, {
            type: &#39;Category&#39;,
            position: &#39;left&#39;,
            fields: [&#39;name&#39;],
            title: &#39;Sample Metrics&#39;
            }],
            series: [{
            type: &#39;line&#39;,
            highlight: {
            size: 7,
            radius: 7
            },
            axis: &#39;left&#39;,
            xField: &#39;name&#39;,
            yField: &#39;data1&#39;,
            markerCfg: {
            type: &#39;cross&#39;,
            size: 4,
            radius: 4,
            &#39;stroke-width&#39;: 0
            }
            }, {
            type: &#39;line&#39;,
            highlight: {
            size: 7,
            radius: 7
            },
            axis: &#39;left&#39;,
            fill: true,
            xField: &#39;name&#39;,
            yField: &#39;data3&#39;,
            markerCfg: {
            type: &#39;circle&#39;,
            size: 4,
            radius: 4,
            &#39;stroke-width&#39;: 0
            }
            }]
            });
            In this configuration we&#39;re adding two series (or lines), one bound to the data1
            property of the store and the other to data3. The type for both configurations is
            line. The xField for both series is the same, the name propert of the store.
            Both line series share the same axis, the left axis. You can set particular marker
            configuration by adding properties onto the markerConfig object. Both series have
            an object as highlight so that markers animate smoothly to the properties in highlight
            when hovered. The second series has fill=true which means that the line will also
            have an area below it of the same color. Note: In the series definition remember to explicitly set the axis to bind the
            values of the line series to. This can be done by using the axis configuration property.
            </summary>
        </member>
        <member name="M:Ext.chart.series.Line.drawSeries">
            <summary>
            Draws the series for the current chart. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.axis">
            <summary>
            The position of the axis to bind the values to. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.fill">
            <summary>
            If true, the area below the line will be filled in using the style.eefill and
            style.opacity config properties. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.markerConfig">
            <summary>
            The display style for the markers. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.selectionTolerance">
            <summary>
            The offset distance from the cursor position to the line series to trigger events (then used for highlighting series,...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.showMarkers">
            <summary>
            Whether markers should be displayed at the data points along the line. ...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.smooth">
            <summary>
            If set to true or a non-zero number, the line will be smoothed/rounded around its points; otherwise
            straight line seg...
            </summary>
        </member>
        <member name="P:Ext.chart.series.LineConfig.style">
            <summary>
            An object containing styles for the visualization lines. ...
            </summary>
        </member>
        <member name="T:Ext.tip.QuickTip">
            <summary>
            A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
            Ext.tip.QuickTipManager instance.  See the QuickTipManager class header for additional usage details and examples.
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTip.cancelShow(System.Object)">
            <summary>
            Hides a visible tip or cancels an impending show for a particular element. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTip.register(System.Object)">
            <summary>
            Configures a new quick tip instance and assigns it to a target element. ...
            </summary>
        </member>
        <member name="M:Ext.tip.QuickTip.unregister(System.Object)">
            <summary>
            Removes this quick tip from its element and destroys it. ...
            </summary>
        </member>
        <member name="T:Ext.slider.Single">
            <summary>
            Slider which supports vertical or horizontal orientation, keyboard adjustments,
            configurable snapping, axis clicking and animation. Can be added as an item to
            any container.
            Example usage:     Ext.create(&#39;Ext.slider.Single&#39;, {
            width: 200,
            value: 50,
            increment: 10,
            minValue: 0,
            maxValue: 100,
            renderTo: Ext.getBody()
            });
            The class Ext.slider.Single is aliased to Ext.Slider for backwards compatibility.
            </summary>
        </member>
        <member name="M:Ext.slider.Single.getValue">
            <summary>
            Returns the current value of the slider ...
            </summary>
        </member>
        <member name="M:Ext.slider.Single.setValue(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. ...
            </summary>
        </member>
        <member name="T:Ext.ProgressBar">
            <summary>
            An updateable progress bar component.  The progress bar supports two different modes: manual and automatic. In manual mode, you are responsible for showing, updating (via updateProgress) and clearing the
            progress bar as needed from your own code.  This method is most appropriate when you want to show progress
            throughout an operation that has predictable points of interest at which you can update the control. In automatic mode, you simply call wait and let the progress bar run indefinitely, only clearing it
            once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
            and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in
            which you have no need for indicating intermediate progress.
            Example Usage:  var p = Ext.create(&#39;Ext.ProgressBar&#39;, {
            renderTo: Ext.getBody(),
            width: 300
            });
            //Wait for 5 seconds, then update the status el (progress bar will auto-reset)
            p.wait({
            interval: 500, //bar will move fast!
            duration: 50000,
            increment: 15,
            text: &#39;Updating...&#39;,
            scope: this,
            fn: function(){
            p.updateText(&#39;Done!&#39;);
            }
            });
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.isWaiting">
            <summary>
            Returns true if the progress bar is currently in a wait operation ...
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.reset(System.Boolean)">
            <summary>
            Resets the progress bar value to 0 and text to empty string. ...
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.updateProgress(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Updates the progress bar value, and optionally its text. ...
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.updateText(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the progress bar text. ...
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.wait(System.Object)">
            <summary>
            Initiates an auto-updating progress bar. ...
            </summary>
        </member>
        <member name="F:Ext.ProgressBarEvents.update">
            <summary>
            Fires after each update interval ...
            </summary>
        </member>
        <member name="T:Ext.layout.container.HBox">
            <summary>
            A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
            space between child items containing a numeric flex configuration. This layout may also be used to set the heights of child items by configuring it with the align option.
            Example usage: Ext.create(&#39;Ext.Panel&#39;, {
            width: 500,
            height: 300,
            title: &quot;HBoxLayout Panel&quot;,
            layout: {
            type: &#39;hbox&#39;,
            align: &#39;stretch&#39;
            },
            renderTo: document.body,
            items: [{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel One&#39;,
            flex: 2
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel Two&#39;,
            flex: 1
            },{
            xtype: &#39;panel&#39;,
            title: &#39;Inner Panel Three&#39;,
            flex: 1
            }]
            });
            </summary>
        </member>
        <member name="P:Ext.layout.container.HBoxConfig.align">
            <summary>
            Controls how the child items of the container are aligned. ...
            </summary>
        </member>
        <member name="T:Ext.fx.Animator">
            <summary>
            Animation instance This class is used to run keyframe based animations, which follows the CSS3 based animation structure.
            Keyframe animations differ from typical from/to animations in that they offer the ability to specify values
            at various points throughout the animation. Using Keyframes
            The keyframes option is the most important part of specifying an animation when using this
            class. A key frame is a point in a particular animation. We represent this as a percentage of the
            total animation duration. At each key frame, we can specify the target values at that time. Note that
            you must specify the values at 0% and 100%, the start and ending values. There is also a keyframe
            event that fires after each key frame is reached. Example Usage
            In the example below, we modify the values of the element at each fifth throughout the animation. Ext.create(&#39;Ext.fx.Animator&#39;, {
            target: Ext.getBody().createChild({
            style: {
            width: &#39;100px&#39;,
            height: &#39;100px&#39;,
            &#39;background-color&#39;: &#39;red&#39;
            }
            }),
            duration: 10000, // 10 seconds
            keyframes: {
            0: {
            opacity: 1,
            backgroundColor: &#39;FF0000&#39;
            },
            20: {
            x: 30,
            opacity: 0.5
            },
            40: {
            x: 130,
            backgroundColor: &#39;0000FF&#39;
            },
            60: {
            y: 80,
            opacity: 0.3
            },
            80: {
            width: 200,
            y: 200
            },
            100: {
            opacity: 1,
            backgroundColor: &#39;00FF00&#39;
            }
            }
            });
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.addEvents(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Appends an event handler to this object. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
            destroyed. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.enableBubble(System.Object)">
            <summary>
            Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
            present. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.fireEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Fires the specified event with the passed parameters (minus the event name, plus the options object passed
            to addList...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.mon(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.mun(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeManagedListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.on(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Shorthand for addListener. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.relayEvents(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by this. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the mon method. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.resumeEvents">
            <summary>
            Resumes firing events (see suspendEvents). ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.suspendEvents(System.Boolean)">
            <summary>
            Suspends the firing of all events. ...
            </summary>
        </member>
        <member name="M:Ext.fx.Animator.un(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for removeListener. ...
            </summary>
        </member>
        <member name="P:Ext.fx.Animator.paused">
            <summary>
            Flag to determine if the animation is paused. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.delay">
            <summary>
            Time to delay before starting the animation. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.duration">
            <summary>
            Time in milliseconds for the animation to last. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.dynamic">
            <summary>
            Currently only for Component Animation: Only set a component's outer element size bypassing layouts. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.easing">
            <summary>
            This describes how the intermediate values used during a transition will be calculated. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.iterations">
            <summary>
            Number of times to execute the animation. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.keyframes">
            <summary>
            Animation keyframes follow the CSS3 Animation configuration pattern. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.listeners">
            <summary>
            A config object containing one or more event handlers to be added to this object during initialization. ...
            </summary>
        </member>
        <member name="P:Ext.fx.AnimatorConfig.target">
            <summary>
            The Ext.fx.target to apply the animation to. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimatorEvents.afteranimate">
            <summary>
            Fires when the animation is complete. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimatorEvents.beforeanimate">
            <summary>
            Fires before the animation starts. ...
            </summary>
        </member>
        <member name="F:Ext.fx.AnimatorEvents.keyframe">
            <summary>
            Fires at each keyframe. ...
            </summary>
        </member>
        <member name="T:Ext.form.FieldSet">
            <summary>
            A container for grouping sets of fields, rendered as a HTML fieldset element. The title
            config will be rendered as the fieldset&#39;s legend. While FieldSets commonly contain simple groups of fields, they are general Containers
            and may therefore contain any type of components in their items, including other nested containers.
            The default layout for the FieldSet&#39;s items is &#39;anchor&#39;, but it can be configured to use any other
            layout type. FieldSets may also be collapsed if configured to do so; this can be done in two ways:  Set the collapsible config to true; this will result in a collapse button being rendered next to
            the legend title, or: Set the checkboxToggle config to true; this is similar to using collapsible but renders
            a checkbox in place of the toggle button. The fieldset will be expanded when the
            checkbox is checked and collapsed when it is unchecked. The checkbox will also be included in the
            form submit parameters using the checkboxName as its parameter name.   Example usage Ext.create(&#39;Ext.form.Panel&#39;, {
            title: &#39;Simple Form with FieldSets&#39;,
            labelWidth: 75, // label settings here cascade unless overridden
            url: &#39;save-form.php&#39;,
            frame: true,
            bodyStyle: &#39;padding:5px 5px 0&#39;,
            width: 550,
            renderTo: Ext.getBody(),
            layout: &#39;column&#39;, // arrange fieldsets side by side
            defaults: {
            bodyPadding: 4
            },
            items: [{
            // Fieldset in Column 1 - collapsible via toggle button
            xtype:&#39;fieldset&#39;,
            columnWidth: 0.5,
            title: &#39;Fieldset 1&#39;,
            collapsible: true,
            defaultType: &#39;textfield&#39;,
            defaults: {anchor: &#39;100%&#39;},
            layout: &#39;anchor&#39;,
            items :[{
            fieldLabel: &#39;Field 1&#39;,
            name: &#39;field1&#39;
            }, {
            fieldLabel: &#39;Field 2&#39;,
            name: &#39;field2&#39;
            }]
            }, {
            // Fieldset in Column 2 - collapsible via checkbox, collapsed by default, contains a panel
            xtype:&#39;fieldset&#39;,
            title: &#39;Show Panel&#39;, // title or checkboxToggle creates fieldset header
            columnWidth: 0.5,
            checkboxToggle: true,
            collapsed: true, // fieldset initially collapsed
            layout:&#39;anchor&#39;,
            items :[{
            xtype: &#39;panel&#39;,
            anchor: &#39;100%&#39;,
            title: &#39;Panel inside a fieldset&#39;,
            frame: true,
            height: 52
            }]
            }]
            });
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.collapse">
            <summary>
            Collapses the fieldset. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.createCheckboxCmp">
            <summary>
            Creates the checkbox component. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.createTitleCmp">
            <summary>
            Creates the legend title component. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.createToggleCmp">
            <summary>
            Creates the toggle button component. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.expand">
            <summary>
            Expands the fieldset. ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the title of this fieldset ...
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.toggle">
            <summary>
            Toggle the fieldset's collapsed state to the opposite of what it is currently ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.checkboxCmp">
            <summary>
            Refers to the Ext.form.field.Checkbox component that is added next to the title in the legend. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.legend">
            <summary>
            The component for the fieldset's legend. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.toggleCmp">
            <summary>
            Refers to the Ext.panel.Tool component that is added as the collapse/expand button next
            to the title in the legend. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.checkboxToggle">
            <summary>
            Set to true to render a checkbox into the fieldset frame just
            in front of the legend to expand/collapse the fieldset ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.collapsed">
            <summary>
            Set to true to render the fieldset as collapsed by default. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.collapsible">
            <summary>
            Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically
            rendered into t...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.layout">
            <summary>
            The Ext.container.Container.layout for the fieldset's immediate child items. ...
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.title">
            <summary>
            A title to be displayed in the fieldset's legend. ...
            </summary>
        </member>
        <member name="T:Ext.form.field.Display">
            <summary>
            A display-only text field which is not validated and not submitted. This is useful for when you want
            to display a value from a form&#39;s loaded data but do not want to allow the
            user to edit or submit that value. The value can be optionally HTML encoded if it contains
            HTML markup that you do not want to be rendered. If you have more complex content, or need to include components within the displayed content, also
            consider using a Ext.form.FieldContainer instead.  Example:     Ext.create(&#39;Ext.form.Panel&#39;, {
            width: 175,
            height: 120,
            bodyPadding: 10,
            title: &#39;Final Score&#39;,
            items: [{
            xtype: &#39;displayfield&#39;,
            fieldLabel: &#39;Home&#39;,
            name: &#39;home_score&#39;,
            value: &#39;10&#39;
            }, {
            xtype: &#39;displayfield&#39;,
            fieldLabel: &#39;Visitor&#39;,
            name: &#39;visitor_score&#39;,
            value: &#39;11&#39;
            }],
            buttons: [{
            text: &#39;Update&#39;,
            }],
            renderTo: Ext.getBody()
            });
            </summary>
        </member>
        <member name="P:Ext.form.field.DisplayConfig.htmlEncode">
            <summary>
            false to skip HTML-encoding the text when rendering it (defaults to
            false). ...
            </summary>
        </member>
        <member name="T:Ext.env.OS">
            <summary>
            Provide useful information about the current operating system environment. Access the global instance stored in Ext.os. Example: if (Ext.os.is.Windows) {
            // Windows specific code here
            }
            if (Ext.os.is.iOS) {
            // iPad, iPod, iPhone, etc.
            }
            console.log(&quot;Version &quot; + Ext.os.version);
            For a full list of supported values, refer to: Ext.env.OS.is
            </summary>
        </member>
        <member name="M:Ext.env.OS.is(SharpKit.JavaScript.JsString)">
            <summary>
            A "hybrid" property, can be either accessed as a method call, i.e:
            if (Ext.os.is('Android')) { ... ...
            </summary>
        </member>
        <member name="P:Ext.env.OS.name">
            <summary>
            Read-only - the full name of the current operating system
            Possible values are: iOS, Android, WebOS, BlackBerry, MacOS...
            </summary>
        </member>
        <member name="T:Ext.data.writer.Json">
            <summary>
            This class is used to write Ext.data.Model data to the server in a JSON format.
            The allowSingle configuration can be set to false to force the records to always be
            encoded in an array, even if there is only a single record being sent.
            </summary>
        </member>
        <member name="P:Ext.data.writer.JsonConfig.allowSingle">
            <summary>
            False to ensure that records are always wrapped in an array, even if there is only
            one record being sent. ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.JsonConfig.encode">
            <summary>
            True to use Ext.encode() on the data before sending. ...
            </summary>
        </member>
        <member name="P:Ext.data.writer.JsonConfig.root">
            <summary>
            The key under which the records in this Writer will be placed. ...
            </summary>
        </member>
        <member name="T:Ext.data.Errors">
            <summary>
            Wraps a collection of validation error responses and provides convenient functions for
            accessing and errors for specific fields. Usually this class does not need to be instantiated directly - instances are instead created
            automatically when validate on a model instance: //validate some existing model instance - in this case it returned 2 failures messages
            var errors = myModel.validate();
            errors.isValid(); //false
            errors.length; //2
            errors.getByField(&#39;name&#39;);  // [{field: &#39;name&#39;,  message: &#39;must be present&#39;}]
            errors.getByField(&#39;title&#39;); // [{field: &#39;title&#39;, message: &#39;is too short&#39;}]
            </summary>
        </member>
        <member name="M:Ext.data.Errors.getByField(SharpKit.JavaScript.JsString)">
            <summary>
            Returns all of the errors for the given field ...
            </summary>
        </member>
        <member name="M:Ext.data.Errors.isValid">
            <summary>
            Returns true if there are no errors in the collection ...
            </summary>
        </member>
    </members>
</doc>
