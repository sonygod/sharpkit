<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.EaselJS</name>
    </assembly>
    <members>
        <member name="T:SharpKit.EaselJS.AlphaMapFilter">
            <summary>
            Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will be copied from the red channel of the map,
            and the RGB channels will be copied from the target. 
            Generally, it is recommended that you use AlphaMaskFilter, because it has much better performance.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.#ctor(System.Object)">
            <summary>
            AlphaMapFilter Constructor
            </summary>
            <param name="alphaMap">alphaMap &lt;Image> The greyscale image (or canvas) to use as the alpha value for the result.
            This should be exactly the same dimensions as the target.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.clone">
            <summary>
            Returns a clone of this object.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMapFilter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.EaselJS.AlphaMapFilter.alphaMap">
            <summary>
            The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same dimensions as the target.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.AlphaMaskFilter">
            <summary>
            Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will be derived from the mask,
            and the RGB channels will be copied from the target. This can be used, for example, to apply an alpha mask to a display object.
            This can also be used to combine a JPG compressed RGB image with a PNG32 alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.
            IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.#ctor(System.Object)">
            <summary>
            AlphaMaskFilter Constructor
            </summary>
            <param name="mask ">The image (or canvas) to use as the mask.
            This should be exactly the same dimensions as the target.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.clone">
            <summary>
            Returns a clone of this object.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.AlphaMaskFilter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.EaselJS.AlphaMaskFilter.mask">
            <summary>
            The image (or canvas) to use as the mask.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Bitmap">
            <summary>
            (extends DisplayObject) A Bitmap represents an Image, Canvas, or Video in the display list.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.DisplayObject">
            <summary>
            Known Subclasses:
            Container, BitmapAnimation, DOMElement, Text, Bitmap and Shape
            DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as Container, Bitmap, and Shape. DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and methods that are shared between all display objects.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.cache(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws the display object into a new canvas, which is then used for subsequent draws.
            For complex content that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),
            this can provide for much faster rendering because the content does not need to be re-rendered each tick. The cached display object can be moved, rotated,
            faded, etc freely, however if it's content changes, you must manually update the cache by calling updateCache() or cache() again.
            You must specify the cache area via the x, y, w, and h parameters.
            This defines the rectangle that will be rendered and cached using this display object's coordinates.
            For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25, you could call myShape.cache(-25, -25, 50, 50) to cache the full shape.
            </summary>
            <param name="x">The x coordinate origin for the cache region.</param>
            <param name="y"> The y coordinate origin for the cache region.</param>
            <param name="width">The width of the cache region.</param>
            <param name="height"></param>
            <param name="scale">Optional. The scale at which the cache will be created.
            For example, if you cache a vector shape using myShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px.
            This lets you scale and rotate cached elements with greater fidelity. Default is 1.</param>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.cache(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws the display object into a new canvas, which is then used for subsequent draws.
            For complex content that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),
            this can provide for much faster rendering because the content does not need to be re-rendered each tick. The cached display object can be moved, rotated,
            faded, etc freely, however if it's content changes, you must manually update the cache by calling updateCache() or cache() again.
            You must specify the cache area via the x, y, w, and h parameters.
            This defines the rectangle that will be rendered and cached using this display object's coordinates.
            For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25, you could call myShape.cache(-25, -25, 50, 50) to cache the full shape.
            </summary>
            <param name="x">The x coordinate origin for the cache region.</param>
            <param name="y"> The y coordinate origin for the cache region.</param>
            <param name="width">The width of the cache region.</param>
            <param name="height"></param>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.clone">
            <summary>
            Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are reverted to their defaults (for example .parent).
            </summary>
            <returns>A clone of the current DisplayObject instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getCacheDataURL">
            <summary>
            Returns a data URL for the cache, or null if this display object is not cached. Uses cacheID to ensure a new data URL is not generated if the cache has not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getConcatenatedMatrix(SharpKit.EaselJS.Matrix2D)">
            <summary>
            Generates a concatenated Matrix2D object representing the combined transform of the display object and all of its parent Containers up to the highest level ancestor (usually the stage).
            This can be used to transform positions between coordinate spaces, such as with localToGlobal and globalToLocal.
            </summary>
            <param name="mtx">Optional. A Matrix2D object to populate with the calculated values. If null, a new Matrix object is returned.</param>
            <returns>a concatenated Matrix2D object representing the combined transform of the display object and all of its parent Containers up to the highest level ancestor (usually the stage).</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getConcatenatedMatrix">
            <summary>
            Generates a concatenated Matrix2D object representing the combined transform of the display object and all of its parent Containers up to the highest level ancestor (usually the stage).
            This can be used to transform positions between coordinate spaces, such as with localToGlobal and globalToLocal.
            </summary>
            <returns>a concatenated Matrix2D object representing the combined transform of the display object and all of its parent Containers up to the highest level ancestor (usually the stage).</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getMatrix(SharpKit.EaselJS.Matrix2D)">
            <summary>
            Returns a matrix based on this object's transform.
            </summary>
            <param name="matrix">Optional. A Matrix2D object to populate with the calculated values. If null, a new Matrix object is returned.</param>
            <returns>A matrix representing this display object's transform.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getMatrix">
            <summary>
            Returns a matrix based on this object's transform.
            </summary>
            <returns>A matrix representing this display object's transform.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.getStage">
            <summary>
            Returns the stage that this display object will be rendered on, or null if it has not been added to one.
            </summary>
            <returns>The Stage instance that the display object is a descendent of. null if the DisplayObject has not been added to a Stage.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.globalToLocal(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Transforms the specified x and y position from the global (stage) coordinate space to the coordinate space of the display object.
            For example, this could be used to determine the current mouse position within the display object.
            Returns a Point instance with x and y properties correlating to the transformed position in the display object's coordinate space.
            </summary>
            <param name="x">The x position on the stage to transform.</param>
            <param name="y">The y position on the stage to transform.</param>
            <returns>A Point instance with x and y properties correlating to the transformed position in the display object's coordinate space.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.hitTest(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the specified position).
            This ignores the alpha, shadow and compositeOperation of the display object, and all transform properties including regX/Y.
            </summary>
            <param name="x">The x position to check in the display object's local coordinates.</param>
            <param name="y">The y position to check in the display object's local coordinates.</param>
            <returns>A Boolean indicting whether a visible portion of the DisplayObject intersect the specified local Point.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.localToGlobal(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Transforms the specified x and y position from the coordinate space of the display object to the global (stage) coordinate space.
            For example, this could be used to position an HTML label over a specific point on a nested display object.
            Returns a Point instance with x and y properties correlating to the transformed coordinates on the stage.
            </summary>
            <param name="x">The x position in the source display object to transform.</param>
            <param name="y">The y position in the source display object to transform.</param>
            <returns>A Point instance with x and y properties correlating to the transformed coordinates on the stage.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.localToLocal(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.EaselJS.DisplayObject)">
            <summary>
            Transforms the specified x and y position from the coordinate space of this display object to the coordinate space of the target display object.
            Returns a Point instance with x and y properties correlating to the transformed position in the target's coordinate space.
            Effectively the same as calling var pt = this.localToGlobal(x, y); pt = target.globalToLocal(pt.x, pt.y);
            </summary>
            <param name="x">The x position in the source display object to transform.</param>
            <param name="y">The y position in the source display object to transform.</param>
            <param name="target">The target display object to which the coordinates will be transformed.</param>
            <returns>Returns a Point instance with x and y properties correlating to the transformed position in the target's coordinate space.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.setTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Shortcut method to quickly set the transform properties on the display object. All parameters are optional.
            Omitted parameters will have the default value set (ex. 0 for x/y, 1 for scaleX/Y).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <param name="regX"></param>
            <param name="regY"></param>
            <returns>Returns this instance. Useful for chaining commands.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.setupContext(SharpKit.Html.CanvasRenderingContext2D)">
            <summary>
            Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow to the specified context.
            This is typically called prior to draw.
            </summary>
            <param name="ctx">The canvas 2D to update.</param>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.uncache">
            <summary>
            Clears the current cache. See cache() for more information.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DisplayObject.updateCache(SharpKit.JavaScript.JsString)">
            <summary>
            Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.
            If compositeOperation is null the current cache will be cleared prior to drawing.
            Otherwise the display object will be drawn over the existing cache using the specified compositeOperation.
            </summary>
            <param name="compositeOperation">The compositeOperation to use, or null to clear the cache and redraw it. whatwg spec on compositing.</param>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.alpha">
            <summary>
            The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.
            Default Value: 1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.cacheCanvas">
            <summary>
            If a cache is active, this returns the canvas that holds the cached version of this display object. See cache() for more information. READ-ONLY.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.cacheID">
            <summary>
            Returns an ID number that uniquely identifies the current cache for this display object.
            This can be used to determine if the cache has changed since a previous check.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.compositeOperation">
            <summary>
            The composite operation indicates how the pixels of this display object will be composited with the elements behind it.
            If null, this property is inherited from the parent container. For more information, read the whatwg spec on compositing.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.filters">
            <summary>
            An array of Filter objects to apply to this display object.
            Filters are only applied / updated when cache() or updateCache() is called on the display object, and only apply to the area that is cached.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.hitArea">
            <summary>
            A display object that will be tested when checking mouse interactions or testing getObjectsUnderPoint.
            The hit area will have its transformation applied relative to this display object's coordinate space
            (as though the hit test object were a child of this display object and relative to its regX/Y). It is NOT used for hitTest().
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.id">
            <summary>
            Unique ID for this display object. Makes display objects easier for some uses.
            Default Value: -1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.mask">
            <summary>
            A Shape instance that defines a vector mask (clipping path) for this display object.
            The shape's transformation will be applied relative to the display object's parent coordinates (as if it were a child of the parent).
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.mouseEnabled">
            <summary>
            Indicates whether to include this object when running Stage.getObjectsUnderPoint(), and thus for mouse interactions.
            Setting this to true for Containers will cause the Container to be returned (not its children) regardless of whether it's mouseChildren property is true.
            Default Value: true
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.name">
            <summary>
            An optional name for this display object. Included in toString(). Useful for debugging.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.parent">
            <summary>
            A reference to the Container or Stage object that contains this display object, or null if it has not been added to one. READ-ONLY.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.regX">
            <summary>
            The x offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around it's center, you would set regX and regY to 50.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.regY">
            <summary>
            The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around it's center, you would set regX and regY to 50.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.rotation">
            <summary>
            The rotation in degrees for this display object.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.scaleX">
            <summary>
            The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display object to twice it's nominal width.
            Default Value: 1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.scaleY">
            <summary>
            The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display object to half it's nominal height.
            Default Value: 1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.shadow">
            <summary>
            A shadow object that defines the shadow to render on this display object. Set to null to remove a shadow. If null, this property is inherited from the parent container.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.skewX">
            <summary>
            The factor to skew this display object horizontally.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.skewY">
            <summary>
            The factor to skew this display object vertically.
            Default Value: 0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.EaselJS.DisplayObject.snapToPixel" -->
        <member name="P:SharpKit.EaselJS.DisplayObject.suppressCrossDomainErrors">
            <summary>
            Suppresses errors generated when using features like hitTest, onPress/onClick, and getObjectsUnderPoint with cross domain content
            Default Value: false
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.visible">
            <summary>
            Indicates whether this display object should be rendered to the canvas and included when running Stage.getObjectsUnderPoint().
            Default Value: true
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.x">
            <summary>
            The x (horizontal) position of the display object, relative to its parent.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.y">
            <summary>
            The y (vertical) position of the display object, relative to its parent.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onClick">
            <summary>
            The onClick callback is called when the user presses down on and then releases the mouse button over this display object.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            If an onClick handler is set on a container, it will receive the event if any of its children are clicked.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onDoubleClick">
            <summary>
            The onDoubleClick callback is called when the user double clicks over this display object.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            If an onDoubleClick handler is set on a container, it will receive the event if any of its children are clicked.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onMouseOut">
            <summary>
            The onMouseOut callback is called when the user rolls off of the display object.
            You must enable this event using stage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onMouseOver">
            <summary>
            The onMouseOver callback is called when the user rolls over the display object.
            You must enable this event using stage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onPress">
            <summary>
            The onPress callback is called when the user presses down on their mouse over this display object.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            You can subscribe to the onMouseMove and onMouseUp callbacks of the event object to receive these events until the user releases the mouse button.
            If an onPress handler is set on a container, it will receive the event if any of its children are clicked.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DisplayObject.onTick">
            <summary>
            The onTick callback is called on each display object on a stage whenever the stage updates.
            This occurs immediately before the rendering (draw) pass.
            When stage.update() is called, first all display objects on the stage have onTick called, then all of the display objects are drawn to stage.
            Children will have their onTick called in order of their depth prior to onTick being called on their parent. 
            Any parameters passed in to stage.update() are passed on to the onTick() handlers.
            For example, if you call stage.update("hello"), all of the display objects with a handler will have onTick("hello") called.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.#ctor(SharpKit.Html.HtmlImageElement)">
            <summary>
            Bitmap Constructor
            </summary>
            <param name="imageOrUri">The source object or URI to an image to display.
            This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.
            If it is a URI, a new Image object will be constructed and assigned to the .image property.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.#ctor(SharpKit.Html.HtmlCanvasElement)">
            <summary>
            Bitmap Constructor
            </summary>
            <param name="imageOrUri">The source object or URI to an image to display.
            This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.
            If it is a URI, a new Image object will be constructed and assigned to the .image property.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.#ctor(SharpKit.Html.HtmlVideoElement)">
            <summary>
            Bitmap Constructor
            </summary>
            <param name="imageOrUri">The source object or URI to an image to display.
            This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.
            If it is a URI, a new Image object will be constructed and assigned to the .image property.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.#ctor(SharpKit.JavaScript.JsString)">
            <summary>
            Bitmap Constructor
            </summary>
            <param name="imageOrUri">The source object or URI to an image to display.
            This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.
            If it is a URI, a new Image object will be constructed and assigned to the .image property.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.cache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.clone">
            <summary>
            Returns a clone of the Bitmap instance.
            </summary>
            <returns>a clone of the Bitmap instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality). NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.uncache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Bitmap.updateCache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Bitmap.image">
             <summary>
            The image to render. This can be an Image, a Canvas, or a Video.
             </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Bitmap.imageCanvas">
             <summary>
            The image to render. This can be an Image, a Canvas, or a Video.
             </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Bitmap.imageVideo">
             <summary>
            The image to render. This can be an Image, a Canvas, or a Video.
             </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Bitmap.snapToPixel">
            <summary>
            Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Bitmap.sourceRect">
            <summary>
            (Rectangle) Specifies an area of the source image to draw. If omitted, the whole image will be drawn.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.BitmapAnimation">
            <summary>
            (extends DisplayObject) Displays frames or sequences of frames (ie. animations) from a sprite sheet image.
            A sprite sheet is a series of images (usually animation frames) combined into a single image.
            For example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).
            You can display individual frames, play frames as an animation, and even sequence animations together.
            See the SpriteSheet class for more information on setting up frames and animations.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.#ctor(SharpKit.EaselJS.SpriteSheet)">
            <summary>
            BitmapAnimation  Constructor
            </summary>
            <param name="imageOrUri">The SpriteSheet instance to play back.
            This includes the source image(s), frame dimensions, and frame data. See SpriteSheet for more information.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.advance">
            <summary>
            Advances the playhead. This occurs automatically each tick by default.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.cache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.clone">
            <summary>
            Returns a clone of the Point instance.
            </summary>
            <returns>a clone of the Point instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.gotoAndPlay(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets paused to false and plays the specified animation name, named frame, or frame number.
            </summary>
            <param name="frameOrAnimation">The frame number or animation name that the playhead should move to and begin playing.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.gotoAndPlay(SharpKit.JavaScript.JsString)">
            <summary>
            Sets paused to false and plays the specified animation name, named frame, or frame number.
            </summary>
            <param name="frameOrAnimation">The frame number or animation name that the playhead should move to and begin playing.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.gotoAndStop(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets paused to true and seeks to the specified animation name, named frame, or frame number.
            </summary>
            <param name="frameOrAnimation">The frame number or animation name that the playhead should move to and stop.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.gotoAndStop(SharpKit.JavaScript.JsString)">
            <summary>
            Sets paused to true and seeks to the specified animation name, named frame, or frame number.
            </summary>
            <param name="frameOrAnimation">The frame number or animation name that the playhead should move to and stop.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.play">
            <summary>
            no Doc.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.stop">
            <summary>
            no Doc.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.uncache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BitmapAnimation.updateCache">
            <summary>
            Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
            You should not cache Bitmap instances as it can degrade performance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.currentAnimation">
            <summary>
            Returns the currently playing animation. READ-ONLY.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.currentAnimationFrame">
            <summary>
            Specifies the current frame index within the current playing animation.
            When playing normally, this will increase successively from 0 to n-1, where n is the number of frames in the current animation.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.currentFrame">
            <summary>
            The frame that will be drawn when draw is called. Note that with some SpriteSheet data, this will advance non-sequentially. READ-ONLY.
            Default Value: -1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.offset">
            <summary>
            When used in conjunction with animations having an frequency greater than 1, this lets you offset which tick the playhead will advance on.
            For example, you could create two BitmapAnimations, both playing an animation with a frequency of 2, but one having offset set to 1.
            Both instances would advance every second tick, but they would advance on alternating ticks (effectively, one instance would advance on odd ticks, the other on even ticks).
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.onAnimationEnd">
            <summary>
            Specifies a function to call whenever any animation reaches its end.
            It will be called with two params: the first will be a reference to this instance, the second will be the name of the animation that just ended.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.paused">
            <summary>
            Prevents the animation from advancing each tick automatically.
            For example, you could create a sprite sheet of icons, set paused to true, and display the appropriate icon by setting currentFrame.
            Default Value: false
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.snapToPixel">
            <summary>
            Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.
            Default Value: true
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BitmapAnimation.spriteSheet">
            <summary>
            The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame data. See SpriteSheet for more information.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.BoxBlurFilter">
            <summary>
            BoxBlurFilter applies a box blur to DisplayObjects
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            BoxBlurFilter Constructor
            </summary>
            <param name="blurX"></param>
            <param name="blurY"></param>
            <param name="quality"></param>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.getBounds">
            <summary>
            Returns a rectangle with values indicating the margins required to draw the filter.
            For example, a filter that will extend the drawing area 4 pixels to the left, and 7 pixels to the right (but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0).
            </summary>
            <returns>a rectangle object indicating the margins required to draw the filter.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.BoxBlurFilter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.EaselJS.BoxBlurFilter.blurX">
            <summary>
            Horizontal blur radius
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BoxBlurFilter.blurY">
            <summary>
            Vertical blur radius
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.BoxBlurFilter.quality">
            <summary>
            Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a smoother blur, but take twice as long to run.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.ColorFilter">
            <summary>
            Applies color transforms.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.clone">
            <summary>
            Returns a clone of this ColorFilter instance.
            </summary>
            <returns>A clone of the current ColorFilter instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorFilter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.alphaOffset">
            <summary>
            Alpha channel offset (added to value).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.blueMultiplier">
            <summary>
            Blue channel multiplier.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.blueOffset">
            <summary>
            Blue channel offset (added to value).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.greenMultiplier">
            <summary>
            Green channel multiplier.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.greenOffset">
            <summary>
            Green channel offset (added to value).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.redMultiplier">
            <summary>
            Red channel multiplier.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorFilter.redOffset">
            <summary>
            Red channel offset
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.ColorMatrix">
            <summary>
            Provides helper functions for assembling a matrix for use with the ColorMatrixFilter. Can be used directly as the matrix for a ColorMatrixFilter.
            Most methods return the instance to facilitate chained calls. Ex. myColorMatrix.adjustHue(20).adjustBrightness(50);
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpKit.EaselJS.ColorMatrix.adjustBrightness(SharpKit.JavaScript.JsNumber)" -->
        <member name="M:SharpKit.EaselJS.ColorMatrix.adjustColor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Shortcut method to adjust brightness, contrast, saturation and hue.
            Equivalent to calling adjustHue(hue), adjustContrast(contrast), adjustBrightness(brightness), adjustSaturation(saturation), in that order.
            </summary>
            <param name="brightness"></param>
            <param name="contrast"></param>
            <param name="saturation"></param>
            <param name="hue"></param>
            <returns>The ColorMatrix instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpKit.EaselJS.ColorMatrix.adjustContrast(SharpKit.JavaScript.JsNumber)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpKit.EaselJS.ColorMatrix.adjustHue(SharpKit.JavaScript.JsNumber)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpKit.EaselJS.ColorMatrix.adjustSaturation(SharpKit.JavaScript.JsNumber)" -->
        <member name="M:SharpKit.EaselJS.ColorMatrix.clone">
            <summary>
            Returns a clone of this ColorMatrix.
            </summary>
            <returns>A clone of this ColorMatrix.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrix.concat(SharpKit.JavaScript.JsArray)">
            <summary>
            Concatenates (multiplies) the specified matrix with this one.
            </summary>
            <param name="matrix">An array or ColorMatrix instance.</param>
            <returns>The ColorMatrix instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrix.copyMatrix(SharpKit.JavaScript.JsArray)">
            <summary>
            Copy the specified matrix's values to this matrix.
            </summary>
            <param name="matrix">An array or ColorMatrix instance.</param>
            <returns>The ColorMatrix instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrix.reset">
            <summary>
            Resets the matrix to identity values.
            </summary>
            <returns>The ColorMatrix instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrix.toArray">
            <summary>
            Return a length 25 (5x5) array instance containing this matrix's values.
            </summary>
            <returns>An array holding this matrix's values.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.ColorMatrix.DELTA_INDEX">
            <summary>
            Array of delta values for contrast calculations.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorMatrix.IDENTITY_MATRIX">
            <summary>
            Identity matrix values.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.ColorMatrix.LENGTH">
            <summary>
            The constant length of a color matrix.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.ColorMatrixFilter">
            <summary>
            Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.clone">
            <summary>
            Returns a clone of this ColorMatrixFilter instance.
            </summary>
            <returns>A clone of the current ColorMatrixFilter instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.ColorMatrixFilter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="T:SharpKit.EaselJS.Command">
            <summary>
            Inner class used by the Graphics class. Used to create the instruction lists used in Graphics:
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Container">
            <summary>
            Class Container - extends DisplayObject
            Known Subclasses: MovieClip Stage
            A Container is a nestable display lists that allows you to work with compound display elements.
            For example you could group arm, leg, torso and head Bitmaps together into a Person Container, and transform them as a group,
            while still being able to move the individual parts relative to each other.
            Children of containers have their transform and alpha properties concatenated with their parent Container.
            For example, a Shape with x=100 and alpha=0.5, placed in a Container with x=50 and alpha=0.7 will be rendered to the canvas at x=150 and alpha=0.35.
            Containers have some overhead, so you generally shouldn't create a Container to hold a single child.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Container.addChild(SharpKit.EaselJS.DisplayObject)">
            <summary>
            Adds a child to the top of the display list. You can also add multiple children, such as "addChild(child1, child2, ...);".
            Returns the child that was added, or the last child if multiple children were added.
            </summary>
            <param name="child">The display object to add.</param>
            <returns>The child that was added, or the last child if multiple children were added.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.addChildAt(SharpKit.EaselJS.DisplayObject,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and setting its parent to this Container.
            You can also add multiple children, such as "addChildAt(child1, child2, ..., index);". The index must be between 0 and numChildren.
            For example, to add myShape under otherShape in the display list, you could use: container.addChildAt(myShape, container.getChildIndex(otherShape)).
            This would also bump otherShape's index up by one.
            Returns the last child that was added, or the last child if multiple children were added. Fails silently if the index is out of range.
            </summary>
            <param name="child">The display object to add.</param>
            <param name="index">The index to add the child at.</param>
            <returns>The child that was added, or the last child if multiple children were added.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.clone(System.Boolean)">
            <summary>
            Returns a clone of this Container. Some properties that are specific to this instance's current context are reverted to their defaults (for example .parent).
            </summary>
            <param name="recursive">If true, all of the descendants of this container will be cloned recursively.
            If false, the properties of the container will be cloned, but the new instance will not have any children.</param>
            <returns>A clone of the current Container instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.contains(SharpKit.EaselJS.DisplayObject)">
            <summary>
            Returns true if the specified display object either is this container or is a descendent. (child, grandchild, etc) of this container.
            </summary>
            <param name="child">The DisplayObject to be checked.</param>
            <returns>true if the specified display object either is this container or is a descendent.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
        </member>
        <member name="M:SharpKit.EaselJS.Container.getChildAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the child at the specified index.
            </summary>
            <param name="index">The index of the child to return.</param>
            <returns>The child at the specified index.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.getChildIndex(SharpKit.EaselJS.DisplayObject)">
            <summary>
            Returns the index of the specified child in the display list, or -1 if it is not in the display list.
            </summary>
            <param name="child">The child to return the index of.</param>
            <returns>The index of the specified child. -1 if the child is not found.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.getNumChildren">
            <summary>
            Returns the number of children in the display list.
            </summary>
            <returns>The number of children in the display list.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.getObjectsUnderPoint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns an array of all display objects under the specified coordinates that are in this container's display list.
            This routine ignores any display objects with mouseEnabled set to false.
            The array will be sorted in order of visual depth, with the top-most display object at index 0.
            This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.
            For example, if testing for objects under the mouse, test on tick (instead of on mousemove), and only if the mouse's position has changed.
            </summary>
            <param name="x">The x position in the container to test.</param>
            <param name="y">The y position in the container to test.</param>
            <returns>An Array of DisplayObjects under the specified coordinates.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.getObjectUnderPoint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Similar to getObjectsUnderPoint(), but returns only the top-most display object.
            This runs significantly faster than getObjectsUnderPoint(), but is still an expensive operation. See getObjectsUnderPoint() for more information.
            </summary>
            <param name="x">The x position in the container to test.</param>
            <param name="y">The y position in the container to test.</param>
            <returns>The top-most display object under the specified coordinates.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.hitTest(System.Object,System.Object)">
            <summary>
            Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the specified position).
            This ignores the alpha, shadow and compositeOperation of the display object, and all transform properties including regX/Y.
            </summary>
            <param name="x">The x position to check in the display object's local coordinates.</param>
            <param name="y">The y position to check in the display object's local coordinates.</param>
            <returns>A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified coordinates.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.removeAllChildren">
            <summary>
            Removes all children from the display list.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Container.removeChild(SharpKit.EaselJS.DisplayObject)">
            <summary>
            Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is already known.
            You can also remove multiple children, such as "removeChild(child1, child2, ...);".
            Returns true if the child (or children) was removed, or false if it was not in the display list.
            </summary>
            <param name="child">The child to remove.</param>
            <returns>true if the child (or children) was removed, or false if it was not in the display list.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.removeChildAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Removes the child at the specified index from the display list, and sets its parent to null.
            You can also remove multiple children, such as "removeChildAt(2, 7, ...);".
            Returns true if the child (or children) was removed, or false if any index was out of range.
            </summary>
            <param name="index">The index of the child to remove.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Container.setChildIndex(System.Object,System.Object)">
            <summary>
            Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.
            </summary>
            <param name="child"></param>
            <param name="index"></param>
        </member>
        <member name="M:SharpKit.EaselJS.Container.sortChildren(SharpKit.JavaScript.JsAction)">
            <summary>
            Performs an array sort operation on the child list.
            </summary>
            <param name="sortFunction">the function to use to sort the child list. See javascript's Array.sort documentation for details.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Container.swapChildren(System.Object,System.Object)">
            <summary>
            Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this Container.
            </summary>
            <param name="child1"></param>
            <param name="child2"></param>
        </member>
        <member name="M:SharpKit.EaselJS.Container.swapChildrenAt(System.Object,System.Object)">
            <summary>
            Swaps the children at the specified indexes. Fails silently if either index is out of range.
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
        </member>
        <member name="M:SharpKit.EaselJS.Container.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Container.children">
            <summary>
            The array of children in the display list.
            You should usually use the child management methods, rather than accessing this directly, but it is included for advanced users.
            Default Value: null
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.DOMElement">
            <summary>
            extends DisplayObject
            This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.
            A DOMElement allows you to associate a HTMLElement with the display list.
            It will be transformed within the DOM as though it is child of the Container it is added to.
            However, it is not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be drawn in front of or behind the canvas).
            The position of a DOMElement is relative to their parent node in the DOM.
            It is recommended that the DOM Object be added to a div that also contains the canvas so that they share the same position on the page.
            DOMElement is useful for positioning HTML elements over top of canvas content, and for elements that you want to display outside the bounds of the canvas.
            For example, a tooltip with rich HTML content.
            DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse events or support methods like hitTest.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.#ctor(SharpKit.Html.HtmlElement)">
            <summary>
            
            </summary>
            <param name="htmlElement">A reference or id for the DOM element to manage.</param>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.cache">
            <summary>
            Not applicable to DOMElement.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.clone">
            <summary>
            This presently clones the DOMElement instance, but not the associated HTMLElement.
            </summary>
            <returns>a clone of the DOMElement instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.globalToLocal">
            <summary>
            Not applicable to DOMElement.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.uncache">
            <summary>
            Not applicable to DOMElement.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.DOMElement.updateCache">
            <summary>
            Not applicable to DOMElement.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.DOMElement.htmlElement">
            <summary>
            The DOM object to manage.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Filter">
            <summary>
            Base class that all filters should inherit from.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
            <param name="targetY">Optional. The y position to draw the result to. Defaults to the value passed to y.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
            <param name="targetX">Optional. The x position to draw the result to. Defaults to the value passed to x.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
            <param name="targetCtx"> Optional. The 2D context to draw the result to. Defaults to the context passed to ctx.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.applyFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Applies the filter to the specified context.
            </summary>
            <param name="ctx">The 2D context to use as the source.</param>
            <param name="x">The x position to use for the source rect.</param>
            <param name="y">The y position to use for the source rect.</param>
            <param name="width">The width to use for the source rect.</param>
            <param name="height">The height to use for the source rect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.clone">
            <summary>
            Returns a clone of this Filter instance.
            </summary>
            <returns>A clone of the current Filter instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.getBounds">
            <summary>
            Returns a rectangle with values indicating the margins required to draw the filter.
            For example, a filter that will extend the drawing area 4 pixels to the left,
            and 7 pixels to the right (but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Filter.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="T:SharpKit.EaselJS.Graphics">
            <summary>
            The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a specified context.
            Note that you can use Graphics without any dependency on the Easel framework by calling draw() directly,
            or it can be used with the Shape object to draw vector graphics within the context of an Easel display list.
            Note that all drawing methods in Graphics return the Graphics instance, so they can be chained together.
            For example, the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill, then render it to the specified context2D:
            myGraphics.beginStroke("#F00").beginFill("#00F").drawRect(20, 20, 100, 50).draw(myContext2D);
            </summary>
            <example>
            <code>
            var g = new Graphics();
            g.setStrokeStyle(1);
            g.beginStroke(Graphics.getRGB(0,0,0));
            g.beginFill(Graphics.getRGB(255,0,0));
            g.drawCircle(0,0,3);
            var s = new Shape(g);
            s.x = 100;
            s.y = 100;
            stage.addChild(s);
            stage.update();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.arc(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y).
            For example arc(100, 100, 20, 0, Math.PI*2) would draw a full circle with a radius of 20 centered at (100, 100). For detailed information, read the whatwg spec.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="startAngle">Measured in radians.</param>
            <param name="endAngle">Measured in radians.</param>
            <param name="anticlockwise"></param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.arcTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws an arc with the specified control points and radius. For detailed information, read the whatwg spec.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="radius"></param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(System.Object)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlImageElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlImageElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlCanvasElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlCanvasElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlVideoElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapFill(SharpKit.Html.HtmlVideoElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(System.Object)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlImageElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlImageElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlCanvasElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlCanvasElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlVideoElement,SharpKit.JavaScript.JsString)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <param name="repetition">Optional. Indicates whether to repeat the image in the fill area. One of "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginBitmapStroke(SharpKit.Html.HtmlVideoElement)">
            <summary>
            Begins a pattern fill using the specified image. This ends the current subpath.
            </summary>
            <param name="image">The Image, Canvas, or Video object to use as the pattern.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginFill(SharpKit.JavaScript.JsString)">
            <summary>
            Begins a fill with the specified color. This ends the current subpath.
            </summary>
            <param name="color">A CSS compatible color value (ex. "#FF0000" or "rgba(255,0,0,0.5)"). Setting to null will result in no fill.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginLinearGradientFill(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsNumber},SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current subpath.
            For example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:
            myGraphics.beginLinearGradientFill(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
            </summary>
            <param name="colors">An array of CSS compatible color values. For example, ["#F00","#00F"] would define a gradient drawing from red to blue.</param>
            <param name="ratios">An array of gradient positions which correspond to the colors.
            For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%.</param>
            <param name="x0">The position of the first point defining the line that defines the gradient direction and size.</param>
            <param name="y0">The position of the first point defining the line that defines the gradient direction and size.</param>
            <param name="x1">The position of the second point defining the line that defines the gradient direction and size.</param>
            <param name="y1">The position of the second point defining the line that defines the gradient direction and size.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginLinearGradientStroke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current subpath.
            For example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:
            myGraphics.setStrokeStyle(10).beginLinearGradientStroke(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
            </summary>
            <param name="colors">An array of CSS compatible color values. For example, ["#F00","#00F"] would define a gradient drawing from red to blue.</param>
            <param name="ratios">An array of gradient positions which correspond to the colors.
            For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%.</param>
            <param name="x0">The position of the first point defining the line that defines the gradient direction and size.</param>
            <param name="y0">The position of the first point defining the line that defines the gradient direction and size.</param>
            <param name="x1">The position of the second point defining the line that defines the gradient direction and size.</param>
            <param name="y1">The position of the second point defining the line that defines the gradient direction and size.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginRadialGradientFill(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsNumber},SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Begins a radial gradient fill.
            This ends the current subpath. For example, the following code defines a red to blue radial gradient centered at (100, 100),
            with a radius of 50, and draws a circle to display it:
            myGraphics.beginRadialGradientFill(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);
            </summary>
            <param name="colors">An array of CSS compatible color values. For example, ["#F00","#00F"] would define a gradient drawing from red to blue.</param>
            <param name="ratios">An array of gradient positions which correspond to the colors.
            For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%.</param>
            <param name="x0">Center position of the inner circle that defines the gradient.</param>
            <param name="y0">Center position of the inner circle that defines the gradient.</param>
            <param name="r0">Radius of the inner circle that defines the gradient.</param>
            <param name="x1">Center position of the outer circle that defines the gradient.</param>
            <param name="y1">Center position of the outer circle that defines the gradient.</param>
            <param name="r1">Radius of the outer circle that defines the gradient.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginRadialGradientStroke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Begins a radial gradient fill.
            This ends the current subpath. For example, the following code defines a red to blue radial gradient centered at (100, 100),
            with a radius of 50, and draws a circle to display it:
            myGraphics.beginRadialGradientFill(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);
            </summary>
            <param name="colors">An array of CSS compatible color values. For example, ["#F00","#00F"] would define a gradient drawing from red to blue.</param>
            <param name="ratios">An array of gradient positions which correspond to the colors.
            For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%.</param>
            <param name="x0">Center position of the inner circle that defines the gradient.</param>
            <param name="y0">Center position of the inner circle that defines the gradient.</param>
            <param name="r0">Radius of the inner circle that defines the gradient.</param>
            <param name="x1">Center position of the outer circle that defines the gradient.</param>
            <param name="y1">Center position of the outer circle that defines the gradient.</param>
            <param name="r1">Radius of the outer circle that defines the gradient.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.beginStroke(System.Object)">
            <summary>
            Begins a stroke with the specified color. This ends the current subpath.
            </summary>
            <param name="color">A CSS compatible color value (ex. "#FF0000" or "rgba(255,0,0,0.5)"). Setting to null will result in no stroke.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.bezierCurveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x, cp2y).
            For detailed information, read the whatwg spec. method @bezierCurveTo
            </summary>
            <param name="cp1x"></param>
            <param name="cp1y"></param>
            <param name="cp2x"></param>
            <param name="cp2y"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.clear">
            <summary>
            Clears all drawing instructions, effectively reseting this Graphics instance.
            </summary>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.clone">
            <summary>
            Returns a clone of this Graphics instance.
            </summary>
            <returns>A clone of the current Graphics instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.closePath">
            <summary>
            Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified since the fill or stroke was last set.
            </summary>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.decodePath(SharpKit.JavaScript.JsString)">
            <summary>
            Decodes a compact encoded path string into a series of draw instructions.
            This format is not intended to be human readable, and is meant for use by authoring tools.
            The format uses a base64 character set, with each character representing 6 bits, to define a series of draw commands. 
            Each command is comprised of a single "header" character followed by a variable number of alternating x and y position values.
            Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-7 unused).
            Bit 4 indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the latter. Bits 5 and 6 are currently unused. 
            Following the header is a series of 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo) parameters.
            These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the 4th bit in the command char).
            These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed by an 11 (2 char) or 17 (3 char) bit integer value.
            All position values are in tenths of a pixel. Except in the case of move operations, this value is a delta from the previous x or y position (as appropriate). 
            For example, the string "A3cAAMAu4AAA" represents a line starting at -150,0 and ending at 150,0. A - bits 000000.
            First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per parameter. n0 - 110111011100.
            Absolute x position of -150.0px. First bit indicates a negative value, remaining bits indicate 1500 tenths of a pixel. AA - 000000000000.
            Absolute y position of 0. I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.
            Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to provide an absolute position of +150.0px. AAA - 000000000000000000. A y delta value of 0.
            </summary>
            <param name="str">The path string to decode.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.draw(SharpKit.Html.CanvasRenderingContext2D)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform. Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx"> The canvas 2D context object to draw into.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawAsPath(SharpKit.Html.CanvasRenderingContext2D)">
            <summary>
            Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and stroke descriptions.
            Used by DisplayObject.clippingPath to draw the clipping path, for example.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawCircle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a circle with the specified radius at (x, y).
            </summary>
            <param name="x">x coordinate center point of circle.</param>
            <param name="y">y coordinate center point of circle.</param>
            <param name="radius">Radius of circle.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
            <example>
            <code>
            var g = new Graphics();
            g.setStrokeStyle(1);
            g.beginStroke(Graphics.getRGB(0,0,0));
            g.beginFill(Graphics.getRGB(255,0,0));
            g.drawCircle(0,0,3);
            var s = new Shape(g);
            s.x = 100;
            s.y = 100;
            stage.addChild(s);
            stage.update();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawEllipse(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws an ellipse (oval).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawPolyStar(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a star if pointSize is greater than 0 or a regular polygon if pointSize is 0 with the specified number of points.
            For example, the following code will draw a familiar 5 pointed star shape centered at 100,
            100 and with a radius of 50: myGraphics.beginFill("#FF0").drawPolyStar(100, 100, 50, 5, 0.6, -90); // -90 makes the first point vertical
            </summary>
            <param name="x">Position of the center of the shape.</param>
            <param name="y">Position of the center of the shape.</param>
            <param name="radius">The outer radius of the shape.</param>
            <param name="sides">The number of points on the star or sides on the polygon.</param>
            <param name="pointSize">The depth or "pointy-ness" of the star points. A pointSize of 0 will draw a regular polygon (no points),
            a pointSize of 1 will draw nothing because the points are infinitely pointy.</param>
            <param name="angle">The angle of the first point / corner. For example a value of 0 will draw the first point directly to the right of the center.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawRoundRect(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a rounded rectangle with all corners with the specified radius.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="radius">Corner radius.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.drawRoundRectComplex(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="radiusTL">Top left corner radius.</param>
            <param name="radiusTR">Top right corner radius.</param>
            <param name="radiusBR">Bottom right corner radius.</param>
            <param name="radiusBL">Bottom left corner radius.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.endFill">
            <summary>
            Ends the current subpath, and begins a new one with no fill. Functionally identical to beginFill(null).
            </summary>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.endStroke">
            <summary>
            Ends the current subpath, and begins a new one with no stroke. Functionally identical to beginStroke(null).
            </summary>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.getHSL(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a CSS compatible color string based on the specified HSL numeric color values in the format "hsla(360,100,100,1.0)",
            or if alpha is null then in the format "hsl(360,100,100)". For example, Graphics.getHSL(150, 100, 70) will return "hsl(150,100,70)".
            </summary>
            <param name="hue">The hue component for the color, between 0 and 360.</param>
            <param name="saturation">The saturation component for the color, between 0 and 100.</param>
            <param name="lightness">The lightness component for the color, between 0 and 100.</param>
            <param name="alpha">Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.getHSL(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a CSS compatible color string based on the specified HSL numeric color values in the format "hsla(360,100,100,1.0)",
            or if alpha is null then in the format "hsl(360,100,100)". For example, Graphics.getHSL(150, 100, 70) will return "hsl(150,100,70)".
            </summary>
            <param name="hue">The hue component for the color, between 0 and 360.</param>
            <param name="saturation">The saturation component for the color, between 0 and 100.</param>
            <param name="lightness">The lightness component for the color, between 0 and 100.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.getRGB(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a CSS compatible color string based on the specified RGB numeric color values in the format "rgba(255,255,255,1.0)",
            or if alpha is null then in the format "rgb(255,255,255)". For example, Graphics.getRGB(50, 100, 150, 0.5) will return "rgba(50,100,150,0.5)".
            It also supports passing a single hex color value as the first param, and an optional alpha value as the second param.
            For example, Graphics.getRGB(0xFF00FF, 0.2) will return "rgba(255,0,255,0.2)".
            </summary>
            <param name="r">The red component for the color, between 0 and 0xFF (255).</param>
            <param name="g">The green component for the color, between 0 and 0xFF (255).</param>
            <param name="b">The blue component for the color, between 0 and 0xFF (255).</param>
            <param name="alpha">Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.getRGB(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a CSS compatible color string based on the specified RGB numeric color values in the format "rgba(255,255,255,1.0)",
            or if alpha is null then in the format "rgb(255,255,255)". For example, Graphics.getRGB(50, 100, 150, 0.5) will return "rgba(50,100,150,0.5)".
            It also supports passing a single hex color value as the first param, and an optional alpha value as the second param.
            For example, Graphics.getRGB(0xFF00FF, 0.2) will return "rgba(255,0,255,0.2)".
            </summary>
            <param name="r">The red component for the color, between 0 and 0xFF (255).</param>
            <param name="g">The green component for the color, between 0 and 0xFF (255).</param>
            <param name="b">The blue component for the color, between 0 and 0xFF (255).</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.lineTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a line from the current drawing point to the specified position, which become the new current drawing point. For detailed information, read the whatwg spec.
            </summary>
            <param name="x">The x coordinate the drawing point should draw to.</param>
            <param name="y">The y coordinate the drawing point should draw to.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.moveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Moves the drawing point to the specified position.
            </summary>
            <param name="x">The x coordinate the drawing point should move to.</param>
            <param name="y">The y coordinate the drawing point should move to.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.quadraticCurveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed information, read the whatwg spec.
            </summary>
            <param name="cpx"></param>
            <param name="cpy"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.rect(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke. For detailed information, read the whatwg spec.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w">Width of the rectangle</param>
            <param name="h">Height of the rectangle</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.setStrokeStyle(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the stroke style for the current subpath. Like all drawing methods, this can be chained,
            so you can define the stroke style and color in a single line of code like so: myGraphics.setStrokeStyle(8,"round").beginStroke("#F00");
            </summary>
            <param name="thickness">The width of the stroke.</param>
            <param name="caps">Optional. Indicates the type of caps to use at the end of lines. One of butt, round, or square.
            Defaults to "butt". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with the tiny API.</param>
            <param name="joints">Optional. Specifies the type of joints that should be used where two lines meet. One of bevel, round, or miter.
            Defaults to "miter". Also accepts the values 0 (miter), 1 (round), and 2 (bevel) for use with the tiny API.</param>
            <param name="miter"> Optional. If joints is set to "miter", then you can specify a miter limit ratio which controls at what point a mitered joint will be clipped.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.setStrokeStyle(System.Object,System.Object,System.Object)">
            <summary>
            Sets the stroke style for the current subpath. Like all drawing methods, this can be chained,
            so you can define the stroke style and color in a single line of code like so: myGraphics.setStrokeStyle(8,"round").beginStroke("#F00");
            </summary>
            <param name="thickness">The width of the stroke.</param>
            <param name="caps">Optional. Indicates the type of caps to use at the end of lines. One of butt, round, or square.
            Defaults to "butt". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with the tiny API.</param>
            <param name="joints">Optional. Specifies the type of joints that should be used where two lines meet. One of bevel, round, or miter.
            Defaults to "miter". Also accepts the values 0 (miter), 1 (round), and 2 (bevel) for use with the tiny API.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.setStrokeStyle(System.Object,System.Object)">
            <summary>
            Sets the stroke style for the current subpath. Like all drawing methods, this can be chained,
            so you can define the stroke style and color in a single line of code like so: myGraphics.setStrokeStyle(8,"round").beginStroke("#F00");
            </summary>
            <param name="thickness">The width of the stroke.</param>
            <param name="caps">Optional. Indicates the type of caps to use at the end of lines. One of butt, round, or square.
            Defaults to "butt". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with the tiny API.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.setStrokeStyle(System.Object)">
            <summary>
            Sets the stroke style for the current subpath. Like all drawing methods, this can be chained,
            so you can define the stroke style and color in a single line of code like so: myGraphics.setStrokeStyle(8,"round").beginStroke("#F00");
            </summary>
            <param name="thickness">The width of the stroke.</param>
            <returns>The Graphics instance the method is called on (useful for chaining calls.)</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Graphics.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Graphics.BASE_64">
            <summary>
            Map of Base64 characters to values. Used by decodePath().
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Graphics.curveTo">
            <summary>
            Maps the familiar ActionScript curveTo() method to the functionally similar quatraticCurveTo() method.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Graphics.drawRect">
            <summary>
            Maps the familiar ActionScript drawRect() method to the functionally similar rect() method.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Graphics.STROKE_CAPS_MAP">
            <summary>
            Maps numeric values for the caps parameter of setStrokeStyle to corresponding string values. This is primarily for use with the tiny API.
            The mappings are as follows: 0 to "butt", 1 to "round", and 2 to "square". For example, myGraphics.ss(16, 2) would set the line caps to "square".
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Graphics.STROKE_JOINTS_MAP">
            <summary>
            Maps numeric values for the joints parameter of setStrokeStyle to corresponding string values.
            This is primarily for use with the tiny API. The mappings are as follows: 0 to "miter", 1 to "round", and 2 to "bevel".
            For example, myGraphics.ss(16, 0, 2) would set the line joints to "bevel".
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Matrix2D">
            <summary>
            Represents an affine transformation matrix, and provides tools for constructing and concatenating matrixes.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            
            </summary>
            <param name="a">Specifies the a property for the new matrix.</param>
            <param name="b">Specifies the b property for the new matrix.</param>
            <param name="c">Specifies the c property for the new matrix.</param>
            <param name="d">Specifies the d property for the new matrix.</param>
            <param name="tx">Specifies the tx property for the new matrix.</param>
            <param name="ty">Specifies the ty property for the new matrix.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.append(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Appends the specified matrix properties with this matrix. All parameters are required.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tx"></param>
            <param name="ty"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.appendMatrix(SharpKit.EaselJS.Matrix2D)">
            <summary>
            Appends the specified matrix with this matrix.
            </summary>
            <param name="matrix"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.appendProperties(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.EaselJS.Shadow,SharpKit.JavaScript.JsString)">
            <summary>
            Reinitializes all matrix properties to those specified.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="alpha">desired alpha value</param>
            <param name="shadow">desired shadow value</param>
            <param name="compositeOperation">desired composite operation value</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.appendTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and appends them with this matrix. For example,
            you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <param name="regX">Optional</param>
            <param name="regY">Optional</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.appendTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and appends them with this matrix. For example,
            you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <param name="regX">Optional</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.appendTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and appends them with this matrix. For example,
            you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.clone">
            <summary>
            Returns a clone of the Matrix2D instance.
            </summary>
            <returns>a clone of the Matrix2D instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.decompose(System.Object)">
            <summary>
            Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation).
            Note that this these values may not match the transform properties you used to generate the matrix, though they will produce the same visual results.
            </summary>
            <param name="target">The object to apply the transform properties to. If null, then a new object will be returned.</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.invert">
            <summary>
            Inverts the matrix, causing it to perform the opposite transformation.
            </summary>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.isIdentity">
            <summary>
            Returns true if the matrix is an identity matrix.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prepend(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Concatenates the specified matrix properties with this matrix. All parameters are required.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tx"></param>
            <param name="ty"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prependMatrix(SharpKit.EaselJS.Matrix2D)">
            <summary>
            Prepends the specified matrix with this matrix.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prependProperties(SharpKit.JavaScript.JsNumber,SharpKit.EaselJS.Shadow,SharpKit.JavaScript.JsString)">
            <summary>
            Prepends the specified visual properties to the current matrix.
            </summary>
            <param name="alpha">desired alpha value</param>
            <param name="shadow">desired shadow value</param>
            <param name="compositeOperation">desired composite operation value</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prependTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.
            For example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <param name="regX">Optional</param>
            <param name="regY">Optional</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prependTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.
            For example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <param name="regX">Optional</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.prependTransform(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.
            For example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="rotation"></param>
            <param name="skewX"></param>
            <param name="skewY"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.rotate(SharpKit.JavaScript.JsNumber)">
            <summary>
            Applies a rotation transformation to the matrix.
            </summary>
            <param name="angle">The angle in degrees.</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.scale(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Applies a scale transformation to the matrix.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.skew(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Applies a skew transformation to the matrix.
            </summary>
            <param name="skewX">The amount to skew horizontally in degrees.</param>
            <param name="skewY">The amount to skew vertically in degrees.</param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Matrix2D.translate(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translates the matrix on the x and y axes.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>This matrix. Useful for chaining method calls.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.a">
            <summary>
            Position (0, 0) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.alpha">
            <summary>
            Property representing the alpha that will be applied to a display object.
            This is not part of matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.atx">
            <summary>
            Position (2, 0) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.b">
            <summary>
            Position (0, 1) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.c">
            <summary>
            Position (1, 0) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.compositeOperation">
            <summary>
            Property representing the compositeOperation that will be applied to a display object.
            This is not part of matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated compositeOperation values.
            You can find a list of valid composite operations at: https://developer.mozilla.org/en/Canvas_tutorial/Compositing
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.d">
            <summary>
            Position (1, 1) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.DEG_TO_RAD">
            <summary>
            Multiplier for converting degrees to radians. Used internally by Matrix2D. Read-only.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.identity">
            <summary>
            An identity matrix, representing a null transformation. Read-only.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.shadow">
            <summary>
            Property representing the shadow that will be applied to a display object.
            This is not part of matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Matrix2D.ty">
            <summary>
            Position (2, 1) in a 3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.MouseEvent">
            <summary>
            This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, onMouseOver, onMouseOut and onClick handlers on DisplayObject instances.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.MouseEvent.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.MouseEvent,SharpKit.JavaScript.JsNumber,System.Boolean,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            
            </summary>
            <param name="type">The event type.</param>
            <param name="stageX">The normalized x position relative to the stage.</param>
            <param name="stageY">The normalized y position relative to the stage.</param>
            <param name="target">The display object this event relates to.</param>
            <param name="nativeEvent">The native DOM event related to this mouse event.</param>
            <param name="pointerID">The unique id for the pointer.</param>
            <param name="primary">Indicates whether this is the primary pointer in a multitouch environment.</param>
            <param name="rawX">The raw x position relative to the stage.</param>
            <param name="rawY">The raw y position relative to the stage.</param>
        </member>
        <member name="M:SharpKit.EaselJS.MouseEvent.clone">
            <summary>
            Returns a clone of the MouseEvent instance.
            </summary>
            <returns>a clone of the MouseEvent instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.MouseEvent.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.nativeEvent">
            <summary>
            The native MouseEvent generated by the browser. The properties and API for this event may differ between browsers.
            This property will be null if the EaselJS property was not directly generated from a native MouseEvent.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.pointerID">
            <summary>
            The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system supplied id value.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.primaryPointer">
            <summary>
            Indicates whether this is the primary pointer in a multitouch environment.
            This will always be true for the mouse. For touch pointers, the first pointer in the current stack will be considered the primary pointer.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.rawX">
            <summary>
            The raw x position relative to the stage.
            Normally this will be the same as the stageX value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.rawY">
            <summary>
            The raw y position relative to the stage.
            Normally this will be the same as the stageY value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.stageX">
            <summary>
            The normalized x position on the stage. This will always be within the range 0 to stage width.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.stageY">
            <summary>
            The normalized y position on the stage. This will always be within the range 0 to stage height.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.target">
            <summary>
            The display object this event relates to.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.type">
            <summary>
            The type of mouse event. This will be the same as the handler it maps to (onPress, onMouseDown, onMouseUp, onMouseMove, or onClick).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.onMouseMove">
            <summary>
            For events of type "onPress" only you can assign a handler to the onMouseMove property.
            This handler will be called every time the mouse is moved until the mouse is released. This is useful for operations such as drag and drop.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MouseEvent.onMouseUp">
            <summary>
            For events of type "onPress" only you can assign a handler to the onMouseUp property.
            This handler will be called every time the mouse is moved until the mouse is released. This is useful for operations such as drag and drop.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.MovieClip">
            <summary>
            extends Container
            The MovieClip class associates a TweenJS Timeline with an EaselJS Container.
            It allows you to create objects which encapsulate timeline animations, state changes, and synched actions.
            Due to the complexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included in the main EaselJS library. 
            Currently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have been made to support time based timelines in the future.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="mode">Initial value for the mode property. One of MovieClip.INDEPENDENT, MovieClip.SINGLE_FRAME, or MovieClip.SYNCHED.</param>
            <param name="startPosition">Initial value for the startPosition property.</param>
            <param name="loop">Initial value for the loop property.</param>
            <param name="labels">A hash of labels to pass to the timeline instance associated with this MovieClip.</param>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.clone">
            <summary>
            MovieClip instances cannot be cloned.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.gotoAndPlay(System.Object)">
            <summary>
            Advances this movie clip to the specified position or label and sets paused to false.
            </summary>
            <param name="positionOrLabel"></param>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.gotoAndStop(System.Object)">
            <summary>
            Advances this movie clip to the specified position or label and sets paused to true.
            </summary>
            <param name="positionOrLabel"></param>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.play">
            <summary>
            Sets paused to false.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.stop">
            <summary>
            Sets paused to true.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.MovieClip.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.actionsEnabled">
            <summary>
            If true, actions in this MovieClip's tweens will be run when the playhead advances.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.INDEPENDENT">
            <summary>
            Read-only. The MovieClip will advance independently of its parent, even if its parent is paused. This is the default mode.
            Default Value: "independent"
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.loop">
            <summary>
            Indicates whether this MovieClip should loop when it reaches the end of its timeline.
            Default Value: true
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.mode">
            <summary>
            Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED). See each constant for a description of the behaviour.
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.paused">
            <summary>
            If true, the MovieClip's position will not advance when ticked.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.SINGLE_FRAME">
            <summary>
            Read-only. The MovieClip will only display a single frame (as determined by the startPosition property).
            Default Value: "single"
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.startPosition">
            <summary>
            Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.SYNCHED">
            <summary>
            Read-only. The MovieClip will be advanced only when it's parent advances and will be synched to the position of the parent MovieClip.
            Default Value: "synched"
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.MovieClip.timeline">
            <summary>
            The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip instance is initialized.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Point">
            <summary>
            Represents a point on a 2 dimensional x / y coordinate system.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Point.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            
            </summary>
            <param name="x">X position. Default is 0.</param>
            <param name="y">Y position. Default is 0.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Point.clone">
            <summary>
            Returns a clone of the Point instance.
            </summary>
            <returns>a clone of the Point instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Point.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Point.x">
            <summary>
            X position.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Point.y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Rectangle">
            <summary>
            Represents a rectangle as defined by the points (x, y) and (x+width, y+height).
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Rectangle.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            
            </summary>
            <param name="x">X position. Default is 0.</param>
            <param name="y">Y position. Default is 0.</param>
            <param name="width">Width. Default is 0.</param>
            <param name="height">Height. Default is 0.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Rectangle.clone">
            <summary>
            Returns a clone of the Rectangle instance.
            </summary>
            <returns>a clone of the Rectangle instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Rectangle.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Rectangle.height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Rectangle.width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Rectangle.x">
            <summary>
            X position.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Rectangle.y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Shadow">
            <summary>
            Encapsulates the properties required to define a shadow to apply to a DisplayObject via it's .shadow property.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Shadow.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            
            </summary>
            <param name="color">The color of the shadow.</param>
            <param name="offsetX">The x offset of the shadow.</param>
            <param name="offsetY">The y offset of the shadow.</param>
            <param name="blur">The size of the blurring effect.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Shadow.clone">
            <summary>
            Returns a clone of this Shadow instance.
            </summary>
            <returns>a clone of the Shadow instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Shadow.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Shadow.blur">
            <summary>
            The blur of the shadow. property blur
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Shadow.color">
            <summary>
            The color of the shadow. property color
            Default Value: null
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Shadow.identity">
            <summary>
            An identity shadow object (all properties are set to 0). Read-only.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Shadow.offsetX">
            <summary>
            The x offset of the shadow. property offsetX
            Default Value: 0
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Shadow.Name">
            <summary>
            The y offset of the shadow. property offsetY
            Default Value: 0
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Shape">
            <summary>
            A Shape allows you to display vector art in the display list.
            It composites a Graphics instance which exposes all of the vector drawing methods.
            The Graphics instance can be shared between multiple Shape instances to display the same vector graphics with different positions or transforms.
            If the vector art will not change between draws, you may want to use the cache() method to reduce the rendering cost.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Shape.clone(System.Boolean)">
            <summary>
            Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to their defaults (for example .parent).
            </summary>
            <param name="recursive">If true, this Shape's Graphics instance will also be cloned. If false, the Graphics instance will be shared with the new Shape.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Shape.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the Shape into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality). NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Shape.isVisible">
            <summary>
            Returns true or false indicating whether the Shape would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the Shape would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Shape.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Shape.graphics">
            <summary>
            The graphics instance to display.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.SpriteSheet">
            <summary>
            Encapsulates the properties and methods associated with a sprite sheet.
            A sprite sheet is a series of images (usually animation frames) combined into a larger image (or images).
            For example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).
            The data passed to the SpriteSheet constructor defines three critical pieces of information:
            The image or images to use.
            The positions of individual image frames. This data can be represented in one of two ways:
            As a regular grid of sequential, equal-sized frames, or as individually defined, variable sized frames arranged in an irregular (non-sequential) fashion.
            Likewise, animations can be represented in two ways: As a series of sequential frames, defined by a start and end frame [0,3], or as a list of frames [0,1,2,3].
            The easiest way to understand the data format is to see an example:
            </summary>
            <example>
            <code>
            data = {
             
            // DEFINING IMAGES:
            	// list of images or image URIs to use. SpriteSheet can handle preloading.
            	// the order dictates their index value for frame definition.
            	images: [image1, "path/to/image2.png"],
             
            // DEFINING FRAMES:
             
            	// the simple way to define frames, only requires frame size because frames are consecutive:
            	// define frame width/height, and optionally the frame count and registration point x/y.
            	// if count is omitted, it will be calculated automatically based on image dimensions.
            	frames: {width:64, height:64, count:20, regX: 32, regY:64},
             
            	// OR, the complex way that defines individual rects for frames.
            	// The 5th value is the image index per the list defined in "images" (defaults to 0).
            	frames: [
            		// x, y, width, height, imageIndex, regX, regY
            		[0,0,64,64,0,32,64],
            		[64,0,96,64,0]
            	],
             
            // DEFINING ANIMATIONS:
             
            	// simple animation definitions. Define a consecutive range of frames.
            	// also optionally define a "next" animation name for sequencing.
            	// setting next to false makes it pause when it reaches the end.
            	animations: {
            		// start, end, next, frequency
            		run: [0,8],
            		jump: [9,12,"run",2],
            		stand: [13]
            	}
             
            	// the complex approach which specifies every frame in the animation by index.
            	animations: {
            		run: {
            			frames: [1,2,3,3,2,1]
            		},
            		jump: {
            			frames: [1,4,5,6,1],
            			next: "run",
            			frequency: 2
            		},
            		stand: { frames: [7] }
            	}
             
            	// the above two approaches can be combined, you can also use a single frame definition:
            	animations: {
            		run: [0,8,true,2],
            		jump: {
            			frames: [8,9,10,9,8],
            			next: "run",
            			frequency: 2
            		},
            		stand:7
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.clone">
            <summary>
            Returns a clone of the SpriteSheet instance.
            </summary>
            <returns>a clone of the SpriteSheet instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.getAnimation(System.Object)">
            <summary>
            Returns an object defining the specified animation.
            The returned object has a frames property containing an array of the frame id's in the animation,
            a frequency property indicating the advance frequency for this animation, a name property, and a next property, which specifies the default next animation.
            If the animation loops, the name and next property will be the same.
            </summary>
            <param name="name">The name of the animation to get.</param>
            <returns>a generic object with frames, frequency, name, and next properties.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.getAnimations">
            <summary>
            Returns an array of all available animation names as strings.
            </summary>
            <returns>an array of animation names available on this sprite sheet.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.getFrame(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns an object specifying the image and source rect of the specified frame.
            The returned object has an image property holding a reference to the image object in which the frame is found,
            and a rect property containing a Rectangle instance which defines the boundaries for the frame within that image.
            </summary>
            <param name="frameIndex">The index of the frame.</param>
            <returns>a generic object with image and rect properties. Returns null if the frame does not exist, or the image is not fully loaded.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.getNumFrames(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the total number of frames in the specified animation, or in the whole sprite sheet if the animation param is omitted.
            </summary>
            <param name="animation">The name of the animation to get a frame count for.</param>
            <returns>The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheet.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheet.complete">
            <summary>
            Read-only property indicating whether all images are finished loading.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheet.onComplete">
            <summary>
            The onComplete callback is called when all images are loaded.
            Note that this only fires if the images were not fully loaded when the sprite sheet was initialized.
            You should check the complete property to prior to adding an onComplete handler. Ex.
            </summary>
            <example>
            <code>
            var sheet = new SpriteSheet(data);
            if (!sheet.complete) {
              // not preloaded, listen for onComplete:
              sheet.onComplete = handler;
            }
            </code>
            </example>
        </member>
        <member name="T:SharpKit.EaselJS.AnimationConfig">
            <summary>
            an object defining the specified animation.
            The returned object has a frames property containing an array of the frame id's in the animation,
            a frequency property indicating the advance frequency for this animation, a name property, and a next property, which specifies the default next animation.
            If the animation loops, the name and next property will be the same.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.frames">
            <summary>
            containing an array of the frame id's in the animation
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.frequency">
            <summary>
            indicating the advance frequency for this animation
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.name">
            <summary>
            a name property
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.next">
            <summary>
            specifies the default next animation
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.nameString">
            <summary>
            a name property
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.AnimationConfig.nextString">
            <summary>
            specifies the default next animation
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.FrameConfig">
            <summary>
            an object specifying the image and source rect of the specified frame.
            The returned object has an image property holding a reference to the image object in which the frame is found,
            and a rect property containing a Rectangle instance which defines the boundaries for the frame within that image.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.FrameConfig.image">
            <summary>
            holding a reference to the image object in which the frame is found,
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.FrameConfig.rect">
            <summary>
            containing a Rectangle instance which defines the boundaries for the frame within that image.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.SpriteSheetBuilder">
            <summary>
            The SpriteSheetBuilder allows you to generate sprite sheets at run time from any display object.
            This can allow you to maintain your assets as vector graphics (for low file size), and render them at run time as sprite sheets for better performance. 
            Sprite sheets can be built either synchronously, or asynchronously, so that large sprite sheets can be generated without locking the UI. 
            Note that the "images" used in the generated sprite sheet are actually canvas elements,
            and that they will be sized to the nearest power of 2 up to the value of maxWidth or maxHeight.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.Rectangle,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame. If not specified, it will look for a getBounds method,
            bounds property, or nominalBounds property on the source to use. If one is not found, the frame will be skipped.</param>
            <param name="scale">Optional. The scale to draw this frame at. Default is 1.</param>
            <param name="setupFunction">Optional. A function to call immediately before drawing this frame.</param>
            <param name="setupParams">Optional. Parameters to pass to the setup function.</param>
            <param name="setupScope">Optional. The scope to call the setupFunction in.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.Rectangle,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsArray)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame. If not specified, it will look for a getBounds method,
            bounds property, or nominalBounds property on the source to use. If one is not found, the frame will be skipped.</param>
            <param name="scale">Optional. The scale to draw this frame at. Default is 1.</param>
            <param name="setupFunction">Optional. A function to call immediately before drawing this frame.</param>
            <param name="setupParams">Optional. Parameters to pass to the setup function.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.Rectangle,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame. If not specified, it will look for a getBounds method,
            bounds property, or nominalBounds property on the source to use. If one is not found, the frame will be skipped.</param>
            <param name="scale">Optional. The scale to draw this frame at. Default is 1.</param>
            <param name="setupFunction">Optional. A function to call immediately before drawing this frame.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.Rectangle,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame. If not specified, it will look for a getBounds method,
            bounds property, or nominalBounds property on the source to use. If one is not found, the frame will be skipped.</param>
            <param name="scale">Optional. The scale to draw this frame at. Default is 1.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject,SharpKit.EaselJS.Rectangle)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame. If not specified, it will look for a getBounds method,
            bounds property, or nominalBounds property on the source to use. If one is not found, the frame will be skipped.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addFrame(SharpKit.EaselJS.DisplayObject)">
            <summary>
            Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build.
            The optional setup params allow you to have a function run immediately before the draw occurs.
            For example, this allows you to add a single source multiple times, but manipulate it or it's children to change it to generate different frames. 
            Note that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y.
            To apply transforms to a source object and have them captured in the sprite sheet, simply place it into a Container and pass in the Container as the source.
            </summary>
            <param name="source">The source display object to draw as the frame.</param>
            <returns>The index of the frame that was just added, or null if a sourceRect could not be determined.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addMovieClip(SharpKit.EaselJS.MovieClip,SharpKit.EaselJS.Rectangle,SharpKit.JavaScript.JsNumber)">
            <summary>
            This will take a MovieClip, and add its frames and labels to this builder.
            Labels will be added as an animation running from the label index to the next label.
            For example, if there is a label named "foo" at frame 0 and a label named "bar" at frame 10, in a MovieClip with 15 frames,
            it will add an animation named "foo" that runs from frame index 0 to 9, and an animation named "bar" that runs from frame index 10 to 14. 
            Note that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.
            </summary>
            <param name="source">The source MovieClip to add to the sprite sheet.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame.
            If not specified, it will look for a getBounds method, frameBounds array, bounds property, or nominalBounds property on the source to use.
            If one is not found, the MovieClip will be skipped.</param>
            <param name="scale">Optional. The scale to draw the movie clip at. Default is 1.</param>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addMovieClip(SharpKit.EaselJS.MovieClip,SharpKit.EaselJS.Rectangle)">
            <summary>
            This will take a MovieClip, and add its frames and labels to this builder.
            Labels will be added as an animation running from the label index to the next label.
            For example, if there is a label named "foo" at frame 0 and a label named "bar" at frame 10, in a MovieClip with 15 frames,
            it will add an animation named "foo" that runs from frame index 0 to 9, and an animation named "bar" that runs from frame index 10 to 14. 
            Note that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.
            </summary>
            <param name="source">The source MovieClip to add to the sprite sheet.</param>
            <param name="sourceRect">Optional. A rectangle defining the portion of the source to draw to the frame.
            If not specified, it will look for a getBounds method, frameBounds array, bounds property, or nominalBounds property on the source to use.
            If one is not found, the MovieClip will be skipped.</param>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.addMovieClip(SharpKit.EaselJS.MovieClip)">
            <summary>
            This will take a MovieClip, and add its frames and labels to this builder.
            Labels will be added as an animation running from the label index to the next label.
            For example, if there is a label named "foo" at frame 0 and a label named "bar" at frame 10, in a MovieClip with 15 frames,
            it will add an animation named "foo" that runs from frame index 0 to 9, and an animation named "bar" that runs from frame index 10 to 14. 
            Note that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.
            </summary>
            <param name="source">The source MovieClip to add to the sprite sheet.</param>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.build">
            <summary>
            Builds a SpriteSheet instance based on the current frames.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.buildAsync(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber)">
            <summary>
            Asynchronously builds a SpriteSheet instance based on the current frames.
            It will run 20 times per second, using an amount of time defined by timeSlice. When it is complete it will call the specified callback.
            </summary>
            <param name="callback">Optional. The function to call when the build operation completes.
            It will be called with a single parameter providing a reference back to the builder.</param>
            <param name="timeSlice">Optional. A number from 0.01 to 1 that indicates what percentage of time the builder can use.
            This can be thought of as the number of seconds per second the builder will use.
            For example, with a timeSlice value of 0.3, the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).
            Defaults to 0.3.</param>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.buildAsync(SharpKit.JavaScript.JsAction)">
            <summary>
            Asynchronously builds a SpriteSheet instance based on the current frames.
            It will run 20 times per second, using an amount of time defined by timeSlice. When it is complete it will call the specified callback.
            </summary>
            <param name="callback">Optional. The function to call when the build operation completes.
            It will be called with a single parameter providing a reference back to the builder.</param>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.buildAsync">
            <summary>
            Asynchronously builds a SpriteSheet instance based on the current frames.
            It will run 20 times per second, using an amount of time defined by timeSlice. When it is complete it will call the specified callback.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.clone">
            <summary>
            SpriteSheetBuilder instances cannot be cloned.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.stopAsync">
            <summary>
            Stops the current asynchronous build.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetBuilder.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheetBuilder.defaultScale">
            <summary>
            The scale to apply when drawing all frames to the sprite sheet.
            This is multiplied against any scale specified in the addFrame call.
            This can be used, for example, to generate a sprite sheet at run time that is tailored to the a specific device resolution (ex. tablet vs mobile).
            Default Value: 1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheetBuilder.maxHeight">
            <summary>
            The maximum height for the images (not individual frames) in the generated sprite sheet.
            It is recommended to use a power of 2 for this value (ex. 1024, 2048, 4096).
            If the frames cannot all fit within the max dimensions, then additional images will be created as needed.
            Default Value: 2048
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheetBuilder.maxWidth">
            <summary>
            The maximum width for the images (not individual frames) in the generated sprite sheet.
            It is recommended to use a power of 2 for this value (ex. 1024, 2048, 4096).
            If the frames cannot all fit within the max dimensions, then additional images will be created as needed.
            Default Value: 2048
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheetBuilder.padding">
            <summary>
            The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.
            Default Value: 1
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.SpriteSheetBuilder.spriteSheet">
            <summary>
            The sprite sheet that was generated. This will be null before a build is completed successfully.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.SpriteSheetUtils">
            <summary>
            The SpriteSheetUtils class is a collection of static methods for working with sprite sheets.
            A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid.
            For example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).
            The SpriteSheetUtils class uses a static interface and should not be instantiated.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetUtils.extractFrame(SharpKit.Html.HtmlImageElement,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a single frame of the specified sprite sheet as a new PNG image.
            </summary>
            <param name="spriteSheet">The SpriteSheet instance to extract a frame from.</param>
            <param name="frame">The frame number or animation name to extract. If an animation name is specified, only the first frame of the animation will be extracted.</param>
            <returns>a single frame of the specified sprite sheet as a new PNG image.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpKit.EaselJS.SpriteSheetUtils.flip(SharpKit.Html.HtmlImageElement,System.Object)" -->
        <member name="M:SharpKit.EaselJS.SpriteSheetUtils.mergeAlpha(SharpKit.Html.HtmlImageElement,SharpKit.Html.HtmlImageElement,SharpKit.Html.HtmlCanvasElement)">
            <summary>
            Merges the rgb channels of one image with the alpha channel of another.
            This can be used to combine a compressed JPEG image containing color data with a PNG32 monochromatic image containing alpha data.
            With certain types of images (those with detail that lend itself to JPEG compression) this can provide significant file size savings versus a single RGBA PNG32.
            This method is very fast (generally on the order of 1-2 ms to run).
            </summary>
            <param name="rbgImage">The image (or canvas) containing the RGB channels to use.</param>
            <param name="alphaImage">The image (or canvas) containing the alpha channel to use.</param>
            <param name="canvas">Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.</param>
            <returns>A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.SpriteSheetUtils.mergeAlpha(SharpKit.Html.HtmlImageElement,SharpKit.Html.HtmlImageElement)">
            <summary>
            Merges the rgb channels of one image with the alpha channel of another.
            This can be used to combine a compressed JPEG image containing color data with a PNG32 monochromatic image containing alpha data.
            With certain types of images (those with detail that lend itself to JPEG compression) this can provide significant file size savings versus a single RGBA PNG32.
            This method is very fast (generally on the order of 1-2 ms to run).
            </summary>
            <param name="rbgImage">The image (or canvas) containing the RGB channels to use.</param>
            <param name="alphaImage">The image (or canvas) containing the alpha channel to use.</param>
            <returns>A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.</returns>
        </member>
        <member name="T:SharpKit.EaselJS.Stage">
            <summary>
             extends Container
             A stage is the root level Container for a display list. Each time its tick method is called, it will render its display list to its target canvas.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.clear">
            <summary>
            Clears the target canvas. Useful if autoClear is set to false.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.clone">
            <summary>
            Returns a clone of this Stage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.enableMouseOver(SharpKit.JavaScript.JsNumber)">
            <summary>
            Enables or disables (by passing a frequency of 0) mouse over handlers (onMouseOver and onMouseOut) for this stage's display list.
            These events can be expensive to generate, so they are disabled by default,
            and the frequency of the events can be controlled independently of mouse move events via the optional frequency parameter.
            </summary>
            <param name="frequency">Optional param specifying the maximum number of times per second to broadcast mouse over/out events.
            Set to 0 to disable mouse over events completely.
            Maximum is 50. A lower frequency is less responsive, but uses less CPU. Default is 20.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.enableMouseOver">
            <summary>
            Enables or disables (by passing a frequency of 0) mouse over handlers (onMouseOver and onMouseOut) for this stage's display list.
            These events can be expensive to generate, so they are disabled by default,
            and the frequency of the events can be controlled independently of mouse move events via the optional frequency parameter.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.toDataURL(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Returns a data url that contains a Base64 encoded image of the contents of the stage.
            The returned data url can be specified as the src value of an image element.
            </summary>
            <param name="backgroundColor">The background color to be used for the generated image.
            The value can be any value HTML color value, including HEX colors, rgb and rgba. The default value is a transparent background.</param>
            <param name="mimeType">The MIME type of the image format to be create. The default is "image/png".
            If an unknown MIME type is passed in, or if the browser does not support the specified MIME type, the default value will be used.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Stage.update">
            <summary>
            Each time the update method is called, the stage will tick any descendants exposing a tick method
            (ex. BitmapAnimation) and render its entire display list to the canvas.
            Any parameters passed to update will be passed on to any onTick handlers.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.autoClear">
            <summary>
            Indicates whether the stage should automatically clear the canvas before each render.
            You can set this to false to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for example).
            Default Value: true
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.canvas">
            <summary>
            The canvas the stage will render to. Multiple stages can share a single canvas,
            but you must disable autoClear for all but the first stage that will be ticked (or they will clear each other's render).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.mouseInBounds">
            <summary>
            Indicates whether the mouse is currently within the bounds of the canvas.
            Default Value: false
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.mouseX">
            <summary>
            READ-ONLY. The current mouse X position on the canvas.
            If the mouse leaves the canvas, this will indicate the most recent position over the canvas, and mouseInBounds will be set to false.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.mouseY">
            <summary>
            READ-ONLY. The current mouse Y position on the canvas.
            If the mouse leaves the canvas, this will indicate the most recent position over the canvas, and mouseInBounds will be set to false.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.snapToPixelEnabled">
            <summary>
            Indicates whether this stage should use the snapToPixel property of display objects when rendering them. See DisplayObject.snapToPixel for more information.
            Default Value: false
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.tickOnUpdate">
            <summary>
            If false, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.
            Default Value: false
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.onMouseDown">
            <summary>
            The onMouseDown callback is called when the user presses the mouse button over the canvas.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.onMouseMove">
            <summary>
            The onMouseMove callback is called when the user moves the mouse over the canvas.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Stage.onMouseUp">
            <summary>
            The onMouseUp callback is called when the user releases the mouse button anywhere that the page can detect it.
            The handler is passed a single param containing the corresponding MouseEvent instance.
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Text">
            <summary>
            extends DisplayObject
            Allows you to display one or more lines of dynamic text (not user editable) in the display list.
            Line wrapping support (using the lineWidth is very basic, wrapping on spaces and tabs only.
            Note that as an alternative to Text, you can position HTML text above or below the canvas relative to items in the display list using the localToGlobal() method.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Text.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            
            </summary>
            <param name="text">Optional. The text to display.</param>
            <param name="font">Optional. The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold 36px Arial").</param>
            <param name="color">Optional. The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. "#F00").</param>
        </member>
        <member name="M:SharpKit.EaselJS.Text.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            
            </summary>
            <param name="text">Optional. The text to display.</param>
            <param name="font">Optional. The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold 36px Arial").</param>
        </member>
        <member name="M:SharpKit.EaselJS.Text.#ctor(SharpKit.JavaScript.JsString)">
            <summary>
            
            </summary>
            <param name="text">Optional. The text to display.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Text.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Text.clone">
            <summary>
            Returns a clone of the Point instance.
            </summary>
            <returns>a clone of the Point instance.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Text.draw(SharpKit.Html.CanvasRenderingContext2D,System.Boolean)">
            <summary>
            Draws the Text into the specified context ignoring it's visible, alpha, shadow, and transform.
            Returns true if the draw was handled (useful for overriding functionality).
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <param name="ctx">The canvas 2D context object to draw into.</param>
            <param name="ignoreCache">Indicates whether the draw operation should ignore any current cache.
            For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).</param>
        </member>
        <member name="M:SharpKit.EaselJS.Text.getMeasuredHeight">
            <summary>
            Returns the approximate height of multiline text by multiplying the number of lines against either the lineHeight (if specified) or getMeasuredLineHeight().
            Note that this operation requires the text flowing logic to run, which has an associated CPU cost.
            </summary>
            <returns>The approximate height of the drawn multiline text.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Text.getMeasuredLineHeight">
            <summary>
            Returns an approximate line height of the text, ignoring the lineHeight property.
            This is based on the measured width of a "M" character multiplied by 1.2, which approximates em for most fonts.
            </summary>
            <returns>an approximate line height of the text, ignoring the lineHeight property.
            This is based on the measured width of a "M" character multiplied by 1.2, which approximates em for most fonts.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Text.getMeasuredWidth">
            <summary>
            Returns the measured, untransformed width of the text without wrapping.
            </summary>
            <returns>The measured, untransformed width of the text.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Text.isVisible">
            <summary>
            Returns true or false indicating whether the display object would be visible if drawn to a canvas.
            This does not account for whether it would be visible within the boundaries of the stage.
            NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
            </summary>
            <returns>Boolean indicating whether the display object would be visible if drawn to a canvas</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Text.toString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:SharpKit.EaselJS.Text.color">
            <summary>
            The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. "#F00"). Default is "#000".
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.font">
            <summary>
            The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold 36px Arial").
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.lineHeight">
            <summary>
            Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0, the value of getMeasuredLineHeight is used.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.lineWidth">
            <summary>
            Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null, the text will not be wrapped.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.maxWidth">
            <summary>
            The maximum width to draw the text.
            If maxWidth is specified (not null), the text will be condensed or shrunk to make it fit in this width. For detailed information view the whatwg spec.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.outline">
            <summary>
            If true, the text will be drawn as a stroke (outline). If false, the text will be drawn as a fill.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.text">
            <summary>
            The text to display.
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.textAlign">
            <summary>
            The horizontal text alignment. Any of "start", "end", "left", "right", and "center". For detailed information view the whatwg spec. Default is "left".
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Text.textBaseline">
            <summary>
            The vertical alignment point on the font.
            Any of "top", "hanging", "middle", "alphabetic", "ideographic", or "bottom". For detailed information view the whatwg spec. Default is "top".
            </summary>
        </member>
        <member name="T:SharpKit.EaselJS.Ticker">
            <summary>
            The Ticker class uses a static interface (ex. Ticker.getPaused()) and should not be instantiated.
            Provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick event to be notified when a set time interval has elapsed.
            Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval during times of high CPU load.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.addListener(System.Object,System.Boolean)">
            <summary>
            Adds a listener for the tick event. The listener must be either an object exposing a .tick() method, or a function.
            The listener will be called once each tick / interval.
            The interval is specified via the .setInterval(ms) method.
            The tick method or function is passed two parameters: the elapsed time between the previous tick and the current one,
            and a boolean indicating whether Ticker is paused.
            </summary>
            <param name="o">The object or function to add as a listener.</param>
            <param name="pauseable">If false, the listener will continue to have tick called even when Ticker is paused via Ticker.pause(). Default is true.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.addListener(SharpKit.JavaScript.JsAction,System.Boolean)">
            <summary>
            Adds a listener for the tick event. The listener must be either an object exposing a .tick() method, or a function.
            The listener will be called once each tick / interval.
            The interval is specified via the .setInterval(ms) method.
            The tick method or function is passed two parameters: the elapsed time between the previous tick and the current one,
            and a boolean indicating whether Ticker is paused.
            </summary>
            <param name="o">The object or function to add as a listener.</param>
            <param name="pauseable">If false, the listener will continue to have tick called even when Ticker is paused via Ticker.pause(). Default is true.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getFPS">
            <summary>
            Returns the target frame rate in frames per second (FPS).
            For example, with an interval of 40, getFPS() will return 25 (1000ms per second divided by 40 ms per tick = 25fps).
            </summary>
            <returns>The current target number of frames / ticks broadcast per second</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getInterval">
            <summary>
            Returns the current target time between ticks, as set with setInterval.
            </summary>
            <returns>The current target interval in milliseconds between tick events.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getMeasuredFPS(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the actual frames / ticks per second.
            </summary>
            <param name="ticks">Optional. The number of previous ticks over which to measure the actual frames / ticks per second. Defaults to the number of ticks per second.</param>
            <returns>The actual frames / ticks per second. Depending on performance, this may differ from the target frames per second.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getMeasuredFPS">
            <summary>
            Returns the actual frames / ticks per second.
            </summary>
            <returns>The actual frames / ticks per second. Depending on performance, this may differ from the target frames per second.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getPaused">
            <summary>
            Returns a boolean indicating whether Ticker is currently paused, as set with setPaused.
            </summary>
            <returns>Whether the Ticker is currently paused.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getTicks(System.Boolean)">
            <summary>
            Returns the number of ticks that have been broadcast by Ticker.
            </summary>
            <param name="pauseable">Indicates whether to include ticks that would have been broadcast while Ticker was paused.
            If false only tick events broadcast while Ticker is not paused will be returned.
            If true, tick events that would have been broadcast while Ticker was paused will be included in the return value. The default value is false.</param>
            <returns>of ticks that have been broadcast.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.getTime(System.Boolean)">
            <summary>
            Returns the number of milliseconds that have elapsed since the first tick event listener was added to Ticker.
            For example, you could use this in a time synchronized animation to determine the exact amount of time that has elapsed.
            </summary>
            <param name="pauseable"> Indicates whether to include time elapsed while Ticker was paused. If false only time elapsed while Ticker is not paused will be returned.
            If true, the value returned will be total time elapsed since the first tick event listener was added.</param>
            <returns>Number of milliseconds that have elapsed since Ticker was begun.</returns>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.init">
            <summary>
            Initializes or resets the timer, clearing all associated listeners and fps measuring data, starting the tick.
            This is called automatically when the first listener is added.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.removeAllListeners">
            <summary>
            Removes all listeners.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.removeListener(System.Object)">
            <summary>
            Removes the specified listener.
            </summary>
            <param name="o">The object or function to remove from listening from the tick event.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.removeListener(SharpKit.JavaScript.JsAction)">
            <summary>
            Removes the specified listener.
            </summary>
            <param name="o">The object or function to remove from listening from the tick event.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.setFPS(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the target frame rate in frames per second (FPS).
            For example, with an interval of 40, getFPS() will return 25 (1000ms per second divided by 40 ms per tick = 25fps).
            </summary>
            <param name="value">Target number of ticks broadcast per second.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.setInterval(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the target time (in milliseconds) between ticks. Default is 50 (20 FPS).]
            Note actual time between ticks may be more than requested depending on CPU load.
            </summary>
            <param name="interval">Time in milliseconds between ticks. Default value is 50.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Ticker.setPaused(System.Boolean)">
            <summary>
            While Ticker is paused, pausable listeners are not ticked. See addListener for more information.
            </summary>
            <param name="value">Indicates whether to pause (true) or unpause (false) Ticker.</param>
        </member>
        <member name="P:SharpKit.EaselJS.Ticker.useRAF">
            <summary>
            Indicates whether Ticker should use requestAnimationFrame if it is supported in the browser.
            If false, Ticker will use setTimeout. If you use RAF, it is recommended that you set the framerate to a divisor of 60 (ex. 15, 20, 30, 60).
            </summary>
        </member>
        <member name="P:SharpKit.EaselJS.Ticker.tick">
            <summary>
            Event broadcast once each tick / interval. The interval is specified via the .setInterval(ms) or setFPS methods.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SharpKit.EaselJS.Touch" -->
        <member name="M:SharpKit.EaselJS.Touch.disable(SharpKit.EaselJS.Stage)">
            <summary>
            Removes all listeners that were set up when calling Touch.enable on a stage.
            </summary>
            <param name="stage">The stage to disable touch on.</param>
        </member>
        <member name="M:SharpKit.EaselJS.Touch.enable(SharpKit.EaselJS.Stage,System.Boolean,System.Boolean)">
            <summary>
            Enables touch interaction for the specified EaselJS stage. Currently supports iOS (and compatible browsers, such as modern Android browsers), and IE10.
            Supports both single touch and multi-touch modes.
            Extends the EaselJS MouseEvent model, but without support for double click or over/out events. See MouseEvent.pointerID for more information.
            </summary>
            <param name="stage">The stage to enable touch on.</param>
            <param name="singleTouch">If true, only a single touch will be active at a time. Default is false.</param>
            <param name="allowDefault">If true, then default gesture actions (ex. scrolling, zooming)
            will be allowed when the user is interacting with the target canvas. Default is false.</param>
            <returns>Returns true if touch was successfully enabled on the target stage.</returns>
        </member>
        <member name="T:SharpKit.EaselJS.UID">
            <summary>
            Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. UID.get()) and should not be instantiated.
            </summary>
        </member>
        <member name="M:SharpKit.EaselJS.UID.get">
            <summary>
            Returns the next unique id.
            </summary>
            <returns>The next unique id</returns>
        </member>
    </members>
</doc>
