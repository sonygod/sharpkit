<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.ExtJs-3.3.1</name>
    </assembly>
    <members>
        <member name="T:Ext.AbstractManager">
            <summary>
            @class Ext.AbstractManager
            @extends Object
            Base Manager class - extended by ComponentMgr and PluginMgr
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.create(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Creates and returns an instance of whatever this manager manages, based on the supplied type and config object
            @param {Object} config The config object
            @param {String} defaultType If no type is discovered in the config object, we fall back to this type
            @return {Mixed} The instance of whatever this manager is managing
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.get(SharpKit.JavaScript.JsString)">
            <summary>
            Returns a component by {@link Ext.Component#id id}.
            For additional details see {@link Ext.util.MixedCollection#get}.
            @param {String} id The component {@link Ext.Component#id id}
            @return Ext.Component The Component, <code>undefined</code> if not found, or <code>null</code> if a
            Class was found.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.isRegistered(Ext.Component)">
            <summary>
            Checks if a Component type is registered.
            @param {Ext.Component} xtype The mnemonic string by which the Component class may be looked up
            @return {Boolean} Whether the type is registered.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.onAvailable(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.
            @param {String} id The component {@link Ext.Component#id id}
            @param {Function} fn The callback function
            @param {Object} scope The scope (<code>this</code> reference) in which the callback is executed. Defaults to the Component.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.register(System.Object)">
            <summary>
            Registers an item to be managed
            @param {Mixed} item The item to register
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.registerType(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            <p>Registers a new Component constructor, keyed by a new
            {@link Ext.Component#xtype}.</p>
            <p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new
            subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying
            child Components.
            see {@link Ext.Container#items}</p>
            @param {String} xtype The mnemonic string by which the Component class may be looked up.
            @param {Constructor} cls The new Component class.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.unregister(System.Object)">
            <summary>
            Unregisters a component by removing it from this manager
            @param {Mixed} item The item to unregister
            </summary>
        </member>
        <member name="P:Ext.AbstractManager.typeName">
            <summary>
            @class Ext.AbstractManager
            @extends Object
            Base Manager class - extended by ComponentMgr and PluginMgr
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Action" -->
        <member name="M:Ext.Action.#ctor(System.Object)">
            <summary>
            @cfg {Object} scope The scope (<tt><b>this</b></tt> reference) in which the
            <code>{@link #handler}</code> is executed. Defaults to this Button.
            </summary>
        </member>
        <member name="M:Ext.Action.disable">
            <summary>
            Disables all components using this action.
            </summary>
        </member>
        <member name="M:Ext.Action.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for each Component currently tied to this action.  The function passed
            in should accept a single argument that will be an object that supports the basic Action config/method interface.
            @param {Function} fn The function to execute for each component
            @param {Object} scope The scope (<code>this</code> reference) in which the function is executed.  Defaults to the Component.
            </summary>
        </member>
        <member name="M:Ext.Action.enable">
            <summary>
            Enables all components using this action.
            </summary>
        </member>
        <member name="M:Ext.Action.execute">
            <summary>
            Executes this action manually using the handler function specified in the original config object
            or the handler function set with <code>{@link #setHandler}</code>.  Any arguments passed to this
            function will be passed on to the handler function.
            @param {Mixed} arg1 (optional) Variable number of arguments passed to the handler function
            @param {Mixed} arg2 (optional)
            @param {Mixed} etc... (optional)
            </summary>
        </member>
        <member name="M:Ext.Action.getIconClass">
            <summary>
            Gets the icon CSS class currently used by all components using this action.
            </summary>
        </member>
        <member name="M:Ext.Action.getText">
            <summary>
            Gets the text currently displayed by all components using this action.
            </summary>
        </member>
        <member name="M:Ext.Action.hide">
            <summary>
            Hides all components using this action.
            </summary>
        </member>
        <member name="M:Ext.Action.isDisabled">
            <summary>
            Returns true if the components using this action are currently disabled, else returns false.
            </summary>
        </member>
        <member name="M:Ext.Action.isHidden">
            <summary>
            Returns true if the components using this action are currently hidden, else returns false.
            </summary>
        </member>
        <member name="M:Ext.Action.setDisabled(System.Boolean)">
            <summary>
            Sets the disabled state of all components using this action.  Shortcut method
            for {@link #enable} and {@link #disable}.
            @param {Boolean} disabled True to disable the component, false to enable it
            </summary>
        </member>
        <member name="M:Ext.Action.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets the function that will be called by each Component using this action when its primary event is triggered.
            @param {Function} fn The function that will be invoked by the action's components.  The function
            will be called with no arguments.
            @param {Object} scope The scope (<code>this</code> reference) in which the function is executed. Defaults to the Component firing the event.
            </summary>
        </member>
        <member name="M:Ext.Action.setHidden(System.Boolean)">
            <summary>
            Sets the hidden state of all components using this action.  Shortcut method
            for <code>{@link #hide}</code> and <code>{@link #show}</code>.
            @param {Boolean} hidden True to hide the component, false to show it
            </summary>
        </member>
        <member name="M:Ext.Action.setIconClass(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the icon CSS class for all components using this action.  The class should supply
            a background image that will be used as the icon image.
            @param {String} cls The CSS class supplying the icon image
            </summary>
        </member>
        <member name="M:Ext.Action.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the text to be displayed by all components using this action.
            @param {String} text The text to display
            </summary>
        </member>
        <member name="M:Ext.Action.show">
            <summary>
            Shows all components using this action.
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.disabled">
            <summary>
            True to disable all components using this action, false to enable them (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.handler">
            <summary>
            The function that will be invoked by each component tied to this action
            when the component's primary event is triggered (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.hidden">
            <summary>
            True to hide all components using this action, false to show them (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.iconCls">
            <summary>
            The CSS class selector that specifies a background image to be used as the header icon for
            all components using this action (defaults to '').
            <p>An example of specifying a custom icon class would be something like:
            </p><pre><code>
            // specify the property in the config for the class:
            ...
            iconCls: 'do-something'
            // css class that specifies background image to be used as the icon image:
            .do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.itemId">
            <summary>
            See {@link Ext.Component}.{@link Ext.Component#itemId itemId}.
            </summary>
        </member>
        <member name="P:Ext.ActionConfig.text">
            <summary>
            The text to set for all components using this action (defaults to '').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Ajax" -->
        <member name="T:Ext.BoxComponent">
            <summary>
            @class Ext.BoxComponent
            @extends Ext.Component
            <p>Base class for any {@link Ext.Component Component} that is to be sized as a box, using width and height.</p>
            <p>BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly
            within the Component rendering model.</p>
            <p>A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing
            element, or one that is created to your specifications at render time. Usually, to participate in layouts,
            a Component will need to be a <b>Box</b>Component in order to have its width and height managed.</p>
            <p>To use a pre-existing element as a BoxComponent, configure it so that you preset the <b>el</b> property to the
            element to reference:<pre><code>
            var pageHeader = new Ext.BoxComponent({
            el: 'my-header-div'
            });</code></pre>
            This may then be {@link Ext.Container#add added} to a {@link Ext.Container Container} as a child item.</p>
            <p>To create a BoxComponent based around a HTML element to be created at render time, use the
            {@link Ext.Component#autoEl autoEl} config option which takes the form of a
            {@link Ext.DomHelper DomHelper} specification:<pre><code>
            var myImage = new Ext.BoxComponent({
            autoEl: {
            tag: 'img',
            src: '/images/my-image.jpg'
            }
            });</code></pre></p>
            @constructor
            @param {Ext.Element/String/Object} config The configuration options.
            @xtype box
            </summary>
        </member>
        <member name="T:Ext.Component">
            <summary>
            @class Ext.Component
            @extends Ext.util.Observable
            <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
            Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
            Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
            or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
            <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
            <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
            {@link Ext#getCmp}, passing the {@link #id}.</p>
            <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
            {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
            <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
            and to either extend or augment ExtJs base classes to create custom Components.</p>
            <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
            xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
            <pre>
            xtype            Class
            -------------    ------------------
            box              {@link Ext.BoxComponent}
            button           {@link Ext.Button}
            buttongroup      {@link Ext.ButtonGroup}
            colorpalette     {@link Ext.ColorPalette}
            component        {@link Ext.Component}
            container        {@link Ext.Container}
            cycle            {@link Ext.CycleButton}
            dataview         {@link Ext.DataView}
            datepicker       {@link Ext.DatePicker}
            editor           {@link Ext.Editor}
            editorgrid       {@link Ext.grid.EditorGridPanel}
            flash            {@link Ext.FlashComponent}
            grid             {@link Ext.grid.GridPanel}
            listview         {@link Ext.ListView}
            multislider      {@link Ext.slider.MultiSlider}
            panel            {@link Ext.Panel}
            progress         {@link Ext.ProgressBar}
            propertygrid     {@link Ext.grid.PropertyGrid}
            slider           {@link Ext.slider.SingleSlider}
            spacer           {@link Ext.Spacer}
            splitbutton      {@link Ext.SplitButton}
            tabpanel         {@link Ext.TabPanel}
            treepanel        {@link Ext.tree.TreePanel}
            viewport         {@link Ext.ViewPort}
            window           {@link Ext.Window}
            Toolbar components
            ---------------------------------------
            paging           {@link Ext.PagingToolbar}
            toolbar          {@link Ext.Toolbar}
            tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)
            tbfill           {@link Ext.Toolbar.Fill}
            tbitem           {@link Ext.Toolbar.Item}
            tbseparator      {@link Ext.Toolbar.Separator}
            tbspacer         {@link Ext.Toolbar.Spacer}
            tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)
            tbtext           {@link Ext.Toolbar.TextItem}
            Menu components
            ---------------------------------------
            menu             {@link Ext.menu.Menu}
            colormenu        {@link Ext.menu.ColorMenu}
            datemenu         {@link Ext.menu.DateMenu}
            menubaseitem     {@link Ext.menu.BaseItem}
            menucheckitem    {@link Ext.menu.CheckItem}
            menuitem         {@link Ext.menu.Item}
            menuseparator    {@link Ext.menu.Separator}
            menutextitem     {@link Ext.menu.TextItem}
            Form components
            ---------------------------------------
            form             {@link Ext.form.FormPanel}
            checkbox         {@link Ext.form.Checkbox}
            checkboxgroup    {@link Ext.form.CheckboxGroup}
            combo            {@link Ext.form.ComboBox}
            compositefield   {@link Ext.form.CompositeField}
            datefield        {@link Ext.form.DateField}
            displayfield     {@link Ext.form.DisplayField}
            field            {@link Ext.form.Field}
            fieldset         {@link Ext.form.FieldSet}
            hidden           {@link Ext.form.Hidden}
            htmleditor       {@link Ext.form.HtmlEditor}
            label            {@link Ext.form.Label}
            numberfield      {@link Ext.form.NumberField}
            radio            {@link Ext.form.Radio}
            radiogroup       {@link Ext.form.RadioGroup}
            textarea         {@link Ext.form.TextArea}
            textfield        {@link Ext.form.TextField}
            timefield        {@link Ext.form.TimeField}
            trigger          {@link Ext.form.TriggerField}
            Chart components
            ---------------------------------------
            chart            {@link Ext.chart.Chart}
            barchart         {@link Ext.chart.BarChart}
            cartesianchart   {@link Ext.chart.CartesianChart}
            columnchart      {@link Ext.chart.ColumnChart}
            linechart        {@link Ext.chart.LineChart}
            piechart         {@link Ext.chart.PieChart}
            Store xtypes
            ---------------------------------------
            arraystore       {@link Ext.data.ArrayStore}
            directstore      {@link Ext.data.DirectStore}
            groupingstore    {@link Ext.data.GroupingStore}
            jsonstore        {@link Ext.data.JsonStore}
            simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)
            store            {@link Ext.data.Store}
            xmlstore         {@link Ext.data.XmlStore}
            </pre>
            @constructor
            @param {Ext.Element/String/Object} config The configuration options may be specified as either:
            <div class="mdetail-params"><ul>
            <li><b>an element</b> :
            <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
            <li><b>a string</b> :
            <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
            <li><b>anything else</b> :
            <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
            </ul></div>
            </summary>
        </member>
        <member name="M:Ext.Component.#ctor(System.Object)">
            <summary>
            @class Ext.Component
            @extends Ext.util.Observable
            <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
            Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
            Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
            or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
            <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
            <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
            {@link Ext#getCmp}, passing the {@link #id}.</p>
            <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
            {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
            <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
            and to either extend or augment ExtJs base classes to create custom Components.</p>
            <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
            xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
            <pre>
            xtype            Class
            -------------    ------------------
            box              {@link Ext.BoxComponent}
            button           {@link Ext.Button}
            buttongroup      {@link Ext.ButtonGroup}
            colorpalette     {@link Ext.ColorPalette}
            component        {@link Ext.Component}
            container        {@link Ext.Container}
            cycle            {@link Ext.CycleButton}
            dataview         {@link Ext.DataView}
            datepicker       {@link Ext.DatePicker}
            editor           {@link Ext.Editor}
            editorgrid       {@link Ext.grid.EditorGridPanel}
            flash            {@link Ext.FlashComponent}
            grid             {@link Ext.grid.GridPanel}
            listview         {@link Ext.ListView}
            multislider      {@link Ext.slider.MultiSlider}
            panel            {@link Ext.Panel}
            progress         {@link Ext.ProgressBar}
            propertygrid     {@link Ext.grid.PropertyGrid}
            slider           {@link Ext.slider.SingleSlider}
            spacer           {@link Ext.Spacer}
            splitbutton      {@link Ext.SplitButton}
            tabpanel         {@link Ext.TabPanel}
            treepanel        {@link Ext.tree.TreePanel}
            viewport         {@link Ext.ViewPort}
            window           {@link Ext.Window}
            Toolbar components
            ---------------------------------------
            paging           {@link Ext.PagingToolbar}
            toolbar          {@link Ext.Toolbar}
            tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)
            tbfill           {@link Ext.Toolbar.Fill}
            tbitem           {@link Ext.Toolbar.Item}
            tbseparator      {@link Ext.Toolbar.Separator}
            tbspacer         {@link Ext.Toolbar.Spacer}
            tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)
            tbtext           {@link Ext.Toolbar.TextItem}
            Menu components
            ---------------------------------------
            menu             {@link Ext.menu.Menu}
            colormenu        {@link Ext.menu.ColorMenu}
            datemenu         {@link Ext.menu.DateMenu}
            menubaseitem     {@link Ext.menu.BaseItem}
            menucheckitem    {@link Ext.menu.CheckItem}
            menuitem         {@link Ext.menu.Item}
            menuseparator    {@link Ext.menu.Separator}
            menutextitem     {@link Ext.menu.TextItem}
            Form components
            ---------------------------------------
            form             {@link Ext.form.FormPanel}
            checkbox         {@link Ext.form.Checkbox}
            checkboxgroup    {@link Ext.form.CheckboxGroup}
            combo            {@link Ext.form.ComboBox}
            compositefield   {@link Ext.form.CompositeField}
            datefield        {@link Ext.form.DateField}
            displayfield     {@link Ext.form.DisplayField}
            field            {@link Ext.form.Field}
            fieldset         {@link Ext.form.FieldSet}
            hidden           {@link Ext.form.Hidden}
            htmleditor       {@link Ext.form.HtmlEditor}
            label            {@link Ext.form.Label}
            numberfield      {@link Ext.form.NumberField}
            radio            {@link Ext.form.Radio}
            radiogroup       {@link Ext.form.RadioGroup}
            textarea         {@link Ext.form.TextArea}
            textfield        {@link Ext.form.TextField}
            timefield        {@link Ext.form.TimeField}
            trigger          {@link Ext.form.TriggerField}
            Chart components
            ---------------------------------------
            chart            {@link Ext.chart.Chart}
            barchart         {@link Ext.chart.BarChart}
            cartesianchart   {@link Ext.chart.CartesianChart}
            columnchart      {@link Ext.chart.ColumnChart}
            linechart        {@link Ext.chart.LineChart}
            piechart         {@link Ext.chart.PieChart}
            Store xtypes
            ---------------------------------------
            arraystore       {@link Ext.data.ArrayStore}
            directstore      {@link Ext.data.DirectStore}
            groupingstore    {@link Ext.data.GroupingStore}
            jsonstore        {@link Ext.data.JsonStore}
            simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)
            store            {@link Ext.data.Store}
            xmlstore         {@link Ext.data.XmlStore}
            </pre>
            @constructor
            @param {Ext.Element/String/Object} config The configuration options may be specified as either:
            <div class="mdetail-params"><ul>
            <li><b>an element</b> :
            <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
            <li><b>a string</b> :
            <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
            <li><b>anything else</b> :
            <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
            </ul></div>
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.getBox(System.Boolean)">
            <summary>
            Gets the current box measurements of the component's underlying element.
            @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
            @return {Object} box An object in the format {x, y, width, height}
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.getHeight">
            <summary>
            Gets the current height of the component's underlying element.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.getOuterSize">
            <summary>
            Gets the current size of the component's underlying element, including space taken by its margins.
            @return {Object} An object containing the element's size {width: (element width + left/right margins), height: (element height + top/bottom margins)}
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.getPosition(System.Boolean)">
            <summary>
            Gets the current XY position of the component's underlying element.
            @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
            @return {Array} The XY position of the element (e.g., [100, 200])
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.BoxComponent.getResizeEl" -->
        <member name="M:Ext.BoxComponent.getSize">
            <summary>
            Gets the current size of the component's underlying element.
            @return {Object} An object containing the element's size {width: (element width), height: (element height)}
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.getWidth">
            <summary>
            Gets the current width of the component's underlying element.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.initComponent">
            <summary>
            {Boolean} deferHeight
            True to defer height calculations to an external component, false to allow this component to set its own
            height (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.onPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Called after the component is moved, this method is empty by default but can be implemented by any
            subclass that needs to perform custom logic after a move occurs.
            @param {Number} x The new x position
            @param {Number} y The new y position
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.onResize(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Called after the component is resized, this method is empty by default but can be implemented by any
            subclass that needs to perform custom logic after a resize occurs.
            @param {Number} adjWidth The box-adjusted width that was set
            @param {Number} adjHeight The box-adjusted height that was set
            @param {Number} rawWidth The width that was originally specified
            @param {Number} rawHeight The height that was originally specified
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setAutoScroll(System.Boolean)">
            <summary>
            Sets the overflow on the content element of the component.
            @param {Boolean} scroll True to allow the Component to auto scroll.
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setHeight(System.Object)">
            <summary>
            Sets the height of the component.  This method fires the {@link #resize} event.
            @param {Mixed} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS height style.</li>
            <li><i>undefined</i> to leave the height unchanged.</li>
            </ul></div>
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setPagePosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.
            This method fires the {@link #move} event.
            @param {Number} x The new x position
            @param {Number} y The new y position
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
            This method fires the {@link #move} event.
            @param {Number} left The new left
            @param {Number} top The new top
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setSize(System.Object,System.Object)">
            <summary>
            Sets the width and height of this BoxComponent. This method fires the {@link #resize} event. This method can accept
            either width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.
            @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS width style.</li>
            <li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
            <li><code>undefined</code> to leave the width unchanged.</li>
            </ul></div>
            @param {Mixed} height The new height to set (not required if a size object is passed as the first arg).
            This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
            <li><code>undefined</code> to leave the height unchanged.</li>
            </ul></div>
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.setWidth(System.Object)">
            <summary>
            Sets the width of the component.  This method fires the {@link #resize} event.
            @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS width style.</li>
            </ul></div>
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.syncSize">
            <summary>
            Force the component's size to recalculate based on the underlying element's current height and width.
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="M:Ext.BoxComponent.updateBox(System.Object)">
            <summary>
            Sets the current box measurements of the component's underlying element.
            @param {Object} box An object in the format {x, y, width, height}
            @return {Ext.BoxComponent} this
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.anchor">
            <summary>
            <p><b>Note</b>: this config is only used when this Component is rendered
            by a Container which has been configured to use an <b>{@link Ext.layout.AnchorLayout AnchorLayout} (or subclass thereof).</b>
            based layout manager, for example:<div class="mdetail-params"><ul>
            <li>{@link Ext.form.FormPanel}</li>
            <li>specifying <code>layout: 'anchor' // or 'form', or 'absolute'</code></li>
            </ul></div></p>
            <p>See {@link Ext.layout.AnchorLayout}.{@link Ext.layout.AnchorLayout#anchor anchor} also.</p>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.autoHeight">
            <summary>
            <p>True to use height:'auto', false to use fixed height (or allow it to be managed by its parent
            Container's {@link Ext.Container#layout layout manager}. Defaults to false.</p>
            <p><b>Note</b>: Although many components inherit this config option, not all will
            function as expected with a height of 'auto'. Setting autoHeight:true means that the
            browser will manage height based on the element's contents, and that Ext will not manage it at all.</p>
            <p>If the <i>browser</i> is managing the height, be aware that resizes performed by the browser in response
            to changes within the structure of the Component cannot be detected. Therefore changes to the height might
            result in elements needing to be synchronized with the new height. Example:</p><pre><code>
            var w = new Ext.Window({
            title: 'Window',
            width: 600,
            autoHeight: true,
            items: {
            title: 'Collapse Me',
            height: 400,
            collapsible: true,
            border: false,
            listeners: {
            beforecollapse: function() {
            w.el.shadow.hide();
            },
            beforeexpand: function() {
            w.el.shadow.hide();
            },
            collapse: function() {
            w.syncShadow();
            },
            expand: function() {
            w.syncShadow();
            }
            }
            }
            }).show();
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.autoScroll">
            <summary>
            <code>true</code> to use overflow:'auto' on the components layout element and show scroll bars automatically when
            necessary, <code>false</code> to clip any overflowing content (defaults to <code>false</code>).
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.autoWidth">
            <summary>
            <p>True to use width:'auto', false to use fixed width (or allow it to be managed by its parent
            Container's {@link Ext.Container#layout layout manager}. Defaults to false.</p>
            <p><b>Note</b>: Although many components  inherit this config option, not all will
            function as expected with a width of 'auto'. Setting autoWidth:true means that the
            browser will manage width based on the element's contents, and that Ext will not manage it at all.</p>
            <p>If the <i>browser</i> is managing the width, be aware that resizes performed by the browser in response
            to changes within the structure of the Component cannot be detected. Therefore changes to the width might
            result in elements needing to be synchronized with the new width. For example, where the target element is:</p><pre><code>
            &lt;div id='grid-container' style='margin-left:25%;width:50%'>&lt;/div>
            </code></pre>
            A Panel rendered into that target element must listen for browser window resize in order to relay its
            child items when the browser changes its width:<pre><code>
            var myPanel = new Ext.Panel({
            renderTo: 'grid-container',
            monitorResize: true, // relay on browser resize
            title: 'Panel',
            height: 400,
            autoWidth: true,
            layout: 'hbox',
            layoutConfig: {
            align: 'stretch'
            },
            defaults: {
            flex: 1
            },
            items: [{
            title: 'Box 1',
            }, {
            title: 'Box 2'
            }, {
            title: 'Box 3'
            }],
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.boxMaxHeight">
            <summary>
            <p>The maximum value in pixels which this BoxComponent will set its height to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.boxMaxWidth">
            <summary>
            <p>The maximum value in pixels which this BoxComponent will set its width to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.boxMinHeight">
            <summary>
            <p>The minimum value in pixels which this BoxComponent will set its height to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.boxMinWidth">
            <summary>
            <p>The minimum value in pixels which this BoxComponent will set its width to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.BoxComponentConfig.flex" -->
        <member name="P:Ext.BoxComponentConfig.height">
            <summary>
            The height of this component in pixels (defaults to auto).
            <b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.margins">
            <summary>
            <p><b>Note</b>: this config is only used when this BoxComponent is rendered
            by a Container which has been configured to use the <b>{@link Ext.layout.BorderLayout BorderLayout}</b>
            or one of the two <b>{@link Ext.layout.BoxLayout BoxLayout} subclasses.</b></p>
            <p>An object containing margins to apply to this BoxComponent in the
            format:</p><pre><code>
            {
            top: (top margin),
            right: (right margin),
            bottom: (bottom margin),
            left: (left margin)
            }</code></pre>
            <p>May also be a string containing space-separated, numeric margin values. The order of the
            sides associated with each value matches the way CSS processes margin values:</p>
            <p><div class="mdetail-params"><ul>
            <li>If there is only one value, it applies to all sides.</li>
            <li>If there are two values, the top and bottom borders are set to the first value and the
            right and left are set to the second.</li>
            <li>If there are three values, the top is set to the first value, the left and right are set
            to the second, and the bottom is set to the third.</li>
            <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
            </ul></div></p>
            <p>Defaults to:</p><pre><code>
            {top:0, right:0, bottom:0, left:0}
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.pageX">
            <summary>
            The page level x coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.pageY">
            <summary>
            The page level y coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.BoxComponentConfig.region" -->
        <member name="P:Ext.BoxComponentConfig.tabTip">
            <summary>
            <p><b>Note</b>: this config is only used when this BoxComponent is a child item of a TabPanel.</p>
            A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over
            the associated tab selector element. {@link Ext.QuickTips}.init()
            must be called in order for the tips to render.
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.width">
            <summary>
            The width of this component in pixels (defaults to auto).
            <b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.x">
            <summary>
            The local x (left) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.BoxComponentConfig.y">
            <summary>
            The local y (top) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="T:Ext.Button">
            <summary>
            @class Ext.Button
            @extends Ext.BoxComponent
            Simple Button class
            @cfg {String} text The button text to be used as innerHTML (html tags are accepted)
            @cfg {String} icon The path to an image to display in the button (the image will be set as the background-image
            CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
            @cfg {Function} handler A function called when the button is clicked (can be used instead of click event).
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
            <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
            </ul></div>
            @cfg {Number} minWidth The minimum width for this button (used to give a set of buttons a common width).
            See also {@link Ext.Panel}.<tt>{@link Ext.Panel#minButtonWidth minButtonWidth}</tt>.
            @cfg {String/Object} tooltip The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object
            @cfg {Boolean} hidden True to start hidden (defaults to false)
            @cfg {Boolean} disabled True to start disabled (defaults to false)
            @cfg {Boolean} pressed True to start pressed (only if enableToggle = true)
            @cfg {String} toggleGroup The group this toggle button is a member of (only 1 per group can be pressed)
            @cfg {Boolean/Object} repeat True to repeat fire the click event while the mouse is down. This can also be
            a {@link Ext.util.ClickRepeater ClickRepeater} config object (defaults to false).
            @constructor
            Create a new button
            @param {Object} config The config object
            @xtype button
            </summary>
        </member>
        <member name="M:Ext.Button.getTemplateArgs">
            <summary>
            <p>This method returns an Array which provides substitution parameters for the {@link #template Template} used
            to create this Button's DOM structure.</p>
            <p>Instances or subclasses which use a different Template to create a different DOM structure may need to provide their
            own implementation of this method.</p>
            <p>The default implementation which provides data for the default {@link #template} returns an Array containing the
            following items:</p><div class="mdetail-params"><ul>
            <li>The &lt;button&gt;'s {@link #type}</li>
            <li>A CSS class name applied to the Button's main &lt;tbody&gt; element which determines the button's scale and icon alignment.</li>
            <li>A CSS class to determine the presence and position of an arrow icon. (<code>'x-btn-arrow'</code> or <code>'x-btn-arrow-bottom'</code> or <code>''</code>)</li>
            <li>The {@link #cls} CSS class name applied to the button's wrapping &lt;table&gt; element.</li>
            <li>The Component id which is applied to the button's wrapping &lt;table&gt; element.</li>
            </ul></div>
            @return {Array} Substitution data for a Template.
            </summary>
        </member>
        <member name="M:Ext.Button.getText">
            <summary>
            Gets the text for this Button
            @return {String} The button text
            </summary>
        </member>
        <member name="M:Ext.Button.hasVisibleMenu">
            <summary>
            Returns true if the button has a menu and it is visible
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.Button.hideMenu">
            <summary>
            Hide this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Button.initComponent">
            <summary>
            @cfg {Boolean} autoWidth
            By default, if a width is not specified the button will attempt to stretch horizontally to fit its content.
            If the button is being managed by a width sizing layout (hbox, fit, anchor), set this to false to prevent
            the button from doing this automatic sizing.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="M:Ext.Button.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Assigns this Button's click handler
            @param {Function} handler The function to call when the button is clicked
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function is executed.
            Defaults to this Button.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setIcon(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the background image (inline style) of the button.  This method also changes
            the value of the {@link icon} config internally.
            @param {String} icon The path to an image to display in the button
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setIconClass(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
            the value of the {@link iconCls} config internally.
            @param {String} cls The CSS class providing the icon image
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets this Button's text
            @param {String} text The button text
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setTooltip(System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.Button.showMenu">
            <summary>
            Show this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Button.toggle(System.Boolean,System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            @param {Boolean} state (optional) Force a particular state
            @param {Boolean} supressEvent (optional) True to stop events being fired when calling this method.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.arrowAlign">
            <summary>
            @cfg {String} arrowAlign
            <p>(Optional) The side of the Button box to render the arrow if the button has an associated {@link #menu}.
            Two values are allowed:</p>
            <ul class="mdetail-params">
            <li>'right'<div class="sub-desc"></div></li>
            <li>'bottom'<div class="sub-desc"></div></li>
            </ul>
            <p>Defaults to <b><tt>'right'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.Button.buttonSelector">
            <summary>
            @cfg {String} buttonSelector
            <p>(Optional) A {@link Ext.DomQuery DomQuery} selector which is used to extract the active, clickable element from the
            DOM structure created.</p>
            <p>When a custom {@link #template} is used, you  must ensure that this selector results in the selection of
            a focussable element.</p>
            <p>Defaults to <b><tt>'button:first-child'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.Button.clickEvent">
            <summary>
            @cfg {String} clickEvent
            The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).
            Defaults to <tt>'click'</tt>.
            </summary>
        </member>
        <member name="P:Ext.Button.disabled">
            <summary>
            Read-only. True if this button is disabled
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Button.enableToggle">
            <summary>
            @cfg {Boolean} enableToggle
            True to enable pressed/not pressed toggling (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Button.handleMouseEvents">
            <summary>
            @cfg {Boolean} handleMouseEvents
            False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Button.hidden">
            <summary>
            Read-only. True if this button is hidden
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Button.iconAlign">
            <summary>
            @cfg {String} iconAlign
            <p>(Optional) The side of the Button box to render the icon. Four values are allowed:</p>
            <ul class="mdetail-params">
            <li>'top'<div class="sub-desc"></div></li>
            <li>'right'<div class="sub-desc"></div></li>
            <li>'bottom'<div class="sub-desc"></div></li>
            <li>'left'<div class="sub-desc"></div></li>
            </ul>
            <p>Defaults to <b><tt>'left'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.Button.menuAlign">
            <summary>
            @cfg {String} menuAlign
            The position to align the menu to (see {@link Ext.Element#alignTo} for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Button.pressed">
            <summary>
            Read-only. True if this button is pressed (only if enableToggle = true)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Button.scale">
            <summary>
            @cfg {String} scale
            <p>(Optional) The size of the Button. Three values are allowed:</p>
            <ul class="mdetail-params">
            <li>'small'<div class="sub-desc">Results in the button element being 16px high.</div></li>
            <li>'medium'<div class="sub-desc">Results in the button element being 24px high.</div></li>
            <li>'large'<div class="sub-desc">Results in the button element being 32px high.</div></li>
            </ul>
            <p>Defaults to <b><tt>'small'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.Button.tooltipType">
            <summary>
            @cfg {String} tooltipType
            The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
            </summary>
        </member>
        <member name="P:Ext.Button.type">
            <summary>
            @cfg {String} type
            submit, reset or button - defaults to 'button'
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.allowDepress">
            <summary>
            False to not allow a pressed Button to be depressed (defaults to undefined). Only valid when {@link #enableToggle} is true.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.arrowAlign">
            <summary>
            <p>(Optional) The side of the Button box to render the arrow if the button has an associated {@link #menu}.
            Two values are allowed:</p>
            <ul class="mdetail-params">
            <li>'right'<div class="sub-desc"></div></li>
            <li>'bottom'<div class="sub-desc"></div></li>
            </ul>
            <p>Defaults to <b><tt>'right'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.buttonSelector">
            <summary>
            <p>(Optional) A {@link Ext.DomQuery DomQuery} selector which is used to extract the active, clickable element from the
            DOM structure created.</p>
            <p>When a custom {@link #template} is used, you  must ensure that this selector results in the selection of
            a focussable element.</p>
            <p>Defaults to <b><tt>'button:first-child'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.clickEvent">
            <summary>
            The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).
            Defaults to <tt>'click'</tt>.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.cls">
            <summary>
            A CSS class string to apply to the button's main element.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.contentEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.data">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.disabled">
            <summary>
            True to start disabled (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.enableToggle">
            <summary>
            True to enable pressed/not pressed toggling (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.handleMouseEvents">
            <summary>
            False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.handler">
            <summary>
            A function called when the button is clicked (can be used instead of click event).
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
            <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.hidden">
            <summary>
            True to start hidden (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.html">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.icon">
            <summary>
            The path to an image to display in the button (the image will be set as the background-image
            CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconAlign">
            <summary>
            <p>(Optional) The side of the Button box to render the icon. Four values are allowed:</p>
            <ul class="mdetail-params">
            <li>'top'<div class="sub-desc"></div></li>
            <li>'right'<div class="sub-desc"></div></li>
            <li>'bottom'<div class="sub-desc"></div></li>
            <li>'left'<div class="sub-desc"></div></li>
            </ul>
            <p>Defaults to <b><tt>'left'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.menuAlign">
            <summary>
            The position to align the menu to (see {@link Ext.Element#alignTo} for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.minWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            See also {@link Ext.Panel}.<tt>{@link Ext.Panel#minButtonWidth minButtonWidth}</tt>.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.overflowText">
            <summary>
            If used in a {@link Ext.Toolbar Toolbar}, the
            text to be used if this item is shown in the overflow menu. See also
            {@link Ext.Toolbar.Item}.<code>{@link Ext.Toolbar.Item#overflowText overflowText}</code>.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.pressed">
            <summary>
            True to start pressed (only if enableToggle = true)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.repeat">
            <summary>
            True to repeat fire the click event while the mouse is down. This can also be
            a {@link Ext.util.ClickRepeater ClickRepeater} config object (defaults to false).
            @constructor
            Create a new button
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.scale">
            <summary>
            <p>(Optional) The size of the Button. Three values are allowed:</p>
            <ul class="mdetail-params">
            <li>'small'<div class="sub-desc">Results in the button element being 16px high.</div></li>
            <li>'medium'<div class="sub-desc">Results in the button element being 24px high.</div></li>
            <li>'large'<div class="sub-desc">Results in the button element being 32px high.</div></li>
            </ul>
            <p>Defaults to <b><tt>'small'</tt></b>.</p>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the
            <code>{@link #handler}</code> and <code>{@link #toggleHandler}</code> is
            executed. Defaults to this Button.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.tabIndex">
            <summary>
            Set a DOM tabIndex for this button (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.template">
            <summary>
            (Optional)
            <p>A {@link Ext.Template Template} used to create the Button's DOM structure.</p>
            Instances, or subclasses which need a different DOM structure may provide a different
            template layout in conjunction with an implementation of {@link #getTemplateArgs}.
            @type Ext.Template
            @property template
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.text">
            <summary>
            The button text to be used as innerHTML (html tags are accepted)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.toggleGroup">
            <summary>
            The group this toggle button is a member of (only 1 per group can be pressed)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.toggleHandler">
            <summary>
            Function called when a Button with {@link #enableToggle} set to true is clicked. Two arguments are passed:<ul class="mdetail-params">
            <li><b>button</b> : Ext.Button<div class="sub-desc">this Button object</div></li>
            <li><b>state</b> : Boolean<div class="sub-desc">The next state of the Button, true means pressed.</div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.tooltip">
            <summary>
            The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.tooltipType">
            <summary>
            The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.tpl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.tplWriteMode">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.type">
            <summary>
            submit, reset or button - defaults to 'button'
            </summary>
        </member>
        <member name="T:Ext.ButtonGroup">
            <summary>
            @class Ext.ButtonGroup
            @extends Ext.Panel
            Container for a group of buttons. Example usage:
            <pre><code>
            var p = new Ext.Panel({
            title: 'Panel with Button Group',
            width: 300,
            height:200,
            renderTo: document.body,
            html: 'whatever',
            tbar: [{
            xtype: 'buttongroup',
            {@link #columns}: 3,
            title: 'Clipboard',
            items: [{
            text: 'Paste',
            scale: 'large',
            rowspan: 3, iconCls: 'add',
            iconAlign: 'top',
            cls: 'x-btn-as-arrow'
            },{
            xtype:'splitbutton',
            text: 'Menu Button',
            scale: 'large',
            rowspan: 3,
            iconCls: 'add',
            iconAlign: 'top',
            arrowAlign:'bottom',
            menu: [{text: 'Menu Item 1'}]
            },{
            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]
            },{
            text: 'Copy', iconCls: 'add16'
            },{
            text: 'Format', iconCls: 'add16'
            }]
            }]
            });
            </code></pre>
            @constructor
            Create a new ButtonGroup.
            @param {Object} config The config object
            @xtype buttongroup
            </summary>
        </member>
        <member name="T:Ext.Panel">
            <summary>
            @class Ext.Panel
            @extends Ext.Container
            <p>Panel is a container that has specific functionality and structural components that make
            it the perfect building block for application-oriented user interfaces.</p>
            <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
            of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
            <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
            to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
            those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
            default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
            child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
            at all.</p>
            <p>A Panel may also contain {@link #bbar bottom} and {@link #tbar top} toolbars, along with separate
            {@link #header}, {@link #footer} and {@link #body} sections (see {@link #frame} for additional
            information).</p>
            <p>Panel also provides built-in {@link #collapsible expandable and collapsible behavior}, along with
            a variety of {@link #tools prebuilt tool buttons} that can be wired up to provide other customized
            behavior.  Panels can be easily dropped into any {@link Ext.Container Container} or layout, and the
            layout and rendering pipeline is {@link Ext.Container#add completely managed by the framework}.</p>
            @constructor
            @param {Object} config The config object
            @xtype panel
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Container" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.Container.add(System.Object)" -->
        <member name="M:Ext.Container.canLayout">
            <summary>
            @private
            We can only lay out if there is a view area in which to layout.
            display:none on the layout target, *or any of its parent elements* will mean it has no view area.
            </summary>
        </member>
        <member name="M:Ext.Container.cascade(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with
            each component. The scope (<i>this</i>) of
            function call will be the scope provided or the current component. The arguments to the function
            will be the args provided or the current component. If the function returns false at any point,
            the cascade is stopped on that branch.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope of the function (defaults to current component)
            @param {Array} args (optional) The args to call the function with (defaults to passing the current component)
            @return {Ext.Container} this
            </summary>
        </member>
        <member name="M:Ext.Container.doLayout(System.Boolean,System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component
            to an already rendered container, or possibly after changing sizing/position properties of child components.
            @param {Boolean} shallow (optional) True to only calc the layout of this component, and let child components auto
            calc layouts as required (defaults to false, which calls doLayout recursively for each subcontainer)
            @param {Boolean} force (optional) True to force a layout to occur, even if the item is hidden.
            @return {Ext.Container} this
            </summary>
        </member>
        <member name="M:Ext.Container.find(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Find a component under this container at any level by property
            @param {String} prop
            @param {String} value
            @return {Array} Array of Ext.Components
            </summary>
        </member>
        <member name="M:Ext.Container.findBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Find a component under this container at any level by a custom function. If the passed function returns
            true, the component will be included in the results. The passed function is called with the arguments (component, this container).
            @param {Function} fn The function to call
            @param {Object} scope (optional)
            @return {Array} Array of Ext.Components
            </summary>
        </member>
        <member name="M:Ext.Container.findById(SharpKit.JavaScript.JsString)">
            <summary>
            Find a component under this container at any level by id
            @param {String} id
            @deprecated Fairly useless method, since you can just use Ext.getCmp. Should be removed for 4.0
            If you need to test if an id belongs to a container, you can use getCmp and findParent*.
            @return Ext.Component
            </summary>
        </member>
        <member name="M:Ext.Container.findByType(System.Object,System.Boolean)">
            <summary>
            Find a component under this container at any level by xtype or class
            @param {String/Class} xtype The xtype string for a component, or the class of the component directly
            @param {Boolean} shallow (optional) False to check whether this Component is descended from the xtype (this is
            the default), or true to check whether this Component is directly of the specified xtype.
            @return {Array} Array of Ext.Components
            </summary>
        </member>
        <member name="M:Ext.Container.get(System.Object)">
            <summary>
            Get a component contained by this container (alias for items.get(key))
            @param {String/Number} key The index or id of the component
            @deprecated Should be removed in 4.0, since getComponent does the same thing.
            @return {Ext.Component} Ext.Component
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Container.getComponent(System.Object)" -->
        <member name="M:Ext.Container.getLayout">
            <summary>
            Returns the layout currently in use by the container.  If the container does not currently have a layout
            set, a default {@link Ext.layout.ContainerLayout} will be created and set as the container's layout.
            @return {ContainerLayout} layout The container's layout
            </summary>
        </member>
        <member name="M:Ext.Container.getLayoutTarget">
            <summary>
            <p>Returns the Element to be used to contain the child Components of this Container.</p>
            <p>An implementation is provided which returns the Container's {@link #getEl Element}, but
            if there is a more complex structure to a Container, this may be overridden to return
            the element into which the {@link #layout layout} renders child Components.</p>
            @return {Ext.Element} The Element to render child Components into.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Container.insert(SharpKit.JavaScript.JsNumber,Ext.Component)" -->
        <member name="M:Ext.Container.remove(System.Object,System.Boolean)">
            <summary>
            Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
            the {@link #remove} event after the component has been removed.
            @param {Component/String} component The component reference or id to remove.
            @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
            Defaults to the value of this Container's {@link #autoDestroy} config.
            @return {Ext.Component} component The Component that was removed.
            </summary>
        </member>
        <member name="M:Ext.Container.removeAll(System.Boolean)">
            <summary>
            Removes all components from this container.
            @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
            Defaults to the value of this Container's {@link #autoDestroy} config.
            @return {Array} Array of the destroyed components
            </summary>
        </member>
        <member name="P:Ext.Container.autoDestroy">
            <summary>
            If true the container will automatically destroy any contained component that is removed from it, else
            destruction must be handled manually (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Container.bufferResize">
            <summary>
            @cfg {Boolean/Number} bufferResize
            When set to true (50 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer
            the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers
            with a large quantity of sub-components for which frequent layout calls would be expensive. Defaults to <code>50</code>.
            </summary>
        </member>
        <member name="P:Ext.Container.defaultType">
            <summary>
            <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
            a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
            <p>Defaults to <code>'panel'</code>, except {@link Ext.menu.Menu} which defaults to <code>'menuitem'</code>,
            and {@link Ext.Toolbar} and {@link Ext.ButtonGroup} which default to <code>'button'</code>.</p>
            </summary>
        </member>
        <member name="P:Ext.Container.forceLayout">
            <summary>
            If true the container will force a layout initially even if hidden or collapsed. This option
            is useful for forcing forms to render in collapsed or hidden containers. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Container.resizeEvent">
            <summary>
            The event to listen to for resizing in layouts. Defaults to <code>'resize'</code>.
            </summary>
        </member>
        <member name="M:Ext.Panel.addButton(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
            approach is to add buttons via the {@link #buttons} config.
            @param {String/Object} config A valid {@link Ext.Button} config.  A string will become the text for a default
            button config, an object will be treated as a button config object.
            @param {Function} handler The function to be called on button {@link Ext.Button#click}
            @param {Object} scope The scope (<code>this</code> reference) in which the button handler function is executed. Defaults to the Button.
            @return {Ext.Button} The button that was added
            </summary>
        </member>
        <member name="M:Ext.Panel.collapse(System.Boolean)">
            <summary>
            Collapses the panel body so that it becomes hidden.  Fires the {@link #beforecollapse} event which will
            cancel the collapse action if it returns false.
            @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
            {@link #animCollapse} panel config)
            @return {Ext.Panel} this
            </summary>
        </member>
        <member name="M:Ext.Panel.expand(System.Boolean)">
            <summary>
            Expands the panel body so that it becomes visible.  Fires the {@link #beforeexpand} event which will
            cancel the expand action if it returns false.
            @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
            {@link #animCollapse} panel config)
            @return {Ext.Panel} this
            </summary>
        </member>
        <member name="M:Ext.Panel.getBottomToolbar">
            <summary>
            Returns the {@link Ext.Toolbar toolbar} from the bottom (<code>{@link #bbar}</code>) section of the panel.
            @return {Ext.Toolbar} The toolbar
            </summary>
        </member>
        <member name="M:Ext.Panel.getFooterToolbar">
            <summary>
            Returns the {@link Ext.Toolbar toolbar} from the footer (<code>{@link #fbar}</code>) section of the panel.
            @return {Ext.Toolbar} The toolbar
            </summary>
        </member>
        <member name="M:Ext.Panel.getFrameHeight">
            <summary>
            Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
            header and footer elements, but not including the body height).  To retrieve the body height see {@link #getInnerHeight}.
            @return {Number} The frame height
            </summary>
        </member>
        <member name="M:Ext.Panel.getFrameWidth">
            <summary>
            Returns the width in pixels of the framing elements of this panel (not including the body width).  To
            retrieve the body width see {@link #getInnerWidth}.
            @return {Number} The frame width
            </summary>
        </member>
        <member name="M:Ext.Panel.getInnerHeight">
            <summary>
            Returns the height in pixels of the body element (not including the height of any framing elements).
            For the frame height see {@link #getFrameHeight}.
            @return {Number} The body height
            </summary>
        </member>
        <member name="M:Ext.Panel.getInnerWidth">
            <summary>
            Returns the width in pixels of the body element (not including the width of any framing elements).
            For the frame width see {@link #getFrameWidth}.
            @return {Number} The body width
            </summary>
        </member>
        <member name="M:Ext.Panel.getTool(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieve a tool by id.
            @param {String} id
            @return {Object} tool
            </summary>
        </member>
        <member name="M:Ext.Panel.getTopToolbar">
            <summary>
            Returns the {@link Ext.Toolbar toolbar} from the top (<code>{@link #tbar}</code>) section of the panel.
            @return {Ext.Toolbar} The toolbar
            </summary>
        </member>
        <member name="M:Ext.Panel.getUpdater">
            <summary>
            Get the {@link Ext.Updater} for this panel. Enables you to perform Ajax updates of this panel's body.
            @return {Ext.Updater} The Updater
            </summary>
        </member>
        <member name="M:Ext.Panel.load">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            @param {Object/String/Function} config A config object containing any of the following options:
            <pre><code>
            panel.load({
            url: 'your-url.php',
            params: {param1: 'foo', param2: 'bar'}, // or a URL encoded string
            callback: yourFunction,
            scope: yourObject, // optional scope for the callback
            discardUrl: false,
            nocache: false,
            text: 'Loading...',
            timeout: 30,
            scripts: false
            });
            </code></pre>
            The only required property is url. The optional properties nocache, text and scripts
            are shorthand for disableCaching, indicatorText and loadScripts and are used to set their
            associated property on this panel Updater instance.
            @return {Ext.Panel} this
            </summary>
        </member>
        <member name="M:Ext.Panel.setIconClass(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
            icon class if one has already been set and fire the {@link #iconchange} event after completion.
            @param {String} cls The new CSS class name
            </summary>
        </member>
        <member name="M:Ext.Panel.setTitle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            <p>Sets the title text for the panel and optionally the {@link #iconCls icon class}.</p>
            <p>In order to be able to set the title, a header element must have been created
            for the Panel. This is triggered either by configuring the Panel with a non-blank <code>{@link #title}</code>,
            or configuring it with <code><b>{@link #header}: true</b></code>.</p>
            @param {String} title The title text to set
            @param {String} iconCls (optional) {@link #iconCls iconCls} A user-defined CSS class that provides the icon image for this panel
            </summary>
        </member>
        <member name="M:Ext.Panel.toggleCollapse(System.Boolean)">
            <summary>
            Shortcut for performing an {@link #expand} or {@link #collapse} based on the current state of the panel.
            @param {Boolean} animate True to animate the transition, else false (defaults to the value of the
            {@link #animCollapse} panel config)
            @return {Ext.Panel} this
            </summary>
        </member>
        <member name="P:Ext.Panel.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
            <p>Another option available by default is to specify <code>'x-plain'</code> which strips all styling
            except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            See <code>{@link #unstyled}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.Panel.buttonAlign">
            <summary>
            @cfg {String} buttonAlign
            The alignment of any {@link #buttons} added to this panel.  Valid values are <code>'right'</code>,
            <code>'left'</code> and <code>'center'</code> (defaults to <code>'right'</code>).
            </summary>
        </member>
        <member name="P:Ext.Panel.collapsed">
            <summary>
            @cfg {Boolean} collapsed
            <code>true</code> to render the panel collapsed, <code>false</code> to render it expanded (defaults to
            <code>false</code>).
            </summary>
        </member>
        <member name="P:Ext.Panel.collapsedCls">
            <summary>
            @cfg {String} collapsedCls
            A CSS class to add to the panel's element after it has been collapsed (defaults to
            <code>'x-panel-collapsed'</code>).
            </summary>
        </member>
        <member name="P:Ext.Panel.collapseFirst">
            <summary>
            @cfg {Boolean} collapseFirst
            <code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of)
            any other tools in the panel's title bar, <code>false</code> to render it last (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.Panel.elements">
            <summary>
            @cfg {String} elements
            A comma-delimited list of panel elements to initialize when the panel is rendered.  Normally, this list will be
            generated automatically based on the items added to the panel at config time, but sometimes it might be useful to
            make sure a structural element is rendered even if not specified at config time (for example, you may want
            to add a button or toolbar dynamically after the panel has been rendered).  Adding those elements to this
            list will allocate the required placeholders in the panel when it is rendered.  Valid values are<div class="mdetail-params"><ul>
            <li><code>header</code></li>
            <li><code>tbar</code> (top bar)</li>
            <li><code>body</code></li>
            <li><code>bbar</code> (bottom bar)</li>
            <li><code>footer</code></li>
            </ul></div>
            Defaults to '<code>body</code>'.
            </summary>
        </member>
        <member name="P:Ext.Panel.headerAsText">
            <summary>
            @cfg {Boolean} headerAsText
            <code>true</code> to display the panel <code>{@link #title}</code> in the <code>{@link #header}</code>,
            <code>false</code> to hide it (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.Panel.maskDisabled">
            <summary>
            @cfg {Boolean} maskDisabled
            <code>true</code> to mask the panel when it is {@link #disabled}, <code>false</code> to not mask it (defaults
            to <code>true</code>).  Either way, the panel will always tell its contained elements to disable themselves
            when it is disabled, but masking the panel can provide an additional visual cue that the panel is
            disabled.
            </summary>
        </member>
        <member name="P:Ext.Panel.minButtonWidth">
            <summary>
            @cfg {Number} minButtonWidth
            Minimum width in pixels of all {@link #buttons} in this panel (defaults to <code>75</code>)
            </summary>
        </member>
        <member name="P:Ext.Panel.preventBodyReset">
            <summary>
            @cfg {Boolean} preventBodyReset
            Defaults to <code>false</code>.  When set to <code>true</code>, an extra css class <code>'x-panel-normal'</code>
            will be added to the panel's element, effectively applying css styles suggested by the W3C
            (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b> element (not the header,
            footer, etc.).
            </summary>
        </member>
        <member name="P:Ext.Panel.resizeEvent">
            <summary>
            The event to listen to for resizing in layouts. Defaults to <tt>'bodyresize'</tt>.
            </summary>
        </member>
        <member name="T:Ext.dd.DragSource">
            <summary>
            @class Ext.dd.DragSource
            @extends Ext.dd.DDProxy
            A simple class that provides the basic implementation needed to make any element draggable.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DragSource.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.dd.DragSource
            @extends Ext.dd.DDProxy
            A simple class that provides the basic implementation needed to make any element draggable.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="P:Ext.ButtonGroup.baseCls">
            <summary>
            @cfg {String} baseCls  Defaults to <tt>'x-btn-group'</tt>.  See {@link Ext.Panel#baseCls}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroup.defaultType">
            <summary>
            @cfg {String} layout  Defaults to <tt>'table'</tt>.  See {@link Ext.Container#layout}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroup.frame">
            <summary>
            @cfg {Boolean} frame  Defaults to <tt>true</tt>.  See {@link Ext.Panel#frame}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroup.layout">
            <summary>
            @cfg {String} layout  Defaults to <tt>'table'</tt>.  See {@link Ext.Container#layout}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroupConfig.baseCls">
            <summary>
            Defaults to <tt>'x-btn-group'</tt>.  See {@link Ext.Panel#baseCls}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroupConfig.columns">
            <summary>
            The <tt>columns</tt> configuration property passed to the
            {@link #layout configured layout manager}. See {@link Ext.layout.TableLayout#columns}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroupConfig.frame">
            <summary>
            Defaults to <tt>true</tt>.  See {@link Ext.Panel#frame}.
            </summary>
        </member>
        <member name="P:Ext.ButtonGroupConfig.tools">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.ColorPalette">
            <summary>
            @class Ext.ColorPalette
            @extends Ext.Component
            Simple color palette class for choosing colors.  The palette can be rendered to any container.<br />
            Here's an example of typical usage:
            <pre><code>
            var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color
            cp.render('my-div');
            cp.on('select', function(palette, selColor){
            // do something with selColor
            });
            </code></pre>
            @constructor
            Create a new ColorPalette
            @param {Object} config The config object
            @xtype colorpalette
            </summary>
        </member>
        <member name="M:Ext.ColorPalette.initComponent">
            <summary>
            @cfg {Object} scope
            The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
            function will be called.  Defaults to this ColorPalette instance.
            </summary>
        </member>
        <member name="M:Ext.ColorPalette.select(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects the specified color in the palette (fires the {@link #select} event)
            @param {String} color A valid 6-digit color hex code (# will be stripped if included)
            @param {Boolean} suppressEvent (optional) True to stop the select event from firing. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.ColorPalette.allowReselect">
            <summary>
            @cfg {Boolean} allowReselect If set to true then reselecting a color that is already selected fires the {@link #select} event
            </summary>
        </member>
        <member name="P:Ext.ColorPalette.clickEvent">
            <summary>
            @cfg {String} clickEvent
            The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
            Defaults to <tt>'click'</tt>.
            </summary>
        </member>
        <member name="P:Ext.ColorPalette.ctype">
            <summary>
            @cfg {String} clickEvent
            The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
            Defaults to <tt>'click'</tt>.
            </summary>
        </member>
        <member name="P:Ext.ColorPalette.itemCls">
            <summary>
            @cfg {String} itemCls
            The CSS class to apply to the containing element (defaults to 'x-color-palette')
            </summary>
        </member>
        <member name="P:Ext.ColorPalette.value">
            <summary>
            @cfg {String} value
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that
            the hex codes are case-sensitive.
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.allowReselect">
            <summary>
            If set to true then reselecting a color that is already selected fires the {@link #select} event
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.handler">
            <summary>
            Optional. A function that will handle the select event of this palette.
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>palette</code> : ColorPalette<div class="sub-desc">The {@link #palette Ext.ColorPalette}.</div></li>
            <li><code>color</code> : String<div class="sub-desc">The 6-digit color hex code (without the # symbol).</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.itemCls">
            <summary>
            The CSS class to apply to the containing element (defaults to 'x-color-palette')
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.tpl">
            <summary>
            An existing XTemplate instance to be used in place of the default template for rendering the component.
            </summary>
        </member>
        <member name="P:Ext.ColorPaletteConfig.value">
            <summary>
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that
            the hex codes are case-sensitive.
            </summary>
        </member>
        <member name="T:Ext.CompositeElement">
            <summary>
            @class Ext.CompositeElement
            @extends Ext.CompositeElementLite
            <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
            members, or to perform collective actions upon the whole set.</p>
            <p>Although they are not listed, this class supports all of the methods of {@link Ext.Element} and
            {@link Ext.Fx}. The methods from these classes will be performed on all the elements in this collection.</p>
            <p>All methods return <i>this</i> and can be chained.</p>
            Usage:
            <pre><code>
            var els = Ext.select("#some-el div.some-class", true);
            // or select directly from an existing element
            var el = Ext.get('some-el');
            el.select('div.some-class', true);
            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
            els.setWidth(100).hide(true);
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.CompositeElementLite" -->
        <member name="M:Ext.CompositeElementLite.add(System.Object,System.Object)">
            <summary>
            Adds elements to this Composite object.
            @param {Mixed} els Either an Array of DOM elements to add, or another Composite object who's elements should be added.
            @return {CompositeElement} This Composite object.
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.CompositeElementLite.#ctor(System.Object,System.Object)" -->
        <member name="M:Ext.CompositeElementLite.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            <p>Calls the passed function for each element in this composite.</p>
            @param {Function} fn The function to call. The function is passed the following parameters:<ul>
            <li><b>el</b> : Element<div class="sub-desc">The current Element in the iteration.
            <b>This is the flyweight (shared) Ext.Element instance, so if you require a
            a reference to the dom node, use el.dom.</b></div></li>
            <li><b>c</b> : Composite<div class="sub-desc">This Composite object.</div></li>
            <li><b>idx</b> : Number<div class="sub-desc">The zero-based index in the iteration.</div></li>
            </ul>
            @param {Object} scope (optional) The scope (<i>this</i> reference) in which the function is executed. (defaults to the Element)
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.fill(System.Object)">
            <summary>
            Clears this Composite and adds the elements passed.
            @param {Mixed} els Either an array of DOM elements, or another Composite from which to fill this Composite.
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.filter(System.Object)">
            <summary>
            Filters this composite to only elements that match the passed selector.
            @param {String/Function} selector A string CSS selector or a comparison function.
            The comparison function will be called with the following arguments:<ul>
            <li><code>el</code> : Ext.Element<div class="sub-desc">The current DOM element.</div></li>
            <li><code>index</code> : Number<div class="sub-desc">The current index within the collection.</div></li>
            </ul>
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.getCount">
            <summary>
            Returns the number of elements in this Composite.
            @return Number
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.importElementMethods">
            <summary>
            @private
            Copies all of the functions from Ext.Element's prototype onto CompositeElementLite's prototype.
            This is called twice - once immediately below, and once again after additional Ext.Element
            are added in Ext JS
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.indexOf(System.Object)">
            <summary>
            Find the index of the passed element within the composite collection.
            @param el {Mixed} The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
            @return Number The index of the passed Ext.Element in the composite collection, or -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.item(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a flyweight Element of the dom element object at the specified index
            @param {Number} index
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.replaceElement(System.Object,System.Object,System.Boolean)">
            <summary>
            Replaces the specified element with the passed element.
            @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
            to replace.
            @param {Mixed} replacement The id of an element or the Element itself.
            @param {Boolean} domReplace (Optional) True to remove and replace the element in the document too.
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.CompositeElement
            @extends Ext.CompositeElementLite
            <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
            members, or to perform collective actions upon the whole set.</p>
            <p>Although they are not listed, this class supports all of the methods of {@link Ext.Element} and
            {@link Ext.Fx}. The methods from these classes will be performed on all the elements in this collection.</p>
            <p>All methods return <i>this</i> and can be chained.</p>
            Usage:
            <pre><code>
            var els = Ext.select("#some-el div.some-class", true);
            // or select directly from an existing element
            var el = Ext.get('some-el');
            el.select('div.some-class', true);
            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
            els.setWidth(100).hide(true);
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.ContainerConfig.activeItem">
            <summary>
            A string component id or the numeric index of the component that should be initially activated within the
            container's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first
            item in the container's collection).  activeItem only applies to layout styles that can display
            items one at a time (like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout} and
            {@link Ext.layout.FitLayout}).  Related to {@link Ext.layout.ContainerLayout#activeItem}.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.ContainerConfig.bubbleEvents" -->
        <member name="P:Ext.ContainerConfig.bufferResize">
            <summary>
            When set to true (50 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer
            the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers
            with a large quantity of sub-components for which frequent layout calls would be expensive. Defaults to <code>50</code>.
            </summary>
        </member>
        <member name="P:Ext.ContainerConfig.defaults">
            <summary>
            <p>This option is a means of applying default settings to all added items whether added through the {@link #items}
            config or via the {@link #add} or {@link #insert} methods.</p>
            <p>If an added item is a config object, and <b>not</b> an instantiated Component, then the default properties are
            unconditionally applied. If the added item <b>is</b> an instantiated Component, then the default properties are
            applied conditionally so as not to override existing properties in the item.</p>
            <p>If the defaults option is specified as a function, then the function will be called using this Container as the
            scope (<code>this</code> reference) and passing the added item as the first parameter. Any resulting object
            from that call is then applied to the item as default properties.</p>
            <p>For example, to automatically apply padding to the body of each of a set of
            contained {@link Ext.Panel} items, you could pass: <code>defaults: {bodyStyle:'padding:15px'}</code>.</p>
            <p>Usage:</p><pre><code>
            defaults: {               // defaults are applied to items, not the container
            autoScroll:true
            },
            items: [
            {
            xtype: 'panel',   // defaults <b>do not</b> have precedence over
            id: 'panel1',     // options in config objects, so the defaults
            autoScroll: false // will not be applied here, panel1 will be autoScroll:false
            },
            new Ext.Panel({       // defaults <b>do</b> have precedence over options
            id: 'panel2',     // options in components, so the defaults
            autoScroll: false // will be applied here, panel2 will be autoScroll:true.
            })
            ]
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.ContainerConfig.items">
            <summary>
            <pre><b>** IMPORTANT</b>: be sure to <b>{@link #layout specify a <code>layout</code>} if needed ! **</b></pre>
            <p>A single item, or an array of child Components to be added to this container,
            for example:</p>
            <pre><code>
            // specifying a single item
            items: {...},
            layout: 'fit',    // specify a layout!
            // specifying multiple items
            items: [{...}, {...}],
            layout: 'anchor', // specify a layout!
            </code></pre>
            <p>Each item may be:</p>
            <div><ul class="mdetail-params">
            <li>any type of object based on {@link Ext.Component}</li>
            <li>a fully instanciated object or</li>
            <li>an object literal that:</li>
            <div><ul class="mdetail-params">
            <li>has a specified <code>{@link Ext.Component#xtype xtype}</code></li>
            <li>the {@link Ext.Component#xtype} specified is associated with the Component
            desired and should be chosen from one of the available xtypes as listed
            in {@link Ext.Component}.</li>
            <li>If an <code>{@link Ext.Component#xtype xtype}</code> is not explicitly
            specified, the {@link #defaultType} for that Container is used.</li>
            <li>will be "lazily instanciated", avoiding the overhead of constructing a fully
            instanciated Component object</li>
            </ul></div></ul></div>
            <p><b>Notes</b>:</p>
            <div><ul class="mdetail-params">
            <li>Ext uses lazy rendering. Child Components will only be rendered
            should it become necessary. Items are automatically laid out when they are first
            shown (no sizing is done while hidden), or in response to a {@link #doLayout} call.</li>
            <li>Do not specify <code>{@link Ext.Panel#contentEl contentEl}</code>/
            <code>{@link Ext.Panel#html html}</code> with <code>items</code>.</li>
            </ul></div>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.ContainerConfig.layout" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.ContainerConfig.layoutConfig" -->
        <member name="P:Ext.ContainerConfig.monitorResize">
            <summary>
            True to automatically monitor window resize events to handle anything that is sensitive to the current size
            of the viewport.  This value is typically managed by the chosen <code>{@link #layout}</code> and should not need
            to be set manually.
            </summary>
        </member>
        <member name="T:Ext.CycleButton">
            <summary>
            @class Ext.CycleButton
            @extends Ext.SplitButton
            A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically
            cycles through each menu item on click, raising the button's {@link #change} event (or calling the button's
            {@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the
            button displays the dropdown menu just like a normal SplitButton.  Example usage:
            <pre><code>
            var btn = new Ext.CycleButton({
            showText: true,
            prependText: 'View as ',
            items: [{
            text:'text only',
            iconCls:'view-text',
            checked:true
            },{
            text:'HTML',
            iconCls:'view-html'
            }],
            changeHandler:function(btn, item){
            Ext.Msg.alert('Change View', item.text);
            }
            });
            </code></pre>
            @constructor
            Create a new split button
            @param {Object} config The config object
            @xtype cycle
            </summary>
        </member>
        <member name="T:Ext.SplitButton">
            <summary>
            @class Ext.SplitButton
            @extends Ext.Button
            A split button that provides a built-in dropdown arrow that can fire an event separately from the default
            click event of the button.  Typically this would be used to display a dropdown menu that provides additional
            options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
            <pre><code>
            // display a dropdown menu:
            new Ext.SplitButton({
            renderTo: 'button-ct', // the container id
            text: 'Options',
            handler: optionsHandler, // handle a click on the button itself
            menu: new Ext.menu.Menu({
            items: [
            // these items will render as dropdown menu items when the arrow is clicked:
            {text: 'Item 1', handler: item1Handler},
            {text: 'Item 2', handler: item2Handler}
            ]
            })
            });
            // Instead of showing a menu, you provide any type of custom
            // functionality you want when the dropdown arrow is clicked:
            new Ext.SplitButton({
            renderTo: 'button-ct',
            text: 'Options',
            handler: optionsHandler,
            arrowHandler: myCustomHandler
            });
            </code></pre>
            @cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)
            @cfg {String} arrowTooltip The title attribute of the arrow
            @constructor
            Create a new menu button
            @param {Object} config The config object
            @xtype splitbutton
            </summary>
        </member>
        <member name="M:Ext.SplitButton.setArrowHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets this button's arrow click handler.
            @param {Function} handler The function to call when the arrow is clicked
            @param {Object} scope (optional) Scope for the function passed above
            </summary>
        </member>
        <member name="P:Ext.SplitButton.arrowSelector">
            <summary>
            @class Ext.SplitButton
            @extends Ext.Button
            A split button that provides a built-in dropdown arrow that can fire an event separately from the default
            click event of the button.  Typically this would be used to display a dropdown menu that provides additional
            options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
            <pre><code>
            // display a dropdown menu:
            new Ext.SplitButton({
            renderTo: 'button-ct', // the container id
            text: 'Options',
            handler: optionsHandler, // handle a click on the button itself
            menu: new Ext.menu.Menu({
            items: [
            // these items will render as dropdown menu items when the arrow is clicked:
            {text: 'Item 1', handler: item1Handler},
            {text: 'Item 2', handler: item2Handler}
            ]
            })
            });
            // Instead of showing a menu, you provide any type of custom
            // functionality you want when the dropdown arrow is clicked:
            new Ext.SplitButton({
            renderTo: 'button-ct',
            text: 'Options',
            handler: optionsHandler,
            arrowHandler: myCustomHandler
            });
            </code></pre>
            @cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)
            @cfg {String} arrowTooltip The title attribute of the arrow
            @constructor
            Create a new menu button
            @param {Object} config The config object
            @xtype splitbutton
            </summary>
        </member>
        <member name="M:Ext.CycleButton.getActiveItem">
            <summary>
            Gets the currently active menu item.
            @return {Ext.menu.CheckItem} The active item
            </summary>
        </member>
        <member name="M:Ext.CycleButton.getItemText(System.Object)">
            <summary>
            @property menu
            @type Menu
            The {@link Ext.menu.Menu Menu} object used to display the {@link Ext.menu.CheckItem CheckItems} representing the available choices.
            </summary>
        </member>
        <member name="M:Ext.CycleButton.setActiveItem(Ext.menu.CheckItem,System.Boolean)">
            <summary>
            Sets the button's active menu item.
            @param {Ext.menu.CheckItem} item The item to activate
            @param {Boolean} suppressEvent True to prevent the button's change event from firing (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.CycleButton.toggleSelected">
            <summary>
            This is normally called internally on button click, but can be called externally to advance the button's
            active item programmatically to the next one in the menu.  If the current item is the last one in the menu
            the active item will be set to the first item in the menu.
            </summary>
        </member>
        <member name="P:Ext.CycleButtonConfig.changeHandler">
            <summary>
            A callback function that will be invoked each time the active menu
            item in the button's menu has changed.  If this callback is not supplied, the SplitButton will instead
            fire the {@link #change} event on active item change.  The changeHandler function will be called with the
            following argument list: (SplitButton this, Ext.menu.CheckItem item)
            </summary>
        </member>
        <member name="P:Ext.CycleButtonConfig.forceIcon">
            <summary>
            A css class which sets an image to be used as the static icon for this button.  This
            icon will always be displayed regardless of which item is selected in the dropdown list.  This overrides the
            default behavior of changing the button's icon to match the selected item's icon on change.
            </summary>
        </member>
        <member name="P:Ext.CycleButtonConfig.items">
            <summary>
            An array of {@link Ext.menu.CheckItem} <b>config</b> objects to be used when creating the
            button's menu items (e.g., {text:'Foo', iconCls:'foo-icon'})
            </summary>
        </member>
        <member name="P:Ext.CycleButtonConfig.prependText">
            <summary>
            A static string to prepend before the active item's text when displayed as the
            button's text (only applies when showText = true, defaults to '')
            </summary>
        </member>
        <member name="P:Ext.CycleButtonConfig.showText">
            <summary>
            True to display the active item's text as the button text (defaults to false)
            </summary>
        </member>
        <member name="T:Ext.DataView">
            <summary>
            @class Ext.DataView
            @extends Ext.BoxComponent
            A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}
            as its internal templating mechanism, and is bound to an {@link Ext.data.Store}
            so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
            provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
            mouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}
            config must be provided for the DataView to determine what nodes it will be working with.</b>
            *
            <p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>
            <pre><code>
            var store = new Ext.data.JsonStore({
            url: 'get-images.php',
            root: 'images',
            fields: [
            'name', 'url',
            {name:'size', type: 'float'},
            {name:'lastmod', type:'date', dateFormat:'timestamp'}
            ]
            });
            store.load();
            var tpl = new Ext.XTemplate(
            '&lt;tpl for="."&gt;',
            '&lt;div class="thumb-wrap" id="{name}"&gt;',
            '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
            '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
            '&lt;/tpl&gt;',
            '&lt;div class="x-clear"&gt;&lt;/div&gt;'
            );
            var panel = new Ext.Panel({
            id:'images-view',
            frame:true,
            width:535,
            autoHeight:true,
            collapsible:true,
            layout:'fit',
            title:'Simple DataView',
            items: new Ext.DataView({
            store: store,
            tpl: tpl,
            autoHeight:true,
            multiSelect: true,
            overClass:'x-view-over',
            itemSelector:'div.thumb-wrap',
            emptyText: 'No images to display'
            })
            });
            panel.render(document.body);
            </code></pre>
            @constructor
            Create a new DataView
            @param {Object} config The config object
            @xtype dataview
            </summary>
        </member>
        <member name="M:Ext.DataView.bindStore(System.Object,System.Object)">
            <summary>
            Changes the data store bound to this view and refreshes it.
            @param {Store} store The store to bind to this view
            </summary>
        </member>
        <member name="M:Ext.DataView.clearSelections(System.Boolean,System.Object)">
            <summary>
            Clears all selections.
            @param {Boolean} suppressEvent (optional) True to skip firing of the selectionchange event
            </summary>
        </member>
        <member name="M:Ext.DataView.collectData(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber)">
            <summary>
            <p>Function which can be overridden which returns the data object passed to this
            DataView's {@link #tpl template} to render the whole DataView.</p>
            <p>This is usually an Array of data objects, each element of which is processed by an
            {@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
            data object as an Array. However, <i>named</i> properties may be placed into the data object to
            provide non-repeating data such as headings, totals etc.</p>
            @param {Array} records An Array of {@link Ext.data.Record}s to be rendered into the DataView.
            @param {Number} startIndex the index number of the Record being prepared for rendering.
            @return {Array} An Array of data objects to be processed by a repeating XTemplate. May also
            contain <i>named</i> properties.
            </summary>
        </member>
        <member name="M:Ext.DataView.deselect(System.Object)">
            <summary>
            Deselects a node.
            @param {HTMLElement/Number/Record} node The node, node index or record to deselect
            </summary>
        </member>
        <member name="M:Ext.DataView.findItemFromChild(SharpKit.Html4.HtmlElement)">
            <summary>
            Returns the template node the passed child belongs to, or null if it doesn't belong to one.
            @param {HTMLElement} node
            @return {HTMLElement} The template node
            </summary>
        </member>
        <member name="M:Ext.DataView.getNode(System.Object)">
            <summary>
            Gets a template node.
            @param {HTMLElement/String/Number/Ext.data.Record} nodeInfo An HTMLElement template node, index of a template node,
            the id of a template node or the record associated with the node.
            @return {HTMLElement} The node or null if it wasn't found
            </summary>
        </member>
        <member name="M:Ext.DataView.getNodes(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Gets a range nodes.
            @param {Number} start (optional) The index of the first node in the range
            @param {Number} end (optional) The index of the last node in the range
            @return {Array} An array of nodes
            </summary>
        </member>
        <member name="M:Ext.DataView.getRecord(SharpKit.Html4.HtmlElement)">
            <summary>
            Gets a record from a node
            @param {HTMLElement} node The node to evaluate
            @return {Record} record The {@link Ext.data.Record} object
            </summary>
        </member>
        <member name="M:Ext.DataView.getRecords(SharpKit.JavaScript.JsArray)">
            <summary>
            Gets an array of the records from an array of nodes
            @param {Array} nodes The nodes to evaluate
            @return {Array} records The {@link Ext.data.Record} objects
            </summary>
        </member>
        <member name="M:Ext.DataView.getSelectedIndexes">
            <summary>
            Gets the indexes of the selected nodes.
            @return {Array} An array of numeric indexes
            </summary>
        </member>
        <member name="M:Ext.DataView.getSelectedNodes">
            <summary>
            Gets the currently selected nodes.
            @return {Array} An array of HTMLElements
            </summary>
        </member>
        <member name="M:Ext.DataView.getSelectedRecords">
            <summary>
            Gets an array of the selected records
            @return {Array} An array of {@link Ext.data.Record} objects
            </summary>
        </member>
        <member name="M:Ext.DataView.getSelectionCount">
            <summary>
            Gets the number of selected nodes.
            @return {Number} The node count
            </summary>
        </member>
        <member name="M:Ext.DataView.getStore">
            <summary>
            Returns the store associated with this DataView.
            @return {Ext.data.Store} The store
            </summary>
        </member>
        <member name="M:Ext.DataView.indexOf(System.Object)">
            <summary>
            Finds the index of the passed node.
            @param {HTMLElement/String/Number/Record} nodeInfo An HTMLElement template node, index of a template node, the id of a template node
            or a record associated with a node.
            @return {Number} The index of the node or -1
            </summary>
        </member>
        <member name="M:Ext.DataView.isSelected(System.Object)">
            <summary>
            Returns true if the passed node is selected, else false.
            @param {HTMLElement/Number/Ext.data.Record} node The node, node index or record to check
            @return {Boolean} True if selected, else false
            </summary>
        </member>
        <member name="M:Ext.DataView.onDataChanged">
            <summary>
            @private
            Calls this.refresh if this.blockRefresh is not true
            </summary>
        </member>
        <member name="M:Ext.DataView.prepareData(System.Object)">
            <summary>
            Function which can be overridden to provide custom formatting for each Record that is used by this
            DataView's {@link #tpl template} to render each node.
            @param {Array/Object} data The raw data object that was used to create the Record.
            @param {Number} recordIndex the index number of the Record being prepared for rendering.
            @param {Record} record The Record being prepared for rendering.
            @return {Array/Object} The formatted data in a format expected by the internal {@link #tpl template}'s overwrite() method.
            (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
            </summary>
        </member>
        <member name="M:Ext.DataView.refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template.
            </summary>
        </member>
        <member name="M:Ext.DataView.refreshNode(SharpKit.JavaScript.JsNumber)">
            <summary>
            Refreshes an individual node's data from the store.
            @param {Number} index The item's data index in the store
            </summary>
        </member>
        <member name="M:Ext.DataView.select(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Selects a set of nodes.
            @param {Array/HTMLElement/String/Number/Ext.data.Record} nodeInfo An HTMLElement template node, index of a template node,
            id of a template node, record associated with a node or an array of any of those to select
            @param {Boolean} keepExisting (optional) true to keep existing selections
            @param {Boolean} suppressEvent (optional) true to skip firing of the selectionchange vent
            </summary>
        </member>
        <member name="M:Ext.DataView.selectRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Selects a range of nodes. All nodes between start and end are selected.
            @param {Number} start The index of the first node in the range
            @param {Number} end The index of the last node in the range
            @param {Boolean} keepExisting (optional) True to retain existing selections
            </summary>
        </member>
        <member name="P:Ext.DataView.blockRefresh">
            <summary>
            @cfg {Boolean} blockRefresh Set this to true to ignore datachanged events on the bound store. This is useful if
            you wish to provide custom transition animations via a plugin (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.DataView.deferEmptyText">
            <summary>
            @cfg {Boolean} deferEmptyText True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.DataView.emptyText">
            <summary>
            @cfg {String} emptyText
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.DataView.selectedClass">
            <summary>
            @cfg {String} selectedClass
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.DataView.trackOver">
            <summary>
            @cfg {Boolean} trackOver True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.blockRefresh">
            <summary>
            Set this to true to ignore datachanged events on the bound store. This is useful if
            you wish to provide custom transition animations via a plugin (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.deferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.emptyText">
            <summary>
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.itemSelector">
            <summary>
            <b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or
            <tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be
            working with.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.loadingText">
            <summary>
            A string to display during data load operations (defaults to undefined).  If specified, this text will be
            displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
            contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.multiSelect">
            <summary>
            True to allow selection of more than one item at a time, false to allow selection of only a single item
            at a time or no selection at all, depending on the value of {@link #singleSelect} (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.overClass">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.selectedClass">
            <summary>
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.simpleSelect">
            <summary>
            True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
            false to force the user to hold Ctrl or Shift to select more than on item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.singleSelect">
            <summary>
            True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false).
            Note that if {@link #multiSelect} = true, this value will be ignored.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.store">
            <summary>
            The {@link Ext.data.Store} to bind this DataView to.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.tpl">
            <summary>
            The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should
            be specified in the same format expected by the constructor of {@link Ext.XTemplate}.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.trackOver">
            <summary>
            True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="T:Ext.DatePicker">
            <summary>
            @class Ext.DatePicker
            @extends Ext.Component
            <p>A popup date picker. This class is used by the {@link Ext.form.DateField DateField} class
            to allow browsing and selection of valid dates.</p>
            <p>All the string values documented below may be overridden by including an Ext locale file in
            your page.</p>
            @constructor
            Create a new DatePicker
            @param {Object} config The config object
            @xtype datepicker
            </summary>
        </member>
        <member name="M:Ext.DatePicker.getValue">
            <summary>
            Gets the current selected value of the date field
            @return {Date} The selected date
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setDisabledDates(System.Object)">
            <summary>
            Replaces any existing disabled dates with new values and refreshes the DatePicker.
            @param {Array/RegExp} disabledDates An array of date strings (see the {@link #disabledDates} config
            for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setDisabledDays(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
            @param {Array} disabledDays An array of disabled day indexes. See the {@link #disabledDays} config
            for details on supported values.
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setMaxDate(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing {@link #maxDate} with the new value and refreshes the DatePicker.
            @param {Date} value The maximum date that can be selected
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setMinDate(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing {@link #minDate} with the new value and refreshes the DatePicker.
            @param {Date} value The minimum date that can be selected
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Sets the value of the date field
            @param {Date} value The date to set
            </summary>
        </member>
        <member name="P:Ext.DatePicker.cancelText">
            <summary>
            @cfg {String} cancelText
            The text to display on the cancel button (defaults to <code>'Cancel'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.disabledDatesText">
            <summary>
            @cfg {String} disabledDatesText
            The tooltip text to display when the date falls on a disabled date (defaults to <code>'Disabled'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.disabledDaysText">
            <summary>
            @cfg {String} disabledDaysText
            The tooltip to display when the date falls on a disabled day (defaults to <code>'Disabled'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.format">
            <summary>
            @cfg {String} format
            The default date format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to <code>'m/d/y'</code>).
            </summary>
        </member>
        <member name="P:Ext.DatePicker.maxText">
            <summary>
            @cfg {String} maxText
            The error text to display if the maxDate validation fails (defaults to <code>'This date is after the maximum date'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.minText">
            <summary>
            @cfg {String} minText
            The error text to display if the minDate validation fails (defaults to <code>'This date is before the minimum date'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.monthYearText">
            <summary>
            @cfg {String} monthYearText
            The header month selector tooltip (defaults to <code>'Choose a month (Control+Up/Down to move years)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.nextText">
            <summary>
            @cfg {String} nextText
            The next month navigation button tooltip (defaults to <code>'Next Month (Control+Right)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.okText">
            <summary>
            @cfg {String} okText
            The text to display on the ok button (defaults to <code>'&#160;OK&#160;'</code> to give the user extra clicking room)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.prevText">
            <summary>
            @cfg {String} prevText
            The previous month navigation button tooltip (defaults to <code>'Previous Month (Control+Left)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.showToday">
            <summary>
            @cfg {Boolean} showToday
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
            that selects the current date (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.DatePicker.startDay">
            <summary>
            @cfg {Number} startDay
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.todayText">
            <summary>
            @cfg {String} todayText
            The text to display on the button that selects the current date (defaults to <code>'Today'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePicker.todayTip">
            <summary>
            @cfg {String} todayTip
            A string used to format the message for displaying in a tooltip over the button that
            selects the current date. Defaults to <code>'{0} (Spacebar)'</code> where
            the <code>{0}</code> token is replaced by today's date.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.cancelText">
            <summary>
            The text to display on the cancel button (defaults to <code>'Cancel'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.dayNames">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.disabledDates">
            <summary>
            An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular
            expression so they are very powerful. Some examples:
            <ul>
            <li>['03/08/2003', '09/16/2003'] would disable those exact dates</li>
            <li>['03/08', '09/16'] would disable those days for every year</li>
            <li>['^03/08'] would only match the beginning (useful if you are using short years)</li>
            <li>['03/../2006'] would disable every day in March 2006</li>
            <li>['^03'] would disable every day in every March</li>
            </ul>
            Note that the format of the dates included in the array should exactly match the {@link #format} config.
            In order to support regular expressions, if you are using a date format that has '.' in it, you will have to
            escape the dot when restricting dates. For example: ['03\\.08\\.03'].
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.disabledDatesRE">
            <summary>
            JavaScript regular expression used to disable a pattern of dates (defaults to null).  The {@link #disabledDates}
            config will generate this regex internally, but if you specify disabledDatesRE it will take precedence over the
            disabledDates value.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.disabledDatesText">
            <summary>
            The tooltip text to display when the date falls on a disabled date (defaults to <code>'Disabled'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.disabledDays">
            <summary>
            An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.disabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to <code>'Disabled'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.format">
            <summary>
            The default date format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to <code>'m/d/y'</code>).
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.handler">
            <summary>
            Optional. A function that will handle the select event of this picker.
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>picker</code> : DatePicker<div class="sub-desc">This DatePicker.</div></li>
            <li><code>date</code> : Date<div class="sub-desc">The selected date.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.maxDate">
            <summary>
            Maximum allowable date (JavaScript date object, defaults to null)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.maxText">
            <summary>
            The error text to display if the maxDate validation fails (defaults to <code>'This date is after the maximum date'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.minDate">
            <summary>
            Minimum allowable date (JavaScript date object, defaults to null)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.minText">
            <summary>
            The error text to display if the minDate validation fails (defaults to <code>'This date is before the minimum date'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.monthNames">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.monthYearText">
            <summary>
            The header month selector tooltip (defaults to <code>'Choose a month (Control+Up/Down to move years)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.nextText">
            <summary>
            The next month navigation button tooltip (defaults to <code>'Next Month (Control+Right)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.okText">
            <summary>
            The text to display on the ok button (defaults to <code>'&#160;OK&#160;'</code> to give the user extra clicking room)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.prevText">
            <summary>
            The previous month navigation button tooltip (defaults to <code>'Previous Month (Control+Left)'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.scope">
            <summary>
            The scope (<code><b>this</b></code> reference) in which the <code>{@link #handler}</code>
            function will be called.  Defaults to this DatePicker instance.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.showToday">
            <summary>
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
            that selects the current date (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.startDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.todayText">
            <summary>
            The text to display on the button that selects the current date (defaults to <code>'Today'</code>)
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.todayTip">
            <summary>
            A string used to format the message for displaying in a tooltip over the button that
            selects the current date. Defaults to <code>'{0} (Spacebar)'</code> where
            the <code>{0}</code> token is replaced by today's date.
            </summary>
        </member>
        <member name="T:Ext.Direct">
            <summary>
            @class Ext.Direct
            @extends Ext.util.Observable
            <p><b><u>Overview</u></b></p>
            *
            <p>Ext.Direct aims to streamline communication between the client and server
            by providing a single interface that reduces the amount of common code
            typically required to validate data and handle returned data packets
            (reading data, error conditions, etc).</p>
            *
            <p>The Ext.direct namespace includes several classes for a closer integration
            with the server-side. The Ext.data namespace also includes classes for working
            with Ext.data.Stores which are backed by data from an Ext.Direct method.</p>
            *
            <p><b><u>Specification</u></b></p>
            *
            <p>For additional information consult the
            <a href="http://extjs.com/products/extjs/direct.php">Ext.Direct Specification</a>.</p>
            *
            <p><b><u>Providers</u></b></p>
            *
            <p>Ext.Direct uses a provider architecture, where one or more providers are
            used to transport data to and from the server. There are several providers
            that exist in the core at the moment:</p><div class="mdetail-params"><ul>
            *
            <li>{@link Ext.direct.JsonProvider JsonProvider} for simple JSON operations</li>
            <li>{@link Ext.direct.PollingProvider PollingProvider} for repeated requests</li>
            <li>{@link Ext.direct.RemotingProvider RemotingProvider} exposes server side
            on the client.</li>
            </ul></div>
            *
            <p>A provider does not need to be invoked directly, providers are added via
            {@link Ext.Direct}.{@link Ext.Direct#add add}.</p>
            *
            <p><b><u>Router</u></b></p>
            *
            <p>Ext.Direct utilizes a "router" on the server to direct requests from the client
            to the appropriate server-side method. Because the Ext.Direct API is completely
            platform-agnostic, you could completely swap out a Java based server solution
            and replace it with one that uses C# without changing the client side JavaScript
            at all.</p>
            *
            <p><b><u>Server side events</u></b></p>
            *
            <p>Custom events from the server may be handled by the client by adding
            listeners, for example:</p>
            <pre><code>
            {"type":"event","name":"message","data":"Successfully polled at: 11:19:30 am"}
            // add a handler for a 'message' event sent by the server
            Ext.Direct.on('message', function(e){
            out.append(String.format('&lt;p>&lt;i>{0}&lt;/i>&lt;/p>', e.data));
            out.el.scrollTo('t', 100000, true);
            });
            </code></pre>
            @singleton
            </summary>
        </member>
        <member name="M:Ext.util.Observable.capture(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Starts capture on the specified Observable. All events will be passed
            to the supplied function with the event name + standard signature of the event
            <b>before</b> the event is fired. If the supplied function returns false,
            the event will not fire.
            @param {Observable} o The Observable to capture events from.
            @param {Function} fn The function to call when an event is fired.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Observable firing the event.
            @static
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Observable.observeClass(SharpKit.JavaScript.JsAction,System.Object)" -->
        <member name="M:Ext.Direct.addProvider(System.Object)">
            <summary>
            Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods.
            If the provider is not already connected, it will auto-connect.
            <pre><code>
            var pollProv = new Ext.direct.PollingProvider({
            url: 'php/poll2.php'
            });
            Ext.Direct.addProvider(
            {
            "type":"remoting",       // create a {@link Ext.direct.RemotingProvider}
            "url":"php\/router.php", // url to connect to the Ext.Direct server-side router.
            "actions":{              // each property within the actions object represents a Class
            "TestAction":[       // array of methods within each server side Class
            {
            "name":"doEcho", // name of method
            "len":1
            },{
            "name":"multiply",
            "len":1
            },{
            "name":"doForm",
            "formHandler":true, // handle form on server with Ext.Direct.Transaction
            "len":1
            }]
            },
            "namespace":"myApplication",// namespace to create the Remoting Provider in
            },{
            type: 'polling', // create a {@link Ext.direct.PollingProvider}
            url:  'php/poll.php'
            },
            pollProv // reference to previously created instance
            );
            </code></pre>
            @param {Object/Array} provider Accepts either an Array of Provider descriptions (an instance
            or config object for a Provider) or any number of Provider descriptions as arguments.  Each
            Provider description instructs Ext.Direct how to create client-side stub methods.
            </summary>
        </member>
        <member name="M:Ext.Direct.getProvider(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieve a {@link Ext.direct.Provider provider} by the
            <b><tt>{@link Ext.direct.Provider#id id}</tt></b> specified when the provider is
            {@link #addProvider added}.
            @param {String} id Unique identifier assigned to the provider when calling {@link #addProvider}
            </summary>
        </member>
        <member name="M:Ext.Direct.Transaction.#ctor(System.Object)">
            <summary>
            @class Ext.Direct.Transaction
            @extends Object
            <p>Supporting Class for Ext.Direct (not intended to be used directly).</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="T:Ext.Editor">
            <summary>
            @class Ext.Editor
            @extends Ext.Component
            A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
            @constructor
            Create a new Editor
            @param {Object} config The config object
            @xtype editor
            </summary>
        </member>
        <member name="M:Ext.Editor.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.Editor
            @extends Ext.Component
            A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
            @constructor
            Create a new Editor
            @param {Object} config The config object
            @xtype editor
            </summary>
        </member>
        <member name="M:Ext.Element.addClass(System.Object)">
            <summary>
            Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
            @param {String/Array} className The CSS class to add, or an array of classes
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.addClassOnClick(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
            @param {String} className
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.addClassOnFocus(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when this element has the focus
            @param {String} className
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.addClassOnOver(SharpKit.JavaScript.JsString)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is over this element
            @param {String} className
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.addKeyListener(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Convenience method for constructing a KeyMap
            @param {Number/Array/Object/String} key Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
            <code>{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</code>
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the specified function is executed. Defaults to this Element.
            @return {Ext.KeyMap} The KeyMap created
            </summary>
        </member>
        <member name="M:Ext.Element.addKeyMap(System.Object)">
            <summary>
            Creates a KeyMap for this element
            @param {Object} config The KeyMap config. See {@link Ext.KeyMap} for more details
            @return {Ext.KeyMap} The KeyMap created
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)" -->
        <member name="M:Ext.Element.addUnits(System.Object)">
            <summary>
            @private Test if size has a unit, otherwise appends the default
            </summary>
        </member>
        <member name="M:Ext.Element.alignTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the
            document it aligns it to the viewport.
            The position parameter is optional, and can be specified in any one of the following formats:
            <ul>
            <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").</li>
            <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.
            The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been
            deprecated in favor of the newer two anchor syntax below</i>.</li>
            <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the
            element's anchor point, and the second value is used as the target's anchor point.</li>
            </ul>
            In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
            the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
            the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
            that specified in order to enforce the viewport constraints.
            Following are all of the supported anchor positions:
            <pre>
            Value  Description
            -----  -----------------------------
            tl     The top left corner (default)
            t      The center of the top edge
            tr     The top right corner
            l      The center of the left edge
            c      In the center of the element
            r      The center of the right edge
            bl     The bottom left corner
            b      The center of the bottom edge
            br     The bottom right corner
            </pre>
            Example Usage:
            <pre><code>
            // align el to other-el using the default positioning ("tl-bl", non-constrained)
            el.alignTo("other-el");
            // align the top left corner of el with the top right corner of other-el (constrained to viewport)
            el.alignTo("other-el", "tr?");
            // align the bottom right corner of el with the center left edge of other-el
            el.alignTo("other-el", "br-l?");
            // align the center of el with the bottom left corner of other-el and
            // adjust the x position by -6 pixels (and the y position by 0)
            el.alignTo("other-el", "c-bl", [-6, 0]);
            </code></pre>
            @param {Mixed} element The element to align to.
            @param {String} position (optional, defaults to "tl-bl?") The position to align to.
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.anchorTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray,System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            @param {Mixed} element The element to align to.
            @param {String} position The position to align to.
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @param {Boolean/Object} animate (optional) True for the default animation or a standard Element animation config object
            @param {Boolean/Number} monitorScroll (optional) True to monitor body scroll and reposition. If this parameter
            is a number, it is used as the buffer delay (defaults to 50ms).
            @param {Function} callback The function to call after the animation finishes
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.anim(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private Internal animation call
            </summary>
        </member>
        <member name="M:Ext.Element.animate(System.Object,System.Object,SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Perform custom animation on this element.
            <div><ul class="mdetail-params">
            <li><u>Animation Properties</u></li>
            *
            <p>The Animation Control Object enables gradual transitions for any member of an
            element's style object that takes a numeric value including but not limited to
            these properties:</p><div><ul class="mdetail-params">
            <li><tt>bottom, top, left, right</tt></li>
            <li><tt>height, width</tt></li>
            <li><tt>margin, padding</tt></li>
            <li><tt>borderWidth</tt></li>
            <li><tt>opacity</tt></li>
            <li><tt>fontSize</tt></li>
            <li><tt>lineHeight</tt></li>
            </ul></div>
            *
            *
            <li><u>Animation Property Attributes</u></li>
            *
            <p>Each Animation Property is a config object with optional properties:</p>
            <div><ul class="mdetail-params">
            <li><tt>by</tt>*  : relative change - start at current value, change by this value</li>
            <li><tt>from</tt> : ignore current value, start from this value</li>
            <li><tt>to</tt>*  : start at current value, go to this value</li>
            <li><tt>unit</tt> : any allowable unit specification</li>
            <p>* do not specify both <tt>to</tt> and <tt>by</tt> for an animation property</p>
            </ul></div>
            *
            <li><u>Animation Types</u></li>
            *
            <p>The supported animation types:</p><div><ul class="mdetail-params">
            <li><tt>'run'</tt> : Default
            <pre><code>
            var el = Ext.get('complexEl');
            el.animate(
            // animation control object
            {
            borderWidth: {to: 3, from: 0},
            opacity: {to: .3, from: 1},
            height: {to: 50, from: el.getHeight()},
            width: {to: 300, from: el.getWidth()},
            top  : {by: - 100, unit: 'px'},
            },
            0.35,      // animation duration
            null,      // callback
            'easeOut', // easing method
            'run'      // animation type ('run','color','motion','scroll')
            );
            </code></pre>
            </li>
            <li><tt>'color'</tt>
            <p>Animates transition of background, text, or border colors.</p>
            <pre><code>
            el.animate(
            // animation control object
            {
            color: { to: '#06e' },
            backgroundColor: { to: '#e06' }
            },
            0.35,      // animation duration
            null,      // callback
            'easeOut', // easing method
            'color'    // animation type ('run','color','motion','scroll')
            );
            </code></pre>
            </li>
            *
            <li><tt>'motion'</tt>
            <p>Animates the motion of an element to/from specific points using optional bezier
            way points during transit.</p>
            <pre><code>
            el.animate(
            // animation control object
            {
            borderWidth: {to: 3, from: 0},
            opacity: {to: .3, from: 1},
            height: {to: 50, from: el.getHeight()},
            width: {to: 300, from: el.getWidth()},
            top  : {by: - 100, unit: 'px'},
            points: {
            to: [50, 100],  // go to this point
            control: [      // optional bezier way points
            [ 600, 800],
            [-100, 200]
            ]
            }
            },
            3000,      // animation duration (milliseconds!)
            null,      // callback
            'easeOut', // easing method
            'motion'   // animation type ('run','color','motion','scroll')
            );
            </code></pre>
            </li>
            <li><tt>'scroll'</tt>
            <p>Animate horizontal or vertical scrolling of an overflowing page element.</p>
            <pre><code>
            el.animate(
            // animation control object
            {
            scroll: {to: [400, 300]}
            },
            0.35,      // animation duration
            null,      // callback
            'easeOut', // easing method
            'scroll'   // animation type ('run','color','motion','scroll')
            );
            </code></pre>
            </li>
            </ul></div>
            *
            </ul></div>
            *
            @param {Object} args The animation control args
            @param {Float} duration (optional) How long the animation lasts in seconds (defaults to <tt>.35</tt>)
            @param {Function} onComplete (optional) Function to call when animation completes
            @param {String} easing (optional) {@link Ext.Fx#easing} method to use (defaults to <tt>'easeOut'</tt>)
            @param {String} animType (optional) <tt>'run'</tt> is the default. Can also be <tt>'color'</tt>,
            <tt>'motion'</tt>, or <tt>'scroll'</tt>
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.appendChild(System.Object)">
            <summary>
            Appends the passed element(s) to this element
            @param {String/HTMLElement/Array/Element/CompositeElement} el
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.appendTo(System.Object)">
            <summary>
            Appends this element to the passed element
            @param {Mixed} el The new parent element
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.applyStyles(System.Object)">
            <summary>
            More flexible version of {@link #setStyle} for setting style properties.
            @param {String/Object/Function} styles A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
            a function which returns such a specification.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.blur">
            <summary>
            Tries to blur the element. Any exceptions are caught and ignored.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.boxWrap(SharpKit.JavaScript.JsString)">
            <summary>
            <p>Wraps the specified element with a special 9 element markup/CSS block that renders by default as
            a gray container with a gradient background, rounded corners and a 4-way shadow.</p>
            <p>This special markup is used throughout Ext when box wrapping elements ({@link Ext.Button},
            {@link Ext.Panel} when <tt>{@link Ext.Panel#frame frame=true}</tt>, {@link Ext.Window}).  The markup
            is of this form:</p>
            <pre><code>
            Ext.Element.boxMarkup =
            &#39;&lt;div class="{0}-tl">&lt;div class="{0}-tr">&lt;div class="{0}-tc">&lt;/div>&lt;/div>&lt;/div>
            &lt;div class="{0}-ml">&lt;div class="{0}-mr">&lt;div class="{0}-mc">&lt;/div>&lt;/div>&lt;/div>
            &lt;div class="{0}-bl">&lt;div class="{0}-br">&lt;div class="{0}-bc">&lt;/div>&lt;/div>&lt;/div>&#39;;
            </code></pre>
            <p>Example usage:</p>
            <pre><code>
            // Basic box wrap
            Ext.get("foo").boxWrap();
            // You can also add a custom class and use CSS inheritance rules to customize the box look.
            // 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
            // for how to create a custom box wrap style.
            Ext.get("foo").boxWrap().addClass("x-box-blue");
            </code></pre>
            @param {String} class (optional) A base CSS class to apply to the containing wrapper element
            (defaults to <tt>'x-box'</tt>). Note that there are a number of CSS rules that are dependent on
            this name to make the overall effect work, so if you supply an alternate base class, make sure you
            also supply all of the necessary rules.
            @return {Ext.Element} The outermost wrapping element of the created box structure.
            </summary>
        </member>
        <member name="M:Ext.Element.center(System.Object)">
            <summary>
            Centers the Element in either the viewport, or another Element.
            @param {Mixed} centerIn (optional) The element in which to center the element.
            </summary>
        </member>
        <member name="M:Ext.Element.child(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
            </summary>
        </member>
        <member name="M:Ext.Element.clean(System.Boolean)">
            <summary>
            Removes worthless text nodes
            @param {Boolean} forceReclean (optional) By default the element
            keeps track if it has been cleaned already so
            you can call this over and over. However, if you update the element and
            need to force a reclean, you can pass true.
            </summary>
        </member>
        <member name="M:Ext.Element.clearOpacity">
            <summary>
            Clears any opacity settings from this element. Required in some cases for IE.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.clearPositioning(SharpKit.JavaScript.JsString)">
            <summary>
            Clear positioning back to the default when the document was loaded
            @param {String} value (optional) The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.clip">
            <summary>
            Store the current overflow setting and clip overflow on the element - use <tt>{@link #unclip}</tt> to remove
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.contains(System.Object)">
            <summary>
            Returns true if this element is an ancestor of the passed element
            @param {HTMLElement/String} el The element to check
            @return {Boolean} True if this element is an ancestor of el, else false
            </summary>
        </member>
        <member name="M:Ext.Element.createChild(System.Object,SharpKit.Html4.HtmlElement,System.Boolean)">
            <summary>
            Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
            @param {Object} config DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
            automatically generated with the specified attributes.
            @param {HTMLElement} insertBefore (optional) a child element of this element
            @param {Boolean} returnDom (optional) true to return the dom node instead of creating an Element
            @return {Ext.Element} The new child element
            </summary>
        </member>
        <member name="M:Ext.Element.createProxy(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates a proxy element of this element
            @param {String/Object} config The class name of the proxy element or a DomHelper config object
            @param {String/HTMLElement} renderTo (optional) The element or element id to render the proxy to (defaults to document.body)
            @param {Boolean} matchBox (optional) True to align and size the proxy to this element now (defaults to false)
            @return {Ext.Element} The new proxy element
            </summary>
        </member>
        <member name="M:Ext.Element.createShim">
            <summary>
            Creates an iframe shim for this element to keep selects and other windowed objects from
            showing through.
            @return {Ext.Element} The new shim element
            </summary>
        </member>
        <member name="M:Ext.Element.down(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
            </summary>
        </member>
        <member name="M:Ext.Element.enableDisplayMode(SharpKit.JavaScript.JsString)">
            <summary>
            Convenience method for setVisibilityMode(Element.DISPLAY)
            @param {String} display (optional) What to set display to when visible
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.findParent(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to search as a number or element (defaults to 50 || document.body)
            @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
            @return {HTMLElement} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.findParentNode(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to
            search as a number or element (defaults to 10 || document.body)
            @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
            @return {HTMLElement} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.first(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the first child, skipping text nodes
            @param {String} selector (optional) Find the next sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The first child or null
            </summary>
        </member>
        <member name="M:Ext.Element.fly(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
            the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
            <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
            application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
            will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
            @param {String/HTMLElement} el The dom node or id
            @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
            (e.g. internally Ext uses "_global")
            @return {Element} The shared Element object (or null if no matching element was found)
            @member Ext.Element
            @method fly
            </summary>
        </member>
        <member name="M:Ext.Element.focus(System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.Element.get(System.Object)">
            <summary>
            Retrieves Ext.Element objects.
            <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
            retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
            its ID, use {@link Ext.ComponentMgr#get}.</p>
            <p>Uses simple caching to consistently return the same object. Automatically fixes if an
            object was recreated with the same id via AJAX or DOM.</p>
            @param {Mixed} el The id of the node, a DOM Node or an existing Element.
            @return {Element} The Element object (or null if no matching element was found)
            @static
            @member Ext.Element
            @method get
            </summary>
        </member>
        <member name="M:Ext.Element.getAlignToXY(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
            supported position values.
            @param {Mixed} element The element to align to.
            @param {String} position (optional, defaults to "tl-bl?") The position to align to.
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @return {Array} [x, y]
            </summary>
        </member>
        <member name="M:Ext.Element.getAnchorXY(SharpKit.JavaScript.JsString,System.Boolean,System.Object)">
            <summary>
            Gets the x,y coordinates specified by the anchor position on the element.
            @param {String} anchor (optional) The specified anchor position (defaults to "c").  See {@link #alignTo}
            for details on supported anchor positions.
            @param {Boolean} local (optional) True to get the local (element top/left-relative) anchor position instead
            of page coordinates
            @param {Object} size (optional) An object containing the size to use for calculating anchor position
            {width: (target width), height: (target height)} (defaults to the element's current size)
            @return {Array} [x, y] An array containing the element's x and y coordinates
            </summary>
        </member>
        <member name="M:Ext.Element.getAttributeNS(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Returns the value of a namespaced attribute from the element's underlying DOM node.
            @param {String} namespace The namespace in which to look for the attribute
            @param {String} name The attribute name
            @return {String} The attribute value
            @deprecated
            </summary>
        </member>
        <member name="M:Ext.Element.getBorderWidth(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the width of the border(s) for the specified side(s)
            @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
            passing <tt>'lr'</tt> would get the border <b><u>l</u></b>eft width + the border <b><u>r</u></b>ight width.
            @return {Number} The width of the sides passed added together
            </summary>
        </member>
        <member name="M:Ext.Element.getBottom(System.Boolean)">
            <summary>
            Gets the bottom Y coordinate of the element (element Y position + element height)
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getBox(System.Boolean,System.Boolean)">
            <summary>
            Return an object defining the area of this Element which can be passed to {@link #setBox} to
            set another Element's size/location to match this element.
            @param {Boolean} contentBox (optional) If true a box for the content of the element is returned.
            @param {Boolean} local (optional) If true the element's left and top are returned instead of page x/y.
            @return {Object} box An object in the format<pre><code>
            {
            x: &lt;Element's X position>,
            y: &lt;Element's Y position>,
            width: &lt;Element's width>,
            height: &lt;Element's height>,
            bottom: &lt;Element's lower bound>,
            right: &lt;Element's rightmost bound>
            }
            </code></pre>
            The returned object may also be addressed as an Array where index 0 contains the X position
            and index 1 contains the Y position. So the result may also be used for {@link #setXY}
            </summary>
        </member>
        <member name="M:Ext.Element.getCenterXY">
            <summary>
            Calculates the x, y to center this element on the screen
            @return {Array} The x, y values [x, y]
            </summary>
        </member>
        <member name="M:Ext.Element.getColor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
            are convert to standard 6 digit hex color.
            @param {String} attr The css attribute
            @param {String} defaultValue The default value to use when a valid color isn't found
            @param {String} prefix (optional) defaults to #. Use an empty string when working with
            color anims.
            </summary>
        </member>
        <member name="M:Ext.Element.getComputedHeight">
            <summary>
            Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
            when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
            if a height has not been set using CSS.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getComputedWidth">
            <summary>
            Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
            when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
            if a width has not been set using CSS.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getFrameWidth(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
            for more information about the sides.
            @param {String} sides
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getHeight(System.Boolean)">
            <summary>
            Returns the offset height of the element
            @param {Boolean} contentHeight (optional) true to get the height minus borders and padding
            @return {Number} The element's height
            </summary>
        </member>
        <member name="M:Ext.Element.getLeft(System.Boolean)">
            <summary>
            Gets the left X coordinate
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getMargins(SharpKit.JavaScript.JsString)">
            <summary>
            Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
            then it returns the calculated width of the sides (see getPadding)
            @param {String} sides (optional) Any combination of l, r, t, b to get the sum of those sides
            @return {Object/Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getOffsetsTo(System.Object)">
            <summary>
            Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
            @param {Mixed} element The element to get the offsets from.
            @return {Array} The XY page offsets (e.g. [100, -200])
            </summary>
        </member>
        <member name="M:Ext.Element.getPadding(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the width of the padding(s) for the specified side(s)
            @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
            passing <tt>'lr'</tt> would get the padding <b><u>l</u></b>eft + the padding <b><u>r</u></b>ight.
            @return {Number} The padding of the sides passed added together
            </summary>
        </member>
        <member name="M:Ext.Element.getPositioning">
            <summary>
            Gets an object with all CSS positioning properties. Useful along with setPostioning to get
            snapshot before performing an update and then restoring the element.
            @return {Object}
            </summary>
        </member>
        <member name="M:Ext.Element.getRegion">
            <summary>
            Returns the region of the given element.
            The element must be part of the DOM tree to have a region (display:none or elements not appended return false).
            @return {Region} A Ext.lib.Region containing "top, left, bottom, right" member data.
            </summary>
        </member>
        <member name="M:Ext.Element.getRight(System.Boolean)">
            <summary>
            Gets the right X coordinate of the element (element X position + element width)
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getScroll">
            <summary>
            Returns the current scroll position of the element.
            @return {Object} An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
            </summary>
        </member>
        <member name="M:Ext.Element.getSize(System.Boolean)">
            <summary>
            Returns the size of the element.
            @param {Boolean} contentSize (optional) true to get the width/size minus borders and padding
            @return {Object} An object containing the element's size {width: (element width), height: (element height)}
            </summary>
        </member>
        <member name="M:Ext.Element.getStyles">
            <summary>
            Returns an object with properties matching the styles requested.
            For example, el.getStyles('color', 'font-size', 'width') might return
            {'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.
            @param {String} style1 A style name
            @param {String} style2 A style name
            @param {String} etc.
            @return {Object} The style object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.getStyleSize" -->
        <member name="M:Ext.Element.getTextWidth(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the width in pixels of the passed text, or the width of the text in this Element.
            @param {String} text The text to measure. Defaults to the innerHTML of the element.
            @param {Number} min (Optional) The minumum value to return.
            @param {Number} max (Optional) The maximum value to return.
            @return {Number} The text width in pixels.
            @member Ext.Element getTextWidth
            </summary>
        </member>
        <member name="M:Ext.Element.getTop(System.Boolean)">
            <summary>
            Gets the top Y coordinate
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getUpdater">
            <summary>
            Gets this element's {@link Ext.Updater Updater}
            @return {Ext.Updater} The Updater
            </summary>
        </member>
        <member name="M:Ext.Element.getValue(System.Boolean)">
            <summary>
            Returns the value of the "value" attribute
            @param {Boolean} asNumber true to parse the value as a number
            @return {String/Number}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.getViewSize" -->
        <member name="M:Ext.Element.getWidth(System.Boolean)">
            <summary>
            Returns the offset width of the element
            @param {Boolean} contentWidth (optional) true to get the width minus borders and padding
            @return {Number} The element's width
            </summary>
        </member>
        <member name="M:Ext.Element.getX">
            <summary>
            Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Number} The X position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.getXY">
            <summary>
            Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Array} The XY position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.getY">
            <summary>
            Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Number} The Y position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.hasClass(SharpKit.JavaScript.JsString)">
            <summary>
            Checks if the specified CSS class exists on this element's DOM node.
            @param {String} className The CSS class to check for
            @return {Boolean} True if the class exists, else false
            </summary>
        </member>
        <member name="M:Ext.Element.hasMetrics">
            <summary>
            @private
            Determine if the Element has a relevant height and width available based
            upon current logical visibility state
            </summary>
        </member>
        <member name="M:Ext.Element.hide(System.Object)">
            <summary>
            Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.hover(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
            @param {Function} overFn The function to call when the mouse enters the Element.
            @param {Function} outFn The function to call when the mouse leaves the Element.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the functions are executed. Defaults to the Element's DOM element.
            @param {Object} options (optional) Options for the listener. See {@link Ext.util.Observable#addListener the <tt>options</tt> parameter}.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.initDD(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a {@link Ext.dd.DD} drag drop object for this element.
            @param {String} group The group the DD object is member of
            @param {Object} config The DD config object
            @param {Object} overrides An object containing methods to override/implement on the DD object
            @return {Ext.dd.DD} The DD object
            </summary>
        </member>
        <member name="M:Ext.Element.initDDProxy(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a {@link Ext.dd.DDProxy} object for this element.
            @param {String} group The group the DDProxy object is member of
            @param {Object} config The DDProxy config object
            @param {Object} overrides An object containing methods to override/implement on the DDProxy object
            @return {Ext.dd.DDProxy} The DDProxy object
            </summary>
        </member>
        <member name="M:Ext.Element.initDDTarget(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Initializes a {@link Ext.dd.DDTarget} object for this element.
            @param {String} group The group the DDTarget object is member of
            @param {Object} config The DDTarget config object
            @param {Object} overrides An object containing methods to override/implement on the DDTarget object
            @return {Ext.dd.DDTarget} The DDTarget object
            </summary>
        </member>
        <member name="M:Ext.Element.insertAfter(System.Object)">
            <summary>
            Inserts this element after the passed element in the DOM
            @param {Mixed} el The element to insert after
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.insertBefore(System.Object)">
            <summary>
            Inserts this element before the passed element in the DOM
            @param {Mixed} el The element before which this element will be inserted
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.insertFirst(System.Object,System.Object)">
            <summary>
            Inserts (or creates) an element (or DomHelper config) as the first child of this element
            @param {Mixed/Object} el The id or element to insert or a DomHelper config to create and insert
            @return {Ext.Element} The new child
            </summary>
        </member>
        <member name="M:Ext.Element.insertHtml(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Inserts an html fragment into this element
            @param {String} where Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
            @param {String} html The HTML fragment
            @param {Boolean} returnEl (optional) True to return an Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The inserted node (or nearest related if more than 1 inserted)
            </summary>
        </member>
        <member name="M:Ext.Element.is(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String} selector The simple selector to test
            @return {Boolean} True if this element matches the selector, else false
            </summary>
        </member>
        <member name="M:Ext.Element.isBorderBox">
            <summary>
            Tests various css rules/browsers to determine if this element uses a border box
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.Element.isDisplayed">
            <summary>
            Returns true if display is not "none"
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.Element.isMasked">
            <summary>
            Returns true if this element is masked
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.Element.isScrollable">
            <summary>
            Returns true if this element is scrollable.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.Element.isVisible">
            <summary>
            Checks whether the element is currently visible using both visibility and display properties.
            @return {Boolean} True if the element is currently visible, else false
            </summary>
        </member>
        <member name="M:Ext.Element.isVisible(System.Boolean)">
            <summary>
            Checks whether the element is currently visible using both visibility and display properties.
            @param {Boolean} deep (optional) True to walk the dom and see if parent elements are hidden (defaults to false)
            @return {Boolean} True if the element is currently visible, else false
            </summary>
        </member>
        <member name="M:Ext.Element.last(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the last child, skipping text nodes
            @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The last child or null
            </summary>
        </member>
        <member name="M:Ext.Element.load">
            <summary>
            Direct access to the Updater {@link Ext.Updater#update} method. The method takes the same object
            parameter as {@link Ext.Updater#update}
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.load(System.Object,System.Object,System.Object)">
            <summary>
            <p>Updates the <a href="http://developer.mozilla.org/en/DOM/element.innerHTML">innerHTML</a> of this Element
            from a specified URL. Note that this is subject to the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">Same Origin Policy</a></p>
            <p>Updating innerHTML of an element will <b>not</b> execute embedded <tt>&lt;script></tt> elements. This is a browser restriction.</p>
            @param {Mixed} options. Either a sring containing the URL from which to load the HTML, or an {@link Ext.Ajax#request} options object specifying
            exactly how to request the HTML.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.mask(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Puts a mask over this element to disable user interaction. Requires core.css.
            This method can only be applied to elements which accept child nodes.
            @param {String} msg (optional) A message to display in the mask
            @param {String} msgCls (optional) A css class to apply to the msg element
            @return {Element} The mask element
            </summary>
        </member>
        <member name="M:Ext.Element.move(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Move this element relative to its current position.
            @param {String} direction Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").
            @param {Number} distance How far to move the element in pixels
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.moveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned.
            The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} x X value for new position (coordinates are page-based)
            @param {Number} y Y value for new position (coordinates are page-based)
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.next(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the next sibling, skipping text nodes
            @param {String} selector (optional) Find the next sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The next sibling or null
            </summary>
        </member>
        <member name="M:Ext.Element.parent(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the parent node for this element, optionally chaining up trying to match a selector
            @param {String} selector (optional) Find a parent node that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The parent node or null
            </summary>
        </member>
        <member name="M:Ext.Element.position(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Initializes positioning on this element. If a desired position is not passed, it will make the
            the element positioned relative IF it is not already positioned.
            @param {String} pos (optional) Positioning to use "relative", "absolute" or "fixed"
            @param {Number} zIndex (optional) The zIndex to apply
            @param {Number} x (optional) Set the page X position
            @param {Number} y (optional) Set the page Y position
            </summary>
        </member>
        <member name="M:Ext.Element.prev(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the previous sibling, skipping text nodes
            @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The previous sibling or null
            </summary>
        </member>
        <member name="M:Ext.Element.purgeAllListeners">
            <summary>
            Recursively removes all previous added listeners from this element and its children
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.query(SharpKit.JavaScript.JsString)">
            <summary>
            Selects child nodes based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @return {Array} An array of the matched nodes
            </summary>
        </member>
        <member name="M:Ext.Element.radioClass(System.Object)">
            <summary>
            Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
            @param {String/Array} className The CSS class to add, or an array of classes
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.relayEvent(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Create an event handler on this element such that when the event fires and is handled by this element,
            it will be relayed to another object (i.e., fired again as if it originated from that object instead).
            @param {String} eventName The type of event to relay
            @param {Object} object Any object that extends {@link Ext.util.Observable} that will provide the context
            for firing the relayed event
            </summary>
        </member>
        <member name="M:Ext.Element.remove">
            <summary>
            <p>Removes this element's dom reference.  Note that event and cache removal is handled at {@link Ext#removeNode}</p>
            </summary>
        </member>
        <member name="M:Ext.Element.removeAnchor">
            <summary>
            Remove any anchor to this element. See {@link #anchorTo}.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.removeClass(System.Object)">
            <summary>
            Removes one or more CSS classes from the element.
            @param {String/Array} className The CSS class to remove, or an array of classes
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.
            <b>Note</b>: if a <i>scope</i> was explicitly specified when {@link #addListener adding} the
            listener, the same scope must be specified here.
            Example:
            <pre><code>
            el.removeListener('click', this.handlerFn);
            // or
            el.un('click', this.handlerFn);
            </code></pre>
            @param {String} eventName The name of the event from which to remove the handler.
            @param {Function} fn The handler function to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
            @param {Object} scope If a scope (<b><code>this</code></b> reference) was specified when the listener was added,
            then this must refer to the same object.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.repaint">
            <summary>
            Forces the browser to repaint this element
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.replace(System.Object)">
            <summary>
            Replaces the passed element with this element
            @param {Mixed} el The element to replace
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.replaceClass(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.
            @param {String} oldClassName The CSS class to replace
            @param {String} newClassName The replacement CSS class
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.replaceWith(System.Object)">
            <summary>
            Replaces this element with the passed element
            @param {Mixed/Object} el The new element or a DomHelper config of an element to create
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.scroll(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
            within this element's scrollable range.
            @param {String} direction Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").
            @param {Number} distance How far to scroll the element in pixels
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Boolean} Returns true if a scroll was triggered or false if the element
            was scrolled as far as it could go.
            </summary>
        </member>
        <member name="M:Ext.Element.scrollIntoView(System.Object,System.Boolean)">
            <summary>
            Scrolls this element into view within the passed container.
            @param {Mixed} container (optional) The container element to scroll (defaults to document.body).  Should be a
            string (id), dom node, or Ext.Element.
            @param {Boolean} hscroll (optional) False to disable horizontal scroll (defaults to true)
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.scrollTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
            @param {String} side Either "left" for scrollLeft values or "top" for scrollTop values.
            @param {Number} value The new scroll value.
            @return {Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.scrollTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
            @param {String} side Either "left" for scrollLeft values or "top" for scrollTop values.
            @param {Number} value The new scroll value
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.select(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @return {CompositeElement/CompositeElementLite} The composite element
            </summary>
        </member>
        <member name="M:Ext.Element.select(System.Object,System.Object)">
            <summary>
            Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
            to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
            {@link Ext.CompositeElementLite CompositeElementLite} object.
            @param {String/Array} selector The CSS selector or an array of elements
            @param {HTMLElement/String} root (optional) The root element of the query or id of the root
            @return {CompositeElementLite/CompositeElement}
            @member Ext.Element
            @method select
            </summary>
        </member>
        <member name="M:Ext.Element.select(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @param {Boolean} unique (optional) True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)
            @return {CompositeElement/CompositeElementLite} The composite element
            </summary>
        </member>
        <member name="M:Ext.Element.select(System.Object,System.Boolean,System.Object)">
            <summary>
            Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
            to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
            {@link Ext.CompositeElementLite CompositeElementLite} object.
            @param {String/Array} selector The CSS selector or an array of elements
            @param {Boolean} unique (optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object)
            @param {HTMLElement/String} root (optional) The root element of the query or id of the root
            @return {CompositeElementLite/CompositeElement}
            @member Ext.Element
            @method select
            </summary>
        </member>
        <member name="M:Ext.Element.set(System.Object,System.Boolean)">
            <summary>
            Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
            @param {Object} o The object with the attributes
            @param {Boolean} useSet (optional) false to override the default setAttribute to use expandos.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setBottom(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS bottom style.
            @param {String} bottom The bottom CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.setBounds(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object,System.Object,System.Object)" -->
        <member name="M:Ext.Element.setBox(System.Object,System.Boolean,System.Object)">
            <summary>
            Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
            @param {Object} box The box to fill {x, y, width, height}
            @param {Boolean} adjust (optional) Whether to adjust for box-model issues automatically
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setDisplayed(System.Object)">
            <summary>
            Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
            @param {Mixed} value Boolean value to display the element using its default display, or a string to set the display directly.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setHeight(System.Object,System.Object)">
            <summary>
            Set the height of this Element.
            <pre><code>
            // change the height to 200px and animate with default configuration
            Ext.fly('elementId').setHeight(200, true);
            // change the height to 150px and animate with a custom configuration
            Ext.fly('elId').setHeight(150, {
            duration : .5, // animation will have a duration of .5 seconds
            // will change the content to "finished"
            callback: function(){ this.{@link #update}("finished"); }
            });
            </code></pre>
            @param {Mixed} height The new height. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels.)</li>
            <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
            </ul></div>
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setLeft(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's left position directly using CSS style (instead of {@link #setX}).
            @param {String} left The left CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setLeftTop(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Quick set left and top adding default units
            @param {String} left The left CSS property value
            @param {String} top The top CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setLocation(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned.
            The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} x X value for new position (coordinates are page-based)
            @param {Number} y Y value for new position (coordinates are page-based)
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setOpacity(System.Object,System.Object)">
            <summary>
            Set the opacity of the element
            @param {Float} opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
            @param {Boolean/Object} animate (optional) a standard Element animation config object or <tt>true</tt> for
            the default animation (<tt>{duration: .35, easing: 'easeIn'}</tt>)
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setPositioning(System.Object)">
            <summary>
            Set positioning with an object returned by getPositioning().
            @param {Object} posCfg
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setRegion(Ext.lib.Region,System.Object)">
            <summary>
            Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.
            @param {Ext.lib.Region} region The region to fill
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setRight(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS right style.
            @param {String} right The right CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.setSize(System.Object,System.Object,System.Object)" -->
        <member name="M:Ext.Element.setStyle(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Wrapper for setting style properties, also takes single object parameter of multiple styles.
            @param {String/Object} property The style property to be set, or an object of multiple styles.
            @param {String} value (optional) The value to apply to the given property, or null if an object was passed.
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setTop(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's top position directly using CSS style (instead of {@link #setY}).
            @param {String} top The top CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setVisibilityMode(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the element's visibility mode. When setVisible() is called it
            will use this to determine whether to set the visibility or the display property.
            @param {Number} visMode Ext.Element.VISIBILITY or Ext.Element.DISPLAY
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setVisible(System.Boolean,System.Object)">
            <summary>
            Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
            the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
            @param {Boolean} visible Whether the element is visible
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.setWidth(System.Object,System.Object)" -->
        <member name="M:Ext.Element.setX(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The X position of the element
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.setXY(SharpKit.JavaScript.JsArray,System.Object)" -->
        <member name="M:Ext.Element.setY(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The Y position of the element
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.show(System.Object)">
            <summary>
            Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
            @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.swallowEvent(System.Object,System.Boolean)">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action
            @param {String/Array} eventName an event / array of events to stop from bubbling
            @param {Boolean} preventDefault (optional) true to prevent the default action too
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.toggle(System.Object)">
            <summary>
            Toggles the element's visibility or display, depending on visibility mode.
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.toggleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
            @param {String} className The CSS class to toggle
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.translatePoints(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translates the passed page coordinates into left/top css values for this element
            @param {Number/Array} x The page x or an array containing [x, y]
            @param {Number} y (optional) The page y, required if x is not an array
            @return {Object} An object with left and top properties. e.g. {left: (value), top: (value)}
            </summary>
        </member>
        <member name="M:Ext.Element.unclip">
            <summary>
            Return clipping (overflow) to original clipping before <tt>{@link #clip}</tt> was called
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.unmask">
            <summary>
            Removes a previously applied mask.
            </summary>
        </member>
        <member name="M:Ext.Element.unselectable">
            <summary>
            Disables text selection for this element (normalized across browsers)
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.up(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
            This is a shortcut for findParentNode() that always returns an Ext.Element.
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to
            search as a number or element (defaults to 10 || document.body)
            @return {Ext.Element} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.update(SharpKit.JavaScript.JsString,System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            Update the innerHTML of this element, optionally searching for and processing scripts
            @param {String} html The new HTML
            @param {Boolean} loadScripts (optional) True to look for and process scripts (defaults to false)
            @param {Function} callback (optional) For async script loading you can be notified when the update completes
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.update(SharpKit.JavaScript.JsString)">
            <summary>
            Update the innerHTML of this element
            @param {String} html The new HTML
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.wrap(System.Object,System.Boolean)">
            <summary>
            Creates and wraps this element with another element
            @param {Object} config (optional) DomHelper element config object for the wrapper element or null for an empty div
            @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Ext.Element
            @return {HTMLElement/Element} The newly created wrapper element
            </summary>
        </member>
        <member name="P:Ext.Element.defaultUnit">
            <summary>
            The default unit to append to CSS values where a unit isn't provided (defaults to px).
            @type String
            </summary>
        </member>
        <member name="P:Ext.Element.originalDisplay">
            <summary>
            The element's default display mode  (defaults to "")
            @type String
            </summary>
        </member>
        <member name="P:Ext.Element.visibilityMode">
            <summary>
            The element's default display mode  (defaults to "")
            @type String
            </summary>
        </member>
        <member name="T:Ext.Error">
            <summary>
            @class Ext.Error
            @extends Error
            <p>A base error class. Future implementations are intended to provide more
            robust error handling throughout the framework (<b>in the debug build only</b>)
            to check for common errors and problems. The messages issued by this class
            will aid error checking. Error checks will be automatically removed in the
            production build so that performance is not negatively impacted.</p>
            <p>Some sample messages currently implemented:</p><pre>
            "DataProxy attempted to execute an API-action but found an undefined
            url / function. Please review your Proxy url/api-configuration."
            </pre><pre>
            "Could not locate your "root" property in your server response.
            Please review your JsonReader config to ensure the config-property
            "root" matches the property your server-response.  See the JsonReader
            docs for additional assistance."
            </pre>
            <p>An example of the code used for generating error messages:</p><pre><code>
            try {
            generateError({
            foo: 'bar'
            });
            }
            catch (e) {
            console.error(e);
            }
            function generateError(data) {
            throw new Ext.Error('foo-error', data);
            }
            </code></pre>
            @param {String} message
            </summary>
        </member>
        <member name="M:Ext.Error.#ctor(SharpKit.JavaScript.JsString)">
            <summary>
            @class Ext.Error
            @extends Error
            <p>A base error class. Future implementations are intended to provide more
            robust error handling throughout the framework (<b>in the debug build only</b>)
            to check for common errors and problems. The messages issued by this class
            will aid error checking. Error checks will be automatically removed in the
            production build so that performance is not negatively impacted.</p>
            <p>Some sample messages currently implemented:</p><pre>
            "DataProxy attempted to execute an API-action but found an undefined
            url / function. Please review your Proxy url/api-configuration."
            </pre><pre>
            "Could not locate your "root" property in your server response.
            Please review your JsonReader config to ensure the config-property
            "root" matches the property your server-response.  See the JsonReader
            docs for additional assistance."
            </pre>
            <p>An example of the code used for generating error messages:</p><pre><code>
            try {
            generateError({
            foo: 'bar'
            });
            }
            catch (e) {
            console.error(e);
            }
            function generateError(data) {
            throw new Ext.Error('foo-error', data);
            }
            </code></pre>
            @param {String} message
            </summary>
        </member>
        <member name="T:Ext.FlashComponent">
            <summary>
            @class Ext.FlashComponent
            @extends Ext.BoxComponent
            @constructor
            @xtype flash
            </summary>
        </member>
        <member name="M:Ext.FlashComponent.initComponent">
            <summary>
            @cfg {Boolean} expressInstall
            True to prompt the user to install flash if not installed. Note that this uses
            Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponent.backgroundColor">
            <summary>
            @cfg {String} backgroundColor
            The background color of the chart. Defaults to <tt>'#ffffff'</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponent.expressInstall">
            <summary>
            @cfg {Boolean} expressInstall
            True to prompt the user to install flash if not installed. Note that this uses
            Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponent.flashVersion">
            <summary>
            @cfg {String} flashVersion
            Indicates the version the flash content was published for. Defaults to <tt>'9.0.115'</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponent.swfWidth">
            <summary>
            @cfg {String} url
            The URL of the chart to include. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponent.wmode">
            <summary>
            @cfg {String} wmode
            The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.backgroundColor">
            <summary>
            The background color of the chart. Defaults to <tt>'#ffffff'</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.expressInstall">
            <summary>
            True to prompt the user to install flash if not installed. Note that this uses
            Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.flashParams">
            <summary>
            A set of key value pairs to be passed to the flash object as parameters. Possible parameters can be found here:
            http://kb2.adobe.com/cps/127/tn_12701.html Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.flashVars">
            <summary>
            A set of key value pairs to be passed to the flash object as flash variables. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.flashVersion">
            <summary>
            Indicates the version the flash content was published for. Defaults to <tt>'9.0.115'</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.url">
            <summary>
            The URL of the chart to include. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.FlashComponentConfig.wmode">
            <summary>
            The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.
            </summary>
        </member>
        <member name="M:Ext.FlashEventProxy.onEvent(System.Object,System.Object)">
            <summary>
            @class Ext.FlashProxy
            @singleton
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.FormPanel" -->
        <member name="M:Ext.FormPanel.getForm">
            <summary>
            Provides access to the {@link Ext.form.BasicForm Form} which this Panel contains.
            @return {Ext.form.BasicForm} The {@link Ext.form.BasicForm Form} which this Panel contains.
            </summary>
        </member>
        <member name="M:Ext.FormPanel.load">
            <summary>
            This is a proxy for the underlying BasicForm's {@link Ext.form.BasicForm#load} call.
            @param {Object} options The options to pass to the action (see {@link Ext.form.BasicForm#doAction} for details)
            </summary>
        </member>
        <member name="M:Ext.FormPanel.startMonitoring">
            <summary>
            Starts monitoring of the valid state of this form. Usually this is done by passing the config
            option "monitorValid"
            </summary>
        </member>
        <member name="M:Ext.FormPanel.stopMonitoring">
            <summary>
            Stops monitoring of the valid state of this form
            </summary>
        </member>
        <member name="P:Ext.FormPanel.labelAlign">
            <summary>
            @cfg {String} labelAlign The label alignment value used for the <tt>text-align</tt> specification
            for the <b>container</b>. Valid values are <tt>"left</tt>", <tt>"top"</tt> or <tt>"right"</tt>
            (defaults to <tt>"left"</tt>). This property cascades to child <b>containers</b> and can be
            overridden on any child <b>container</b> (e.g., a fieldset can specify a different <tt>labelAlign</tt>
            for its fields).
            </summary>
        </member>
        <member name="P:Ext.FormPanel.layout">
            <summary>
            @cfg {String} layout Defaults to <tt>'form'</tt>.  Normally this configuration property should not be altered.
            For additional details see {@link Ext.layout.FormLayout} and {@link Ext.Container#layout Ext.Container.layout}.
            </summary>
        </member>
        <member name="P:Ext.FormPanel.minButtonWidth">
            <summary>
            @cfg {Number} minButtonWidth Minimum width of all buttons in pixels (defaults to <tt>75</tt>).
            </summary>
        </member>
        <member name="P:Ext.FormPanel.monitorPoll">
            <summary>
            @cfg {Number} monitorPoll The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.FormPanel.monitorValid" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.FormPanelConfig.buttons" -->
        <member name="P:Ext.FormPanelConfig.formId">
            <summary>
            (optional) The id of the FORM tag (defaults to an auto-generated id).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.FormPanelConfig.hideLabels" -->
        <member name="P:Ext.FormPanelConfig.itemCls">
            <summary>
            A css class to apply to the x-form-item of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.labelAlign">
            <summary>
            The label alignment value used for the <tt>text-align</tt> specification
            for the <b>container</b>. Valid values are <tt>"left</tt>", <tt>"top"</tt> or <tt>"right"</tt>
            (defaults to <tt>"left"</tt>). This property cascades to child <b>containers</b> and can be
            overridden on any child <b>container</b> (e.g., a fieldset can specify a different <tt>labelAlign</tt>
            for its fields).
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.labelPad">
            <summary>
            The default padding in pixels for field labels (defaults to <tt>5</tt>). <tt>labelPad</tt> only
            applies if <tt>{@link #labelWidth}</tt> is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.labelSeparator">
            <summary>
            See {@link Ext.Component}.<tt>{@link Ext.Component#labelSeparator labelSeparator}</tt>
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.labelWidth">
            <summary>
            The width of labels in pixels. This property cascades to child containers
            and can be overridden on any child container (e.g., a fieldset can specify a different <tt>labelWidth</tt>
            for its fields) (defaults to <tt>100</tt>).
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.layout">
            <summary>
            Defaults to <tt>'form'</tt>.  Normally this configuration property should not be altered.
            For additional details see {@link Ext.layout.FormLayout} and {@link Ext.Container#layout Ext.Container.layout}.
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.minButtonWidth">
            <summary>
            Minimum width of all buttons in pixels (defaults to <tt>75</tt>).
            </summary>
        </member>
        <member name="P:Ext.FormPanelConfig.monitorPoll">
            <summary>
            The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.FormPanelConfig.monitorValid" -->
        <member name="M:Ext.Fx.afterFx(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.beforeFx(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.fadeIn(System.Object)">
            <summary>
            Fade an element in (from transparent to opaque).  The ending opacity can be specified
            using the <tt>{@link #endOpacity}</tt> config option.
            Usage:
            <pre><code>
            // default: fade in from opacity 0 to 100%
            el.fadeIn();
            // custom: fade in from opacity 0 to 75% over 2 seconds
            el.fadeIn({ endOpacity: .75, duration: 2});
            // common config options shown with default values
            el.fadeIn({
            endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
            easing: 'easeOut',
            duration: .5
            });
            </code></pre>
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.fadeOut(System.Object)">
            <summary>
            Fade an element out (from opaque to transparent).  The ending opacity can be specified
            using the <tt>{@link #endOpacity}</tt> config option.  Note that IE may require
            <tt>{@link #useDisplay}:true</tt> in order to redisplay correctly.
            Usage:
            <pre><code>
            // default: fade out from the element's current opacity to 0
            el.fadeOut();
            // custom: fade out from the element's current opacity to 25% over 2 seconds
            el.fadeOut({ endOpacity: .25, duration: 2});
            // common config options shown with default values
            el.fadeOut({
            endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
            easing: 'easeOut',
            duration: .5,
            remove: false,
            useDisplay: false
            });
            </code></pre>
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.frame(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element.
            Usage:
            <pre><code>
            // default: a single light blue ripple
            el.frame();
            // custom: 3 red ripples lasting 3 seconds total
            el.frame("ff0000", 3, { duration: 3 });
            // common config options shown with default values
            el.frame("C3DAF9", 1, {
            duration: 1 //duration of each individual ripple.
            // Note: Easing is not configurable and will be ignored if included
            });
            </code></pre>
            @param {String} color (optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').
            @param {Number} count (optional) The number of ripples to display (defaults to 1)
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.fxanim(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.fxUnwrap(System.Object,System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.fxWrap(System.Object,System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.getFxRestore">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.ghost(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Slides the element while fading it out of view.  An anchor point can be optionally passed to set the
            ending point of the effect.
            Usage:
            *<pre><code>
            // default: slide the element downward while fading out
            el.ghost();
            // custom: slide the element out to the right with a 2-second duration
            el.ghost('r', { duration: 2 });
            // common config options shown with default values
            el.ghost('b', {
            easing: 'easeOut',
            duration: .5,
            remove: false,
            useDisplay: false
            });
            </code></pre>
            @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to bottom: 'b')
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.hasActiveFx">
            <summary>
            Returns true if the element has any effects actively running or queued, else returns false.
            @return {Boolean} True if element has active effects, else false
            </summary>
        </member>
        <member name="M:Ext.Fx.hasFxBlock">
            <summary>
            Returns true if the element is currently blocking so that no other effect can be queued
            until this effect is finished, else returns false if blocking is not set.  This is commonly
            used to ensure that an effect initiated by a user action runs to completion prior to the
            same effect being restarted (e.g., firing only one effect even if the user clicks several times).
            @return {Boolean} True if blocking, else false
            </summary>
        </member>
        <member name="M:Ext.Fx.highlight(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be
            changed using the "attr" config option) and then fading back to the original color. If no original
            color is available, you should provide the "endColor" config option which will be cleared after the animation.
            Usage:
            <pre><code>
            // default: highlight background to yellow
            el.highlight();
            // custom: highlight foreground text to blue for 2 seconds
            el.highlight("0000ff", { attr: 'color', duration: 2 });
            // common config options shown with default values
            el.highlight("ffff9c", {
            attr: "background-color", //can be any valid CSS property (attribute) that supports a color value
            endColor: (current color) or "ffffff",
            easing: 'easeIn',
            duration: 1
            });
            </code></pre>
            @param {String} color (optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.nextFx">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.pause(SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a pause before any subsequent queued effects begin.  If there are
            no effects queued after the pause it will have no effect.
            Usage:
            <pre><code>
            el.pause(1);
            </code></pre>
            @param {Number} seconds The length of time to pause (in seconds)
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.puff(System.Object)">
            <summary>
            Fades the element out while slowly expanding it in all directions.  When the effect is completed, the
            element will be hidden (visibility = 'hidden') but block elements will still take up space in the document.
            The element must be removed from the DOM using the 'remove' config option if desired.
            Usage:
            *<pre><code>
            // default
            el.puff();
            // common config options shown with default values
            el.puff({
            easing: 'easeOut',
            duration: .5,
            remove: false,
            useDisplay: false
            });
            </code></pre>
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.queueFx(System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Fx.scale(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Animates the transition of an element's dimensions from a starting height/width
            to an ending height/width.  This method is a convenience implementation of {@link shift}.
            Usage:
            <pre><code>
            // change height and width to 100x100 pixels
            el.scale(100, 100);
            // common config options shown with default values.  The height and width will default to
            // the element&#39;s existing values if passed as null.
            el.scale(
            [element&#39;s width],
            [element&#39;s height], {
            easing: 'easeOut',
            duration: .35
            }
            );
            </code></pre>
            @param {Number} width  The new width (pass undefined to keep the original width)
            @param {Number} height  The new height (pass undefined to keep the original height)
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.sequenceFx">
            <summary>
            Ensures that all effects queued after sequenceFx is called on the element are
            run in sequence.  This is the opposite of {@link #syncFx}.
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.shift(System.Object)">
            <summary>
            Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
            Any of these properties not specified in the config object will not be changed.  This effect
            requires that at least one new dimension, position or opacity setting must be passed in on
            the config object in order for the function to have any effect.
            Usage:
            <pre><code>
            // slide the element horizontally to x position 200 while changing the height and opacity
            el.shift({ x: 200, height: 50, opacity: .8 });
            // common config options shown with default values.
            el.shift({
            width: [element&#39;s width],
            height: [element&#39;s height],
            x: [element&#39;s x position],
            y: [element&#39;s y position],
            opacity: [element&#39;s opacity],
            easing: 'easeOut',
            duration: .35
            });
            </code></pre>
            @param {Object} options  Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.slideIn(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Slides the element into view.  An anchor point can be optionally passed to set the point of
            origin for the slide effect.  This function automatically handles wrapping the element with
            a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
            Usage:
            *<pre><code>
            // default: slide the element in from the top
            el.slideIn();
            // custom: slide the element in from the right with a 2-second duration
            el.slideIn('r', { duration: 2 });
            // common config options shown with default values
            el.slideIn('t', {
            easing: 'easeOut',
            duration: .5
            });
            </code></pre>
            @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.slideOut(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Slides the element out of view.  An anchor point can be optionally passed to set the end point
            for the slide effect.  When the effect is completed, the element will be hidden (visibility =
            'hidden') but block elements will still take up space in the document.  The element must be removed
            from the DOM using the 'remove' config option if desired.  This function automatically handles
            wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
            Usage:
            *<pre><code>
            // default: slide the element out to the top
            el.slideOut();
            // custom: slide the element out to the right with a 2-second duration
            el.slideOut('r', { duration: 2 });
            // common config options shown with default values
            el.slideOut('t', {
            easing: 'easeOut',
            duration: .5,
            remove: false,
            useDisplay: false
            });
            </code></pre>
            @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.stopFx(System.Object)">
            <summary>
            Stops any running effects and clears the element's internal effects queue if it contains
            any additional effects that haven't started yet.
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.switchOff(System.Object)">
            <summary>
            Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
            When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
            take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
            Usage:
            *<pre><code>
            // default
            el.switchOff();
            // all config options shown with default values
            el.switchOff({
            easing: 'easeIn',
            duration: .3,
            remove: false,
            useDisplay: false
            });
            </code></pre>
            @param {Object} options (optional) Object literal with any of the Fx config options
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="M:Ext.Fx.syncFx">
            <summary>
            Ensures that all effects queued after syncFx is called on the element are
            run concurrently.  This is the opposite of {@link #sequenceFx}.
            @return {Ext.Element} The Element
            </summary>
        </member>
        <member name="T:Ext.handleError">
            <summary>
            Framework-wide error-handler.  Developers can override this method to provide
            custom exception-handling.  Framework errors will often extend from the base
            Ext.Error class.
            @param {Object/Error} e The thrown exception object.
            </summary>
        </member>
        <member name="M:Ext.handleError.#ctor(System.Object)">
            <summary>
            Framework-wide error-handler.  Developers can override this method to provide
            custom exception-handling.  Framework errors will often extend from the base
            Ext.Error class.
            @param {Object/Error} e The thrown exception object.
            </summary>
        </member>
        <member name="T:Ext.KeyMap">
            <summary>
            @class Ext.KeyMap
            Handles mapping keys to actions for an element. One key map can be used for multiple actions.
            The constructor accepts the same config object as defined by {@link #addBinding}.
            If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
            combination it will call the function with this signature (if the match is a multi-key
            combination the callback will still be called only once): (String key, Ext.EventObject e)
            A KeyMap can also handle a string representation of keys.<br />
            Usage:
            <pre><code>
            // map one key by key code
            var map = new Ext.KeyMap("my-element", {
            key: 13, // or Ext.EventObject.ENTER
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to one action by string
            var map = new Ext.KeyMap("my-element", {
            key: "a\r\n\t",
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to multiple actions by strings and array of codes
            var map = new Ext.KeyMap("my-element", [
            {
            key: [10,13],
            fn: function(){ alert("Return was pressed"); }
            }, {
            key: "abc",
            fn: function(){ alert('a, b or c was pressed'); }
            }, {
            key: "\t",
            ctrl:true,
            shift:true,
            fn: function(){ alert('Control + shift + tab was pressed.'); }
            }
            ]);
            </code></pre>
            <b>Note: A KeyMap starts enabled</b>
            @constructor
            @param {Mixed} el The element to bind to
            @param {Object} config The config (see {@link #addBinding})
            @param {String} eventName (optional) The event to bind to (defaults to "keydown")
            </summary>
        </member>
        <member name="M:Ext.KeyMap.addBinding(System.Object)">
            <summary>
            Add a new binding to this KeyMap. The following config object properties are supported:
            <pre>
            Property    Type             Description
            ----------  ---------------  ----------------------------------------------------------------------
            key         String/Array     A single keycode or an array of keycodes to handle
            shift       Boolean          True to handle key only when shift is pressed, False to handle the key only when shift is not pressed (defaults to undefined)
            ctrl        Boolean          True to handle key only when ctrl is pressed, False to handle the key only when ctrl is not pressed (defaults to undefined)
            alt         Boolean          True to handle key only when alt is pressed, False to handle the key only when alt is not pressed (defaults to undefined)
            handler     Function         The function to call when KeyMap finds the expected key combination
            fn          Function         Alias of handler (for backwards-compatibility)
            scope       Object           The scope of the callback function
            stopEvent   Boolean          True to stop the event from bubbling and prevent the default browser action if the key was handled by the KeyMap (defaults to false)
            </pre>
            *
            Usage:
            <pre><code>
            // Create a KeyMap
            var map = new Ext.KeyMap(document, {
            key: Ext.EventObject.ENTER,
            fn: handleKey,
            scope: this
            });
            //Add a new binding to the existing KeyMap later
            map.addBinding({
            key: 'abc',
            shift: true,
            fn: handleKey,
            scope: this
            });
            </code></pre>
            @param {Object/Array} config A single KeyMap config or an array of configs
            </summary>
        </member>
        <member name="M:Ext.KeyMap.disable">
            <summary>
            Disable this KeyMap
            </summary>
        </member>
        <member name="M:Ext.KeyMap.enable">
            <summary>
            Enables this KeyMap
            </summary>
        </member>
        <member name="M:Ext.KeyMap.isEnabled">
            <summary>
            Returns true if this KeyMap is enabled
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.KeyMap.#ctor(System.Object,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @class Ext.KeyMap
            Handles mapping keys to actions for an element. One key map can be used for multiple actions.
            The constructor accepts the same config object as defined by {@link #addBinding}.
            If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
            combination it will call the function with this signature (if the match is a multi-key
            combination the callback will still be called only once): (String key, Ext.EventObject e)
            A KeyMap can also handle a string representation of keys.<br />
            Usage:
            <pre><code>
            // map one key by key code
            var map = new Ext.KeyMap("my-element", {
            key: 13, // or Ext.EventObject.ENTER
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to one action by string
            var map = new Ext.KeyMap("my-element", {
            key: "a\r\n\t",
            fn: myHandler,
            scope: myObject
            });
            // map multiple keys to multiple actions by strings and array of codes
            var map = new Ext.KeyMap("my-element", [
            {
            key: [10,13],
            fn: function(){ alert("Return was pressed"); }
            }, {
            key: "abc",
            fn: function(){ alert('a, b or c was pressed'); }
            }, {
            key: "\t",
            ctrl:true,
            shift:true,
            fn: function(){ alert('Control + shift + tab was pressed.'); }
            }
            ]);
            </code></pre>
            <b>Note: A KeyMap starts enabled</b>
            @constructor
            @param {Mixed} el The element to bind to
            @param {Object} config The config (see {@link #addBinding})
            @param {String} eventName (optional) The event to bind to (defaults to "keydown")
            </summary>
        </member>
        <member name="M:Ext.KeyMap.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shorthand for adding a single key listener
            @param {Number/Array/Object} key Either the numeric key code, array of key codes or an object with the
            following options:
            {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
            </summary>
        </member>
        <member name="M:Ext.KeyMap.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean.
            @param {Boolean} disabled
            </summary>
        </member>
        <member name="P:Ext.KeyMap.stopEvent">
            <summary>
            True to stop the event from bubbling and prevent the default browser action if the
            key was handled by the KeyMap (defaults to false)
            @type Boolean
            </summary>
        </member>
        <member name="T:Ext.KeyNav">
            <summary>
            @class Ext.KeyNav
            <p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
            navigation keys to function calls that will get called when the keys are pressed, providing an easy
            way to implement custom navigation schemes for any UI component.</p>
            <p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
            pageUp, pageDown, del, home, end.  Usage:</p>
            <pre><code>
            var nav = new Ext.KeyNav("my-element", {
            "left" : function(e){
            this.moveLeft(e.ctrlKey);
            },
            "right" : function(e){
            this.moveRight(e.ctrlKey);
            },
            "enter" : function(e){
            this.save();
            },
            scope : this
            });
            </code></pre>
            @constructor
            @param {Mixed} el The element to bind to
            @param {Object} config The config
            </summary>
        </member>
        <member name="M:Ext.KeyNav.destroy">
            <summary>
            Destroy this KeyNav (this is the same as calling disable).
            </summary>
        </member>
        <member name="M:Ext.KeyNav.disable">
            <summary>
            Disable this KeyNav
            </summary>
        </member>
        <member name="M:Ext.KeyNav.enable">
            <summary>
            Enable this KeyNav
            </summary>
        </member>
        <member name="M:Ext.KeyNav.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.KeyNav
            <p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
            navigation keys to function calls that will get called when the keys are pressed, providing an easy
            way to implement custom navigation schemes for any UI component.</p>
            <p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
            pageUp, pageDown, del, home, end.  Usage:</p>
            <pre><code>
            var nav = new Ext.KeyNav("my-element", {
            "left" : function(e){
            this.moveLeft(e.ctrlKey);
            },
            "right" : function(e){
            this.moveRight(e.ctrlKey);
            },
            "enter" : function(e){
            this.save();
            },
            scope : this
            });
            </code></pre>
            @constructor
            @param {Mixed} el The element to bind to
            @param {Object} config The config
            </summary>
        </member>
        <member name="M:Ext.KeyNav.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean.
            @param {Boolean} disabled
            </summary>
        </member>
        <member name="P:Ext.KeyNav.defaultEventAction">
            <summary>
            @cfg {String} defaultEventAction
            The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are
            {@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and
            {@link Ext.EventObject#stopPropagation} (defaults to 'stopEvent')
            </summary>
        </member>
        <member name="P:Ext.KeyNav.disabled">
            <summary>
            @cfg {Boolean} disabled
            True to disable this KeyNav instance (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.KeyNav.forceKeyDown">
            <summary>
            @cfg {Boolean} forceKeyDown
            Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since
            IE does not propagate special keys on keypress, but setting this to true will force other browsers to also
            handle keydown instead of keypress.
            </summary>
        </member>
        <member name="P:Ext.KeyNavConfig.defaultEventAction">
            <summary>
            The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are
            {@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and
            {@link Ext.EventObject#stopPropagation} (defaults to 'stopEvent')
            </summary>
        </member>
        <member name="P:Ext.KeyNavConfig.disabled">
            <summary>
            True to disable this KeyNav instance (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.KeyNavConfig.forceKeyDown">
            <summary>
            Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since
            IE does not propagate special keys on keypress, but setting this to true will force other browsers to also
            handle keydown instead of keypress.
            </summary>
        </member>
        <member name="T:Ext.Layer">
            <summary>
            @class Ext.Layer
            @extends Ext.Element
            An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and
            automatic maintaining of shadow/shim positions.
            @cfg {Boolean} shim False to disable the iframe shim in browsers which need one (defaults to true)
            @cfg {String/Boolean} shadow True to automatically create an {@link Ext.Shadow}, or a string indicating the
            shadow's display {@link Ext.Shadow#mode}. False to disable the shadow. (defaults to false)
            @cfg {Object} dh DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).
            @cfg {Boolean} constrain False to disable constrain to viewport (defaults to true)
            @cfg {String} cls CSS class to add to the element
            @cfg {Number} zindex Starting z-index (defaults to 11000)
            @cfg {Number} shadowOffset Number of pixels to offset the shadow (defaults to 4)
            @cfg {Boolean} useDisplay
            Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>
            to use css style <tt>'display:none;'</tt> to hide the Layer.
            @constructor
            @param {Object} config An object with config options.
            @param {String/HTMLElement} existingEl (optional) Uses an existing DOM element. If the element is not found it creates it.
            </summary>
        </member>
        <member name="M:Ext.Layer.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.Layer
            @extends Ext.Element
            An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and
            automatic maintaining of shadow/shim positions.
            @cfg {Boolean} shim False to disable the iframe shim in browsers which need one (defaults to true)
            @cfg {String/Boolean} shadow True to automatically create an {@link Ext.Shadow}, or a string indicating the
            shadow's display {@link Ext.Shadow#mode}. False to disable the shadow. (defaults to false)
            @cfg {Object} dh DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).
            @cfg {Boolean} constrain False to disable constrain to viewport (defaults to true)
            @cfg {String} cls CSS class to add to the element
            @cfg {Number} zindex Starting z-index (defaults to 11000)
            @cfg {Number} shadowOffset Number of pixels to offset the shadow (defaults to 4)
            @cfg {Boolean} useDisplay
            Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>
            to use css style <tt>'display:none;'</tt> to hide the Layer.
            @constructor
            @param {Object} config An object with config options.
            @param {String/HTMLElement} existingEl (optional) Uses an existing DOM element. If the element is not found it creates it.
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.cls">
            <summary>
            CSS class to add to the element
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.constrain">
            <summary>
            False to disable constrain to viewport (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.dh">
            <summary>
            DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.shadow">
            <summary>
            True to automatically create an {@link Ext.Shadow}, or a string indicating the
            shadow's display {@link Ext.Shadow#mode}. False to disable the shadow. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.shadowOffset">
            <summary>
            Number of pixels to offset the shadow (defaults to 4)
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.shim">
            <summary>
            False to disable the iframe shim in browsers which need one (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.useDisplay">
            <summary>
            Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>
            to use css style <tt>'display:none;'</tt> to hide the Layer.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.LayerConfig.zindex">
            <summary>
            Starting z-index (defaults to 11000)
            </summary>
        </member>
        <member name="T:Ext.Loader">
            <summary>
            @class Ext.Loader
            @singleton
            Simple class to help load JavaScript files on demand
            </summary>
        </member>
        <member name="T:Ext.LoadMask">
            <summary>
            @class Ext.LoadMask
            A simple utility class for generically masking elements while loading data.  If the {@link #store}
            config option is specified, the masking will be automatically synchronized with the store's loading
            process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
            element's Updater load indicator and will be destroyed after the initial load.
            <p>Example usage:</p>
            *<pre><code>
            // Basic mask:
            var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
            myMask.show();
            </code></pre>
            @constructor
            Create a new LoadMask
            @param {Mixed} el The element or DOM node, or its id
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.LoadMask.disable">
            <summary>
            Disables the mask to prevent it from being displayed
            </summary>
        </member>
        <member name="M:Ext.LoadMask.enable">
            <summary>
            Enables the mask so that it can be displayed
            </summary>
        </member>
        <member name="M:Ext.LoadMask.hide">
            <summary>
            Hide this LoadMask.
            </summary>
        </member>
        <member name="M:Ext.LoadMask.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.LoadMask
            A simple utility class for generically masking elements while loading data.  If the {@link #store}
            config option is specified, the masking will be automatically synchronized with the store's loading
            process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
            element's Updater load indicator and will be destroyed after the initial load.
            <p>Example usage:</p>
            *<pre><code>
            // Basic mask:
            var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
            myMask.show();
            </code></pre>
            @constructor
            Create a new LoadMask
            @param {Mixed} el The element or DOM node, or its id
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.LoadMask.show">
            <summary>
            Show this LoadMask over the configured Element.
            </summary>
        </member>
        <member name="P:Ext.LoadMask.disabled">
            <summary>
            Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.LoadMask.msg">
            <summary>
            @cfg {String} msg
            The text to display in a centered loading message box (defaults to 'Loading...')
            </summary>
        </member>
        <member name="P:Ext.LoadMask.msgCls">
            <summary>
            @cfg {String} msgCls
            The CSS class to apply to the loading message element (defaults to "x-mask-loading")
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.msg">
            <summary>
            The text to display in a centered loading message box (defaults to 'Loading...')
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.msgCls">
            <summary>
            The CSS class to apply to the loading message element (defaults to "x-mask-loading")
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.removeMask">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads),
            False to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.store">
            <summary>
            Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and
            hidden on either load sucess, or load fail.
            </summary>
        </member>
        <member name="T:Ext.Toolbar">
            <summary>
            @class Ext.Toolbar
            @extends Ext.Container
            <p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar
            is <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may
            be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,
            or implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>
            <p>Some items have shortcut strings for creation:</p>
            <pre>
            <u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>
            '->'      'tbfill'       {@link Ext.Toolbar.Fill}       begin using the right-justified button container
            '-'       'tbseparator'  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items
            ' '       'tbspacer'     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements
            </pre>
            *
            Example usage of various elements:
            <pre><code>
            var tb = new Ext.Toolbar({
            renderTo: document.body,
            width: 600,
            height: 100,
            items: [
            {
            // xtype: 'button', // default for Toolbars, same as 'tbbutton'
            text: 'Button'
            },
            {
            xtype: 'splitbutton', // same as 'tbsplitbutton'
            text: 'Split Button'
            },
            // begin using the right-justified button container
            '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill
            {
            xtype: 'textfield',
            name: 'field1',
            emptyText: 'enter search term'
            },
            // add a vertical separator bar between toolbar items
            '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator
            'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem
            {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer
            'text 2',
            {xtype: 'tbspacer', width: 50}, // add a 50px space
            'text 3'
            ]
            });
            </code></pre>
            Example adding a ComboBox within a menu of a button:
            <pre><code>
            // ComboBox creation
            var combo = new Ext.form.ComboBox({
            store: new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ['initials', 'fullname'],
            data : [
            ['FF', 'Fred Flintstone'],
            ['BR', 'Barney Rubble']
            ]
            }),
            displayField: 'fullname',
            typeAhead: true,
            mode: 'local',
            forceSelection: true,
            triggerAction: 'all',
            emptyText: 'Select a name...',
            selectOnFocus: true,
            width: 135,
            getListParent: function() {
            return this.el.up('.x-menu');
            },
            iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
            });
            // put ComboBox in a Menu
            var menu = new Ext.menu.Menu({
            id: 'mainMenu',
            items: [
            combo // A Field in a Menu
            ]
            });
            // add a Button with the menu
            tb.add({
            text:'Button w/ Menu',
            menu: menu  // assign menu by instance
            });
            tb.doLayout();
            </code></pre>
            @constructor
            Creates a new Toolbar
            @param {Object/Array} config A config object or an array of buttons to <tt>{@link #add}</tt>
            @xtype toolbar
            </summary>
        </member>
        <member name="M:Ext.Toolbar.#ctor(System.Object)">
            <summary>
            @class Ext.Toolbar
            @extends Ext.Container
            <p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar
            is <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may
            be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,
            or implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>
            <p>Some items have shortcut strings for creation:</p>
            <pre>
            <u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>
            '->'      'tbfill'       {@link Ext.Toolbar.Fill}       begin using the right-justified button container
            '-'       'tbseparator'  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items
            ' '       'tbspacer'     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements
            </pre>
            *
            Example usage of various elements:
            <pre><code>
            var tb = new Ext.Toolbar({
            renderTo: document.body,
            width: 600,
            height: 100,
            items: [
            {
            // xtype: 'button', // default for Toolbars, same as 'tbbutton'
            text: 'Button'
            },
            {
            xtype: 'splitbutton', // same as 'tbsplitbutton'
            text: 'Split Button'
            },
            // begin using the right-justified button container
            '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill
            {
            xtype: 'textfield',
            name: 'field1',
            emptyText: 'enter search term'
            },
            // add a vertical separator bar between toolbar items
            '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator
            'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem
            {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer
            'text 2',
            {xtype: 'tbspacer', width: 50}, // add a 50px space
            'text 3'
            ]
            });
            </code></pre>
            Example adding a ComboBox within a menu of a button:
            <pre><code>
            // ComboBox creation
            var combo = new Ext.form.ComboBox({
            store: new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ['initials', 'fullname'],
            data : [
            ['FF', 'Fred Flintstone'],
            ['BR', 'Barney Rubble']
            ]
            }),
            displayField: 'fullname',
            typeAhead: true,
            mode: 'local',
            forceSelection: true,
            triggerAction: 'all',
            emptyText: 'Select a name...',
            selectOnFocus: true,
            width: 135,
            getListParent: function() {
            return this.el.up('.x-menu');
            },
            iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
            });
            // put ComboBox in a Menu
            var menu = new Ext.menu.Menu({
            id: 'mainMenu',
            items: [
            combo // A Field in a Menu
            ]
            });
            // add a Button with the menu
            tb.add({
            text:'Button w/ Menu',
            menu: menu  // assign menu by instance
            });
            tb.doLayout();
            </code></pre>
            @constructor
            Creates a new Toolbar
            @param {Object/Array} config A config object or an array of buttons to <tt>{@link #add}</tt>
            @xtype toolbar
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.bind(Ext.data.Store)">
            <summary>
            Binds the paging toolbar to the specified {@link Ext.data.Store} <b>(deprecated)</b>
            @param {Ext.data.Store} store The data store to bind
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.bindStore(System.Object,System.Boolean)">
            <summary>
            Binds the paging toolbar to the specified {@link Ext.data.Store}
            @param {Store} store The store to bind to this toolbar
            @param {Boolean} initial (Optional) true to not remove listeners
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.changePage(System.Object)">
            <summary>
            Change the active page
            @param {Integer} page The page to display
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.doRefresh">
            <summary>
            Refresh the current page, has the same effect as clicking the 'refresh' button.
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.initComponent">
            <summary>
            Indicator for the record position.  This property might be used to get the active page
            number for example:<pre><code>
            // t is reference to the paging toolbar instance
            var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
            </code></pre>
            @type Number
            @property cursor
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.moveFirst">
            <summary>
            Move to the first page, has the same effect as clicking the 'first' button.
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.moveLast">
            <summary>
            Move to the last page, has the same effect as clicking the 'last' button.
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.moveNext">
            <summary>
            Move to the next page, has the same effect as clicking the 'next' button.
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.movePrevious">
            <summary>
            Move to the previous page, has the same effect as clicking the 'previous' button.
            </summary>
        </member>
        <member name="M:Ext.PagingToolbar.unbind(Ext.data.Store)">
            <summary>
            Unbinds the paging toolbar from the specified {@link Ext.data.Store} <b>(deprecated)</b>
            @param {Ext.data.Store} store The data store to unbind
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.afterPageText">
            <summary>
            @cfg {String} afterPageText
            Customizable piece of the default paging text (defaults to <tt>'of {0}'</tt>). Note that
            this string is formatted using <tt>{0}</tt> as a token that is replaced by the number of
            total pages. This token should be preserved when overriding this string if showing the
            total page count is desired.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.beforePageText">
            <summary>
            @cfg {String} beforePageText
            The text displayed before the input item (defaults to <tt>'Page'</tt>).
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.displayMsg">
            <summary>
            @cfg {String} displayMsg
            The paging status message to display (defaults to <tt>'Displaying {0} - {1} of {2}'</tt>).
            Note that this string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens
            that are replaced by the values for start, end and total respectively. These tokens should
            be preserved when overriding this string if showing those values is desired.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.emptyMsg">
            <summary>
            @cfg {String} emptyMsg
            The message to display when no records are found (defaults to 'No data to display')
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.firstText">
            <summary>
            @cfg {String} firstText
            The quicktip text displayed for the first page button (defaults to <tt>'First Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.lastText">
            <summary>
            @cfg {String} lastText
            The quicktip text displayed for the last page button (defaults to <tt>'Last Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.nextText">
            <summary>
            @cfg {String} nextText
            The quicktip text displayed for the next page button (defaults to <tt>'Next Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.pageSize">
            <summary>
            @cfg {Number} pageSize
            The number of records to display per page (defaults to <tt>20</tt>)
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.prevText">
            <summary>
            @cfg {String} prevText
            The quicktip text displayed for the previous page button (defaults to <tt>'Previous Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbar.refreshText">
            <summary>
            @cfg {String} refreshText
            The quicktip text displayed for the Refresh button (defaults to <tt>'Refresh'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.afterPageText">
            <summary>
            Customizable piece of the default paging text (defaults to <tt>'of {0}'</tt>). Note that
            this string is formatted using <tt>{0}</tt> as a token that is replaced by the number of
            total pages. This token should be preserved when overriding this string if showing the
            total page count is desired.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.beforePageText">
            <summary>
            The text displayed before the input item (defaults to <tt>'Page'</tt>).
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.displayInfo">
            <summary>
            <tt>true</tt> to display the displayMsg (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.displayMsg">
            <summary>
            The paging status message to display (defaults to <tt>'Displaying {0} - {1} of {2}'</tt>).
            Note that this string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens
            that are replaced by the values for start, end and total respectively. These tokens should
            be preserved when overriding this string if showing those values is desired.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.emptyMsg">
            <summary>
            The message to display when no records are found (defaults to 'No data to display')
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.firstText">
            <summary>
            The quicktip text displayed for the first page button (defaults to <tt>'First Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.lastText">
            <summary>
            The quicktip text displayed for the last page button (defaults to <tt>'Last Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.nextText">
            <summary>
            The quicktip text displayed for the next page button (defaults to <tt>'Next Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.pageSize">
            <summary>
            The number of records to display per page (defaults to <tt>20</tt>)
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.prependButtons">
            <summary>
            <tt>true</tt> to insert any configured <tt>items</tt> <i>before</i> the paging buttons.
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.prevText">
            <summary>
            The quicktip text displayed for the previous page button (defaults to <tt>'Previous Page'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.refreshText">
            <summary>
            The quicktip text displayed for the Refresh button (defaults to <tt>'Refresh'</tt>).
            <b>Note</b>: quick tips must be initialized for the quicktip to show.
            </summary>
        </member>
        <member name="P:Ext.PagingToolbarConfig.store">
            <summary>
            The {@link Ext.data.Store} the paging toolbar should use as its data source (required).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.animCollapse">
            <summary>
            <code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the
            animation (defaults to <code>true</code> if the {@link Ext.Fx} class is available, otherwise <code>false</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.applyTo">
            <summary>
            <p>The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in
            the document that specifies some panel-specific structural markup.  When <code>applyTo</code> is used,
            constituent parts of the panel can be specified by CSS class name within the main element, and the panel
            will automatically create those components from that markup. Any required components not specified in the
            markup will be autogenerated if necessary.</p>
            <p>The following class names are supported (baseCls will be replaced by {@link #baseCls}):</p>
            <ul><li>baseCls + '-header'</li>
            <li>baseCls + '-header-text'</li>
            <li>baseCls + '-bwrap'</li>
            <li>baseCls + '-tbar'</li>
            <li>baseCls + '-body'</li>
            <li>baseCls + '-bbar'</li>
            <li>baseCls + '-footer'</li></ul>
            <p>Using this config, a call to render() is not required.  If applyTo is specified, any value passed for
            {@link #renderTo} will be ignored and the target element's parent node will automatically be used as the
            panel's container.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.autoHeight">
            <summary>
            <code>true</code> to use height:'auto', <code>false</code> to use fixed height (defaults to <code>false</code>).
            <b>Note</b>: Setting <code>autoHeight: true</code> means that the browser will manage the panel's height
            based on its contents, and that Ext will not manage it at all. If the panel is within a layout that
            manages dimensions (<code>fit</code>, <code>border</code>, etc.) then setting <code>autoHeight: true</code>
            can cause issues with scrolling and will not generally work as expected since the panel will take
            on the height of its contents rather than the height required by the Ext layout.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.autoLoad">
            <summary>
            A valid url spec according to the Updater {@link Ext.Updater#update} method.
            If autoLoad is not null, the panel will attempt to load its contents
            immediately upon render.<p>
            The URL will become the default URL for this panel's {@link #body} element,
            so it may be {@link Ext.Element#refresh refresh}ed at any time.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.baseCls">
            <summary>
            The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
            <p>Another option available by default is to specify <code>'x-plain'</code> which strips all styling
            except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            See <code>{@link #unstyled}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bbar">
            <summary>
            <p>The bottom toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of
            buttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.
            To access the bottom toolbar after render, use {@link #getBottomToolbar}.</p>
            <p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load
            of an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and
            so are not scanned to collect form items. However, the values <b>will</b> be submitted because form
            submission parameters are collected from the DOM tree.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bbarCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
            of this Panel's {@link #bbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bodyBorder">
            <summary>
            True to display an interior border on the body element of the panel, false to hide it (defaults to true).
            This only applies when {@link #border} == true.  If border == true and bodyBorder == false, the border will display
            as a 1px wide inset border, giving the entire body element an inset appearance.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bodyCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object may be specified for any
            Panel Element.</p>
            <p>By default, the Default element in the table below will be used for the html markup to
            create a child element with the commensurate Default class name (<code>baseCls</code> will be
            replaced by <code>{@link #baseCls}</code>):</p>
            <pre>
            Panel      Default  Default             Custom      Additional       Additional
            Element    element  class               element     class            style
            ========   ==========================   =========   ==============   ===========
            {@link #header}     div      {@link #baseCls}+'-header'   {@link #headerCfg}   headerCssClass   headerStyle
            {@link #bwrap}      div      {@link #baseCls}+'-bwrap'     {@link #bwrapCfg}    bwrapCssClass    bwrapStyle
            + tbar     div      {@link #baseCls}+'-tbar'       {@link #tbarCfg}     tbarCssClass     tbarStyle
            + {@link #body}     div      {@link #baseCls}+'-body'       {@link #bodyCfg}     {@link #bodyCssClass}     {@link #bodyStyle}
            + bbar     div      {@link #baseCls}+'-bbar'       {@link #bbarCfg}     bbarCssClass     bbarStyle
            + {@link #footer}   div      {@link #baseCls}+'-footer'   {@link #footerCfg}   footerCssClass   footerStyle
            </pre>
            <p>Configuring a Custom element may be used, for example, to force the {@link #body} Element
            to use a different form of markup than is created by default. An example of this might be
            to {@link Ext.Element#createChild create a child} Panel containing a custom content, such as
            a header, or forcing centering of all Panel content by having the body be a &lt;center&gt;
            element:</p>
            <pre><code>
            new Ext.Panel({
            title: 'Message Title',
            renderTo: Ext.getBody(),
            width: 200, height: 130,
            <b>bodyCfg</b>: {
            tag: 'center',
            cls: 'x-panel-body',  // Default class not applied if Custom element specified
            html: 'Message'
            },
            footerCfg: {
            tag: 'h2',
            cls: 'x-panel-footer',        // same as the Default class
            html: 'footer html'
            },
            footerCssClass: 'custom-footer', // additional css class, see {@link Ext.element#addClass addClass}
            footerStyle:    'background-color:red' // see {@link #bodyStyle}
            });
            </code></pre>
            <p>The example above also explicitly creates a <code>{@link #footer}</code> with custom markup and
            styling applied.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bodyCssClass">
            <summary>
            Additional css class selector to be applied to the {@link #body} element in the format expected by
            {@link Ext.Element#addClass} (defaults to null). See {@link #bodyCfg}.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bodyStyle">
            <summary>
            Custom CSS styles to be applied to the {@link #body} element in the format expected by
            {@link Ext.Element#applyStyles} (defaults to null). See {@link #bodyCfg}.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.border">
            <summary>
            True to display the borders of the panel's body element, false to hide them (defaults to true).  By default,
            the border is a 2px wide inset border, but this can be further altered by setting {@link #bodyBorder} to false.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.buttonAlign">
            <summary>
            The alignment of any {@link #buttons} added to this panel.  Valid values are <code>'right'</code>,
            <code>'left'</code> and <code>'center'</code> (defaults to <code>'right'</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.buttons">
            <summary>
            <code>buttons</code> will be used as <code>{@link Ext.Container#items items}</code> for the toolbar in
            the footer (<code>{@link #fbar}</code>). Typically the value of this configuration property will be
            an array of {@link Ext.Button}s or {@link Ext.Button} configuration objects.
            If an item is configured with <code>minWidth</code> or the Panel is configured with <code>minButtonWidth</code>,
            that width will be applied to the item.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.bwrapCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
            of this Panel's {@link #bwrap} Element.  See <code>{@link #bodyCfg}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.closable">
            <summary>
            Panels themselves do not directly support being closed, but some Panel subclasses do (like
            {@link Ext.Window}) or a Panel Class within an {@link Ext.TabPanel}.  Specify <code>true</code>
            to enable closing in such situations. Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.collapsed">
            <summary>
            <code>true</code> to render the panel collapsed, <code>false</code> to render it expanded (defaults to
            <code>false</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.collapsedCls">
            <summary>
            A CSS class to add to the panel's element after it has been collapsed (defaults to
            <code>'x-panel-collapsed'</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.collapseFirst">
            <summary>
            <code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of)
            any other tools in the panel's title bar, <code>false</code> to render it last (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.collapsible">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into
            the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.disabled">
            <summary>
            Render this panel disabled (default is <code>false</code>). An important note when using the disabled
            config on panels is that IE will often fail to initialize the disabled mask element correectly if
            the panel's layout has not yet completed by the time the Panel is disabled during the render process.
            If you experience this issue, you may need to instead use the {@link #afterlayout} event to initialize
            the disabled state:
            <pre><code>
            new Ext.Panel({
            ...
            listeners: {
            'afterlayout': {
            fn: function(p){
            p.disable();
            },
            single: true // important, as many layouts can occur
            }
            }
            });
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.PanelConfig.draggable" -->
        <member name="P:Ext.PanelConfig.elements">
            <summary>
            A comma-delimited list of panel elements to initialize when the panel is rendered.  Normally, this list will be
            generated automatically based on the items added to the panel at config time, but sometimes it might be useful to
            make sure a structural element is rendered even if not specified at config time (for example, you may want
            to add a button or toolbar dynamically after the panel has been rendered).  Adding those elements to this
            list will allocate the required placeholders in the panel when it is rendered.  Valid values are<div class="mdetail-params"><ul>
            <li><code>header</code></li>
            <li><code>tbar</code> (top bar)</li>
            <li><code>body</code></li>
            <li><code>bbar</code> (bottom bar)</li>
            <li><code>footer</code></li>
            </ul></div>
            Defaults to '<code>body</code>'.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.floating">
            <summary>
            <p>This property is used to configure the underlying {@link Ext.Layer}. Acceptable values for this
            configuration property are:</p><div class="mdetail-params"><ul>
            <li><b><code>false</code></b> : <b>Default.</b><div class="sub-desc">Display the panel inline where it is
            rendered.</div></li>
            <li><b><code>true</code></b> : <div class="sub-desc">Float the panel (absolute position it with automatic
            shimming and shadow).<ul>
            <div class="sub-desc">Setting floating to true will create an Ext.Layer for this panel and display the
            panel at negative offsets so that it is hidden.</div>
            <div class="sub-desc">Since the panel will be absolute positioned, the position must be set explicitly
            <i>after</i> render (e.g., <code>myPanel.setPosition(100,100);</code>).</div>
            <div class="sub-desc"><b>Note</b>: when floating a panel you should always assign a fixed width,
            otherwise it will be auto width and will expand to fill to the right edge of the viewport.</div>
            </ul></div></li>
            <li><b><code>{@link Ext.Layer object}</code></b> : <div class="sub-desc">The specified object will be used
            as the configuration object for the {@link Ext.Layer} that will be created.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.footer">
            <summary>
            <code>true</code> to create the footer element explicitly, false to skip creating it. The footer
            will be created automatically if <code>{@link #buttons}</code> or a <code>{@link #fbar}</code> have
            been configured.  See <code>{@link #bodyCfg}</code> for an example.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.footerCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
            of this Panel's {@link #footer} Element.  See <code>{@link #bodyCfg}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.frame">
            <summary>
            <code>false</code> by default to render with plain 1px square borders. <code>true</code> to render with
            9 elements, complete with custom rounded corners (also see {@link Ext.Element#boxWrap}).
            <p>The template generated for each condition is depicted below:</p><pre><code>
            *
            // frame = false
            &lt;div id="developer-specified-id-goes-here" class="x-panel">
            &lt;div class="x-panel-header">&lt;span class="x-panel-header-text">Title: (frame:false)&lt;/span>&lt;/div>
            &lt;div class="x-panel-bwrap">
            &lt;div class="x-panel-body">&lt;p>html value goes here&lt;/p>&lt;/div>
            &lt;/div>
            &lt;/div>
            // frame = true (create 9 elements)
            &lt;div id="developer-specified-id-goes-here" class="x-panel">
            &lt;div class="x-panel-tl">&lt;div class="x-panel-tr">&lt;div class="x-panel-tc">
            &lt;div class="x-panel-header">&lt;span class="x-panel-header-text">Title: (frame:true)&lt;/span>&lt;/div>
            &lt;/div>&lt;/div>&lt;/div>
            &lt;div class="x-panel-bwrap">
            &lt;div class="x-panel-ml">&lt;div class="x-panel-mr">&lt;div class="x-panel-mc">
            &lt;div class="x-panel-body">&lt;p>html value goes here&lt;/p>&lt;/div>
            &lt;/div>&lt;/div>&lt;/div>
            &lt;div class="x-panel-bl">&lt;div class="x-panel-br">&lt;div class="x-panel-bc"/>
            &lt;/div>&lt;/div>&lt;/div>
            &lt;/div>
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.header">
            <summary>
            <code>true</code> to create the Panel's header element explicitly, <code>false</code> to skip creating
            it.  If a <code>{@link #title}</code> is set the header will be created automatically, otherwise it will not.
            If a <code>{@link #title}</code> is set but <code>header</code> is explicitly set to <code>false</code>, the header
            will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.headerAsText">
            <summary>
            <code>true</code> to display the panel <code>{@link #title}</code> in the <code>{@link #header}</code>,
            <code>false</code> to hide it (defaults to <code>true</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.headerCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
            of this Panel's {@link #header} Element.  See <code>{@link #bodyCfg}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.hideCollapseTool">
            <summary>
            <code>true</code> to hide the expand/collapse toggle button when <code>{@link #collapsible} == true</code>,
            <code>false</code> to display it (defaults to <code>false</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.iconCls">
            <summary>
            The CSS class selector that specifies a background image to be used as the header icon (defaults to '').
            <p>An example of specifying a custom icon class would be something like:
            </p><pre><code>
            // specify the property in the config for the class:
            ...
            iconCls: 'my-icon'
            // css class that specifies background image to be used as the icon image:
            .my-icon { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.keys">
            <summary>
            A {@link Ext.KeyMap} config object (in the format expected by {@link Ext.KeyMap#addBinding}
            used to assign custom key handling to this panel (defaults to <code>null</code>).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.maskDisabled">
            <summary>
            <code>true</code> to mask the panel when it is {@link #disabled}, <code>false</code> to not mask it (defaults
            to <code>true</code>).  Either way, the panel will always tell its contained elements to disable themselves
            when it is disabled, but masking the panel can provide an additional visual cue that the panel is
            disabled.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.minButtonWidth">
            <summary>
            Minimum width in pixels of all {@link #buttons} in this panel (defaults to <code>75</code>)
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.padding">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be
            a number to be applied to all sides, or a normal css string describing padding.
            Defaults to <tt>undefined</tt>.
            *
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.preventBodyReset">
            <summary>
            Defaults to <code>false</code>.  When set to <code>true</code>, an extra css class <code>'x-panel-normal'</code>
            will be added to the panel's element, effectively applying css styles suggested by the W3C
            (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b> element (not the header,
            footer, etc.).
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.shadow">
            <summary>
            <code>true</code> (or a valid Ext.Shadow {@link Ext.Shadow#mode} value) to display a shadow behind the
            panel, <code>false</code> to display no shadow (defaults to <code>'sides'</code>).  Note that this option
            only applies when <code>{@link #floating} = true</code>.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.shadowOffset">
            <summary>
            The number of pixels to offset the shadow if displayed (defaults to <code>4</code>). Note that this
            option only applies when <code>{@link #floating} = true</code>.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.shim">
            <summary>
            <code>false</code> to disable the iframe shim in browsers which need one (defaults to <code>true</code>).
            Note that this option only applies when <code>{@link #floating} = true</code>.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.tbar">
            <summary>
            <p>The top toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of
            buttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.
            To access the top toolbar after render, use {@link #getTopToolbar}.</p>
            <p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load
            of an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and
            so are not scanned to collect form items. However, the values <b>will</b> be submitted because form
            submission parameters are collected from the DOM tree.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.tbarCfg">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
            of this Panel's {@link #tbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.title">
            <summary>
            The title text to be used as innerHTML (html tags are accepted) to display in the panel
            <code>{@link #header}</code> (defaults to ''). When a <code>title</code> is specified the
            <code>{@link #header}</code> element will automatically be created and displayed unless
            {@link #header} is explicitly set to <code>false</code>.  If you do not want to specify a
            <code>title</code> at config time, but you may want one later, you must either specify a non-empty
            <code>title</code> (a blank space ' ' will do) or <code>header:true</code> so that the container
            element will get created.
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.titleCollapse">
            <summary>
            <code>true</code> to allow expanding and collapsing the panel (when <code>{@link #collapsible} = true</code>)
            by clicking anywhere in the header bar, <code>false</code>) to allow it only by clicking to tool button
            (defaults to <code>false</code>)). If this panel is a child item of a border layout also see the
            {@link Ext.layout.BorderLayout.Region BorderLayout.Region}
            <code>{@link Ext.layout.BorderLayout.Region#floatable floatable}</code> config option.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.PanelConfig.tools" -->
        <member name="P:Ext.PanelConfig.toolTemplate">
            <summary>
            <p>A Template used to create {@link #tools} in the {@link #header} Element. Defaults to:</p><pre><code>
            new Ext.Template('&lt;div class="x-tool x-tool-{id}">&amp;#160;&lt;/div>')</code></pre>
            <p>This may may be overridden to provide a custom DOM structure for tools based upon a more
            complex XTemplate. The template's data is a single tool configuration object (Not the entire Array)
            as specified in {@link #tools}.  In the following example an &lt;a> tag is used to provide a
            visual indication when hovering over the tool:</p><pre><code>
            var win = new Ext.Window({
            tools: [{
            id: 'download',
            href: '/MyPdfDoc.pdf'
            }],
            toolTemplate: new Ext.XTemplate(
            '&lt;tpl if="id==\'download\'">',
            '&lt;a class="x-tool x-tool-pdf" href="{href}">&lt;/a>',
            '&lt;/tpl>',
            '&lt;tpl if="id!=\'download\'">',
            '&lt;div class="x-tool x-tool-{id}">&amp;#160;&lt;/div>',
            '&lt;/tpl>'
            ),
            width:500,
            height:300,
            closeAction:'hide'
            });</code></pre>
            <p>Note that the CSS class 'x-tool-pdf' should have an associated style rule which provides an
            appropriate background image, something like:</p>
            <pre><code>
            a.x-tool-pdf {background-image: url(../shared/extjs/images/pdf.gif)!important;}
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.PanelConfig.unstyled">
            <summary>
            Overrides the <code>{@link #baseCls}</code> setting to <code>{@link #baseCls} = 'x-plain'</code> which renders
            the panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            </summary>
        </member>
        <member name="T:Ext.ProgressBar">
            <summary>
            @class Ext.ProgressBar
            @extends Ext.BoxComponent
            <p>An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.</p>
            <p>In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the
            progress bar as needed from your own code.  This method is most appropriate when you want to show progress
            throughout an operation that has predictable points of interest at which you can update the control.</p>
            <p>In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it
            once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
            and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in
            which you have no need for indicating intermediate progress.</p>
            @cfg {Float} value A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            @cfg {String} text The progress bar text (defaults to '')
            @cfg {Mixed} textEl The element to render the progress text to (defaults to the progress
            bar's internal text element)
            @cfg {String} id The progress bar element's id (defaults to an auto-generated id)
            @xtype progress
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.isWaiting">
            <summary>
            Returns true if the progress bar is currently in a {@link #wait} operation
            @return {Boolean} True if waiting, else false
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.reset(System.Boolean)">
            <summary>
            Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
            bar will also be hidden (using the {@link #hideMode} property internally).
            @param {Boolean} hide (optional) True to hide the progress bar (defaults to false)
            @return {Ext.ProgressBar} this
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.setSize(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the size of the progress bar.
            @param {Number} width The new width in pixels
            @param {Number} height The new height in pixels
            @return {Ext.ProgressBar} this
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.syncProgressBar">
            <summary>
            Synchronizes the inner bar width to the proper proportion of the total componet width based
            on the current progress {@link #value}.  This will be called automatically when the ProgressBar
            is resized by a layout, but if it is rendered auto width, this method can be called from
            another resize handler to sync the ProgressBar if necessary.
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.updateProgress(System.Object,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Updates the progress bar value, and optionally its text.  If the text argument is not specified,
            any existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even
            if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for
            determining when the progress is complete and calling {@link #reset} to clear and/or hide the control.
            @param {Float} value (optional) A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            @param {String} text (optional) The string to display in the progress text element (defaults to '')
            @param {Boolean} animate (optional) Whether to animate the transition of the progress bar. If this value is
            not specified, the default for the class is used (default to false)
            @return {Ext.ProgressBar} this
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.updateText(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
            bar itself will display the updated text.
            @param {String} text (optional) The string to display in the progress text element (defaults to '')
            @return {Ext.ProgressBar} this
            </summary>
        </member>
        <member name="M:Ext.ProgressBar.wait(System.Object)">
            <summary>
            Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
            bar will automatically reset after a fixed amount of time and optionally call a callback function
            if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
            be manually cleared by calling {@link #reset}.  The wait method accepts a config object with
            the following properties:
            <pre>
            Property   Type          Description
            ---------- ------------  ----------------------------------------------------------------------
            duration   Number        The length of time in milliseconds that the progress bar should
            run before resetting itself (defaults to undefined, in which case it
            will run indefinitely until reset is called)
            interval   Number        The length of time in milliseconds between each progress update
            (defaults to 1000 ms)
            animate    Boolean       Whether to animate the transition of the progress bar. If this value is
            not specified, the default for the class is used.
            increment  Number        The number of progress update segments to display within the progress
            bar (defaults to 10).  If the bar reaches the end and is still
            updating, it will automatically wrap back to the beginning.
            text       String        Optional text to display in the progress bar element (defaults to '').
            fn         Function      A callback function to execute after the progress bar finishes auto-
            updating.  The function will be called with no arguments.  This function
            will be ignored if duration is not specified since in that case the
            progress bar can only be stopped programmatically, so any required function
            should be called by the same code after it resets the progress bar.
            scope      Object        The scope that is passed to the callback function (only applies when
            duration and fn are both passed).
            </pre>
            *
            Example usage:
            <pre><code>
            var p = new Ext.ProgressBar({
            renderTo: 'my-el'
            });
            //Wait for 5 seconds, then update the status el (progress bar will auto-reset)
            p.wait({
            interval: 100, //bar will move fast!
            duration: 5000,
            increment: 15,
            text: 'Updating...',
            scope: this,
            fn: function(){
            Ext.fly('status').update('Done!');
            }
            });
            //Or update indefinitely until some async action completes, then reset manually
            p.wait();
            myAction.on('complete', function(){
            p.reset();
            Ext.fly('status').update('Done!');
            });
            </code></pre>
            @param {Object} config (optional) Configuration options
            @return {Ext.ProgressBar} this
            </summary>
        </member>
        <member name="P:Ext.ProgressBar.animate">
            <summary>
            @cfg {Boolean} animate
            True to animate the progress bar during transitions (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ProgressBar.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.animate">
            <summary>
            True to animate the progress bar during transitions (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.baseCls">
            <summary>
            The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.id">
            <summary>
            The progress bar element's id (defaults to an auto-generated id)
            @xtype progress
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.text">
            <summary>
            The progress bar text (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.textEl">
            <summary>
            The element to render the progress text to (defaults to the progress
            bar's internal text element)
            </summary>
        </member>
        <member name="P:Ext.ProgressBarConfig.value">
            <summary>
            A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            </summary>
        </member>
        <member name="T:Ext.QuickTip">
            <summary>
            @class Ext.QuickTip
            @extends Ext.ToolTip
            @xtype quicktip
            A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
            {@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples.
            @constructor
            Create a new Tip
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="T:Ext.ToolTip">
            <summary>
            @class Ext.ToolTip
            @extends Ext.Tip
            A standard tooltip implementation for providing additional information when hovering over a target element.
            @xtype tooltip
            @constructor
            Create a new Tooltip
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="T:Ext.Tip">
            <summary>
            @class Ext.Tip
            @extends Ext.Panel
            @xtype tip
            This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and
            positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
            tips that are displayed programmatically, or it can be extended to provide custom tip implementations.
            @constructor
            Create a new Tip
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="M:Ext.Tip.showAt(SharpKit.JavaScript.JsArray)">
            <summary>
            Shows this tip at the specified XY position.  Example usage:
            <pre><code>
            // Show the tip at x:50 and y:100
            tip.showAt([50,100]);
            </code></pre>
            @param {Array} xy An array containing the x and y coordinates
            </summary>
        </member>
        <member name="M:Ext.Tip.showBy(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            <b>Experimental</b>. Shows this tip at a position relative to another element using a standard {@link Ext.Element#alignTo}
            anchor position value.  Example usage:
            <pre><code>
            // Show the tip at the default position ('tl-br?')
            tip.showBy('my-el');
            // Show the tip's top-left corner anchored to the element's top-right corner
            tip.showBy('my-el', 'tl-tr');
            </code></pre>
            @param {Mixed} el An HTMLElement, Ext.Element or string id of the target element to align to
            @param {String} position (optional) A valid {@link Ext.Element#alignTo} anchor position (defaults to 'tl-br?' or
            {@link #defaultAlign} if specified).
            </summary>
        </member>
        <member name="P:Ext.Tip.autoRender">
            <summary>
            @cfg {String} defaultAlign <b>Experimental</b>. The default {@link Ext.Element#alignTo} anchor position value
            for this tip relative to its element of origin (defaults to "tl-bl?").
            </summary>
        </member>
        <member name="P:Ext.Tip.defaultAlign">
            <summary>
            @cfg {String} defaultAlign <b>Experimental</b>. The default {@link Ext.Element#alignTo} anchor position value
            for this tip relative to its element of origin (defaults to "tl-bl?").
            </summary>
        </member>
        <member name="P:Ext.Tip.maxWidth">
            <summary>
            @cfg {Number} maxWidth The maximum width of the tip in pixels (defaults to 300).  The maximum supported value is 500.
            </summary>
        </member>
        <member name="P:Ext.Tip.minWidth">
            <summary>
            @cfg {Number} minWidth The minimum width of the tip in pixels (defaults to 40).
            </summary>
        </member>
        <member name="P:Ext.Tip.quickShowInterval">
            <summary>
            @cfg {String} defaultAlign <b>Experimental</b>. The default {@link Ext.Element#alignTo} anchor position value
            for this tip relative to its element of origin (defaults to "tl-bl?").
            </summary>
        </member>
        <member name="P:Ext.Tip.shadow">
            <summary>
            @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop"
            for bottom-right shadow (defaults to "sides").
            </summary>
        </member>
        <member name="M:Ext.ToolTip.hide">
            <summary>
            Hides this tooltip if visible.
            </summary>
        </member>
        <member name="M:Ext.ToolTip.initTarget(System.Object)">
            <summary>
            Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.
            @param {Mixed} t The Element, HtmlElement, or ID of an element to bind to
            </summary>
        </member>
        <member name="M:Ext.ToolTip.show">
            <summary>
            Shows this tooltip at the current event target XY position.
            </summary>
        </member>
        <member name="P:Ext.ToolTip.anchorOffset">
            <summary>
            @cfg {Number} anchorOffset A numeric pixel value used to offset the
            default position of the anchor arrow (defaults to 0).  When the anchor
            position is on the top or bottom of the tooltip, <code>anchorOffset</code>
            will be used as a horizontal offset.  Likewise, when the anchor position
            is on the left or right side, <code>anchorOffset</code> will be used as
            a vertical offset.
            </summary>
        </member>
        <member name="P:Ext.ToolTip.anchorToTarget">
            <summary>
            @cfg {Boolean} anchorToTarget True to anchor the tooltip to the target
            element, false to anchor it relative to the mouse coordinates (defaults
            to true).  When <code>anchorToTarget</code> is true, use
            <code>{@link #defaultAlign}</code> to control tooltip alignment to the
            target element.  When <code>anchorToTarget</code> is false, use
            <code>{@link #anchorPosition}</code> instead to control alignment.
            </summary>
        </member>
        <member name="P:Ext.ToolTip.dismissDelay">
            <summary>
            @cfg {Number} dismissDelay Delay in milliseconds before the tooltip
            automatically hides (defaults to 5000). To disable automatic hiding, set
            dismissDelay = 0.
            </summary>
        </member>
        <member name="P:Ext.ToolTip.hideDelay">
            <summary>
            @cfg {Number} hideDelay Delay in milliseconds after the mouse exits the
            target element but before the tooltip actually hides (defaults to 200).
            Set to 0 for the tooltip to hide immediately.
            </summary>
        </member>
        <member name="P:Ext.ToolTip.showDelay">
            <summary>
            @cfg {Number} showDelay Delay in milliseconds before the tooltip displays
            after the mouse enters the target element (defaults to 500)
            </summary>
        </member>
        <member name="P:Ext.ToolTip.targetCounter">
            <summary>
            @cfg {String} delegate <p>Optional. A {@link Ext.DomQuery DomQuery}
            selector which allows selection of individual elements within the
            <code>{@link #target}</code> element to trigger showing and hiding the
            ToolTip as the mouse moves within the target.</p>
            <p>When specified, the child element of the target which caused a show
            event is placed into the <code>{@link #triggerElement}</code> property
            before the ToolTip is shown.</p>
            <p>This may be useful when a Component has regular, repeating elements
            in it, each of which need a Tooltip which contains information specific
            to that element. For example:</p><pre><code>
            var myGrid = new Ext.grid.gridPanel(gridConfig);
            myGrid.on('render', function(grid) {
            var store = grid.getStore();  // Capture the Store.
            var view = grid.getView();    // Capture the GridView.
            myGrid.tip = new Ext.ToolTip({
            target: view.mainBody,    // The overall target element.
            delegate: '.x-grid3-row', // Each grid row causes its own seperate show and hide.
            trackMouse: true,         // Moving within the row should not hide the tip.
            renderTo: document.body,  // Render immediately so that tip.body can be
            //  referenced prior to the first show.
            listeners: {              // Change content dynamically depending on which element
            //  triggered the show.
            beforeshow: function updateTipBody(tip) {
            var rowIndex = view.findRowIndex(tip.triggerElement);
            tip.body.dom.innerHTML = 'Over Record ID ' + store.getAt(rowIndex).id;
            }
            }
            });
            });
            *</code></pre>
            </summary>
        </member>
        <member name="P:Ext.ToolTip.trackMouse">
            <summary>
            @cfg {Boolean} trackMouse True to have the tooltip follow the mouse as it
            moves over the target element (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.QuickTip.cancelShow(System.Object)">
            <summary>
            Hides a visible tip or cancels an impending show for a particular element.
            @param {String/HTMLElement/Element} el The element that is the target of the tip.
            </summary>
        </member>
        <member name="M:Ext.QuickTip.register(System.Object)">
            <summary>
            Configures a new quick tip instance and assigns it to a target element.  The following config values are
            supported (for example usage, see the {@link Ext.QuickTips} class header):
            <div class="mdetail-params"><ul>
            <li>autoHide</li>
            <li>cls</li>
            <li>dismissDelay (overrides the singleton value)</li>
            <li>target (required)</li>
            <li>text (required)</li>
            <li>title</li>
            <li>width</li></ul></div>
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.QuickTip.unregister(System.Object)">
            <summary>
            Removes this quick tip from its element and destroys it.
            @param {String/HTMLElement/Element} el The element from which the quick tip is to be removed.
            </summary>
        </member>
        <member name="P:Ext.QuickTip.interceptTitles">
            <summary>
            @cfg {Boolean} interceptTitles True to automatically use the element's DOM title value if available (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.QuickTipConfig.interceptTitles">
            <summary>
            True to automatically use the element's DOM title value if available (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.QuickTipConfig.target">
            <summary>
            The target HTMLElement, Ext.Element or id to associate with this quicktip (defaults to the document).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Resizable" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.Resizable.#ctor(System.Object,System.Object)" -->
        <member name="M:Ext.Resizable.destroy(System.Boolean)">
            <summary>
            Destroys this resizable. If the element was wrapped and
            removeEl is not true then the element remains.
            @param {Boolean} removeEl (optional) true to remove the element from the DOM
            </summary>
        </member>
        <member name="M:Ext.Resizable.getEl">
            <summary>
            Returns the element this component is bound to.
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.Resizable.getResizeChild">
            <summary>
            Returns the resizeChild element (or null).
            @return {Ext.Element}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Resizable.resizeElement" -->
        <member name="M:Ext.Resizable.resizeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Perform a manual resize and fires the 'resize' event.
            @param {Number} width
            @param {Number} height
            </summary>
        </member>
        <member name="P:Ext.Resizable.animate">
            <summary>
            @cfg {Boolean} animate True to animate the resize (not compatible with dynamic sizing, defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.disableTrackOver">
            <summary>
            @cfg {Boolean} disableTrackOver True to disable mouse tracking. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.draggable">
            <summary>
            @cfg {Boolean} draggable Convenience to initialize drag drop (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.duration">
            <summary>
            @cfg {Number} duration Animation duration if animate = true (defaults to 0.35)
            </summary>
        </member>
        <member name="P:Ext.Resizable.dynamic">
            <summary>
            @cfg {Boolean} dynamic True to resize the element while dragging instead of using a proxy (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.easing">
            <summary>
            @cfg {String} easing Animation easing if animate = true (defaults to <tt>'easingOutStrong'</tt>)
            </summary>
        </member>
        <member name="P:Ext.Resizable.enabled">
            <summary>
            @cfg {Boolean} enabled False to disable resizing (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Resizable.handles">
            <summary>
            @cfg {String} handles String consisting of the resize handles to display (defaults to undefined).
            Specify either <tt>'all'</tt> or any of <tt>'n s e w ne nw se sw'</tt>.
            </summary>
        </member>
        <member name="P:Ext.Resizable.height">
            <summary>
            @cfg {Number} height The height of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.Resizable.heightIncrement">
            <summary>
            @cfg {Number} heightIncrement The increment to snap the height resize in pixels
            (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
            </summary>
        </member>
        <member name="P:Ext.Resizable.maxHeight">
            <summary>
            @cfg {Number} maxHeight The maximum height for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Resizable.maxWidth">
            <summary>
            @cfg {Number} maxWidth The maximum width for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Resizable.minHeight">
            <summary>
            @cfg {Number} minHeight The minimum height for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Resizable.minWidth">
            <summary>
            @cfg {Number} minWidth The minimum width for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Resizable.minX">
            <summary>
            @cfg {Number} minX The minimum x for the element (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Resizable.minY">
            <summary>
            @cfg {Number} minY The minimum x for the element (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Resizable.multiDirectional">
            <summary>
            @cfg {Boolean} multiDirectional <b>Deprecated</b>.  Deprecated style of adding multi-direction resize handles.
            </summary>
        </member>
        <member name="P:Ext.Resizable.pinned">
            <summary>
            @cfg {Boolean} pinned True to ensure that the resize handles are always visible, false to display them only when the
            user mouses over the resizable borders. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.preserveRatio">
            <summary>
            @cfg {Boolean} preserveRatio True to preserve the original ratio between height
            and width during resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.resizeChild">
            <summary>
            @cfg {Boolean/String/Element} resizeChild True to resize the first child, or id/element to resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.transparent">
            <summary>
            @cfg {Boolean} transparent True for transparent handles. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Resizable.width">
            <summary>
            @cfg {Number} width The width of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.Resizable.widthIncrement">
            <summary>
            @cfg {Number} widthIncrement The increment to snap the width resize in pixels
            (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.adjustments">
            <summary>
            String 'auto' or an array [width, height] with values to be <b>added</b> to the
            resize operation's new size (defaults to <tt>[0, 0]</tt>)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.animate">
            <summary>
            True to animate the resize (not compatible with dynamic sizing, defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.constrainTo">
            <summary>
            Constrain the resize to a particular element
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.disableTrackOver">
            <summary>
            True to disable mouse tracking. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.draggable">
            <summary>
            Convenience to initialize drag drop (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.duration">
            <summary>
            Animation duration if animate = true (defaults to 0.35)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.dynamic">
            <summary>
            True to resize the element while dragging instead of using a proxy (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.easing">
            <summary>
            Animation easing if animate = true (defaults to <tt>'easingOutStrong'</tt>)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.enabled">
            <summary>
            False to disable resizing (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.handleCls">
            <summary>
            A css class to add to each handle. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.handles">
            <summary>
            String consisting of the resize handles to display (defaults to undefined).
            Specify either <tt>'all'</tt> or any of <tt>'n s e w ne nw se sw'</tt>.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.height">
            <summary>
            The height of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.heightIncrement">
            <summary>
            The increment to snap the height resize in pixels
            (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.maxHeight">
            <summary>
            The maximum height for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.maxWidth">
            <summary>
            The maximum width for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.minHeight">
            <summary>
            The minimum height for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.minWidth">
            <summary>
            The minimum width for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.minX">
            <summary>
            The minimum x for the element (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.minY">
            <summary>
            The minimum x for the element (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.multiDirectional">
            <summary>
            <b>Deprecated</b>.  Deprecated style of adding multi-direction resize handles.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.pinned">
            <summary>
            True to ensure that the resize handles are always visible, false to display them only when the
            user mouses over the resizable borders. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.preserveRatio">
            <summary>
            True to preserve the original ratio between height
            and width during resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.resizeChild">
            <summary>
            True to resize the first child, or id/element to resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.resizeRegion">
            <summary>
            Constrain the resize to a particular region
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.transparent">
            <summary>
            True for transparent handles. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.width">
            <summary>
            The width of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.widthIncrement">
            <summary>
            The increment to snap the width resize in pixels
            (only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.
            </summary>
        </member>
        <member name="P:Ext.ResizableConfig.wrap">
            <summary>
            True to wrap an element with a div if needed (required for textareas and images, defaults to false)
            in favor of the handles config option (defaults to false)
            </summary>
        </member>
        <member name="T:Ext.Shadow">
            <summary>
            @class Ext.Shadow
            Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
            and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
            functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.
            @constructor
            Create a new Shadow
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.Shadow.hide">
            <summary>
            Hides this shadow
            </summary>
        </member>
        <member name="M:Ext.Shadow.isVisible">
            <summary>
            Returns true if the shadow is visible, else false
            </summary>
        </member>
        <member name="M:Ext.Shadow.realign(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Direct alignment when values are already available. Show must be called at least once before
            calling this method to ensure it is initialized.
            @param {Number} left The target element left position
            @param {Number} top The target element top position
            @param {Number} width The target element width
            @param {Number} height The target element height
            </summary>
        </member>
        <member name="M:Ext.Shadow.setZIndex(SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the z-index of this shadow
            @param {Number} zindex The new z-index
            </summary>
        </member>
        <member name="M:Ext.Shadow.#ctor(System.Object)">
            <summary>
            @class Ext.Shadow
            Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
            and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
            functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.
            @constructor
            Create a new Shadow
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.Shadow.show(System.Object)">
            <summary>
            Displays the shadow under the target element
            @param {Mixed} targetEl The id or element under which the shadow should display
            </summary>
        </member>
        <member name="P:Ext.Shadow.offset">
            <summary>
            @cfg {String} offset
            The number of pixels to offset the shadow from the element (defaults to <tt>4</tt>)
            </summary>
        </member>
        <member name="P:Ext.ShadowConfig.mode">
            <summary>
            The shadow display mode.  Supports the following options:<div class="mdetail-params"><ul>
            <li><b><tt>sides</tt></b> : Shadow displays on both sides and bottom only</li>
            <li><b><tt>frame</tt></b> : Shadow displays equally on all four sides</li>
            <li><b><tt>drop</tt></b> : Traditional bottom-right drop shadow</li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.ShadowConfig.offset">
            <summary>
            The number of pixels to offset the shadow from the element (defaults to <tt>4</tt>)
            </summary>
        </member>
        <member name="T:Ext.Spacer">
            <summary>
            @class Ext.Spacer
            @extends Ext.BoxComponent
            <p>Used to provide a sizable space in a layout.</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="P:Ext.Spacer.autoEl">
            <summary>
            @class Ext.Spacer
            @extends Ext.BoxComponent
            <p>Used to provide a sizable space in a layout.</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.SplitBar" -->
        <member name="M:Ext.SplitBar.createProxy(System.Object)">
            <summary>
            @private static Create our own proxy element element. So it will be the same same size on all browsers, we won't use borders. Instead we use a background color.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.SplitBar.#ctor(System.Object,System.Object,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)" -->
        <member name="M:Ext.SplitBar.AbsoluteLayoutAdapter.#ctor(System.Object)">
            <summary>
            *@class Ext.SplitBar.AbsoluteLayoutAdapter
            @extends Ext.SplitBar.BasicLayoutAdapter
            Adapter that  moves the splitter element to align with the resized sizing element.
            Used with an absolute positioned SplitBar.
            @param {Mixed} container The container that wraps around the absolute positioned content. If it's
            document.body, make sure you assign an id to the body element.
            </summary>
        </member>
        <member name="M:Ext.SplitBar.BasicLayoutAdapter.#ctor">
            <summary>
            @class Ext.SplitBar.BasicLayoutAdapter
            Default Adapter. It assumes the splitter and resizing element are not positioned
            elements and only gets/sets the width of the element. Generally used for table based layouts.
            </summary>
        </member>
        <member name="M:Ext.SplitBar.BasicLayoutAdapter.getElementSize(Ext.SplitBar)">
            <summary>
            Called before drag operations to get the current size of the resizing element.
            @param {Ext.SplitBar} s The SplitBar using this adapter
            </summary>
        </member>
        <member name="M:Ext.SplitBar.BasicLayoutAdapter.setElementSize(Ext.SplitBar,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Called after drag operations to set the size of the resizing element.
            @param {Ext.SplitBar} s The SplitBar using this adapter
            @param {Number} newSize The new size to set
            @param {Function} onComplete A function to be invoked when resizing is complete
            </summary>
        </member>
        <member name="T:Ext.StoreMgr">
            <summary>
            @class Ext.StoreMgr
            @extends Ext.util.MixedCollection
            The default global group of stores.
            @singleton
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.TabPanel" -->
        <member name="M:Ext.TabPanel.beginUpdate">
            <summary>
            Suspends any internal calculations or scrolling while doing a bulk operation. See {@link #endUpdate}
            </summary>
        </member>
        <member name="M:Ext.TabPanel.endUpdate">
            <summary>
            Resumes calculations and scrolling at the end of a bulk operation. See {@link #beginUpdate}
            </summary>
        </member>
        <member name="M:Ext.TabPanel.getActiveTab">
            <summary>
            Returns the Component which is the currently active tab. <b>Note that before the TabPanel
            first activates a child Component, this method will return whatever was configured in the
            {@link #activeTab} config option.</b>
            @return {BoxComponent} The currently active child Component if one <i>is</i> active, or the {@link #activeTab} config value.
            </summary>
        </member>
        <member name="M:Ext.TabPanel.getItem(SharpKit.JavaScript.JsString)">
            <summary>
            Gets the specified tab by id.
            @param {String} id The tab id
            @return {Panel} The tab
            </summary>
        </member>
        <member name="M:Ext.TabPanel.getTabEl(System.Object)">
            <summary>
            Gets the DOM element for the tab strip item which activates the child panel with the specified
            ID. Access this to change the visual treatment of the item, for example by changing the CSS class name.
            @param {Panel/Number/String} tab The tab component, or the tab's index, or the tabs id or itemId.
            @return {HTMLElement} The DOM node
            </summary>
        </member>
        <member name="M:Ext.TabPanel.getTemplateArgs(Ext.BoxComponent)">
            <summary>
            <p>Provides template arguments for rendering a tab selector item in the tab strip.</p>
            <p>This method returns an object hash containing properties used by the TabPanel's <tt>{@link #itemTpl}</tt>
            to create a formatted, clickable tab selector element. The properties which must be returned
            are:</p><div class="mdetail-params"><ul>
            <li><b>id</b> : String<div class="sub-desc">A unique identifier which links to the item</div></li>
            <li><b>text</b> : String<div class="sub-desc">The text to display</div></li>
            <li><b>cls</b> : String<div class="sub-desc">The CSS class name</div></li>
            <li><b>iconCls</b> : String<div class="sub-desc">A CSS class to provide appearance for an icon.</div></li>
            </ul></div>
            @param {Ext.BoxComponent} item The {@link Ext.BoxComponent BoxComponent} for which to create a selector element in the tab strip.
            @return {Object} An object hash containing the properties required to render the selector element.
            </summary>
        </member>
        <member name="M:Ext.TabPanel.hideTabStripItem(System.Object)">
            <summary>
            Hides the tab strip item for the passed tab
            @param {Number/String/Panel} item The tab index, id or item
            </summary>
        </member>
        <member name="M:Ext.TabPanel.readTabs(System.Boolean)">
            <summary>
            True to scan the markup in this tab panel for <tt>{@link #autoTabs}</tt> using the
            <tt>{@link #autoTabSelector}</tt>
            @param {Boolean} removeExisting True to remove existing tabs
            </summary>
        </member>
        <member name="M:Ext.TabPanel.scrollToTab(System.Object,System.Boolean)">
            <summary>
            Scrolls to a particular tab if tab scrolling is enabled
            @param {Panel} item The item to scroll to
            @param {Boolean} animate True to enable animations
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.TabPanel.setActiveTab(System.Object)" -->
        <member name="M:Ext.TabPanel.unhideTabStripItem(System.Object)">
            <summary>
            Unhides the tab strip item for the passed tab
            @param {Number/String/Panel} item The tab index, id or item
            </summary>
        </member>
        <member name="P:Ext.TabPanel.animScroll">
            <summary>
            @cfg {Boolean} animScroll True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults
            to <tt>true</tt>).  Only applies when <tt>{@link #enableTabScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.autoTabs">
            <summary>
            @cfg {Boolean} autoTabs
            <p><tt>true</tt> to query the DOM for any divs with a class of 'x-tab' to be automatically converted
            to tabs and added to this panel (defaults to <tt>false</tt>).  Note that the query will be executed within
            the scope of the container element only (so that multiple tab panels from markup can be supported via this
            method).</p>
            <p>This method is only possible when the markup is structured correctly as a container with nested divs
            containing the class <tt>'x-tab'</tt>. To create TabPanels without these limitations, or to pull tab content
            from other elements on the page, see the example at the top of the class for generating tabs from markup.</p>
            <p>There are a couple of things to note when using this method:<ul>
            <li>When using the <tt>autoTabs</tt> config (as opposed to passing individual tab configs in the TabPanel's
            {@link #items} collection), you must use <tt>{@link #applyTo}</tt> to correctly use the specified <tt>id</tt>
            as the tab container. The <tt>autoTabs</tt> method <em>replaces</em> existing content with the TabPanel
            components.</li>
            <li>Make sure that you set <tt>{@link #deferredRender}: false</tt> so that the content elements for each
            tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed
            until each tab is activated and will be visible outside the TabPanel.</li>
            </ul>Example usage:</p>
            <pre><code>
            var tabs = new Ext.TabPanel({
            applyTo: 'my-tabs',
            activeTab: 0,
            deferredRender: false,
            autoTabs: true
            });
            // This markup will be converted to a TabPanel from the code above
            &lt;div id="my-tabs">
            &lt;div class="x-tab" title="Tab 1">A simple tab&lt;/div>
            &lt;div class="x-tab" title="Tab 2">Another one&lt;/div>
            &lt;/div>
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.TabPanel.autoTabSelector">
            <summary>
            @cfg {String} autoTabSelector The CSS selector used to search for tabs in existing markup when
            <tt>{@link #autoTabs} = true</tt> (defaults to <tt>'div.x-tab'</tt>).  This can be any valid selector
            supported by {@link Ext.DomQuery#select}. Note that the query will be executed within the scope of this
            tab panel only (so that multiple tab panels from markup can be supported on a page).
            </summary>
        </member>
        <member name="P:Ext.TabPanel.baseCls">
            <summary>
            @cfg {String} baseCls The base CSS class applied to the panel (defaults to <tt>'x-tab-panel'</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.TabPanel.deferredRender" -->
        <member name="P:Ext.TabPanel.enableTabScroll">
            <summary>
            @cfg {Boolean} enableTabScroll True to enable scrolling to tabs that may be invisible due to overflowing the
            overall TabPanel width. Only available with tabPosition:'top' (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.TabPanel.idDelimiter">
            <summary>
            This is a protected property used when concatenating tab ids to the TabPanel id for internal uniqueness.
            It does not generally need to be changed, but can be if external code also uses an id scheme that can
            potentially clash with this one.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.minTabWidth">
            <summary>
            @cfg {Number} minTabWidth The minimum width in pixels for each tab when {@link #resizeTabs} = true (defaults to 30).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.TabPanel.plain" -->
        <member name="P:Ext.TabPanel.resizeTabs">
            <summary>
            @cfg {Boolean} resizeTabs True to automatically resize each tab so that the tabs will completely fill the
            tab strip (defaults to false).  Setting this to true may cause specific widths that might be set per tab to
            be overridden in order to fit them all into view (although {@link #minTabWidth} will always be honored).
            </summary>
        </member>
        <member name="P:Ext.TabPanel.scrollDuration">
            <summary>
            @cfg {Float} scrollDuration The number of milliseconds that each scroll animation should last (defaults
            to <tt>.35</tt>). Only applies when <tt>{@link #animScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.scrollIncrement">
            <summary>
            @cfg {Number} scrollIncrement The number of pixels to scroll each time a tab scroll button is pressed
            (defaults to <tt>100</tt>, or if <tt>{@link #resizeTabs} = true</tt>, the calculated tab width).  Only
            applies when <tt>{@link #enableTabScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.scrollRepeatInterval">
            <summary>
            @cfg {Number} scrollRepeatInterval Number of milliseconds between each scroll while a tab scroll button is
            continuously pressed (defaults to <tt>400</tt>).
            </summary>
        </member>
        <member name="P:Ext.TabPanel.tabMargin">
            <summary>
            @cfg {Number} tabMargin The number of pixels of space to calculate into the sizing and scrolling of
            tabs. If you change the margin in CSS, you will need to update this value so calculations are correct
            with either <tt>{@link #resizeTabs}</tt> or scrolling tabs. (defaults to <tt>2</tt>)
            </summary>
        </member>
        <member name="P:Ext.TabPanel.tabPosition">
            <summary>
            @cfg {String} tabPosition The position where the tab strip should be rendered (defaults to <tt>'top'</tt>).
            The only other supported value is <tt>'bottom'</tt>.  <b>Note</b>: tab scrolling is only supported for
            <tt>tabPosition: 'top'</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.tabWidth">
            <summary>
            @cfg {Number} tabWidth The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.TabPanel.wheelIncrement">
            <summary>
            @cfg {Number} wheelIncrement For scrolling tabs, the number of pixels to increment on mouse wheel
            scrolling (defaults to <tt>20</tt>).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.activeTab">
            <summary>
            A string id or the numeric index of the tab that should be initially
            activated on render (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.animScroll">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults
            to <tt>true</tt>).  Only applies when <tt>{@link #enableTabScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.autoTabs">
            <summary>
            <p><tt>true</tt> to query the DOM for any divs with a class of 'x-tab' to be automatically converted
            to tabs and added to this panel (defaults to <tt>false</tt>).  Note that the query will be executed within
            the scope of the container element only (so that multiple tab panels from markup can be supported via this
            method).</p>
            <p>This method is only possible when the markup is structured correctly as a container with nested divs
            containing the class <tt>'x-tab'</tt>. To create TabPanels without these limitations, or to pull tab content
            from other elements on the page, see the example at the top of the class for generating tabs from markup.</p>
            <p>There are a couple of things to note when using this method:<ul>
            <li>When using the <tt>autoTabs</tt> config (as opposed to passing individual tab configs in the TabPanel's
            {@link #items} collection), you must use <tt>{@link #applyTo}</tt> to correctly use the specified <tt>id</tt>
            as the tab container. The <tt>autoTabs</tt> method <em>replaces</em> existing content with the TabPanel
            components.</li>
            <li>Make sure that you set <tt>{@link #deferredRender}: false</tt> so that the content elements for each
            tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed
            until each tab is activated and will be visible outside the TabPanel.</li>
            </ul>Example usage:</p>
            <pre><code>
            var tabs = new Ext.TabPanel({
            applyTo: 'my-tabs',
            activeTab: 0,
            deferredRender: false,
            autoTabs: true
            });
            // This markup will be converted to a TabPanel from the code above
            &lt;div id="my-tabs">
            &lt;div class="x-tab" title="Tab 1">A simple tab&lt;/div>
            &lt;div class="x-tab" title="Tab 2">Another one&lt;/div>
            &lt;/div>
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.autoTabSelector">
            <summary>
            The CSS selector used to search for tabs in existing markup when
            <tt>{@link #autoTabs} = true</tt> (defaults to <tt>'div.x-tab'</tt>).  This can be any valid selector
            supported by {@link Ext.DomQuery#select}. Note that the query will be executed within the scope of this
            tab panel only (so that multiple tab panels from markup can be supported on a page).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.baseCls">
            <summary>
            The base CSS class applied to the panel (defaults to <tt>'x-tab-panel'</tt>).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.collapsed">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.collapsible">
            <summary>
            @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.TabPanelConfig.deferredRender" -->
        <member name="P:Ext.TabPanelConfig.enableTabScroll">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the
            overall TabPanel width. Only available with tabPosition:'top' (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.header">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.headerAsText">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.hideCollapseTool">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.itemTpl">
            <summary>
            <p>(Optional) A {@link Ext.Template Template} or
            {@link Ext.XTemplate XTemplate} which may be provided to process the data object returned from
            <tt>{@link #getTemplateArgs}</tt> to produce a clickable selector element in the tab strip.</p>
            <p>The main element created should be a <tt>&lt;li></tt> element. In order for a click event on
            a selector element to be connected to its item, it must take its <i>id</i> from the TabPanel's
            native <tt>{@link #getTemplateArgs}</tt>.</p>
            <p>The child element which contains the title text must be marked by the CSS class
            <tt>x-tab-strip-inner</tt>.</p>
            <p>To enable closability, the created element should contain an element marked by the CSS class
            <tt>x-tab-strip-close</tt>.</p>
            <p>If a custom <tt>itemTpl</tt> is supplied, it is the developer's responsibility to create CSS
            style rules to create the desired appearance.</p>
            Below is an example of how to create customized tab selector items:<pre><code>
            new Ext.TabPanel({
            renderTo: document.body,
            minTabWidth: 115,
            tabWidth: 135,
            enableTabScroll: true,
            width: 600,
            height: 250,
            defaults: {autoScroll:true},
            itemTpl: new Ext.XTemplate(
            '&lt;li class="{cls}" id="{id}" style="overflow:hidden">',
            '&lt;tpl if="closable">',
            '&lt;a class="x-tab-strip-close">&lt;/a>',
            '&lt;/tpl>',
            '&lt;a class="x-tab-right" href="#" style="padding-left:6px">',
            '&lt;em class="x-tab-left">',
            '&lt;span class="x-tab-strip-inner">',
            '&lt;img src="{src}" style="float:left;margin:3px 3px 0 0">',
            '&lt;span style="margin-left:20px" class="x-tab-strip-text {iconCls}">{text} {extra}&lt;/span>',
            '&lt;/span>',
            '&lt;/em>',
            '&lt;/a>',
            '&lt;/li>'
            ),
            getTemplateArgs: function(item) {
            //      Call the native method to collect the base data. Like the ID!
            var result = Ext.TabPanel.prototype.getTemplateArgs.call(this, item);
            //      Add stuff used in our template
            return Ext.apply(result, {
            closable: item.closable,
            src: item.iconSrc,
            extra: item.extraText || ''
            });
            },
            items: [{
            title: 'New Tab 1',
            iconSrc: '../shared/icons/fam/grid.png',
            html: 'Tab Body 1',
            closable: true
            }, {
            title: 'New Tab 2',
            iconSrc: '../shared/icons/fam/grid.png',
            html: 'Tab Body 2',
            extraText: 'Extra stuff in the tab button'
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.layout">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.layoutConfig">
            <summary>
            TabPanel implicitly uses {@link Ext.layout.CardLayout} as its layout manager.
            <code>layoutConfig</code> may be used to configure this layout manager.
            <code>{@link #deferredRender}</code> and <code>{@link #layoutOnTabChange}</code>
            configured on the TabPanel will be applied as configs to the layout manager.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.layoutOnTabChange">
            <summary>
            Set to true to force a layout of the active tab when the tab is changed. Defaults to false.
            See {@link Ext.layout.CardLayout}.<code>{@link Ext.layout.CardLayout#layoutOnCardChange layoutOnCardChange}</code>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.minTabWidth">
            <summary>
            The minimum width in pixels for each tab when {@link #resizeTabs} = true (defaults to 30).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.TabPanelConfig.plain" -->
        <member name="P:Ext.TabPanelConfig.preventBodyReset">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.resizeTabs">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the
            tab strip (defaults to false).  Setting this to true may cause specific widths that might be set per tab to
            be overridden in order to fit them all into view (although {@link #minTabWidth} will always be honored).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.scrollDuration">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults
            to <tt>.35</tt>). Only applies when <tt>{@link #animScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.scrollIncrement">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed
            (defaults to <tt>100</tt>, or if <tt>{@link #resizeTabs} = true</tt>, the calculated tab width).  Only
            applies when <tt>{@link #enableTabScroll} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.scrollRepeatInterval">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is
            continuously pressed (defaults to <tt>400</tt>).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tabCls">
            <summary>
            <b>This config option is used on <u>child Components</u> of ths TabPanel.</b> A CSS
            class name applied to the tab strip item representing the child Component, allowing special
            styling to be applied.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tabMargin">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of
            tabs. If you change the margin in CSS, you will need to update this value so calculations are correct
            with either <tt>{@link #resizeTabs}</tt> or scrolling tabs. (defaults to <tt>2</tt>)
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to <tt>'top'</tt>).
            The only other supported value is <tt>'bottom'</tt>.  <b>Note</b>: tab scrolling is only supported for
            <tt>tabPosition: 'top'</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.titleCollapse">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tools">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.toolTemplate">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.wheelIncrement">
            <summary>
            For scrolling tabs, the number of pixels to increment on mouse wheel
            scrolling (defaults to <tt>20</tt>).
            </summary>
        </member>
        <member name="T:Ext.Template">
            <summary>
            @class Ext.Template
            <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
            for greater performance.</p>
            <p>For example usage {@link #Template see the constructor}.</p>
            *
            @constructor
            An instance of this class may be created by passing to the constructor either
            a single argument, or multiple arguments:
            <div class="mdetail-params"><ul>
            <li><b>single argument</b> : String/Array
            <div class="sub-desc">
            The single argument may be either a String or an Array:<ul>
            <li><tt>String</tt> : </li><pre><code>
            var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
            t.{@link #append}('some-element', ['foo']);
            </code></pre>
            <li><tt>Array</tt> : </li>
            An Array will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template([
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
            '&lt;/div&gt;',
            ]);
            t.{@link #compile}();
            t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
            </code></pre>
            </ul></div></li>
            <li><b>multiple arguments</b> : String, Object, Array, ...
            <div class="sub-desc">
            Multiple arguments will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template(
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
            '&lt;/div&gt;',
            // a configuration object:
            {
            compiled: true,      // {@link #compile} immediately
            disableFormats: true // See Notes below.
            }
            );
            </code></pre>
            <p><b>Notes</b>:</p>
            <div class="mdetail-params"><ul>
            <li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
            <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
            <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
            when no formatting is required.</li>
            </ul></div>
            </div></li>
            </ul></div>
            @param {Mixed} config
            </summary>
        </member>
        <member name="M:Ext.Template.append(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied <code>values</code> to the template and appends
            the new node(s) to the specified <code>el</code>.
            <p>For example usage {@link #Template see the constructor}.</p>
            @param {Mixed} el The context element
            @param {Object/Array} values
            The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
            or an object (i.e. <code>{foo: 'bar'}</code>).
            @param {Boolean} returnElement (optional) true to return an Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.applyTemplate(System.Object)">
            <summary>
            Returns an HTML fragment of this template with the specified <code>values</code> applied.
            @param {Object/Array} values
            The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
            or an object (i.e. <code>{foo: 'bar'}</code>).
            @return {String} The HTML fragment
            </summary>
        </member>
        <member name="M:Ext.Template.compile">
            <summary>
            Compiles the template into an internal function, eliminating the RegEx overhead.
            @return {Ext.Template} this
            </summary>
        </member>
        <member name="M:Ext.Template.from(System.Object,System.Object)">
            <summary>
            Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
            @param {String/HTMLElement} el A DOM element or its id
            @param {Object} config A configuration object
            @return {Ext.Template} The created template
            @static
            </summary>
        </member>
        <member name="M:Ext.Template.insertAfter(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.insertBefore(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.insertFirst(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.overwrite(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.set(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Sets the HTML used as the template and optionally compiles it.
            @param {String} html
            @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
            @return {Ext.Template} this
            </summary>
        </member>
        <member name="M:Ext.Template.#ctor(System.Object)">
            <summary>
            @class Ext.Template
            <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
            for greater performance.</p>
            <p>For example usage {@link #Template see the constructor}.</p>
            *
            @constructor
            An instance of this class may be created by passing to the constructor either
            a single argument, or multiple arguments:
            <div class="mdetail-params"><ul>
            <li><b>single argument</b> : String/Array
            <div class="sub-desc">
            The single argument may be either a String or an Array:<ul>
            <li><tt>String</tt> : </li><pre><code>
            var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
            t.{@link #append}('some-element', ['foo']);
            </code></pre>
            <li><tt>Array</tt> : </li>
            An Array will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template([
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
            '&lt;/div&gt;',
            ]);
            t.{@link #compile}();
            t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
            </code></pre>
            </ul></div></li>
            <li><b>multiple arguments</b> : String, Object, Array, ...
            <div class="sub-desc">
            Multiple arguments will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template(
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
            '&lt;/div&gt;',
            // a configuration object:
            {
            compiled: true,      // {@link #compile} immediately
            disableFormats: true // See Notes below.
            }
            );
            </code></pre>
            <p><b>Notes</b>:</p>
            <div class="mdetail-params"><ul>
            <li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
            <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
            <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
            when no formatting is required.</li>
            </ul></div>
            </div></li>
            </ul></div>
            @param {Mixed} config
            </summary>
        </member>
        <member name="P:Ext.Template.re">
            <summary>
            @cfg {RegExp} re The regular expression used to match template variables.
            Defaults to:<pre><code>
            re : /\{([\w-]+)\}/g                                     // for Ext Core
            re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g      // for Ext JS
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.TemplateConfig.re">
            <summary>
            The regular expression used to match template variables.
            Defaults to:<pre><code>
            re : /\{([\w-]+)\}/g                                     // for Ext Core
            re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g      // for Ext JS
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.TipConfig.closable">
            <summary>
            True to render a close tool button into the tooltip header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.TipConfig.maxWidth">
            <summary>
            The maximum width of the tip in pixels (defaults to 300).  The maximum supported value is 500.
            </summary>
        </member>
        <member name="P:Ext.TipConfig.minWidth">
            <summary>
            The minimum width of the tip in pixels (defaults to 40).
            </summary>
        </member>
        <member name="P:Ext.TipConfig.shadow">
            <summary>
            True or "sides" for the default effect, "frame" for 4-way shadow, and "drop"
            for bottom-right shadow (defaults to "sides").
            </summary>
        </member>
        <member name="P:Ext.TipConfig.width">
            <summary>
            Width in pixels of the tip (defaults to auto).  Width will be ignored if it exceeds the bounds of
            {@link #minWidth} or {@link #maxWidth}.  The maximum supported value is 500.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.anchorOffset">
            <summary>
            A numeric pixel value used to offset the
            default position of the anchor arrow (defaults to 0).  When the anchor
            position is on the top or bottom of the tooltip, <code>anchorOffset</code>
            will be used as a horizontal offset.  Likewise, when the anchor position
            is on the left or right side, <code>anchorOffset</code> will be used as
            a vertical offset.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.anchorToTarget">
            <summary>
            True to anchor the tooltip to the target
            element, false to anchor it relative to the mouse coordinates (defaults
            to true).  When <code>anchorToTarget</code> is true, use
            <code>{@link #defaultAlign}</code> to control tooltip alignment to the
            target element.  When <code>anchorToTarget</code> is false, use
            <code>{@link #anchorPosition}</code> instead to control alignment.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.autoHide">
            <summary>
            True to automatically hide the tooltip after the
            mouse exits the target element or after the <code>{@link #dismissDelay}</code>
            has expired if set (defaults to true).  If <code>{@link closable} = true</code>
            a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.delegate">
            <summary>
            <p>Optional. A {@link Ext.DomQuery DomQuery}
            selector which allows selection of individual elements within the
            <code>{@link #target}</code> element to trigger showing and hiding the
            ToolTip as the mouse moves within the target.</p>
            <p>When specified, the child element of the target which caused a show
            event is placed into the <code>{@link #triggerElement}</code> property
            before the ToolTip is shown.</p>
            <p>This may be useful when a Component has regular, repeating elements
            in it, each of which need a Tooltip which contains information specific
            to that element. For example:</p><pre><code>
            var myGrid = new Ext.grid.gridPanel(gridConfig);
            myGrid.on('render', function(grid) {
            var store = grid.getStore();  // Capture the Store.
            var view = grid.getView();    // Capture the GridView.
            myGrid.tip = new Ext.ToolTip({
            target: view.mainBody,    // The overall target element.
            delegate: '.x-grid3-row', // Each grid row causes its own seperate show and hide.
            trackMouse: true,         // Moving within the row should not hide the tip.
            renderTo: document.body,  // Render immediately so that tip.body can be
            //  referenced prior to the first show.
            listeners: {              // Change content dynamically depending on which element
            //  triggered the show.
            beforeshow: function updateTipBody(tip) {
            var rowIndex = view.findRowIndex(tip.triggerElement);
            tip.body.dom.innerHTML = 'Over Record ID ' + store.getAt(rowIndex).id;
            }
            }
            });
            });
            *</code></pre>
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.dismissDelay">
            <summary>
            Delay in milliseconds before the tooltip
            automatically hides (defaults to 5000). To disable automatic hiding, set
            dismissDelay = 0.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.hideDelay">
            <summary>
            Delay in milliseconds after the mouse exits the
            target element but before the tooltip actually hides (defaults to 200).
            Set to 0 for the tooltip to hide immediately.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.mouseOffset">
            <summary>
            An XY offset from the mouse position where the
            tooltip should be shown (defaults to [15,18]).
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.showDelay">
            <summary>
            Delay in milliseconds before the tooltip displays
            after the mouse enters the target element (defaults to 500)
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.target">
            <summary>
            The target HTMLElement, Ext.Element or id to monitor
            for mouseover events to trigger showing this ToolTip.
            </summary>
        </member>
        <member name="P:Ext.ToolTipConfig.trackMouse">
            <summary>
            True to have the tooltip follow the mouse as it
            moves over the target element (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Updater.updateElement(System.Object,SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Static convenience method. <b>This method is deprecated in favor of el.load({url:'foo.php', ...})</b>.
            Usage:
            <pre><code>Ext.Updater.updateElement("my-div", "stuff.php");</code></pre>
            @param {Mixed} el The element to update
            @param {String} url The url
            @param {String/Object} params (optional) Url encoded param string or an object of name/value pairs
            @param {Object} options (optional) A config object with any of the Updater properties you want to set - for
            example: {disableCaching:true, indicatorText: "Loading data..."}
            @static
            @deprecated
            @member Ext.Updater
            </summary>
        </member>
        <member name="M:Ext.Updater.BasicRenderer.#ctor">
            <summary>
            @class Ext.Updater.BasicRenderer
            <p>This class is a base class implementing a simple render method which updates an element using results from an Ajax request.</p>
            <p>The BasicRenderer updates the element's innerHTML with the responseText. To perform a custom render (i.e. XML or JSON processing),
            create an object with a conforming {@link #render} method and pass it to setRenderer on the Updater.</p>
            </summary>
        </member>
        <member name="M:Ext.Updater.BasicRenderer.render(Ext.Element,System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            This method is called when an Ajax response is received, and an Element needs updating.
            @param {Ext.Element} el The element being rendered
            @param {Object} xhr The XMLHttpRequest object
            @param {Updater} updateManager The calling update manager
            @param {Function} callback A callback that will need to be called if loadScripts is true on the Updater
            </summary>
        </member>
        <member name="P:Ext.Updater.defaults.disableCaching">
            <summary>
            True to append a unique parameter to GET requests to disable caching (defaults to false).
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Updater.defaults.indicatorText">
            <summary>
            Text for loading indicator (defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').
            @type String
            </summary>
        </member>
        <member name="P:Ext.Updater.defaults.loadScripts">
            <summary>
            True to process scripts by default (defaults to false).
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Updater.defaults.showLoadIndicator">
            <summary>
            Whether or not to show {@link #indicatorText} during loading (defaults to true).
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Updater.defaults.timeout">
            <summary>
            Timeout for requests or form posts in seconds (defaults to 30 seconds).
            @type Number
            </summary>
        </member>
        <member name="T:Ext.Viewport">
            <summary>
            @class Ext.Viewport
            @extends Ext.Container
            <p>A specialized container representing the viewable application area (the browser viewport).</p>
            <p>The Viewport renders itself to the document body, and automatically sizes itself to the size of
            the browser viewport and manages window resizing. There may only be one Viewport created
            in a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s
            added to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}
            method of any of its child Panels may themselves have a layout.</p>
            <p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide
            for scrolling if needed using the {@link #autoScroll} config.</p>
            <p>An example showing a classic application border layout:</p><pre><code>
            new Ext.Viewport({
            layout: 'border',
            items: [{
            region: 'north',
            html: '&lt;h1 class="x-panel-header">Page Title&lt;/h1>',
            autoHeight: true,
            border: false,
            margins: '0 0 5 0'
            }, {
            region: 'west',
            collapsible: true,
            title: 'Navigation',
            width: 200
            // the west region might typically utilize a {@link Ext.tree.TreePanel TreePanel} or a Panel with {@link Ext.layout.AccordionLayout Accordion layout}
            }, {
            region: 'south',
            title: 'Title for Panel',
            collapsible: true,
            html: 'Information goes here',
            split: true,
            height: 100,
            minHeight: 100
            }, {
            region: 'east',
            title: 'Title for the Grid Panel',
            collapsible: true,
            split: true,
            width: 200,
            xtype: 'grid',
            // remaining grid configuration not shown ...
            // notice that the GridPanel is added directly as the region
            // it is not "overnested" inside another Panel
            }, {
            region: 'center',
            xtype: 'tabpanel', // TabPanel itself has no title
            items: {
            title: 'Default Tab',
            html: 'The first tab\'s content. Others may be added dynamically'
            }
            }]
            });
            </code></pre>
            @constructor
            Create a new Viewport
            @param {Object} config The config object
            @xtype viewport
            </summary>
        </member>
        <member name="M:Ext.Viewport.initComponent">
            <summary>
            @cfg {Boolean} monitorResize @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.allowDomMove">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.applyTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.autoHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.deferHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.height">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.renderTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.ViewportConfig.width">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.Window">
            <summary>
            @class Ext.Window
            @extends Ext.Panel
            <p>A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and
            {@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,
            restored to their prior size, and can be {@link #minimize}d.</p>
            <p>Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide
            grouping, activation, to front, to back and other application-specific behavior.</p>
            <p>By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element
            specify {@link Ext.Component#renderTo renderTo}.</p>
            <p><b>Note:</b> By default, the <code>{@link #closable close}</code> header tool <i>destroys</i> the Window resulting in
            destruction of any child Components. This makes the Window object, and all its descendants <b>unusable</b>. To enable
            re-use of a Window, use <b><code>{@link #closeAction closeAction: 'hide'}</code></b>.</p>
            @constructor
            @param {Object} config The config object
            @xtype window
            </summary>
        </member>
        <member name="M:Ext.Window.alignTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Aligns the window to the specified element
            @param {Mixed} element The element to align to.
            @param {String} position (optional, defaults to "tl-bl?") The position to align to (see {@link Ext.Element#alignTo} for more details).
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.anchorTo(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            @param {Mixed} element The element to align to.
            @param {String} position The position to align to (see {@link Ext.Element#alignTo} for more details)
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @param {Boolean/Number} monitorScroll (optional) true to monitor body scroll and reposition. If this parameter
            is a number, it is used as the buffer delay (defaults to 50ms).
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.center">
            <summary>
            Centers this window in the viewport
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.clearAnchor">
            <summary>
            Removes any existing anchor from this window. See {@link #anchorTo}.
            @return {Ext.Window} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Window.close" -->
        <member name="M:Ext.Window.doAnchor">
            <summary>
            Performs the anchor, using the saved anchorTarget property.
            @return {Ext.Window} this
            @private
            </summary>
        </member>
        <member name="M:Ext.Window.focus">
            <summary>
            Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
            window itself will receive focus.
            </summary>
        </member>
        <member name="M:Ext.Window.hide(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            @param {String/Element} animateTarget (optional) The target element or id to which the window should
            animate while hiding (defaults to null with no animation)
            @param {Function} callback (optional) A callback function to call after the window is hidden
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this Window.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.maximize">
            <summary>
            Fits the window within its current container and automatically replaces
            the {@link #maximizable 'maximize' tool button} with the 'restore' tool button.
            Also see {@link #toggleMaximize}.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.minimize">
            <summary>
            Placeholder method for minimizing the window.  By default, this method simply fires the {@link #minimize} event
            since the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,
            either the minimize event can be handled or this method can be overridden.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.restore">
            <summary>
            Restores a {@link #maximizable maximized}  window back to its original
            size and position prior to being maximized and also replaces
            the 'restore' tool button with the 'maximize' tool button.
            Also see {@link #toggleMaximize}.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.setActive(System.Boolean)">
            <summary>
            Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
            fires the {@link #activate} or {@link #deactivate} event depending on which action occurred. This method is
            called internally by {@link Ext.WindowMgr}.
            @param {Boolean} active True to activate the window, false to deactivate it (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Window.setAnimateTarget(System.Object)">
            <summary>
            Sets the target element from which the window should animate while opening.
            @param {String/Element} el The target element or id
            </summary>
        </member>
        <member name="M:Ext.Window.show(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            @param {String/Element} animateTarget (optional) The target element or id from which the window should
            animate while opening (defaults to null with no animation)
            @param {Function} callback (optional) A callback function to call after the window is displayed
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this Window.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.toBack">
            <summary>
            Sends this window to the back of (lower z-index than) any other visible windows
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.toFront(System.Boolean)">
            <summary>
            Brings this window to the front of any other visible windows
            @param {Boolean} e (optional) Specify <tt>false</tt> to prevent the window from being focused.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="M:Ext.Window.toggleMaximize">
            <summary>
            A shortcut method for toggling between {@link #maximize} and {@link #restore} based on the current maximized
            state of the window.
            @return {Ext.Window} this
            </summary>
        </member>
        <member name="P:Ext.Window.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to this panel's element (defaults to 'x-window').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Window.closable" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.Window.closeAction" -->
        <member name="P:Ext.Window.constrain">
            <summary>
            @cfg {Boolean} constrain
            True to constrain the window within its containing element, false to allow it to fall outside of its
            containing element. By default the window will be rendered to document.body.  To render and constrain the
            window within another element specify {@link #renderTo}.
            (defaults to false).  Optionally the header only can be constrained using {@link #constrainHeader}.
            </summary>
        </member>
        <member name="P:Ext.Window.constrainHeader">
            <summary>
            @cfg {Boolean} constrainHeader
            True to constrain the window header within its containing element (allowing the window body to fall outside
            of its containing element) or false to allow the header to fall outside its containing element (defaults to
            false). Optionally the entire window can be constrained using {@link #constrain}.
            </summary>
        </member>
        <member name="P:Ext.Window.draggable">
            <summary>
            @cfg {Boolean} draggable
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true).  Note
            that by default the window will be centered in the viewport, so if dragging is disabled the window may need
            to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
            </summary>
        </member>
        <member name="P:Ext.Window.elements">
            <summary>
            * @cfg {String} elements @hide
            </summary>
        </member>
        <member name="P:Ext.Window.expandOnShow">
            <summary>
            @cfg {Boolean} expandOnShow
            True to always expand the window when it is displayed, false to keep it in its current state (which may be
            {@link #collapsed}) when displayed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Window.floating">
            <summary>
            * @cfg {Boolean} floating @hide
            </summary>
        </member>
        <member name="P:Ext.Window.frame">
            <summary>
            * @cfg {Boolean} frame @hide
            </summary>
        </member>
        <member name="P:Ext.Window.hidden">
            <summary>
            @cfg {Boolean} hidden
            Render this component hidden (default is <tt>true</tt>). If <tt>true</tt>, the
            {@link #hide} method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.Window.hideAnimDuration">
            <summary>
            @cfg {Number} hideAnimDuration The number of seconds that the window hide animation takes if enabled.
            Defaults to 0.25
            </summary>
        </member>
        <member name="P:Ext.Window.maximizable">
            <summary>
            @cfg {Boolean} maximizable
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
            and disallow maximizing the window (defaults to false).  Note that when a window is maximized, the tool button
            will automatically change to a 'restore' button with the appropriate behavior already built-in that will
            restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.Window.minHeight">
            <summary>
            @cfg {Number} minHeight
            The minimum height in pixels allowed for this window (defaults to 100).  Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.Window.minimizable">
            <summary>
            @cfg {Boolean} minimizable
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
            and disallow minimizing the window (defaults to false).  Note that this button provides no implementation --
            the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a
            custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="P:Ext.Window.minWidth">
            <summary>
            @cfg {Number} minWidth
            The minimum width in pixels allowed for this window (defaults to 200).  Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.Window.plain">
            <summary>
            @cfg {Boolean} plain
            True to render the window body with a transparent background so that it will blend into the framing
            elements, false to add a lighter background color to visually highlight the body element and separate it
            more distinctly from the surrounding frame (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Window.resizable">
            <summary>
            @cfg {Boolean} resizable
            True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Window.showAnimDuration">
            <summary>
            @cfg {Number} showAnimDuration The number of seconds that the window show animation takes if enabled.
            Defaults to 0.25
            </summary>
        </member>
        <member name="T:Ext.dd.DD">
            <summary>
            @class Ext.dd.DD
            A DragDrop implementation where the linked element follows the
            mouse cursor during a drag.
            @extends Ext.dd.DragDrop
            @constructor
            @param {String} id the id of the linked element
            @param {String} sGroup the group of related DragDrop items
            @param {object} config an object containing configurable attributes
            Valid properties for DD:
            scroll
            </summary>
        </member>
        <member name="M:Ext.dd.DD.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            @class Ext.dd.DD
            A DragDrop implementation where the linked element follows the
            mouse cursor during a drag.
            @extends Ext.dd.DragDrop
            @constructor
            @param {String} id the id of the linked element
            @param {String} sGroup the group of related DragDrop items
            @param {object} config an object containing configurable attributes
            Valid properties for DD:
            scroll
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.animateTarget">
            <summary>
            Id or element from which the window should animate while opening (defaults to null with no animation).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.baseCls">
            <summary>
            The base CSS class to apply to this panel's element (defaults to 'x-window').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.WindowConfig.closable" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.WindowConfig.closeAction" -->
        <member name="P:Ext.WindowConfig.collapsed">
            <summary>
            True to render the window collapsed, false to render it expanded (defaults to false). Note that if
            {@link #expandOnShow} is true (the default) it will override the <tt>collapsed</tt> config and the window
            will always be expanded when shown.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.constrain">
            <summary>
            True to constrain the window within its containing element, false to allow it to fall outside of its
            containing element. By default the window will be rendered to document.body.  To render and constrain the
            window within another element specify {@link #renderTo}.
            (defaults to false).  Optionally the header only can be constrained using {@link #constrainHeader}.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.constrainHeader">
            <summary>
            True to constrain the window header within its containing element (allowing the window body to fall outside
            of its containing element) or false to allow the header to fall outside its containing element (defaults to
            false). Optionally the entire window can be constrained using {@link #constrain}.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.defaultButton">
            <summary>
            <p>Specifies a Component to receive focus when this Window is focussed.</p>
            <p>This may be one of:</p><div class="mdetail-params"><ul>
            <li>The index of a footer Button.</li>
            <li>The id of a Component.</li>
            <li>A Component.</li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.draggable">
            <summary>
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true).  Note
            that by default the window will be centered in the viewport, so if dragging is disabled the window may need
            to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.expandOnShow">
            <summary>
            True to always expand the window when it is displayed, false to keep it in its current state (which may be
            {@link #collapsed}) when displayed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.hidden">
            <summary>
            Render this component hidden (default is <tt>true</tt>). If <tt>true</tt>, the
            {@link #hide} method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.hideAnimDuration">
            <summary>
            The number of seconds that the window hide animation takes if enabled.
            Defaults to 0.25
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.initHidden">
            <summary>
            True to hide the window until show() is explicitly called (defaults to true).
            @deprecated
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.manager">
            <summary>
            A reference to the WindowGroup that should manage this window (defaults to {@link Ext.WindowMgr}).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
            and disallow maximizing the window (defaults to false).  Note that when a window is maximized, the tool button
            will automatically change to a 'restore' button with the appropriate behavior already built-in that will
            restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.maximized">
            <summary>
            True to initially display the window in a maximized state. (Defaults to false).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.minHeight">
            <summary>
            The minimum height in pixels allowed for this window (defaults to 100).  Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
            and disallow minimizing the window (defaults to false).  Note that this button provides no implementation --
            the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a
            custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.minWidth">
            <summary>
            The minimum width in pixels allowed for this window (defaults to 200).  Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.modal">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without
            restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.onEsc">
            <summary>
            Allows override of the built-in processing for the escape key. Default action
            is to close the Window (performing whatever action is specified in {@link #closeAction}.
            To prevent the Window closing when the escape key is pressed, specify this as
            Ext.emptyFn (See {@link Ext#emptyFn}).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.plain">
            <summary>
            True to render the window body with a transparent background so that it will blend into the framing
            elements, false to add a lighter background color to visually highlight the body element and separate it
            more distinctly from the surrounding frame (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.resizable">
            <summary>
            True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.resizeHandles">
            <summary>
            A valid {@link Ext.Resizable} handles config string (defaults to 'all').  Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.showAnimDuration">
            <summary>
            The number of seconds that the window show animation takes if enabled.
            Defaults to 0.25
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.x">
            <summary>
            The X position of the left edge of the window on initial showing. Defaults to centering the Window within
            the width of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).
            </summary>
        </member>
        <member name="P:Ext.WindowConfig.y">
            <summary>
            The Y position of the top edge of the window on initial showing. Defaults to centering the Window within
            the height of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).
            </summary>
        </member>
        <member name="T:Ext.WindowGroup">
            <summary>
            @class Ext.WindowGroup
            An object that manages a group of {@link Ext.Window} instances and provides z-order management
            and window activation behavior.
            @constructor
            </summary>
        </member>
        <member name="M:Ext.WindowGroup.#ctor">
            <summary>
            @class Ext.WindowGroup
            An object that manages a group of {@link Ext.Window} instances and provides z-order management
            and window activation behavior.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.WindowMgr">
            <summary>
            @class Ext.WindowMgr
            @extends Ext.WindowGroup
            The default global window group that is available automatically.  To have more than one group of windows
            with separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed.
            @singleton
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.XTemplate" -->
        <member name="M:Ext.XTemplate.from(System.Object)">
            <summary>
            Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
            @param {String/HTMLElement} el A DOM element or its id
            @return {Ext.Template} The created template
            @static
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.XTemplate.#ctor" -->
        <member name="T:Ext.chart.Axis">
            <summary>
            @class Ext.chart.Axis
            Defines a CartesianChart's vertical or horizontal axis.
            @constructor
            </summary>
        </member>
        <member name="M:Ext.chart.Axis.#ctor(System.Object)">
            <summary>
            @class Ext.chart.Axis
            Defines a CartesianChart's vertical or horizontal axis.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.hideOverlappingLabels">
            <summary>
            If true, labels that overlap previously drawn labels on the axis will be hidden.
            *
            @property hideOverlappingLabels
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.labelFunction">
            <summary>
            A string reference to the globally-accessible function that may be called to
            determine each of the label values for this axis.
            *
            @property labelFunction
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.labelSpacing">
            <summary>
            The space, in pixels, between labels on an axis.
            *
            @property labelSpacing
            @type Number
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.orientation">
            <summary>
            The direction in which the axis is drawn. May be "horizontal" or "vertical".
            *
            @property orientation
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.reverse">
            <summary>
            If true, the items on the axis will be drawn in opposite direction.
            *
            @property reverse
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.Axis.type">
            <summary>
            The type of axis.
            *
            @property type
            @type String
            </summary>
        </member>
        <member name="T:Ext.chart.BarChart">
            <summary>
            @class Ext.chart.BarChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype barchart
            </summary>
        </member>
        <member name="T:Ext.chart.CartesianChart">
            <summary>
            @class Ext.chart.CartesianChart
            @extends Ext.chart.Chart
            @constructor
            @xtype cartesianchart
            </summary>
        </member>
        <member name="T:Ext.chart.Chart">
            <summary>
            @class Ext.chart.Chart
            @extends Ext.FlashComponent
            The Ext.chart package provides the capability to visualize data with flash based charting.
            Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart.
            To change the look and feel of a chart, see the {@link #chartStyle} and {@link #extraStyle} config options.
            @constructor
            @xtype chart
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.bindStore(System.Object,System.Object)">
            <summary>
            Changes the data store bound to this chart and refreshes it.
            @param {Store} store The store to bind to this chart
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.setSeriesStyles(System.Object)">
            <summary>
            Sets the styles on all series in the Chart.
            *
            @param styles {Array} Initializer for all Chart series styles.
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.setStyle(System.Object,System.Object)">
            <summary>
            Sets a single style value on the Chart instance.
            *
            @param name {String} Name of the Chart style value to change.
            @param value {Object} New value to pass to the Chart style.
            </summary>
        </member>
        <member name="M:Ext.chart.Chart.setStyles(System.Object)">
            <summary>
            Resets all styles on the Chart instance.
            *
            @param styles {Object} Initializer for all Chart styles.
            </summary>
        </member>
        <member name="P:Ext.chart.Chart.disableCacheParam">
            <summary>
            @cfg {Boolean} disableCaching
            True to add a "cache buster" to the end of the chart url. Defaults to true for Opera and IE.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.chart.Chart.extraStyle" -->
        <member name="P:Ext.chart.Chart.refreshBuffer">
            <summary>
            @class Ext.chart.Chart
            @extends Ext.FlashComponent
            The Ext.chart package provides the capability to visualize data with flash based charting.
            Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart.
            To change the look and feel of a chart, see the {@link #chartStyle} and {@link #extraStyle} config options.
            @constructor
            @xtype chart
            </summary>
        </member>
        <member name="P:Ext.chart.Chart.seriesStyles">
            <summary>
            @cfg {Object} seriesStyles
            Contains styles to apply to the series after a refresh. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="M:Ext.chart.CartesianChart.onSwfReady(System.Object)">
            <summary>
            @class Ext.chart.CartesianChart
            @extends Ext.chart.Chart
            @constructor
            @xtype cartesianchart
            </summary>
        </member>
        <member name="P:Ext.chart.BarChart.type">
            <summary>
            @class Ext.chart.BarChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype barchart
            </summary>
        </member>
        <member name="T:Ext.chart.BarSeries">
            <summary>
            @class Ext.chart.BarSeries
            @extends Ext.chart.CartesianSeries
            BarSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.CartesianSeries">
            <summary>
            @class Ext.chart.CartesianSeries
            @extends Ext.chart.Series
            CartesianSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.Series">
            <summary>
            @class Ext.chart.Series
            Series class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="M:Ext.chart.Series.#ctor(System.Object)">
            <summary>
            @class Ext.chart.Series
            Series class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.Series.displayName">
            <summary>
            The human-readable name of the series.
            *
            @property displayName
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.Series.type">
            <summary>
            The type of series.
            *
            @property type
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.CartesianSeries.axis">
            <summary>
            Indicates which axis the series will bind to
            *
            @property axis
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.CartesianSeries.showInLegend">
            <summary>
            False to not show this series in the legend. Defaults to <tt>true</tt>.
            *
            @property showInLegend
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.CartesianSeries.xField">
            <summary>
            The field used to access the x-axis value from the items from the data
            source.
            *
            @property xField
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.CartesianSeries.yField">
            <summary>
            The field used to access the y-axis value from the items from the data
            source.
            *
            @property yField
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.BarSeries.type">
            <summary>
            @class Ext.chart.BarSeries
            @extends Ext.chart.CartesianSeries
            BarSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.CategoryAxis">
            <summary>
            @class Ext.chart.CategoryAxis
            @extends Ext.chart.Axis
            A type of axis that displays items in categories.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.CategoryAxis.calculateCategoryCount">
            <summary>
            Indicates whether or not to calculate the number of categories (ticks and
            labels) when there is not enough room to display all labels on the axis.
            If set to true, the axis will determine the number of categories to plot.
            If not, all categories will be plotted.
            *
            @property calculateCategoryCount
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.CategoryAxis.categoryNames">
            <summary>
            A list of category names to display along this axis.
            *
            @property categoryNames
            @type Array
            </summary>
        </member>
        <member name="P:Ext.chart.CategoryAxis.type">
            <summary>
            @class Ext.chart.CategoryAxis
            @extends Ext.chart.Axis
            A type of axis that displays items in categories.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.backgroundColor">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.chartStyle">
            <summary>
            Sets styles for this chart. This contains default styling, so modifying this property will <b>override</b>
            the built in styles of the chart. Use {@link #extraStyle} to add customizations to the default styling.
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.disableCaching">
            <summary>
            True to add a "cache buster" to the end of the chart url. Defaults to true for Opera and IE.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.chart.ChartConfig.extraStyle" -->
        <member name="P:Ext.chart.ChartConfig.seriesStyles">
            <summary>
            Contains styles to apply to the series after a refresh. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.chart.ChartConfig.url">
            <summary>
            The url to load the chart from. This defaults to Ext.chart.Chart.CHART_URL, which should
            be modified to point to the local charts resource.
            </summary>
        </member>
        <member name="T:Ext.chart.ColumnChart">
            <summary>
            @class Ext.chart.ColumnChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype columnchart
            </summary>
        </member>
        <member name="P:Ext.chart.ColumnChart.type">
            <summary>
            @class Ext.chart.ColumnChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype columnchart
            </summary>
        </member>
        <member name="T:Ext.chart.ColumnSeries">
            <summary>
            @class Ext.chart.ColumnSeries
            @extends Ext.chart.CartesianSeries
            ColumnSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.ColumnSeries.type">
            <summary>
            @class Ext.chart.ColumnSeries
            @extends Ext.chart.CartesianSeries
            ColumnSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.LineChart">
            <summary>
            @class Ext.chart.LineChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype linechart
            </summary>
        </member>
        <member name="P:Ext.chart.LineChart.type">
            <summary>
            @class Ext.chart.LineChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype linechart
            </summary>
        </member>
        <member name="T:Ext.chart.LineSeries">
            <summary>
            @class Ext.chart.LineSeries
            @extends Ext.chart.CartesianSeries
            LineSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.LineSeries.type">
            <summary>
            @class Ext.chart.LineSeries
            @extends Ext.chart.CartesianSeries
            LineSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.NumericAxis">
            <summary>
            @class Ext.chart.NumericAxis
            @extends Ext.chart.Axis
            A type of axis whose units are measured in numeric values.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.adjustMaximumByMajorUnit">
            <summary>
            Indicates whether to extend maximum beyond data's maximum to the nearest
            majorUnit.
            *
            @property adjustMaximumByMajorUnit
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.adjustMinimumByMajorUnit">
            <summary>
            Indicates whether to extend the minimum beyond data's minimum to the
            nearest majorUnit.
            *
            @property adjustMinimumByMajorUnit
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.alwaysShowZero">
            <summary>
            If true, and the bounds are calculated automatically, either the minimum
            or maximum will be set to zero.
            *
            @property alwaysShowZero
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.calculateByLabelSize">
            <summary>
            Indicates whether to factor in the size of the labels when calculating a
            major unit.
            *
            @property calculateByLabelSize
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.position">
            <summary>
            Indicates the position of the axis relative to the chart
            *
            @property position
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.roundMajorUnit">
            <summary>
            Indicates whether to round the major unit.
            *
            @property roundMajorUnit
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.scale">
            <summary>
            The scaling algorithm to use on this axis. May be "linear" or
            "logarithmic".
            *
            @property scale
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.snapToUnits">
            <summary>
            If true, the labels, ticks, gridlines, and other objects will snap to the
            nearest major or minor unit. If false, their position will be based on
            the minimum value.
            *
            @property snapToUnits
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.NumericAxis.type">
            <summary>
            @class Ext.chart.NumericAxis
            @extends Ext.chart.Axis
            A type of axis whose units are measured in numeric values.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.PieChart">
            <summary>
            @class Ext.chart.PieChart
            @extends Ext.chart.Chart
            @constructor
            @xtype piechart
            </summary>
        </member>
        <member name="P:Ext.chart.PieChart.type">
            <summary>
            @class Ext.chart.PieChart
            @extends Ext.chart.Chart
            @constructor
            @xtype piechart
            </summary>
        </member>
        <member name="T:Ext.chart.PieSeries">
            <summary>
            @class Ext.chart.PieSeries
            @extends Ext.chart.Series
            PieSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.PieSeries.dataField">
            <summary>
            @class Ext.chart.PieSeries
            @extends Ext.chart.Series
            PieSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.PieSeries.type">
            <summary>
            @class Ext.chart.PieSeries
            @extends Ext.chart.Series
            PieSeries class for the charts widget.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.chart.StackedBarChart">
            <summary>
            @class Ext.chart.StackedBarChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype stackedbarchart
            </summary>
        </member>
        <member name="P:Ext.chart.StackedBarChart.type">
            <summary>
            @class Ext.chart.StackedBarChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype stackedbarchart
            </summary>
        </member>
        <member name="T:Ext.chart.StackedColumnChart">
            <summary>
            @class Ext.chart.StackedColumnChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype stackedcolumnchart
            </summary>
        </member>
        <member name="P:Ext.chart.StackedColumnChart.type">
            <summary>
            @class Ext.chart.StackedColumnChart
            @extends Ext.chart.CartesianChart
            @constructor
            @xtype stackedcolumnchart
            </summary>
        </member>
        <member name="T:Ext.chart.TimeAxis">
            <summary>
            @class Ext.chart.TimeAxis
            @extends Ext.chart.Axis
            A type of axis whose units are measured in time-based values.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.calculateByLabelSize">
            <summary>
            Indicates whether to factor in the size of the labels when calculating a
            major unit.
            *
            @property calculateByLabelSize
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.majorTimeUnit">
            <summary>
            The time unit used by the majorUnit.
            *
            @property majorTimeUnit
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.maximum">
            <summary>
            The maximum value drawn by the axis. If not set explicitly, the axis
            maximum will be calculated automatically.
            *
            @property maximum
            @type Number
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.minimum">
            <summary>
            The minimum value drawn by the axis. If not set explicitly, the axis
            minimum will be calculated automatically.
            *
            @property minimum
            @type Date
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.minorTimeUnit">
            <summary>
            The time unit used by the minorUnit.
            *
            @property majorTimeUnit
            @type String
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.snapToUnits">
            <summary>
            If true, the labels, ticks, gridlines, and other objects will snap to the
            nearest major or minor unit. If false, their position will be based on
            the minimum value.
            *
            @property snapToUnits
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.stackingEnabled">
            <summary>
            Series that are stackable will only stack when this value is set to true.
            *
            @property stackingEnabled
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.chart.TimeAxis.type">
            <summary>
            @class Ext.chart.TimeAxis
            @extends Ext.chart.Axis
            A type of axis whose units are measured in time-based values.
            @constructor
            </summary>
        </member>
        <member name="T:Ext.data.ArrayReader">
            <summary>
            @class Ext.data.ArrayReader
            @extends Ext.data.JsonReader
            <p>Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.
            Each element of that Array represents a row of data fields. The
            fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
            of the field definition if it exists, or the field's ordinal position in the definition.</p>
            <p>Example code:</p>
            <pre><code>
            var Employee = Ext.data.Record.create([
            {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
            {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
            ]);
            var myReader = new Ext.data.ArrayReader({
            {@link #idIndex}: 0
            }, Employee);
            </code></pre>
            <p>This would consume an Array like this:</p>
            <pre><code>
            [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
            </code></pre>
            @constructor
            Create a new ArrayReader
            @param {Object} meta Metadata configuration options.
            @param {Array/Object} recordType
            <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
            will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
            constructor created from {@link Ext.data.Record#create}.</p>
            </summary>
        </member>
        <member name="T:Ext.data.JsonReader">
            <summary>
            @class Ext.data.JsonReader
            @extends Ext.data.DataReader
            <p>Data reader class to create an Array of {@link Ext.data.Record} objects
            from a JSON packet based on mappings in a provided {@link Ext.data.Record}
            constructor.</p>
            <p>Example code:</p>
            <pre><code>
            var myReader = new Ext.data.JsonReader({
            // metadata configuration options:
            {@link #idProperty}: 'id'
            {@link #root}: 'rows',
            {@link #totalProperty}: 'results',
            {@link Ext.data.DataReader#messageProperty}: "msg"  // The element within the response that provides a user-feedback message (optional)
            // the fields config option will internally create an {@link Ext.data.Record}
            // constructor that provides mapping for reading the record data objects
            {@link Ext.data.DataReader#fields fields}: [
            // map Record&#39;s 'firstname' field to data object&#39;s key of same name
            {name: 'name', mapping: 'firstname'},
            // map Record&#39;s 'job' field to data object&#39;s 'occupation' key
            {name: 'job', mapping: 'occupation'}
            ]
            });
            </code></pre>
            <p>This would consume a JSON data object of the form:</p><pre><code>
            {
            results: 2000, // Reader&#39;s configured {@link #totalProperty}
            rows: [        // Reader&#39;s configured {@link #root}
            // record data objects:
            { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },
            { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
            ...
            ]
            }
            </code></pre>
            <p><b><u>Automatic configuration using metaData</u></b></p>
            <p>It is possible to change a JsonReader's metadata at any time by including
            a <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
            object has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}
            object using this Reader will reconfigure itself to use the newly provided
            field definition and fire its {@link Ext.data.Store#metachange metachange}
            event. The metachange event handler may interrogate the <b><tt>metaData</tt></b>
            property to perform any configuration required.</p>
            <p>Note that reconfiguring a Store potentially invalidates objects which may
            refer to Fields or Records which no longer exist.</p>
            <p>To use this facility you would create the JsonReader like this:</p><pre><code>
            var myReader = new Ext.data.JsonReader();
            </code></pre>
            <p>The first data packet from the server would configure the reader by
            containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
            example, the JSON data object might take the form:</p><pre><code>
            {
            metaData: {
            "{@link #idProperty}": "id",
            "{@link #root}": "rows",
            "{@link #totalProperty}": "results"
            "{@link #successProperty}": "success",
            "{@link Ext.data.DataReader#fields fields}": [
            {"name": "name"},
            {"name": "job", "mapping": "occupation"}
            ],
            // used by store to set its sortInfo
            "sortInfo":{
            "field": "name",
            "direction": "ASC"
            },
            // {@link Ext.PagingToolbar paging data} (if applicable)
            "start": 0,
            "limit": 2,
            // custom property
            "foo": "bar"
            },
            // Reader&#39;s configured {@link #successProperty}
            "success": true,
            // Reader&#39;s configured {@link #totalProperty}
            "results": 2000,
            // Reader&#39;s configured {@link #root}
            // (this data simulates 2 results {@link Ext.PagingToolbar per page})
            "rows": [ // <b>*Note:</b> this must be an Array
            { "id": 1, "name": "Bill", "occupation": "Gardener" },
            { "id": 2, "name":  "Ben", "occupation": "Horticulturalist" }
            ]
            }
            </code></pre>
            <p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>
            <div class="mdetail-params"><ul>
            <li>any of the configuration options for this class</li>
            <li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which
            the JsonReader will use as an argument to the
            {@link Ext.data.Record#create data Record create method} in order to
            configure the layout of the Records it will produce.</li>
            <li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property
            which the JsonReader will use to set the {@link Ext.data.Store}'s
            {@link Ext.data.Store#sortInfo sortInfo} property</li>
            <li>any custom properties needed</li>
            </ul></div>
            *
            @constructor
            Create a new JsonReader
            @param {Object} meta Metadata configuration options.
            @param {Array/Object} recordType
            <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
            will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
            constructor created from {@link Ext.data.Record#create}.</p>
            </summary>
        </member>
        <member name="M:Ext.data.JsonReader.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.data.JsonReader
            @extends Ext.data.DataReader
            <p>Data reader class to create an Array of {@link Ext.data.Record} objects
            from a JSON packet based on mappings in a provided {@link Ext.data.Record}
            constructor.</p>
            <p>Example code:</p>
            <pre><code>
            var myReader = new Ext.data.JsonReader({
            // metadata configuration options:
            {@link #idProperty}: 'id'
            {@link #root}: 'rows',
            {@link #totalProperty}: 'results',
            {@link Ext.data.DataReader#messageProperty}: "msg"  // The element within the response that provides a user-feedback message (optional)
            // the fields config option will internally create an {@link Ext.data.Record}
            // constructor that provides mapping for reading the record data objects
            {@link Ext.data.DataReader#fields fields}: [
            // map Record&#39;s 'firstname' field to data object&#39;s key of same name
            {name: 'name', mapping: 'firstname'},
            // map Record&#39;s 'job' field to data object&#39;s 'occupation' key
            {name: 'job', mapping: 'occupation'}
            ]
            });
            </code></pre>
            <p>This would consume a JSON data object of the form:</p><pre><code>
            {
            results: 2000, // Reader&#39;s configured {@link #totalProperty}
            rows: [        // Reader&#39;s configured {@link #root}
            // record data objects:
            { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },
            { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
            ...
            ]
            }
            </code></pre>
            <p><b><u>Automatic configuration using metaData</u></b></p>
            <p>It is possible to change a JsonReader's metadata at any time by including
            a <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
            object has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}
            object using this Reader will reconfigure itself to use the newly provided
            field definition and fire its {@link Ext.data.Store#metachange metachange}
            event. The metachange event handler may interrogate the <b><tt>metaData</tt></b>
            property to perform any configuration required.</p>
            <p>Note that reconfiguring a Store potentially invalidates objects which may
            refer to Fields or Records which no longer exist.</p>
            <p>To use this facility you would create the JsonReader like this:</p><pre><code>
            var myReader = new Ext.data.JsonReader();
            </code></pre>
            <p>The first data packet from the server would configure the reader by
            containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
            example, the JSON data object might take the form:</p><pre><code>
            {
            metaData: {
            "{@link #idProperty}": "id",
            "{@link #root}": "rows",
            "{@link #totalProperty}": "results"
            "{@link #successProperty}": "success",
            "{@link Ext.data.DataReader#fields fields}": [
            {"name": "name"},
            {"name": "job", "mapping": "occupation"}
            ],
            // used by store to set its sortInfo
            "sortInfo":{
            "field": "name",
            "direction": "ASC"
            },
            // {@link Ext.PagingToolbar paging data} (if applicable)
            "start": 0,
            "limit": 2,
            // custom property
            "foo": "bar"
            },
            // Reader&#39;s configured {@link #successProperty}
            "success": true,
            // Reader&#39;s configured {@link #totalProperty}
            "results": 2000,
            // Reader&#39;s configured {@link #root}
            // (this data simulates 2 results {@link Ext.PagingToolbar per page})
            "rows": [ // <b>*Note:</b> this must be an Array
            { "id": 1, "name": "Bill", "occupation": "Gardener" },
            { "id": 2, "name":  "Ben", "occupation": "Horticulturalist" }
            ]
            }
            </code></pre>
            <p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>
            <div class="mdetail-params"><ul>
            <li>any of the configuration options for this class</li>
            <li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which
            the JsonReader will use as an argument to the
            {@link Ext.data.Record#create data Record create method} in order to
            configure the layout of the Records it will produce.</li>
            <li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property
            which the JsonReader will use to set the {@link Ext.data.Store}'s
            {@link Ext.data.Store#sortInfo sortInfo} property</li>
            <li>any custom properties needed</li>
            </ul></div>
            *
            @constructor
            Create a new JsonReader
            @param {Object} meta Metadata configuration options.
            @param {Array/Object} recordType
            <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
            will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
            constructor created from {@link Ext.data.Record#create}.</p>
            </summary>
        </member>
        <member name="T:Ext.data.JsonReader.Error">
            <summary>
            @class Ext.data.JsonReader.Error
            Error class for JsonReader
            </summary>
        </member>
        <member name="M:Ext.data.JsonReader.Error.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.data.JsonReader.Error
            Error class for JsonReader
            </summary>
        </member>
        <member name="M:Ext.data.ArrayReader.readRecords(System.Object)">
            <summary>
            Create a data block containing Ext.data.Records from an Array.
            @param {Object} o An Array of row objects which represents the dataset.
            @return {Object} data A data block which is used by an Ext.data.Store object as
            a cache of Ext.data.Records.
            </summary>
        </member>
        <member name="P:Ext.data.ArrayReaderConfig.id">
            <summary>
            (optional) The subscript within row Array that provides an ID for the Record.
            Deprecated. Use {@link #idIndex} instead.
            </summary>
        </member>
        <member name="P:Ext.data.ArrayReaderConfig.idIndex">
            <summary>
            (optional) The subscript within row Array that provides an ID for the Record.
            </summary>
        </member>
        <member name="P:Ext.data.ArrayReaderConfig.successProperty">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.data.ArrayStore">
            <summary>
            @class Ext.data.ArrayStore
            @extends Ext.data.Store
            <p>Formerly known as "SimpleStore".</p>
            <p>Small helper class to make creating {@link Ext.data.Store}s from Array data easier.
            An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.</p>
            <p>A store configuration would be something like:<pre><code>
            var store = new Ext.data.ArrayStore({
            // store configs
            autoDestroy: true,
            storeId: 'myStore',
            // reader configs
            idIndex: 0,
            fields: [
            'company',
            {name: 'price', type: 'float'},
            {name: 'change', type: 'float'},
            {name: 'pctChange', type: 'float'},
            {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
            ]
            });
            </code></pre></p>
            <p>This store is configured to consume a returned object of the form:<pre><code>
            var myData = [
            ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
            ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
            ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
            ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
            ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
            ];
            </code></pre>
            An object literal of this form could also be used as the {@link #data} config option.</p>
            <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
            <b>{@link Ext.data.ArrayReader ArrayReader}</b>.</p>
            @constructor
            @param {Object} config
            @xtype arraystore
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Store" -->
        <member name="M:Ext.data.Store.add(System.Object)">
            <summary>
            Add Records to the Store and fires the {@link #add} event.  To add Records
            to the store from a remote source use <code>{@link #load}({add:true})</code>.
            See also <code>{@link #recordType}</code> and <code>{@link #insert}</code>.
            @param {Ext.data.Record[]} records An Array of Ext.data.Record objects
            to add to the cache. See {@link #recordType}.
            </summary>
        </member>
        <member name="M:Ext.data.Store.addSorted(Ext.data.Record)">
            <summary>
            (Local sort only) Inserts the passed Record into the Store at the index where it
            should go based on the current sort information.
            @param {Ext.data.Record} record
            </summary>
        </member>
        <member name="M:Ext.data.Store.applySort">
            <summary>
            @private
            Invokes sortData if we have sortInfo to sort on and are not sorting remotely
            </summary>
        </member>
        <member name="M:Ext.data.Store.buildWriter(System.Object)">
            <summary>
            builds a DataWriter instance when Store constructor is provided with a writer config-object instead of an instace.
            @param {Object} config Writer configuration
            @return {Ext.data.DataWriter}
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Store.clearFilter(System.Boolean)">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            @param {Boolean} suppressEvent If <tt>true</tt> the filter is cleared silently without firing the
            {@link #datachanged} event.
            </summary>
        </member>
        <member name="M:Ext.data.Store.collect(SharpKit.JavaScript.JsString,System.Boolean,System.Boolean)">
            <summary>
            Collects unique values for a particular dataIndex from this store.
            @param {String} dataIndex The property to collect
            @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
            @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
            @return {Array} An array of the unique values
            </summary>
        </member>
        <member name="M:Ext.data.Store.commitChanges">
            <summary>
            Commit all Records with {@link #getModifiedRecords outstanding changes}. To handle updates for changes,
            subscribe to the Store's {@link #update update event}, and perform updating when the third parameter is
            Ext.data.Record.COMMIT.
            </summary>
        </member>
        <member name="M:Ext.data.Store.createFilterFn(SharpKit.JavaScript.JsString,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            @private
            Returns a filter function used to test a the given property's value. Defers most of the work to
            Ext.util.MixedCollection's createValueMatcher function
            @param {String} property The property to create the filter function for
            @param {String/RegExp} value The string/regex to compare the property value to
            @param {Boolean} anyMatch True if we don't care if the filter value is not the full value (defaults to false)
            @param {Boolean} caseSensitive True to create a case-sensitive regex (defaults to false)
            @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.
            </summary>
        </member>
        <member name="M:Ext.data.Store.createMultipleFilterFn(SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            Given an array of filter functions (each with optional scope), constructs and returns a single function that returns
            the result of all of the filters ANDed together
            @param {Array} filters The array of filter objects (each object should contain an 'fn' and optional scope)
            @return {Function} The multiple filter function
            </summary>
        </member>
        <member name="M:Ext.data.Store.createRecords(System.Object,System.Object,System.Object)">
            <summary>
            @private
            Should not be used directly.  Store#add will call this automatically if a Writer is set
            @param {Object} store
            @param {Object} records
            @param {Object} index
            </summary>
        </member>
        <member name="M:Ext.data.Store.createSortFunction(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Creates and returns a function which sorts an array by the given field and direction
            @param {String} field The field to create the sorter for
            @param {String} direction The direction to sort by (defaults to "ASC")
            @return {Function} A function which sorts by the field/direction combination provided
            </summary>
        </member>
        <member name="M:Ext.data.Store.destroy">
            <summary>
            Destroys the store.
            </summary>
        </member>
        <member name="M:Ext.data.Store.destroyRecord(System.Object,Ext.data.Record,SharpKit.JavaScript.JsNumber)">
            <summary>
            Destroys a Record.  Should not be used directly.  It's called by Store#remove if a Writer is set.
            @param {Store} store this
            @param {Ext.data.Record} record
            @param {Number} index
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Store.doUpdate(System.Object)">
            <summary>
            @private
            Update a record within the store with a new reference
            </summary>
        </member>
        <member name="M:Ext.data.Store.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Calls the specified function for each of the {@link Ext.data.Record Records} in the cache.
            @param {Function} fn The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.
            Returning <tt>false</tt> aborts and exits the iteration.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed.
            Defaults to the current {@link Ext.data.Record Record} in the iteration.
            </summary>
        </member>
        <member name="M:Ext.data.Store.execute(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.data.Store.filter(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Filter the {@link Ext.data.Record records} by a specified property. Alternatively, pass an array of filter
            options to filter by more than one property.
            Single filter example:
            store.filter('name', 'Ed', true, true); //finds all records containing the substring 'Ed'
            Multiple filter example:
            <pre><code>
            store.filter([
            {
            property     : 'name',
            value        : 'Ed',
            anyMatch     : true, //optional, defaults to true
            caseSensitive: true  //optional, defaults to true
            },
            *
            //filter functions can also be passed
            {
            fn   : function(record) {
            return record.get('age') == 24
            },
            scope: this
            }
            ]);
            </code></pre>
            @param {String|Array} field A field on your records, or an array containing multiple filter options
            @param {String/RegExp} value Either a string that the field should begin with, or a RegExp to test
            against the field.
            @param {Boolean} anyMatch (optional) <tt>true</tt> to match any part not just the beginning
            @param {Boolean} caseSensitive (optional) <tt>true</tt> for case sensitive comparison
            @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.
            </summary>
        </member>
        <member name="M:Ext.data.Store.filterBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Filter by a function. The specified function will be called for each
            Record in this Store. If the function returns <tt>true</tt> the Record is included,
            otherwise it is filtered out.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            </summary>
        </member>
        <member name="M:Ext.data.Store.find(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber,System.Boolean,System.Boolean)">
            <summary>
            Finds the index of the first matching Record in this store by a specific field value.
            @param {String} fieldName The name of the Record field to test.
            @param {String/RegExp} value Either a string that the field value
            should begin with, or a RegExp to test against the field.
            @param {Number} startIndex (optional) The index to start searching at
            @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
            @param {Boolean} caseSensitive (optional) True for case sensitive comparison
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.findBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Find the index of the first matching Record in this Store by a function.
            If the function returns <tt>true</tt> it is considered a match.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            @param {Number} startIndex (optional) The index to start searching at
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.findExact(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Finds the index of the first matching Record in this store by a specific field value.
            @param {String} fieldName The name of the Record field to test.
            @param {Mixed} value The value to match the field against.
            @param {Number} startIndex (optional) The index to start searching at
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.getAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the Record at the specified index.
            @param {Number} index The index of the Record to find.
            @return {Ext.data.Record} The Record at the passed index. Returns undefined if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getById(SharpKit.JavaScript.JsString)">
            <summary>
            Get the Record with the specified id.
            @param {String} id The id of the Record to find.
            @return {Ext.data.Record} The Record with the passed id. Returns undefined if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getCount">
            <summary>
            Gets the number of cached records.
            <p>If using paging, this may not be the total size of the dataset. If the data object
            used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
            the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
            @return {Number} The number of Records in the Store's cache.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getModifiedRecords">
            <summary>
            Gets all {@link Ext.data.Record records} modified since the last commit.  Modified records are
            persisted across load operations (e.g., during paging). <b>Note</b>: deleted records are not
            included.  See also <tt>{@link #pruneModifiedRecords}</tt> and
            {@link Ext.data.Record}<tt>{@link Ext.data.Record#markDirty markDirty}.</tt>.
            @return {Ext.data.Record[]} An array of {@link Ext.data.Record Records} containing outstanding
            modifications.  To obtain modified fields within a modified record see
            *{@link Ext.data.Record}<tt>{@link Ext.data.Record#modified modified}.</tt>.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a range of Records between specified indices.
            @param {Number} startIndex (optional) The starting index (defaults to 0)
            @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
            @return {Ext.data.Record[]} An array of Records
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Store.getSortState" -->
        <member name="M:Ext.data.Store.getTotalCount">
            <summary>
            Gets the total number of records in the dataset as returned by the server.
            <p>If using paging, for this to be accurate, the data object used by the {@link #reader Reader}
            must contain the dataset size. For remote data sources, the value for this property
            (<tt>totalProperty</tt> for {@link Ext.data.JsonReader JsonReader},
            <tt>totalRecords</tt> for {@link Ext.data.XmlReader XmlReader}) shall be returned by a query on the server.
            <b>Note</b>: see the Important note in {@link #load}.</p>
            @return {Number} The number of Records as specified in the data object passed to the Reader
            by the Proxy.
            <p><b>Note</b>: this value is not updated when changing the contents of the Store locally.</p>
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOf(Ext.data.Record)">
            <summary>
            Get the index within the cache of the passed Record.
            @param {Ext.data.Record} record The Ext.data.Record object to find.
            @return {Number} The index of the passed Record. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOfId(SharpKit.JavaScript.JsString)">
            <summary>
            Get the index within the cache of the Record with the passed id.
            @param {String} id The id of the Record to find.
            @return {Number} The index of the Record. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.insert(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Inserts Records into the Store at the given index and fires the {@link #add} event.
            See also <code>{@link #add}</code> and <code>{@link #addSorted}</code>.
            @param {Number} index The start index at which to insert the passed Records.
            @param {Ext.data.Record[]} records An Array of Ext.data.Record objects to add to the cache.
            </summary>
        </member>
        <member name="M:Ext.data.Store.isFiltered">
            <summary>
            Returns true if this store is currently filtered
            @return {Boolean}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Store.load(System.Object)" -->
        <member name="M:Ext.data.Store.loadData(System.Object,System.Boolean)">
            <summary>
            Loads data from a passed data block and fires the {@link #load} event. A {@link Ext.data.Reader Reader}
            which understands the format of the data must have been configured in the constructor.
            @param {Object} data The data block from which to read the Records.  The format of the data expected
            is dependent on the type of {@link Ext.data.Reader Reader} that is configured and should correspond to
            that {@link Ext.data.Reader Reader}'s <tt>{@link Ext.data.Reader#readRecords}</tt> parameter.
            @param {Boolean} append (Optional) <tt>true</tt> to append the new Records rather the default to replace
            the existing cache.
            <b>Note</b>: that Records in a Store are keyed by their {@link Ext.data.Record#id id}, so added Records
            with ids which are already present in the Store will <i>replace</i> existing Records. Only Records with
            new, unique ids will be added.
            </summary>
        </member>
        <member name="M:Ext.data.Store.multiSort(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsString)">
            <summary>
            Sorts the contents of this store by multiple field/direction sorters. This is called internally by {@link sort}
            and would not usually be called manually.
            Multi sorting only currently applies to local datasets - multiple sort data is not currently sent to a proxy
            if remoteSort is used.
            @param {Array} sorters Array of sorter objects (field and direction)
            @param {String} direction Overall direction to sort the ordered results by (defaults to "ASC")
            </summary>
        </member>
        <member name="M:Ext.data.Store.query(SharpKit.JavaScript.JsString,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Query the records by a specified property.
            @param {String} field A field on your records
            @param {String/RegExp} value Either a string that the field
            should begin with, or a RegExp to test against the field.
            @param {Boolean} anyMatch (optional) True to match any part not just the beginning
            @param {Boolean} caseSensitive (optional) True for case sensitive comparison
            @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
            </summary>
        </member>
        <member name="M:Ext.data.Store.queryBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Query the cached records in this Store using a filtering function. The specified function
            will be called with each record in this Store. If the function returns <tt>true</tt> the record is
            included in the results.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
            </summary>
        </member>
        <member name="M:Ext.data.Store.rejectChanges">
            <summary>
            {@link Ext.data.Record#reject Reject} outstanding changes on all {@link #getModifiedRecords modified records}.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Store.reload(System.Object)" -->
        <member name="M:Ext.data.Store.remove(System.Object)">
            <summary>
            Remove Records from the Store and fires the {@link #remove} event.
            @param {Ext.data.Record/Ext.data.Record[]} record The record object or array of records to remove from the cache.
            </summary>
        </member>
        <member name="M:Ext.data.Store.removeAll(System.Boolean)">
            <summary>
            Remove all Records from the Store and fires the {@link #clear} event.
            @param {Boolean} silent [false] Defaults to <tt>false</tt>.  Set <tt>true</tt> to not fire clear event.
            </summary>
        </member>
        <member name="M:Ext.data.Store.removeAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Remove a Record from the Store at the specified index. Fires the {@link #remove} event.
            @param {Number} index The index of the record to remove.
            </summary>
        </member>
        <member name="M:Ext.data.Store.save">
            <summary>
            Saves all pending changes to the store.  If the commensurate Ext.data.Api.actions action is not configured, then
            the configured <code>{@link #url}</code> will be used.
            <pre>
            change            url
            ---------------   --------------------
            removed records   Ext.data.Api.actions.destroy
            phantom records   Ext.data.Api.actions.create
            {@link #getModifiedRecords modified records}  Ext.data.Api.actions.update
            </pre>
            @TODO:  Create extensions of Error class and send associated Record with thrown exceptions.
            e.g.:  Ext.data.DataReader.Error or Ext.data.Error or Ext.data.DataProxy.Error, etc.
            @return {Number} batch Returns a number to uniquely identify the "batch" of saves occurring. -1 will be returned
            if there are no items to save or the save was cancelled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Store.setBaseParam(SharpKit.JavaScript.JsString,System.Object)" -->
        <member name="M:Ext.data.Store.setDefaultSort(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the default sort column and order to be used by the next {@link #load} operation.
            @param {String} fieldName The name of the field to sort by.
            @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
            </summary>
        </member>
        <member name="M:Ext.data.Store.singleSort(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Sorts the store contents by a single field and direction. This is called internally by {@link sort} and would
            not usually be called manually
            @param {String} fieldName The name of the field to sort by.
            @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
            </summary>
        </member>
        <member name="M:Ext.data.Store.sort(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Sort the Records.
            If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local
            sorting is used, the cache is sorted internally. See also {@link #remoteSort} and {@link #paramNames}.
            This function accepts two call signatures - pass in a field name as the first argument to sort on a single
            field, or pass in an array of sort configuration objects to sort by multiple fields.
            Single sort example:
            store.sort('name', 'ASC');
            Multi sort example:
            store.sort([
            {
            field    : 'name',
            direction: 'ASC'
            },
            {
            field    : 'salary',
            direction: 'DESC'
            }
            ], 'ASC');
            In this second form, the sort configs are applied in order, with later sorters sorting within earlier sorters' results.
            For example, if two records with the same name are present they will also be sorted by salary if given the sort configs
            above. Any number of sort configs can be added.
            @param {String/Array} fieldName The name of the field to sort by, or an array of ordered sort configs
            @param {String} dir (optional) The sort order, 'ASC' or 'DESC' (case-sensitive, defaults to <tt>'ASC'</tt>)
            </summary>
        </member>
        <member name="M:Ext.data.Store.sortData">
            <summary>
            @private
            Performs the actual sorting of data. This checks to see if we currently have a multi sort or not. It applies
            each sorter field/direction pair in turn by building an OR'ed master sorting function and running it against
            the full dataset
            </summary>
        </member>
        <member name="M:Ext.data.Store.sum(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sums the value of <tt>property</tt> for each {@link Ext.data.Record record} between <tt>start</tt>
            and <tt>end</tt> and returns the result.
            @param {String} property A field in each record
            @param {Number} start (optional) The record index to start at (defaults to <tt>0</tt>)
            @param {Number} end (optional) The last record index to include (defaults to length - 1)
            @return {Number} The sum
            </summary>
        </member>
        <member name="M:Ext.data.Store.updateRecord(System.Object,System.Object,System.Object)">
            <summary>
            updateRecord  Should not be used directly.  This method will be called automatically if a Writer is set.
            Listens to 'update' event.
            @param {Object} store
            @param {Object} record
            @param {Object} action
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Store.autoDestroy">
            <summary>
            @cfg {Boolean} autoDestroy <tt>true</tt> to destroy the store when the component the store is bound
            to is destroyed (defaults to <tt>false</tt>).
            <p><b>Note</b>: this should be set to true when using stores that are bound to only 1 component.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.Store.autoSave" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.data.Store.batch" -->
        <member name="P:Ext.data.Store.lastOptions">
            <summary>
            Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}
            for the details of what this may contain. This may be useful for accessing any params which were used
            to load the current Record cache.
            @property
            </summary>
        </member>
        <member name="P:Ext.data.Store.pruneModifiedRecords">
            <summary>
            @cfg {Boolean} pruneModifiedRecords <tt>true</tt> to clear all modified record information each time
            the store is loaded or when a record is removed (defaults to <tt>false</tt>). See {@link #getModifiedRecords}
            for the accessor method to retrieve the modified records.
            </summary>
        </member>
        <member name="P:Ext.data.Store.remoteSort">
            <summary>
            @cfg {boolean} remoteSort <tt>true</tt> if sorting is to be handled by requesting the <tt>{@link #proxy Proxy}</tt>
            to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache
            in place (defaults to <tt>false</tt>).
            <p>If <tt>remoteSort</tt> is <tt>true</tt>, then clicking on a {@link Ext.grid.Column Grid Column}'s
            {@link Ext.grid.Column#header header} causes the current page to be requested from the server appending
            the following two parameters to the <b><tt>{@link #load params}</tt></b>:<div class="mdetail-params"><ul>
            <li><b><tt>sort</tt></b> : String<p class="sub-desc">The <tt>name</tt> (as specified in the Record's
            {@link Ext.data.Field Field definition}) of the field to sort on.</p></li>
            <li><b><tt>dir</tt></b> : String<p class="sub-desc">The direction of the sort, 'ASC' or 'DESC' (case-sensitive).</p></li>
            </ul></div></p>
            </summary>
        </member>
        <member name="P:Ext.data.Store.restful">
            <summary>
            @cfg {Boolean} restful
            Defaults to <tt>false</tt>.  Set to <tt>true</tt> to have the Store and the set
            Proxy operate in a RESTful manner. The store will automatically generate GET, POST,
            PUT and DELETE requests to the server. The HTTP method used for any given CRUD
            action is described in {@link Ext.data.Api#restActions}.  For additional information
            see {@link Ext.data.DataProxy#restful}.
            <p><b>Note</b>: if <code>{@link #restful}:true</code> <code>batch</code> will
            internally be set to <tt>false</tt>.</p>
            </summary>
        </member>
        <member name="T:Ext.data.Store.Error">
            <summary>
            @class Ext.data.Store.Error
            @extends Ext.Error
            Store Error extension.
            @param {String} name
            </summary>
        </member>
        <member name="P:Ext.data.Store.Error.name">
            <summary>
            @class Ext.data.Store.Error
            @extends Ext.Error
            Store Error extension.
            @param {String} name
            </summary>
        </member>
        <member name="M:Ext.data.ArrayStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Connection" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Connection.#ctor(System.Object)" -->
        <member name="T:Ext.data.DataProxy">
            <summary>
            @class Ext.data.DataProxy
            @extends Ext.util.Observable
            <p>Abstract base class for implementations which provide retrieval of unformatted data objects.
            This class is intended to be extended and should not be created directly. For existing implementations,
            see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and
            {@link Ext.data.MemoryProxy}.</p>
            <p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}
            (of the appropriate type which knows how to parse the data object) to provide a block of
            {@link Ext.data.Records} to an {@link Ext.data.Store}.</p>
            <p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the
            config object to an {@link Ext.data.Connection}.</p>
            <p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the
            <code>load</code> method (deprecated). See
            {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or
            {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>
            <p><b><u>Example 1</u></b></p>
            <pre><code>
            proxy: new Ext.data.ScriptTagProxy({
            {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'
            }),
            </code></pre>
            <p><b><u>Example 2</u></b></p>
            <pre><code>
            proxy : new Ext.data.HttpProxy({
            {@link Ext.data.Connection#method method}: 'GET',
            {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,
            {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}
            {@link #api}: {
            // all actions except the following will use above url
            create  : 'local/new.php',
            update  : 'local/update.php'
            }
            }),
            </code></pre>
            <p>And <b>new in Ext version 3</b>, attach centralized event-listeners upon the DataProxy class itself!  This is a great place
            to implement a <i>messaging system</i> to centralize your application's user-feedback and error-handling.</p>
            <pre><code>
            // Listen to all "beforewrite" event fired by all proxies.
            Ext.data.DataProxy.on('beforewrite', function(proxy, action) {
            console.log('beforewrite: ', action);
            });
            // Listen to "write" event fired by all proxies
            Ext.data.DataProxy.on('write', function(proxy, action, data, res, rs) {
            console.info('write: ', action);
            });
            // Listen to "exception" event fired by all proxies
            Ext.data.DataProxy.on('exception', function(proxy, type, action, exception) {
            console.error(type + action + ' exception);
            });
            </code></pre>
            <b>Note:</b> These three events are all fired with the signature of the corresponding <i>DataProxy instance</i> event {@link #beforewrite beforewrite}, {@link #write write} and {@link #exception exception}.
            </summary>
        </member>
        <member name="M:Ext.data.DataProxy.#ctor(System.Object)">
            <summary>
            @class Ext.data.DataProxy
            @extends Ext.util.Observable
            <p>Abstract base class for implementations which provide retrieval of unformatted data objects.
            This class is intended to be extended and should not be created directly. For existing implementations,
            see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and
            {@link Ext.data.MemoryProxy}.</p>
            <p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}
            (of the appropriate type which knows how to parse the data object) to provide a block of
            {@link Ext.data.Records} to an {@link Ext.data.Store}.</p>
            <p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the
            config object to an {@link Ext.data.Connection}.</p>
            <p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the
            <code>load</code> method (deprecated). See
            {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or
            {@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>
            <p><b><u>Example 1</u></b></p>
            <pre><code>
            proxy: new Ext.data.ScriptTagProxy({
            {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'
            }),
            </code></pre>
            <p><b><u>Example 2</u></b></p>
            <pre><code>
            proxy : new Ext.data.HttpProxy({
            {@link Ext.data.Connection#method method}: 'GET',
            {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,
            {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}
            {@link #api}: {
            // all actions except the following will use above url
            create  : 'local/new.php',
            update  : 'local/update.php'
            }
            }),
            </code></pre>
            <p>And <b>new in Ext version 3</b>, attach centralized event-listeners upon the DataProxy class itself!  This is a great place
            to implement a <i>messaging system</i> to centralize your application's user-feedback and error-handling.</p>
            <pre><code>
            // Listen to all "beforewrite" event fired by all proxies.
            Ext.data.DataProxy.on('beforewrite', function(proxy, action) {
            console.log('beforewrite: ', action);
            });
            // Listen to "write" event fired by all proxies
            Ext.data.DataProxy.on('write', function(proxy, action, data, res, rs) {
            console.info('write: ', action);
            });
            // Listen to "exception" event fired by all proxies
            Ext.data.DataProxy.on('exception', function(proxy, type, action, exception) {
            console.error(type + action + ' exception);
            });
            </code></pre>
            <b>Note:</b> These three events are all fired with the signature of the corresponding <i>DataProxy instance</i> event {@link #beforewrite beforewrite}, {@link #write write} and {@link #exception exception}.
            </summary>
        </member>
        <member name="T:Ext.data.DataProxy.Error">
            <summary>
            @class Ext.data.DataProxy.Error
            @extends Ext.Error
            DataProxy Error extension.
            constructor
            @param {String} message Message describing the error.
            @param {Record/Record[]} arg
            </summary>
        </member>
        <member name="M:Ext.data.DataProxy.Error.#ctor(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            @class Ext.data.DataProxy.Error
            @extends Ext.Error
            DataProxy Error extension.
            constructor
            @param {String} message Message describing the error.
            @param {Record/Record[]} arg
            </summary>
        </member>
        <member name="T:Ext.data.DataReader">
            <summary>
            @class Ext.data.DataReader
            Abstract base class for reading structured data from a data source and converting
            it into an object containing {@link Ext.data.Record} objects and metadata for use
            by an {@link Ext.data.Store}.  This class is intended to be extended and should not
            be created directly. For existing implementations, see {@link Ext.data.ArrayReader},
            {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.
            @constructor Create a new DataReader
            @param {Object} meta Metadata configuration options (implementation-specific).
            @param {Array/Object} recordType
            <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
            will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
            constructor created using {@link Ext.data.Record#create}.</p>
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.data.DataReader
            Abstract base class for reading structured data from a data source and converting
            it into an object containing {@link Ext.data.Record} objects and metadata for use
            by an {@link Ext.data.Store}.  This class is intended to be extended and should not
            be created directly. For existing implementations, see {@link Ext.data.ArrayReader},
            {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.
            @constructor Create a new DataReader
            @param {Object} meta Metadata configuration options (implementation-specific).
            @param {Array/Object} recordType
            <p>Either an Array of {@link Ext.data.Field Field} definition objects (which
            will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
            constructor created using {@link Ext.data.Record#create}.</p>
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.extractData(System.Object,System.Boolean)">
            <summary>
            returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
            @param {Object[]/Object} data-root from server response
            @param {Boolean} returnRecords [false] Set true to return instances of Ext.data.Record
            @private
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.isData(System.Object)">
            <summary>
            Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key
            corresponding to idProperty defined in your DataReader config containing non-empty pk.
            @param {Object} data
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.realize(System.Object,System.Object)">
            <summary>
            Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.
            You <b>must</b> return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming
            data from server will be merged with the data in the local record.
            In addition, you <b>must</b> return record-data from the server in the same order received.
            Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be suppressed.
            @param {Record/Record[]} record The phantom record to be realized.
            @param {Object/Object[]} data The new record data to apply.  Must include the primary-key from database defined in idProperty field.
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.update(System.Object,System.Object)">
            <summary>
            Used for updating a non-phantom or "real" record's data with fresh data from server after remote-save.
            If returning data from multiple-records after a batch-update, you <b>must</b> return record-data from the server in
            the same order received.  Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be
            suppressed as the record receives fresh new data-hash
            @param {Record/Record[]} rs
            @param {Object/Object[]} data
            </summary>
        </member>
        <member name="T:Ext.data.DataReader.Error">
            <summary>
            @class Ext.data.DataReader.Error
            @extends Ext.Error
            General error class for Ext.data.DataReader
            </summary>
        </member>
        <member name="M:Ext.data.DataReader.Error.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.data.DataReader.Error
            @extends Ext.Error
            General error class for Ext.data.DataReader
            </summary>
        </member>
        <member name="P:Ext.data.DataReaderConfig.messageProperty">
            <summary>
            [undefined] Optional name of a property within a server-response that represents a user-feedback message.
            </summary>
        </member>
        <member name="T:Ext.data.DataWriter">
            <summary>
            @class Ext.data.DataWriter
            <p>Ext.data.DataWriter facilitates create, update, and destroy actions between
            an Ext.data.Store and a server-side framework. A Writer enabled Store will
            automatically manage the Ajax requests to perform CRUD actions on a Store.</p>
            <p>Ext.data.DataWriter is an abstract base class which is intended to be extended
            and should not be created directly. For existing implementations, see
            {@link Ext.data.JsonWriter}.</p>
            <p>Creating a writer is simple:</p>
            <pre><code>
            var writer = new Ext.data.JsonWriter({
            encode: false   // &lt;--- false causes data to be printed to jsonData config-property of Ext.Ajax#reqeust
            });
            </code></pre>
            * <p>Same old JsonReader as Ext-2.x:</p>
            <pre><code>
            var reader = new Ext.data.JsonReader({idProperty: 'id'}, [{name: 'first'}, {name: 'last'}, {name: 'email'}]);
            </code></pre>
            *
            <p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>
            <pre><code>
            // Create a standard HttpProxy instance.
            var proxy = new Ext.data.HttpProxy({
            url: 'app.php/users'    // &lt;--- Supports "provides"-type urls, such as '/users.json', '/products.xml' (Hello Rails/Merb)
            });
            </code></pre>
            <p>For finer grained control, the proxy may also be configured with an <code>API</code>:</p>
            <pre><code>
            // Maximum flexibility with the API-configuration
            var proxy = new Ext.data.HttpProxy({
            api: {
            read    : 'app.php/users/read',
            create  : 'app.php/users/create',
            update  : 'app.php/users/update',
            destroy : {  // &lt;--- Supports object-syntax as well
            url: 'app.php/users/destroy',
            method: "DELETE"
            }
            }
            });
            </code></pre>
            <p>Pulling it all together into a Writer-enabled Store:</p>
            <pre><code>
            var store = new Ext.data.Store({
            proxy: proxy,
            reader: reader,
            writer: writer,
            autoLoad: true,
            autoSave: true  // -- Cell-level updates.
            });
            </code></pre>
            <p>Initiating write-actions <b>automatically</b>, using the existing Ext2.0 Store/Record API:</p>
            <pre><code>
            var rec = store.getAt(0);
            rec.set('email', 'foo@bar.com');  // &lt;--- Immediately initiates an UPDATE action through configured proxy.
            store.remove(rec);  // &lt;---- Immediately initiates a DESTROY action through configured proxy.
            </code></pre>
            <p>For <b>record/batch</b> updates, use the Store-configuration {@link Ext.data.Store#autoSave autoSave:false}</p>
            <pre><code>
            var store = new Ext.data.Store({
            proxy: proxy,
            reader: reader,
            writer: writer,
            autoLoad: true,
            autoSave: false  // -- disable cell-updates
            });
            var urec = store.getAt(0);
            urec.set('email', 'foo@bar.com');
            var drec = store.getAt(1);
            store.remove(drec);
            // Push the button!
            store.save();
            </code></pre>
            @constructor Create a new DataWriter
            @param {Object} meta Metadata configuration options (implementation-specific)
            @param {Object} recordType Either an Array of field definition objects as specified
            in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created
            using {@link Ext.data.Record#create}.
            </summary>
        </member>
        <member name="M:Ext.data.DataWriter.apply(System.Object,System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Compiles a Store recordset into a data-format defined by an extension such as {@link Ext.data.JsonWriter} or {@link Ext.data.XmlWriter} in preparation for a {@link Ext.data.Api#actions server-write action}.  The first two params are similar similar in nature to {@link Ext#apply},
            Where the first parameter is the <i>receiver</i> of paramaters and the second, baseParams, <i>the source</i>.
            @param {Object} params The request-params receiver.
            @param {Object} baseParams as defined by {@link Ext.data.Store#baseParams}.  The baseParms must be encoded by the extending class, eg: {@link Ext.data.JsonWriter}, {@link Ext.data.XmlWriter}.
            @param {String} action [{@link Ext.data.Api#actions create|update|destroy}]
            @param {Record/Record[]} rs The recordset to write, the subject(s) of the write action.
            </summary>
        </member>
        <member name="M:Ext.data.DataWriter.#ctor(System.Object)">
            <summary>
            @class Ext.data.DataWriter
            <p>Ext.data.DataWriter facilitates create, update, and destroy actions between
            an Ext.data.Store and a server-side framework. A Writer enabled Store will
            automatically manage the Ajax requests to perform CRUD actions on a Store.</p>
            <p>Ext.data.DataWriter is an abstract base class which is intended to be extended
            and should not be created directly. For existing implementations, see
            {@link Ext.data.JsonWriter}.</p>
            <p>Creating a writer is simple:</p>
            <pre><code>
            var writer = new Ext.data.JsonWriter({
            encode: false   // &lt;--- false causes data to be printed to jsonData config-property of Ext.Ajax#reqeust
            });
            </code></pre>
            * <p>Same old JsonReader as Ext-2.x:</p>
            <pre><code>
            var reader = new Ext.data.JsonReader({idProperty: 'id'}, [{name: 'first'}, {name: 'last'}, {name: 'email'}]);
            </code></pre>
            *
            <p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>
            <pre><code>
            // Create a standard HttpProxy instance.
            var proxy = new Ext.data.HttpProxy({
            url: 'app.php/users'    // &lt;--- Supports "provides"-type urls, such as '/users.json', '/products.xml' (Hello Rails/Merb)
            });
            </code></pre>
            <p>For finer grained control, the proxy may also be configured with an <code>API</code>:</p>
            <pre><code>
            // Maximum flexibility with the API-configuration
            var proxy = new Ext.data.HttpProxy({
            api: {
            read    : 'app.php/users/read',
            create  : 'app.php/users/create',
            update  : 'app.php/users/update',
            destroy : {  // &lt;--- Supports object-syntax as well
            url: 'app.php/users/destroy',
            method: "DELETE"
            }
            }
            });
            </code></pre>
            <p>Pulling it all together into a Writer-enabled Store:</p>
            <pre><code>
            var store = new Ext.data.Store({
            proxy: proxy,
            reader: reader,
            writer: writer,
            autoLoad: true,
            autoSave: true  // -- Cell-level updates.
            });
            </code></pre>
            <p>Initiating write-actions <b>automatically</b>, using the existing Ext2.0 Store/Record API:</p>
            <pre><code>
            var rec = store.getAt(0);
            rec.set('email', 'foo@bar.com');  // &lt;--- Immediately initiates an UPDATE action through configured proxy.
            store.remove(rec);  // &lt;---- Immediately initiates a DESTROY action through configured proxy.
            </code></pre>
            <p>For <b>record/batch</b> updates, use the Store-configuration {@link Ext.data.Store#autoSave autoSave:false}</p>
            <pre><code>
            var store = new Ext.data.Store({
            proxy: proxy,
            reader: reader,
            writer: writer,
            autoLoad: true,
            autoSave: false  // -- disable cell-updates
            });
            var urec = store.getAt(0);
            urec.set('email', 'foo@bar.com');
            var drec = store.getAt(1);
            store.remove(drec);
            // Push the button!
            store.save();
            </code></pre>
            @constructor Create a new DataWriter
            @param {Object} meta Metadata configuration options (implementation-specific)
            @param {Object} recordType Either an Array of field definition objects as specified
            in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created
            using {@link Ext.data.Record#create}.
            </summary>
        </member>
        <member name="M:Ext.data.DataWriter.toArray(System.Object)">
            <summary>
            Converts a {@link Ext.data.DataWriter#toHash Hashed} {@link Ext.data.Record} to fields-array array suitable
            for encoding to xml via XTemplate, eg:
            <code><pre>&lt;tpl for=".">&lt;{name}>{value}&lt;/{name}&lt;/tpl></pre></code>
            eg, <b>non-phantom</b>:
            <code><pre>{id: 1, first: 'foo', last: 'bar'} --> [{name: 'id', value: 1}, {name: 'first', value: 'foo'}, {name: 'last', value: 'bar'}]</pre></code>
            {@link Ext.data.Record#phantom Phantom} records will have had their idProperty omitted in {@link #toHash} if determined to be auto-generated.
            Non AUTOINCREMENT pks should have been protected.
            @param {Hash} data Hashed by Ext.data.DataWriter#toHash
            @return {[Object]} Array of attribute-objects.
            @protected
            </summary>
        </member>
        <member name="M:Ext.data.DataWriter.toHash(Ext.data.Record,System.Object)">
            <summary>
            Converts a Record to a hash, taking into account the state of the Ext.data.Record along with configuration properties
            related to its rendering, such as {@link #writeAllFields}, {@link Ext.data.Record#phantom phantom}, {@link Ext.data.Record#getChanges getChanges} and
            {@link Ext.data.DataReader#idProperty idProperty}
            @param {Ext.data.Record} rec The Record from which to create a hash.
            @param {Object} config <b>NOT YET IMPLEMENTED</b>.  Will implement an exlude/only configuration for fine-control over which fields do/don't get rendered.
            @return {Object}
            @protected
            TODO Implement excludes/only configuration with 2nd param?
            </summary>
        </member>
        <member name="P:Ext.data.DataWriter.listful">
            <summary>
            @cfg {Boolean} listful
            <tt>false</tt> by default.  Set <tt>true</tt> to have the DataWriter <b>always</b> write HTTP params as a list,
            even when acting upon a single record.
            </summary>
        </member>
        <member name="P:Ext.data.DataWriter.writeAllFields">
            <summary>
            @cfg {Boolean} writeAllFields
            <tt>false</tt> by default.  Set <tt>true</tt> to have DataWriter return ALL fields of a modified
            record -- not just those that changed.
            <tt>false</tt> to have DataWriter only request modified fields from a record.
            </summary>
        </member>
        <member name="P:Ext.data.DataWriterConfig.createRecord">
            <summary>
            Abstract method that should be implemented in all subclasses
            (e.g.: {@link Ext.data.JsonWriter#createRecord JsonWriter.createRecord})
            </summary>
        </member>
        <member name="P:Ext.data.DataWriterConfig.destroyRecord">
            <summary>
            Abstract method that should be implemented in all subclasses
            (e.g.: {@link Ext.data.JsonWriter#destroyRecord JsonWriter.destroyRecord})
            </summary>
        </member>
        <member name="P:Ext.data.DataWriterConfig.listful">
            <summary>
            <tt>false</tt> by default.  Set <tt>true</tt> to have the DataWriter <b>always</b> write HTTP params as a list,
            even when acting upon a single record.
            </summary>
        </member>
        <member name="P:Ext.data.DataWriterConfig.updateRecord">
            <summary>
            Abstract method that should be implemented in all subclasses
            (e.g.: {@link Ext.data.JsonWriter#updateRecord JsonWriter.updateRecord}
            </summary>
        </member>
        <member name="P:Ext.data.DataWriterConfig.writeAllFields">
            <summary>
            <tt>false</tt> by default.  Set <tt>true</tt> to have DataWriter return ALL fields of a modified
            record -- not just those that changed.
            <tt>false</tt> to have DataWriter only request modified fields from a record.
            </summary>
        </member>
        <member name="T:Ext.data.DirectProxy">
            <summary>
            @class Ext.data.DirectProxy
            @extends Ext.data.DataProxy
            </summary>
        </member>
        <member name="M:Ext.data.DirectProxy.#ctor(System.Object)">
            <summary>
            @class Ext.data.DirectProxy
            @extends Ext.data.DataProxy
            </summary>
        </member>
        <member name="T:Ext.data.DirectStore">
            <summary>
            @class Ext.data.DirectStore
            @extends Ext.data.Store
            <p>Small helper class to create an {@link Ext.data.Store} configured with an
            {@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting
            with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.
            To create a different proxy/reader combination create a basic {@link Ext.data.Store}
            configured as needed.</p>
            *
            <p><b>*Note:</b> Although they are not listed, this class inherits all of the config options of:</p>
            <div><ul class="mdetail-params">
            <li><b>{@link Ext.data.Store Store}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            *
            </ul></div>
            <li><b>{@link Ext.data.JsonReader JsonReader}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            <li><tt><b>{@link Ext.data.JsonReader#root root}</b></tt></li>
            <li><tt><b>{@link Ext.data.JsonReader#idProperty idProperty}</b></tt></li>
            <li><tt><b>{@link Ext.data.JsonReader#totalProperty totalProperty}</b></tt></li>
            </ul></div>
            *
            <li><b>{@link Ext.data.DirectProxy DirectProxy}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            <li><tt><b>{@link Ext.data.DirectProxy#directFn directFn}</b></tt></li>
            <li><tt><b>{@link Ext.data.DirectProxy#paramOrder paramOrder}</b></tt></li>
            <li><tt><b>{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}</b></tt></li>
            </ul></div>
            </ul></div>
            *
            @xtype directstore
            *
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.data.DirectStore.#ctor(System.Object)">
            <summary>
            @class Ext.data.DirectStore
            @extends Ext.data.Store
            <p>Small helper class to create an {@link Ext.data.Store} configured with an
            {@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting
            with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.
            To create a different proxy/reader combination create a basic {@link Ext.data.Store}
            configured as needed.</p>
            *
            <p><b>*Note:</b> Although they are not listed, this class inherits all of the config options of:</p>
            <div><ul class="mdetail-params">
            <li><b>{@link Ext.data.Store Store}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            *
            </ul></div>
            <li><b>{@link Ext.data.JsonReader JsonReader}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            <li><tt><b>{@link Ext.data.JsonReader#root root}</b></tt></li>
            <li><tt><b>{@link Ext.data.JsonReader#idProperty idProperty}</b></tt></li>
            <li><tt><b>{@link Ext.data.JsonReader#totalProperty totalProperty}</b></tt></li>
            </ul></div>
            *
            <li><b>{@link Ext.data.DirectProxy DirectProxy}</b></li>
            <div class="sub-desc"><ul class="mdetail-params">
            <li><tt><b>{@link Ext.data.DirectProxy#directFn directFn}</b></tt></li>
            <li><tt><b>{@link Ext.data.DirectProxy#paramOrder paramOrder}</b></tt></li>
            <li><tt><b>{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}</b></tt></li>
            </ul></div>
            </ul></div>
            *
            @xtype directstore
            *
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="T:Ext.data.Field">
            <summary>
            @class Ext.data.Field
            <p>This class encapsulates the field definition information specified in the field definition objects
            passed to {@link Ext.data.Record#create}.</p>
            <p>Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}
            and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor's <b>prototype.</b></p>
            </summary>
        </member>
        <member name="M:Ext.data.Field.#ctor(System.Object)">
            <summary>
            @class Ext.data.Field
            <p>This class encapsulates the field definition information specified in the field definition objects
            passed to {@link Ext.data.Record#create}.</p>
            <p>Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}
            and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor's <b>prototype.</b></p>
            </summary>
        </member>
        <member name="P:Ext.data.Field.allowBlank">
            <summary>
            @cfg {Boolean} allowBlank
            (Optional) Used for validating a {@link Ext.data.Record record}, defaults to <code>true</code>.
            An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}
            to evaluate to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.data.Field.dateFormat">
            <summary>
            @cfg {String} dateFormat
            <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
            <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
            value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
            javascript millisecond timestamp. See {@link Date}</p>
            </summary>
        </member>
        <member name="P:Ext.data.Field.defaultValue">
            <summary>
            @cfg {Mixed} defaultValue
            (Optional) The default value used <b>when a Record is being created by a {@link Ext.data.Reader Reader}</b>
            when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
            object (i.e. undefined). (defaults to "")
            </summary>
        </member>
        <member name="P:Ext.data.Field.mapping">
            <summary>
            @cfg {String/Number} mapping
            <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
            that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.
            If the path expression is the same as the field name, the mapping may be omitted.</p>
            <p>The form of the mapping expression depends on the Reader being used.</p>
            <div class="mdetail-params"><ul>
            <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
            expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
            <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
            item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
            <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
            of the field's value. Defaults to the field specification's Array position.</div></li>
            </ul></div>
            <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
            function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
            return the desired data.</p>
            </summary>
        </member>
        <member name="P:Ext.data.Field.sortDir">
            <summary>
            @cfg {String} sortDir
            (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
            <code>"ASC"</code>.
            </summary>
        </member>
        <member name="P:Ext.data.Field.sortType">
            <summary>
            @cfg {Function} sortType
            (Optional) A function which converts a Field's value to a comparable value in order to ensure
            correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
            sort example:<pre><code>
            // current sort     after sort we want
            // +-+------+          +-+------+
            // |1|First |          |1|First |
            // |2|Last  |          |3|Second|
            // |3|Second|          |2|Last  |
            // +-+------+          +-+------+
            sortType: function(value) {
            switch (value.toLowerCase()) // native toLowerCase():
            {
            case 'first': return 1;
            case 'second': return 2;
            default: return 3;
            }
            }
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.Field.useNull" -->
        <member name="P:Ext.data.FieldConfig.allowBlank">
            <summary>
            (Optional) Used for validating a {@link Ext.data.Record record}, defaults to <code>true</code>.
            An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}
            to evaluate to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.convert">
            <summary>
            (Optional) A function which converts the value provided by the Reader into an object that will be stored
            in the Record. It is passed the following parameters:<div class="mdetail-params"><ul>
            <li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
            the configured <code>{@link Ext.data.Field#defaultValue defaultValue}</code>.</div></li>
            <li><b>rec</b> : Mixed<div class="sub-desc">The data object containing the row as read by the Reader.
            Depending on the Reader type, this could be an Array ({@link Ext.data.ArrayReader ArrayReader}), an object
            ({@link Ext.data.JsonReader JsonReader}), or an XML element ({@link Ext.data.XMLReader XMLReader}).</div></li>
            </ul></div>
            <pre><code>
            // example of convert function
            function fullName(v, record){
            return record.name.last + ', ' + record.name.first;
            }
            function location(v, record){
            return !record.city ? '' : (record.city + ', ' + record.state);
            }
            var Dude = Ext.data.Record.create([
            {name: 'fullname',  convert: fullName},
            {name: 'firstname', mapping: 'name.first'},
            {name: 'lastname',  mapping: 'name.last'},
            {name: 'city', defaultValue: 'homeless'},
            'state',
            {name: 'location',  convert: location}
            ]);
            // create the data store
            var store = new Ext.data.Store({
            reader: new Ext.data.JsonReader(
            {
            idProperty: 'key',
            root: 'daRoot',
            totalProperty: 'total'
            },
            Dude  // recordType
            )
            });
            var myData = [
            { key: 1,
            name: { first: 'Fat',    last:  'Albert' }
            // notice no city, state provided in data object
            },
            { key: 2,
            name: { first: 'Barney', last:  'Rubble' },
            city: 'Bedrock', state: 'Stoneridge'
            },
            { key: 3,
            name: { first: 'Cliff',  last:  'Claven' },
            city: 'Boston',  state: 'MA'
            }
            ];
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.dateFormat">
            <summary>
            <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
            <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
            value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
            javascript millisecond timestamp. See {@link Date}</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.defaultValue">
            <summary>
            (Optional) The default value used <b>when a Record is being created by a {@link Ext.data.Reader Reader}</b>
            when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
            object (i.e. undefined). (defaults to "")
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.mapping">
            <summary>
            <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
            that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.
            If the path expression is the same as the field name, the mapping may be omitted.</p>
            <p>The form of the mapping expression depends on the Reader being used.</p>
            <div class="mdetail-params"><ul>
            <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
            expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
            <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
            item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
            <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
            of the field's value. Defaults to the field specification's Array position.</div></li>
            </ul></div>
            <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
            function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
            return the desired data.</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.name">
            <summary>
            The name by which the field is referenced within the Record. This is referenced by, for example,
            the <code>dataIndex</code> property in column definition objects passed to {@link Ext.grid.ColumnModel}.
            <p>Note: In the simplest case, if no properties other than <code>name</code> are required, a field
            definition may consist of just a String for the field name.</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortDir">
            <summary>
            (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
            <code>"ASC"</code>.
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortType">
            <summary>
            (Optional) A function which converts a Field's value to a comparable value in order to ensure
            correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
            sort example:<pre><code>
            // current sort     after sort we want
            // +-+------+          +-+------+
            // |1|First |          |1|First |
            // |2|Last  |          |3|Second|
            // |3|Second|          |2|Last  |
            // +-+------+          +-+------+
            sortType: function(value) {
            switch (value.toLowerCase()) // native toLowerCase():
            {
            case 'first': return 1;
            case 'second': return 2;
            default: return 3;
            }
            }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.type">
            <summary>
            (Optional) The data type for automatic conversion from received data to the <i>stored</i> value if <code>{@link Ext.data.Field#convert convert}</code>
            has not been specified. This may be specified as a string value. Possible values are
            <div class="mdetail-params"><ul>
            <li>auto (Default, implies no conversion)</li>
            <li>string</li>
            <li>int</li>
            <li>float</li>
            <li>boolean</li>
            <li>date</li></ul></div>
            <p>This may also be specified by referencing a member of the {@link Ext.data.Types} class.</p>
            <p>Developers may create their own application-specific data types by defining new members of the
            {@link Ext.data.Types} class.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.FieldConfig.useNull" -->
        <member name="T:Ext.data.GroupingStore">
            <summary>
            @class Ext.data.GroupingStore
            @extends Ext.data.Store
            A specialized store implementation that provides for grouping records by one of the available fields. This
            is usually used in conjunction with an {@link Ext.grid.GroupingView} to provide the data model for
            a grouped GridPanel.
            *
            Internally, GroupingStore is simply a normal Store with multi sorting enabled from the start. The grouping field
            and direction are always injected as the first sorter pair. GroupingView picks up on the configured groupField and
            builds grid rows appropriately.
            *
            @constructor
            Creates a new GroupingStore.
            @param {Object} config A config object containing the objects needed for the Store to access data,
            and read the data into Records.
            @xtype groupingstore
            </summary>
        </member>
        <member name="M:Ext.data.GroupingStore.applyGroupField">
            <summary>
            @private
            Saves the current grouping field and direction to this.baseParams and this.lastOptions.params
            if we're using remote grouping. Does not actually perform any grouping - just stores values
            </summary>
        </member>
        <member name="M:Ext.data.GroupingStore.applyGrouping(System.Object)">
            <summary>
            @private
            TODO: This function is apparently never invoked anywhere in the framework. It has no documentation
            and should be considered for deletion
            </summary>
        </member>
        <member name="M:Ext.data.GroupingStore.clearGrouping">
            <summary>
            Clears any existing grouping and refreshes the data using the default sort.
            </summary>
        </member>
        <member name="M:Ext.data.GroupingStore.getGroupState">
            <summary>
            @private
            Returns the grouping field that should be used. If groupOnSort is used this will be sortInfo's field,
            otherwise it will be this.groupField
            @return {String} The group field
            </summary>
        </member>
        <member name="M:Ext.data.GroupingStore.groupBy(SharpKit.JavaScript.JsString,System.Boolean,System.Object)">
            <summary>
            Groups the data by the specified field.
            @param {String} field The field name by which to sort the store's data
            @param {Boolean} forceRegroup (optional) True to force the group to be refreshed even if the field passed
            in is the same as the current grouping field, false to skip grouping on the same field (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStore.groupDir">
            <summary>
            @cfg {String} groupDir
            The direction to sort the groups. Defaults to <tt>'ASC'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStore.groupOnSort">
            <summary>
            @cfg {Boolean} groupOnSort
            True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the
            existing sort info (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStore.remoteGroup">
            <summary>
            @cfg {Boolean} remoteGroup
            True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
            grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
            helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStoreConfig.groupDir">
            <summary>
            The direction to sort the groups. Defaults to <tt>'ASC'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStoreConfig.groupField">
            <summary>
            The field name by which to sort the store's data (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStoreConfig.groupOnSort">
            <summary>
            True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the
            existing sort info (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.data.GroupingStoreConfig.remoteGroup">
            <summary>
            True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
            grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
            helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
            </summary>
        </member>
        <member name="T:Ext.data.HttpProxy">
            <summary>
            @class Ext.data.HttpProxy
            @extends Ext.data.DataProxy
            <p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same
            domain of the originating page.</p>
            <p><b>Note</b>: this class cannot be used to retrieve data from a domain other
            than the domain from which the running page was served. For cross-domain requests, use a
            {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
            <p>Be aware that to enable the browser to parse an XML document, the server must set
            the Content-Type header in the HTTP response to "<tt>text/xml</tt>".</p>
            @constructor
            @param {Object} conn
            An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.
            <p>Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the
            Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt>
            options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters,
            or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be
            used to pass parameters known at instantiation time.</p>
            <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make
            the request.</p>
            </summary>
        </member>
        <member name="M:Ext.data.HttpProxy.#ctor(System.Object)">
            <summary>
            @class Ext.data.HttpProxy
            @extends Ext.data.DataProxy
            <p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same
            domain of the originating page.</p>
            <p><b>Note</b>: this class cannot be used to retrieve data from a domain other
            than the domain from which the running page was served. For cross-domain requests, use a
            {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
            <p>Be aware that to enable the browser to parse an XML document, the server must set
            the Content-Type header in the HTTP response to "<tt>text/xml</tt>".</p>
            @constructor
            @param {Object} conn
            An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.
            <p>Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the
            Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt>
            options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters,
            or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be
            used to pass parameters known at instantiation time.</p>
            <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make
            the request.</p>
            </summary>
        </member>
        <member name="T:Ext.data.JsonStore">
            <summary>
            @class Ext.data.JsonStore
            @extends Ext.data.Store
            <p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
            A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.</p>
            <p>A store configuration would be something like:<pre><code>
            var store = new Ext.data.JsonStore({
            // store configs
            autoDestroy: true,
            url: 'get-images.php',
            storeId: 'myStore',
            // reader configs
            root: 'images',
            idProperty: 'name',
            fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
            });
            </code></pre></p>
            <p>This store is configured to consume a returned object of the form:<pre><code>
            {
            images: [
            {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
            {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
            ]
            }
            </code></pre>
            An object literal of this form could also be used as the {@link #data} config option.</p>
            <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
            <b>{@link Ext.data.JsonReader JsonReader}</b>.</p>
            @constructor
            @param {Object} config
            @xtype jsonstore
            </summary>
        </member>
        <member name="M:Ext.data.JsonStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <member name="T:Ext.data.JsonWriter">
            <summary>
            @class Ext.data.JsonWriter
            @extends Ext.data.DataWriter
            DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action.
            </summary>
        </member>
        <member name="M:Ext.data.JsonWriter.#ctor(System.Object)">
            <summary>
            @cfg {Boolean} encodeDelete False to send only the id to the server on delete, true to encode it in an object
            literal, eg: <pre><code>
            {id: 1}
            </code></pre> Defaults to <tt>false</tt>
            </summary>
        </member>
        <member name="M:Ext.data.JsonWriter.createRecord(Ext.data.Record)">
            <summary>
            Implements abstract Ext.data.DataWriter#createRecord
            @protected
            @param {Ext.data.Record} rec
            @return {Object}
            </summary>
        </member>
        <member name="M:Ext.data.JsonWriter.destroyRecord(Ext.data.Record)">
            <summary>
            Implements abstract Ext.data.DataWriter#destroyRecord
            @protected
            @param {Ext.data.Record} rec
            @return {Object}
            </summary>
        </member>
        <member name="M:Ext.data.JsonWriter.render(System.Object,System.Object,System.Object)">
            <summary>
            <p>This method should not need to be called by application code, however it may be useful on occasion to
            override it, or augment it with an {@link Function#createInterceptor interceptor} or {@link Function#createSequence sequence}.</p>
            <p>The provided implementation encodes the serialized data representing the Store's modified Records into the Ajax request's
            <code>params</code> according to the <code>{@link #encode}</code> setting.</p>
            @param {Object} Ajax request params object to write into.
            @param {Object} baseParams as defined by {@link Ext.data.Store#baseParams}.  The baseParms must be encoded by the extending class, eg: {@link Ext.data.JsonWriter}, {@link Ext.data.XmlWriter}.
            @param {Object/Object[]} data Data object representing the serialized modified records from the Store. May be either a single object,
            or an Array of objects - user implementations must handle both cases.
            </summary>
        </member>
        <member name="M:Ext.data.JsonWriter.updateRecord(Ext.data.Record)">
            <summary>
            Implements abstract Ext.data.DataWriter#updateRecord
            @protected
            @param {Ext.data.Record} rec
            @return {Object}
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriter.encode">
            <summary>
            @cfg {Boolean} encode <p><tt>true</tt> to {@link Ext.util.JSON#encode JSON encode} the
            {@link Ext.data.DataWriter#toHash hashed data} into a standard HTTP parameter named after this
            Reader's <code>meta.root</code> property which, by default is imported from the associated Reader. Defaults to <tt>true</tt>.</p>
            <p>If set to <code>false</code>, the hashed data is {@link Ext.util.JSON#encode JSON encoded}, along with
            the associated {@link Ext.data.Store}'s {@link Ext.data.Store#baseParams baseParams}, into the POST body.</p>
            <p>When using {@link Ext.data.DirectProxy}, set this to <tt>false</tt> since Ext.Direct.JsonProvider will perform
            its own json-encoding.  In addition, if you're using {@link Ext.data.HttpProxy}, setting to <tt>false</tt>
            will cause HttpProxy to transmit data using the <b>jsonData</b> configuration-params of {@link Ext.Ajax#request}
            instead of <b>params</b>.</p>
            <p>When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are
            tuned to expect data through the jsonData mechanism.  In those cases, one will want to set <b>encode: <tt>false</tt></b>, as in
            let the lower-level connection object (eg: Ext.Ajax) do the encoding.</p>
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriter.encodeDelete">
            <summary>
            @cfg {Boolean} encodeDelete False to send only the id to the server on delete, true to encode it in an object
            literal, eg: <pre><code>
            {id: 1}
            </code></pre> Defaults to <tt>false</tt>
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriterConfig.encode">
            <summary>
            <p><tt>true</tt> to {@link Ext.util.JSON#encode JSON encode} the
            {@link Ext.data.DataWriter#toHash hashed data} into a standard HTTP parameter named after this
            Reader's <code>meta.root</code> property which, by default is imported from the associated Reader. Defaults to <tt>true</tt>.</p>
            <p>If set to <code>false</code>, the hashed data is {@link Ext.util.JSON#encode JSON encoded}, along with
            the associated {@link Ext.data.Store}'s {@link Ext.data.Store#baseParams baseParams}, into the POST body.</p>
            <p>When using {@link Ext.data.DirectProxy}, set this to <tt>false</tt> since Ext.Direct.JsonProvider will perform
            its own json-encoding.  In addition, if you're using {@link Ext.data.HttpProxy}, setting to <tt>false</tt>
            will cause HttpProxy to transmit data using the <b>jsonData</b> configuration-params of {@link Ext.Ajax#request}
            instead of <b>params</b>.</p>
            <p>When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are
            tuned to expect data through the jsonData mechanism.  In those cases, one will want to set <b>encode: <tt>false</tt></b>, as in
            let the lower-level connection object (eg: Ext.Ajax) do the encoding.</p>
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriterConfig.encodeDelete">
            <summary>
            False to send only the id to the server on delete, true to encode it in an object
            literal, eg: <pre><code>
            {id: 1}
            </code></pre> Defaults to <tt>false</tt>
            </summary>
        </member>
        <member name="T:Ext.data.MemoryProxy">
            <summary>
            @class Ext.data.MemoryProxy
            @extends Ext.data.DataProxy
            An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
            to the Reader when its load method is called.
            @constructor
            @param {Object} data The data object which the Reader uses to construct a block of Ext.data.Records.
            </summary>
        </member>
        <member name="M:Ext.data.MemoryProxy.#ctor(System.Object)">
            <summary>
            @class Ext.data.MemoryProxy
            @extends Ext.data.DataProxy
            An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
            to the Reader when its load method is called.
            @constructor
            @param {Object} data The data object which the Reader uses to construct a block of Ext.data.Records.
            </summary>
        </member>
        <member name="T:Ext.data.Node">
            <summary>
            @class Ext.data.Node
            @extends Ext.util.Observable
            @cfg {Boolean} leaf true if this node is a leaf and does not have children
            @cfg {String} id The id for this node. If one is not specified, one is generated.
            @constructor
            @param {Object} attributes The attributes/config for the node
            </summary>
        </member>
        <member name="M:Ext.data.Node.appendChild(System.Object)">
            <summary>
            Insert node(s) as the last child node of this node.
            @param {Node/Array} node The node or Array of nodes to append
            @return {Node} The appended node if single append, or null if an array was passed
            </summary>
        </member>
        <member name="M:Ext.data.Node.bubble(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the bubble is stopped.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.cascade(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the cascade is stopped on that branch.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.#ctor(System.Object)">
            <summary>
            @class Ext.data.Node
            @extends Ext.util.Observable
            @cfg {Boolean} leaf true if this node is a leaf and does not have children
            @cfg {String} id The id for this node. If one is not specified, one is generated.
            @constructor
            @param {Object} attributes The attributes/config for the node
            </summary>
        </member>
        <member name="M:Ext.data.Node.contains(System.Object)">
            <summary>
            Returns true if this node is an ancestor (at any point) of the passed node.
            @param {Node} node
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.destroy(System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.data.Node.eachChild(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the iteration stops.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node in the iteration.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.findChild(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Finds the first child that has the attribute with the specified value.
            @param {String} attribute The attribute name
            @param {Mixed} value The value to search for
            @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
            @return {Node} The found child or null if none was found
            </summary>
        </member>
        <member name="M:Ext.data.Node.findChildBy(SharpKit.JavaScript.JsAction,System.Object,System.Boolean)">
            <summary>
            Finds the first child by a custom function. The child matches if the function passed returns <code>true</code>.
            @param {Function} fn A function which must return <code>true</code> if the passed Node is the required Node.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Node being tested.
            @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
            @return {Node} The found child or null if none was found
            </summary>
        </member>
        <member name="M:Ext.data.Node.getDepth">
            <summary>
            Returns depth of this node (the root node has a depth of 0)
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.data.Node.getOwnerTree">
            <summary>
            Returns the tree this node is in.
            @return {Tree}
            </summary>
        </member>
        <member name="M:Ext.data.Node.getPath(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the path for this node. The path can be used to expand or select this node programmatically.
            @param {String} attr (optional) The attr to use for the path (defaults to the node's id)
            @return {String} The path
            </summary>
        </member>
        <member name="M:Ext.data.Node.hasChildNodes">
            <summary>
            Returns true if this node has one or more child nodes, else false.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.indexOf(System.Object)">
            <summary>
            Returns the index of a child node
            @param {Node} node
            @return {Number} The index of the node or -1 if it was not found
            </summary>
        </member>
        <member name="M:Ext.data.Node.insertBefore(System.Object,System.Object)">
            <summary>
            Inserts the first node before the second node in this nodes childNodes collection.
            @param {Node} node The node to insert
            @param {Node} refNode The node to insert before (if null the node is appended)
            @return {Node} The inserted node
            </summary>
        </member>
        <member name="M:Ext.data.Node.isAncestor(System.Object)">
            <summary>
            Returns true if the passed node is an ancestor (at any point) of this node.
            @param {Node} node
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isExpandable">
            <summary>
            Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
            node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isFirst">
            <summary>
            Returns true if this node is the first child of its parent
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isLast">
            <summary>
            Returns true if this node is the last child of its parent
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isLeaf">
            <summary>
            Returns true if this node is a leaf
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.item(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the child node at the specified index.
            @param {Number} index
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Node.remove(System.Boolean)">
            <summary>
            Removes this node from its parent
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} this
            </summary>
        </member>
        <member name="M:Ext.data.Node.removeAll(System.Boolean)">
            <summary>
            Removes all child nodes from this node.
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} this
            </summary>
        </member>
        <member name="M:Ext.data.Node.removeChild(System.Object,System.Boolean)">
            <summary>
            Removes a child node from this node.
            @param {Node} node The node to remove
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} The removed node
            </summary>
        </member>
        <member name="M:Ext.data.Node.replaceChild(System.Object,System.Object)">
            <summary>
            Replaces one child node in this node with another.
            @param {Node} newChild The replacement node
            @param {Node} oldChild The node to replace
            @return {Node} The replaced node
            </summary>
        </member>
        <member name="M:Ext.data.Node.setId(SharpKit.JavaScript.JsString)">
            <summary>
            Changes the id of this node.
            @param {String} id The new id for the node.
            </summary>
        </member>
        <member name="M:Ext.data.Node.sort(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sorts this nodes children using the supplied sort function.
            @param {Function} fn A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
            @param {Object} scope (optional)The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
            </summary>
        </member>
        <member name="P:Ext.data.NodeConfig.id">
            <summary>
            The id for this node. If one is not specified, one is generated.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.data.NodeConfig.leaf">
            <summary>
            true if this node is a leaf and does not have children
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Record" -->
        <member name="M:Ext.data.Record.beginEdit">
            <summary>
            Begin an edit. While in edit mode, no events (e.g.. the <code>update</code> event)
            are relayed to the containing store.
            See also: <code>{@link #endEdit}</code> and <code>{@link #cancelEdit}</code>.
            </summary>
        </member>
        <member name="M:Ext.data.Record.cancelEdit">
            <summary>
            Cancels all changes made in the current edit operation.
            </summary>
        </member>
        <member name="M:Ext.data.Record.commit(System.Boolean)">
            <summary>
            Usually called by the {@link Ext.data.Store} which owns the Record.
            Commits all changes made to the Record since either creation, or the last commit operation.
            <p>Developers should subscribe to the {@link Ext.data.Store#update} event
            to have their code notified of commit operations.</p>
            @param {Boolean} silent (optional) True to skip notification of the owning
            store of the change (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.data.Record.copy(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a copy (clone) of this Record.
            @param {String} id (optional) A new Record id, defaults to the id
            of the record being copied. See <code>{@link #id}</code>.
            To generate a phantom record with a new id use:<pre><code>
            var rec = record.copy(); // clone the record
            Ext.data.Record.id(rec); // automatically generate a unique sequential id
            </code></pre>
            @return {Record}
            </summary>
        </member>
        <member name="M:Ext.data.Record.create(SharpKit.JavaScript.JsArray)">
            <summary>
            Generate a constructor for a specific Record layout.
            @param {Array} o An Array of <b>{@link Ext.data.Field Field}</b> definition objects.
            The constructor generated by this method may be used to create new Record instances. The data
            object must contain properties named after the {@link Ext.data.Field field}
            <b><tt>{@link Ext.data.Field#name}s</tt></b>.  Example usage:<pre><code>
            // create a Record constructor from a description of the fields
            var TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record
            {{@link Ext.data.Field#name name}: 'title', {@link Ext.data.Field#mapping mapping}: 'topic_title'},
            {name: 'author', mapping: 'username', allowBlank: false},
            {name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
            {name: 'lastPost', mapping: 'post_time', type: 'date'},
            {name: 'lastPoster', mapping: 'user2'},
            {name: 'excerpt', mapping: 'post_text', allowBlank: false},
            // In the simplest case, if no properties other than <tt>name</tt> are required,
            // a field definition may consist of just a String for the field name.
            'signature'
            ]);
            // create Record instance
            var myNewRecord = new TopicRecord(
            {
            title: 'Do my job please',
            author: 'noobie',
            totalPosts: 1,
            lastPost: new Date(),
            lastPoster: 'Animal',
            excerpt: 'No way dude!',
            signature: ''
            },
            id // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}
            );
            myStore.{@link Ext.data.Store#add add}(myNewRecord);
            </code></pre>
            @method create
            @return {Function} A constructor which is used to create new Records according
            to the definition. The constructor has the same signature as {@link #Record}.
            @static
            </summary>
        </member>
        <member name="M:Ext.data.Record.endEdit">
            <summary>
            End an edit. If any data was modified, the containing store is notified
            (ie, the store's <code>update</code> event will fire).
            </summary>
        </member>
        <member name="M:Ext.data.Record.get(SharpKit.JavaScript.JsString)">
            <summary>
            Get the value of the {@link Ext.data.Field#name named field}.
            @param {String} name The {@link Ext.data.Field#name name of the field} to get the value of.
            @return {Object} The value of the field.
            </summary>
        </member>
        <member name="M:Ext.data.Record.getChanges">
            <summary>
            Gets a hash of only the fields that have been modified since this Record was created or commited.
            @return Object
            </summary>
        </member>
        <member name="M:Ext.data.Record.id(System.Object)">
            <summary>
            Generates a sequential id. This method is typically called when a record is {@link #create}d
            and {@link #Record no id has been specified}. The returned id takes the form:
            <tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class="mdetail-params"><ul>
            <li><b><tt>PREFIX</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.PREFIX</tt>
            (defaults to <tt>'ext-record'</tt>)</p></li>
            <li><b><tt>AUTO_ID</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.AUTO_ID</tt>
            (defaults to <tt>1</tt> initially)</p></li>
            </ul></div>
            @param {Record} rec The record being created.  The record does not exist, it's a {@link #phantom}.
            @return {String} auto-generated string id, <tt>"ext-record-i++'</tt>;
            </summary>
        </member>
        <member name="M:Ext.data.Record.isModified(SharpKit.JavaScript.JsString)">
            <summary>
            Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
            since the load or last commit.
            @param {String} fieldName {@link Ext.data.Field.{@link Ext.data.Field#name}
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Record.isValid">
            <summary>
            By default returns <tt>false</tt> if any {@link Ext.data.Field field} within the
            record configured with <tt>{@link Ext.data.Field#allowBlank} = false</tt> returns
            <tt>true</tt> from an {@link Ext}.{@link Ext#isEmpty isempty} test.
            @return {Boolean}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Record.markDirty" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Record.#ctor(System.Object,System.Object)" -->
        <member name="M:Ext.data.Record.reject(System.Boolean)">
            <summary>
            Usually called by the {@link Ext.data.Store} which owns the Record.
            Rejects all changes made to the Record since either creation, or the last commit operation.
            Modified fields are reverted to their original values.
            <p>Developers should subscribe to the {@link Ext.data.Store#update} event
            to have their code notified of reject operations.</p>
            @param {Boolean} silent (optional) True to skip notification of the owning
            store of the change (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.data.Record.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Set the {@link Ext.data.Field#name named field} to the specified value.  For example:
            <pre><code>
            // record has a field named 'firstname'
            var Employee = Ext.data.Record.{@link #create}([
            {name: 'firstname'},
            ...
            ]);
            // update the 2nd record in the store:
            var rec = myStore.{@link Ext.data.Store#getAt getAt}(1);
            // set the value (shows dirty flag):
            rec.set('firstname', 'Betty');
            // commit the change (removes dirty flag):
            rec.{@link #commit}();
            // update the record in the store, bypass setting dirty flag,
            // and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}
            rec.{@link #data}['firstname'] = 'Wilma'; // updates record, but not the view
            rec.{@link #commit}(); // updates the view
            </code></pre>
            <b>Notes</b>:<div class="mdetail-params"><ul>
            <li>If the store has a writer and <code>autoSave=true</code>, each set()
            will execute an XHR to the server.</li>
            <li>Use <code>{@link #beginEdit}</code> to prevent the store's <code>update</code>
            event firing while using set().</li>
            <li>Use <code>{@link #endEdit}</code> to have the store's <code>update</code>
            event fire.</li>
            </ul></div>
            @param {String} name The {@link Ext.data.Field#name name of the field} to set.
            @param {String/Object/Array} value The value to set the field to.
            </summary>
        </member>
        <member name="P:Ext.data.Record.dirty">
            <summary>
            Readonly flag - true if this Record has been modified.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Record.editing">
            <summary>
            Readonly flag - true if this Record has been modified.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Record.error">
            <summary>
            Readonly flag - true if this Record has been modified.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Record.modified">
            <summary>
            This object contains a key and value storing the original values of all modified
            fields or is null if no fields have been modified.
            @property modified
            @type {Object}
            </summary>
        </member>
        <member name="P:Ext.data.Record.phantom">
            <summary>
            <tt>true</tt> when the record does not yet exist in a server-side database (see
            {@link #markDirty}).  Any record which has a real database pk set as its id property
            is NOT a phantom -- it's real.
            @property phantom
            @type {Boolean}
            </summary>
        </member>
        <member name="T:Ext.data.Request">
            <summary>
            @class Ext.data.Request
            A simple Request class used internally to the data package to provide more generalized remote-requests
            to a DataProxy.
            TODO Not yet implemented.  Implement in Ext.data.Store#execute
            </summary>
        </member>
        <member name="M:Ext.data.Request.#ctor(System.Object)">
            <summary>
            @class Ext.data.Request
            A simple Request class used internally to the data package to provide more generalized remote-requests
            to a DataProxy.
            TODO Not yet implemented.  Implement in Ext.data.Store#execute
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.action">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.callback">
            <summary>
            The function to call when request is complete
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.params">
            <summary>
            HTTP request params
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.reader">
            <summary>
            The DataReader instance which will parse the received response
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.rs">
            <summary>
            The Store recordset associated with the request.
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.scope">
            <summary>
            The scope of the callback funtion
            </summary>
        </member>
        <member name="T:Ext.data.Response">
            <summary>
            @class Ext.data.Response
            A generic response class to normalize response-handling internally to the framework.
            </summary>
        </member>
        <member name="M:Ext.data.Response.#ctor(System.Object,System.Object)">
            <summary>
            Ext.data.Response
            Experimental.  Do not use directly.
            </summary>
        </member>
        <member name="M:Ext.data.Response.#ctor(System.Object)">
            <summary>
            @class Ext.data.Response
            A generic response class to normalize response-handling internally to the framework.
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.action">
            <summary>
            {@link Ext.data.Api#actions}
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.data">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.message">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.raw">
            <summary>
            The raw response returned from server-code
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.records">
            <summary>
            related to the Request action
            </summary>
        </member>
        <member name="P:Ext.data.ResponseConfig.success">
            <summary>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.ScriptTagProxy" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.ScriptTagProxy.#ctor(System.Object)" -->
        <member name="M:Ext.data.SortTypes.asDate(System.Object)">
            <summary>
            Date sorting
            @param {Mixed} s The value being converted
            @return {Number} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asFloat(System.Object)">
            <summary>
            Float sorting
            @param {Mixed} s The value being converted
            @return {Float} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asInt(System.Object)">
            <summary>
            Integer sorting
            @param {Mixed} s The value being converted
            @return {Number} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCString(System.Object)">
            <summary>
            Case insensitive string
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only - Case insensitive
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.none(System.Object)">
            <summary>
            Default sort that does nothing
            @param {Mixed} s The value being converted
            @return {Mixed} The comparison value
            </summary>
        </member>
        <member name="P:Ext.data.SortTypes.stripTagsRE">
            <summary>
            The regular expression used to strip tags
            @type {RegExp}
            @property
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.autoDestroy">
            <summary>
            <tt>true</tt> to destroy the store when the component the store is bound
            to is destroyed (defaults to <tt>false</tt>).
            <p><b>Note</b>: this should be set to true when using stores that are bound to only 1 component.</p>
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.autoLoad">
            <summary>
            If <tt>{@link #data}</tt> is not specified, and if <tt>autoLoad</tt>
            is <tt>true</tt> or an <tt>Object</tt>, this store's {@link #load} method is automatically called
            after creation. If the value of <tt>autoLoad</tt> is an <tt>Object</tt>, this <tt>Object</tt> will
            be passed to the store's {@link #load} method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.StoreConfig.autoSave" -->
        <member name="P:Ext.data.StoreConfig.baseParams">
            <summary>
            <p>An object containing properties which are to be sent as parameters
            for <i>every</i> HTTP request.</p>
            <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>
            <p><b>Note</b>: <code>baseParams</code> may be superseded by any <code>params</code>
            specified in a <code>{@link #load}</code> request, see <code>{@link #load}</code>
            for more details.</p>
            This property may be modified after creation using the <code>{@link #setBaseParam}</code>
            method.
            @property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.StoreConfig.batch" -->
        <member name="P:Ext.data.StoreConfig.data">
            <summary>
            An inline data object readable by the <code>{@link #reader}</code>.
            Typically this option, or the <code>{@link #url}</code> option will be specified.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.defaultParamNames">
            <summary>
            Provides the default values for the {@link #paramNames} property. To globally modify the parameters
            for all stores, this object should be changed on the store prototype.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.StoreConfig.paramNames" -->
        <member name="P:Ext.data.StoreConfig.proxy">
            <summary>
            The {@link Ext.data.DataProxy DataProxy} object which provides
            access to a data object.  See <code>{@link #url}</code>.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.pruneModifiedRecords">
            <summary>
            <tt>true</tt> to clear all modified record information each time
            the store is loaded or when a record is removed (defaults to <tt>false</tt>). See {@link #getModifiedRecords}
            for the accessor method to retrieve the modified records.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.reader">
            <summary>
            The {@link Ext.data.DataReader Reader} object which processes the
            data object and returns an Array of {@link Ext.data.Record} objects which are cached keyed by their
            <b><tt>{@link Ext.data.Record#id id}</tt></b> property.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteSort">
            <summary>
            <tt>true</tt> if sorting is to be handled by requesting the <tt>{@link #proxy Proxy}</tt>
            to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache
            in place (defaults to <tt>false</tt>).
            <p>If <tt>remoteSort</tt> is <tt>true</tt>, then clicking on a {@link Ext.grid.Column Grid Column}'s
            {@link Ext.grid.Column#header header} causes the current page to be requested from the server appending
            the following two parameters to the <b><tt>{@link #load params}</tt></b>:<div class="mdetail-params"><ul>
            <li><b><tt>sort</tt></b> : String<p class="sub-desc">The <tt>name</tt> (as specified in the Record's
            {@link Ext.data.Field Field definition}) of the field to sort on.</p></li>
            <li><b><tt>dir</tt></b> : String<p class="sub-desc">The direction of the sort, 'ASC' or 'DESC' (case-sensitive).</p></li>
            </ul></div></p>
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.restful">
            <summary>
            Defaults to <tt>false</tt>.  Set to <tt>true</tt> to have the Store and the set
            Proxy operate in a RESTful manner. The store will automatically generate GET, POST,
            PUT and DELETE requests to the server. The HTTP method used for any given CRUD
            action is described in {@link Ext.data.Api#restActions}.  For additional information
            see {@link Ext.data.DataProxy#restful}.
            <p><b>Note</b>: if <code>{@link #restful}:true</code> <code>batch</code> will
            internally be set to <tt>false</tt>.</p>
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.sortInfo">
            <summary>
            A config object to specify the sort order in the request of a Store's
            {@link #load} operation.  Note that for local sorting, the <tt>direction</tt> property is
            case-sensitive. See also {@link #remoteSort} and {@link #paramNames}.
            For example:<pre><code>
            sortInfo: {
            field: 'fieldName',
            direction: 'ASC' // or 'DESC' (case sensitive for local sorting)
            }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.storeId">
            <summary>
            If passed, the id to use to register with the <b>{@link Ext.StoreMgr StoreMgr}</b>.
            <p><b>Note</b>: if a (deprecated) <tt>{@link #id}</tt> is specified it will supersede the <tt>storeId</tt>
            assignment.</p>
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.url">
            <summary>
            If a <tt>{@link #proxy}</tt> is not specified the <tt>url</tt> will be used to
            implicitly configure a {@link Ext.data.HttpProxy HttpProxy} if an <tt>url</tt> is specified.
            Typically this option, or the <code>{@link #data}</code> option will be specified.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.StoreConfig.writer" -->
        <member name="T:Ext.data.Tree">
            <summary>
            @class Ext.data.Tree
            @extends Ext.util.Observable
            Represents a tree data structure and bubbles all the events for its nodes. The nodes
            in the tree have most standard DOM functionality.
            @constructor
            @param {Node} root (optional) The root node
            </summary>
        </member>
        <member name="M:Ext.data.Tree.#ctor(System.Object)">
            <summary>
            @class Ext.data.Tree
            @extends Ext.util.Observable
            Represents a tree data structure and bubbles all the events for its nodes. The nodes
            in the tree have most standard DOM functionality.
            @constructor
            @param {Node} root (optional) The root node
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getNodeById(SharpKit.JavaScript.JsString)">
            <summary>
            Gets a node in this tree by its id.
            @param {String} id
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getRootNode">
            <summary>
            Returns the root node for this tree.
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Tree.setRootNode(System.Object)">
            <summary>
            Sets the root node for this tree.
            @param {Node} node
            @return {Node}
            </summary>
        </member>
        <member name="P:Ext.data.Tree.pathSeparator">
            <summary>
            @cfg {String} pathSeparator
            The token used to separate paths in node ids (defaults to '/').
            </summary>
        </member>
        <member name="P:Ext.data.TreeConfig.pathSeparator">
            <summary>
            The token used to separate paths in node ids (defaults to '/').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.XmlReader" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.XmlReader.#ctor(System.Object,System.Object)" -->
        <member name="P:Ext.data.XmlReaderConfig.idPath">
            <summary>
            The DomQuery path relative from the record element to the element that contains
            a record identifier value.
            @constructor
            Create a new XmlReader.
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.successProperty">
            <summary>
            The DomQuery path to the success attribute used by forms.
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.totalProperty">
            <summary>
            The DomQuery path from which to retrieve the total number of records
            in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
            paged from the remote server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.XmlStore" -->
        <member name="M:Ext.data.XmlStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <member name="T:Ext.data.XmlWriter">
            <summary>
            @class Ext.data.XmlWriter
            @extends Ext.data.DataWriter
            DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.
            XmlWriter uses an instance of {@link Ext.XTemplate} for maximum flexibility in defining your own custom XML schema if the default schema is not appropriate for your needs.
            See the {@link #tpl} configuration-property.
            </summary>
        </member>
        <member name="M:Ext.data.XmlWriter.#ctor(System.Object)">
            <summary>
            @class Ext.data.XmlWriter
            @extends Ext.data.DataWriter
            DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.
            XmlWriter uses an instance of {@link Ext.XTemplate} for maximum flexibility in defining your own custom XML schema if the default schema is not appropriate for your needs.
            See the {@link #tpl} configuration-property.
            </summary>
        </member>
        <member name="T:Ext.data.Api.Error">
            <summary>
            @class Ext.data.Api.Error
            @extends Ext.Error
            Error class for Ext.data.Api errors
            </summary>
        </member>
        <member name="M:Ext.data.Api.Error.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.data.Api.Error
            @extends Ext.Error
            Error class for Ext.data.Api errors
            </summary>
        </member>
        <member name="T:Ext.dd.DDProxy">
            <summary>
            @class Ext.dd.DDProxy
            A DragDrop implementation that inserts an empty, bordered div into
            the document that follows the cursor during drag operations.  At the time of
            the click, the frame div is resized to the dimensions of the linked html
            element, and moved to the exact location of the linked element.
            *
            References to the "frame" element refer to the single proxy element that
            was created to be dragged in place of all DDProxy elements on the
            page.
            *
            @extends Ext.dd.DD
            @constructor
            @param {String} id the id of the linked html element
            @param {String} sGroup the group of related DragDrop objects
            @param {object} config an object containing configurable attributes
            Valid properties for DDProxy in addition to those in DragDrop:
            resizeFrame, centerFrame, dragElId
            </summary>
        </member>
        <member name="M:Ext.dd.DDProxy.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            @class Ext.dd.DDProxy
            A DragDrop implementation that inserts an empty, bordered div into
            the document that follows the cursor during drag operations.  At the time of
            the click, the frame div is resized to the dimensions of the linked html
            element, and moved to the exact location of the linked element.
            *
            References to the "frame" element refer to the single proxy element that
            was created to be dragged in place of all DDProxy elements on the
            page.
            *
            @extends Ext.dd.DD
            @constructor
            @param {String} id the id of the linked html element
            @param {String} sGroup the group of related DragDrop objects
            @param {object} config an object containing configurable attributes
            Valid properties for DDProxy in addition to those in DragDrop:
            resizeFrame, centerFrame, dragElId
            </summary>
        </member>
        <member name="T:Ext.dd.DDTarget">
            <summary>
            @class Ext.dd.DDTarget
            A DragDrop implementation that does not move, but can be a drop
            target.  You would get the same result by simply omitting implementation
            for the event callbacks, but this way we reduce the processing cost of the
            event listener and the callbacks.
            @extends Ext.dd.DragDrop
            @constructor
            @param {String} id the id of the element that is a drop target
            @param {String} sGroup the group of related DragDrop objects
            @param {object} config an object containing configurable attributes
            Valid properties for DDTarget in addition to those in
            DragDrop:
            none
            </summary>
        </member>
        <member name="M:Ext.dd.DDTarget.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            @class Ext.dd.DDTarget
            A DragDrop implementation that does not move, but can be a drop
            target.  You would get the same result by simply omitting implementation
            for the event callbacks, but this way we reduce the processing cost of the
            event listener and the callbacks.
            @extends Ext.dd.DragDrop
            @constructor
            @param {String} id the id of the element that is a drop target
            @param {String} sGroup the group of related DragDrop objects
            @param {object} config an object containing configurable attributes
            Valid properties for DDTarget in addition to those in
            DragDrop:
            none
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.dd.DragDrop" -->
        <member name="M:Ext.dd.DragDrop.addInvalidHandleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Lets you specify a css class of elements that will not initiate a drag
            @method addInvalidHandleClass
            @param {string} cssClass the class of the elements you wish to ignore
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addInvalidHandleId(SharpKit.JavaScript.JsString)">
            <summary>
            Lets you to specify an element id for a child of a drag handle
            that should not initiate a drag
            @method addInvalidHandleId
            @param {string} id the element id of the element you wish to ignore
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addInvalidHandleType(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to specify a tag name that should not start a drag operation
            when clicked.  This is designed to facilitate embedding links within a
            drag handle that do something other than start the drag.
            @method addInvalidHandleType
            @param {string} tagName the type of element to exclude
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.addToGroup(System.Object)">
            <summary>
            Add this instance to a group of related drag/drop objects.  All
            instances belong to at least one group, and can belong to as many
            groups as needed.
            @method addToGroup
            @param sGroup {string} the name of the group
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.applyConfig">
            <summary>
            Applies the configuration parameters that were passed into the constructor.
            This is supposed to happen at each level through the inheritance chain.  So
            a DDProxy implentation will execute apply config on DDProxy, DD, and
            DragDrop in order to get all of the parameters that are available in
            each object.
            @method applyConfig
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4Drag(System.Object)">
            <summary>
            Code that executes immediately before the onDrag event
            @method b4Drag
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4DragDrop(System.Object)">
            <summary>
            Code that executes immediately before the onDragDrop event
            @method b4DragDrop
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4DragOut(System.Object)">
            <summary>
            Code that executes immediately before the onDragOut event
            @method b4DragOut
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4DragOver(System.Object)">
            <summary>
            Code that executes immediately before the onDragOver event
            @method b4DragOver
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4EndDrag(System.Object)">
            <summary>
            Code that executes immediately before the endDrag event
            @method b4EndDrag
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4MouseDown(System.Object)">
            <summary>
            Code executed immediately before the onMouseDown event
            @method b4MouseDown
            @param {Event} e the mousedown event
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.b4StartDrag(System.Object,System.Object)">
            <summary>
            Code that executes immediately before the startDrag event
            @method b4StartDrag
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.clearConstraints">
            <summary>
            Clears any constraints applied to this instance.  Also clears ticks
            since they can't exist independent of a constraint at this time.
            @method clearConstraints
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.clearTicks">
            <summary>
            Clears any tick interval defined for this instance
            @method clearTicks
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.constrainTo(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes the drag drop object's constraints to restrict movement to a certain element.
            *
            Usage:
            <pre><code>
            var dd = new Ext.dd.DDProxy("dragDiv1", "proxytest",
            { dragElId: "existingProxyDiv" });
            dd.startDrag = function(){
            this.constrainTo("parent-id");
            };
            </code></pre>
            Or you can initalize it using the {@link Ext.Element} object:
            <pre><code>
            Ext.get("dragDiv1").initDDProxy("proxytest", {dragElId: "existingProxyDiv"}, {
            startDrag : function(){
            this.constrainTo("parent-id");
            }
            });
            </code></pre>
            @param {Mixed} constrainTo The element to constrain to.
            @param {Object/Number} pad (optional) Pad provides a way to specify "padding" of the constraints,
            and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or
            an object containing the sides to pad. For example: {right:10, bottom:10}
            @param {Boolean} inContent (optional) Constrain the draggable in the content box of the element (inside padding and borders)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.dd.DragDrop.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)" -->
        <member name="M:Ext.dd.DragDrop.endDrag(System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.getDragEl">
            <summary>
            Returns a reference to the actual element to drag.  By default this is
            the same as the html element, but it can be assigned to another
            element. An example of this can be found in Ext.dd.DDProxy
            @method getDragEl
            @return {HTMLElement} the html element
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.getEl">
            <summary>
            Returns a reference to the linked element
            @method getEl
            @return {HTMLElement} the html element
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.getTick(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Normally the drag element is moved pixel by pixel, but we can specify
            that it move a number of pixels at a time.  This method resolves the
            location when we have it set up like this.
            @method getTick
            @param {int} val where we want to place the object
            @param {int[]} tickArray sorted array of valid points
            @return {int} the closest tick
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.handleMouseDown(System.Object,Ext.dd.DragDrop)">
            <summary>
            Fired when this object is clicked
            @method handleMouseDown
            @param {Event} e
            @param {Ext.dd.DragDrop} oDD the clicked dd object (this dd obj)
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.handleOnAvailable">
            <summary>
            Executed when the linked element is available
            @method handleOnAvailable
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.init(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets up the DragDrop object.  Must be called in the constructor of any
            Ext.dd.DragDrop subclass
            @method init
            @param id the id of the linked element
            @param {String} sGroup the group of related items
            @param {object} config configuration attributes
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.initTarget(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Initializes Targeting functionality only... the object does not
            get a mousedown handler.
            @method initTarget
            @param id the id of the linked element
            @param {String} sGroup the group of related items
            @param {object} config configuration attributes
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.isLocked">
            <summary>
            Returns true if this instance is locked, or the drag drop mgr is locked
            (meaning that all drag/drop is disabled on the page.)
            @method isLocked
            @return {boolean} true if this obj or all drag/drop is locked, else
            false
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.isValidHandleChild(SharpKit.Html4.HtmlElement)">
            <summary>
            Checks the tag exclusion list to see if this click should be ignored
            @method isValidHandleChild
            @param {HTMLElement} node the HTMLElement to evaluate
            @return {boolean} true if this is a valid tag type, false if not
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.lock">
            <summary>
            Lock this instance
            @method lock
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onAvailable">
            <summary>
            Override the onAvailable method to do what is needed after the initial
            position was determined.
            @method onAvailable
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDrag(System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragDrop(System.Object,System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragEnter(System.Object,System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragOut(System.Object,System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onDragOver(System.Object,System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onInvalidDrop(System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onMouseDown(System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.onMouseUp(System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeFromGroup(SharpKit.JavaScript.JsString)">
            <summary>
            Remove's this instance from the supplied interaction group
            @method removeFromGroup
            @param {string}  sGroup  The group to drop
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an invalid css class
            @method removeInvalidHandleClass
            @param {string} cssClass the class of the element(s) you wish to
            re-enable
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleId(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an invalid handle id
            @method removeInvalidHandleId
            @param {string} id the id of the element to re-enable
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.removeInvalidHandleType(SharpKit.JavaScript.JsString)">
            <summary>
            Unsets an excluded tag name set by addInvalidHandleType
            @method removeInvalidHandleType
            @param {string} tagName the type of element to unexclude
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.resetConstraints">
            <summary>
            resetConstraints must be called if you manually reposition a dd element.
            @method resetConstraints
            @param {boolean} maintainOffset
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setDragElId(System.Object)">
            <summary>
            Allows you to specify that an element other than the linked element
            will be moved with the cursor during a drag
            @method setDragElId
            @param id {string} the id of the element that will be used to initiate the drag
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setHandleElId(System.Object)">
            <summary>
            Allows you to specify a child of the linked element that should be
            used to initiate the drag operation.  An example of this would be if
            you have a content div with text and links.  Clicking anywhere in the
            content area would normally start the drag operation.  Use this method
            to specify that an element inside of the content div is the element
            that starts the drag operation.
            @method setHandleElId
            @param id {string} the id of the element that will be used to
            initiate the drag.
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setInitPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Stores the initial placement of the linked element.
            @method setInitPosition
            @param {int} diffX   the X offset, default 0
            @param {int} diffY   the Y offset, default 0
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setOuterHandleElId(System.Object)">
            <summary>
            Allows you to set an element outside of the linked element as a drag
            handle
            @method setOuterHandleElId
            @param id the id of the element that will be used to initiate the drag
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setPadding(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Configures the padding for the target zone in px.  Effectively expands
            (or reduces) the virtual object size for targeting calculations.
            Supports css-style shorthand; if only one parameter is passed, all sides
            will have that padding, and if only two are passed, the top and bottom
            will have the first param, the left and right the second.
            @method setPadding
            @param {int} iTop    Top pad
            @param {int} iRight  Right pad
            @param {int} iBot    Bot pad
            @param {int} iLeft   Left pad
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setStartPosition(System.Object)">
            <summary>
            Sets the start position of the element.  This is set when the obj
            is initialized, the reset when a drag is started.
            @method setStartPosition
            @param pos current position (from previous lookup)
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setXConstraint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            By default, the element can be dragged any place on the screen.  Use
            this method to limit the horizontal travel of the element.  Pass in
            0,0 for the parameters if you want to lock the drag to the y axis.
            @method setXConstraint
            @param {int} iLeft the number of pixels the element can move to the left
            @param {int} iRight the number of pixels the element can move to the
            right
            @param {int} iTickSize optional parameter for specifying that the
            element
            should move iTickSize pixels at a time.
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setXTicks(System.Object,System.Object)">
            <summary>
            Create the array of horizontal tick marks if an interval was specified
            in setXConstraint().
            @method setXTicks
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setYConstraint(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            By default, the element can be dragged any place on the screen.  Set
            this to limit the vertical travel of the element.  Pass in 0,0 for the
            parameters if you want to lock the drag to the x axis.
            @method setYConstraint
            @param {int} iUp the number of pixels the element can move up
            @param {int} iDown the number of pixels the element can move down
            @param {int} iTickSize optional parameter for specifying that the
            element should move iTickSize pixels at a time.
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.setYTicks(System.Object,System.Object)">
            <summary>
            Create the array of vertical tick marks if an interval was specified in
            setYConstraint().
            @method setYTicks
            @private
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.startDrag(System.Object,System.Object)">
            <summary>
            override this
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.toString">
            <summary>
            toString method
            @method toString
            @return {string} string representation of the dd obj
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.unlock">
            <summary>
            Unlock this instace
            @method unlock
            </summary>
        </member>
        <member name="M:Ext.dd.DragDrop.unreg">
            <summary>
            Remove all drag and drop hooks for this element
            @method unreg
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.__ygDragDrop">
            <summary>
            Internal typeof flag
            @property __ygDragDrop
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop._domRef">
            <summary>
            Cached reference to the linked element
            @property _domRef
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.available">
            <summary>
            The available property is false until the linked dom element is accessible.
            @property available
            @type boolean
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.config">
            <summary>
            Configuration attributes passed into the constructor
            @property config
            @type object
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.constrainX">
            <summary>
            Set to true when horizontal contraints are applied
            @property constrainX
            @type boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.constrainY">
            <summary>
            Set to true when vertical contraints are applied
            @property constrainY
            @type boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.dragElId">
            <summary>
            The id of the element that will be dragged.  By default this is same
            as the linked element, but could be changed to another element. Ex:
            Ext.dd.DDProxy
            @property dragElId
            @type String
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.groups">
            <summary>
            The group defines a logical collection of DragDrop objects that are
            related.  Instances only get events when interacting with other
            DragDrop object in the same group.  This lets us define multiple
            groups using a single DragDrop subclass if we want.
            @property groups
            @type object An object in the format {'group1':true, 'group2':true}
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.handleElId">
            <summary>
            The ID of the element that initiates the drag operation.  By default
            this is the linked element, but could be changed to be a child of this
            element.  This lets us do things like only starting the drag when the
            header element within the linked html element is clicked.
            @property handleElId
            @type String
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.hasOuterHandles">
            <summary>
            By default, drags can only be initiated if the mousedown occurs in the
            region the linked element is.  This is done in part to work around a
            bug in some browsers that mis-report the mousedown if the previous
            mouseup happened outside of the window.  This property is set to true
            if outer handles are defined.
            *
            @property hasOuterHandles
            @type boolean
            @default false
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.id">
            <summary>
            The id of the element associated with this object.  This is what we
            refer to as the "linked element" because the size and position of
            this element is used to determine when the drag and drop objects have
            interacted.
            @property id
            @type String
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.invalidHandleClasses">
            <summary>
            An Array of CSS class names for elements to be considered in valid as drag handles.
            @property invalidHandleClasses
            @type Array
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.invalidHandleIds">
            <summary>
            An object who's property names identify the IDs of elements to be considered invalid as drag handles.
            A non-null property value identifies the ID as invalid. For example, to prevent
            dragging from being initiated on element ID "foo", use:<pre><code>
            {
            foo: true
            }</code></pre>
            @property invalidHandleIds
            @type Object
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.invalidHandleTypes">
            <summary>
            An object who's property names identify HTML tags to be considered invalid as drag handles.
            A non-null property value identifies the tag as invalid. Defaults to the
            following value which prevents drag operations from being initiated by &lt;a> elements:<pre><code>
            {
            A: "A"
            }</code></pre>
            @property invalidHandleTypes
            @type Object
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.isTarget">
            <summary>
            By default, all instances can be a drop target.  This can be disabled by
            setting isTarget to false.
            @property isTarget
            @type boolean
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.locked">
            <summary>
            Individual drag/drop instances can be locked.  This will prevent
            onmousedown start drag.
            @property locked
            @type boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.maintainOffset">
            <summary>
            Maintain offsets when we resetconstraints.  Set to true when you want
            the position of the element relative to its parent to stay the same
            when the page changes
            *
            @property maintainOffset
            @type boolean
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.maxX">
            <summary>
            The right constraint
            @property maxX
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.maxY">
            <summary>
            The down constraint
            @property maxY
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.minX">
            <summary>
            The left constraint
            @property minX
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.minY">
            <summary>
            The up constraint
            @property minY
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.moveOnly">
            <summary>
            When set to true, other DD objects in cooperating DDGroups do not receive
            notification events when this DD object is dragged over them. Defaults to false.
            @property moveOnly
            @type boolean
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.padding">
            <summary>
            The padding configured for this drag and drop object for calculating
            the drop zone intersection with this object.
            @property padding
            @type int[] An array containing the 4 padding values: [top, right, bottom, left]
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.primaryButtonOnly">
            <summary>
            By default the drag and drop instance will only respond to the primary
            button click (left button for a right-handed mouse).  Set to true to
            allow drag and drop to start with any mouse click that is propogated
            by the browser
            @property primaryButtonOnly
            @type boolean
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.startPageX">
            <summary>
            The linked element's absolute X position at the time the drag was
            started
            @property startPageX
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.startPageY">
            <summary>
            The linked element's absolute X position at the time the drag was
            started
            @property startPageY
            @type int
            @private
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.xTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a
            horizontal graduation/interval.  This array is generated automatically
            when you define a tick interval.
            @property xTicks
            @type int[]
            </summary>
        </member>
        <member name="P:Ext.dd.DragDrop.yTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a
            vertical graduation/interval.  This array is generated automatically
            when you define a tick interval.
            @property yTicks
            @type int[]
            </summary>
        </member>
        <member name="T:Ext.dd.DragTracker">
            <summary>
            @class Ext.dd.DragTracker
            @extends Ext.util.Observable
            A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,
            as well as during the drag. This is useful for components such as {@link Ext.slider.MultiSlider}, where there is
            an element that can be dragged around to change the Slider's value.
            DragTracker provides a series of template methods that should be overridden to provide functionality
            in response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.
            See {@link Ext.slider.MultiSlider}'s initEvents function for an example implementation.
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.#ctor(System.Object)">
            <summary>
            @cfg {Boolean/Number} autoStart
            Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.
            Specify a Number for the number of milliseconds to defer trigger start.
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.getDragTarget">
            <summary>
            Returns the drag target
            @return {Ext.Element} The element currently being tracked
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onBeforeStart(System.Object)">
            <summary>
            Template method which should be overridden by each DragTracker instance. Called when the user first clicks and
            holds the mouse button down. Return false to disallow the drag
            @param {Ext.EventObject} e The event object
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onDrag(System.Object)">
            <summary>
            Template method which should be overridden by each DragTracker instance. Called whenever a drag has been detected.
            @param {Ext.EventObject} e The event object
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onEnd(System.Object)">
            <summary>
            Template method which should be overridden by each DragTracker instance. Called when a drag operation has been completed
            (e.g. the user clicked and held the mouse down, dragged the element and then released the mouse button)
            @param {Ext.EventObject} e The event object
            </summary>
        </member>
        <member name="M:Ext.dd.DragTracker.onStart(System.Object)">
            <summary>
            Template method which should be overridden by each DragTracker instance. Called when a drag operation starts
            (e.g. the user has moved the tracked element beyond the specified tolerance)
            @param {Ext.EventObject} e The event object
            </summary>
        </member>
        <member name="P:Ext.dd.DragTracker.active">
            <summary>
            @cfg {Boolean} active
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.dd.DragTracker.autoStart">
            <summary>
            @cfg {Boolean/Number} autoStart
            Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.
            Specify a Number for the number of milliseconds to defer trigger start.
            </summary>
        </member>
        <member name="P:Ext.dd.DragTracker.tolerance">
            <summary>
            @cfg {Number} tolerance
            Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to <tt>5</tt>.
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.active">
            <summary>
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.autoStart">
            <summary>
            Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.
            Specify a Number for the number of milliseconds to defer trigger start.
            </summary>
        </member>
        <member name="P:Ext.dd.DragTrackerConfig.tolerance">
            <summary>
            Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to <tt>5</tt>.
            </summary>
        </member>
        <member name="T:Ext.dd.DragZone">
            <summary>
            @class Ext.dd.DragZone
            @extends Ext.dd.DragSource
            <p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>
            <p>This class does not move the drag target nodes, but a proxy element which may contain
            any DOM structure you wish. The DOM element to show in the proxy is provided by either a
            provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}</p>
            <p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some
            application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class
            is the most efficient way to "activate" those nodes.</p>
            <p>By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.
            However a simpler way to allow a DragZone to manage any number of draggable elements is to configure
            the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
            {@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following
            technique. Knowledge of the use of the DataView is required:</p><pre><code>
            myDataView.on('render', function(v) {
            myDataView.dragZone = new Ext.dd.DragZone(v.getEl(), {
            //      On receipt of a mousedown event, see if it is within a DataView node.
            //      Return a drag data object if so.
            getDragData: function(e) {
            //          Use the DataView's own itemSelector (a mandatory property) to
            //          test if the mousedown is within one of the DataView's nodes.
            var sourceEl = e.getTarget(v.itemSelector, 10);
            //          If the mousedown is within a DataView node, clone the node to produce
            //          a ddel element for use by the drag proxy. Also add application data
            //          to the returned data object.
            if (sourceEl) {
            d = sourceEl.cloneNode(true);
            d.id = Ext.id();
            return {
            ddel: d,
            sourceEl: sourceEl,
            repairXY: Ext.fly(sourceEl).getXY(),
            sourceStore: v.store,
            draggedRecord: v.{@link Ext.DataView#getRecord getRecord}(sourceEl)
            }
            }
            },
            //      Provide coordinates for the proxy to slide back to on failed drag.
            //      This is the original XY coordinates of the draggable element captured
            //      in the getDragData method.
            getRepairXY: function() {
            return this.dragData.repairXY;
            }
            });
            });</code></pre>
            See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which
            cooperates with this DragZone.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.afterRepair">
            <summary>
            Called after a repair of an invalid drop. By default, highlights this.dragData.ddel
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.dd.DragZone
            @extends Ext.dd.DragSource
            <p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>
            <p>This class does not move the drag target nodes, but a proxy element which may contain
            any DOM structure you wish. The DOM element to show in the proxy is provided by either a
            provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}</p>
            <p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some
            application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class
            is the most efficient way to "activate" those nodes.</p>
            <p>By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.
            However a simpler way to allow a DragZone to manage any number of draggable elements is to configure
            the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
            {@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following
            technique. Knowledge of the use of the DataView is required:</p><pre><code>
            myDataView.on('render', function(v) {
            myDataView.dragZone = new Ext.dd.DragZone(v.getEl(), {
            //      On receipt of a mousedown event, see if it is within a DataView node.
            //      Return a drag data object if so.
            getDragData: function(e) {
            //          Use the DataView's own itemSelector (a mandatory property) to
            //          test if the mousedown is within one of the DataView's nodes.
            var sourceEl = e.getTarget(v.itemSelector, 10);
            //          If the mousedown is within a DataView node, clone the node to produce
            //          a ddel element for use by the drag proxy. Also add application data
            //          to the returned data object.
            if (sourceEl) {
            d = sourceEl.cloneNode(true);
            d.id = Ext.id();
            return {
            ddel: d,
            sourceEl: sourceEl,
            repairXY: Ext.fly(sourceEl).getXY(),
            sourceStore: v.store,
            draggedRecord: v.{@link Ext.DataView#getRecord getRecord}(sourceEl)
            }
            }
            },
            //      Provide coordinates for the proxy to slide back to on failed drag.
            //      This is the original XY coordinates of the draggable element captured
            //      in the getDragData method.
            getRepairXY: function() {
            return this.dragData.repairXY;
            }
            });
            });</code></pre>
            See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which
            cooperates with this DragZone.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.getDragData(System.Object)">
            <summary>
            Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}
            for a valid target to drag based on the mouse down. Override this method
            to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
            object has a "ddel" attribute (with an HTML Element) for other functions to work.
            @param {EventObject} e The mouse down event
            @return {Object} The dragData
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.getRepairXY(System.Object)">
            <summary>
            Called before a repair of an invalid drop to get the XY to animate to. By default returns
            the XY of this.dragData.ddel
            @param {EventObject} e The mouse up event
            @return {Array} The xy location (e.g. [100, 200])
            </summary>
        </member>
        <member name="M:Ext.dd.DragZone.onInitDrag(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
            this.dragData.ddel
            @param {Number} x The x position of the click on the dragged object
            @param {Number} y The y position of the click on the dragged object
            @return {Boolean} true to continue the drag, false to cancel
            </summary>
        </member>
        <member name="P:Ext.dd.DragZoneConfig.containerScroll">
            <summary>
            True to register this container with the Scrollmanager
            for auto scrolling during drag operations.
            </summary>
        </member>
        <member name="P:Ext.dd.DragZoneConfig.hlColor">
            <summary>
            The color to use when visually highlighting the drag source in the afterRepair
            method after a failed drop (defaults to "c3daf9" - light blue)
            </summary>
        </member>
        <member name="T:Ext.dd.DropTarget">
            <summary>
            @class Ext.dd.DropTarget
            @extends Ext.dd.DDTarget
            A simple class that provides the basic implementation needed to make any element a drop target that can have
            draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.dd.DropTarget
            @extends Ext.dd.DDTarget
            A simple class that provides the basic implementation needed to make any element a drop target that can have
            draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyDrop(Ext.dd.DragSource,System.Object,System.Object)">
            <summary>
            The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has
            been dropped on it.  This method has no default implementation and returns false, so you must provide an
            implementation that does something to process the drop event and returns true so that the drag source's
            repair action does not run.
            @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
            @param {Event} e The event
            @param {Object} data An object containing arbitrary data supplied by the drag source
            @return {Boolean} True if the drop was valid, else false
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyEnter(Ext.dd.DragSource,System.Object,System.Object)">
            <summary>
            The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the
            target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
            and returns the dropAllowed config value.  This method should be overridden if drop validation is required.
            @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
            @param {Event} e The event
            @param {Object} data An object containing arbitrary data supplied by the drag source
            @return {String} status The CSS class that communicates the drop status back to the source so that the
            underlying {@link Ext.dd.StatusProxy} can be updated
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyOut(Ext.dd.DragSource,System.Object,System.Object)">
            <summary>
            The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged
            out of the target without dropping.  This default implementation simply removes the CSS class specified by
            overClass (if any) from the drop element.
            @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
            @param {Event} e The event
            @param {Object} data An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="M:Ext.dd.DropTarget.notifyOver(Ext.dd.DragSource,System.Object,System.Object)">
            <summary>
            The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.
            This method will be called on every mouse movement while the drag source is over the drop target.
            This default implementation simply returns the dropAllowed config value.
            @param {Ext.dd.DragSource} source The drag source that was dragged over this drop target
            @param {Event} e The event
            @param {Object} data An object containing arbitrary data supplied by the drag source
            @return {String} status The CSS class that communicates the drop status back to the source so that the
            underlying {@link Ext.dd.StatusProxy} can be updated
            </summary>
        </member>
        <member name="P:Ext.dd.DropTarget.dropAllowed">
            <summary>
            @cfg {String} dropAllowed
            The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.dd.DropTarget.dropNotAllowed">
            <summary>
            @cfg {String} dropNotAllowed
            The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="P:Ext.dd.DropTargetConfig.ddGroup">
            <summary>
            A named drag drop group to which this object belongs.  If a group is specified, then this object will only
            interact with other drag drop objects in the same group (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.dd.DropTargetConfig.dropAllowed">
            <summary>
            The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.dd.DropTargetConfig.dropNotAllowed">
            <summary>
            The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="P:Ext.dd.DropTargetConfig.overClass">
            <summary>
            The CSS class applied to the drop target element while the drag source is over it (defaults to "").
            </summary>
        </member>
        <member name="T:Ext.dd.DropZone">
            <summary>
            @class Ext.dd.DropZone
            @extends Ext.dd.DropTarget
            <p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>
            <p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
            However a simpler way to allow a DropZone to manage any number of target elements is to configure the
            DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
            {@link Ext.DomQuery} selector.</p>
            <p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
            a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
            {@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
            of these methods to provide application-specific behaviour for these events to update both
            application state, and UI state.</p>
            <p>For example to make a GridPanel a cooperating target with the example illustrated in
            {@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>
            myGridPanel.on('render', function() {
            myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
            //      If the mouse is over a grid row, return that node. This is
            //      provided as the "target" parameter in all "onNodeXXXX" node event handling functions
            getTargetFromEvent: function(e) {
            return e.getTarget(myGridPanel.getView().rowSelector);
            },
            //      On entry into a target node, highlight that node.
            onNodeEnter : function(target, dd, e, data){
            Ext.fly(target).addClass('my-row-highlight-class');
            },
            //      On exit from a target node, unhighlight that node.
            onNodeOut : function(target, dd, e, data){
            Ext.fly(target).removeClass('my-row-highlight-class');
            },
            //      While over a target node, return the default drop allowed class which
            //      places a "tick" icon into the drag proxy.
            onNodeOver : function(target, dd, e, data){
            return Ext.dd.DropZone.prototype.dropAllowed;
            },
            //      On node drop we can interrogate the target to find the underlying
            //      application object that is the real target of the dragged data.
            //      In this case, it is a Record in the GridPanel's Store.
            //      We can use the data set up by the DragZone's getDragData method to read
            //      any data we decided to attach in the DragZone's getDragData method.
            onNodeDrop : function(target, dd, e, data){
            var rowIndex = myGridPanel.getView().findRowIndex(target);
            var r = myGridPanel.getStore().getAt(rowIndex);
            Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
            ' on Record id ' + r.id);
            return true;
            }
            });
            }
            </code></pre>
            See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
            cooperates with this DropZone.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.DropZone.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.dd.DropZone
            @extends Ext.dd.DropTarget
            <p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>
            <p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
            However a simpler way to allow a DropZone to manage any number of target elements is to configure the
            DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
            mouse event to see if it has taken place within an element, or class of elements. This is easily done
            by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
            {@link Ext.DomQuery} selector.</p>
            <p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
            a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
            {@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
            of these methods to provide application-specific behaviour for these events to update both
            application state, and UI state.</p>
            <p>For example to make a GridPanel a cooperating target with the example illustrated in
            {@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>
            myGridPanel.on('render', function() {
            myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {
            //      If the mouse is over a grid row, return that node. This is
            //      provided as the "target" parameter in all "onNodeXXXX" node event handling functions
            getTargetFromEvent: function(e) {
            return e.getTarget(myGridPanel.getView().rowSelector);
            },
            //      On entry into a target node, highlight that node.
            onNodeEnter : function(target, dd, e, data){
            Ext.fly(target).addClass('my-row-highlight-class');
            },
            //      On exit from a target node, unhighlight that node.
            onNodeOut : function(target, dd, e, data){
            Ext.fly(target).removeClass('my-row-highlight-class');
            },
            //      While over a target node, return the default drop allowed class which
            //      places a "tick" icon into the drag proxy.
            onNodeOver : function(target, dd, e, data){
            return Ext.dd.DropZone.prototype.dropAllowed;
            },
            //      On node drop we can interrogate the target to find the underlying
            //      application object that is the real target of the dragged data.
            //      In this case, it is a Record in the GridPanel's Store.
            //      We can use the data set up by the DragZone's getDragData method to read
            //      any data we decided to attach in the DragZone's getDragData method.
            onNodeDrop : function(target, dd, e, data){
            var rowIndex = myGridPanel.getView().findRowIndex(target);
            var r = myGridPanel.getStore().getAt(rowIndex);
            Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
            ' on Record id ' + r.id);
            return true;
            }
            });
            }
            </code></pre>
            See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
            cooperates with this DropZone.
            @constructor
            @param {Mixed} el The container element
            @param {Object} config
            </summary>
        </member>
        <member name="T:Ext.dd.PanelProxy">
            <summary>
            @class Ext.dd.PanelProxy
            A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally
            for the Panel's drag drop implementation, and should never need to be created directly.
            @constructor
            @param panel The {@link Ext.Panel} to proxy for
            @param config Configuration options
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.dd.PanelProxy
            A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally
            for the Panel's drag drop implementation, and should never need to be created directly.
            @constructor
            @param panel The {@link Ext.Panel} to proxy for
            @param config Configuration options
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.getEl">
            <summary>
            Gets the proxy's element
            @return {Element} The proxy's element
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.getGhost">
            <summary>
            Gets the proxy's ghost element
            @return {Element} The proxy's ghost element
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.getProxy">
            <summary>
            Gets the proxy's element
            @return {Element} The proxy's element
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.hide">
            <summary>
            Hides the proxy
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.moveProxy(SharpKit.Html4.HtmlElement,SharpKit.Html4.HtmlElement)">
            <summary>
            Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel
            to keep the proxy sync'd to the Panel's location.
            @param {HTMLElement} parentNode The proxy's parent DOM node
            @param {HTMLElement} before (optional) The sibling node before which the proxy should be inserted (defaults
            to the parent's last child if not specified)
            </summary>
        </member>
        <member name="M:Ext.dd.PanelProxy.show">
            <summary>
            Shows the proxy
            </summary>
        </member>
        <member name="P:Ext.dd.PanelProxy.insertProxy">
            <summary>
            @cfg {Boolean} insertProxy True to insert a placeholder proxy element while dragging the panel,
            false to drag with no proxy (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.dd.PanelProxyConfig.insertProxy">
            <summary>
            True to insert a placeholder proxy element while dragging the panel,
            false to drag with no proxy (defaults to true).
            </summary>
        </member>
        <member name="T:Ext.dd.StatusProxy">
            <summary>
            @class Ext.dd.StatusProxy
            A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the
            default drag proxy used by all Ext.dd components.
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.getEl">
            <summary>
            Returns the underlying proxy {@link Ext.Layer}
            @return {Ext.Layer} el
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.getGhost">
            <summary>
            Returns the ghost element
            @return {Ext.Element} el
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.hide(System.Boolean)">
            <summary>
            Hides the proxy
            @param {Boolean} clear True to reset the status and clear the ghost contents, false to preserve them
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.repair(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Causes the proxy to return to its position of origin via an animation.  Should be called after an
            invalid drop operation by the item being dragged.
            @param {Array} xy The XY position of the element ([x, y])
            @param {Function} callback The function to call after the repair is complete.
            @param {Object} scope The scope (<code>this</code> reference) in which the callback function is executed. Defaults to the browser window.
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.reset(System.Boolean)">
            <summary>
            Resets the status indicator to the default dropNotAllowed value
            @param {Boolean} clearGhost True to also remove all content from the ghost, false to preserve it
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.setStatus(SharpKit.JavaScript.JsString)">
            <summary>
            Updates the proxy's visual element to indicate the status of whether or not drop is allowed
            over the current target element.
            @param {String} cssClass The css class for the new drop status indicator image
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.show">
            <summary>
            Displays this proxy
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.#ctor(System.Object)">
            <summary>
            @class Ext.dd.StatusProxy
            A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the
            default drag proxy used by all Ext.dd components.
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.stop">
            <summary>
            Stops the repair animation if it's currently running
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.sync">
            <summary>
            Force the Layer to sync its shadow and shim positions to the element
            </summary>
        </member>
        <member name="M:Ext.dd.StatusProxy.update(System.Object)">
            <summary>
            Updates the contents of the ghost element
            @param {String/HTMLElement} html The html that will replace the current innerHTML of the ghost element, or a
            DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first).
            </summary>
        </member>
        <member name="P:Ext.dd.StatusProxy.dropAllowed">
            <summary>
            @cfg {String} dropAllowed
            The CSS class to apply to the status element when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.dd.StatusProxy.dropNotAllowed">
            <summary>
            @cfg {String} dropNotAllowed
            The CSS class to apply to the status element when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="P:Ext.dd.StatusProxyConfig.dropAllowed">
            <summary>
            The CSS class to apply to the status element when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.dd.StatusProxyConfig.dropNotAllowed">
            <summary>
            The CSS class to apply to the status element when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="T:Ext.direct.JsonProvider">
            <summary>
            @class Ext.direct.JsonProvider
            @extends Ext.direct.Provider
            </summary>
        </member>
        <member name="T:Ext.direct.Provider">
            <summary>
            @class Ext.direct.Provider
            @extends Ext.util.Observable
            <p>Ext.direct.Provider is an abstract class meant to be extended.</p>
            <p>For example ExtJs implements the following subclasses:</p>
            <pre><code>
            Provider
            |
            +---{@link Ext.direct.JsonProvider JsonProvider}
            |
            +---{@link Ext.direct.PollingProvider PollingProvider}
            |
            +---{@link Ext.direct.RemotingProvider RemotingProvider}
            </code></pre>
            @abstract
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.#ctor(System.Object)">
            <summary>
            @cfg {String} type
            <b>Required</b>, <tt>undefined</tt> by default.  The <tt>type</tt> of provider specified
            to {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#addProvider addProvider} to create a
            new Provider. Acceptable values by default are:<div class="mdetail-params"><ul>
            <li><b><tt>polling</tt></b> : {@link Ext.direct.PollingProvider PollingProvider}</li>
            <li><b><tt>remoting</tt></b> : {@link Ext.direct.RemotingProvider RemotingProvider}</li>
            </ul></div>
            </summary>
        </member>
        <member name="M:Ext.direct.Provider.isConnected">
            <summary>
            Returns whether or not the server-side is currently connected.
            Abstract method for subclasses to implement.
            </summary>
        </member>
        <member name="P:Ext.direct.Provider.priority">
            <summary>
            @cfg {Number} priority
            Priority of the request. Lower is higher priority, <tt>0</tt> means "duplex" (always on).
            All Providers default to <tt>1</tt> except for PollingProvider which defaults to <tt>3</tt>.
            </summary>
        </member>
        <member name="M:Ext.direct.JsonProvider.parseResponse(System.Object)">
            <summary>
            @class Ext.direct.JsonProvider
            @extends Ext.direct.Provider
            </summary>
        </member>
        <member name="T:Ext.direct.PollingProvider">
            <summary>
            @class Ext.direct.PollingProvider
            @extends Ext.direct.JsonProvider
            *
            <p>Provides for repetitive polling of the server at distinct {@link #interval intervals}.
            The initial request for data originates from the client, and then is responded to by the
            server.</p>
            <p>All configurations for the PollingProvider should be generated by the server-side
            API portion of the Ext.Direct stack.</p>
            *
            <p>An instance of PollingProvider may be created directly via the new keyword or by simply
            specifying <tt>type = 'polling'</tt>.  For example:</p>
            <pre><code>
            var pollA = new Ext.direct.PollingProvider({
            type:'polling',
            url: 'php/pollA.php',
            });
            Ext.Direct.addProvider(pollA);
            pollA.disconnect();
            Ext.Direct.addProvider(
            {
            type:'polling',
            url: 'php/pollB.php',
            id: 'pollB-provider'
            }
            );
            var pollB = Ext.Direct.getProvider('pollB-provider');
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.direct.PollingProvider.connect">
            <summary>
            Connect to the server-side and begin the polling process. To handle each
            response subscribe to the data event.
            </summary>
        </member>
        <member name="M:Ext.direct.PollingProvider.#ctor(System.Object)">
            <summary>
            @cfg {String/Function} url
            The url which the PollingProvider should contact with each request. This can also be
            an imported Ext.Direct method which will accept the baseParams as its only argument.
            </summary>
        </member>
        <member name="M:Ext.direct.PollingProvider.disconnect">
            <summary>
            Disconnect from the server-side and stop the polling process. The disconnect
            event will be fired on a successful disconnect.
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProvider.interval">
            <summary>
            @cfg {Number} interval
            How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
            3 seconds).
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProvider.priority">
            <summary>
            @cfg {Number} priority
            Priority of the request (defaults to <tt>3</tt>). See {@link Ext.direct.Provider#priority}.
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProviderConfig.baseParams">
            <summary>
            An object containing properties which are to be sent as parameters
            on every polling request
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProviderConfig.interval">
            <summary>
            How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
            3 seconds).
            </summary>
        </member>
        <member name="P:Ext.direct.PollingProviderConfig.priority">
            <summary>
            Priority of the request (defaults to <tt>3</tt>). See {@link Ext.direct.Provider#priority}.
            </summary>
        </member>
        <member name="P:Ext.direct.ProviderConfig.id">
            <summary>
            The unique id of the provider (defaults to an {@link Ext#id auto-assigned id}).
            You should assign an id if you need to be able to access the provider later and you do
            not have an object reference available, for example:
            <pre><code>
            Ext.Direct.addProvider(
            {
            type: 'polling',
            url:  'php/poll.php',
            id:   'poll-provider'
            }
            );
            var p = {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#getProvider getProvider}('poll-provider');
            p.disconnect();
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.direct.ProviderConfig.priority">
            <summary>
            Priority of the request. Lower is higher priority, <tt>0</tt> means "duplex" (always on).
            All Providers default to <tt>1</tt> except for PollingProvider which defaults to <tt>3</tt>.
            </summary>
        </member>
        <member name="T:Ext.direct.RemotingProvider">
            <summary>
            @class Ext.direct.RemotingProvider
            @extends Ext.direct.JsonProvider
            <p>The {@link Ext.direct.RemotingProvider RemotingProvider} exposes access to
            server side methods on the client (a remote procedure call (RPC) type of
            connection where the client can initiate a procedure on the server).</p>
            <p>This allows for code to be organized in a fashion that is maintainable,
            while providing a clear path between client and server, something that is
            not always apparent when using URLs.</p>
            <p>To accomplish this the server-side needs to describe what classes and methods
            are available on the client-side. This configuration will typically be
            outputted by the server-side Ext.Direct stack when the API description is built.</p>
            </summary>
        </member>
        <member name="M:Ext.direct.RemotingProvider.#ctor(System.Object)">
            <summary>
            @cfg {Number} timeout
            The timeout to use for each request. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.direct.RemotingProvider.enableBuffer" -->
        <member name="P:Ext.direct.RemotingProvider.maxRetries">
            <summary>
            @cfg {Number} maxRetries
            Number of times to re-attempt delivery on failure of a call. Defaults to <tt>1</tt>.
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.actions">
            <summary>
            Object literal defining the server side actions and methods. For example, if
            the Provider is configured with:
            <pre><code>
            "actions":{ // each property within the 'actions' object represents a server side Class
            "TestAction":[ // array of methods within each server side Class to be
            {              // stubbed out on client
            "name":"doEcho",
            "len":1
            },{
            "name":"multiply",// name of method
            "len":2           // The number of parameters that will be used to create an
            // array of data to send to the server side function.
            // Ensure the server sends back a Number, not a String.
            },{
            "name":"doForm",
            "formHandler":true, // direct the client to use specialized form handling method
            "len":1
            }]
            }
            </code></pre>
            <p>Note that a Store is not required, a server method can be called at any time.
            In the following example a <b>client side</b> handler is used to call the
            server side method "multiply" in the server-side "TestAction" Class:</p>
            <pre><code>
            TestAction.multiply(
            2, 4, // pass two arguments to server, so specify len=2
            // callback function after the server is called
            // result: the result returned by the server
            //      e: Ext.Direct.RemotingEvent object
            function(result, e){
            var t = e.getTransaction();
            var action = t.action; // server side Class called
            var method = t.method; // server side method called
            if(e.status){
            var answer = Ext.encode(result); // 8
            }else{
            var msg = e.message; // failure message
            }
            }
            );
            </code></pre>
            In the example above, the server side "multiply" function will be passed two
            arguments (2 and 4).  The "multiply" method should return the value 8 which will be
            available as the <tt>result</tt> in the example above.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.direct.RemotingProviderConfig.enableBuffer" -->
        <member name="P:Ext.direct.RemotingProviderConfig.enableUrlEncode">
            <summary>
            Specify which param will hold the arguments for the method.
            Defaults to <tt>'data'</tt>.
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.maxRetries">
            <summary>
            Number of times to re-attempt delivery on failure of a call. Defaults to <tt>1</tt>.
            </summary>
        </member>
        <member name="P:Ext.direct.RemotingProviderConfig.namespace">
            <summary>
            Namespace for the Remoting Provider (defaults to the browser global scope of <i>window</i>).
            Explicitly specify the namespace Object, or specify a String to have a
            {@link Ext#namespace namespace created} implicitly.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.direct.RemotingProviderConfig.url" -->
        <member name="T:Ext.form.Action">
            <summary>
            @class Ext.form.Action
            <p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>
            <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
            the Form needs to perform an action such as submit or load. The Configuration options
            listed for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},
            {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>
            <p>The instance of Action which performed the action is passed to the success
            and failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},
            {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),
            and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and
            {@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>
            </summary>
        </member>
        <member name="M:Ext.form.Action.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.form.Action
            <p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>
            <p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
            the Form needs to perform an action such as submit or load. The Configuration options
            listed for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},
            {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>
            <p>The instance of Action which performed the action is passed to the success
            and failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},
            {@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),
            and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and
            {@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.form.Action.Load(System.Object,System.Object)" -->
        <member name="M:Ext.form.Action.run(System.Object)">
            <summary>
            The decoded response object containing a boolean <tt style="font-weight:bold">success</tt> property and
            other, action-specific properties.
            @property result
            @type {Object}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.form.Action.Submit(System.Object,System.Object)" -->
        <member name="P:Ext.form.Action.type">
            <summary>
            The type of action this Action instance performs.
            Currently only "submit" and "load" are supported.
            @type {String}
            </summary>
        </member>
        <member name="T:Ext.form.Action.DirectLoad">
            <summary>
            @class Ext.form.Action.DirectLoad
            @extends Ext.form.Action.Load
            <p>Provides Ext.direct support for loading form data.</p>
            <p>This example illustrates usage of Ext.Direct to <b>load</b> a form through Ext.Direct.</p>
            <pre><code>
            var myFormPanel = new Ext.form.FormPanel({
            // configs for FormPanel
            title: 'Basic Information',
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            // configs apply to child items
            defaults: {anchor: '100%'},
            defaultType: 'textfield',
            items: [{
            fieldLabel: 'Name',
            name: 'name'
            },{
            fieldLabel: 'Email',
            name: 'email'
            },{
            fieldLabel: 'Company',
            name: 'company'
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a 'formHandler'
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: ['uid', 'foo']
            });
            // load the form
            myFormPanel.getForm().load({
            // pass 2 arguments to server side getBasicInfo method (len=2)
            params: {
            foo: 'bar',
            uid: 34
            }
            });
            </code></pre>
            The data packet sent to the server will resemble something like:
            <pre><code>
            [
            {
            "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
            "data":[34,"bar"] // note the order of the params
            }
            ]
            </code></pre>
            The form will process a data packet returned by the server that is similar
            to the following format:
            <pre><code>
            [
            {
            "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
            "result":{
            "success":true,
            "data":{
            "name":"Fred Flintstone",
            "company":"Slate Rock and Gravel",
            "email":"fred.flintstone@slaterg.com"
            }
            }
            }
            ]
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.form.Action.DirectLoad.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.form.Action.DirectLoad
            @extends Ext.form.Action.Load
            <p>Provides Ext.direct support for loading form data.</p>
            <p>This example illustrates usage of Ext.Direct to <b>load</b> a form through Ext.Direct.</p>
            <pre><code>
            var myFormPanel = new Ext.form.FormPanel({
            // configs for FormPanel
            title: 'Basic Information',
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            // configs apply to child items
            defaults: {anchor: '100%'},
            defaultType: 'textfield',
            items: [{
            fieldLabel: 'Name',
            name: 'name'
            },{
            fieldLabel: 'Email',
            name: 'email'
            },{
            fieldLabel: 'Company',
            name: 'company'
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a 'formHandler'
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: ['uid', 'foo']
            });
            // load the form
            myFormPanel.getForm().load({
            // pass 2 arguments to server side getBasicInfo method (len=2)
            params: {
            foo: 'bar',
            uid: 34
            }
            });
            </code></pre>
            The data packet sent to the server will resemble something like:
            <pre><code>
            [
            {
            "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
            "data":[34,"bar"] // note the order of the params
            }
            ]
            </code></pre>
            The form will process a data packet returned by the server that is similar
            to the following format:
            <pre><code>
            [
            {
            "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
            "result":{
            "success":true,
            "data":{
            "name":"Fred Flintstone",
            "company":"Slate Rock and Gravel",
            "email":"fred.flintstone@slaterg.com"
            }
            }
            }
            ]
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.form.Action.DirectSubmit">
            <summary>
            @class Ext.form.Action.DirectSubmit
            @extends Ext.form.Action.Submit
            <p>Provides Ext.direct support for submitting form data.</p>
            <p>This example illustrates usage of Ext.Direct to <b>submit</b> a form through Ext.Direct.</p>
            <pre><code>
            var myFormPanel = new Ext.form.FormPanel({
            // configs for FormPanel
            title: 'Basic Information',
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            buttons:[{
            text: 'Submit',
            handler: function(){
            myFormPanel.getForm().submit({
            params: {
            foo: 'bar',
            uid: 34
            }
            });
            }
            }],
            // configs apply to child items
            defaults: {anchor: '100%'},
            defaultType: 'textfield',
            items: [{
            fieldLabel: 'Name',
            name: 'name'
            },{
            fieldLabel: 'Email',
            name: 'email'
            },{
            fieldLabel: 'Company',
            name: 'company'
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a 'formHandler'
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: ['uid', 'foo']
            });
            </code></pre>
            The data packet sent to the server will resemble something like:
            <pre><code>
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
            "result":{
            "success":true,
            "id":{
            "extAction":"Profile","extMethod":"updateBasicInfo",
            "extType":"rpc","extTID":"6","extUpload":"false",
            "name":"Aaron Conran","email":"aaron@extjs.com","company":"Ext JS, LLC"
            }
            }
            }
            </code></pre>
            The form will process a data packet returned by the server that is similar
            to the following:
            <pre><code>
            // sample success packet (batched requests)
            [
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":3,
            "result":{
            "success":true
            }
            }
            ]
            // sample failure packet (one request)
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
            "result":{
            "errors":{
            "email":"already taken"
            },
            "success":false,
            "foo":"bar"
            }
            }
            </code></pre>
            Also see the discussion in {@link Ext.form.Action.DirectLoad}.
            </summary>
        </member>
        <member name="M:Ext.form.Action.DirectSubmit.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.form.Action.DirectSubmit
            @extends Ext.form.Action.Submit
            <p>Provides Ext.direct support for submitting form data.</p>
            <p>This example illustrates usage of Ext.Direct to <b>submit</b> a form through Ext.Direct.</p>
            <pre><code>
            var myFormPanel = new Ext.form.FormPanel({
            // configs for FormPanel
            title: 'Basic Information',
            renderTo: document.body,
            width: 300, height: 160,
            padding: 10,
            buttons:[{
            text: 'Submit',
            handler: function(){
            myFormPanel.getForm().submit({
            params: {
            foo: 'bar',
            uid: 34
            }
            });
            }
            }],
            // configs apply to child items
            defaults: {anchor: '100%'},
            defaultType: 'textfield',
            items: [{
            fieldLabel: 'Name',
            name: 'name'
            },{
            fieldLabel: 'Email',
            name: 'email'
            },{
            fieldLabel: 'Company',
            name: 'company'
            }],
            // configs for BasicForm
            api: {
            // The server-side method to call for load() requests
            load: Profile.getBasicInfo,
            // The server-side must mark the submit handler as a 'formHandler'
            submit: Profile.updateBasicInfo
            },
            // specify the order for the passed params
            paramOrder: ['uid', 'foo']
            });
            </code></pre>
            The data packet sent to the server will resemble something like:
            <pre><code>
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
            "result":{
            "success":true,
            "id":{
            "extAction":"Profile","extMethod":"updateBasicInfo",
            "extType":"rpc","extTID":"6","extUpload":"false",
            "name":"Aaron Conran","email":"aaron@extjs.com","company":"Ext JS, LLC"
            }
            }
            }
            </code></pre>
            The form will process a data packet returned by the server that is similar
            to the following:
            <pre><code>
            // sample success packet (batched requests)
            [
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":3,
            "result":{
            "success":true
            }
            }
            ]
            // sample failure packet (one request)
            {
            "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
            "result":{
            "errors":{
            "email":"already taken"
            },
            "success":false,
            "foo":"bar"
            }
            }
            </code></pre>
            Also see the discussion in {@link Ext.form.Action.DirectLoad}.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.failure">
            <summary>
            The function to call when a failure packet was recieved, or when an
            error ocurred in the Ajax communication.
            The function is passed the following parameters:<ul class="mdetail-params">
            <li><b>form</b> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
            <li><b>action</b> : Ext.form.Action<div class="sub-desc">The Action class. If an Ajax
            error ocurred, the failure type will be in {@link #failureType}. The {@link #result}
            property of this object may be examined to perform custom postprocessing.</div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.method">
            <summary>
            The HTTP method to use to access the requested URL. Defaults to the
            {@link Ext.form.BasicForm}'s method, or if that is not specified, the underlying DOM form's method.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.params">
            <summary>
            <p>Extra parameter values to pass. These are added to the Form's
            {@link Ext.form.BasicForm#baseParams} and passed to the specified URL along with the Form's
            input fields.</p>
            <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.reset">
            <summary>
            When set to <tt><b>true</b></tt>, causes the Form to be
            {@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens
            <b>before</b> the {@link #success} callback is called and before the Form's
            {@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.scope">
            <summary>
            The scope in which to call the callback functions (The <tt>this</tt> reference
            for the callback functions).
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.submitEmptyText">
            <summary>
            If set to <tt>true</tt>, the emptyText value will be sent with the form
            when it is submitted.  Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.success">
            <summary>
            The function to call when a valid success return packet is recieved.
            The function is passed the following parameters:<ul class="mdetail-params">
            <li><b>form</b> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
            <li><b>action</b> : Ext.form.Action<div class="sub-desc">The Action class. The {@link #result}
            property of this object may be examined to perform custom postprocessing.</div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.timeout">
            <summary>
            The number of seconds to wait for a server response before
            failing with the {@link #failureType} as {@link #Action.CONNECT_FAILURE}. If not specified,
            defaults to the configured <tt>{@link Ext.form.BasicForm#timeout timeout}</tt> of the
            {@link Ext.form.BasicForm form}.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.url">
            <summary>
            The URL that the Action is to invoke.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.waitMsg">
            <summary>
            The message to be displayed by a call to {@link Ext.MessageBox#wait}
            during the time the action is being processed.
            </summary>
        </member>
        <member name="P:Ext.form.ActionConfig.waitTitle">
            <summary>
            The title to be displayed by a call to {@link Ext.MessageBox#wait}
            during the time the action is being processed.
            </summary>
        </member>
        <member name="T:Ext.form.BasicForm">
            <summary>
            @class Ext.form.BasicForm
            @extends Ext.util.Observable
            <p>Encapsulates the DOM &lt;form> element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides
            input field management, validation, submission, and form loading services.</p>
            <p>By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.
            To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.</p>
            <p><b><u>File Uploads</u></b></p>
            <p>{@link #fileUpload File uploads} are not performed using Ajax submission, that
            is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
            manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
            <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
            to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
            but removed after the return data has been gathered.</p>
            <p>The server response is parsed by the browser to create the document for the IFRAME. If the
            server is using JSON to send the return object, then the
            <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
            must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
            <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
            "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
            <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
            is created containing a <tt>responseText</tt> property in order to conform to the
            requirements of event handlers and callbacks.</p>
            <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
            and some server technologies (notably JEE) may require some custom processing in order to
            retrieve parameter names and parameter values from the packet content.</p>
            @constructor
            @param {Mixed} el The form element or its id
            @param {Object} config Configuration options
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.add">
            <summary>
            Add Ext.form Components to this form's Collection. This does not result in rendering of
            the passed Component, it just enables the form to validate Fields, and distribute values to
            Fields.
            <p><b>You will not usually call this function. In order to be rendered, a Field must be added
            to a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.
            The FormPanel to which the field is added takes care of adding the Field to the BasicForm's
            collection.</b></p>
            @param {Field} field1
            @param {Field} field2 (optional)
            @param {Field} etc (optional)
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.applyIfToFields(System.Object)">
            <summary>
            Calls {@link Ext#applyIf} for all field in this form with the passed object.
            @param {Object} values
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.applyToFields(System.Object)">
            <summary>
            Calls {@link Ext#apply} for all fields in this form with the passed object.
            @param {Object} values
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.cleanDestroyed">
            <summary>
            Removes all fields from the collection that have been destroyed.
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.clearInvalid">
            <summary>
            Clears all invalid messages in this form.
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.form.BasicForm
            @extends Ext.util.Observable
            <p>Encapsulates the DOM &lt;form> element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides
            input field management, validation, submission, and form loading services.</p>
            <p>By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.
            To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.</p>
            <p><b><u>File Uploads</u></b></p>
            <p>{@link #fileUpload File uploads} are not performed using Ajax submission, that
            is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
            manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
            <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
            to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
            but removed after the return data has been gathered.</p>
            <p>The server response is parsed by the browser to create the document for the IFRAME. If the
            server is using JSON to send the return object, then the
            <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
            must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
            <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
            "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
            <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
            is created containing a <tt>responseText</tt> property in order to conform to the
            requirements of event handlers and callbacks.</p>
            <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
            and some server technologies (notably JEE) may require some custom processing in order to
            retrieve parameter names and parameter values from the packet content.</p>
            @constructor
            @param {Mixed} el The form element or its id
            @param {Object} config Configuration options
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.destroy(System.Boolean)">
            <summary>
            Destroys this object.
            @private
            @param {Boolean} bound true if the object is bound to a form panel. If this is the case
            the FormPanel will take care of destroying certain things, so we're just doubling up.
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.doAction(System.Object,System.Object)">
            <summary>
            Performs a predefined action ({@link Ext.form.Action.Submit} or
            {@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}
            to perform application-specific processing.
            @param {String/Object} actionName The name of the predefined action type,
            or instance of {@link Ext.form.Action} to perform.
            @param {Object} options (optional) The options to pass to the {@link Ext.form.Action}.
            All of the config options listed below are supported by both the
            {@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
            actions unless otherwise noted (custom actions could also accept
            other config options):<ul>
            *
            <li><b>url</b> : String<div class="sub-desc">The url for the action (defaults
            to the form's {@link #url}.)</div></li>
            *
            <li><b>method</b> : String<div class="sub-desc">The form method to use (defaults
            to the form's method, or POST if not defined)</div></li>
            *
            <li><b>params</b> : String/Object<div class="sub-desc"><p>The params to pass
            (defaults to the form's baseParams, or none if not defined)</p>
            <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>
            *
            <li><b>headers</b> : Object<div class="sub-desc">Request headers to set for the action
            (defaults to the form's default headers)</div></li>
            *
            <li><b>success</b> : Function<div class="sub-desc">The callback that will
            be invoked after a successful response (see top of
            {@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
            for a description of what constitutes a successful response).
            The function is passed the following parameters:<ul>
            <li><tt>form</tt> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
            <li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
            <div class="sub-desc">The action object contains these properties of interest:<ul>
            <li><tt>{@link Ext.form.Action#response response}</tt></li>
            <li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
            <li><tt>{@link Ext.form.Action#type type}</tt></li>
            </ul></div></li></ul></div></li>
            *
            <li><b>failure</b> : Function<div class="sub-desc">The callback that will be invoked after a
            failed transaction attempt. The function is passed the following parameters:<ul>
            <li><tt>form</tt> : The {@link Ext.form.BasicForm} that requested the action.</li>
            <li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
            <div class="sub-desc">The action object contains these properties of interest:<ul>
            <li><tt>{@link Ext.form.Action#failureType failureType}</tt></li>
            <li><tt>{@link Ext.form.Action#response response}</tt></li>
            <li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
            <li><tt>{@link Ext.form.Action#type type}</tt></li>
            </ul></div></li></ul></div></li>
            *
            <li><b>scope</b> : Object<div class="sub-desc">The scope in which to call the
            callback functions (The <tt>this</tt> reference for the callback functions).</div></li>
            *
            <li><b>clientValidation</b> : Boolean<div class="sub-desc">Submit Action only.
            Determines whether a Form's fields are validated in a final call to
            {@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to <tt>false</tt>
            to prevent this. If undefined, pre-submission field validation is performed.</div></li></ul>
            *
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.findField(SharpKit.JavaScript.JsString)">
            <summary>
            Find a {@link Ext.form.Field} in this form.
            @param {String} id The value to search for (specify either a {@link Ext.Component#id id},
            {@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName}).
            @return Field
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.getEl">
            <summary>
            Get the HTML form Element
            @return Ext.Element
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.getFieldValues(System.Boolean)">
            <summary>
            Retrieves the fields in the form as a set of key/value pairs, using the {@link Ext.form.Field#getValue getValue()} method.
            If multiple fields exist with the same name they are returned as an array.
            @param {Boolean} dirtyOnly (optional) True to return only fields that are dirty.
            @return {Object} The values in the form
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.getValues(System.Boolean)">
            <summary>
            <p>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
            If multiple fields exist with the same name they are returned as an array.</p>
            <p><b>Note:</b> The values are collected from all enabled HTML input elements within the form, <u>not</u> from
            the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the
            value can potentially be the emptyText of a field.</p>
            @param {Boolean} asString (optional) Pass true to return the values as a string. (defaults to false, returning an Object)
            @return {String/Object}
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.initEl(System.Object)">
            <summary>
            By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
            element by passing it or its id or mask the form itself by passing in true.
            @type Mixed
            @property waitMsgTarget
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.isDirty">
            <summary>
            <p>Returns true if any fields in this form have changed from their original values.</p>
            <p>Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the
            Fields' <i>original values</i> are updated when the values are loaded by {@link #setValues}
            or {@link #loadRecord}.</p>
            @return Boolean
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.isValid">
            <summary>
            Returns true if client-side validation on the form is successful.
            @return Boolean
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.load(System.Object)">
            <summary>
            Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}.
            @param {Object} options The options to pass to the action (see {@link #doAction} for details)
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.loadRecord(System.Object)">
            <summary>
            Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the
            {@link Ext.data.Record#data record data}.
            See also {@link #trackResetOnLoad}.
            @param {Record} record The record to load
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.markInvalid(System.Object)">
            <summary>
            Mark fields in this form invalid in bulk.
            @param {Array/Object} errors Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.remove(System.Object)">
            <summary>
            Removes a field from the items collection (does NOT remove its markup).
            @param {Field} field
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.render">
            <summary>
            Iterates through the {@link Ext.form.Field Field}s which have been {@link #add add}ed to this BasicForm,
            checks them for an id attribute, and calls {@link Ext.form.Field#applyToMarkup} on the existing dom element with that id.
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.reset">
            <summary>
            Resets this form.
            @return {BasicForm} this
            </summary>
        </member>
        <member name="M:Ext.form.BasicForm.setValues(System.Object)">
            <summary>
            Set values for fields in this form in bulk.
            @param {Array/Object} values Either an array in the form:<pre><code>
            [{id:'clientName', value:'Fred. Olsen Lines'},
            {id:'portOfLoading', value:'FXT'},
            {id:'portOfDischarge', value:'OSL'} ]</code></pre>
            or an object hash of the form:<pre><code>
            {
            clientName: 'Fred. Olsen Lines',
            portOfLoading: 'FXT',
            portOfDischarge: 'OSL'
            }</code></pre>
            @return {BasicForm} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.form.BasicForm.submit(System.Object)" -->
        <member name="M:Ext.form.BasicForm.updateRecord(System.Object)">
            <summary>
            Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block.
            @param {Record} record The record to edit
            @return {BasicForm} this
            </summary>
        </member>
        <member name="P:Ext.form.BasicForm.paramsAsHash">
            <summary>
            @cfg {Boolean} paramsAsHash Only used for the <code>{@link #api}</code>
            <code>load</code> configuration. Send parameters as a collection of named
            arguments (defaults to <tt>false</tt>). Providing a
            <tt>{@link #paramOrder}</tt> nullifies this configuration.
            </summary>
        </member>
        <member name="P:Ext.form.BasicForm.timeout">
            <summary>
            @cfg {Number} timeout Timeout for form actions in seconds (default is 30 seconds).
            </summary>
        </member>
        <member name="P:Ext.form.BasicForm.trackResetOnLoad">
            <summary>
            @cfg {Boolean} trackResetOnLoad If set to <tt>true</tt>, {@link #reset}() resets to the last loaded
            or {@link #setValues}() data instead of when the form was first created.  Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.BasicForm.waitTitle">
            <summary>
            @cfg {String} waitTitle
            The default title to show for the waiting message box (defaults to <tt>'Please Wait...'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.api">
            <summary>
            (Optional) If specified load and submit actions will be handled
            with {@link Ext.form.Action.DirectLoad} and {@link Ext.form.Action.DirectSubmit}.
            Methods which have been imported by Ext.Direct can be specified here to load and submit
            forms.
            Such as the following:<pre><code>
            api: {
            load: App.ss.MyProfile.load,
            submit: App.ss.MyProfile.submit
            }
            </code></pre>
            <p>Load actions can use <code>{@link #paramOrder}</code> or <code>{@link #paramsAsHash}</code>
            to customize how the load method is invoked.
            Submit actions will always use a standard form submit. The formHandler configuration must
            be set on the associated server-side method which has been imported by Ext.Direct</p>
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.baseParams">
            <summary>
            <p>Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.</p>
            <p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.errorReader">
            <summary>
            <p>An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to
            read field error messages returned from 'submit' actions. This is optional
            as there is built-in support for processing JSON.</p>
            <p>The Records which provide messages for the invalid Fields must use the
            Field name (or id) as the Record ID, and must contain a field called 'msg'
            which contains the error message.</p>
            <p>The errorReader does not have to be a full-blown implementation of a
            DataReader. It simply needs to implement a <tt>read(xhr)</tt> function
            which returns an Array of Records in an object with the following
            structure:</p><pre><code>
            {
            records: recordArray
            }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.fileUpload">
            <summary>
            Set to true if this form is a file upload.
            <p>File uploads are not performed using normal 'Ajax' techniques, that is they are <b>not</b>
            performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
            DOM <tt>&lt;form></tt> element temporarily modified to have its
            <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
            to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
            but removed after the return data has been gathered.</p>
            <p>The server response is parsed by the browser to create the document for the IFRAME. If the
            server is using JSON to send the return object, then the
            <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
            must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
            <p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
            "&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
            <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
            is created containing a <tt>responseText</tt> property in order to conform to the
            requirements of event handlers and callbacks.</p>
            <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
            and some server technologies (notably JEE) may require some custom processing in order to
            retrieve parameter names and parameter values from the packet content.</p>
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.method">
            <summary>
            The request method to use (GET or POST) for form actions if one isn't supplied in the action options.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.BasicFormConfig.paramOrder" -->
        <member name="P:Ext.form.BasicFormConfig.paramsAsHash">
            <summary>
            Only used for the <code>{@link #api}</code>
            <code>load</code> configuration. Send parameters as a collection of named
            arguments (defaults to <tt>false</tt>). Providing a
            <tt>{@link #paramOrder}</tt> nullifies this configuration.
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.reader">
            <summary>
            An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to read
            data when executing 'load' actions. This is optional as there is built-in
            support for processing JSON.  For additional information on using an XMLReader
            see the example provided in examples/form/xml-form.html.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.BasicFormConfig.standardSubmit" -->
        <member name="P:Ext.form.BasicFormConfig.timeout">
            <summary>
            Timeout for form actions in seconds (default is 30 seconds).
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.trackResetOnLoad">
            <summary>
            If set to <tt>true</tt>, {@link #reset}() resets to the last loaded
            or {@link #setValues}() data instead of when the form was first created.  Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.url">
            <summary>
            The URL to use for form actions if one isn't supplied in the
            <code>{@link #doAction doAction} options</code>.
            </summary>
        </member>
        <member name="P:Ext.form.BasicFormConfig.waitTitle">
            <summary>
            The default title to show for the waiting message box (defaults to <tt>'Please Wait...'</tt>)
            </summary>
        </member>
        <member name="T:Ext.form.Checkbox">
            <summary>
            @class Ext.form.Checkbox
            @extends Ext.form.Field
            Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.
            @constructor
            Creates a new Checkbox
            @param {Object} config Configuration options
            @xtype checkbox
            </summary>
        </member>
        <member name="T:Ext.form.Field">
            <summary>
            @class Ext.form.Field
            @extends Ext.BoxComponent
            Base class for form fields that provides default event handling, sizing, value handling and other functionality.
            @constructor
            Creates a new Field
            @param {Object} config Configuration options
            @xtype field
            </summary>
        </member>
        <member name="M:Ext.form.Field.clearInvalid">
            <summary>
            Clear any invalid styles/messages for this field
            </summary>
        </member>
        <member name="M:Ext.form.Field.getActiveError">
            <summary>
            Gets the active error message for this field.
            @return {String} Returns the active error message on the field, if there is no error, an empty string is returned.
            </summary>
        </member>
        <member name="M:Ext.form.Field.getErrors">
            <summary>
            Runs this field's validators and returns an array of error messages for any validation failures.
            This is called internally during validation and would not usually need to be used manually.
            Each subclass should override or augment the return value to provide their own errors
            @return {Array} All error messages for this field
            </summary>
        </member>
        <member name="M:Ext.form.Field.getName">
            <summary>
            Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            attribute of the field if available.
            @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            </summary>
        </member>
        <member name="M:Ext.form.Field.getRawValue">
            <summary>
            Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
            @return {Mixed} value The field value
            </summary>
        </member>
        <member name="M:Ext.form.Field.getValue">
            <summary>
            Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.
            @return {Mixed} value The field value
            </summary>
        </member>
        <member name="M:Ext.form.Field.isDirty">
            <summary>
            <p>Returns true if the value of this Field has been changed from its original value.
            Will return false if the field is disabled or has not been rendered yet.</p>
            <p>Note that if the owning {@link Ext.form.BasicForm form} was configured with
            {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
            then the <i>original value</i> is updated when the values are loaded by
            {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>
            @return {Boolean} True if this field has been changed from its original value (and
            is not disabled), false otherwise.
            </summary>
        </member>
        <member name="M:Ext.form.Field.isValid(System.Boolean)">
            <summary>
            Returns whether or not the field value is currently valid by
            {@link #validateValue validating} the {@link #processValue processed value}
            of the field. <b>Note</b>: {@link #disabled} fields are ignored.
            @param {Boolean} preventMark True to disable marking the field invalid
            @return {Boolean} True if the value is valid, else false
            </summary>
        </member>
        <member name="M:Ext.form.Field.markInvalid(SharpKit.JavaScript.JsString)">
            <summary>
            <p>Display an error message associated with this field, using {@link #msgTarget} to determine how to
            display the message and applying {@link #invalidClass} to the field's UI element.</p>
            <p><b>Note</b>: this method does not cause the Field's {@link #validate} method to return <code>false</code>
            if the value does <i>pass</i> validation. So simply marking a Field as invalid will not prevent
            submission of forms submitted with the {@link Ext.form.Action.Submit#clientValidation} option set.</p>
            {@link #isValid invalid}.
            @param {String} msg (optional) The validation message (defaults to {@link #invalidText})
            </summary>
        </member>
        <member name="M:Ext.form.Field.processValue(System.Object)">
            <summary>
            This method should only be overridden if necessary to prepare raw values
            for validation (see {@link #validate} and {@link #isValid}).  This method
            is expected to return the processed value for the field which will
            be used for validation (see validateValue method).
            @param {Mixed} value
            </summary>
        </member>
        <member name="M:Ext.form.Field.reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages.
            See {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
            </summary>
        </member>
        <member name="M:Ext.form.Field.setActiveError(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Sets the current activeError to the given string. Fires the 'invalid' event.
            This does not set up the error icon, only sets the message and fires the event. To show the error icon,
            use markInvalid instead, which calls this method internally
            @param {String} msg The error message
            @param {Boolean} suppressEvent True to suppress the 'invalid' event from being fired
            </summary>
        </member>
        <member name="M:Ext.form.Field.setRawValue(System.Object)">
            <summary>
            Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.
            @param {Mixed} value The value to set
            @return {Mixed} value The field value that is set
            </summary>
        </member>
        <member name="M:Ext.form.Field.setReadOnly(System.Boolean)">
            <summary>
            Sets the read only state of this field.
            @param {Boolean} readOnly Whether the field should be read only.
            </summary>
        </member>
        <member name="M:Ext.form.Field.setValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.
            @param {Mixed} value The value to set
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="M:Ext.form.Field.unsetActiveError(System.Boolean)">
            <summary>
            Clears the activeError and fires the 'valid' event. This is called internally by clearInvalid and would not
            usually need to be called manually
            @param {Boolean} suppressEvent True to suppress the 'invalid' event from being fired
            </summary>
        </member>
        <member name="M:Ext.form.Field.validate">
            <summary>
            Validates the field value
            @return {Boolean} True if the value is valid, else false
            </summary>
        </member>
        <member name="M:Ext.form.Field.validateValue(System.Object)">
            <summary>
            Uses getErrors to build an array of validation errors. If any errors are found, markInvalid is called
            with the first and false is returned, otherwise true is returned. Previously, subclasses were invited
            to provide an implementation of this to process validations - from 3.2 onwards getErrors should be
            overridden instead.
            @param {Mixed} The current value of the field
            @return {Boolean} True if all validations passed, false if one or more failed
            </summary>
        </member>
        <member name="P:Ext.form.Field.disabled">
            <summary>
            @cfg {Boolean} disabled True to disable the field (defaults to false).
            <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
            disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
            </summary>
        </member>
        <member name="P:Ext.form.Field.fieldClass">
            <summary>
            @cfg {String} fieldClass The default CSS class for the field (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.Field.focusClass">
            <summary>
            @cfg {String} focusClass The CSS class to use when the field receives focus (defaults to 'x-form-focus')
            </summary>
        </member>
        <member name="P:Ext.form.Field.invalidClass">
            <summary>
            @cfg {String} invalidClass The CSS class to use when marking a field invalid (defaults to 'x-form-invalid')
            </summary>
        </member>
        <member name="P:Ext.form.Field.invalidText">
            <summary>
            @cfg {String} invalidText The error text to use when marking a field invalid and no message is provided
            (defaults to 'The value in this field is invalid')
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.Field.msgTarget" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.form.Field.readOnly" -->
        <member name="P:Ext.form.Field.submitValue">
            <summary>
            @cfg {Boolean} submitValue False to clear the name attribute on the field so that it is not submitted during a form post.
            Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Field.validateOnBlur">
            <summary>
            @cfg {Boolean} validateOnBlur Whether the field should validate when it loses focus (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.form.Field.validationDelay">
            <summary>
            @cfg {Number} validationDelay The length of time in milliseconds after user input begins until validation
            is initiated (defaults to 250)
            </summary>
        </member>
        <member name="P:Ext.form.Field.validationEvent">
            <summary>
            @cfg {String/Boolean} validationEvent The event that should initiate field validation. Set to false to disable
            automatic validation (defaults to 'keyup').
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.getValue">
            <summary>
            Returns the checked state of the checkbox.
            @return {Boolean} True if checked, else false
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.setValue(System.Object)">
            <summary>
            Sets the checked state of the checkbox, fires the 'check' event, and calls a
            <code>{@link #handler}</code> (if configured).
            @param {Boolean/String} checked The following values will check the checkbox:
            <code>true, 'true', '1', or 'on'</code>. Any other value will uncheck the checkbox.
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.actionMode">
            <summary>
            @cfg {Object} scope An object to use as the scope ('this' reference) of the {@link #handler} function
            (defaults to this Checkbox).
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.boxLabel">
            <summary>
            @cfg {String} boxLabel The text that appears beside the checkbox
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.checked">
            <summary>
            @cfg {Boolean} checked <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.fieldClass">
            <summary>
            @cfg {String} fieldClass The default CSS class for the checkbox (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.autoCreate">
            <summary>
            A DomHelper element spec, or true for a default element spec (defaults to
            {tag: 'input', type: 'checkbox', autocomplete: 'off'})
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.boxLabel">
            <summary>
            The text that appears beside the checkbox
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.checked">
            <summary>
            <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.fieldClass">
            <summary>
            The default CSS class for the checkbox (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.focusClass">
            <summary>
            The CSS class to use when the checkbox receives focus (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.handler">
            <summary>
            A function called when the {@link #checked} value changes (can be used instead of
            handling the check event). The handler is passed the following parameters:
            <div class="mdetail-params"><ul>
            <li><b>checkbox</b> : Ext.form.Checkbox<div class="sub-desc">The Checkbox being toggled.</div></li>
            <li><b>checked</b> : Boolean<div class="sub-desc">The new checked state of the checkbox.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.inputValue">
            <summary>
            The value that should go into the generated input element's value attribute
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.scope">
            <summary>
            An object to use as the scope ('this' reference) of the {@link #handler} function
            (defaults to this Checkbox).
            </summary>
        </member>
        <member name="T:Ext.form.CheckboxGroup">
            <summary>
            @class Ext.form.CheckboxGroup
            @extends Ext.form.Field
            <p>A grouping container for {@link Ext.form.Checkbox} controls.</p>
            <p>Sample usage:</p>
            <pre><code>
            var myCheckboxGroup = new Ext.form.CheckboxGroup({
            id:'myGroup',
            xtype: 'checkboxgroup',
            fieldLabel: 'Single Column',
            itemCls: 'x-check-group-alt',
            // Put all controls in a single column with width 100%
            columns: 1,
            items: [
            {boxLabel: 'Item 1', name: 'cb-col-1'},
            {boxLabel: 'Item 2', name: 'cb-col-2', checked: true},
            {boxLabel: 'Item 3', name: 'cb-col-3'}
            ]
            });
            </code></pre>
            @constructor
            Creates a new CheckboxGroup
            @param {Object} config Configuration options
            @xtype checkboxgroup
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.eachItem(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            @private
            Convenience function which passes the given function to every item in the composite
            @param {Function} fn The function to call
            @param {Object} scope Optional scope object
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getErrors">
            <summary>
            Runs CheckboxGroup's validations and returns an array of any errors. The only error by default
            is if allowBlank is set to true and no items are checked.
            @return {Array} Array of all validation errors
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.getValue">
            <summary>
            Gets an array of the selected {@link Ext.form.Checkbox} in the group.
            @return {Array} An array of the selected checkboxes.
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.onSetValue(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Sets the values of one or more of the items within the CheckboxGroup
            @param {String|Array|Object} id Can take multiple forms. Can be optionally:
            <ul>
            <li>An ID string to be used with a second argument</li>
            <li>An array of the form ['some', 'list', 'of', 'ids', 'to', 'mark', 'checked']</li>
            <li>An array in the form [true, true, false, true, false] etc, where each item relates to the check status of
            the checkbox at the same index</li>
            <li>An object containing ids of the checkboxes as keys and check values as properties</li>
            </ul>
            @param {String} value The value to set the field to if the first argument was a string
            </summary>
        </member>
        <member name="M:Ext.form.CheckboxGroup.setValue">
            <summary>
            {@link Ext.form.Checkbox#setValue Set the value(s)} of an item or items
            in the group. Examples illustrating how this method may be called:
            <pre><code>
            // call with name and value
            myCheckboxGroup.setValue('cb-col-1', true);
            // call with an array of boolean values
            myCheckboxGroup.setValue([true, false, false]);
            // call with an object literal specifying item:value pairs
            myCheckboxGroup.setValue({
            'cb-col-2': false,
            'cb-col-3': true
            });
            // use comma separated string to set items with name to true (checked)
            myCheckboxGroup.setValue('cb-col-1,cb-col-3');
            </code></pre>
            See {@link Ext.form.Checkbox#setValue} for additional information.
            @param {Mixed} id The checkbox to check, or as described by example shown.
            @param {Boolean} value (optional) The value to set the item.
            @return {Ext.form.CheckboxGroup} this
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.allowBlank">
            <summary>
            @cfg {Boolean} allowBlank False to validate that at least one item in the group is checked (defaults to true).
            If no items are selected at validation time, {@link @blankText} will be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.blankText">
            <summary>
            @cfg {String} blankText Error text to display if the {@link #allowBlank} validation fails (defaults to "You must
            select at least one item in this group")
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.columns">
            <summary>
            @cfg {String/Number/Array} columns Specifies the number of columns to use when displaying grouped
            checkbox/radio controls using automatic layout.  This config can take several types of values:
            <ul><li><b>'auto'</b> : <p class="sub-desc">The controls will be rendered one per column on one row and the width
            of each column will be evenly distributed based on the width of the overall field container. This is the default.</p></li>
            <li><b>Number</b> : <p class="sub-desc">If you specific a number (e.g., 3) that number of columns will be
            created and the contained controls will be automatically distributed based on the value of {@link #vertical}.</p></li>
            <li><b>Array</b> : Object<p class="sub-desc">You can also specify an array of column widths, mixing integer
            (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will
            be rendered first, then any float values will be calculated as a percentage of the remaining space. Float
            values do not have to add up to 1 (100%) although if you want the controls to take up the entire field
            container you should do so.</p></li></ul>
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroup.vertical">
            <summary>
            @cfg {Boolean} vertical True to distribute contained controls across columns, completely filling each column
            top to bottom before starting on the next column.  The number of controls in each column will be automatically
            calculated to keep columns as even as possible.  The default value is false, so that controls will be added
            to columns one at a time, completely filling each row left to right before starting on the next row.
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.allowBlank">
            <summary>
            False to validate that at least one item in the group is checked (defaults to true).
            If no items are selected at validation time, {@link @blankText} will be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.blankText">
            <summary>
            Error text to display if the {@link #allowBlank} validation fails (defaults to "You must
            select at least one item in this group")
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.columns">
            <summary>
            Specifies the number of columns to use when displaying grouped
            checkbox/radio controls using automatic layout.  This config can take several types of values:
            <ul><li><b>'auto'</b> : <p class="sub-desc">The controls will be rendered one per column on one row and the width
            of each column will be evenly distributed based on the width of the overall field container. This is the default.</p></li>
            <li><b>Number</b> : <p class="sub-desc">If you specific a number (e.g., 3) that number of columns will be
            created and the contained controls will be automatically distributed based on the value of {@link #vertical}.</p></li>
            <li><b>Array</b> : Object<p class="sub-desc">You can also specify an array of column widths, mixing integer
            (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will
            be rendered first, then any float values will be calculated as a percentage of the remaining space. Float
            values do not have to add up to 1 (100%) although if you want the controls to take up the entire field
            container you should do so.</p></li></ul>
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.items">
            <summary>
            An Array of {@link Ext.form.Checkbox Checkbox}es or Checkbox config objects
            to arrange in the group.
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.name">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxGroupConfig.vertical">
            <summary>
            True to distribute contained controls across columns, completely filling each column
            top to bottom before starting on the next column.  The number of controls in each column will be automatically
            calculated to keep columns as even as possible.  The default value is false, so that controls will be added
            to columns one at a time, completely filling each row left to right before starting on the next row.
            </summary>
        </member>
        <member name="T:Ext.form.ComboBox">
            <summary>
            @class Ext.form.ComboBox
            @extends Ext.form.TriggerField
            <p>A combobox control with support for autocomplete, remote-loading, paging and many other features.</p>
            <p>A ComboBox works in a similar manner to a traditional HTML &lt;select> field. The difference is
            that to submit the {@link #valueField}, you must specify a {@link #hiddenName} to create a hidden input
            field to hold the value of the valueField. The <i>{@link #displayField}</i> is shown in the text field
            which is named according to the {@link #name}.</p>
            <p><b><u>Events</u></b></p>
            <p>To do something when something in ComboBox is selected, configure the select event:<pre><code>
            var cb = new Ext.form.ComboBox({
            // all of your config options
            listeners:{
            scope: yourScope,
            'select': yourFunction
            }
            });
            // Alternatively, you can assign events after the object is created:
            var cb = new Ext.form.ComboBox(yourOptions);
            cb.on('select', yourFunction, yourScope);
            </code></pre></p>
            *
            <p><b><u>ComboBox in Grid</u></b></p>
            <p>If using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a {@link Ext.grid.Column#renderer renderer}
            will be needed to show the displayField when the editor is not active.  Set up the renderer manually, or implement
            a reusable render, for example:<pre><code>
            // create reusable renderer
            Ext.util.Format.comboRenderer = function(combo){
            return function(value){
            var record = combo.findRecord(combo.{@link #valueField}, value);
            return record ? record.get(combo.{@link #displayField}) : combo.{@link #valueNotFoundText};
            }
            }
            // create the combo instance
            var combo = new Ext.form.ComboBox({
            {@link #typeAhead}: true,
            {@link #triggerAction}: 'all',
            {@link #lazyRender}:true,
            {@link #mode}: 'local',
            {@link #store}: new Ext.data.ArrayStore({
            id: 0,
            fields: [
            'myId',
            'displayText'
            ],
            data: [[1, 'item1'], [2, 'item2']]
            }),
            {@link #valueField}: 'myId',
            {@link #displayField}: 'displayText'
            });
            // snippet of column model used within grid
            var cm = new Ext.grid.ColumnModel([{
            ...
            },{
            header: "Some Header",
            dataIndex: 'whatever',
            width: 130,
            editor: combo, // specify reference to combo instance
            renderer: Ext.util.Format.comboRenderer(combo) // pass combo instance to reusable renderer
            },
            ...
            ]);
            </code></pre></p>
            *
            <p><b><u>Filtering</u></b></p>
            <p>A ComboBox {@link #doQuery uses filtering itself}, for information about filtering the ComboBox
            store manually see <tt>{@link #lastQuery}</tt>.</p>
            @constructor
            Create a new ComboBox.
            @param {Object} config Configuration options
            @xtype combo
            </summary>
        </member>
        <member name="T:Ext.form.TriggerField">
            <summary>
            @class Ext.form.TriggerField
            @extends Ext.form.TextField
            Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
            The trigger has no default action, so you must assign a function to implement the trigger click handler by
            overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox
            for which you can provide a custom implementation.  For example:
            <pre><code>
            var trigger = new Ext.form.TriggerField();
            trigger.onTriggerClick = myTriggerFn;
            trigger.applyToMarkup('my-field');
            </code></pre>
            *
            However, in general you will most likely want to use TriggerField as the base class for a reusable component.
            {@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this.
            *
            @constructor
            Create a new TriggerField.
            @param {Object} config Configuration options (valid {@Ext.form.TextField} config options will also be applied
            to the base TextField)
            @xtype trigger
            </summary>
        </member>
        <member name="T:Ext.form.TextField">
            <summary>
            @class Ext.form.TextField
            @extends Ext.form.Field
            <p>Basic text field.  Can be used as a direct replacement for traditional text inputs,
            or as the base class for more sophisticated input controls (like {@link Ext.form.TextArea}
            and {@link Ext.form.ComboBox}).</p>
            <p><b><u>Validation</u></b></p>
            <p>The validation procedure is described in the documentation for {@link #validateValue}.</p>
            <p><b><u>Alter Validation Behavior</u></b></p>
            <p>Validation behavior for each field can be configured:</p>
            <div class="mdetail-params"><ul>
            <li><code>{@link Ext.form.TextField#invalidText invalidText}</code> : the default validation message to
            show if any validation step above does not provide a message when invalid</li>
            <li><code>{@link Ext.form.TextField#maskRe maskRe}</code> : filter out keystrokes before any validation occurs</li>
            <li><code>{@link Ext.form.TextField#stripCharsRe stripCharsRe}</code> : filter characters after being typed in,
            but before being validated</li>
            <li><code>{@link Ext.form.Field#invalidClass invalidClass}</code> : alternate style when invalid</li>
            <li><code>{@link Ext.form.Field#validateOnBlur validateOnBlur}</code>,
            <code>{@link Ext.form.Field#validationDelay validationDelay}</code>, and
            <code>{@link Ext.form.Field#validationEvent validationEvent}</code> : modify how/when validation is triggered</li>
            </ul></div>
            @constructor Creates a new TextField
            @param {Object} config Configuration options
            @xtype textfield
            </summary>
        </member>
        <member name="M:Ext.form.TextField.autoSize">
            <summary>
            Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
            This only takes effect if <tt><b>{@link #grow}</b> = true</tt>, and fires the {@link #autosize} event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.form.TextField.getErrors(System.Object)" -->
        <member name="M:Ext.form.TextField.initComponent">
            <summary>
            @cfg {Boolean} enableKeyEvents <tt>true</tt> to enable the proxying of key events for the HTML input
            field (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="M:Ext.form.TextField.reset">
            <summary>
            Resets the current field value to the originally-loaded value and clears any validation messages.
            Also adds <tt><b>{@link #emptyText}</b></tt> and <tt><b>{@link #emptyClass}</b></tt> if the
            original value was blank.
            </summary>
        </member>
        <member name="M:Ext.form.TextField.selectText(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Selects text in this field
            @param {Number} start (optional) The index where the selection should start (defaults to 0)
            @param {Number} end (optional) The index where the selection should end (defaults to the text length)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.allowBlank">
            <summary>
            @cfg {Boolean} allowBlank Specify <tt>false</tt> to validate that the value's length is > 0 (defaults to
            <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.blankText">
            <summary>
            @cfg {String} blankText The error text to display if the <b><tt>{@link #allowBlank}</tt></b> validation
            fails (defaults to <tt>'This field is required'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.disableKeyFilter">
            <summary>
            @cfg {Boolean} disableKeyFilter Specify <tt>true</tt> to disable input keystroke filtering (defaults
            to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.emptyClass">
            <summary>
            @cfg {String} emptyClass The CSS class to apply to an empty field to style the <b><tt>{@link #emptyText}</tt></b>
            (defaults to <tt>'x-form-empty-field'</tt>).  This class is automatically added and removed as needed
            depending on the current field value.
            </summary>
        </member>
        <member name="P:Ext.form.TextField.emptyText">
            <summary>
            @cfg {String} emptyText The default text to place into an empty field (defaults to <tt>null</tt>).
            <b>Note</b>: that this value will be submitted to the server if this field is enabled and configured
            with a {@link #name}.
            </summary>
        </member>
        <member name="P:Ext.form.TextField.grow">
            <summary>
            @cfg {Boolean} grow <tt>true</tt> if this field should automatically grow and shrink to its content
            (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.growMax">
            <summary>
            @cfg {Number} growMax The maximum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
            to <tt>800</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.growMin">
            <summary>
            @cfg {Number} growMin The minimum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
            to <tt>30</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.maskRe">
            <summary>
            @cfg {RegExp} maskRe An input mask regular expression that will be used to filter keystrokes that do
            not match (defaults to <tt>null</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.maxLengthText">
            <summary>
            @cfg {String} maxLengthText Error text to display if the <b><tt>{@link #maxLength maximum length}</tt></b>
            validation fails (defaults to <tt>'The maximum length for this field is {maxLength}'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.minLength">
            <summary>
            @cfg {Number} minLength Minimum input field length required (defaults to <tt>0</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.minLengthText">
            <summary>
            @cfg {String} minLengthText Error text to display if the <b><tt>{@link #minLength minimum length}</tt></b>
            validation fails (defaults to <tt>'The minimum length for this field is {minLength}'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.regex">
            <summary>
            @cfg {RegExp} regex A JavaScript RegExp object to be tested against the field value during validation
            (defaults to <tt>null</tt>). If the test fails, the field will be marked invalid using
            <b><tt>{@link #regexText}</tt></b>.
            </summary>
        </member>
        <member name="P:Ext.form.TextField.regexText">
            <summary>
            @cfg {String} regexText The error text to display if <b><tt>{@link #regex}</tt></b> is used and the
            test fails during validation (defaults to <tt>''</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextField.selectOnFocus">
            <summary>
            @cfg {Boolean} selectOnFocus <tt>true</tt> to automatically select any existing field text when the field
            receives input focus (defaults to <tt>false</tt>)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.TextField.validator" -->
        <member name="P:Ext.form.TextField.vtype">
            <summary>
            @cfg {String} vtype A validation type name as defined in {@link Ext.form.VTypes} (defaults to <tt>null</tt>)
            </summary>
        </member>
        <member name="M:Ext.form.TriggerField.setEditable(System.Boolean)">
            <summary>
            Allow or prevent the user from directly editing the field text.  If false is passed,
            the user will only be able to modify the field using the trigger.  Will also add
            a click event to the text field which will call the trigger. This method
            is the runtime equivalent of setting the {@link #editable} config option at config time.
            @param {Boolean} value True to allow the user to directly edit the field text.
            </summary>
        </member>
        <member name="M:Ext.form.TriggerField.setHideTrigger(System.Boolean)">
            <summary>
            Changes the hidden status of the trigger.
            @param {Boolean} hideTrigger True to hide the trigger, false to show it.
            </summary>
        </member>
        <member name="M:Ext.form.TriggerField.setReadOnly(System.Boolean)">
            <summary>
            Setting this to true will supersede settings {@link #editable} and {@link #hideTrigger}.
            Setting this to false will defer back to {@link #editable} and {@link #hideTrigger}. This method
            is the runtime equivalent of setting the {@link #readOnly} config option at config time.
            @param {Boolean} value True to prevent the user changing the field and explicitly
            hide the trigger.
            </summary>
        </member>
        <member name="P:Ext.form.TriggerField.editable">
            <summary>
            @cfg {Boolean} editable <tt>false</tt> to prevent the user from typing text directly into the field,
            the field will only respond to a click on the trigger to set the value. (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.TriggerField.hideTrigger">
            <summary>
            @cfg {Boolean} hideTrigger <tt>true</tt> to hide the trigger element and display only the base
            text field (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TriggerField.monitorTab">
            <summary>
            @hide
            @method autoSize
            </summary>
        </member>
        <member name="P:Ext.form.TriggerField.readOnly">
            <summary>
            @cfg {Boolean} readOnly <tt>true</tt> to prevent the user from changing the field, and
            hides the trigger.  Superceeds the editable and hideTrigger options if the value is true.
            (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TriggerField.wrapFocusClass">
            <summary>
            @cfg {String} wrapFocusClass The class added to the to the wrap of the trigger element. Defaults to
            <tt>x-trigger-wrap-focus</tt>.
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.clearValue">
            <summary>
            Clears any text/value currently set in the field
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.collapse">
            <summary>
            Hides the dropdown list if it is currently expanded. Fires the {@link #collapse} event on completion.
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.doQuery(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Execute a query to filter the dropdown list.  Fires the {@link #beforequery} event prior to performing the
            query allowing the query action to be canceled if needed.
            @param {String} query The SQL query to execute
            @param {Boolean} forceAll <tt>true</tt> to force the query to execute even if there are currently fewer
            characters in the field than the minimum specified by the <tt>{@link #minChars}</tt> config option.  It
            also clears any filter previously saved in the current store (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.expand">
            <summary>
            Expands the dropdown list if it is currently hidden. Fires the {@link #expand} event on completion.
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.getListParent">
            <summary>
            <p>Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.</p>
            A custom implementation may be provided as a configuration option if the floating list needs to be rendered
            to a different Element. An example might be rendering the list inside a Menu so that clicking
            the list does not hide the Menu:<pre><code>
            var store = new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ['initials', 'fullname'],
            data : [
            ['FF', 'Fred Flintstone'],
            ['BR', 'Barney Rubble']
            ]
            });
            var combo = new Ext.form.ComboBox({
            store: store,
            displayField: 'fullname',
            emptyText: 'Select a name...',
            forceSelection: true,
            getListParent: function() {
            return this.el.up('.x-menu');
            },
            iconCls: 'no-icon', //use iconCls if placing within menu to shift to right side of menu
            mode: 'local',
            selectOnFocus: true,
            triggerAction: 'all',
            typeAhead: true,
            width: 135
            });
            var menu = new Ext.menu.Menu({
            id: 'mainMenu',
            items: [
            combo // A Field in a Menu
            ]
            });
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.getStore">
            <summary>
            Returns the store associated with this combo.
            @return {Ext.data.Store} The store
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.getValue">
            <summary>
            Returns the currently selected field value or empty string if no value is set.
            @return {String} value The selected value
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.initComponent">
            <summary>
            The value of the match string used to filter the store. Delete this property to force a requery.
            Example use:
            <pre><code>
            var combo = new Ext.form.ComboBox({
            ...
            mode: 'remote',
            ...
            listeners: {
            // delete the previous query in the beforequery event or set
            // combo.lastQuery = null (this will reload the store the next time it expands)
            beforequery: function(qe){
            delete qe.combo.lastQuery;
            }
            }
            });
            </code></pre>
            To make sure the filter in the store is not cleared the first time the ComboBox trigger is used
            configure the combo with <tt>lastQuery=''</tt>. Example use:
            <pre><code>
            var combo = new Ext.form.ComboBox({
            ...
            mode: 'local',
            triggerAction: 'all',
            lastQuery: ''
            });
            </code></pre>
            @property lastQuery
            @type String
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.isExpanded">
            <summary>
            Returns true if the dropdown list is expanded, else false.
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.onTriggerClick">
            <summary>
            @method onTriggerClick
            @hide
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.select(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
            The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            @param {Number} index The zero-based index of the list item to select
            @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
            selected item if it is not currently in view (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.selectByValue(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
            The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            @param {String} value The data value of the item to select
            @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
            selected item if it is not currently in view (defaults to true)
            @return {Boolean} True if the value matched an item in the list, else false
            </summary>
        </member>
        <member name="M:Ext.form.ComboBox.setValue(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the specified value into the field.  If the value finds a match, the corresponding record text
            will be displayed in the field.  If the value does not match the data value of an existing item,
            and the valueNotFoundText config option is defined, it will be displayed as the default field text.
            Otherwise the field will be blank (although the value will still be set).
            @param {String} value The value to match
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.allQuery">
            <summary>
            @cfg {String} allQuery The text query to send to the server to return all records for the list
            with no filtering (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.autoSelect">
            <summary>
            @cfg {Boolean} autoSelect <tt>true</tt> to select the first result gathered by the data store (defaults
            to <tt>true</tt>).  A false value would require a manual selection from the dropdown list to set the components value
            unless the value of ({@link #typeAheadDelay}) were true.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.clearFilterOnReset">
            <summary>
            @cfg {Boolean} clearFilterOnReset <tt>true</tt> to clear any filters on the store (when in local mode) when reset is called
            (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.forceSelection">
            <summary>
            @cfg {Boolean} forceSelection <tt>true</tt> to restrict the selected value to one of the values in the list,
            <tt>false</tt> to allow the user to set arbitrary text into the field (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.handleHeight">
            <summary>
            @cfg {Number} handleHeight The height in pixels of the dropdown list resize handle if
            <tt>{@link #resizable} = true</tt> (defaults to <tt>8</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.lazyInit">
            <summary>
            @cfg {Boolean} lazyInit <tt>true</tt> to not initialize the list for this combo until the field is focused
            (defaults to <tt>true</tt>)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.ComboBox.listAlign" -->
        <member name="P:Ext.form.ComboBox.listClass">
            <summary>
            @cfg {String} listClass The CSS class to add to the predefined <tt>'x-combo-list'</tt> class
            applied the dropdown list element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.listEmptyText">
            <summary>
            @cfg {String} listEmptyText The empty text to display in the data view if no items are found.
            (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.loadingText">
            <summary>
            @cfg {String} loadingText The text to display in the dropdown list while data is loading.  Only applies
            when <tt>{@link #mode} = 'remote'</tt> (defaults to <tt>'Loading...'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.maxHeight">
            <summary>
            @cfg {Number} maxHeight The maximum height in pixels of the dropdown list before scrollbars are shown
            (defaults to <tt>300</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.minChars">
            <summary>
            @cfg {Number} minChars The minimum number of characters the user must type before autocomplete and
            {@link #typeAhead} activate (defaults to <tt>4</tt> if <tt>{@link #mode} = 'remote'</tt> or <tt>0</tt> if
            <tt>{@link #mode} = 'local'</tt>, does not apply if
            <tt>{@link Ext.form.TriggerField#editable editable} = false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.minHeight">
            <summary>
            @cfg {Number} minHeight The minimum height in pixels of the dropdown list when the list is constrained by its
            distance to the viewport edges (defaults to <tt>90</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.minListWidth">
            <summary>
            @cfg {Number} minListWidth The minimum width of the dropdown list in pixels (defaults to <tt>70</tt>, will
            be ignored if <tt>{@link #listWidth}</tt> has a higher value)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.mode">
            <summary>
            @cfg {String} mode Acceptable values are:
            <div class="mdetail-params"><ul>
            <li><b><tt>'remote'</tt></b> : <b>Default</b>
            <p class="sub-desc">Automatically loads the <tt>{@link #store}</tt> the <b>first</b> time the trigger
            is clicked. If you do not want the store to be automatically loaded the first time the trigger is
            clicked, set to <tt>'local'</tt> and manually load the store.  To force a requery of the store
            <b>every</b> time the trigger is clicked see <tt>{@link #lastQuery}</tt>.</p></li>
            <li><b><tt>'local'</tt></b> :
            <p class="sub-desc">ComboBox loads local data</p>
            <pre><code>
            var combo = new Ext.form.ComboBox({
            renderTo: document.body,
            mode: 'local',
            store: new Ext.data.ArrayStore({
            id: 0,
            fields: [
            'myId',  // numeric value is the key
            'displayText'
            ],
            data: [[1, 'item1'], [2, 'item2']]  // data is local
            }),
            valueField: 'myId',
            displayField: 'displayText',
            triggerAction: 'all'
            });
            </code></pre></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.pageSize">
            <summary>
            @cfg {Number} pageSize If greater than <tt>0</tt>, a {@link Ext.PagingToolbar} is displayed in the
            footer of the dropdown list and the {@link #doQuery filter queries} will execute with page start and
            {@link Ext.PagingToolbar#pageSize limit} parameters. Only applies when <tt>{@link #mode} = 'remote'</tt>
            (defaults to <tt>0</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.queryDelay">
            <summary>
            @cfg {Number} queryDelay The length of time in milliseconds to delay between the start of typing and
            sending the query to filter the dropdown list (defaults to <tt>500</tt> if <tt>{@link #mode} = 'remote'</tt>
            or <tt>10</tt> if <tt>{@link #mode} = 'local'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.queryParam">
            <summary>
            @cfg {String} queryParam Name of the query ({@link Ext.data.Store#baseParam baseParam} name for the store)
            as it will be passed on the querystring (defaults to <tt>'query'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.resizable">
            <summary>
            @cfg {Boolean} resizable <tt>true</tt> to add a resize handle to the bottom of the dropdown list
            (creates an {@link Ext.Resizable} with 'se' {@link Ext.Resizable#pinned pinned} handles).
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.selectedClass">
            <summary>
            @cfg {String} selectedClass CSS class to apply to the selected item in the dropdown list
            (defaults to <tt>'x-combo-selected'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.selectOnFocus">
            <summary>
            @cfg {Boolean} selectOnFocus <tt>true</tt> to select any existing text in the field immediately on focus.
            Only applies when <tt>{@link Ext.form.TriggerField#editable editable} = true</tt> (defaults to
            <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.shadow">
            <summary>
            @cfg {Boolean/String} shadow <tt>true</tt> or <tt>"sides"</tt> for the default effect, <tt>"frame"</tt> for
            4-way shadow, and <tt>"drop"</tt> for bottom-right
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.triggerAction">
            <summary>
            @cfg {String} triggerAction The action to execute when the trigger is clicked.
            <div class="mdetail-params"><ul>
            <li><b><tt>'query'</tt></b> : <b>Default</b>
            <p class="sub-desc">{@link #doQuery run the query} using the {@link Ext.form.Field#getRawValue raw value}.</p></li>
            <li><b><tt>'all'</tt></b> :
            <p class="sub-desc">{@link #doQuery run the query} specified by the <tt>{@link #allQuery}</tt> config option</p></li>
            </ul></div>
            <p>See also <code>{@link #queryParam}</code>.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.triggerClass">
            <summary>
            @cfg {String} triggerClass An additional CSS class used to style the trigger button.  The trigger will always
            get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
            (defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward arrow icon).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.typeAhead">
            <summary>
            @cfg {Boolean} typeAhead <tt>true</tt> to populate and autoselect the remainder of the text being
            typed after a configurable delay ({@link #typeAheadDelay}) if it matches a known value (defaults
            to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBox.typeAheadDelay">
            <summary>
            @cfg {Number} typeAheadDelay The length of time in milliseconds to wait until the typeahead text is displayed
            if <tt>{@link #typeAhead} = true</tt> (defaults to <tt>250</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.allQuery">
            <summary>
            The text query to send to the server to return all records for the list
            with no filtering (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.autoCreate">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element spec, or <tt>true</tt> for a default
            element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
            See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
            <pre><code>{tag: "input", type: "text", size: "24", autocomplete: "off"}</code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.autoSelect">
            <summary>
            <tt>true</tt> to select the first result gathered by the data store (defaults
            to <tt>true</tt>).  A false value would require a manual selection from the dropdown list to set the components value
            unless the value of ({@link #typeAheadDelay}) were true.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.clearFilterOnReset">
            <summary>
            <tt>true</tt> to clear any filters on the store (when in local mode) when reset is called
            (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.displayField">
            <summary>
            The underlying {@link Ext.data.Field#name data field name} to bind to this
            ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field1'</tt> if
            {@link #transform transforming a select} or if the {@link #store field name is autogenerated based on
            the store configuration}).
            <p>See also <tt>{@link #valueField}</tt>.</p>
            <p><b>Note</b>: if using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a
            {@link Ext.grid.Column#renderer renderer} will be needed to show the displayField when the editor is not
            active.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.forceSelection">
            <summary>
            <tt>true</tt> to restrict the selected value to one of the values in the list,
            <tt>false</tt> to allow the user to set arbitrary text into the field (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.grow">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.growMax">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.growMin">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.handleHeight">
            <summary>
            The height in pixels of the dropdown list resize handle if
            <tt>{@link #resizable} = true</tt> (defaults to <tt>8</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.hiddenId">
            <summary>
            If <tt>{@link #hiddenName}</tt> is specified, <tt>hiddenId</tt> can also be provided
            to give the hidden field a unique id.  The <tt>hiddenId</tt> and combo {@link Ext.Component#id id} should be
            different, since no two DOM nodes should share the same id.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.hiddenName">
            <summary>
            If specified, a hidden form field with this name is dynamically generated to store the
            field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically
            post during a form submission.  See also {@link #valueField}.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.hiddenValue">
            <summary>
            Sets the initial value of the hidden field if {@link #hiddenName} is
            specified to contain the selected {@link #valueField}, from the Store. Defaults to the configured
            <tt>{@link Ext.form.Field#value value}</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.ComboBoxConfig.itemSelector" -->
        <member name="P:Ext.form.ComboBoxConfig.lazyInit">
            <summary>
            <tt>true</tt> to not initialize the list for this combo until the field is focused
            (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.lazyRender">
            <summary>
            <tt>true</tt> to prevent the ComboBox from rendering until requested
            (should always be used when rendering into an {@link Ext.Editor} (e.g. {@link Ext.grid.EditorGridPanel Grids}),
            defaults to <tt>false</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.ComboBoxConfig.listAlign" -->
        <member name="P:Ext.form.ComboBoxConfig.listClass">
            <summary>
            The CSS class to add to the predefined <tt>'x-combo-list'</tt> class
            applied the dropdown list element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.listEmptyText">
            <summary>
            The empty text to display in the data view if no items are found.
            (defaults to '')
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.ComboBoxConfig.listWidth" -->
        <member name="P:Ext.form.ComboBoxConfig.loadingText">
            <summary>
            The text to display in the dropdown list while data is loading.  Only applies
            when <tt>{@link #mode} = 'remote'</tt> (defaults to <tt>'Loading...'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.maxHeight">
            <summary>
            The maximum height in pixels of the dropdown list before scrollbars are shown
            (defaults to <tt>300</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.minChars">
            <summary>
            The minimum number of characters the user must type before autocomplete and
            {@link #typeAhead} activate (defaults to <tt>4</tt> if <tt>{@link #mode} = 'remote'</tt> or <tt>0</tt> if
            <tt>{@link #mode} = 'local'</tt>, does not apply if
            <tt>{@link Ext.form.TriggerField#editable editable} = false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.minHeight">
            <summary>
            The minimum height in pixels of the dropdown list when the list is constrained by its
            distance to the viewport edges (defaults to <tt>90</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.minListWidth">
            <summary>
            The minimum width of the dropdown list in pixels (defaults to <tt>70</tt>, will
            be ignored if <tt>{@link #listWidth}</tt> has a higher value)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.mode">
            <summary>
            Acceptable values are:
            <div class="mdetail-params"><ul>
            <li><b><tt>'remote'</tt></b> : <b>Default</b>
            <p class="sub-desc">Automatically loads the <tt>{@link #store}</tt> the <b>first</b> time the trigger
            is clicked. If you do not want the store to be automatically loaded the first time the trigger is
            clicked, set to <tt>'local'</tt> and manually load the store.  To force a requery of the store
            <b>every</b> time the trigger is clicked see <tt>{@link #lastQuery}</tt>.</p></li>
            <li><b><tt>'local'</tt></b> :
            <p class="sub-desc">ComboBox loads local data</p>
            <pre><code>
            var combo = new Ext.form.ComboBox({
            renderTo: document.body,
            mode: 'local',
            store: new Ext.data.ArrayStore({
            id: 0,
            fields: [
            'myId',  // numeric value is the key
            'displayText'
            ],
            data: [[1, 'item1'], [2, 'item2']]  // data is local
            }),
            valueField: 'myId',
            displayField: 'displayText',
            triggerAction: 'all'
            });
            </code></pre></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.pageSize">
            <summary>
            If greater than <tt>0</tt>, a {@link Ext.PagingToolbar} is displayed in the
            footer of the dropdown list and the {@link #doQuery filter queries} will execute with page start and
            {@link Ext.PagingToolbar#pageSize limit} parameters. Only applies when <tt>{@link #mode} = 'remote'</tt>
            (defaults to <tt>0</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.queryDelay">
            <summary>
            The length of time in milliseconds to delay between the start of typing and
            sending the query to filter the dropdown list (defaults to <tt>500</tt> if <tt>{@link #mode} = 'remote'</tt>
            or <tt>10</tt> if <tt>{@link #mode} = 'local'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.queryParam">
            <summary>
            Name of the query ({@link Ext.data.Store#baseParam baseParam} name for the store)
            as it will be passed on the querystring (defaults to <tt>'query'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.resizable">
            <summary>
            <tt>true</tt> to add a resize handle to the bottom of the dropdown list
            (creates an {@link Ext.Resizable} with 'se' {@link Ext.Resizable#pinned pinned} handles).
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.selectedClass">
            <summary>
            CSS class to apply to the selected item in the dropdown list
            (defaults to <tt>'x-combo-selected'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.selectOnFocus">
            <summary>
            <tt>true</tt> to select any existing text in the field immediately on focus.
            Only applies when <tt>{@link Ext.form.TriggerField#editable editable} = true</tt> (defaults to
            <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.shadow">
            <summary>
            <tt>true</tt> or <tt>"sides"</tt> for the default effect, <tt>"frame"</tt> for
            4-way shadow, and <tt>"drop"</tt> for bottom-right
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.store">
            <summary>
            The data source to which this combo is bound (defaults to <tt>undefined</tt>).
            Acceptable values for this property are:
            <div class="mdetail-params"><ul>
            <li><b>any {@link Ext.data.Store Store} subclass</b></li>
            <li><b>an Array</b> : Arrays will be converted to a {@link Ext.data.ArrayStore} internally,
            automatically generating {@link Ext.data.Field#name field names} to work with all data components.
            <div class="mdetail-params"><ul>
            <li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)<div class="sub-desc">
            A 1-dimensional array will automatically be expanded (each array item will be used for both the combo
            {@link #valueField} and {@link #displayField})</div></li>
            <li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)<div class="sub-desc">
            For a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo
            {@link #valueField}, while the value at index 1 is assumed to be the combo {@link #displayField}.
            </div></li></ul></div></li></ul></div>
            <p>See also <tt>{@link #mode}</tt>.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.submitValue">
            <summary>
            False to clear the name attribute on the field so that it is not submitted during a form post.
            If a hiddenName is specified, setting this to true will cause both the hidden field and the element to be submitted.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.title">
            <summary>
            If supplied, a header element is created containing this text and added into the top of
            the dropdown list (defaults to undefined, with no header element)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.ComboBoxConfig.tpl" -->
        <member name="P:Ext.form.ComboBoxConfig.transform">
            <summary>
            The id, DOM node or element of an existing HTML SELECT to convert to a ComboBox.
            Note that if you specify this and the combo is going to be in an {@link Ext.form.BasicForm} or
            {@link Ext.form.FormPanel}, you must also set <tt>{@link #lazyRender} = true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.triggerAction">
            <summary>
            The action to execute when the trigger is clicked.
            <div class="mdetail-params"><ul>
            <li><b><tt>'query'</tt></b> : <b>Default</b>
            <p class="sub-desc">{@link #doQuery run the query} using the {@link Ext.form.Field#getRawValue raw value}.</p></li>
            <li><b><tt>'all'</tt></b> :
            <p class="sub-desc">{@link #doQuery run the query} specified by the <tt>{@link #allQuery}</tt> config option</p></li>
            </ul></div>
            <p>See also <code>{@link #queryParam}</code>.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.triggerClass">
            <summary>
            An additional CSS class used to style the trigger button.  The trigger will always
            get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
            (defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward arrow icon).
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.typeAhead">
            <summary>
            <tt>true</tt> to populate and autoselect the remainder of the text being
            typed after a configurable delay ({@link #typeAheadDelay}) if it matches a known value (defaults
            to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.typeAheadDelay">
            <summary>
            The length of time in milliseconds to wait until the typeahead text is displayed
            if <tt>{@link #typeAhead} = true</tt> (defaults to <tt>250</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.valueField">
            <summary>
            The underlying {@link Ext.data.Field#name data value name} to bind to this
            ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field2'</tt> if
            {@link #transform transforming a select} or if the {@link #store field name is autogenerated based on
            the store configuration}).
            <p><b>Note</b>: use of a <tt>valueField</tt> requires the user to make a selection in order for a value to be
            mapped.  See also <tt>{@link #hiddenName}</tt>, <tt>{@link #hiddenValue}</tt>, and <tt>{@link #displayField}</tt>.</p>
            </summary>
        </member>
        <member name="P:Ext.form.ComboBoxConfig.valueNotFoundText">
            <summary>
            When using a name/value combo, if the value passed to setValue is not found in
            the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined). If this
            default text is used, it means there is no value set and no validation will occur on this field.
            </summary>
        </member>
        <member name="T:Ext.form.CompositeField">
            <summary>
            @class Ext.form.CompositeField
            @extends Ext.form.Field
            Composite field allowing a number of form Fields to be rendered on the same row. The fields are rendered
            using an hbox layout internally, so all of the normal HBox layout config items are available. Example usage:
            <pre>
            {
            xtype: 'compositefield',
            labelWidth: 120
            items: [
            {
            xtype     : 'textfield',
            fieldLabel: 'Title',
            width     : 20
            },
            {
            xtype     : 'textfield',
            fieldLabel: 'First',
            flex      : 1
            },
            {
            xtype     : 'textfield',
            fieldLabel: 'Last',
            flex      : 1
            }
            ]
            }
            </pre>
            In the example above the composite's fieldLabel will be set to 'Title, First, Last' as it groups the fieldLabels
            of each of its children. This can be overridden by setting a fieldLabel on the compositefield itself:
            <pre>
            {
            xtype: 'compositefield',
            fieldLabel: 'Custom label',
            items: [...]
            }
            </pre>
            Any Ext.form.* component can be placed inside a composite field.
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.beforeDestroy">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.buildCombinedErrorMessage(SharpKit.JavaScript.JsArray)">
            <summary>
            Takes an object containing error messages for contained fields, returning a combined error
            string (defaults to just placing each item on a new line). This can be overridden to provide
            custom combined error message handling.
            @param {Array} errors Array of errors in format: [{field: 'title', error: 'some error'}]
            @return {String} The combined error message
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.buildLabel(SharpKit.JavaScript.JsArray)">
            <summary>
            Builds a label string from an array of subfield labels.
            By default this just joins the labels together with a comma
            @param {Array} segments Array of each of the labels in the composite field's subfields
            @return {String} The built label
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.clearInvalidChildren">
            <summary>
            Calls clearInvalid on all child fields. This is a convenience function and should not often need to be called
            as fields usually take care of clearing themselves
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.doLayout(System.Object,System.Object)">
            <summary>
            @private
            Forces the internal container to be laid out again
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.eachItem(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            @private
            Convenience function which passes the given function to every item in the composite
            @param {Function} fn The function to call
            @param {Object} scope Optional scope object
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.isDirty">
            <summary>
            Checks each field in the composite and returns true if any is dirty
            @return {Boolean} True if any field is dirty
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.onFieldClearInvalid(Ext.form.Field)">
            <summary>
            Called if combineErrors is true and a subfield's clearInvalid method is called.
            By default this just updates the internal fieldErrors MixedCollection.
            @param {Ext.form.Field} field The field that was marked invalid
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.onFieldMarkInvalid(Ext.form.Field,SharpKit.JavaScript.JsString)">
            <summary>
            Called if combineErrors is true and a subfield's markInvalid method is called.
            By default this just adds the subfield's error to the internal fieldErrors MixedCollection
            @param {Ext.form.Field} field The field that was marked invalid
            @param {String} message The error message
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.onRender(System.Object,System.Object)">
            <summary>
            @private
            Creates an internal container using hbox and renders the fields to it
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.onResize(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private
            Passes the resize call through to the inner panel
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.reset">
            <summary>
            Resets each field in the composite to their previous value
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.sortErrors">
            <summary>
            Sorts the internal fieldErrors MixedCollection by the order in which the fields are defined.
            This is called before displaying errors to ensure that the errors are presented in the expected order.
            This function can be overridden to provide a custom sorting order if needed.
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.updateInvalidMark">
            <summary>
            @private
            Called after a subfield is marked valid or invalid, this checks to see if any of the subfields are
            currently invalid. If any subfields are invalid it builds a combined error message marks the composite
            invalid, otherwise clearInvalid is called
            </summary>
        </member>
        <member name="M:Ext.form.CompositeField.validateValue">
            <summary>
            Performs validation checks on each subfield and returns false if any of them fail validation.
            @return {Boolean} False if any subfield failed validation
            </summary>
        </member>
        <member name="P:Ext.form.CompositeField.combineErrors">
            <summary>
            @property combineErrors
            @type Boolean
            True to combine errors from the individual fields into a single error message at the CompositeField level (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.CompositeField.defaultMargins">
            <summary>
            @property defaultMargins
            @type String
            The margins to apply by default to each field in the composite
            </summary>
        </member>
        <member name="P:Ext.form.CompositeField.isComposite">
            <summary>
            @property isComposite
            @type Boolean
            Signifies that this is a Composite field
            </summary>
        </member>
        <member name="P:Ext.form.CompositeField.labelConnector">
            <summary>
            @cfg {String} labelConnector The string to use when joining segments of the built label together (defaults to ', ')
            </summary>
        </member>
        <member name="P:Ext.form.CompositeField.skipLastItemMargin">
            <summary>
            @property skipLastItemMargin
            @type Boolean
            If true, the defaultMargins are not applied to the last item in the composite field set (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.CompositeFieldConfig.defaults">
            <summary>
            Any default properties to assign to the child fields.
            </summary>
        </member>
        <member name="P:Ext.form.CompositeFieldConfig.labelConnector">
            <summary>
            The string to use when joining segments of the built label together (defaults to ', ')
            </summary>
        </member>
        <member name="T:Ext.form.DateField">
            <summary>
            @class Ext.form.DateField
            @extends Ext.form.TriggerField
            Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation.
            @constructor
            Create a new DateField
            @param {Object} config
            @xtype datefield
            </summary>
        </member>
        <member name="M:Ext.form.DateField.getErrors(System.Object)">
            <summary>
            Runs all of NumberFields validations and returns an array of any errors. Note that this first
            runs TextField's validations, so the returned array is an amalgamation of all field errors.
            The additional validation checks are testing that the date format is valid, that the chosen
            date is within the min and max date constraints set, that the date chosen is not in the disabledDates
            regex and that the day chosed is not one of the disabledDays.
            @param {Mixed} value The value to get errors for (defaults to the current field value)
            @return {Array} All validation errors for this field
            </summary>
        </member>
        <member name="M:Ext.form.DateField.getValue">
            <summary>
            Returns the current date value of the date field.
            @return {Date} The date value
            </summary>
        </member>
        <member name="M:Ext.form.DateField.onTriggerClick">
            <summary>
            @method onTriggerClick
            @hide
            </summary>
        </member>
        <member name="M:Ext.form.DateField.setDisabledDates(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled dates with new values and refreshes the DatePicker.
            @param {Array} disabledDates An array of date strings (see the <tt>{@link #disabledDates}</tt> config
            for details on supported values) used to disable a pattern of dates.
            </summary>
        </member>
        <member name="M:Ext.form.DateField.setDisabledDays(SharpKit.JavaScript.JsArray)">
            <summary>
            Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
            @param {Array} disabledDays An array of disabled day indexes. See the <tt>{@link #disabledDays}</tt>
            config for details on supported values.
            </summary>
        </member>
        <member name="M:Ext.form.DateField.setMaxValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing <tt>{@link #maxValue}</tt> with the new value and refreshes the DatePicker.
            @param {Date} value The maximum date that can be selected
            </summary>
        </member>
        <member name="M:Ext.form.DateField.setMinValue(SharpKit.JavaScript.JsDate)">
            <summary>
            Replaces any existing <tt>{@link #minValue}</tt> with the new value and refreshes the DatePicker.
            @param {Date} value The minimum date that can be selected
            </summary>
        </member>
        <member name="M:Ext.form.DateField.setValue(System.Object)">
            <summary>
            Sets the value of the date field.  You can pass a date object or any string that can be
            parsed into a valid date, using <tt>{@link #format}</tt> as the date format, according
            to the same rules as {@link Date#parseDate} (the default format used is <tt>"m/d/Y"</tt>).
            <br />Usage:
            <pre><code>
            //All of these calls set the same date value (May 4, 2006)
            //Pass a date object:
            var dt = new Date('5/4/2006');
            dateField.setValue(dt);
            //Pass a date string (default format):
            dateField.setValue('05/04/2006');
            //Pass a date string (custom format):
            dateField.format = 'Y-m-d';
            dateField.setValue('2006-05-04');
            </code></pre>
            @param {String/Date} date The date or valid date string
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.DateField.altFormats">
            <summary>
            @cfg {String} altFormats
            Multiple date formats separated by "<tt>|</tt>" to try when parsing a user input value and it
            does not match the defined format (defaults to
            <tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.disabledDatesText">
            <summary>
            @cfg {String} disabledDatesText
            The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DateField.disabledDaysText">
            <summary>
            @cfg {String} disabledDaysText
            The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DateField.format">
            <summary>
            @cfg {String} format
            The default date format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to <tt>'m/d/Y'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.invalidText">
            <summary>
            @cfg {String} invalidText
            The error text to display when the date in the field is invalid (defaults to
            <tt>'{value} is not a valid date - it must be in the format {format}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.maxText">
            <summary>
            @cfg {String} maxText
            The error text to display when the date in the cell is after <tt>{@link #maxValue}</tt> (defaults to
            <tt>'The date in this field must be before {maxValue}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.minText">
            <summary>
            @cfg {String} minText
            The error text to display when the date in the cell is before <tt>{@link #minValue}</tt> (defaults to
            <tt>'The date in this field must be after {minValue}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.showToday">
            <summary>
            @cfg {Boolean} showToday
            <tt>false</tt> to hide the footer area of the DatePicker containing the Today button and disable
            the keyboard handler for spacebar that selects the current date (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateField.startDay">
            <summary>
            @cfg {Number} startDay
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
            </summary>
        </member>
        <member name="P:Ext.form.DateField.triggerClass">
            <summary>
            @cfg {String} triggerClass
            An additional CSS class used to style the trigger button.  The trigger will always get the
            class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
            (defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar icon).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.altFormats">
            <summary>
            Multiple date formats separated by "<tt>|</tt>" to try when parsing a user input value and it
            does not match the defined format (defaults to
            <tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.autoCreate">
            <summary>
            A {@link Ext.DomHelper DomHelper element specification object}, or <tt>true</tt> for the default element
            specification object:<pre><code>
            autoCreate: {tag: "input", type: "text", size: "10", autocomplete: "off"}
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.disabledDates">
            <summary>
            An array of "dates" to disable, as strings. These strings will be used to build a dynamic regular
            expression so they are very powerful. Some examples:<pre><code>
            // disable these exact dates:
            disabledDates: ["03/08/2003", "09/16/2003"]
            // disable these days for every year:
            disabledDates: ["03/08", "09/16"]
            // only match the beginning (useful if you are using short years):
            disabledDates: ["^03/08"]
            // disable every day in March 2006:
            disabledDates: ["03/../2006"]
            // disable every day in every March:
            disabledDates: ["^03"]
            </code></pre>
            Note that the format of the dates included in the array should exactly match the {@link #format} config.
            In order to support regular expressions, if you are using a {@link #format date format} that has "." in
            it, you will have to escape the dot when restricting dates. For example: <tt>["03\\.08\\.03"]</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.disabledDatesText">
            <summary>
            The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.disabledDays">
            <summary>
            An array of days to disable, 0 based (defaults to null). Some examples:<pre><code>
            // disable Sunday and Saturday:
            disabledDays:  [0, 6]
            // disable weekdays:
            disabledDays: [1,2,3,4,5]
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.disabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.format">
            <summary>
            The default date format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to <tt>'m/d/Y'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.grow">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.growMax">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.growMin">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.invalidText">
            <summary>
            The error text to display when the date in the field is invalid (defaults to
            <tt>'{value} is not a valid date - it must be in the format {format}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.maxText">
            <summary>
            The error text to display when the date in the cell is after <tt>{@link #maxValue}</tt> (defaults to
            <tt>'The date in this field must be before {maxValue}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.maxValue">
            <summary>
            The maximum allowed date. Can be either a Javascript date object or a string date in a
            valid format (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.minText">
            <summary>
            The error text to display when the date in the cell is before <tt>{@link #minValue}</tt> (defaults to
            <tt>'The date in this field must be after {minValue}'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.minValue">
            <summary>
            The minimum allowed date. Can be either a Javascript date object or a string date in a
            valid format (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.showToday">
            <summary>
            <tt>false</tt> to hide the footer area of the DatePicker containing the Today button and disable
            the keyboard handler for spacebar that selects the current date (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.startDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
            </summary>
        </member>
        <member name="P:Ext.form.DateFieldConfig.triggerClass">
            <summary>
            An additional CSS class used to style the trigger button.  The trigger will always get the
            class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
            (defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar icon).
            </summary>
        </member>
        <member name="T:Ext.form.DisplayField">
            <summary>
            @class Ext.form.DisplayField
            @extends Ext.form.Field
            A display-only text field which is not validated and not submitted.
            @constructor
            Creates a new DisplayField.
            @param {Object} config Configuration options
            @xtype displayfield
            </summary>
        </member>
        <member name="P:Ext.form.DisplayField.fieldClass">
            <summary>
            @cfg {String} fieldClass The default CSS class for the field (defaults to <tt>"x-form-display-field"</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DisplayField.htmlEncode">
            <summary>
            @cfg {Boolean} htmlEncode <tt>false</tt> to skip HTML-encoding the text when rendering it (defaults to
            <tt>false</tt>). This might be useful if you want to include tags in the field's innerHTML rather than
            rendering them as string literals per the default logic.
            </summary>
        </member>
        <member name="P:Ext.form.DisplayField.validateOnBlur">
            <summary>
            @class Ext.form.DisplayField
            @extends Ext.form.Field
            A display-only text field which is not validated and not submitted.
            @constructor
            Creates a new DisplayField.
            @param {Object} config Configuration options
            @xtype displayfield
            </summary>
        </member>
        <member name="P:Ext.form.DisplayField.validationEvent">
            <summary>
            @class Ext.form.DisplayField
            @extends Ext.form.Field
            A display-only text field which is not validated and not submitted.
            @constructor
            Creates a new DisplayField.
            @param {Object} config Configuration options
            @xtype displayfield
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.disabled">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.fieldClass">
            <summary>
            The default CSS class for the field (defaults to <tt>"x-form-display-field"</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.htmlEncode">
            <summary>
            <tt>false</tt> to skip HTML-encoding the text when rendering it (defaults to
            <tt>false</tt>). This might be useful if you want to include tags in the field's innerHTML rather than
            rendering them as string literals per the default logic.
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.inputType">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.readOnly">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.validateOnBlur">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.validationDelay">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.DisplayFieldConfig.validationEvent">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.autoCreate">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element spec, or true for a default
            element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
            See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
            <pre><code>{tag: 'input', type: 'text', size: '20', autocomplete: 'off'}</code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.autoHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.cls">
            <summary>
            A custom CSS class to apply to the field's underlying element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.disabled">
            <summary>
            True to disable the field (defaults to false).
            <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
            disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.fieldClass">
            <summary>
            The default CSS class for the field (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.focusClass">
            <summary>
            The CSS class to use when the field receives focus (defaults to 'x-form-focus')
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.inputType">
            <summary>
            The type attribute for input fields -- e.g. radio, text, password, file (defaults
            to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
            no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
            is not supported and should be avoided.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.invalidClass">
            <summary>
            The CSS class to use when marking a field invalid (defaults to 'x-form-invalid')
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.invalidText">
            <summary>
            The error text to use when marking a field invalid and no message is provided
            (defaults to 'The value in this field is invalid')
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.msgFx">
            <summary>
            <b>Experimental</b> The effect used when displaying a validation message under the field
            (defaults to 'normal').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.FieldConfig.msgTarget" -->
        <member name="P:Ext.form.FieldConfig.name">
            <summary>
            The field's HTML name attribute (defaults to '').
            <b>Note</b>: this property must be set if this field is to be automatically included with
            {@link Ext.form.BasicForm#submit form submit()}.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.preventMark">
            <summary>
            <tt>true</tt> to disable {@link #markInvalid marking the field invalid}.
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.FieldConfig.readOnly" -->
        <member name="P:Ext.form.FieldConfig.submitValue">
            <summary>
            False to clear the name attribute on the field so that it is not submitted during a form post.
            Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.tabIndex">
            <summary>
            The tabIndex for this field. Note this only applies to fields that are rendered,
            not those which are built via applyTo (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.validateOnBlur">
            <summary>
            Whether the field should validate when it loses focus (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.validationDelay">
            <summary>
            The length of time in milliseconds after user input begins until validation
            is initiated (defaults to 250)
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.validationEvent">
            <summary>
            The event that should initiate field validation. Set to false to disable
            automatic validation (defaults to 'keyup').
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.value">
            <summary>
            A value to initialize this field with (defaults to undefined).
            </summary>
        </member>
        <member name="T:Ext.form.FieldSet">
            <summary>
            @class Ext.form.FieldSet
            @extends Ext.Panel
            Standard container used for grouping items within a {@link Ext.form.FormPanel form}.
            <pre><code>
            var form = new Ext.FormPanel({
            title: 'Simple Form with FieldSets',
            labelWidth: 75, // label settings here cascade unless overridden
            url: 'save-form.php',
            frame:true,
            bodyStyle:'padding:5px 5px 0',
            width: 700,
            renderTo: document.body,
            layout:'column', // arrange items in columns
            defaults: {      // defaults applied to items
            layout: 'form',
            border: false,
            bodyStyle: 'padding:4px'
            },
            items: [{
            // Fieldset in Column 1
            xtype:'fieldset',
            columnWidth: 0.5,
            title: 'Fieldset 1',
            collapsible: true,
            autoHeight:true,
            defaults: {
            anchor: '-20' // leave room for error icon
            },
            defaultType: 'textfield',
            items :[{
            fieldLabel: 'Field 1'
            }, {
            fieldLabel: 'Field 2'
            }, {
            fieldLabel: 'Field 3'
            }
            ]
            },{
            // Fieldset in Column 2 - Panel inside
            xtype:'fieldset',
            title: 'Show Panel', // title, header, or checkboxToggle creates fieldset header
            autoHeight:true,
            columnWidth: 0.5,
            checkboxToggle: true,
            collapsed: true, // fieldset initially collapsed
            layout:'anchor',
            items :[{
            xtype: 'panel',
            anchor: '100%',
            title: 'Panel inside a fieldset',
            frame: true,
            height: 100
            }]
            }]
            });
            </code></pre>
            @constructor
            @param {Object} config Configuration options
            @xtype fieldset
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.onCheckClick">
            <summary>
            This function is called by the fieldset's checkbox when it is toggled (only applies when
            checkboxToggle = true).  This method should never be called externally, but can be
            overridden to provide custom behavior when the checkbox is toggled if needed.
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.animCollapse">
            <summary>
            @cfg {Boolean} animCollapse
            <tt>true</tt> to animate the transition when the panel is collapsed, <tt>false</tt> to skip the
            animation (defaults to <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.baseCls">
            <summary>
            @cfg {String} baseCls The base CSS class applied to the fieldset (defaults to <tt>'x-fieldset'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.layout">
            <summary>
            @cfg {String} layout The {@link Ext.Container#layout} to use inside the fieldset (defaults to <tt>'form'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.activeItem">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.animCollapse">
            <summary>
            <tt>true</tt> to animate the transition when the panel is collapsed, <tt>false</tt> to skip the
            animation (defaults to <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.applyTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.baseCls">
            <summary>
            The base CSS class applied to the fieldset (defaults to <tt>'x-fieldset'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.bodyBorder">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.border">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.bufferResize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.checkboxName">
            <summary>
            The name to assign to the fieldset's checkbox if <tt>{@link #checkboxToggle} = true</tt>
            (defaults to <tt>'[checkbox id]-checkbox'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.checkboxToggle">
            <summary>
            <tt>true</tt> to render a checkbox into the fieldset frame just
            in front of the legend to expand/collapse the fieldset when the checkbox is toggled. (defaults
            to <tt>false</tt>).
            <p>A {@link Ext.DomHelper DomHelper} element spec may also be specified to create the checkbox.
            If <tt>true</tt> is specified, the default DomHelper config object used to create the element
            is:</p><pre><code>
            {tag: 'input', type: 'checkbox', name: this.checkboxName || this.id+'-checkbox'}
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.collapseFirst">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.collapsible">
            <summary>
            <tt>true</tt> to make the fieldset collapsible and have the expand/collapse toggle button automatically
            rendered into the legend element, <tt>false</tt> to keep the fieldset statically sized with no collapse
            button (defaults to <tt>false</tt>). Another option is to configure <tt>{@link #checkboxToggle}</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.defaultType">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.disabledClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.elements">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.floating">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.footer">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.frame">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.header">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.headerAsText">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.hideCollapseTool">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.iconCls">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.itemCls">
            <summary>
            A css class to apply to the <tt>x-form-item</tt> of fields (see
            {@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl} for details).
            This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.labelWidth">
            <summary>
            The width of labels. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.layout">
            <summary>
            The {@link Ext.Container#layout} to use inside the fieldset (defaults to <tt>'form'</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.shadow">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.shadowOffset">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.shim">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.tbar">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.tools">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.toolTemplate">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.xtype">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Hidden">
            <summary>
            @class Ext.form.Hidden
            @extends Ext.form.Field
            A basic hidden field for storing hidden values in forms that need to be passed in the form submit.
            @constructor
            Create a new Hidden field.
            @param {Object} config Configuration options
            @xtype hidden
            </summary>
        </member>
        <member name="P:Ext.form.Hidden.inputType">
            <summary>
            @class Ext.form.Hidden
            @extends Ext.form.Field
            A basic hidden field for storing hidden values in forms that need to be passed in the form submit.
            @constructor
            Create a new Hidden field.
            @param {Object} config Configuration options
            @xtype hidden
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.form.HtmlEditor" -->
        <member name="M:Ext.form.HtmlEditor.cleanHtml(SharpKit.JavaScript.JsString)">
            <summary>
            Protected method that will not generally be called directly. If you need/want
            custom HTML cleanup, this is the method you should override.
            @param {String} html The HTML to be cleaned
            @return {String} The cleaned HTML
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.createToolbar(System.Object)">
            <summary>
            Protected method that will not generally be called directly. It
            is called when the editor creates its toolbar. Override this method if you need to
            add custom toolbar buttons.
            @param {HtmlEditor} editor
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.execCmd(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Executes a Midas editor command directly on the editor document.
            For visual commands, you should use {@link #relayCmd} instead.
            <b>This should only be called after the editor is initialized.</b>
            @param {String} cmd The Midas command
            @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.getDocMarkup">
            <summary>
            Protected method that will not generally be called directly. It
            is called when the editor initializes the iframe with HTML contents. Override this method if you
            want to change the initialization markup of the iframe (e.g. to add stylesheets).
            *
            Note: IE8-Standards has unwanted scroller behavior, so the default meta tag forces IE7 compatibility
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.getToolbar">
            <summary>
            Returns the editor's toolbar. <b>This is only available after the editor has been rendered.</b>
            @return {Ext.Toolbar}
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.insertAtCursor(SharpKit.JavaScript.JsString)">
            <summary>
            Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
            to insert text.
            @param {String} text
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.pushValue">
            <summary>
            Protected method that will not generally be called directly. Pushes the value of the textarea
            into the iframe editor.
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.relayCmd(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and
            toolbar updates. <b>This should only be called after the editor is initialized.</b>
            @param {String} cmd The Midas command
            @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.setDesignMode(System.Object)">
            <summary>
            set current design mode. To enable, mode can be true or 'on', off otherwise
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.syncValue">
            <summary>
            Protected method that will not generally be called directly. Syncs the contents
            of the editor iframe with the textarea.
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.toggleSourceEdit(System.Boolean)">
            <summary>
            Toggles the editor between standard and source edit mode.
            @param {Boolean} sourceEdit (optional) True for source edit, false for standard
            </summary>
        </member>
        <member name="M:Ext.form.HtmlEditor.updateToolbar">
            <summary>
            Protected method that will not generally be called directly. It triggers
            a toolbar update by reading the markup state of the current selection in the editor.
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.createLinkText">
            <summary>
            @cfg {String} createLinkText The default text for the create link prompt
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableAlignments">
            <summary>
            @cfg {Boolean} enableAlignments Enable the left, center, right alignment buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableColors">
            <summary>
            @cfg {Boolean} enableColors Enable the fore/highlight color buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableFont">
            <summary>
            @cfg {Boolean} enableFont Enable font selection. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableFontSize">
            <summary>
            @cfg {Boolean} enableFontSize Enable the increase/decrease font size buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableFormat">
            <summary>
            @cfg {Boolean} enableFormat Enable the bold, italic and underline buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableLinks">
            <summary>
            @cfg {Boolean} enableLinks Enable the create link button. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableLists">
            <summary>
            @cfg {Boolean} enableLists Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditor.enableSourceEdit">
            <summary>
            @cfg {Boolean} enableSourceEdit Enable the switch to source edit button. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.allowDomMove">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.applyTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.autoCreate">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.autoHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.cls">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.createLinkText">
            <summary>
            The default text for the create link prompt
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.defaultLinkValue">
            <summary>
            The default value for the create link prompt (defaults to http:/ /)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.defaultValue">
            <summary>
            A default value to be put into the editor to resolve focus issues (defaults to &#160; (Non-breaking space) in Opera and IE6, &#8203; (Zero-width space) in all other browsers).
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.disabled">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.disabledClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableAlignments">
            <summary>
            Enable the left, center, right alignment buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableColors">
            <summary>
            Enable the fore/highlight color buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableFont">
            <summary>
            Enable font selection. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableFontSize">
            <summary>
            Enable the increase/decrease font size buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableFormat">
            <summary>
            Enable the bold, italic and underline buttons (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableLinks">
            <summary>
            Enable the create link button. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableLists">
            <summary>
            Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.enableSourceEdit">
            <summary>
            Enable the switch to source edit button. Not available in Safari. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.fieldClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.focusClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.fontFamilies">
            <summary>
            An array of available font families
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.inputType">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.invalidClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.invalidText">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.msgFx">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.msgTarget">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.readOnly">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.style">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.tabIndex">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.validateOnBlur">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.validationDelay">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.HtmlEditorConfig.validationEvent">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Label">
            <summary>
            @class Ext.form.Label
            @extends Ext.BoxComponent
            Basic Label field.
            @constructor
            Creates a new Label
            @param {Ext.Element/String/Object} config The configuration options.  If an element is passed, it is set as the internal
            element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element
            and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component.
            @xtype label
            </summary>
        </member>
        <member name="M:Ext.form.Label.onRender(System.Object,System.Object)">
            <summary>
            @cfg {String} html An HTML fragment that will be used as the label's innerHTML (defaults to '').
            Note that if {@link #text} is specified it will take precedence and this value will be ignored.
            </summary>
        </member>
        <member name="M:Ext.form.Label.setText(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Updates the label's innerHTML with the specified string.
            @param {String} text The new label text
            @param {Boolean} encode (optional) False to skip HTML-encoding the text when rendering it
            to the label (defaults to true which encodes the value). This might be useful if you want to include
            tags in the label's innerHTML rather than rendering them as string literals per the default logic.
            @return {Label} this
            </summary>
        </member>
        <member name="P:Ext.form.LabelConfig.forId">
            <summary>
            The id of the input element to which this label will be bound via the standard HTML 'for'
            attribute. If not specified, the attribute will not be added to the label.
            </summary>
        </member>
        <member name="P:Ext.form.LabelConfig.text">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML
            tags within the label's innerHTML, use the {@link #html} config instead.
            </summary>
        </member>
        <member name="T:Ext.form.NumberField">
            <summary>
            @class Ext.form.NumberField
            @extends Ext.form.TextField
            Numeric text field that provides automatic keystroke filtering and numeric validation.
            @constructor
            Creates a new NumberField
            @param {Object} config Configuration options
            @xtype numberfield
            </summary>
        </member>
        <member name="M:Ext.form.NumberField.fixPrecision(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.NumberField.getErrors(System.Object)">
            <summary>
            Runs all of NumberFields validations and returns an array of any errors. Note that this first
            runs TextField's validations, so the returned array is an amalgamation of all field errors.
            The additional validations run test that the value is a number, and that it is within the
            configured min and max values.
            @param {Mixed} value The value to get errors for (defaults to the current field value)
            @return {Array} All validation errors for this field
            </summary>
        </member>
        <member name="M:Ext.form.NumberField.setMaxValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Replaces any existing {@link #maxValue} with the new value.
            @param {Number} value The maximum value
            </summary>
        </member>
        <member name="M:Ext.form.NumberField.setMinValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Replaces any existing {@link #minValue} with the new value.
            @param {Number} value The minimum value
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.allowDecimals">
            <summary>
            @cfg {Boolean} allowDecimals False to disallow decimal values (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.allowNegative">
            <summary>
            @cfg {Boolean} allowNegative False to prevent entering a negative sign (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.autoStripChars">
            <summary>
            @cfg {Boolean} autoStripChars True to automatically strip not allowed characters from the field. Defaults to <tt>false</tt>
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.baseChars">
            <summary>
            @cfg {String} baseChars The base set of characters to evaluate as valid numbers (defaults to '0123456789').
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.decimalPrecision">
            <summary>
            @cfg {Number} decimalPrecision The maximum precision to display after the decimal separator (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.decimalSeparator">
            <summary>
            @cfg {String} decimalSeparator Character(s) to allow as the decimal separator (defaults to '.')
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.fieldClass">
            <summary>
            @cfg {String} fieldClass The default CSS class for the field (defaults to "x-form-field x-form-num-field")
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.maxText">
            <summary>
            @cfg {String} maxText Error text to display if the maximum value validation fails (defaults to "The maximum value for this field is {maxValue}")
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.minText">
            <summary>
            @cfg {String} minText Error text to display if the minimum value validation fails (defaults to "The minimum value for this field is {minValue}")
            </summary>
        </member>
        <member name="P:Ext.form.NumberField.nanText">
            <summary>
            @cfg {String} nanText Error text to display if the value is not a valid number.  For example, this can happen
            if a valid character like '.' or '-' is left in the field with no number (defaults to "{value} is not a valid number")
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.allowDecimals">
            <summary>
            False to disallow decimal values (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.allowNegative">
            <summary>
            False to prevent entering a negative sign (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.autoStripChars">
            <summary>
            True to automatically strip not allowed characters from the field. Defaults to <tt>false</tt>
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.baseChars">
            <summary>
            The base set of characters to evaluate as valid numbers (defaults to '0123456789').
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.decimalPrecision">
            <summary>
            The maximum precision to display after the decimal separator (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.decimalSeparator">
            <summary>
            Character(s) to allow as the decimal separator (defaults to '.')
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.fieldClass">
            <summary>
            The default CSS class for the field (defaults to "x-form-field x-form-num-field")
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.maskRe">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.maxText">
            <summary>
            Error text to display if the maximum value validation fails (defaults to "The maximum value for this field is {maxValue}")
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.maxValue">
            <summary>
            The maximum allowed value (defaults to Number.MAX_VALUE)
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.minText">
            <summary>
            Error text to display if the minimum value validation fails (defaults to "The minimum value for this field is {minValue}")
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.minValue">
            <summary>
            The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.nanText">
            <summary>
            Error text to display if the value is not a valid number.  For example, this can happen
            if a valid character like '.' or '-' is left in the field with no number (defaults to "{value} is not a valid number")
            </summary>
        </member>
        <member name="P:Ext.form.NumberFieldConfig.stripCharsRe">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Radio">
            <summary>
            @class Ext.form.Radio
            @extends Ext.form.Checkbox
            Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
            Radio grouping is handled automatically by the browser if you give each radio in a group the same name.
            @constructor
            Creates a new Radio
            @param {Object} config Configuration options
            @xtype radio
            </summary>
        </member>
        <member name="M:Ext.form.Radio.getGroupValue">
            <summary>
            If this radio is part of a group, it will return the selected value
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.form.Radio.setValue(System.Object)">
            <summary>
            Sets either the checked/unchecked status of this Radio, or, if a string value
            is passed, checks a sibling Radio of the same name whose value is the value specified.
            @param value {String/Boolean} Checked value, or the value of the sibling radio button to check.
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.Radio.inputType">
            <summary>
            @class Ext.form.Radio
            @extends Ext.form.Checkbox
            Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
            Radio grouping is handled automatically by the browser if you give each radio in a group the same name.
            @constructor
            Creates a new Radio
            @param {Object} config Configuration options
            @xtype radio
            </summary>
        </member>
        <member name="T:Ext.form.RadioGroup">
            <summary>
            @class Ext.form.RadioGroup
            @extends Ext.form.CheckboxGroup
            A grouping container for {@link Ext.form.Radio} controls.
            @constructor
            Creates a new RadioGroup
            @param {Object} config Configuration options
            @xtype radiogroup
            </summary>
        </member>
        <member name="M:Ext.form.RadioGroup.getValue">
            <summary>
            Gets the selected {@link Ext.form.Radio} in the group, if it exists.
            @return {Ext.form.Radio} The selected radio.
            </summary>
        </member>
        <member name="M:Ext.form.RadioGroup.onSetValue(System.Object,System.Boolean)">
            <summary>
            Sets the checked radio in the group.
            @param {String/Ext.form.Radio} id The radio to check.
            @param {Boolean} value The value to set the radio.
            @return {Ext.form.RadioGroup} this
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroup.allowBlank">
            <summary>
            @cfg {Boolean} allowBlank True to allow every item in the group to be blank (defaults to true).
            If allowBlank = false and no items are selected at validation time, {@link @blankText} will
            be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroup.blankText">
            <summary>
            @cfg {String} blankText Error text to display if the {@link #allowBlank} validation fails
            (defaults to 'You must select one item in this group')
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroupConfig.allowBlank">
            <summary>
            True to allow every item in the group to be blank (defaults to true).
            If allowBlank = false and no items are selected at validation time, {@link @blankText} will
            be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroupConfig.blankText">
            <summary>
            Error text to display if the {@link #allowBlank} validation fails
            (defaults to 'You must select one item in this group')
            </summary>
        </member>
        <member name="P:Ext.form.RadioGroupConfig.items">
            <summary>
            An Array of {@link Ext.form.Radio Radio}s or Radio config objects
            to arrange in the group.
            </summary>
        </member>
        <member name="T:Ext.form.SliderField">
            <summary>
            @class Ext.form.SliderField
            @extends Ext.form.Field
            Wraps a {@link Ext.slider.MultiSlider Slider} so it can be used as a form field.
            @constructor
            Creates a new SliderField
            @param {Object} config Configuration options. Note that you can pass in any slider configuration options, as well as
            as any field configuration options.
            @xtype sliderfield
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.alignErrorIcon">
            <summary>
            If a side icon is shown, do alignment to the slider
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.beforeDestroy">
            <summary>
            Ensure the slider is destroyed when the field is destroyed.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.getValue">
            <summary>
            Gets the current value for this field.
            @return {Number} The current value.
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.initComponent">
            <summary>
            Initialize the component.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.initEvents">
            <summary>
            Initialize any events for this class.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.onChange(System.Object,System.Object)">
            <summary>
            Utility method to set the value of the field when the slider changes.
            @param {Object} slider The slider object.
            @param {Object} v The new value.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.onDisable">
            <summary>
            Disable the slider when the field is disabled.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.onEnable">
            <summary>
            Enable the slider when the field is enabled.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.onRender(System.Object,System.Object)">
            <summary>
            Set up the hidden field
            @param {Object} ct The container to render to.
            @param {Object} position The position in the container to render to.
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.onResize(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Ensure that the slider size is set automatically when the field resizes.
            @param {Object} w The width
            @param {Object} h The height
            @param {Object} aw The adjusted width
            @param {Object} ah The adjusted height
            @private
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.setMaxValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the maximum field value.
            @param {Number} v The new maximum value.
            @return {Ext.form.SliderField} this
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.setMinValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the minimum field value.
            @param {Number} v The new minimum value.
            @return {Ext.form.SliderField} this
            </summary>
        </member>
        <member name="M:Ext.form.SliderField.setValue(System.Object,System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="P:Ext.form.SliderField.tipText">
            <summary>
            @cfg {Function} tipText
            A function used to display custom text for the slider tip. Defaults to <tt>null</tt>, which will
            use the default on the plugin.
            </summary>
        </member>
        <member name="P:Ext.form.SliderField.useTips">
            <summary>
            @cfg {Boolean} useTips
            True to use an Ext.slider.Tip to display tips for the value. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.SliderFieldConfig.tipText">
            <summary>
            A function used to display custom text for the slider tip. Defaults to <tt>null</tt>, which will
            use the default on the plugin.
            </summary>
        </member>
        <member name="P:Ext.form.SliderFieldConfig.useTips">
            <summary>
            True to use an Ext.slider.Tip to display tips for the value. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="T:Ext.form.TextArea">
            <summary>
            @class Ext.form.TextArea
            @extends Ext.form.TextField
            Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
            support for auto-sizing.
            @constructor
            Creates a new TextArea
            @param {Object} config Configuration options
            @xtype textarea
            </summary>
        </member>
        <member name="M:Ext.form.TextArea.autoSize">
            <summary>
            Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
            This only takes effect if grow = true, and fires the {@link #autosize} event if the height changes.
            </summary>
        </member>
        <member name="M:Ext.form.TextArea.onRender(System.Object,System.Object)">
            <summary>
            @cfg {String/Object} autoCreate <p>A {@link Ext.DomHelper DomHelper} element spec, or true for a default
            element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
            See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
            <pre><code>{tag: "textarea", style: "width:100px;height:60px;", autocomplete: "off"}</code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.growAppend">
            <summary>
            @cfg {Number} growMax The maximum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
            (defaults to <tt>1000</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.growMax">
            <summary>
            @cfg {Number} growMax The maximum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
            (defaults to <tt>1000</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.growMin">
            <summary>
            @cfg {Number} growMin The minimum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
            (defaults to <tt>60</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.preventScrollbars">
            <summary>
            @cfg {Boolean} preventScrollbars <tt>true</tt> to prevent scrollbars from appearing regardless of how much text is
            in the field. This option is only relevant when {@link #grow} is <tt>true</tt>. Equivalent to setting overflow: hidden, defaults to
            <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.TextAreaConfig.growMin">
            <summary>
            The minimum height to allow when <tt>{@link Ext.form.TextField#grow grow}=true</tt>
            (defaults to <tt>60</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextAreaConfig.preventScrollbars">
            <summary>
            <tt>true</tt> to prevent scrollbars from appearing regardless of how much text is
            in the field. This option is only relevant when {@link #grow} is <tt>true</tt>. Equivalent to setting overflow: hidden, defaults to
            <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.allowBlank">
            <summary>
            Specify <tt>false</tt> to validate that the value's length is > 0 (defaults to
            <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.blankText">
            <summary>
            The error text to display if the <b><tt>{@link #allowBlank}</tt></b> validation
            fails (defaults to <tt>'This field is required'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.disableKeyFilter">
            <summary>
            Specify <tt>true</tt> to disable input keystroke filtering (defaults
            to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.emptyClass">
            <summary>
            The CSS class to apply to an empty field to style the <b><tt>{@link #emptyText}</tt></b>
            (defaults to <tt>'x-form-empty-field'</tt>).  This class is automatically added and removed as needed
            depending on the current field value.
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.emptyText">
            <summary>
            The default text to place into an empty field (defaults to <tt>null</tt>).
            <b>Note</b>: that this value will be submitted to the server if this field is enabled and configured
            with a {@link #name}.
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.grow">
            <summary>
            <tt>true</tt> if this field should automatically grow and shrink to its content
            (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.growMax">
            <summary>
            The maximum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
            to <tt>800</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.growMin">
            <summary>
            The minimum width to allow when <code><b>{@link #grow}</b> = true</code> (defaults
            to <tt>30</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.maskRe">
            <summary>
            An input mask regular expression that will be used to filter keystrokes that do
            not match (defaults to <tt>null</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.maxLength">
            <summary>
            Maximum input field length allowed by validation (defaults to Number.MAX_VALUE).
            This behavior is intended to provide instant feedback to the user by improving usability to allow pasting
            and editing or overtyping and back tracking. To restrict the maximum number of characters that can be
            entered into the field use <tt><b>{@link Ext.form.Field#autoCreate autoCreate}</b></tt> to add
            any attributes you want to a field, for example:<pre><code>
            var myField = new Ext.form.NumberField({
            id: 'mobile',
            anchor:'90%',
            fieldLabel: 'Mobile',
            maxLength: 16, // for validation
            autoCreate: {tag: 'input', type: 'text', size: '20', autocomplete: 'off', maxlength: '10'}
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.maxLengthText">
            <summary>
            Error text to display if the <b><tt>{@link #maxLength maximum length}</tt></b>
            validation fails (defaults to <tt>'The maximum length for this field is {maxLength}'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.minLength">
            <summary>
            Minimum input field length required (defaults to <tt>0</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.minLengthText">
            <summary>
            Error text to display if the <b><tt>{@link #minLength minimum length}</tt></b>
            validation fails (defaults to <tt>'The minimum length for this field is {minLength}'</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.regex">
            <summary>
            A JavaScript RegExp object to be tested against the field value during validation
            (defaults to <tt>null</tt>). If the test fails, the field will be marked invalid using
            <b><tt>{@link #regexText}</tt></b>.
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.regexText">
            <summary>
            The error text to display if <b><tt>{@link #regex}</tt></b> is used and the
            test fails during validation (defaults to <tt>''</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.selectOnFocus">
            <summary>
            <tt>true</tt> to automatically select any existing field text when the field
            receives input focus (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.stripCharsRe">
            <summary>
            A JavaScript RegExp object used to strip unwanted content from the value
            before validation (defaults to <tt>null</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.TextFieldConfig.validator" -->
        <member name="P:Ext.form.TextFieldConfig.vtype">
            <summary>
            A validation type name as defined in {@link Ext.form.VTypes} (defaults to <tt>null</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TextFieldConfig.vtypeText">
            <summary>
            A custom error message to display in place of the default message provided
            for the <b><code>{@link #vtype}</code></b> currently set for this field (defaults to <tt>''</tt>).  <b>Note</b>:
            only applies if <b><code>{@link #vtype}</code></b> is set, else ignored.
            </summary>
        </member>
        <member name="T:Ext.form.TimeField">
            <summary>
            @class Ext.form.TimeField
            @extends Ext.form.ComboBox
            Provides a time input field with a time dropdown and automatic time validation.  Example usage:
            <pre><code>
            new Ext.form.TimeField({
            minValue: '9:00 AM',
            maxValue: '6:00 PM',
            increment: 30
            });
            </code></pre>
            @constructor
            Create a new TimeField
            @param {Object} config
            @xtype timefield
            </summary>
        </member>
        <member name="M:Ext.form.TimeField.setMaxValue(System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.form.TimeField.setMinValue(System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.altFormats">
            <summary>
            @cfg {String} altFormats
            Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
            format (defaults to 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A').
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.format">
            <summary>
            @cfg {String} format
            The default time format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to 'g:i A', e.g., '3:15 PM').  For 24-hour time
            format try 'H:i' instead.
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.increment">
            <summary>
            @cfg {Number} increment
            The number of minutes between each time value in the list (defaults to 15).
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.invalidText">
            <summary>
            @cfg {String} invalidText
            The error text to display when the time in the field is invalid (defaults to
            '{value} is not a valid time').
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.maxText">
            <summary>
            @cfg {String} maxText
            The error text to display when the time is after maxValue (defaults to
            'The time in this field must be equal to or before {0}').
            </summary>
        </member>
        <member name="P:Ext.form.TimeField.minText">
            <summary>
            @cfg {String} minText
            The error text to display when the date in the cell is before minValue (defaults to
            'The time in this field must be equal to or after {0}').
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.altFormats">
            <summary>
            Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
            format (defaults to 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A').
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.format">
            <summary>
            The default time format string which can be overriden for localization support.  The format must be
            valid according to {@link Date#parseDate} (defaults to 'g:i A', e.g., '3:15 PM').  For 24-hour time
            format try 'H:i' instead.
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.increment">
            <summary>
            The number of minutes between each time value in the list (defaults to 15).
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.invalidText">
            <summary>
            The error text to display when the time in the field is invalid (defaults to
            '{value} is not a valid time').
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.maxText">
            <summary>
            The error text to display when the time is after maxValue (defaults to
            'The time in this field must be equal to or before {0}').
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.maxValue">
            <summary>
            The maximum allowed time. Can be either a Javascript date object with a valid time value or a string
            time in a valid format -- see {@link #format} and {@link #altFormats} (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.minText">
            <summary>
            The error text to display when the date in the cell is before minValue (defaults to
            'The time in this field must be equal to or after {0}').
            </summary>
        </member>
        <member name="P:Ext.form.TimeFieldConfig.minValue">
            <summary>
            The minimum allowed time. Can be either a Javascript date object with a valid time value or a string
            time in a valid format -- see {@link #format} and {@link #altFormats} (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.autoCreate">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} element spec, or true for a default
            element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
            See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
            <pre><code>{tag: "input", type: "text", size: "16", autocomplete: "off"}</code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.editable">
            <summary>
            <tt>false</tt> to prevent the user from typing text directly into the field,
            the field will only respond to a click on the trigger to set the value. (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.grow">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.growMax">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.growMin">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.hideTrigger">
            <summary>
            <tt>true</tt> to hide the trigger element and display only the base
            text field (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.readOnly">
            <summary>
            <tt>true</tt> to prevent the user from changing the field, and
            hides the trigger.  Superceeds the editable and hideTrigger options if the value is true.
            (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.triggerClass">
            <summary>
            An additional CSS class used to style the trigger button.  The trigger will always get the
            class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.triggerConfig">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the
            trigger element for this Field. (Optional).</p>
            <p>Specify this when you need a customized element to act as the trigger button for a TriggerField.</p>
            <p>Note that when using this option, it is the developer's responsibility to ensure correct sizing, positioning
            and appearance of the trigger.  Defaults to:</p>
            <pre><code>{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.triggerClass}</code></pre>
            </summary>
        </member>
        <member name="P:Ext.form.TriggerFieldConfig.wrapFocusClass">
            <summary>
            The class added to the to the wrap of the trigger element. Defaults to
            <tt>x-trigger-wrap-focus</tt>.
            </summary>
        </member>
        <member name="T:Ext.form.TwinTriggerField">
            <summary>
            @class Ext.form.TwinTriggerField
            @extends Ext.form.TriggerField
            TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class
            to be extended by an implementing class.  For an example of implementing this class, see the custom
            SearchField implementation here:
            <a href="http://extjs.com/deploy/ext/examples/form/custom.html">http://extjs.com/deploy/ext/examples/form/custom.html</a>
            </summary>
        </member>
        <member name="M:Ext.form.TwinTriggerField.initComponent">
            <summary>
            @cfg {String} trigger2Class
            An additional CSS class used to style the trigger button.  The trigger will always get the
            class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.
            </summary>
        </member>
        <member name="P:Ext.form.TwinTriggerFieldConfig.trigger1Class">
            <summary>
            An additional CSS class used to style the trigger button.  The trigger will always get the
            class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.
            </summary>
        </member>
        <member name="P:Ext.form.TwinTriggerFieldConfig.triggerConfig">
            <summary>
            <p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the trigger elements
            for this Field. (Optional).</p>
            <p>Specify this when you need a customized element to contain the two trigger elements for this Field.
            Each trigger element must be marked by the CSS class <tt>x-form-trigger</tt> (also see
            <tt>{@link #trigger1Class}</tt> and <tt>{@link #trigger2Class}</tt>).</p>
            <p>Note that when using this option, it is the developer's responsibility to ensure correct sizing,
            positioning and appearance of the triggers.</p>
            </summary>
        </member>
        <member name="T:Ext.grid.AbstractSelectionModel">
            <summary>
            @class Ext.grid.AbstractSelectionModel
            @extends Ext.util.Observable
            Abstract base class for grid SelectionModels.  It provides the interface that should be
            implemented by descendant classes.  This class should not be directly instantiated.
            @constructor
            </summary>
        </member>
        <member name="M:Ext.grid.AbstractSelectionModel.#ctor">
            <summary>
            The GridPanel for which this SelectionModel is handling selection. Read-only.
            @type Object
            @property grid
            </summary>
        </member>
        <member name="M:Ext.grid.AbstractSelectionModel.init(System.Object)">
            <summary>
            * @ignore Called by the grid automatically. Do not call directly.
            </summary>
        </member>
        <member name="M:Ext.grid.AbstractSelectionModel.isLocked">
            <summary>
            Returns true if the selections are locked.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.AbstractSelectionModel.lock">
            <summary>
            Locks the selections.
            </summary>
        </member>
        <member name="M:Ext.grid.AbstractSelectionModel.unlock">
            <summary>
            Unlocks the selections.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.ActionColumn" -->
        <member name="T:Ext.grid.Column">
            <summary>
            @class Ext.grid.Column
            <p>This class encapsulates column configuration data to be used in the initialization of a
            {@link Ext.grid.ColumnModel ColumnModel}.</p>
            <p>While subclasses are provided to render data in different ways, this class renders a passed
            data field unchanged and is usually used for textual columns.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.Column.#ctor(System.Object)">
            <summary>
            @private
            @cfg {Boolean} isColumn
            Used by ColumnModel setConfig method to avoid reprocessing a Column
            if <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column
            Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.grid.Column.destroy">
            <summary>
            @private
            Clean up. Remove any Editor. Remove any listeners.
            </summary>
        </member>
        <member name="M:Ext.grid.Column.getCellEditor(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}
            used to edit the cell.
            @param {Number} rowIndex The row index
            @return {Ext.Editor}
            </summary>
        </member>
        <member name="M:Ext.grid.Column.processEvent(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private
            Process and refire events routed from the GridView's processEvent method.
            Returns the event handler's status to allow cancelling of GridView's bubbling process.
            </summary>
        </member>
        <member name="M:Ext.grid.Column.renderer(System.Object)">
            <summary>
            Optional. A function which returns displayable data when passed the following parameters:
            <div class="mdetail-params"><ul>
            <li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
            <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
            <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
            <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container
            element <i>within</i> the table cell (e.g. 'style="color:red;"').</p></li></ul></p></li>
            <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was
            extracted.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
            <li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record
            was extracted.</p></li>
            </ul></div>
            @property renderer
            @type Function
            </summary>
        </member>
        <member name="M:Ext.grid.Column.setEditor(System.Object)">
            <summary>
            Sets a new editor for this column.
            @param {Ext.Editor/Ext.form.Field} editor The editor to set
            </summary>
        </member>
        <member name="P:Ext.grid.Column.isColumn">
            <summary>
            @private
            @cfg {Boolean} isColumn
            Used by ColumnModel setConfig method to avoid reprocessing a Column
            if <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column
            Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.grid.ActionColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} altText The alt text to use for the image element. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="M:Ext.grid.ActionColumn.processEvent(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private
            Process and refire events routed from the GridView's processEvent method.
            Also fires any configured click handlers. By default, cancels the mousedown event to prevent selection.
            Returns the event handler's status to allow cancelling of GridView's bubbling process.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumn.actionIdRe">
            <summary>
            @cfg {Array} items An Array which may contain multiple icon definitions, each element of which may contain:
            <div class="mdetail-params"><ul>
            <li><code>icon</code> : String<div class="sub-desc">The url of an image to display as the clickable element
            in the column.</div></li>
            <li><code>iconCls</code> : String<div class="sub-desc">A CSS class to apply to the icon image.
            To determine the class dynamically, configure the item with a <code>getClass</code> function.</div></li>
            <li><code>getClass</code> : Function<div class="sub-desc">A function which returns the CSS class to apply to the icon image.
            The function is passed the following parameters:<ul>
            <li><b>v</b> : Object<p class="sub-desc">The value of the column's configured field (if any).</p></li>
            <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
            <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
            <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
            (e.g. 'style="color:red;"').</p></li>
            </ul></p></li>
            <li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">The row index..</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">The column index.</p></li>
            <li><b>store</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
            </ul></div></li>
            <li><code>handler</code> : Function<div class="sub-desc">A function called when the icon is clicked.</div></li>
            <li><code>scope</code> : Scope<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the
            <code>handler</code> and <code>getClass</code> functions are executed. Fallback defaults are this Column's
            configured scope, then this Column.</div></li>
            <li><code>tooltip</code> : String<div class="sub-desc">A tooltip message to be displayed on hover.
            {@link Ext.QuickTips#init Ext.QuickTips} must have been initialized.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumn.altText">
            <summary>
            @cfg {String} altText The alt text to use for the image element. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumn.header">
            <summary>
            @cfg {Array} items An Array which may contain multiple icon definitions, each element of which may contain:
            <div class="mdetail-params"><ul>
            <li><code>icon</code> : String<div class="sub-desc">The url of an image to display as the clickable element
            in the column.</div></li>
            <li><code>iconCls</code> : String<div class="sub-desc">A CSS class to apply to the icon image.
            To determine the class dynamically, configure the item with a <code>getClass</code> function.</div></li>
            <li><code>getClass</code> : Function<div class="sub-desc">A function which returns the CSS class to apply to the icon image.
            The function is passed the following parameters:<ul>
            <li><b>v</b> : Object<p class="sub-desc">The value of the column's configured field (if any).</p></li>
            <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
            <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
            <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
            (e.g. 'style="color:red;"').</p></li>
            </ul></p></li>
            <li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">The row index..</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">The column index.</p></li>
            <li><b>store</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
            </ul></div></li>
            <li><code>handler</code> : Function<div class="sub-desc">A function called when the icon is clicked.</div></li>
            <li><code>scope</code> : Scope<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the
            <code>handler</code> and <code>getClass</code> functions are executed. Fallback defaults are this Column's
            configured scope, then this Column.</div></li>
            <li><code>tooltip</code> : String<div class="sub-desc">A tooltip message to be displayed on hover.
            {@link Ext.QuickTips#init Ext.QuickTips} must have been initialized.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.altText">
            <summary>
            The alt text to use for the image element. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.getClass">
            <summary>
            A function which returns the CSS class to apply to the icon image.
            The function is passed the following parameters:<div class="mdetail-params"><ul>
            <li><b>v</b> : Object<p class="sub-desc">The value of the column's configured field (if any).</p></li>
            <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
            <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
            <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
            (e.g. 'style="color:red;"').</p></li>
            </ul></p></li>
            <li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">The row index..</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">The column index.</p></li>
            <li><b>store</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.handler">
            <summary>
            A function called when the icon is clicked.
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>grid</code> : GridPanel<div class="sub-desc">The owning GridPanel.</div></li>
            <li><code>rowIndex</code> : Number<div class="sub-desc">The row index clicked on.</div></li>
            <li><code>colIndex</code> : Number<div class="sub-desc">The column index clicked on.</div></li>
            <li><code>item</code> : Object<div class="sub-desc">The clicked item (or this Column if multiple
            {@link #items} were not configured).</div></li>
            <li><code>e</code> : Event<div class="sub-desc">The click event.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.icon">
            <summary>
            The URL of an image to display as the clickable element in the column.
            Optional - defaults to <code>{@link Ext#BLANK_IMAGE_URL Ext.BLANK_IMAGE_URL}</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.iconCls">
            <summary>
            A CSS class to apply to the icon image. To determine the class dynamically, configure the Column with a <code>{@link #getClass}</code> function.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
            and <code>{@link #getClass}</code> fuctions are executed. Defaults to this Column.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.stopSelection">
            <summary>
            Defaults to <code>true</code>. Prevent grid <i>row</i> selection upon mousedown.
            </summary>
        </member>
        <member name="P:Ext.grid.ActionColumnConfig.tooltip">
            <summary>
            A tooltip message to be displayed on hover. {@link Ext.QuickTips#init Ext.QuickTips} must have
            been initialized.
            </summary>
        </member>
        <member name="T:Ext.grid.BooleanColumn">
            <summary>
            @class Ext.grid.BooleanColumn
            @extends Ext.grid.Column
            <p>A Column definition class which renders boolean data fields.  See the {@link Ext.grid.Column#xtype xtype}
            config option of {@link Ext.grid.Column} for more details.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.BooleanColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} undefinedText
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&amp;#160;'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumn.falseText">
            <summary>
            @cfg {String} falseText
            The string returned by the renderer when the column value is falsy (but not undefined) (defaults to
            <tt>'false'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumn.trueText">
            <summary>
            @cfg {String} trueText
            The string returned by the renderer when the column value is not falsy (defaults to <tt>'true'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumn.undefinedText">
            <summary>
            @cfg {String} undefinedText
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&amp;#160;'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumnConfig.falseText">
            <summary>
            The string returned by the renderer when the column value is falsy (but not undefined) (defaults to
            <tt>'false'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumnConfig.trueText">
            <summary>
            The string returned by the renderer when the column value is not falsy (defaults to <tt>'true'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.BooleanColumnConfig.undefinedText">
            <summary>
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&amp;#160;'</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.CellSelectionModel" -->
        <member name="M:Ext.grid.CellSelectionModel.clearSelections(System.Boolean)">
            <summary>
            If anything is selected, clears all selections and fires the selectionchange event.
            @param {Boolean} preventNotify <tt>true</tt> to prevent the gridview from
            being notified about the change.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.grid.CellSelectionModel.#ctor(System.Object)" -->
        <member name="M:Ext.grid.CellSelectionModel.getSelectedCell">
            <summary>
            Returns an array containing the row and column indexes of the currently selected cell
            (e.g., [0, 0]), or null if none selected. The array has elements:
            <div class="mdetail-params"><ul>
            <li><b>rowIndex</b> : Number<p class="sub-desc">The index of the selected row</p></li>
            <li><b>cellIndex</b> : Number<p class="sub-desc">The index of the selected cell.
            Due to possible column reordering, the cellIndex should <b>not</b> be used as an
            index into the Record's data. Instead, use the cellIndex to determine the <i>name</i>
            of the selected cell and use the field name to retrieve the data value from the record:<pre><code>
            // get name
            var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
            // get data value based on name
            var data = record.get(fieldName);
            </code></pre></p></li>
            </ul></div>
            @return {Array} An array containing the row and column indexes of the selected cell, or null if none selected.
            </summary>
        </member>
        <member name="M:Ext.grid.CellSelectionModel.handleKeyDown(System.Object)">
            <summary>
            * @ignore
            </summary>
        </member>
        <member name="M:Ext.grid.CellSelectionModel.handleMouseDown(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            * @ignore
            </summary>
        </member>
        <member name="M:Ext.grid.CellSelectionModel.hasSelection">
            <summary>
            Returns <tt>true</tt> if there is a selection.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.CellSelectionModel.initEvents">
            <summary>
            * @ignore
            </summary>
        </member>
        <member name="M:Ext.grid.CellSelectionModel.select(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Ext.grid.CheckboxSelectionModel">
            <summary>
            @class Ext.grid.CheckboxSelectionModel
            @extends Ext.grid.RowSelectionModel
            A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.
            @constructor
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="T:Ext.grid.RowSelectionModel">
            <summary>
            @class Ext.grid.RowSelectionModel
            @extends Ext.grid.AbstractSelectionModel
            The default SelectionModel used by {@link Ext.grid.GridPanel}.
            It supports multiple selections and keyboard selection/navigation. The objects stored
            as selections and returned by {@link #getSelected}, and {@link #getSelections} are
            the {@link Ext.data.Record Record}s which provide the data for the selected rows.
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.clearSelections(System.Boolean)">
            <summary>
            Clears all selections if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
            @param {Boolean} fast (optional) <tt>true</tt> to bypass the
            conditional checks and events described in {@link #deselectRow}.
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.#ctor(System.Object)">
            <summary>
            @cfg {Boolean} singleSelect
            <tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>
            allowing multiple selections)
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.deselectRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Deselects a range of rows if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
            All rows in between startRow and endRow are also deselected.
            @param {Number} startRow The index of the first row in the range
            @param {Number} endRow The index of the last row in the range
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.deselectRow(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Deselects a row.  Before deselecting a row, checks if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is locked}.
            If this check is satisfied the row will be deselected and followed up by
            firing the {@link #rowdeselect} and {@link #selectionchange} events.
            @param {Number} row The index of the row to deselect
            @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
            prevent notifying the view (disables updating the selected appearance)
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Calls the passed function with each selection. If the function returns
            <tt>false</tt>, iteration is stopped and this function returns
            <tt>false</tt>. Otherwise it returns <tt>true</tt>.
            @param {Function} fn The function to call upon each iteration. It is passed the selected {@link Ext.data.Record Record}.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this RowSelectionModel.
            @return {Boolean} true if all selections were iterated
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.getCount">
            <summary>
            Gets the number of selected rows.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.getSelected">
            <summary>
            Returns the first selected record.
            @return {Record}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.getSelections">
            <summary>
            Returns the selected records
            @return {Array} Array of selected records
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.hasNext">
            <summary>
            Returns true if there is a next record to select
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.hasPrevious">
            <summary>
            Returns true if there is a previous record to select
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.hasSelection">
            <summary>
            Returns <tt>true</tt> if there is a selection.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.initEvents">
            <summary>
            @cfg {Boolean} moveEditorOnEnter
            <tt>false</tt> to turn off moving the editor to the next row down when the enter key is pressed
            or the next row up when shift + enter keys are pressed.
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.isIdSelected(SharpKit.JavaScript.JsString)">
            <summary>
            Returns <tt>true</tt> if the specified record id is selected.
            @param {String} id The id of record to check
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.isSelected(System.Object)">
            <summary>
            Returns <tt>true</tt> if the specified row is selected.
            @param {Number/Record} index The record or index of the record to check
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectAll">
            <summary>
            Selects all rows if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectFirstRow">
            <summary>
            Selects the first row in the grid.
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectLastRow(System.Boolean)">
            <summary>
            Select the last row.
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectNext(System.Boolean)">
            <summary>
            Selects the row immediately following the last selected row.
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
            @return {Boolean} <tt>true</tt> if there is a next row, else <tt>false</tt>
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectPrevious(System.Boolean)">
            <summary>
            Selects the row that precedes the last selected row.
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
            @return {Boolean} <tt>true</tt> if there is a previous row, else <tt>false</tt>
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Selects a range of rows if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
            All rows in between startRow and endRow are also selected.
            @param {Number} startRow The index of the first row in the range
            @param {Number} endRow The index of the last row in the range
            @param {Boolean} keepExisting (optional) True to retain existing selections
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectRecords(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Select records.
            @param {Array} records The records to select
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectRow(SharpKit.JavaScript.JsNumber,System.Boolean,System.Boolean)">
            <summary>
            Selects a row.  Before selecting a row, checks if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the
            {@link #beforerowselect} event.  If these checks are satisfied the row
            will be selected and followed up by  firing the {@link #rowselect} and
            {@link #selectionchange} events.
            @param {Number} row The index of the row to select
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep existing selections
            @param {Boolean} preventViewNotify (optional) Specify <tt>true</tt> to
            prevent notifying the view (disables updating the selected appearance)
            </summary>
        </member>
        <member name="M:Ext.grid.RowSelectionModel.selectRows(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Selects multiple rows.
            @param {Array} rows Array of the indexes of the row to select
            @param {Boolean} keepExisting (optional) <tt>true</tt> to keep
            existing selections (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.RowSelectionModel.singleSelect">
            <summary>
            @cfg {Boolean} singleSelect
            <tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>
            allowing multiple selections)
            </summary>
        </member>
        <member name="M:Ext.grid.CheckboxSelectionModel.processEvent(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            @private
            Process and refire events routed from the GridView's processEvent method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.CheckboxSelectionModel.header" -->
        <member name="P:Ext.grid.CheckboxSelectionModel.sortable">
            <summary>
            @cfg {Boolean} sortable <tt>true</tt> if the checkbox column is sortable (defaults to
            <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.CheckboxSelectionModel.width">
            <summary>
            @cfg {Number} width The default width in pixels of the checkbox column (defaults to <tt>20</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.CheckboxSelectionModelConfig.checkOnly">
            <summary>
            <tt>true</tt> if rows can only be selected by clicking on the
            checkbox column (defaults to <tt>false</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.CheckboxSelectionModelConfig.header" -->
        <member name="P:Ext.grid.CheckboxSelectionModelConfig.sortable">
            <summary>
            <tt>true</tt> if the checkbox column is sortable (defaults to
            <tt>false</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.CheckboxSelectionModelConfig.width">
            <summary>
            The default width in pixels of the checkbox column (defaults to <tt>20</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.align">
            <summary>
            Optional. Set the CSS text-align property of the column.  Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.css">
            <summary>
            Optional. An inline style definition string which is applied to all table cells in the column
            (excluding headers). Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.dataIndex">
            <summary>
            <p><b>Required</b>. The name of the field in the
            grid's {@link Ext.data.Store}'s {@link Ext.data.Record} definition from
            which to draw the column's value.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.editable">
            <summary>
            Optional. Defaults to <tt>true</tt>, enabling the configured
            <tt>{@link #editor}</tt>.  Set to <tt>false</tt> to initially disable editing on this column.
            The initial configuration may be dynamically altered using
            {@link Ext.grid.ColumnModel}.{@link Ext.grid.ColumnModel#setEditable setEditable()}.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.editor">
            <summary>
            Optional. The {@link Ext.form.Field} to use when editing values in this column
            if editing is supported by the grid. See <tt>{@link #editable}</tt> also.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.emptyGroupText">
            <summary>
            Optional. If the grid is being rendered by an {@link Ext.grid.GroupingView}, this option
            may be used to specify the text to display when there is an empty group value. Defaults to the
            {@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#emptyGroupText emptyGroupText}.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.fixed">
            <summary>
            Optional. <tt>true</tt> if the column width cannot be changed.  Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.groupable">
            <summary>
            Optional. If the grid is being rendered by an {@link Ext.grid.GroupingView}, this option
            may be used to disable the header menu item to group by the column selected. Defaults to <tt>true</tt>,
            which enables the header menu group option.  Set to <tt>false</tt> to disable (but still show) the
            group option in the header menu for the column. See also <code>{@link #groupName}</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.groupName">
            <summary>
            Optional. If the grid is being rendered by an {@link Ext.grid.GroupingView}, this option
            may be used to specify the text with which to prefix the group field value in the group header line.
            See also {@link #groupRenderer} and
            {@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#showGroupName showGroupName}.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.groupRenderer">
            <summary>
            <p>Optional. If the grid is being rendered by an {@link Ext.grid.GroupingView}, this option
            may be used to specify the function used to format the grouping field value for display in the group
            {@link #groupName header}.  If a <tt><b>groupRenderer</b></tt> is not specified, the configured
            <tt><b>{@link #renderer}</b></tt> will be called; if a <tt><b>{@link #renderer}</b></tt> is also not specified
            the new value of the group field will be used.</p>
            <p>The called function (either the <tt><b>groupRenderer</b></tt> or <tt><b>{@link #renderer}</b></tt>) will be
            passed the following parameters:
            <div class="mdetail-params"><ul>
            <li><b>v</b> : Object<p class="sub-desc">The new value of the group field.</p></li>
            <li><b>unused</b> : undefined<p class="sub-desc">Unused parameter.</p></li>
            <li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data
            for the row which caused group change.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">The row index of the Record which caused group change.</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">The column index of the group field.</p></li>
            <li><b>ds</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
            </ul></div></p>
            <p>The function should return a string value.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.header">
            <summary>
            Optional. The header text to be used as innerHTML
            (html tags are accepted) to display in the Grid view.  <b>Note</b>: to
            have a clickable header with no text displayed use <tt>'&amp;#160;'</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.hidden">
            <summary>
            Optional. <tt>true</tt> to initially hide this column. Defaults to <tt>false</tt>.
            A hidden column {@link Ext.grid.GridPanel#enableColumnHide may be shown via the header row menu}.
            If a column is never to be shown, simply do not include this column in the Column Model at all.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.hideable">
            <summary>
            Optional. Specify as <tt>false</tt> to prevent the user from hiding this column
            (defaults to true).  To disallow column hiding globally for all columns in the grid, use
            {@link Ext.grid.GridPanel#enableColumnHide} instead.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.id">
            <summary>
            Optional. A name which identifies this column (defaults to the column's initial
            ordinal position.) The <tt>id</tt> is used to create a CSS <b>class</b> name which is applied to all
            table cells (including headers) in that column (in this context the <tt>id</tt> does not need to be
            unique). The class name takes the form of <pre>x-grid3-td-<b>id</b></pre>
            Header cells will also receive this class name, but will also have the class <pre>x-grid3-hd</pre>
            So, to target header cells, use CSS selectors such as:<pre>.x-grid3-hd-row .x-grid3-td-<b>id</b></pre>
            The {@link Ext.grid.GridPanel#autoExpandColumn} grid config option references the column via this
            unique identifier.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.isColumn">
            <summary>
            Used by ColumnModel setConfig method to avoid reprocessing a Column
            if <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column
            Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.menuDisabled">
            <summary>
            Optional. <tt>true</tt> to disable the column menu. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.renderer">
            <summary>
            <p>For an alternative to specifying a renderer see <code>{@link #xtype}</code></p>
            <p>Optional. A renderer is an 'interceptor' method which can be used transform data (value,
            appearance, etc.) before it is rendered). This may be specified in either of three ways:
            <div class="mdetail-params"><ul>
            <li>A renderer function used to return HTML markup for a cell given the cell's data value.</li>
            <li>A string which references a property name of the {@link Ext.util.Format} class which
            provides a renderer function.</li>
            <li>An object specifying both the renderer function, and its execution scope (<tt><b>this</b></tt>
            reference) e.g.:<pre style="margin-left:1.2em"><code>
            {
            fn: this.gridRenderer,
            scope: this
            }
            </code></pre></li></ul></div>
            If not specified, the default renderer uses the raw data value.</p>
            <p>For information about the renderer function (passed parameters, etc.), see
            {@link Ext.grid.ColumnModel#setRenderer}. An example of specifying renderer function inline:</p><pre><code>
            var companyColumn = {
            header: 'Company Name',
            dataIndex: 'company',
            renderer: function(value, metaData, record, rowIndex, colIndex, store) {
            // provide the logic depending on business rules
            // name of your own choosing to manipulate the cell depending upon
            // the data in the underlying Record object.
            if (value == 'whatever') {
            //metaData.css : String : A CSS class name to add to the TD element of the cell.
            //metaData.attr : String : An html attribute definition string to apply to
            //                         the data container element within the table
            //                         cell (e.g. 'style="color:red;"').
            metaData.css = 'name-of-css-class-you-will-define';
            }
            return value;
            }
            }
            </code></pre>
            See also {@link #scope}.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.resizable">
            <summary>
            Optional. <tt>false</tt> to disable column resizing. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.scope">
            <summary>
            Optional. The scope (<tt><b>this</b></tt> reference) in which to execute the
            renderer.  Defaults to the Column configuration object.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.sortable">
            <summary>
            Optional. <tt>true</tt> if sorting is to be allowed on this column.
            Defaults to the value of the <code>{@link Ext.grid.ColumnModel#defaultSortable}</code> property.
            Whether local/remote sorting is used is specified in <code>{@link Ext.data.Store#remoteSort}</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnConfig.tooltip">
            <summary>
            Optional. A text string to use as the column header's tooltip.  If Quicktips
            are enabled, this value will be used as the text of the quick tip, otherwise it will be set as the
            header's HTML title attribute. Defaults to ''.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.ColumnConfig.width" -->
        <member name="P:Ext.grid.ColumnConfig.xtype">
            <summary>
            Optional. A String which references a predefined {@link Ext.grid.Column} subclass
            type which is preconfigured with an appropriate <code>{@link #renderer}</code> to be easily
            configured into a ColumnModel. The predefined {@link Ext.grid.Column} subclass types are:
            <div class="mdetail-params"><ul>
            <li><b><tt>gridcolumn</tt></b> : {@link Ext.grid.Column} (<b>Default</b>)<p class="sub-desc"></p></li>
            <li><b><tt>booleancolumn</tt></b> : {@link Ext.grid.BooleanColumn}<p class="sub-desc"></p></li>
            <li><b><tt>numbercolumn</tt></b> : {@link Ext.grid.NumberColumn}<p class="sub-desc"></p></li>
            <li><b><tt>datecolumn</tt></b> : {@link Ext.grid.DateColumn}<p class="sub-desc"></p></li>
            <li><b><tt>templatecolumn</tt></b> : {@link Ext.grid.TemplateColumn}<p class="sub-desc"></p></li>
            </ul></div>
            <p>Configuration properties for the specified <code>xtype</code> may be specified with
            the Column configuration properties, for example:</p>
            <pre><code>
            var grid = new Ext.grid.GridPanel({
            ...
            columns: [{
            header: 'Last Updated',
            dataIndex: 'lastChange',
            width: 85,
            sortable: true,
            //renderer: Ext.util.Format.dateRenderer('m/d/Y'),
            xtype: 'datecolumn', // use xtype instead of renderer
            format: 'M/d/Y' // configuration property for {@link Ext.grid.DateColumn}
            }, {
            ...
            }]
            });
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.ColumnModel" -->
        <member name="M:Ext.grid.ColumnModel.#ctor(System.Object)">
            <summary>
            @cfg {Object} defaults Object literal which will be used to apply {@link Ext.grid.Column}
            configuration options to all <tt><b>{@link #columns}</b></tt>.  Configuration options specified with
            individual {@link Ext.grid.Column column} configs will supersede these <tt><b>{@link #defaults}</b></tt>.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.destroy">
            <summary>
            Destroys this column model by purging any event listeners. Destroys and dereferences all Columns.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.findColumnIndex(SharpKit.JavaScript.JsString)">
            <summary>
            Finds the index of the first matching column for the given dataIndex.
            @param {String} col The dataIndex to find
            @return {Number} The column index, or -1 if no match was found
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getCellEditor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the editor defined for the cell/column.
            @param {Number} colIndex The column index
            @param {Number} rowIndex The row index
            @return {Ext.Editor} The {@link Ext.Editor Editor} that was created to wrap
            the {@link Ext.form.Field Field} used to edit the cell.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnById(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the column for a specified id.
            @param {String} id The column id
            @return {Object} the column
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnCount(System.Boolean)">
            <summary>
            Returns the number of columns.
            @param {Boolean} visibleOnly Optional. Pass as true to only include visible columns.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnHeader(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the header for the specified column.
            @param {Number} col The column index
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnId(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the id of the column at the specified index.
            @param {Number} index The column index
            @return {String} the id
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnsBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns the column configs that return true by the passed function that is called
            with (columnConfig, index)
            <pre><code>
            // returns an array of column config objects for all hidden columns
            var columns = grid.getColumnModel().getColumnsBy(function(c){
            return c.hidden;
            });
            </code></pre>
            @param {Function} fn A function which, when passed a {@link Ext.grid.Column Column} object, must
            return <code>true</code> if the column is to be included in the returned Array.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function
            is executed. Defaults to this ColumnModel.
            @return {Array} result
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnTooltip(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the tooltip for the specified column.
            @param {Number} col The column index
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getColumnWidth(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the width for the specified column.
            @param {Number} col The column index
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getDataIndex(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the dataIndex for the specified column.
            <pre><code>
            // Get field name for the column
            var fieldName = grid.getColumnModel().getDataIndex(columnIndex);
            </code></pre>
            @param {Number} col The column index
            @return {String} The column's dataIndex
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getIndexById(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the index for a specified column id.
            @param {String} id The column id
            @return {Number} the index, or -1 if not found
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getRenderer(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the rendering (formatting) function defined for the column.
            @param {Number} col The column index.
            @return {Function} The function used to render the cell. See {@link #setRenderer}.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.getTotalWidth(System.Boolean)">
            <summary>
            Returns the total width of all columns.
            @param {Boolean} includeHidden True to include hidden column widths
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isCellEditable(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns true if the cell is editable.
            <pre><code>
            var store = new Ext.data.Store({...});
            var colModel = new Ext.grid.ColumnModel({
            columns: [...],
            isCellEditable: function(col, row) {
            var record = store.getAt(row);
            if (record.get('readonly')) { // replace with your condition
            return false;
            }
            return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);
            }
            });
            var grid = new Ext.grid.GridPanel({
            store: store,
            colModel: colModel,
            ...
            });
            </code></pre>
            @param {Number} colIndex The column index
            @param {Number} rowIndex The row index
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isFixed(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#fixed fixed}</code>,
            <tt>false</tt> otherwise.
            @param {Number} colIndex The column index
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isHidden(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#hidden hidden}</code>,
            <tt>false</tt> otherwise.
            @param {Number} colIndex The column index
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isMenuDisabled(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns true if the specified column menu is disabled.
            @param {Number} col The column index
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isResizable(System.Object)">
            <summary>
            Returns true if the column can be resized
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.isSortable(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns true if the specified column is sortable.
            @param {Number} col The column index
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.moveColumn(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Moves a column from one position to another.
            @param {Number} oldIndex The index of the column to move.
            @param {Number} newIndex The position at which to reinsert the coolumn.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setColumnHeader(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the header for a column.
            @param {Number} col The column index
            @param {String} header The new header
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setColumnTooltip(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the tooltip for a column.
            @param {Number} col The column index
            @param {String} tooltip The new tooltip
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setColumnWidth(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Sets the width for a column.
            @param {Number} col The column index
            @param {Number} width The new width
            @param {Boolean} suppressEvent True to suppress firing the <code>{@link #widthchange}</code>
            event. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setConfig(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            <p>Reconfigures this column model according to the passed Array of column definition objects.
            For a description of the individual properties of a column definition object, see the
            <a href="#Ext.grid.ColumnModel-configs">Config Options</a>.</p>
            <p>Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}
            using this ColumnModel will listen for this event and refresh its UI automatically.</p>
            @param {Array} config Array of Column definition objects.
            @param {Boolean} initial Specify <tt>true</tt> to bypass cleanup which deletes the <tt>totalWidth</tt>
            and destroys existing editors.
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setDataIndex(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the dataIndex for a column.
            @param {Number} col The column index
            @param {String} dataIndex The new dataIndex
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setEditable(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Sets if a column is editable.
            @param {Number} col The column index
            @param {Boolean} editable True if the column is editable
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setEditor(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Sets the editor for a column and destroys the prior editor.
            @param {Number} col The column index
            @param {Object} editor The editor object
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setHidden(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Sets if a column is hidden.
            <pre><code>
            myGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column).
            </code></pre>
            @param {Number} colIndex The column index
            @param {Boolean} hidden True if the column is hidden
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setRenderer(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some
            default formatting functions.
            @param {Number} col The column index
            @param {Function} fn The function to use to process the cell's raw data
            to return HTML markup for the grid view. The render function is called with
            the following parameters:<ul>
            <li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
            <li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
            <li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
            <li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
            (e.g. 'style="color:red;"').</p></li></ul></p></li>
            <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was extracted.</p></li>
            <li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
            <li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
            <li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record was extracted.</p></li></ul>
            </summary>
        </member>
        <member name="M:Ext.grid.ColumnModel.setState(System.Object,System.Object)">
            <summary>
            @private
            Setup any saved state for the column, ensures that defaults are applied.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnModel.defaultSortable">
            <summary>
            @cfg {Boolean} defaultSortable (optional) Default sortable of columns which have no
            sortable specified (defaults to <tt>false</tt>).  This property shall preferably be configured
            through the <tt><b>{@link #defaults}</b></tt> config property.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnModel.defaultWidth">
            <summary>
            @cfg {Number} defaultWidth (optional) The width of columns which have no <tt>{@link #width}</tt>
            specified (defaults to <tt>100</tt>).  This property shall preferably be configured through the
            <tt><b>{@link #defaults}</b></tt> config property.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnModelConfig.columns">
            <summary>
            An Array of object literals.  The config options defined by
            <b>{@link Ext.grid.Column}</b> are the options which may appear in the object literal for each
            individual column definition.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnModelConfig.defaultSortable">
            <summary>
            (optional) Default sortable of columns which have no
            sortable specified (defaults to <tt>false</tt>).  This property shall preferably be configured
            through the <tt><b>{@link #defaults}</b></tt> config property.
            </summary>
        </member>
        <member name="P:Ext.grid.ColumnModelConfig.defaultWidth">
            <summary>
            (optional) The width of columns which have no <tt>{@link #width}</tt>
            specified (defaults to <tt>100</tt>).  This property shall preferably be configured through the
            <tt><b>{@link #defaults}</b></tt> config property.
            </summary>
        </member>
        <member name="T:Ext.grid.DateColumn">
            <summary>
            @class Ext.grid.DateColumn
            @extends Ext.grid.Column
            <p>A Column definition class which renders a passed date according to the default locale, or a configured
            {@link #format}. See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column}
            for more details.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.DateColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Date#format} to format a Date for this Column
            (defaults to <tt>'m/d/Y'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.DateColumn.format">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Date#format} to format a Date for this Column
            (defaults to <tt>'m/d/Y'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.DateColumnConfig.format">
            <summary>
            A formatting string as used by {@link Date#format} to format a Date for this Column
            (defaults to <tt>'m/d/Y'</tt>).
            </summary>
        </member>
        <member name="T:Ext.grid.EditorGridPanel">
            <summary>
            @class Ext.grid.EditorGridPanel
            @extends Ext.grid.GridPanel
            <p>This class extends the {@link Ext.grid.GridPanel GridPanel Class} to provide cell editing
            on selected {@link Ext.grid.Column columns}. The editable columns are specified by providing
            an {@link Ext.grid.ColumnModel#editor editor} in the {@link Ext.grid.Column column configuration}.</p>
            <p>Editability of columns may be controlled programatically by inserting an implementation
            of {@link Ext.grid.ColumnModel#isCellEditable isCellEditable} into the
            {@link Ext.grid.ColumnModel ColumnModel}.</p>
            <p>Editing is performed on the value of the <i>field</i> specified by the column's
            <tt>{@link Ext.grid.ColumnModel#dataIndex dataIndex}</tt> in the backing {@link Ext.data.Store Store}
            (so if you are using a {@link Ext.grid.ColumnModel#setRenderer renderer} in order to display
            transformed data, this must be accounted for).</p>
            <p>If a value-to-description mapping is used to render a column, then a {@link Ext.form.Field#ComboBox ComboBox}
            which uses the same {@link Ext.form.Field#valueField value}-to-{@link Ext.form.Field#displayFieldField description}
            mapping would be an appropriate editor.</p>
            If there is a more complex mismatch between the visible data in the grid, and the editable data in
            the {@link Edt.data.Store Store}, then code to transform the data both before and after editing can be
            injected using the {@link #beforeedit} and {@link #afteredit} events.
            @constructor
            @param {Object} config The config object
            @xtype editorgrid
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.GridPanel" -->
        <member name="M:Ext.grid.GridPanel.getColumnModel">
            <summary>
            Returns the grid's ColumnModel.
            @return {Ext.grid.ColumnModel} The column model
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.getDragDropText">
            <summary>
            Called to get grid's drag proxy text, by default returns this.ddText.
            @return {String} The text
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.getGridEl">
            <summary>
            Returns the grid's underlying element.
            @return {Element} The element
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.getSelectionModel">
            <summary>
            Returns the grid's selection model configured by the <code>{@link #selModel}</code>
            configuration option. If no selection model was configured, this will create
            and return a {@link Ext.grid.RowSelectionModel RowSelectionModel}.
            @return {SelectionModel}
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.getStore">
            <summary>
            Returns the grid's data store.
            @return {Ext.data.Store} The store
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.getView">
            <summary>
            Returns the grid's GridView object.
            @return {Ext.grid.GridView} The grid view
            </summary>
        </member>
        <member name="M:Ext.grid.GridPanel.reconfigure(Ext.data.Store,Ext.grid.ColumnModel)">
            <summary>
            <p>Reconfigures the grid to use a different Store and Column Model
            and fires the 'reconfigure' event. The View will be bound to the new
            objects and refreshed.</p>
            <p>Be aware that upon reconfiguring a GridPanel, certain existing settings <i>may</i> become
            invalidated. For example the configured {@link #autoExpandColumn} may no longer exist in the
            new ColumnModel. Also, an existing {@link Ext.PagingToolbar PagingToolbar} will still be bound
            to the old Store, and will need rebinding. Any {@link #plugins} might also need reconfiguring
            with the new data.</p>
            @param {Ext.data.Store} store The new {@link Ext.data.Store} object
            @param {Ext.grid.ColumnModel} colModel The new {@link Ext.grid.ColumnModel} object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridPanel.autoExpandColumn" -->
        <member name="P:Ext.grid.GridPanel.autoExpandMax">
            <summary>
            @cfg {Number} autoExpandMax The maximum width the <tt>{@link #autoExpandColumn}</tt>
            can have (if enabled). Defaults to <tt>1000</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.autoExpandMin">
            <summary>
            @cfg {Number} autoExpandMin The minimum width the <tt>{@link #autoExpandColumn}</tt>
            can have (if enabled). Defaults to <tt>50</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.columnLines">
            <summary>
            @cfg {Boolean} columnLines <tt>true</tt> to add css for column separation lines.
            Default is <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.ddText">
            <summary>
            @cfg {String} ddText
            Configures the text in the drag proxy.  Defaults to:
            <pre><code>
            ddText : '{0} selected row{1}'
            </code></pre>
            <tt>{0}</tt> is replaced with the number of selected rows.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridPanel.deferRowRender" -->
        <member name="P:Ext.grid.GridPanel.enableColumnHide">
            <summary>
            @cfg {Boolean} enableColumnHide
            Defaults to <tt>true</tt> to enable {@link Ext.grid.Column#hidden hiding of columns}
            with the {@link #enableHdMenu header menu}.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.enableColumnMove">
            <summary>
            @cfg {Boolean} enableColumnMove Defaults to <tt>true</tt> to enable drag and drop reorder of columns. <tt>false</tt>
            to turn off column reordering via drag drop.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.enableDragDrop">
            <summary>
            @cfg {Boolean} enableDragDrop <p>Enables dragging of the selected rows of the GridPanel. Defaults to <tt>false</tt>.</p>
            <p>Setting this to <b><tt>true</tt></b> causes this GridPanel's {@link #getView GridView} to
            create an instance of {@link Ext.grid.GridDragZone}. <b>Note</b>: this is available only <b>after</b>
            the Grid has been rendered as the GridView's <tt>{@link Ext.grid.GridView#dragZone dragZone}</tt>
            property.</p>
            <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's implementations of
            {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
            {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able
            to process the {@link Ext.grid.GridDragZone#getDragData data} which is provided.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.enableHdMenu">
            <summary>
            @cfg {Boolean} enableHdMenu Defaults to <tt>true</tt> to enable the drop down button for menu in the headers.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.loadMask">
            <summary>
            @cfg {Object} loadMask An {@link Ext.LoadMask} config or true to mask the grid while
            loading. Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.minColumnWidth">
            <summary>
            @cfg {Number} minColumnWidth The minimum width a column can be resized to. Defaults to <tt>25</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.rendered">
            <summary>
            @cfg {Object} viewConfig A config object that will be applied to the grid's UI view.  Any of
            the config options available for {@link Ext.grid.GridView} can be specified here. This option
            is ignored if <tt>{@link #view}</tt> is specified.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.stripeRows">
            <summary>
            @cfg {Boolean} stripeRows <tt>true</tt> to stripe the rows. Default is <tt>false</tt>.
            <p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be added to alternate rows of
            the grid. A default CSS rule is provided which sets a background colour, but you can override this
            with a rule which either overrides the <b>background-color</b> style using the '!important'
            modifier, or which uses a CSS selector of higher specificity.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.trackMouseOver">
            <summary>
            @cfg {Boolean} trackMouseOver True to highlight rows when the mouse is over. Default is <tt>true</tt>
            for GridPanel, but <tt>false</tt> for EditorGridPanel.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanel.view">
            <summary>
            @cfg {Object} view The {@link Ext.grid.GridView} used by the grid. This can be set
            before a call to {@link Ext.Component#render render()}.
            </summary>
        </member>
        <member name="M:Ext.grid.EditorGridPanel.startEditing(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Starts editing the specified for the specified row/column
            @param {Number} rowIndex
            @param {Number} colIndex
            </summary>
        </member>
        <member name="M:Ext.grid.EditorGridPanel.stopEditing(System.Boolean)">
            <summary>
            Stops any active editing
            @param {Boolean} cancel (optional) True to cancel any changes
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanel.autoEncode">
            <summary>
            @cfg {Boolean} autoEncode
            True to automatically HTML encode and decode values pre and post edit (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanel.clicksToEdit">
            <summary>
            @cfg {Number} clicksToEdit
            <p>The number of clicks on a cell required to display the cell's editor (defaults to 2).</p>
            <p>Setting this option to 'auto' means that mousedown <i>on the selected cell</i> starts
            editing that cell.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanel.forceValidation">
            <summary>
            @cfg {Boolean} forceValidation
            True to force validation even if the value is unmodified (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanel.trackMouseOver">
            <summary>
            @cfg {Boolean} trackMouseOver @hide
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanelConfig.autoEncode">
            <summary>
            True to automatically HTML encode and decode values pre and post edit (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanelConfig.clicksToEdit">
            <summary>
            <p>The number of clicks on a cell required to display the cell's editor (defaults to 2).</p>
            <p>Setting this option to 'auto' means that mousedown <i>on the selected cell</i> starts
            editing that cell.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanelConfig.forceValidation">
            <summary>
            True to force validation even if the value is unmodified (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanelConfig.selModel">
            <summary>
            Any subclass of AbstractSelectionModel that will provide the selection model for
            the grid (defaults to {@link Ext.grid.CellSelectionModel} if not specified).
            </summary>
        </member>
        <member name="P:Ext.grid.EditorGridPanelConfig.trackMouseOver">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.grid.GridDragZone">
            <summary>
            @class Ext.grid.GridDragZone
            @extends Ext.dd.DragZone
            <p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the
            template methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>
            <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of
            {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
            {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able
            to process the {@link #getDragData data} which is provided.
            </summary>
        </member>
        <member name="M:Ext.grid.GridDragZone.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.grid.GridDragZone
            @extends Ext.dd.DragZone
            <p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the
            template methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>
            <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of
            {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
            {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able
            to process the {@link #getDragData data} which is provided.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.activeItem">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.allowDomMove">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.applyTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoDestroy">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridPanelConfig.autoExpandColumn" -->
        <member name="P:Ext.grid.GridPanelConfig.autoExpandMax">
            <summary>
            The maximum width the <tt>{@link #autoExpandColumn}</tt>
            can have (if enabled). Defaults to <tt>1000</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoExpandMin">
            <summary>
            The minimum width the <tt>{@link #autoExpandColumn}</tt>
            can have (if enabled). Defaults to <tt>50</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoLoad">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoScroll">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.bodyBorder">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.bodyStyle">
            <summary>
            @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridPanelConfig.bubbleEvents" -->
        <member name="P:Ext.grid.GridPanelConfig.bufferResize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.cm">
            <summary>
            Shorthand for <tt>{@link #colModel}</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.colModel">
            <summary>
            The {@link Ext.grid.ColumnModel} to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.columnLines">
            <summary>
            <tt>true</tt> to add css for column separation lines.
            Default is <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.columns">
            <summary>
            An array of {@link Ext.grid.Column columns} to auto create a
            {@link Ext.grid.ColumnModel}.  The ColumnModel may be explicitly created via the
            <tt>{@link #colModel}</tt> configuration property.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.contentEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.ddGroup">
            <summary>
            The DD group this GridPanel belongs to. Defaults to <tt>'GridDD'</tt> if not specified.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.ddText">
            <summary>
            Configures the text in the drag proxy.  Defaults to:
            <pre><code>
            ddText : '{0} selected row{1}'
            </code></pre>
            <tt>{0}</tt> is replaced with the number of selected rows.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.defaults">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.defaultType">
            <summary>
            @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridPanelConfig.deferRowRender" -->
        <member name="P:Ext.grid.GridPanelConfig.disabledClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.disableSelection">
            <summary>
            <p><tt>true</tt> to disable selections in the grid. Defaults to <tt>false</tt>.</p>
            <p>Ignored if a {@link #selModel SelectionModel} is specified.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.elements">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.enableColumnHide">
            <summary>
            Defaults to <tt>true</tt> to enable {@link Ext.grid.Column#hidden hiding of columns}
            with the {@link #enableHdMenu header menu}.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.enableColumnMove">
            <summary>
            Defaults to <tt>true</tt> to enable drag and drop reorder of columns. <tt>false</tt>
            to turn off column reordering via drag drop.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.enableColumnResize">
            <summary>
            <tt>false</tt> to turn off column resizing for the whole grid. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.enableDragDrop">
            <summary>
            <p>Enables dragging of the selected rows of the GridPanel. Defaults to <tt>false</tt>.</p>
            <p>Setting this to <b><tt>true</tt></b> causes this GridPanel's {@link #getView GridView} to
            create an instance of {@link Ext.grid.GridDragZone}. <b>Note</b>: this is available only <b>after</b>
            the Grid has been rendered as the GridView's <tt>{@link Ext.grid.GridView#dragZone dragZone}</tt>
            property.</p>
            <p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's implementations of
            {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
            {@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able
            to process the {@link Ext.grid.GridDragZone#getDragData data} which is provided.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.enableHdMenu">
            <summary>
            Defaults to <tt>true</tt> to enable the drop down button for menu in the headers.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.hideBorders">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.hideHeaders">
            <summary>
            True to hide the grid's header. Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.html">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.items">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.layout">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.layoutConfig">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.loadMask">
            <summary>
            An {@link Ext.LoadMask} config or true to mask the grid while
            loading. Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.maxHeight">
            <summary>
            Sets the maximum height of the grid - ignored if <tt>autoHeight</tt> is not on.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.minColumnWidth">
            <summary>
            The minimum width a column can be resized to. Defaults to <tt>25</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.monitorResize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.preventBodyReset">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.selModel">
            <summary>
            Any subclass of {@link Ext.grid.AbstractSelectionModel} that will provide
            the selection model for the grid (defaults to {@link Ext.grid.RowSelectionModel} if not specified).
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.sm">
            <summary>
            Shorthand for <tt>{@link #selModel}</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.stateEvents">
            <summary>
            An array of events that, when fired, should trigger this component to save its state.
            Defaults to:<pre><code>
            stateEvents: ['columnmove', 'columnresize', 'sortchange', 'groupchange']
            </code></pre>
            <p>These can be any types of events supported by this component, including browser or
            custom events (e.g., <tt>['click', 'customerchange']</tt>).</p>
            <p>See {@link Ext.Component#stateful} for an explanation of saving and restoring
            Component state.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.store">
            <summary>
            The {@link Ext.data.Store} the grid should use as its data source (required).
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.stripeRows">
            <summary>
            <tt>true</tt> to stripe the rows. Default is <tt>false</tt>.
            <p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be added to alternate rows of
            the grid. A default CSS rule is provided which sets a background colour, but you can override this
            with a rule which either overrides the <b>background-color</b> style using the '!important'
            modifier, or which uses a CSS selector of higher specificity.</p>
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.trackMouseOver">
            <summary>
            True to highlight rows when the mouse is over. Default is <tt>true</tt>
            for GridPanel, but <tt>false</tt> for EditorGridPanel.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.view">
            <summary>
            The {@link Ext.grid.GridView} used by the grid. This can be set
            before a call to {@link Ext.Component#render render()}.
            </summary>
        </member>
        <member name="P:Ext.grid.GridPanelConfig.viewConfig">
            <summary>
            A config object that will be applied to the grid's UI view.  Any of
            the config options available for {@link Ext.grid.GridView} can be specified here. This option
            is ignored if <tt>{@link #view}</tt> is specified.
            </summary>
        </member>
        <member name="T:Ext.grid.GridView">
            <summary>
            @class Ext.grid.GridView
            @extends Ext.util.Observable
            <p>This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.
            Methods of this class may be used to access user interface elements to enable
            special display effects. Do not change the DOM structure of the user interface.</p>
            <p>This class does not provide ways to manipulate the underlying data. The data
            model of a Grid is held in an {@link Ext.data.Store}.</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.afterRender">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.afterRenderUI">
            <summary>
            @private
            This is always intended to be called after renderUI. Sets up listeners on the UI elements
            and sets up options like column menus, moving and resizing.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.applyEmptyText">
            <summary>
            @private
            Displays the configured emptyText if there are currently no rows to display
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.autoExpand(System.Boolean)">
            <summary>
            @private
            Resizes the configured autoExpandColumn to take the available width after the other columns have
            been accounted for
            @param {Boolean} preventUpdate True to prevent the resizing of all rows (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.beforeColMenuShow">
            <summary>
            @private
            Click handler for the shared column dropdown menu, called on beforeshow. Builds the menu
            which displays the list of columns for the user to show or hide.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.bind(System.Object,System.Object)">
            <summary>
            @private
            DEPRECATED - will be removed in Ext JS 5.0
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.clearHeaderSortState">
            <summary>
            @private
            Removes any sorting indicator classes from the column headers
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.#ctor(System.Object)">
            <summary>
            @cfg {String} rowOverCls The CSS class added to each row when it is hovered over. Defaults to 'x-grid3-row-over'
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.deleteRows(System.Object,System.Object,System.Object)">
            <summary>
            @private
            DEPRECATED - this doesn't appear to be called anywhere in the library, remove in 4.0.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.destroy">
            <summary>
            @private
            Destroys all objects associated with the GridView
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.doRender(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray,Ext.data.Store,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Renders all of the rows to a string buffer and returns the string. This is called internally
            by renderRows and performs the actual string building for the rows - it does not inject HTML into the DOM.
            @param {Array} columns The column data acquired from getColumnData.
            @param {Array} records The array of records to render
            @param {Ext.data.Store} store The store to render the rows from
            @param {Number} startRow The index of the first row being rendered. Sometimes we only render a subset of
            the rows so this is used to maintain logic for striping etc
            @param {Number} colCount The total number of columns in the column model
            @param {Boolean} stripe True to stripe the rows
            @return {String} A string containing the HTML for the rendered rows
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.ensureVisible(System.Object,System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.findCellIndex(SharpKit.Html4.HtmlElement,System.Object)">
            <summary>
            <p>Return the index of the grid column which contains the passed HTMLElement.</p>
            See also {@link #findRowIndex}
            @param {HTMLElement} el The target element
            @return {Number} The column index, or <b>false</b> if the target element is not within a row of this GridView.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.findRow(SharpKit.Html4.HtmlElement)">
            <summary>
            Return the HtmlElement representing the grid row which contains the passed element.
            @param {HTMLElement} el The target HTMLElement
            @return {HTMLElement} The row element, or null if the target element is not within a row of this GridView.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.findRowBody(SharpKit.Html4.HtmlElement)">
            <summary>
            Return the HtmlElement representing the grid row body which contains the passed element.
            @param {HTMLElement} el The target HTMLElement
            @return {HTMLElement} The row body element, or null if the target element is not within a row body of this GridView.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.findRowIndex(SharpKit.Html4.HtmlElement)">
            <summary>
            Return the index of the grid row which contains the passed HTMLElement.
            See also {@link #findCellIndex}
            @param {HTMLElement} el The target HTMLElement
            @return {Number} The row index, or <b>false</b> if the target element is not within a row of this GridView.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.fitColumns(System.Boolean,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Resizes each column to fit the available grid width.
            TODO: The second argument isn't even used, remove it in 4.0
            @param {Boolean} preventRefresh True to prevent resizing of each row to the new column sizes (defaults to false)
            @param {null} onlyExpand NOT USED, will be removed in 4.0
            @param {Number} omitColumn The index of a column to leave at its current width. Defaults to undefined
            @return {Boolean} True if the operation succeeded, false if not or undefined if the grid view is not yet initialized
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.fly(System.Object)">
            <summary>
            @private
            Each GridView has its own private flyweight, accessed through this method
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.focusCell(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Focuses the specified cell.
            @param {Number} row The row index
            @param {Number} col The column index
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.focusRow(SharpKit.JavaScript.JsNumber)">
            <summary>
            Focuses the specified row.
            @param {Number} row The row index
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getCell(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the grid's <tt>&lt;td></tt> HtmlElement at the specified coordinates.
            @param {Number} row The row index in which to find the cell.
            @param {Number} col The column index of the cell.
            @return {HtmlElement} The td at the specified coordinates.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getColumnData">
            <summary>
            @private
            Returns an array of column configurations - one for each column
            @return {Array} Array of column config objects. This includes the column name, renderer, id style and renderer
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getColumnStyle(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Builds a CSS string for the given column index
            @param {Number} colIndex The column index
            @param {Boolean} isHeader True if getting the style for the column's header
            @return {String} The CSS string
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getColumnTooltip(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getColumnWidth(System.Object)">
            <summary>
            @private
            Returns the width of a given column minus its border width
            @return {Number} The column index
            @return {String|Number} The width in pixels
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getGridInnerWidth">
            <summary>
            Returns the total internal width available to the grid, taking the scrollbar into account
            @return {Number} The total width
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getHeaderCell(SharpKit.JavaScript.JsNumber)">
            <summary>
            Return the <tt>&lt;td></tt> HtmlElement which represents the Grid's header cell for the specified column index.
            @param {Number} index The column index
            @return {HtmlElement} The td element.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getPreviousVisible(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Returns the index of the nearest currently visible header to the left of the given index.
            @param {Number} index The header index
            @return {Number/undefined} The index of the nearest visible header
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getResolvedXY(System.Object)">
            <summary>
            @private
            Returns the XY co-ordinates of a given row/cell resolution (see {@link #resolveCell})
            @return {Array} X and Y coords
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getRow(SharpKit.JavaScript.JsNumber)">
            <summary>
            Return the <tt>&lt;div></tt> HtmlElement which represents a Grid row for the specified index.
            @param {Number} index The row index
            @return {HtmlElement} The div element.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getScrollState">
            <summary>
            ----------------------------------- Scrolling functions -------------------------------------------
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.getTotalWidth">
            <summary>
            @private
            Returns the total width of all visible columns
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdDown(System.Object,System.Object)">
            <summary>
            @private
            Called when a header cell is clicked - shows the menu if the click happened over a trigger button
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdMenuClick(System.Object)">
            <summary>
            @private
            Attached as the 'itemclick' handler to the header menu and the column show/hide submenu (if available).
            Performs sorting if the sorter buttons were clicked, otherwise hides/shows the column that was clicked.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdMenuClickDefault(Ext.menu.BaseItem)">
            <summary>
            Called by handleHdMenuClick if any button except a sort ASC/DESC button was clicked. The default implementation provides
            the column hide/show functionality based on the check state of the menu item. A different implementation can be provided
            if needed.
            @param {Ext.menu.BaseItem} item The menu item that was clicked
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdMove(System.Object)">
            <summary>
            @private
            Attached to the headers' mousemove event. This figures out the CSS cursor to use based on where the mouse is currently
            pointed. If the mouse is currently hovered over the extreme left or extreme right of any header cell and the cell next
            to it is resizable it is given the resize cursor, otherwise the cursor is set to an empty string.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdOut(System.Object,System.Object)">
            <summary>
            @private
            Tied to the header element's mouseout event. Removes the hover class from the header cell
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.handleHdOver(System.Object,System.Object)">
            <summary>
            @private
            Tied to the header element's mouseover event - adds the over class to the header cell if the menu is not disabled
            for that cell
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.hasRows">
            <summary>
            @private
            Returns true if there are any rows rendered into the GridView
            @return {Boolean} True if any rows have been rendered
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.init(System.Object)">
            <summary>
            ----------------------------------- Core Specific -------------------------------------------
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.initData(Ext.data.Store,Ext.grid.ColumnModel)">
            <summary>
            @private
            Binds a new Store and ColumnModel to this GridView. Removes any listeners from the old objects (if present)
            and adds listeners to the new ones
            @param {Ext.data.Store} newStore The new Store instance
            @param {Ext.grid.ColumnModel} newColModel The new ColumnModel instance
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.initElements">
            <summary>
            @private
            Finds and stores references to important elements
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.initTemplates">
            <summary>
            @private
            Provides default templates if they are not given for this particular instance. Most of the templates are defined on
            the prototype, the ones defined inside this function are done so because they are based on Grid or GridView configuration
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.initUI(System.Object)">
            <summary>
            -------------------- UI Events and Handlers ------------------------------
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.isHideableColumn(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.isMenuDisabled(SharpKit.JavaScript.JsNumber,Ext.Element)">
            <summary>
            @private
            Used by {@link #handleHdOver} to determine whether or not to show the header menu class on cell hover
            @param {Number} cellIndex The header cell index
            @param {Ext.Element} el The cell element currently being hovered over
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.layout(System.Object)">
            <summary>
            @private
            Sizes the grid's header and body elements
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.onColumnSplitterMoved(System.Object,System.Object)">
            <summary>
            @private
            Called by the SplitDragZone when a drag has been completed. Resizes the columns
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.onLoad">
            <summary>
            @private
            Called when a store is loaded, scrolls to the top row
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.onRowOut(System.Object,System.Object)">
            <summary>
            @private
            Removes the hover class from a row on mouseout
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.onRowOver(System.Object,System.Object)">
            <summary>
            @private
            Adds the hover class to a row when hovered over
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.processRows(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            @private
            Adds CSS classes and rowIndex to each row
            @param {Number} startRow The row to start from (defaults to 0)
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.refresh(System.Boolean)">
            <summary>
            Refreshs the grid UI
            @param {Boolean} headersToo (optional) True to also refresh the headers
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.refreshRow(System.Object)">
            <summary>
            @private
            Refreshes a row by re-rendering it. Fires the rowupdated event when done
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.renderHeaders">
            <summary>
            @private
            Renders the header row using the 'header' template. Does not inject the HTML into the DOM, just
            returns a string.
            @return {String} Rendered header row
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.renderRows(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Renders rows between start and end indexes
            @param {Number} startRow Index of the first row to render
            @param {Number} endRow Index of the last row to render
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.renderUI">
            <summary>
            @private
            Renders each of the UI elements in turn. This is called internally, once, by this.render. It does not
            render rows from the store, just the surrounding UI elements.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.resolveCell(System.Object,System.Object,System.Object)">
            <summary>
            @private
            Finds the Elements corresponding to the given row and column indexes
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.scrollToTop">
            <summary>
            Scrolls the grid to the top
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.syncFocusEl(System.Object,System.Object,System.Object)">
            <summary>
            @private
            Moves the focus element to the x and y co-ordinates of the given row and column
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateAllColumnWidths">
            <summary>
            @private
            Updates the size of every column and cell in the grid
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateColumnHidden(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Sets the hidden status of a given column.
            @param {Number} col The column index
            @param {Boolean} hidden True to make the column hidden
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateColumnWidth(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            @private
            Called after a column's width has been updated, this resizes all of the cells for that column in each row
            @param {Number} column The column index
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateHeaders">
            <summary>
            @private
            Re-renders the headers and ensures they are sized correctly
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateHeaderSortState">
            <summary>
            @private
            Adds sorting classes to the column headers based on the bound store's sortInfo. Fires the 'sortchange' event
            if the sorting has changed since this function was last run.
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateHeaderWidth(System.Boolean)">
            <summary>
            @private
            Ensures that the header is sized to the total width available to it
            @param {Boolean} updateMain True to update the mainBody's width also (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.grid.GridView.updateSortIcon(System.Object,System.Object)">
            <summary>
            @private
            Ensures the given column has the given icon class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridView.autoFill" -->
        <member name="P:Ext.grid.GridView.cellSelector">
            <summary>
            @cfg {String} cellSelector The selector used to find cells internally (defaults to <tt>'td.x-grid3-cell'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.cellSelectorDepth">
            <summary>
            @cfg {Number} cellSelectorDepth The number of levels to search for cells in event delegation (defaults to <tt>4</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.columnsText">
            <summary>
            @cfg {String} columnsText The text displayed in the 'Columns' menu item (defaults to <tt>'Columns'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.deferEmptyText">
            <summary>
            @cfg {Boolean} deferEmptyText True to defer <tt>{@link #emptyText}</tt> being applied until the store's
            first load (defaults to <tt>true</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridView.forceFit" -->
        <member name="P:Ext.grid.GridView.headerMenuOpenCls">
            <summary>
            @cfg {String} headerMenuOpenCls The CSS class to add to the header cell when its menu is visible. Defaults to 'x-grid3-hd-menu-open'
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.markDirty">
            <summary>
            @cfg {Boolean} markDirty True to show the dirty cell indicator when a cell has been modified. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.rowBodySelector">
            <summary>
            @cfg {String} rowBodySelector The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.rowBodySelectorDepth">
            <summary>
            @cfg {Number} rowBodySelectorDepth The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.rowOverCls">
            <summary>
            @cfg {String} rowOverCls The CSS class added to each row when it is hovered over. Defaults to 'x-grid3-row-over'
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.rowSelector">
            <summary>
            @cfg {String} rowSelector The selector used to find rows internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.rowSelectorDepth">
            <summary>
            @cfg {Number} rowSelectorDepth The number of levels to search for rows in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.selectedRowClass">
            <summary>
            @cfg {String} selectedRowClass The CSS class applied to a selected row (defaults to <tt>'x-grid3-row-selected'</tt>). An
            example overriding the default styling:
            <pre><code>
            .x-grid3-row-selected {background-color: yellow;}
            </code></pre>
            Note that this only controls the row, and will not do anything for the text inside it.  To style inner
            facets (like text) use something like:
            <pre><code>
            .x-grid3-row-selected .x-grid3-cell-inner {
            color: #FFCC00;
            }
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.sortAscText">
            <summary>
            @cfg {String} sortAscText The text displayed in the 'Sort Ascending' menu item (defaults to <tt>'Sort Ascending'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridView.sortDescText">
            <summary>
            @cfg {String} sortDescText The text displayed in the 'Sort Descending' menu item (defaults to <tt>'Sort Descending'</tt>)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridViewConfig.autoFill" -->
        <member name="P:Ext.grid.GridViewConfig.cellSelector">
            <summary>
            The selector used to find cells internally (defaults to <tt>'td.x-grid3-cell'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.cellSelectorDepth">
            <summary>
            The number of levels to search for cells in event delegation (defaults to <tt>4</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.columnsText">
            <summary>
            The text displayed in the 'Columns' menu item (defaults to <tt>'Columns'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.deferEmptyText">
            <summary>
            True to defer <tt>{@link #emptyText}</tt> being applied until the store's
            first load (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.emptyText">
            <summary>
            Default text (html tags are accepted) to display in the grid body when no rows
            are available (defaults to ''). This value will be used to update the <tt>{@link #mainBody}</tt>:
            <pre><code>
            this.mainBody.update('&lt;div class="x-grid-empty">' + this.emptyText + '&lt;/div>');
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.enableRowBody">
            <summary>
            True to add a second TR element per row that can be used to provide a row body
            that spans beneath the data row.  Use the {@link #getRowClass} method's rowParams config to customize the row body.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GridViewConfig.forceFit" -->
        <member name="P:Ext.grid.GridViewConfig.headerMenuOpenCls">
            <summary>
            The CSS class to add to the header cell when its menu is visible. Defaults to 'x-grid3-hd-menu-open'
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.headersDisabled">
            <summary>
            True to disable the grid column headers (defaults to <tt>false</tt>).
            Use the {@link Ext.grid.ColumnModel ColumnModel} <tt>{@link Ext.grid.ColumnModel#menuDisabled menuDisabled}</tt>
            config to disable the <i>menu</i> for individual columns.  While this config is true the
            following will be disabled:<div class="mdetail-params"><ul>
            <li>clicking on header to sort</li>
            <li>the trigger to reveal the menu.</li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.markDirty">
            <summary>
            True to show the dirty cell indicator when a cell has been modified. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.rowBodySelector">
            <summary>
            The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.rowBodySelectorDepth">
            <summary>
            The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.rowOverCls">
            <summary>
            The CSS class added to each row when it is hovered over. Defaults to 'x-grid3-row-over'
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.rowSelector">
            <summary>
            The selector used to find rows internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.rowSelectorDepth">
            <summary>
            The number of levels to search for rows in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.scrollOffset">
            <summary>
            The amount of space to reserve for the vertical scrollbar
            (defaults to <tt>undefined</tt>). If an explicit value isn't specified, this will be automatically
            calculated.
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.selectedRowClass">
            <summary>
            The CSS class applied to a selected row (defaults to <tt>'x-grid3-row-selected'</tt>). An
            example overriding the default styling:
            <pre><code>
            .x-grid3-row-selected {background-color: yellow;}
            </code></pre>
            Note that this only controls the row, and will not do anything for the text inside it.  To style inner
            facets (like text) use something like:
            <pre><code>
            .x-grid3-row-selected .x-grid3-cell-inner {
            color: #FFCC00;
            }
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.sortAscText">
            <summary>
            The text displayed in the 'Sort Ascending' menu item (defaults to <tt>'Sort Ascending'</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.sortClasses">
            <summary>
            The CSS classes applied to a header when it is sorted. (defaults to <tt>['sort-asc', 'sort-desc']</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GridViewConfig.sortDescText">
            <summary>
            The text displayed in the 'Sort Descending' menu item (defaults to <tt>'Sort Descending'</tt>)
            </summary>
        </member>
        <member name="T:Ext.grid.GroupingView">
            <summary>
            @class Ext.grid.GroupingView
            @extends Ext.grid.GridView
            Adds the ability for single level grouping to the grid. A {@link Ext.data.GroupingStore GroupingStore}
            must be used to enable grouping.  Some grouping characteristics may also be configured at the
            {@link Ext.grid.Column Column level}<div class="mdetail-params"><ul>
            <li><code>{@link Ext.grid.Column#emptyGroupText emptyGroupText}</code></li>
            <li><code>{@link Ext.grid.Column#groupable groupable}</code></li>
            <li><code>{@link Ext.grid.Column#groupName groupName}</code></li>
            <li><code>{@link Ext.grid.Column#groupRender groupRender}</code></li>
            </ul></div>
            <p>Sample usage:</p>
            <pre><code>
            var grid = new Ext.grid.GridPanel({
            // A groupingStore is required for a GroupingView
            store: new {@link Ext.data.GroupingStore}({
            autoDestroy: true,
            reader: reader,
            data: xg.dummyData,
            sortInfo: {field: 'company', direction: 'ASC'},
            {@link Ext.data.GroupingStore#groupOnSort groupOnSort}: true,
            {@link Ext.data.GroupingStore#remoteGroup remoteGroup}: true,
            {@link Ext.data.GroupingStore#groupField groupField}: 'industry'
            }),
            colModel: new {@link Ext.grid.ColumnModel}({
            columns:[
            {id:'company',header: 'Company', width: 60, dataIndex: 'company'},
            // {@link Ext.grid.Column#groupable groupable}, {@link Ext.grid.Column#groupName groupName}, {@link Ext.grid.Column#groupRender groupRender} are also configurable at column level
            {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price', {@link Ext.grid.Column#groupable groupable}: false},
            {header: 'Change', dataIndex: 'change', renderer: Ext.util.Format.usMoney},
            {header: 'Industry', dataIndex: 'industry'},
            {header: 'Last Updated', renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
            ],
            defaults: {
            sortable: true,
            menuDisabled: false,
            width: 20
            }
            }),
            view: new Ext.grid.GroupingView({
            {@link Ext.grid.GridView#forceFit forceFit}: true,
            // custom grouping text template to display the number of items per group
            {@link #groupTextTpl}: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
            }),
            frame:true,
            width: 700,
            height: 450,
            collapsible: true,
            animCollapse: false,
            title: 'Grouping Example',
            iconCls: 'icon-grid',
            renderTo: document.body
            });
            </code></pre>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.collapseAllGroups">
            <summary>
            Collapses all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.expandAllGroups">
            <summary>
            Expands all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.getGroupId(SharpKit.JavaScript.JsString)">
            <summary>
            Dynamically tries to determine the groupId of a specific value
            @param {String} value
            @return {String} The group id
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.toggleAllGroups(System.Boolean)">
            <summary>
            Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.
            @param {Boolean} expanded (optional)
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.toggleGroup(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.
            @param {String} groupId The groupId assigned to the group (see getGroupId)
            @param {Boolean} expanded (optional)
            </summary>
        </member>
        <member name="M:Ext.grid.GroupingView.toggleRowIndex(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Toggle the group that contains the specific row.
            @param {Number} rowIndex The row inside the group
            @param {Boolean} expanded (optional)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.cancelEditOnToggle">
            <summary>
            @cfg {Boolean} cancelEditOnToggle True to cancel any editing when the group header is toggled. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.emptyGroupText">
            <summary>
            @cfg {String} emptyGroupText The text to display when there is an empty group value (defaults to <tt>'(None)'</tt>).
            May also be specified per column, see {@link Ext.grid.Column}.{@link Ext.grid.Column#emptyGroupText emptyGroupText}.
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.enableGrouping">
            <summary>
            @cfg {Boolean} enableGrouping <tt>false</tt> to disable grouping functionality (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.enableGroupingMenu">
            <summary>
            @cfg {Boolean} enableGroupingMenu <tt>true</tt> to enable the grouping control in the column menu (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.enableNoGroups">
            <summary>
            @cfg {Boolean} enableNoGroups <tt>true</tt> to allow the user to turn off grouping (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.groupByText">
            <summary>
            @cfg {String} groupByText Text displayed in the grid header menu for grouping by a column
            (defaults to 'Group By This Field').
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.groupMode">
            <summary>
            @cfg {String} groupMode Indicates how to construct the group identifier. <tt>'value'</tt> constructs the id using
            raw value, <tt>'display'</tt> constructs the id using the rendered value. Defaults to <tt>'value'</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GroupingView.groupTextTpl" -->
        <member name="P:Ext.grid.GroupingView.hideGroupedColumn">
            <summary>
            @cfg {Boolean} hideGroupedColumn <tt>true</tt> to hide the column that is currently grouped (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.ignoreAdd">
            <summary>
            @cfg {Boolean} ignoreAdd <tt>true</tt> to skip refreshing the view when new rows are added (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.showGroupName">
            <summary>
            @cfg {Boolean} showGroupName If <tt>true</tt> will display a prefix plus a ': ' before the group field value
            in the group header line.  The prefix will consist of the <tt><b>{@link Ext.grid.Column#groupName groupName}</b></tt>
            (or the configured <tt><b>{@link Ext.grid.Column#header header}</b></tt> if not provided) configured in the
            {@link Ext.grid.Column} for each set of grouped rows (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.showGroupsText">
            <summary>
            @cfg {String} showGroupsText Text displayed in the grid header for enabling/disabling grouping
            (defaults to 'Show in Groups').
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingView.startCollapsed">
            <summary>
            @cfg {Boolean} startCollapsed <tt>true</tt> to start all groups collapsed (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.cancelEditOnToggle">
            <summary>
            True to cancel any editing when the group header is toggled. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.emptyGroupText">
            <summary>
            The text to display when there is an empty group value (defaults to <tt>'(None)'</tt>).
            May also be specified per column, see {@link Ext.grid.Column}.{@link Ext.grid.Column#emptyGroupText emptyGroupText}.
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.enableGrouping">
            <summary>
            <tt>false</tt> to disable grouping functionality (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.enableGroupingMenu">
            <summary>
            <tt>true</tt> to enable the grouping control in the column menu (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.enableNoGroups">
            <summary>
            <tt>true</tt> to allow the user to turn off grouping (defaults to <tt>true</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.groupByText">
            <summary>
            Text displayed in the grid header menu for grouping by a column
            (defaults to 'Group By This Field').
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.groupMode">
            <summary>
            Indicates how to construct the group identifier. <tt>'value'</tt> constructs the id using
            raw value, <tt>'display'</tt> constructs the id using the rendered value. Defaults to <tt>'value'</tt>.
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.groupRenderer">
            <summary>
            This property must be configured in the {@link Ext.grid.Column} for
            each column.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.grid.GroupingViewConfig.groupTextTpl" -->
        <member name="P:Ext.grid.GroupingViewConfig.hideGroupedColumn">
            <summary>
            <tt>true</tt> to hide the column that is currently grouped (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.ignoreAdd">
            <summary>
            <tt>true</tt> to skip refreshing the view when new rows are added (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.showGroupName">
            <summary>
            If <tt>true</tt> will display a prefix plus a ': ' before the group field value
            in the group header line.  The prefix will consist of the <tt><b>{@link Ext.grid.Column#groupName groupName}</b></tt>
            (or the configured <tt><b>{@link Ext.grid.Column#header header}</b></tt> if not provided) configured in the
            {@link Ext.grid.Column} for each set of grouped rows (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.showGroupsText">
            <summary>
            Text displayed in the grid header for enabling/disabling grouping
            (defaults to 'Show in Groups').
            </summary>
        </member>
        <member name="P:Ext.grid.GroupingViewConfig.startCollapsed">
            <summary>
            <tt>true</tt> to start all groups collapsed (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="T:Ext.grid.NumberColumn">
            <summary>
            @class Ext.grid.NumberColumn
            @extends Ext.grid.Column
            <p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the
            {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more details.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.NumberColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.NumberColumn.format">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="P:Ext.grid.NumberColumnConfig.format">
            <summary>
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="T:Ext.grid.PivotAxis">
            <summary>
            @class Ext.grid.PivotAxis
            @extends Ext.Component
            <p>PivotAxis is a class that supports a {@link Ext.grid.PivotGrid}. Each PivotGrid contains two PivotAxis instances - the left
            axis and the top axis. Each PivotAxis defines an ordered set of dimensions, each of which should correspond to a field in a
            Store's Record (see {@link Ext.grid.PivotGrid} documentation for further explanation).</p>
            <p>Developers should have little interaction with the PivotAxis instances directly as most of their management is performed by
            the PivotGrid. An exception is the dynamic reconfiguration of axes at run time - to achieve this we use PivotAxis's
            {@link #setDimensions} function and refresh the grid:</p>
            <pre><code>
            var pivotGrid = new Ext.grid.PivotGrid({
            //some PivotGrid config here
            });
            //change the left axis dimensions
            pivotGrid.leftAxis.setDimensions([
            {
            dataIndex: 'person',
            direction: 'DESC',
            width    : 100
            },
            {
            dataIndex: 'product',
            direction: 'ASC',
            width    : 80
            }
            ]);
            pivotGrid.view.refresh(true);
            </code></pre>
            This clears the previous dimensions on the axis and redraws the grid with the new dimensions.
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.buildHeaders">
            <summary>
            @private
            Uses the calculated set of tuples to build an array of headers that can be rendered into a table using rowspan or
            colspan. Basically this takes the set of tuples and spans any cells that run into one another, so if we had dimensions
            of Person and Product and several tuples containing different Products for the same Person, those Products would be
            spanned.
            @return {Array} The headers
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.getRecordInfo(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.getTuples">
            <summary>
            @private
            Returns the set of all unique tuples based on the bound store and dimension definitions.
            Internally we construct a new, temporary store to make use of the multi-sort capabilities of Store. In
            4.x this functionality should have been moved to MixedCollection so this step should not be needed.
            @return {Array} All unique tuples
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.onRender(System.Object,System.Object)">
            <summary>
            @private
            Builds the html table that contains the dimensions for this axis. This branches internally between vertical
            and horizontal orientations because the table structure is slightly different in each case
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.renderHorizontalRows">
            <summary>
            @private
            Specialised renderer for horizontal oriented axes
            @return {Object} The HTML Domspec for a horizontal oriented axis
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.renderVerticalRows">
            <summary>
            @private
            Specialised renderer for vertical oriented axes
            @return {Object} The HTML Domspec for a vertical oriented axis
            </summary>
        </member>
        <member name="M:Ext.grid.PivotAxis.setDimensions(SharpKit.JavaScript.JsArray)">
            <summary>
            Updates the dimensions used by this axis
            @param {Array} dimensions The new dimensions
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxis.defaultHeaderWidth">
            <summary>
            @cfg {Number} defaultHeaderWidth The width to render each row header that does not have a width specified via
            {@link #getRowGroupHeaders}. Defaults to 80.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxis.orientation">
            <summary>
            @cfg {String} orientation One of 'vertical' or 'horizontal'. Defaults to horizontal
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxis.paddingWidth">
            <summary>
            @private
            @cfg {Number} paddingWidth The amount of padding used by each cell.
            TODO: From 4.x onwards this can be removed as it won't be needed. For now it is used to account for the differences between
            the content box and border box measurement models
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxisConfig.defaultHeaderWidth">
            <summary>
            The width to render each row header that does not have a width specified via
            {@link #getRowGroupHeaders}. Defaults to 80.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxisConfig.orientation">
            <summary>
            One of 'vertical' or 'horizontal'. Defaults to horizontal
            </summary>
        </member>
        <member name="P:Ext.grid.PivotAxisConfig.paddingWidth">
            <summary>
            The amount of padding used by each cell.
            TODO: From 4.x onwards this can be removed as it won't be needed. For now it is used to account for the differences between
            the content box and border box measurement models
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.PivotGrid" -->
        <member name="M:Ext.grid.PivotGrid.extractData">
            <summary>
            @private
            @return {Array} 2-dimensional array of cell data
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.getAggregator">
            <summary>
            Returns the function currently used to aggregate the records in each Pivot cell
            @return {Function} The current aggregator function
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.getView">
            <summary>
            Returns the grid's GridView object.
            @return {Ext.grid.PivotGridView} The grid view
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.initAxes">
            <summary>
            @private
            Creates the top and left axes. Should usually only need to be called once from initComponent
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.initComponent">
            <summary>
            @cfg {Array|Ext.grid.PivotAxis} topAxis Either and array of {@link #dimension} to use on the top axis, or
            a {@link Ext.grid.PivotAxis} instance. If an array is passed, it is turned into a PivotAxis internally.
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.setAggregator(System.Object)">
            <summary>
            Sets the function to use when aggregating data for each cell.
            @param {String|Function} aggregator The new aggregator function or named function string
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.setLeftAxis(Ext.grid.PivotAxis,System.Boolean)">
            <summary>
            Sets the left axis of this pivot grid. Optionally refreshes the grid afterwards.
            @param {Ext.grid.PivotAxis} axis The pivot axis
            @param {Boolean} refresh True to immediately refresh the grid and its axes (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.setMeasure(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the field name to use as the Measure in this Pivot Grid
            @param {String} measure The field to make the measure
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGrid.setTopAxis(Ext.grid.PivotAxis,System.Boolean)">
            <summary>
            Sets the top axis of this pivot grid. Optionally refreshes the grid afterwards.
            @param {Ext.grid.PivotAxis} axis The pivot axis
            @param {Boolean} refresh True to immediately refresh the grid and its axes (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGrid.aggregator">
            <summary>
            @cfg {String|Function} aggregator The aggregation function to use to combine the measures extracted
            for each dimension combination. Can be any of the built-in aggregators (sum, count, avg, min, max).
            Can also be a function which accepts two arguments (an array of Records to aggregate, and the measure
            to aggregate them on) and should return a String.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridConfig.aggregator">
            <summary>
            The aggregation function to use to combine the measures extracted
            for each dimension combination. Can be any of the built-in aggregators (sum, count, avg, min, max).
            Can also be a function which accepts two arguments (an array of Records to aggregate, and the measure
            to aggregate them on) and should return a String.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridConfig.leftAxis">
            <summary>
            Either and array of {@link #dimension} to use on the left axis, or
            a {@link Ext.grid.PivotAxis} instance. If an array is passed, it is turned into a PivotAxis internally.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridConfig.measure">
            <summary>
            The field to extract from each Record when pivoting around the two axes. See the class
            introduction docs for usage
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridConfig.renderer">
            <summary>
            Optional renderer to pass values through before they are rendered to the dom. This
            gives an opportunity to modify cell contents after the value has been computed.
            </summary>
        </member>
        <member name="T:Ext.grid.PivotGridView">
            <summary>
            @class Ext.grid.PivotGridView
            @extends Ext.grid.GridView
            Specialised GridView for rendering Pivot Grid components. Config can be passed to the PivotGridView via the PivotGrid constructor's
            viewConfig option:
            <pre><code>
            new Ext.grid.PivotGrid({
            viewConfig: {
            title: 'My Pivot Grid',
            getCellCls: function(value) {
            return value > 10 'red' : 'green';
            }
            }
            });
            </code></pre>
            <p>Currently {@link #title} and {@link #getCellCls} are the only configuration options accepted by PivotGridView. All other
            interaction is performed via the {@link Ext.grid.PivotGrid PivotGrid} class.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.getColumnHeaders">
            <summary>
            Returns the headers to be rendered at the top of the grid. Should be a 2-dimensional array, where each item specifies the number
            of columns it groups (column in this case refers to normal grid columns). In the example below we have 5 city groups, which are
            each part of a continent supergroup. The colspan for each city group refers to the number of normal grid columns that group spans,
            so in this case the grid would be expected to have a total of 12 columns:
            <pre><code>
            [
            {
            items: [
            {header: 'England',   colspan: 5},
            {header: 'USA',       colspan: 3}
            ]
            },
            {
            items: [
            {header: 'London',    colspan: 2},
            {header: 'Cambridge', colspan: 3},
            {header: 'Palo Alto', colspan: 3}
            ]
            }
            ]
            </code></pre>
            In the example above we have cities nested under countries. The nesting could be deeper if desired - e.g. Continent -> Country ->
            State -> City, or any other structure. The only constaint is that the same depth must be used throughout the structure.
            @return {Array} A tree structure containing the headers to be rendered. Must include the colspan property at each level, which should
            be the sum of all child nodes beneath this node.
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.getGridInnerWidth">
            <summary>
            @private
            Takes row headers into account when calculating total available width
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.getRowHeaders">
            <summary>
            Returns the headers to be rendered on the left of the grid. Should be a 2-dimensional array, where each item specifies the number
            of rows it groups. In the example below we have 5 city groups, which are each part of a continent supergroup. The rowspan for each
            city group refers to the number of normal grid columns that group spans, so in this case the grid would be expected to have a
            total of 12 rows:
            <pre><code>
            [
            {
            width: 90,
            items: [
            {header: 'England',   rowspan: 5},
            {header: 'USA',       rowspan: 3}
            ]
            },
            {
            width: 50,
            items: [
            {header: 'London',    rowspan: 2},
            {header: 'Cambridge', rowspan: 3},
            {header: 'Palo Alto', rowspan: 3}
            ]
            }
            ]
            </code></pre>
            In the example above we have cities nested under countries. The nesting could be deeper if desired - e.g. Continent -> Country ->
            State -> City, or any other structure. The only constaint is that the same depth must be used throughout the structure.
            @return {Array} A tree structure containing the headers to be rendered. Must include the colspan property at each level, which should
            be the sum of all child nodes beneath this node.
            Each group may specify the width it should be rendered with.
            @return {Array} The row groups
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.getTotalColumnHeaderHeight">
            <summary>
            @private
            Returns the total height of all column headers
            @return {Number} The total height
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.getTotalRowHeaderWidth">
            <summary>
            Returns the total width of all row headers as specified by {@link #getRowHeaders}
            @return {Number} The total width
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.initElements">
            <summary>
            @private
            Sets up the reference to the row headers element
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.initTemplates">
            <summary>
            @private
            Adds a gcell template to the internal templates object. This is used to render the headers in a multi-level column header.
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.isMenuDisabled(System.Object,System.Object)">
            <summary>
            @private
            Overridden to test whether the user is hovering over a group cell, in which case we don't show the menu
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.onLayout(System.Object,System.Object)">
            <summary>
            @private
            Make sure that the headers and rows are all sized correctly during layout
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.refresh(System.Boolean)">
            <summary>
            Refreshs the grid UI
            @param {Boolean} headersToo (optional) True to also refresh the headers
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.renderGroupColumnHeaders">
            <summary>
            @private
            Renders all column header groups at all levels based on the structure fetched from {@link #getColumnHeaders}
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.renderGroupRowHeaders">
            <summary>
            @private
            Renders all row header groups at all levels based on the structure fetched from {@link #getGroupRowHeaders}
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.renderRows(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Renders rows between start and end indexes
            @param {Number} startRow Index of the first row to render
            @param {Number} endRow Index of the last row to render
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.renderUI">
            <summary>
            @private
            Slight specialisation of the GridView renderUI - just adds the row headers
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.resizeAllRows(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Resizes all rendered rows to the given width. Usually called by onLayout
            @param {Number} width The new width
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.resizeColumnHeaders(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Called on layout, ensures that the width of each column header is correct. Omitting this can lead to faulty
            layouts when nested in a container.
            @param {Number} width The new width
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.resizeRowHeaders">
            <summary>
            @private
            Sets the row header div to the correct width. Should be called after rendering and reconfiguration of headers
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the title text in the top left segment of the PivotGridView
            @param {String} title The title
            </summary>
        </member>
        <member name="M:Ext.grid.PivotGridView.updateHeaders">
            <summary>
            @private
            Updates the Row Headers, deferring the updating of Column Headers to GridView
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridView.colHeaderCellCls">
            <summary>
            The CSS class added to all group header cells. Defaults to 'grid-hd-group-cell'
            @property colHeaderCellCls
            @type String
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridView.title">
            <summary>
            @cfg {String} title Optional title to be placed in the top left corner of the PivotGrid. Defaults to an empty string.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridViewConfig.getCellCls">
            <summary>
            Optional function which should return a CSS class name for each cell value. This is useful when
            color coding cells based on their value. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.grid.PivotGridViewConfig.title">
            <summary>
            Optional title to be placed in the top left corner of the PivotGrid. Defaults to an empty string.
            </summary>
        </member>
        <member name="T:Ext.grid.PropertyColumnModel">
            <summary>
            @class Ext.grid.PropertyColumnModel
            @extends Ext.grid.ColumnModel
            A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly.
            @constructor
            @param {Ext.grid.Grid} grid The grid this store will be bound to
            @param {Object} source The source data config object
            </summary>
        </member>
        <member name="P:Ext.grid.PropertyColumnModel.nameText">
            <summary>
            @class Ext.grid.PropertyColumnModel
            @extends Ext.grid.ColumnModel
            A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly.
            @constructor
            @param {Ext.grid.Grid} grid The grid this store will be bound to
            @param {Object} source The source data config object
            </summary>
        </member>
        <member name="T:Ext.grid.PropertyGrid">
            <summary>
            @class Ext.grid.PropertyGrid
            @extends Ext.grid.EditorGridPanel
            A specialized grid implementation intended to mimic the traditional property grid as typically seen in
            development IDEs.  Each row in the grid represents a property of some object, and the data is stored
            as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:
            <pre><code>
            var grid = new Ext.grid.PropertyGrid({
            title: 'Properties Grid',
            autoHeight: true,
            width: 300,
            renderTo: 'grid-ct',
            source: {
            "(name)": "My Object",
            "Created": new Date(Date.parse('10/15/2006')),
            "Available": false,
            "Version": .01,
            "Description": "A test object"
            }
            });
            </code></pre>
            @constructor
            @param {Object} config The grid config object
            </summary>
        </member>
        <member name="M:Ext.grid.PropertyGrid.getSource">
            <summary>
            Gets the source data object containing the property data.  See {@link #setSource} for details regarding the
            format of the data object.
            @return {Object} The data object
            </summary>
        </member>
        <member name="M:Ext.grid.PropertyGrid.removeProperty(SharpKit.JavaScript.JsString)">
            <summary>
            Removes a property from the grid.
            @param {String} prop The name of the property to remove
            </summary>
        </member>
        <member name="M:Ext.grid.PropertyGrid.setProperty(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Sets the value of a property.
            @param {String} prop The name of the property to set
            @param {Mixed} value The value to test
            @param {Boolean} create (Optional) True to create the property if it doesn't already exist. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="M:Ext.grid.PropertyGrid.setSource(System.Object)">
            <summary>
            Sets the source data object containing the property data.  The data object can contain one or more name/value
            pairs representing all of the properties of an object to display in the grid, and this data will automatically
            be loaded into the grid's {@link #store}.  The values should be supplied in the proper data type if needed,
            otherwise string type will be assumed.  If the grid already contains data, this method will replace any
            existing data.  See also the {@link #source} config value.  Example usage:
            <pre><code>
            grid.setSource({
            "(name)": "My Object",
            "Created": new Date(Date.parse('10/15/2006')),  // date type
            "Available": false,  // boolean type
            "Version": .01,      // decimal type
            "Description": "A test object"
            });
            </code></pre>
            @param {Object} source The data object
            </summary>
        </member>
        <member name="P:Ext.grid.PropertyGrid.enableColumnMove">
            <summary>
            @cfg {Object} customRenderers An object containing name/value pairs of custom renderer type definitions that allow
            the grid to support custom rendering of fields.  By default, the grid supports strongly-typed rendering
            of strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and
            associated with the type of the value.  The name of the renderer type should correspond with the name of the property
            that it will render.  Example usage:
            <pre><code>
            var grid = new Ext.grid.PropertyGrid({
            ...
            customRenderers: {
            Available: function(v){
            if(v){
            return '<span style="color: green;">Yes</span>';
            }else{
            return '<span style="color: red;">No</span>';
            }
            }
            },
            source: {
            Available: true
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.grid.PropertyGridConfig.customEditors">
            <summary>
            An object containing name/value pairs of custom editor type definitions that allow
            the grid to support additional types of editable fields.  By default, the grid supports strongly-typed editing
            of strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and
            associated with a custom input control by specifying a custom editor.  The name of the editor
            type should correspond with the name of the property that will use the editor.  Example usage:
            <pre><code>
            var grid = new Ext.grid.PropertyGrid({
            ...
            customEditors: {
            'Start Time': new Ext.grid.GridEditor(new Ext.form.TimeField({selectOnFocus:true}))
            },
            source: {
            'Start Time': '10:00 AM'
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.grid.PropertyGridConfig.customRenderers">
            <summary>
            An object containing name/value pairs of custom renderer type definitions that allow
            the grid to support custom rendering of fields.  By default, the grid supports strongly-typed rendering
            of strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and
            associated with the type of the value.  The name of the renderer type should correspond with the name of the property
            that it will render.  Example usage:
            <pre><code>
            var grid = new Ext.grid.PropertyGrid({
            ...
            customRenderers: {
            Available: function(v){
            if(v){
            return '<span style="color: green;">Yes</span>';
            }else{
            return '<span style="color: red;">No</span>';
            }
            }
            },
            source: {
            Available: true
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.grid.PropertyGridConfig.propertyNames">
            <summary>
            An object containing property name/display name pairs.
            If specified, the display name will be shown in the name column instead of the property name.
            </summary>
        </member>
        <member name="T:Ext.grid.PropertyRecord">
            <summary>
            @class Ext.grid.PropertyRecord
            A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the
            {@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be
            created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}
            config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records
            can also be created explicitly as shwon below.  Example usage:
            <pre><code>
            var rec = new Ext.grid.PropertyRecord({
            name: 'Birthday',
            value: new Date(Date.parse('05/26/1972'))
            });
            // Add record to an already populated grid
            grid.store.addSorted(rec);
            </code></pre>
            @constructor
            @param {Object} config A data object in the format: {name: [name], value: [value]}.  The specified value's type
            will be read automatically by the grid to determine the type of editor to use when displaying it.
            </summary>
        </member>
        <member name="T:Ext.grid.PropertyStore">
            <summary>
            @class Ext.grid.PropertyStore
            @extends Ext.util.Observable
            A custom wrapper for the {@link Ext.grid.PropertyGrid}'s {@link Ext.data.Store}. This class handles the mapping
            between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format
            required for compatibility with the underlying store. Generally this class should not need to be used directly --
            the grid's data should be accessed from the underlying store via the {@link #store} property.
            @constructor
            @param {Ext.grid.Grid} grid The grid this store will be bound to
            @param {Object} source The source data config object
            </summary>
        </member>
        <member name="M:Ext.grid.PropertyStore.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.grid.PropertyStore
            @extends Ext.util.Observable
            A custom wrapper for the {@link Ext.grid.PropertyGrid}'s {@link Ext.data.Store}. This class handles the mapping
            between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format
            required for compatibility with the underlying store. Generally this class should not need to be used directly --
            the grid's data should be accessed from the underlying store via the {@link #store} property.
            @constructor
            @param {Ext.grid.Grid} grid The grid this store will be bound to
            @param {Object} source The source data config object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.grid.RowNumberer" -->
        <member name="M:Ext.grid.RowNumberer.#ctor(System.Object)">
            <summary>
            @cfg {Boolean} sortable True if the row number column is sortable (defaults to false).
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumberer.header">
            <summary>
            @cfg {String} header Any valid text or HTML fragment to display in the header cell for the row
            number column (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumberer.sortable">
            <summary>
            @cfg {Boolean} sortable True if the row number column is sortable (defaults to false).
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumberer.width">
            <summary>
            @cfg {Number} width The default width in pixels of the row number column (defaults to 23).
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumbererConfig.header">
            <summary>
            Any valid text or HTML fragment to display in the header cell for the row
            number column (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumbererConfig.sortable">
            <summary>
            True if the row number column is sortable (defaults to false).
            @hide
            </summary>
        </member>
        <member name="P:Ext.grid.RowNumbererConfig.width">
            <summary>
            The default width in pixels of the row number column (defaults to 23).
            </summary>
        </member>
        <member name="P:Ext.grid.RowSelectionModelConfig.singleSelect">
            <summary>
            <tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>
            allowing multiple selections)
            </summary>
        </member>
        <member name="T:Ext.grid.TemplateColumn">
            <summary>
            @class Ext.grid.TemplateColumn
            @extends Ext.grid.Column
            <p>A Column definition class which renders a value by processing a {@link Ext.data.Record Record}'s
            {@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.
            See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more
            details.</p>
            </summary>
        </member>
        <member name="M:Ext.grid.TemplateColumn.#ctor(System.Object)">
            <summary>
            @cfg {String/XTemplate} tpl
            An {@link Ext.XTemplate XTemplate}, or an XTemplate <i>definition string</i> to use to process a
            {@link Ext.data.Record Record}'s {@link Ext.data.Record#data data} to produce a column's rendered value.
            </summary>
        </member>
        <member name="T:Ext.layout.AbsoluteLayout">
            <summary>
            @class Ext.layout.AbsoluteLayout
            @extends Ext.layout.AnchorLayout
            <p>This is a layout that inherits the anchoring of <b>{@link Ext.layout.AnchorLayout}</b> and adds the
            ability for x/y positioning using the standard x and y component config options.</p>
            <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            <p>Example usage:</p>
            <pre><code>
            var form = new Ext.form.FormPanel({
            title: 'Absolute Layout',
            layout:'absolute',
            layoutConfig: {
            // layout-specific configs go here
            extraCls: 'x-abs-layout-item',
            },
            baseCls: 'x-plain',
            url:'save-form.php',
            defaultType: 'textfield',
            items: [{
            x: 0,
            y: 5,
            xtype:'label',
            text: 'Send To:'
            },{
            x: 60,
            y: 0,
            name: 'to',
            anchor:'100%'  // anchor width by percentage
            },{
            x: 0,
            y: 35,
            xtype:'label',
            text: 'Subject:'
            },{
            x: 60,
            y: 30,
            name: 'subject',
            anchor: '100%'  // anchor width by percentage
            },{
            x:0,
            y: 60,
            xtype: 'textarea',
            name: 'msg',
            anchor: '100% 100%'  // anchor width and height
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.layout.AnchorLayout">
            <summary>
            @class Ext.layout.AnchorLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.
            If the container is resized, all anchored items are automatically rerendered according to their
            <b><tt>{@link #anchor}</tt></b> rules.</p>
            <p>This class is intended to be extended or created via the layout:'anchor' {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>AnchorLayout does not have any direct config options (other than inherited ones). By default,
            AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the
            container using the AnchorLayout can supply an anchoring-specific config property of <b>anchorSize</b>.
            If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating
            anchor measurements based on it instead, allowing the container to be sized independently of the anchoring
            logic if necessary.  For example:</p>
            <pre><code>
            var viewport = new Ext.Viewport({
            layout:'anchor',
            anchorSize: {width:800, height:600},
            items:[{
            title:'Item 1',
            html:'Content 1',
            width:800,
            anchor:'right 20%'
            },{
            title:'Item 2',
            html:'Content 2',
            width:300,
            anchor:'50% 30%'
            },{
            title:'Item 3',
            html:'Content 3',
            width:600,
            anchor:'-100 50%'
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.layout.ContainerLayout">
            <summary>
            @class Ext.layout.ContainerLayout
            <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.configureItem(System.Object)">
            <summary>
            @private
            Applies extraCls and hides the item if renderHidden is true
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.destroy">
            <summary>
            Destroys this layout. This is a template method that is empty by default, but should be implemented
            by subclasses that require explicit destruction to purge event handlers or remove DOM nodes.
            @protected
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.IEMeasureHack(System.Object,System.Object)">
            <summary>
            whereas other browser prefer top-down.  We will hide all target child elements before we measure and
            put them back to get an accurate measurement.
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.parseMargins(System.Object)">
            <summary>
            Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
            (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
            @param {Number|String} v The encoded margins
            @return {Object} An object with margin sizes for top, right, bottom and left
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.renderItem(Ext.Component,SharpKit.JavaScript.JsNumber,Ext.Element)">
            <summary>
            @private
            Renders the given Component into the target Element. If the Component is already rendered,
            it is moved to the provided target instead.
            @param {Ext.Component} c The Component to render
            @param {Number} position The position within the target to render the item to
            @param {Ext.Element} target The target Element
            </summary>
        </member>
        <member name="P:Ext.layout.ContainerLayout.monitorResize">
            <summary>
            A reference to the {@link Ext.Component} that is active.  For example, <pre><code>
            if(myPanel.layout.activeItem.id == 'item-1') { ... }
            </code></pre>
            <tt>activeItem</tt> only applies to layout styles that can display items one at a time
            (like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout}
            and {@link Ext.layout.FitLayout}).  Read-only.  Related to {@link Ext.Container#activeItem}.
            @type {Ext.Component}
            @property activeItem
            </summary>
        </member>
        <member name="P:Ext.layout.AnchorLayout.defaultAnchor">
            <summary>
            @cfg {String} defaultAnchor
            *
            default anchor for all child container items applied if no anchor or specific width is set on the child item.  Defaults to '100%'.
            *
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.AnchorLayout.monitorResize" -->
        <member name="P:Ext.layout.AnchorLayout.parseAnchorRE">
            <summary>
            @cfg {String} defaultAnchor
            *
            default anchor for all child container items applied if no anchor or specific width is set on the child item.  Defaults to '100%'.
            *
            </summary>
        </member>
        <member name="P:Ext.layout.AbsoluteLayout.extraCls">
            <summary>
            @class Ext.layout.AbsoluteLayout
            @extends Ext.layout.AnchorLayout
            <p>This is a layout that inherits the anchoring of <b>{@link Ext.layout.AnchorLayout}</b> and adds the
            ability for x/y positioning using the standard x and y component config options.</p>
            <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            <p>Example usage:</p>
            <pre><code>
            var form = new Ext.form.FormPanel({
            title: 'Absolute Layout',
            layout:'absolute',
            layoutConfig: {
            // layout-specific configs go here
            extraCls: 'x-abs-layout-item',
            },
            baseCls: 'x-plain',
            url:'save-form.php',
            defaultType: 'textfield',
            items: [{
            x: 0,
            y: 5,
            xtype:'label',
            text: 'Send To:'
            },{
            x: 60,
            y: 0,
            name: 'to',
            anchor:'100%'  // anchor width by percentage
            },{
            x: 0,
            y: 35,
            xtype:'label',
            text: 'Subject:'
            },{
            x: 60,
            y: 30,
            name: 'subject',
            anchor: '100%'  // anchor width by percentage
            },{
            x:0,
            y: 60,
            xtype: 'textarea',
            name: 'msg',
            anchor: '100% 100%'  // anchor width and height
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.layout.AccordionLayout">
            <summary>
            @class Ext.layout.AccordionLayout
            @extends Ext.layout.FitLayout
            <p>This is a layout that manages multiple Panels in an expandable accordion style such that only
            <b>one Panel can be expanded at any given time</b>. Each Panel has built-in support for expanding and collapsing.</p>
            <p>Note: Only Ext.Panels <b>and all subclasses of Ext.Panel</b> may be used in an accordion layout Container.</p>
            <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            <p>Example usage:</p>
            <pre><code>
            var accordion = new Ext.Panel({
            title: 'Accordion Layout',
            layout:'accordion',
            defaults: {
            // applied to each contained panel
            bodyStyle: 'padding:15px'
            },
            layoutConfig: {
            // layout-specific configs go here
            titleCollapse: false,
            animate: true,
            activeOnTop: true
            },
            items: [{
            title: 'Panel 1',
            html: '&lt;p&gt;Panel content!&lt;/p&gt;'
            },{
            title: 'Panel 2',
            html: '&lt;p&gt;Panel content!&lt;/p&gt;'
            },{
            title: 'Panel 3',
            html: '&lt;p&gt;Panel content!&lt;/p&gt;'
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.layout.FitLayout">
            <summary>
            @class Ext.layout.FitLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.  Example usage:</p>
            <pre><code>
            var p = new Ext.Panel({
            title: 'Fit Layout',
            layout:'fit',
            items: {
            title: 'Inner Panel',
            html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',
            border: false
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.layout.FitLayout.monitorResize">
            <summary>
            @class Ext.layout.FitLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.  Example usage:</p>
            <pre><code>
            var p = new Ext.Panel({
            title: 'Fit Layout',
            layout:'fit',
            items: {
            title: 'Inner Panel',
            html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',
            border: false
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.layout.AccordionLayout.setActiveItem(System.Object)">
            <summary>
            Sets the active (expanded) item in the layout.
            @param {String/Number} item The string component id or numeric index of the item to activate
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.activeOnTop">
            <summary>
            @cfg {Boolean} activeOnTop
            True to swap the position of each panel as it is expanded so that it becomes the first item in the container,
            false to keep the panels in the rendered order. <b>This is NOT compatible with "animate:true"</b> (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.animate">
            <summary>
            @cfg {Boolean} animate
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and
            close directly with no animation (defaults to false).  Note: to defer to the specific config setting of each
            contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.autoWidth">
            <summary>
            @cfg {Boolean} autoWidth
            True to set each contained item's width to 'auto', false to use the item's current width (defaults to true).
            Note that some components, in particular the {@link Ext.grid.GridPanel grid}, will not function properly within
            layouts if they have auto width, so in such cases this config should be set to false.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.collapseFirst">
            <summary>
            @cfg {Boolean} collapseFirst
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
            in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.fill">
            <summary>
            @cfg {Boolean} fill
            True to adjust the active item's height to fill the available space in the container, false to use the
            item's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.hideCollapseTool">
            <summary>
            @cfg {Boolean} hideCollapseTool
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false).
            When set to true, {@link #titleCollapse} should be true also.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.sequence">
            <summary>
            @cfg {Boolean} sequence
            <b>Experimental</b>. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.titleCollapse">
            <summary>
            @cfg {Boolean} titleCollapse
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow
            expand/collapse only when the toggle tool button is clicked (defaults to true).  When set to false,
            {@link #hideCollapseTool} should be false also.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayout.type">
            <summary>
            @cfg {Boolean} activeOnTop
            True to swap the position of each panel as it is expanded so that it becomes the first item in the container,
            false to keep the panels in the rendered order. <b>This is NOT compatible with "animate:true"</b> (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.animate">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and
            close directly with no animation (defaults to false).  Note: to defer to the specific config setting of each
            contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.autoWidth">
            <summary>
            True to set each contained item's width to 'auto', false to use the item's current width (defaults to true).
            Note that some components, in particular the {@link Ext.grid.GridPanel grid}, will not function properly within
            layouts if they have auto width, so in such cases this config should be set to false.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.collapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
            in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.fill">
            <summary>
            True to adjust the active item's height to fill the available space in the container, false to use the
            item's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.hideCollapseTool">
            <summary>
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false).
            When set to true, {@link #titleCollapse} should be true also.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.sequence">
            <summary>
            <b>Experimental</b>. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="P:Ext.layout.AccordionLayoutConfig.titleCollapse">
            <summary>
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow
            expand/collapse only when the toggle tool button is clicked (defaults to true).  When set to false,
            {@link #hideCollapseTool} should be false also.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.AnchorLayoutConfig.anchor" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.layout.AutoLayout" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.AutoLayout.type" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.layout.BorderLayout" -->
        <member name="M:Ext.layout.BorderLayout.SplitRegion(System.Object,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @class Ext.layout.BorderLayout.SplitRegion
            @extends Ext.layout.BorderLayout.Region
            <p>This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that
            has a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar
            is configurable to move either {@link #tickSize smooth or incrementally}.</p>
            @constructor
            Create a new SplitRegion.
            @param {Layout} layout The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region.
            @param {Object} config The configuration options
            @param {String} position The region position.  Valid values are: north, south, east, west and center.  Every
            BorderLayout must have a center region for the primary content -- all other regions are optional.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.monitorResize" -->
        <member name="M:Ext.layout.BorderLayout.Region.getMargins">
            <summary>
            Returns the current margins for this region.  If the region is collapsed, the
            {@link #cmargins} (collapsed margins) value will be returned, otherwise the
            {@link #margins} value will be returned.
            @return {Object} An object containing the element's margins: <tt>{left: (left
            margin), top: (top margin), right: (right margin), bottom: (bottom margin)}</tt>
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.getMinHeight">
            <summary>
            Returns the minimum allowable height for this region.
            @return {Number} The minimum height
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.getMinWidth">
            <summary>
            Returns the minimum allowable width for this region.
            @return {Number} The minimum width
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.getSize">
            <summary>
            Returns the current size of this region.  If the region is collapsed, the size of the
            collapsedEl will be returned, otherwise the size of the region's panel will be returned.
            @return {Object} An object containing the element's size: <tt>{width: (element width),
            height: (element height)}</tt>
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.isVisible">
            <summary>
            True if this region is currently visible, else false.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.#ctor(System.Object,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @class Ext.layout.BorderLayout.Region
            <p>This is a region of a {@link Ext.layout.BorderLayout BorderLayout} that acts as a subcontainer
            within the layout.  Each region has its own {@link Ext.layout.ContainerLayout layout} that is
            independent of other regions and the containing BorderLayout, and can be any of the
            {@link Ext.layout.ContainerLayout valid Ext layout types}.</p>
            <p>Region size is managed automatically and cannot be changed by the user -- for
            {@link #split resizable regions}, see {@link Ext.layout.BorderLayout.SplitRegion}.</p>
            @constructor
            Create a new Region.
            @param {Layout} layout The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region.
            @param {Object} config The configuration options
            @param {String} position The region position.  Valid values are: <tt>north</tt>, <tt>south</tt>,
            <tt>east</tt>, <tt>west</tt> and <tt>center</tt>.  Every {@link Ext.layout.BorderLayout BorderLayout}
            <b>must have a center region</b> for the primary content -- all other regions are optional.
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.render(System.Object,System.Object)">
            <summary>
            This region's layout position (north, south, east, west or center).  Read-only.
            @type String
            @property position
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.setPanel(Ext.Panel)">
            <summary>
            Sets the specified panel as the container element for this region.
            @param {Ext.Panel} panel The new panel
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.slideIn(System.Object)">
            <summary>
            If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides
            this region back into its collapsed state.
            </summary>
        </member>
        <member name="M:Ext.layout.BorderLayout.Region.slideOut">
            <summary>
            If this Region is {@link #floatable}, this method slides this Region into full visibility <i>over the top
            of the center Region</i> where it floats until either {@link #slideIn} is called, or other regions of the layout
            are clicked, or the mouse exits the Region.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.Region.collapsible" -->
        <member name="P:Ext.layout.BorderLayout.Region.floatable">
            <summary>
            @cfg {Boolean} floatable
            <tt>true</tt> to allow clicking a collapsed region's bar to display the region's panel floated
            above the layout, <tt>false</tt> to force the user to fully expand a collapsed region by
            clicking the expand button to see it again (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.layout.BorderLayout.Region.isCollapsed">
            <summary>
            True if this region is collapsed. Read-only.
            @type Boolean
            @property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.Region.minHeight" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.Region.minWidth" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.Region.split" -->
        <member name="P:Ext.layout.BorderLayout.RegionConfig.animFloat">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated
            panel that will close again once the user mouses out of that panel (or clicks out if
            <tt>{@link #autoHide} = false</tt>).  Setting <tt>{@link #animFloat} = false</tt> will
            prevent the open and close of these floated panels from being animated (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.layout.BorderLayout.RegionConfig.autoHide">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated
            panel.  If <tt>autoHide = true</tt>, the panel will automatically hide after the user mouses
            out of the panel.  If <tt>autoHide = false</tt>, the panel will continue to display until the
            user clicks outside of the panel (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.layout.BorderLayout.RegionConfig.cmargins">
            <summary>
            An object containing margins to apply to the region when in the collapsed state in the
            format:<pre><code>
            {
            top: (top margin),
            right: (right margin),
            bottom: (bottom margin),
            left: (left margin)
            }</code></pre>
            <p>May also be a string containing space-separated, numeric margin values. The order of the
            sides associated with each value matches the way CSS processes margin values.</p>
            <p><ul>
            <li>If there is only one value, it applies to all sides.</li>
            <li>If there are two values, the top and bottom borders are set to the first value and the
            right and left are set to the second.</li>
            <li>If there are three values, the top is set to the first value, the left and right are set
            to the second, and the bottom is set to the third.</li>
            <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
            </ul></p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.RegionConfig.collapseMode" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.RegionConfig.collapsible" -->
        <member name="P:Ext.layout.BorderLayout.RegionConfig.floatable">
            <summary>
            <tt>true</tt> to allow clicking a collapsed region's bar to display the region's panel floated
            above the layout, <tt>false</tt> to force the user to fully expand a collapsed region by
            clicking the expand button to see it again (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.layout.BorderLayout.RegionConfig.margins">
            <summary>
            An object containing margins to apply to the region when in the expanded state in the
            format:<pre><code>
            {
            top: (top margin),
            right: (right margin),
            bottom: (bottom margin),
            left: (left margin)
            }</code></pre>
            <p>May also be a string containing space-separated, numeric margin values. The order of the
            sides associated with each value matches the way CSS processes margin values:</p>
            <p><div class="mdetail-params"><ul>
            <li>If there is only one value, it applies to all sides.</li>
            <li>If there are two values, the top and bottom borders are set to the first value and the
            right and left are set to the second.</li>
            <li>If there are three values, the top is set to the first value, the left and right are set
            to the second, and the bottom is set to the third.</li>
            <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
            </ul></div></p>
            <p>Defaults to:</p><pre><code>
            {top:0, right:0, bottom:0, left:0}
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.RegionConfig.minHeight" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.RegionConfig.minWidth" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BorderLayout.RegionConfig.split" -->
        <member name="T:Ext.layout.BoxLayout">
            <summary>
            @class Ext.layout.BoxLayout
            @extends Ext.layout.ContainerLayout
            <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.destroy">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.getVisibleItems(System.Object)">
            <summary>
            @private
            Returns all items that are both rendered and visible
            @return {Array} All matching items
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.handleTargetOverflow(System.Object,Ext.Container,Ext.Element)">
            <summary>
            @private
            This should be called after onLayout of any BoxLayout subclass. If the target's overflow is not set to 'hidden',
            we need to lay out a second time because the scrollbars may have modified the height and width of the layout
            target. Having a Box layout inside such a target is therefore not recommended.
            @param {Object} previousTargetSize The size and height of the layout target before we just laid out
            @param {Ext.Container} container The container
            @param {Ext.Element} target The target element
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.onLayout(System.Object,System.Object)">
            <summary>
            @private
            Runs the child box calculations and caches them in childBoxCache. Subclasses can used these cached values
            when laying out
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.updateChildBoxes(SharpKit.JavaScript.JsArray)">
            <summary>
            Resizes and repositions each child component
            @param {Array} boxes The box measurements
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.updateInnerCtSize(System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            Called by onRender just before the child components are sized and positioned. This resizes the innerCt
            to make sure all child items fit within it. We call this before sizing the children because if our child
            items are larger than the previous innerCt size the browser will insert scrollbars and then remove them
            again immediately afterwards, giving a performance hit.
            Subclasses should provide an implementation.
            @param {Object} currentSize The current height and width of the innerCt
            @param {Array} calculations The new box calculations of all items to be laid out
            </summary>
        </member>
        <member name="P:Ext.layout.BoxLayout.pack">
            <summary>
            @cfg {String} padding
            <p>Sets the padding to be applied to all child items managed by this layout.</p>
            <p>This property must be specified as a string containing
            space-separated, numeric padding values. The order of the sides associated
            with each value matches the way CSS processes padding values:</p>
            <div class="mdetail-params"><ul>
            <li>If there is only one value, it applies to all sides.</li>
            <li>If there are two values, the top and bottom borders are set to the
            first value and the right and left are set to the second.</li>
            <li>If there are three values, the top is set to the first value, the left
            and right are set to the second, and the bottom is set to the third.</li>
            <li>If there are four values, they apply to the top, right, bottom, and
            left, respectively.</li>
            </ul></div>
            <p>Defaults to: <code>"0"</code></p>
            </summary>
        </member>
        <member name="P:Ext.layout.BoxLayout.padding">
            <summary>
            @cfg {String} padding
            <p>Sets the padding to be applied to all child items managed by this layout.</p>
            <p>This property must be specified as a string containing
            space-separated, numeric padding values. The order of the sides associated
            with each value matches the way CSS processes padding values:</p>
            <div class="mdetail-params"><ul>
            <li>If there is only one value, it applies to all sides.</li>
            <li>If there are two values, the top and bottom borders are set to the
            first value and the right and left are set to the second.</li>
            <li>If there are three values, the top is set to the first value, the left
            and right are set to the second, and the bottom is set to the third.</li>
            <li>If there are four values, they apply to the top, right, bottom, and
            left, respectively.</li>
            </ul></div>
            <p>Defaults to: <code>"0"</code></p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.BoxLayoutConfig.defaultMargins" -->
        <member name="T:Ext.layout.CardLayout">
            <summary>
            @class Ext.layout.CardLayout
            @extends Ext.layout.FitLayout
            <p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be
            visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
            the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
            so that functionality must be provided by the developer.</p>
            <p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
            to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
            common navigation routine -- for this example, the implementation of that routine has been ommitted since
            it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a
            completely different implementation.  For serious implementations, a better approach would be to extend
            CardLayout to provide the custom functionality needed.  Example usage:</p>
            <pre><code>
            var navHandler = function(direction){
            // This routine could contain business logic required to manage the navigation steps.
            // It would call setActiveItem as needed, manage navigation button state, handle any
            // branching logic that might be required, handle alternate actions like cancellation
            // or finalization, etc.  A complete wizard implementation could get pretty
            // sophisticated depending on the complexity required, and should probably be
            // done as a subclass of CardLayout in a real-world implementation.
            };
            var card = new Ext.Panel({
            title: 'Example Wizard',
            layout:'card',
            activeItem: 0, // make sure the active item is set on the container config!
            bodyStyle: 'padding:15px',
            defaults: {
            // applied to each contained panel
            border:false
            },
            // just an example of one possible navigation scheme, using buttons
            bbar: [
            {
            id: 'move-prev',
            text: 'Back',
            handler: navHandler.createDelegate(this, [-1]),
            disabled: true
            },
            '->', // greedy spacer so that the buttons are aligned to each side
            {
            id: 'move-next',
            text: 'Next',
            handler: navHandler.createDelegate(this, [1])
            }
            ],
            // the panels (or "cards") within the layout
            items: [{
            id: 'card-0',
            html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'
            },{
            id: 'card-1',
            html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'
            },{
            id: 'card-2',
            html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.setActiveItem(System.Object)">
            <summary>
            Sets the active (visible) item in the layout.
            @param {String/Number} item The string component id or numeric index of the item to activate
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayout.deferredRender">
            <summary>
            @cfg {Boolean} deferredRender
            True to render each contained item at the time it becomes active, false to render all contained items
            as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
            a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
            true might improve performance.
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayout.layoutOnCardChange">
            <summary>
            @cfg {Boolean} layoutOnCardChange
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayout.renderHidden">
            <summary>
            @cfg {Boolean} renderHidden @hide
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayoutConfig.deferredRender">
            <summary>
            True to render each contained item at the time it becomes active, false to render all contained items
            as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
            a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
            true might improve performance.
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayoutConfig.layoutOnCardChange">
            <summary>
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayoutConfig.renderHidden">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.layout.ColumnLayout">
            <summary>
            @class Ext.layout.ColumnLayout
            @extends Ext.layout.ContainerLayout
            <p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of
            each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
            This class is intended to be extended or created via the layout:'column' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
            specific config property of <b><tt>columnWidth</tt></b> that can be included in the config of any panel added to it.  The
            layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
            If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>
            <p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
            The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
            less than 1 (e.g., .25).</p>
            <p>The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
            set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
            specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
            pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
            the total <b>remaining</b> container width.  In other words, percentage width panels are designed to fill the space
            left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
            with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
            layout may not render as expected.  Example usage:</p>
            <pre><code>
            // All columns are percentages -- they must add up to 1
            var p = new Ext.Panel({
            title: 'Column Layout - Percentage Only',
            layout:'column',
            items: [{
            title: 'Column 1',
            columnWidth: .25
            },{
            title: 'Column 2',
            columnWidth: .6
            },{
            title: 'Column 3',
            columnWidth: .15
            }]
            });
            // Mix of width and columnWidth -- all columnWidth values must add up
            // to 1. The first column will take up exactly 120px, and the last two
            // columns will fill the remaining container width.
            var p = new Ext.Panel({
            title: 'Column Layout - Mixed',
            layout:'column',
            items: [{
            title: 'Column 1',
            width: 120
            },{
            title: 'Column 2',
            columnWidth: .8
            },{
            title: 'Column 3',
            columnWidth: .2
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.layout.ColumnLayout.monitorResize">
            <summary>
            @class Ext.layout.ColumnLayout
            @extends Ext.layout.ContainerLayout
            <p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of
            each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
            This class is intended to be extended or created via the layout:'column' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
            specific config property of <b><tt>columnWidth</tt></b> that can be included in the config of any panel added to it.  The
            layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
            If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>
            <p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
            The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
            less than 1 (e.g., .25).</p>
            <p>The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
            set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
            specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
            pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
            the total <b>remaining</b> container width.  In other words, percentage width panels are designed to fill the space
            left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
            with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
            layout may not render as expected.  Example usage:</p>
            <pre><code>
            // All columns are percentages -- they must add up to 1
            var p = new Ext.Panel({
            title: 'Column Layout - Percentage Only',
            layout:'column',
            items: [{
            title: 'Column 1',
            columnWidth: .25
            },{
            title: 'Column 2',
            columnWidth: .6
            },{
            title: 'Column 3',
            columnWidth: .15
            }]
            });
            // Mix of width and columnWidth -- all columnWidth values must add up
            // to 1. The first column will take up exactly 120px, and the last two
            // columns will fill the remaining container width.
            var p = new Ext.Panel({
            title: 'Column Layout - Mixed',
            layout:'column',
            items: [{
            title: 'Column 1',
            width: 120
            },{
            title: 'Column 2',
            columnWidth: .8
            },{
            title: 'Column 3',
            columnWidth: .2
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.layout.ContainerLayoutConfig.extraCls">
            <summary>
            <p>An optional extra CSS class that will be added to the container. This can be useful for adding
            customized styles to the container or any of its children using standard CSS rules. See
            {@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.</p>
            <p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except for the following classes
            which assign a value by default:
            <div class="mdetail-params"><ul>
            <li>{@link Ext.layout.AbsoluteLayout Absolute Layout} : <tt>'x-abs-layout-item'</tt></li>
            <li>{@link Ext.layout.Box Box Layout} : <tt>'x-box-item'</tt></li>
            <li>{@link Ext.layout.ColumnLayout Column Layout} : <tt>'x-column'</tt></li>
            </ul></div>
            To configure the above Classes with an extra CSS class append to the default.  For example,
            for ColumnLayout:<pre><code>
            extraCls: 'x-column custom-class'
            </code></pre>
            </p>
            </summary>
        </member>
        <member name="P:Ext.layout.ContainerLayoutConfig.renderHidden">
            <summary>
            True to hide each contained item on render (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.layout.FormLayout">
            <summary>
            @class Ext.layout.FormLayout
            @extends Ext.layout.AnchorLayout
            <p>This layout manager is specifically designed for rendering and managing child Components of
            {@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of
            {@link Ext.form.Field Field}s.</p>
            *
            <p>This layout manager is used when a Container is configured with the <tt>layout:'form'</tt>
            {@link Ext.Container#layout layout} config option, and should generally not need to be created directly
            via the new keyword. See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            *
            <p>In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}
            (which is configured with FormLayout as its layout class by default) since it also provides built-in
            functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.</p>
            *
            <p>A {@link Ext.Container Container} <i>using</i> the FormLayout layout manager (e.g.
            {@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) can also accept the following
            layout-specific config properties:<div class="mdetail-params"><ul>
            <li><b><tt>{@link Ext.form.FormPanel#hideLabels hideLabels}</tt></b></li>
            <li><b><tt>{@link Ext.form.FormPanel#labelAlign labelAlign}</tt></b></li>
            <li><b><tt>{@link Ext.form.FormPanel#labelPad labelPad}</tt></b></li>
            <li><b><tt>{@link Ext.form.FormPanel#labelSeparator labelSeparator}</tt></b></li>
            <li><b><tt>{@link Ext.form.FormPanel#labelWidth labelWidth}</tt></b></li>
            </ul></div></p>
            *
            <p>Any Component (including Fields) managed by FormLayout accepts the following as a config option:
            <div class="mdetail-params"><ul>
            <li><b><tt>{@link Ext.Component#anchor anchor}</tt></b></li>
            </ul></div></p>
            *
            <p>Any Component managed by FormLayout may be rendered as a form field (with an associated label) by
            configuring it with a non-null <b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b>. Components configured
            in this way may be configured with the following options which affect the way the FormLayout renders them:
            <div class="mdetail-params"><ul>
            <li><b><tt>{@link Ext.Component#clearCls clearCls}</tt></b></li>
            <li><b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b></li>
            <li><b><tt>{@link Ext.Component#hideLabel hideLabel}</tt></b></li>
            <li><b><tt>{@link Ext.Component#itemCls itemCls}</tt></b></li>
            <li><b><tt>{@link Ext.Component#labelSeparator labelSeparator}</tt></b></li>
            <li><b><tt>{@link Ext.Component#labelStyle labelStyle}</tt></b></li>
            </ul></div></p>
            *
            <p>Example usage:</p>
            <pre><code>
            // Required if showing validation messages
            Ext.QuickTips.init();
            // While you can create a basic Panel with layout:'form', practically
            // you should usually use a FormPanel to also get its form functionality
            // since it already creates a FormLayout internally.
            var form = new Ext.form.FormPanel({
            title: 'Form Layout',
            bodyStyle: 'padding:15px',
            width: 350,
            defaultType: 'textfield',
            defaults: {
            // applied to each contained item
            width: 230,
            msgTarget: 'side'
            },
            items: [{
            fieldLabel: 'First Name',
            name: 'first',
            allowBlank: false,
            {@link Ext.Component#labelSeparator labelSeparator}: ':' // override labelSeparator layout config
            },{
            fieldLabel: 'Last Name',
            name: 'last'
            },{
            fieldLabel: 'Email',
            name: 'email',
            vtype:'email'
            }, {
            xtype: 'textarea',
            hideLabel: true,     // override hideLabels layout config
            name: 'msg',
            anchor: '100% -53'
            }
            ],
            buttons: [
            {text: 'Save'},
            {text: 'Cancel'}
            ],
            layoutConfig: {
            {@link #labelSeparator}: '~' // superseded by assignment below
            },
            // config options applicable to container when layout='form':
            hideLabels: false,
            labelAlign: 'left',   // or 'right' or 'top'
            {@link Ext.form.FormPanel#labelSeparator labelSeparator}: '>>', // takes precedence over layoutConfig value
            labelWidth: 65,       // defaults to 100
            labelPad: 8           // defaults to 5, must specify labelWidth to be honored
            });
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.layout.FormLayout.getTemplateArgs(System.Object)">
            <summary>
            <p>Provides template arguments for rendering the fully wrapped, labeled and styled form Field.</p>
            <p>This method returns an object hash containing properties used by the layout's {@link #fieldTpl}
            to create a correctly wrapped, labeled and styled form Field. This may be overriden to
            create custom layouts. The properties which must be returned are:</p><div class="mdetail-params"><ul>
            <li><b><tt>itemCls</tt></b> : String<div class="sub-desc">The CSS class applied to the outermost div wrapper
            that contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>
            will be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>
            supplied at the container level.</div></li>
            <li><b><tt>id</tt></b> : String<div class="sub-desc">The id of the Field</div></li>
            <li><b><tt>{@link #labelStyle}</tt></b> : String<div class="sub-desc">
            A CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the
            {@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>
            <li><b><tt>label</tt></b> : String<div class="sub-desc">The text to display as the label for this
            field (defaults to the field's configured fieldLabel property)</div></li>
            <li><b><tt>{@link #labelSeparator}</tt></b> : String<div class="sub-desc">The separator to display after
            the text of the label for this field (defaults to a colon <tt>':'</tt> or the
            {@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>
            <li><b><tt>elementStyle</tt></b> : String<div class="sub-desc">The styles text for the input element's wrapper.</div></li>
            <li><b><tt>clearCls</tt></b> : String<div class="sub-desc">The CSS class to apply to the special clearing div
            rendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>
            </ul></div>
            @param (Ext.form.Field} field The {@link Ext.form.Field Field} being rendered.
            @return {Object} An object hash containing the properties required to render the Field.
            </summary>
        </member>
        <member name="M:Ext.layout.FormLayout.renderItem(System.Object,System.Object,System.Object)">
            <summary>
            @private
            *
            </summary>
        </member>
        <member name="P:Ext.layout.FormLayout.labelSeparator">
            <summary>
            @cfg {String} labelSeparator
            See {@link Ext.form.FormPanel}.{@link Ext.form.FormPanel#labelSeparator labelSeparator}.  Configuration
            of this property at the <b>container</b> level takes precedence.
            </summary>
        </member>
        <member name="P:Ext.layout.FormLayout.trackLabels">
            <summary>
            @cfg {Boolean} trackLabels
            True to show/hide the field label when the field is hidden. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.layout.FormLayout.type">
            <summary>
            @cfg {Boolean} trackLabels
            True to show/hide the field label when the field is hidden. Defaults to <tt>true</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.FormLayoutConfig.fieldTpl" -->
        <member name="P:Ext.layout.FormLayoutConfig.labelSeparator">
            <summary>
            See {@link Ext.form.FormPanel}.{@link Ext.form.FormPanel#labelSeparator labelSeparator}.  Configuration
            of this property at the <b>container</b> level takes precedence.
            </summary>
        </member>
        <member name="T:Ext.layout.HBoxLayout">
            <summary>
            @class Ext.layout.HBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
            space between child items containing a numeric <code>flex</code> configuration.</p>
            This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="M:Ext.layout.HBoxLayout.calculateChildBoxes(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            @private
            Calculates the size and positioning of each item in the HBox. This iterates over all of the rendered,
            visible items and returns a height, width, top and left for each, as well as a reference to each. Also
            returns meta data such as maxHeight which are useful when resizing layout wrappers such as this.innerCt.
            @param {Array} visibleItems The array of all rendered, visible items to be calculated for
            @param {Object} targetSize Object containing target size and height
            @return {Object} Object containing box measurements for each child, plus meta data
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.HBoxLayout.align" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.HBoxLayout.type" -->
        <member name="P:Ext.layout.HBoxLayoutConfig.flex">
            <summary>
            This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed
            by this layout. Each child item with a <tt>flex</tt> property will be flexed <b>horizontally</b>
            according to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with
            a <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or
            <tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.layout.HBoxLayoutConfig.pack">
            <summary>
            Controls how the child items of the container are packed together. Acceptable configuration values
            for this property are:
            <div class="mdetail-params"><ul>
            <li><b><tt>start</tt></b> : <b>Default</b><div class="sub-desc">child items are packed together at
            <b>left</b> side of container</div></li>
            <li><b><tt>center</tt></b> : <div class="sub-desc">child items are packed together at
            <b>mid-width</b> of container</div></li>
            <li><b><tt>end</tt></b> : <div class="sub-desc">child items are packed together at <b>right</b>
            side of container</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="T:Ext.layout.MenuLayout">
            <summary>
            @class Ext.layout.MenuLayout
            @extends Ext.layout.ContainerLayout
            <p>Layout manager used by {@link Ext.menu.Menu}. Generally this class should not need to be used directly.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.MenuLayout.monitorResize">
            <summary>
            @class Ext.layout.MenuLayout
            @extends Ext.layout.ContainerLayout
            <p>Layout manager used by {@link Ext.menu.Menu}. Generally this class should not need to be used directly.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.TableLayout">
            <summary>
            @class Ext.layout.TableLayout
            @extends Ext.layout.ContainerLayout
            <p>This layout allows you to easily render content into an HTML table.  The total number of columns can be
            specified, and rowspan and colspan can be used to create complex layouts within the table.
            This class is intended to be extended or created via the layout:'table' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>Note that when creating a layout via config, the layout-specific config properties must be passed in via
            the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the
            case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a
            TableLayout can supply the following table-specific config properties:</p>
            <ul>
            <li><b>rowspan</b> Applied to the table cell containing the item.</li>
            <li><b>colspan</b> Applied to the table cell containing the item.</li>
            <li><b>cellId</b> An id applied to the table cell containing the item.</li>
            <li><b>cellCls</b> A CSS class name added to the table cell containing the item.</li>
            </ul>
            <p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard
            HTML table.  You simply add each panel (or "cell") that you want to include along with any span attributes
            specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
            Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
            total column count in the layoutConfig and start adding panels in their natural order from left to right,
            top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
            how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
            up correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:</p>
            <pre><code>
            // This code will generate a layout table that is 3 columns by 2 rows
            // with some spanning included.  The basic layout will be:
            // +--------+-----------------+
            // |   A    |   B             |
            // |        |--------+--------|
            // |        |   C    |   D    |
            // +--------+--------+--------+
            var table = new Ext.Panel({
            title: 'Table Layout',
            layout:'table',
            defaults: {
            // applied to each contained panel
            bodyStyle:'padding:20px'
            },
            layoutConfig: {
            // The total column count must be specified here
            columns: 3
            },
            items: [{
            html: '&lt;p&gt;Cell A content&lt;/p&gt;',
            rowspan: 2
            },{
            html: '&lt;p&gt;Cell B content&lt;/p&gt;',
            colspan: 2
            },{
            html: '&lt;p&gt;Cell C content&lt;/p&gt;',
            cellCls: 'highlight'
            },{
            html: '&lt;p&gt;Cell D content&lt;/p&gt;'
            }]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.layout.TableLayout.monitorResize">
            <summary>
            @cfg {Number} columns
            The total number of columns to create in the table for this layout.  If not specified, all Components added to
            this layout will be rendered into a single row using one column per Component.
            </summary>
        </member>
        <member name="P:Ext.layout.TableLayout.tableAttrs">
            <summary>
            @cfg {Object} tableAttrs
            <p>An object containing properties which are added to the {@link Ext.DomHelper DomHelper} specification
            used to create the layout's <tt>&lt;table&gt;</tt> element. Example:</p><pre><code>
            {
            xtype: 'panel',
            layout: 'table',
            layoutConfig: {
            tableAttrs: {
            style: {
            width: '100%'
            }
            },
            columns: 3
            }
            }</code></pre>
            </summary>
        </member>
        <member name="P:Ext.layout.TableLayoutConfig.columns">
            <summary>
            The total number of columns to create in the table for this layout.  If not specified, all Components added to
            this layout will be rendered into a single row using one column per Component.
            </summary>
        </member>
        <member name="P:Ext.layout.TableLayoutConfig.tableAttrs">
            <summary>
            <p>An object containing properties which are added to the {@link Ext.DomHelper DomHelper} specification
            used to create the layout's <tt>&lt;table&gt;</tt> element. Example:</p><pre><code>
            {
            xtype: 'panel',
            layout: 'table',
            layoutConfig: {
            tableAttrs: {
            style: {
            width: '100%'
            }
            },
            columns: 3
            }
            }</code></pre>
            </summary>
        </member>
        <member name="T:Ext.layout.ToolbarLayout">
            <summary>
            @class Ext.layout.ToolbarLayout
            @extends Ext.layout.ContainerLayout
            Layout manager used by Ext.Toolbar. This is highly specialised for use by Toolbars and would not
            usually be used by any other class.
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.addComponentToMenu(Ext.menu.Menu,Ext.Component)">
            <summary>
            @private
            Adds the given Toolbar item to the given menu. Buttons inside a buttongroup are added individually.
            @param {Ext.menu.Menu} menu The menu to add to
            @param {Ext.Component} component The component to add
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.beforeMoreShow(Ext.menu.Menu)">
            <summary>
            @private
            Called before the expand menu is shown, this rebuilds the menu since it was last shown because
            it is possible that the items hidden due to space limitations on the Toolbar have changed since.
            @param {Ext.menu.Menu} m The menu
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.cleanup(Ext.Element)">
            <summary>
            @private
            Removes any empty nodes from the given element
            @param {Ext.Element} el The element to clean up
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.clearMenu">
            <summary>
            @private
            Deletes the sub-menu of each item in the expander menu. Submenus are created for items such as
            splitbuttons and buttongroups, where the Toolbar item cannot be represented by a single menu item
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.createMenuConfig(Ext.Component,System.Boolean)">
            <summary>
            @private
            Returns a menu config for a given component. This config is used to create a menu item
            to be added to the expander menu
            @param {Ext.Component} component The component to create the config for
            @param {Boolean} hideOnClick Passed through to the menu item
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.fitToSize(Ext.Element)">
            <summary>
            @private
            Called at the end of onLayout. At this point the Toolbar has already been resized, so we need
            to fit the items into the available width. We add up the width required by all of the items in
            the toolbar - if we don't have enough space we hide the extra items and render the expand menu
            trigger.
            @param {Ext.Element} target The Element the Toolbar is currently laid out within
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.getItemWidth(Ext.Component)">
            <summary>
            @private
            Returns the width of the given toolbar item. If the item is currently hidden because there
            is not enough room to render it, its previous width is returned
            @param {Ext.Component} c The component to measure
            @return {Number} The width of the item
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.hideItem(Ext.Component)">
            <summary>
            @private
            Hides an item because it will not fit in the available width. The item will be unhidden again
            if the Toolbar is resized to be large enough to show it
            @param {Ext.Component} item The item to hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.layout.ToolbarLayout.initMore" -->
        <member name="M:Ext.layout.ToolbarLayout.insertCell(Ext.Component,Ext.Element,SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Inserts the given Toolbar item into the given element
            @param {Ext.Component} c The component to add
            @param {Ext.Element} target The target to add the component to
            @param {Number} position The position to add the component at
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.onLayout(System.Object,System.Object)">
            <summary>
            @private
            Create the wrapping Toolbar HTML and render/move all the items into the correct places
            </summary>
        </member>
        <member name="M:Ext.layout.ToolbarLayout.unhideItem(Ext.Component)">
            <summary>
            @private
            Unhides an item that was previously hidden due to there not being enough space left on the Toolbar
            @param {Ext.Component} item The item to show
            </summary>
        </member>
        <member name="P:Ext.layout.ToolbarLayout.lastOverflow">
            <summary>
            @private
            @property lastOverflow
            @type Boolean
            Used internally to record whether the last layout caused an overflow or not
            </summary>
        </member>
        <member name="P:Ext.layout.ToolbarLayout.monitorResize">
            <summary>
            @class Ext.layout.ToolbarLayout
            @extends Ext.layout.ContainerLayout
            Layout manager used by Ext.Toolbar. This is highly specialised for use by Toolbars and would not
            usually be used by any other class.
            </summary>
        </member>
        <member name="P:Ext.layout.ToolbarLayout.noItemsMenuText">
            <summary>
            @property noItemsMenuText
            @type String
            HTML fragment to render into the toolbar overflow menu if there are no items to display
            </summary>
        </member>
        <member name="P:Ext.layout.ToolbarLayout.triggerWidth">
            <summary>
            @property triggerWidth
            @type Number
            The width allocated for the menu trigger at the extreme right end of the Toolbar
            </summary>
        </member>
        <member name="T:Ext.layout.VBoxLayout">
            <summary>
            @class Ext.layout.VBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
            space between child items containing a numeric <code>flex</code> configuration.</p>
            This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="M:Ext.layout.VBoxLayout.calculateChildBoxes(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            @private
            Calculates the size and positioning of each item in the VBox. This iterates over all of the rendered,
            visible items and returns a height, width, top and left for each, as well as a reference to each. Also
            returns meta data such as maxHeight which are useful when resizing layout wrappers such as this.innerCt.
            @param {Array} visibleItems The array of all rendered, visible items to be calculated for
            @param {Object} targetSize Object containing target size and height
            @return {Object} Object containing box measurements for each child, plus meta data
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayout.align">
            <summary>
            @cfg {String} align
            Controls how the child items of the container are aligned. Acceptable configuration values for this
            property are:
            <div class="mdetail-params"><ul>
            <li><b><tt>left</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned horizontally
            at the <b>left</b> side of the container</div></li>
            <li><b><tt>center</tt></b> : <div class="sub-desc">child items are aligned horizontally at the
            <b>mid-width</b> of the container</div></li>
            <li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched horizontally to fill
            the width of the container</div></li>
            <li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched horizontally to
            the size of the largest item.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayout.type">
            <summary>
            @cfg {String} align
            Controls how the child items of the container are aligned. Acceptable configuration values for this
            property are:
            <div class="mdetail-params"><ul>
            <li><b><tt>left</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned horizontally
            at the <b>left</b> side of the container</div></li>
            <li><b><tt>center</tt></b> : <div class="sub-desc">child items are aligned horizontally at the
            <b>mid-width</b> of the container</div></li>
            <li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched horizontally to fill
            the width of the container</div></li>
            <li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched horizontally to
            the size of the largest item.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayoutConfig.flex">
            <summary>
            This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed
            by this layout. Each child item with a <tt>flex</tt> property will be flexed <b>vertically</b>
            according to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with
            a <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or
            <tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayoutConfig.pack">
            <summary>
            Controls how the child items of the container are packed together. Acceptable configuration values
            for this property are:
            <div class="mdetail-params"><ul>
            <li><b><tt>start</tt></b> : <b>Default</b><div class="sub-desc">child items are packed together at
            <b>top</b> side of container</div></li>
            <li><b><tt>center</tt></b> : <div class="sub-desc">child items are packed together at
            <b>mid-height</b> of container</div></li>
            <li><b><tt>end</tt></b> : <div class="sub-desc">child items are packed together at <b>bottom</b>
            side of container</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.HorizontalMenu">
            <summary>
            @class Ext.layout.boxOverflow.HorizontalMenu
            @extends Ext.layout.boxOverflow.Menu
            Description
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.Menu">
            <summary>
            @class Ext.layout.boxOverflow.Menu
            @extends Ext.layout.boxOverflow.None
            Description
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.None">
            <summary>
            @class Ext.layout.boxOverflow.None
            @extends Object
            Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout
            (either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)
            for its container.
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.None.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.layout.boxOverflow.None
            @extends Object
            Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout
            (either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)
            for its container.
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.addComponentToMenu(Ext.menu.Menu,Ext.Component)">
            <summary>
            @private
            Adds the given Toolbar item to the given menu. Buttons inside a buttongroup are added individually.
            @param {Ext.menu.Menu} menu The menu to add to
            @param {Ext.Component} component The component to add
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.beforeMenuShow(System.Object)">
            <summary>
            @private
            Called before the overflow menu is shown. This constructs the menu's items, caching them for as long as it can.
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.clearMenu">
            <summary>
            @private
            Deletes the sub-menu of each item in the expander menu. Submenus are created for items such as
            splitbuttons and buttongroups, where the Toolbar item cannot be represented by a single menu item
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.clearOverflow(System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.#ctor(System.Object)">
            <summary>
            @property noItemsMenuText
            @type String
            HTML fragment to render into the toolbar overflow menu if there are no items to display
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.createInnerElements">
            <summary>
            @private
            Creates the beforeCt, innerCt and afterCt elements if they have not already been created
            @param {Ext.Container} container The Container attached to this Layout instance
            @param {Ext.Element} target The target Element
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.createMenu">
            <summary>
            @private
            Creates the overflow trigger and menu used when enableOverflow is set to true and the items
            in the layout are too wide to fit in the space available
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.createMenuConfig(Ext.Component,System.Boolean)">
            <summary>
            @private
            Returns a menu config for a given component. This config is used to create a menu item
            to be added to the expander menu
            @param {Ext.Component} component The component to create the config for
            @param {Boolean} hideOnClick Passed through to the menu item
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.destroy">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.hideTrigger">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Menu.showTrigger">
            <summary>
            @private
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Menu.afterCls">
            <summary>
            @cfg afterCls
            @type String
            CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,
            which must always be present at the rightmost edge of the Container
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Menu.noItemsMenuText">
            <summary>
            @property noItemsMenuText
            @type String
            HTML fragment to render into the toolbar overflow menu if there are no items to display
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalMenu.#ctor">
            <summary>
            @class Ext.layout.boxOverflow.HorizontalMenu
            @extends Ext.layout.boxOverflow.Menu
            Description
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.HorizontalScroller">
            <summary>
            @class Ext.layout.boxOverflow.HorizontalScroller
            @extends Ext.layout.boxOverflow.Scroller
            Description
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.Scroller">
            <summary>
            @class Ext.layout.boxOverflow.Scroller
            @extends Ext.layout.boxOverflow.None
            Description
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.atExtremeBefore">
            <summary>
            @private
            Returns true if the innerCt scroll is already at its left-most point
            @return {Boolean} True if already at furthest left point
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.clearOverflow">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.createScrollers">
            <summary>
            @private
            Creates the clickable scroller elements and places them into the beforeCt and afterCt
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.createWheelListener">
            <summary>
            @private
            Sets up an listener to scroll on the layout's innerCt mousewheel event
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.destroy">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.getItem(System.Object)">
            <summary>
            @private
            Normalizes an item reference, string id or numerical index into a reference to the item
            @param {Ext.Component|String|Number} item The item reference, id or index
            @return {Ext.Component} The item
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.getItemVisibility(Ext.Component)">
            <summary>
            @private
            For a given item in the container, return an object with information on whether the item is visible
            with the current innerCt scroll value.
            @param {Ext.Component} item The item
            @return {Object} Values for fullyVisible, hiddenLeft and hiddenRight
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.getScrollAnim">
            <summary>
            @private
            @return {Object} Object passed to scrollTo when scrolling
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.handleOverflow(System.Object,System.Object)">
            <summary>
            @private
            Most of the heavy lifting is done in the subclasses
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.hideScrollers">
            <summary>
            @private
            Hides the scroller elements in the beforeCt and afterCt
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.scrollBy(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            @private
            Scrolls left or right by the number of pixels specified
            @param {Number} delta Number of pixels to scroll to the right by. Use a negative number to scroll left
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.scrollLeft(System.Object)">
            <summary>
            @private
            Scrolls to the left by the configured amount
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.scrollRight(System.Object)">
            <summary>
            @private
            Scrolls to the right by the configured amount
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.scrollToItem(System.Object,System.Boolean)">
            <summary>
            Scrolls to the given component.
            @param {String|Number|Ext.Component} item The item to scroll to. Can be a numerical index, component id
            or a reference to the component itself.
            @param {Boolean} animate True to animate the scrolling
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.showScrollers">
            <summary>
            @private
            Shows the scroller elements in the beforeCt and afterCt. Creates the scrollers first if they are not already
            present.
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.Scroller.updateScrollButtons">
            <summary>
            @private
            Enables or disables each scroller button based on the current scroll position
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.afterCls">
            <summary>
            @cfg afterCls
            @type String
            CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,
            which must always be present at the rightmost edge of the Container
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.afterScrollerCls">
            <summary>
            @cfg afterScrollerCls
            @type String
            CSS class added to the right scroller element if enableScroll is used
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.animateScroll">
            <summary>
            @cfg animateScroll
            @type Boolean
            True to animate the scrolling of items within the layout (defaults to true, ignored if enableScroll is false)
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.beforeCls">
            <summary>
            @cfg beforeCls
            @type String
            CSS class added to the beforeCt element. This is the element that holds any special items such as scrollers,
            which must always be present at the leftmost edge of the Container
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.beforeScrollerCls">
            <summary>
            @cfg beforeScrollerCls
            @type String
            CSS class added to the left scroller element if enableScroll is used
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.scrollDuration">
            <summary>
            @cfg scrollDuration
            @type Number
            Number of seconds that each scroll animation lasts (defaults to 0.4)
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.scrollerCls">
            <summary>
            @cfg scrollerCls
            @type String
            CSS class added to both scroller elements if enableScroll is used
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.scrollIncrement">
            <summary>
            @cfg scrollIncrement
            @type Number
            The number of pixels to scroll by on scroller click (defaults to 100)
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.scrollRepeatInterval">
            <summary>
            @cfg scrollRepeatInterval
            @type Number
            Number of milliseconds between each scroll while a scroller button is held down (defaults to 400)
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.Scroller.wheelIncrement">
            <summary>
            @cfg wheelIncrement
            @type Number
            The number of pixels to increment on mouse wheel scrolling (defaults to <tt>3</tt>).
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.atExtremeAfter">
            <summary>
            @private
            Returns true if the innerCt scroll is already at its right-most point
            @return {Boolean} True if already at furthest right point
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.createInnerElements">
            <summary>
            @private
            Creates the beforeCt and afterCt elements if they have not already been created
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.getMaxScrollRight">
            <summary>
            @private
            Returns the maximum value we can scrollTo
            @return {Number} The max scroll value
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.getScrollPosition">
            <summary>
            Returns the current scroll position of the innerCt element
            @return {Number} The current scroll position
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.handleOverflow(System.Object,System.Object)">
            <summary>
            @class Ext.layout.boxOverflow.HorizontalScroller
            @extends Ext.layout.boxOverflow.Scroller
            Description
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.HorizontalScroller.scrollTo(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Scrolls to the given position. Performs bounds checking.
            @param {Number} position The position to scroll to. This is constrained.
            @param {Boolean} animate True to animate. If undefined, falls back to value of this.animateScroll
            </summary>
        </member>
        <member name="T:Ext.layout.boxOverflow.VerticalScroller">
            <summary>
            @class Ext.layout.boxOverflow.VerticalScroller
            @extends Ext.layout.boxOverflow.Scroller
            Description
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.VerticalScroller.atExtremeAfter">
            <summary>
            @private
            Returns true if the innerCt scroll is already at its right-most point
            @return {Boolean} True if already at furthest right point
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.VerticalScroller.createInnerElements">
            <summary>
            @private
            Creates the beforeCt and afterCt elements if they have not already been created
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.VerticalScroller.getMaxScrollBottom">
            <summary>
            @private
            Returns the maximum value we can scrollTo
            @return {Number} The max scroll value
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.VerticalScroller.getScrollPosition">
            <summary>
            Returns the current scroll position of the innerCt element
            @return {Number} The current scroll position
            </summary>
        </member>
        <member name="M:Ext.layout.boxOverflow.VerticalScroller.scrollTo(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Scrolls to the given position. Performs bounds checking.
            @param {Number} position The position to scroll to. This is constrained.
            @param {Boolean} animate True to animate. If undefined, falls back to value of this.animateScroll
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.VerticalScroller.scrollIncrement">
            <summary>
            @class Ext.layout.boxOverflow.VerticalScroller
            @extends Ext.layout.boxOverflow.Scroller
            Description
            </summary>
        </member>
        <member name="P:Ext.layout.boxOverflow.VerticalScroller.wheelIncrement">
            <summary>
            @class Ext.layout.boxOverflow.VerticalScroller
            @extends Ext.layout.boxOverflow.Scroller
            Description
            </summary>
        </member>
        <member name="T:Ext.list.BooleanColumn">
            <summary>
            @class Ext.list.BooleanColumn
            @extends Ext.list.Column
            <p>A Column definition class which renders boolean data fields.  See the {@link Ext.list.Column#xtype xtype}
            config option of {@link Ext.list.Column} for more details.</p>
            </summary>
        </member>
        <member name="T:Ext.list.Column">
            <summary>
            @class Ext.list.Column
            <p>This class encapsulates column configuration data to be used in the initialization of a
            {@link Ext.list.ListView ListView}.</p>
            <p>While subclasses are provided to render data in different ways, this class renders a passed
            data field unchanged and is usually used for textual columns.</p>
            </summary>
        </member>
        <member name="M:Ext.list.Column.#ctor(System.Object)">
            <summary>
            @cfg {String} dataIndex <p><b>Required</b>. The name of the field in the
            ListViews's {@link Ext.data.Store}'s {@link Ext.data.Record} definition from
            which to draw the column's value.</p>
            </summary>
        </member>
        <member name="P:Ext.list.Column.align">
            <summary>
            @cfg {String} align
            Set the CSS text-align property of the column. Defaults to <tt>'left'</tt>.
            </summary>
        </member>
        <member name="P:Ext.list.Column.cls">
            <summary>
            @cfg {String} cls Optional. This option can be used to add a CSS class to the cell of each
            row for this column.
            </summary>
        </member>
        <member name="P:Ext.list.Column.header">
            <summary>
            @cfg {String} header Optional. The header text to be used as innerHTML
            (html tags are accepted) to display in the ListView.  <b>Note</b>: to
            have a clickable header with no text displayed use <tt>'&#160;'</tt>.
            </summary>
        </member>
        <member name="P:Ext.list.Column.isColumn">
            <summary>
            @private
            @cfg {Boolean} isColumn
            Used by ListView constructor method to avoid reprocessing a Column
            if <code>isColumn</code> is not set ListView will recreate a new Ext.list.Column
            Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.list.Column.width">
            <summary>
            @cfg {Number} width Optional. Percentage of the container width
            this column should be allocated.  Columns that have no width specified will be
            allocated with an equal percentage to fill 100% of the container width.  To easily take
            advantage of the full container width, leave the width of at least one column undefined.
            Note that if you do not want to take up the full width of the container, the width of
            every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="M:Ext.list.BooleanColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} undefinedText
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumn.falseText">
            <summary>
            @cfg {String} falseText
            The string returned by the renderer when the column value is falsey (but not undefined) (defaults to
            <tt>'false'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumn.trueText">
            <summary>
            @cfg {String} trueText
            The string returned by the renderer when the column value is not falsey (defaults to <tt>'true'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumn.undefinedText">
            <summary>
            @cfg {String} undefinedText
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumnConfig.falseText">
            <summary>
            The string returned by the renderer when the column value is falsey (but not undefined) (defaults to
            <tt>'false'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumnConfig.trueText">
            <summary>
            The string returned by the renderer when the column value is not falsey (defaults to <tt>'true'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.BooleanColumnConfig.undefinedText">
            <summary>
            The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.align">
            <summary>
            Set the CSS text-align property of the column. Defaults to <tt>'left'</tt>.
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.cls">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each
            row for this column.
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.header">
            <summary>
            Optional. The header text to be used as innerHTML
            (html tags are accepted) to display in the ListView.  <b>Note</b>: to
            have a clickable header with no text displayed use <tt>'&#160;'</tt>.
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.isColumn">
            <summary>
            Used by ListView constructor method to avoid reprocessing a Column
            if <code>isColumn</code> is not set ListView will recreate a new Ext.list.Column
            Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.tpl">
            <summary>
            Optional. Specify a string to pass as the
            configuration string for {@link Ext.XTemplate}.  By default an {@link Ext.XTemplate}
            will be implicitly created using the <tt>dataIndex</tt>.
            </summary>
        </member>
        <member name="P:Ext.list.ColumnConfig.width">
            <summary>
            Optional. Percentage of the container width
            this column should be allocated.  Columns that have no width specified will be
            allocated with an equal percentage to fill 100% of the container width.  To easily take
            advantage of the full container width, leave the width of at least one column undefined.
            Note that if you do not want to take up the full width of the container, the width of
            every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="T:Ext.list.ColumnResizer">
            <summary>
            @class Ext.list.ColumnResizer
            @extends Ext.util.Observable
            <p>Supporting Class for Ext.list.ListView</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.list.ColumnResizer.#ctor(System.Object)">
            <summary>
            @cfg {Number} minPct The minimum percentage to allot for any column (defaults to <tt>.05</tt>)
            </summary>
        </member>
        <member name="P:Ext.list.ColumnResizer.minPct">
            <summary>
            @cfg {Number} minPct The minimum percentage to allot for any column (defaults to <tt>.05</tt>)
            </summary>
        </member>
        <member name="P:Ext.list.ColumnResizerConfig.minPct">
            <summary>
            The minimum percentage to allot for any column (defaults to <tt>.05</tt>)
            </summary>
        </member>
        <member name="T:Ext.list.DateColumn">
            <summary>
            @class Ext.list.DateColumn
            @extends Ext.list.Column
            <p>A Column definition class which renders a passed date according to the default locale, or a configured
            {@link #format}. See the {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column}
            for more details.</p>
            </summary>
        </member>
        <member name="M:Ext.list.DateColumn.#ctor(System.Object)">
            <summary>
            @class Ext.list.DateColumn
            @extends Ext.list.Column
            <p>A Column definition class which renders a passed date according to the default locale, or a configured
            {@link #format}. See the {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column}
            for more details.</p>
            </summary>
        </member>
        <member name="P:Ext.list.DateColumn.format">
            <summary>
            @class Ext.list.DateColumn
            @extends Ext.list.Column
            <p>A Column definition class which renders a passed date according to the default locale, or a configured
            {@link #format}. See the {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column}
            for more details.</p>
            </summary>
        </member>
        <member name="T:Ext.list.ListView">
            <summary>
            @class Ext.list.ListView
            @extends Ext.DataView
            <p>Ext.list.ListView is a fast and light-weight implentation of a
            {@link Ext.grid.GridPanel Grid} like view with the following characteristics:</p>
            <div class="mdetail-params"><ul>
            <li>resizable columns</li>
            <li>selectable</li>
            <li>column widths are initially proportioned by percentage based on the container
            width and number of columns</li>
            <li>uses templates to render the data in any required format</li>
            <li>no horizontal scrolling</li>
            <li>no editing</li>
            </ul></div>
            <p>Example usage:</p>
            <pre><code>
            // consume JSON of this form:
            {
            "images":[
            {
            "name":"dance_fever.jpg",
            "size":2067,
            "lastmod":1236974993000,
            "url":"images\/thumbs\/dance_fever.jpg"
            },
            {
            "name":"zack_sink.jpg",
            "size":2303,
            "lastmod":1236974993000,
            "url":"images\/thumbs\/zack_sink.jpg"
            }
            ]
            }
            var store = new Ext.data.JsonStore({
            url: 'get-images.php',
            root: 'images',
            fields: [
            'name', 'url',
            {name:'size', type: 'float'},
            {name:'lastmod', type:'date', dateFormat:'timestamp'}
            ]
            });
            store.load();
            var listView = new Ext.list.ListView({
            store: store,
            multiSelect: true,
            emptyText: 'No images to display',
            reserveScrollOffset: true,
            columns: [{
            header: 'File',
            width: .5,
            dataIndex: 'name'
            },{
            header: 'Last Modified',
            width: .35,
            dataIndex: 'lastmod',
            tpl: '{lastmod:date("m-d h:i a")}'
            },{
            header: 'Size',
            dataIndex: 'size',
            tpl: '{size:fileSize}', // format using Ext.util.Format.fileSize()
            align: 'right'
            }]
            });
            // put it in a Panel so it looks pretty
            var panel = new Ext.Panel({
            id:'images-view',
            width:425,
            height:250,
            collapsible:true,
            layout:'fit',
            title:'Simple ListView <i>(0 items selected)</i>',
            items: listView
            });
            panel.render(document.body);
            // little bit of feedback
            listView.on('selectionchange', function(view, nodes){
            var l = nodes.length;
            var s = l != 1 ? 's' : '';
            panel.setTitle('Simple ListView <i>('+l+' item'+s+' selected)</i>');
            });
            </code></pre>
            @constructor
            @param {Object} config
            @xtype listview
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.list.ListView.collectData" -->
        <member name="M:Ext.list.ListView.initComponent">
            <summary>
            IE has issues when setting percentage based widths to 100%. Default to 99.
            </summary>
        </member>
        <member name="P:Ext.list.ListView.columnResize">
            <summary>
            @cfg {Boolean/Object} columnResize
            Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.ColumnResizer}
            to enable the columns to be resizable (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.ListView.columnSort">
            <summary>
            @cfg {Boolean/Object} columnSort
            Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.Sorter}
            to enable the columns to be sortable (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.ListView.itemSelector">
            <summary>
            @cfg {String} itemSelector
            Defaults to <tt>'dl'</tt> to work with the preconfigured <b><tt>{@link Ext.DataView#tpl tpl}</tt></b>.
            This setting specifies the CSS selector (e.g. <tt>div.some-class</tt> or <tt>span:first-child</tt>)
            that will be used to determine what nodes the ListView will be working with.
            </summary>
        </member>
        <member name="P:Ext.list.ListView.overClass">
            <summary>
            @cfg {String} overClass The CSS class applied when over a row (defaults to
            <tt>'x-list-over'</tt>). An example overriding the default styling:
            <pre><code>
            .x-list-over {background-color: orange;}
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="P:Ext.list.ListView.selectedClass">
            <summary>
            @cfg {String} selectedClass The CSS class applied to a selected row (defaults to
            <tt>'x-list-selected'</tt>). An example overriding the default styling:
            <pre><code>
            .x-list-selected {background-color: yellow;}
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.columnResize">
            <summary>
            Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.ColumnResizer}
            to enable the columns to be resizable (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.columns">
            <summary>
            An array of column configuration objects, for example:
            <pre><code>
            {
            align: 'right',
            dataIndex: 'size',
            header: 'Size',
            tpl: '{size:fileSize}',
            width: .35
            }
            </code></pre>
            Acceptable properties for each column configuration object are:
            <div class="mdetail-params"><ul>
            <li><b><tt>align</tt></b> : String<div class="sub-desc">Set the CSS text-align property
            of the column. Defaults to <tt>'left'</tt>.</div></li>
            <li><b><tt>dataIndex</tt></b> : String<div class="sub-desc">See {@link Ext.grid.Column}.
            {@link Ext.grid.Column#dataIndex dataIndex} for details.</div></li>
            <li><b><tt>header</tt></b> : String<div class="sub-desc">See {@link Ext.grid.Column}.
            {@link Ext.grid.Column#header header} for details.</div></li>
            <li><b><tt>tpl</tt></b> : String<div class="sub-desc">Specify a string to pass as the
            configuration string for {@link Ext.XTemplate}.  By default an {@link Ext.XTemplate}
            will be implicitly created using the <tt>dataIndex</tt>.</div></li>
            <li><b><tt>width</tt></b> : Number<div class="sub-desc">Percentage of the container width
            this column should be allocated.  Columns that have no width specified will be
            allocated with an equal percentage to fill 100% of the container width.  To easily take
            advantage of the full container width, leave the width of at least one column undefined.
            Note that if you do not want to take up the full width of the container, the width of
            every column needs to be explicitly defined.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.columnSort">
            <summary>
            Specify <tt>true</tt> or specify a configuration object for {@link Ext.list.ListView.Sorter}
            to enable the columns to be sortable (defaults to <tt>true</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.hideHeaders">
            <summary>
            <tt>true</tt> to hide the {@link #internalTpl header row} (defaults to <tt>false</tt> so
            the {@link #internalTpl header row} will be shown).
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.internalTpl">
            <summary>
            The template to be used for the header row.  See {@link #tpl} for more details.
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.itemSelector">
            <summary>
            Defaults to <tt>'dl'</tt> to work with the preconfigured <b><tt>{@link Ext.DataView#tpl tpl}</tt></b>.
            This setting specifies the CSS selector (e.g. <tt>div.some-class</tt> or <tt>span:first-child</tt>)
            that will be used to determine what nodes the ListView will be working with.
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.overClass">
            <summary>
            The CSS class applied when over a row (defaults to
            <tt>'x-list-over'</tt>). An example overriding the default styling:
            <pre><code>
            .x-list-over {background-color: orange;}
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.reserveScrollOffset">
            <summary>
            By default will defer accounting for the configured <b><tt>{@link #scrollOffset}</tt></b>
            for 10 milliseconds.  Specify <tt>true</tt> to account for the configured
            <b><tt>{@link #scrollOffset}</tt></b> immediately.
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.scrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to
            <tt>undefined</tt>). If an explicit value isn't specified, this will be automatically
            calculated.
            </summary>
        </member>
        <member name="P:Ext.list.ListViewConfig.selectedClass">
            <summary>
            The CSS class applied to a selected row (defaults to
            <tt>'x-list-selected'</tt>). An example overriding the default styling:
            <pre><code>
            .x-list-selected {background-color: yellow;}
            </code></pre>
            @type String
            </summary>
        </member>
        <member name="T:Ext.list.NumberColumn">
            <summary>
            @class Ext.list.NumberColumn
            @extends Ext.list.Column
            <p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the
            {@link Ext.list.Column#xtype xtype} config option of {@link Ext.list.Column} for more details.</p>
            </summary>
        </member>
        <member name="M:Ext.list.NumberColumn.#ctor(System.Object)">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.NumberColumn.format">
            <summary>
            @cfg {String} format
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="P:Ext.list.NumberColumnConfig.format">
            <summary>
            A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
            (defaults to <tt>'0,000.00'</tt>).
            </summary>
        </member>
        <member name="T:Ext.list.Sorter">
            <summary>
            @class Ext.list.Sorter
            @extends Ext.util.Observable
            <p>Supporting Class for Ext.list.ListView</p>
            @constructor
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.list.Sorter.#ctor(System.Object)">
            <summary>
            @cfg {Array} sortClasses
            The CSS classes applied to a header when it is sorted. (defaults to <tt>["sort-asc", "sort-desc"]</tt>)
            </summary>
        </member>
        <member name="T:Ext.menu.BaseItem">
            <summary>
            @class Ext.menu.BaseItem
            @extends Ext.Component
            The base class for all items that render into menus.  BaseItem provides default rendering, activated state
            management and base configuration options shared by all menu components.
            @constructor
            Creates a new BaseItem
            @param {Object} config Configuration options
            @xtype menubaseitem
            </summary>
        </member>
        <member name="M:Ext.menu.BaseItem.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}
            config property).  If an existing handler is already registered, it will be unregistered for you.
            @param {Function} handler The function that should be called on click
            @param {Object} scope The scope (<code>this</code> reference) in which the handler function is executed. Defaults to this menu item.
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItem.activeClass">
            <summary>
            @cfg {String} activeClass The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItem.canActivate">
            <summary>
            @cfg {Boolean} canActivate True if this item can be visually activated (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItem.clickHideDelay">
            <summary>
            @cfg {Number} clickHideDelay Length of time in milliseconds to wait before hiding after a click (defaults to 1)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItem.hideOnClick">
            <summary>
            @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.activeClass">
            <summary>
            The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.canActivate">
            <summary>
            True if this item can be visually activated (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.clickHideDelay">
            <summary>
            Length of time in milliseconds to wait before hiding after a click (defaults to 1)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.handler">
            <summary>
            A function that will handle the click event of this menu item (optional).
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>b</code> : Item<div class="sub-desc">This menu Item.</div></li>
            <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.hideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.menu.BaseItemConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the handler function will be called.
            </summary>
        </member>
        <member name="T:Ext.menu.CheckItem">
            <summary>
            @class Ext.menu.CheckItem
            @extends Ext.menu.Item
            Adds a menu item that contains a checkbox by default, but can also be part of a radio group.
            @constructor
            Creates a new CheckItem
            @param {Object} config Configuration options
            @xtype menucheckitem
            </summary>
        </member>
        <member name="T:Ext.menu.Item">
            <summary>
            @class Ext.menu.Item
            @extends Ext.menu.BaseItem
            A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
            display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific
            activation and click handling.
            @constructor
            Creates a new Item
            @param {Object} config Configuration options
            @xtype menuitem
            </summary>
        </member>
        <member name="M:Ext.menu.Item.setIconClass(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class to apply to the item's icon element
            @param {String} cls The CSS class to apply
            </summary>
        </member>
        <member name="M:Ext.menu.Item.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the text to display in this menu item
            @param {String} text The text to display
            </summary>
        </member>
        <member name="P:Ext.menu.Item.altText">
            <summary>
            @cfg {String} altText The altText to use for the icon, if it exists. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.Item.canActivate">
            <summary>
            @cfg {Boolean} canActivate True if this item can be visually activated (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.menu.Item.itemCls">
            <summary>
            @cfg {String} itemCls The default CSS class to use for menu items (defaults to 'x-menu-item')
            </summary>
        </member>
        <member name="P:Ext.menu.Item.showDelay">
            <summary>
            @cfg {Number} showDelay Length of time in milliseconds to wait before showing this item (defaults to 200)
            </summary>
        </member>
        <member name="M:Ext.menu.CheckItem.setChecked(System.Boolean,System.Boolean)">
            <summary>
            Set the checked state of this item
            @param {Boolean} checked The new checked value
            @param {Boolean} suppressEvent (optional) True to prevent the checkchange event from firing (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItem.checked">
            <summary>
            @cfg {Boolean} checked True to initialize this checkbox as checked (defaults to false).  Note that
            if this checkbox is part of a radio group (group = true) only the first item in the group that is
            initialized with checked = true will be rendered as checked.
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItem.groupClass">
            <summary>
            @cfg {String} groupClass The default CSS class to use for radio group check items (defaults to "x-menu-group-item")
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItem.itemCls">
            <summary>
            @cfg {String} itemCls The default CSS class to use for check items (defaults to "x-menu-item x-menu-check-item")
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.checked">
            <summary>
            True to initialize this checkbox as checked (defaults to false).  Note that
            if this checkbox is part of a radio group (group = true) only the first item in the group that is
            initialized with checked = true will be rendered as checked.
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.group">
            <summary>
            All check items with the same group name will automatically be grouped into a single-select
            radio button group (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.groupClass">
            <summary>
            The default CSS class to use for radio group check items (defaults to "x-menu-group-item")
            </summary>
        </member>
        <member name="P:Ext.menu.CheckItemConfig.itemCls">
            <summary>
            The default CSS class to use for check items (defaults to "x-menu-item x-menu-check-item")
            </summary>
        </member>
        <member name="T:Ext.menu.ColorMenu">
            <summary>
            @class Ext.menu.ColorMenu
            @extends Ext.menu.Menu
            <p>A menu containing a {@link Ext.ColorPalette} Component.</p>
            <p>Notes:</p><div class="mdetail-params"><ul>
            <li>Although not listed here, the <b>constructor</b> for this class
            accepts all of the configuration options of <b>{@link Ext.ColorPalette}</b>.</li>
            <li>If subclassing ColorMenu, any configuration options for the ColorPalette must be
            applied to the <tt><b>initialConfig</b></tt> property of the ColorMenu.
            Applying {@link Ext.ColorPalette ColorPalette} configuration settings to
            <b><tt>this</tt></b> will <b>not</b> affect the ColorPalette's configuration.</li>
            </ul></div> *
            @xtype colormenu
            </summary>
        </member>
        <member name="T:Ext.menu.Menu">
            <summary>
            @class Ext.menu.Menu
            @extends Ext.Container
            <p>A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class
            when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).</p>
            <p>Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.</p>
            <p>To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}
            specify <tt>iconCls: 'no-icon'</tt>.  This reserves a space for an icon, and indents the Component in line
            with the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}
            for an example.</p>
            <p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with
            <b><tt>{@link #floating}:false</tt></b>, a Menu may be used as child of a Container.</p>
            *
            @xtype menu
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.addElement(System.Object)">
            <summary>
            Adds an {@link Ext.Element} object to the menu
            @param {Mixed} el The element or DOM node to add, or its id
            @return {Ext.menu.Item} The menu item that was added
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.addItem(Ext.menu.Item)">
            <summary>
            Adds an existing object based on {@link Ext.menu.BaseItem} to the menu
            @param {Ext.menu.Item} item The menu item to add
            @return {Ext.menu.Item} The menu item that was added
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.addMenuItem(System.Object)">
            <summary>
            Creates a new {@link Ext.menu.Item} based an the supplied config object and adds it to the menu
            @param {Object} config A MenuItem config object
            @return {Ext.menu.Item} The menu item that was added
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.addSeparator">
            <summary>
            Adds a separator bar to the menu
            @return {Ext.menu.Item} The menu item that was added
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.addText(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a new {@link Ext.menu.TextItem} with the supplied text and adds it to the menu
            @param {String} text The text to display in the menu item
            @return {Ext.menu.Item} The menu item that was added
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.hide(System.Boolean)">
            <summary>
            Hides this menu and optionally all parent menus
            @param {Boolean} deep (optional) True to hide all parent menus recursively, if any (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.menu.Menu.show(System.Object,SharpKit.JavaScript.JsString,Ext.menu.Menu)">
            <summary>
            If <code>{@link #floating}=true</code>, shows this menu relative to
            another element using {@link #showat}, otherwise uses {@link Ext.Component#show}.
            @param {Mixed} element The element to align to
            @param {String} position (optional) The {@link Ext.Element#alignTo} anchor position to use in aligning to
            the element (defaults to this.defaultAlign)
            @param {Ext.menu.Menu} parentMenu (optional) This menu's parent menu, if applicable (defaults to undefined)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.menu.Menu.showAt(SharpKit.JavaScript.JsArray,Ext.menu.Menu)" -->
        <member name="P:Ext.menu.Menu.allowOtherMenus">
            <summary>
            @cfg {Boolean} allowOtherMenus True to allow multiple menus to be displayed at the same time (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.defaultAlign">
            <summary>
            @cfg {String} defaultAlign The default {@link Ext.Element#alignTo} anchor position value for this menu
            relative to its element of origin (defaults to 'tl-bl?')
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.enableScrolling">
            <summary>
            @cfg {Boolean} enableScrolling True to allow the menu container to have scroller controls if the menu is too long (defaults to true).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.menu.Menu.floating" -->
        <member name="P:Ext.menu.Menu.hideMode">
            <summary>
            @cfg {String/Object} layout
            This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).
            Developers <i>may</i> override this configuration option if another layout is required.
            See {@link Ext.Container#layout} for additional information.
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.ignoreParentClicks">
            <summary>
            @cfg {Boolean} ignoreParentClicks True to ignore clicks on any item in this menu that is a parent item (displays
            a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.layout">
            <summary>
            @cfg {String/Object} layout
            This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).
            Developers <i>may</i> override this configuration option if another layout is required.
            See {@link Ext.Container#layout} for additional information.
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.maxHeight">
            <summary>
            @cfg {Number} maxHeight The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.minWidth">
            <summary>
            @cfg {Number} minWidth The minimum width of the menu in pixels (defaults to 120)
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.plain">
            <summary>
            @cfg {Boolean} plain
            True to remove the incised line down the left side of the menu. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.scrollerHeight">
            <summary>
            @cfg {String/Object} layout
            This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).
            Developers <i>may</i> override this configuration option if another layout is required.
            See {@link Ext.Container#layout} for additional information.
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.scrollIncrement">
            <summary>
            @cfg {Number} scrollIncrement The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.shadow">
            <summary>
            @cfg {Boolean/String} shadow True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop'
            for bottom-right shadow (defaults to 'sides')
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.showSeparator">
            <summary>
            @cfg {Boolean} showSeparator True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.subMenuAlign">
            <summary>
            @cfg {String} subMenuAlign The {@link Ext.Element#alignTo} anchor position value to use for submenus of
            this menu (defaults to 'tl-tr?')
            </summary>
        </member>
        <member name="P:Ext.menu.Menu.zIndex">
            <summary>
            @cfg {Number} zIndex
            zIndex to use when the menu is floating.
            </summary>
        </member>
        <member name="M:Ext.menu.ColorMenu.initComponent">
            <summary>
            @event itemclick
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenu.cls">
            <summary>
            @cfg {Boolean} hideOnClick
            False to continue showing the menu after a color is selected, defaults to true.
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenu.enableScrolling">
            <summary>
            @cfg {Boolean} enableScrolling
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenu.hideOnClick">
            <summary>
            @cfg {Boolean} hideOnClick
            False to continue showing the menu after a color is selected, defaults to true.
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenu.paletteId">
            <summary>
            @cfg {String} paletteId
            An id to assign to the underlying color palette. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.enableScrolling">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.handler">
            <summary>
            Optional. A function that will handle the select event of this menu.
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>palette</code> : ColorPalette<div class="sub-desc">The {@link #palette Ext.ColorPalette}.</div></li>
            <li><code>color</code> : String<div class="sub-desc">The 6-digit color hex code (without the # symbol).</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.maxHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.paletteId">
            <summary>
            An id to assign to the underlying color palette. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
            function will be called.  Defaults to this ColorMenu instance.
            </summary>
        </member>
        <member name="P:Ext.menu.ColorMenuConfig.scrollIncrement">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.menu.DateMenu">
            <summary>
            @class Ext.menu.DateMenu
            @extends Ext.menu.Menu
            <p>A menu containing an {@link Ext.DatePicker} Component.</p>
            <p>Notes:</p><div class="mdetail-params"><ul>
            <li>Although not listed here, the <b>constructor</b> for this class
            accepts all of the configuration options of <b>{@link Ext.DatePicker}</b>.</li>
            <li>If subclassing DateMenu, any configuration options for the DatePicker must be
            applied to the <tt><b>initialConfig</b></tt> property of the DateMenu.
            Applying {@link Ext.DatePicker DatePicker} configuration settings to
            <b><tt>this</tt></b> will <b>not</b> affect the DatePicker's configuration.</li>
            </ul></div>
            @xtype datemenu
            </summary>
        </member>
        <member name="M:Ext.menu.DateMenu.initComponent">
            <summary>
            @event itemclick
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenu.cls">
            <summary>
            The {@link Ext.DatePicker} instance for this DateMenu
            @property picker
            @type DatePicker
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenu.enableScrolling">
            <summary>
            @cfg {Boolean} enableScrolling
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenu.hideOnClick">
            <summary>
            @cfg {Boolean} hideOnClick
            False to continue showing the menu after a date is selected, defaults to true.
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenu.pickerId">
            <summary>
            @cfg {String} pickerId
            An id to assign to the underlying date picker. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.enableScrolling">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.handler">
            <summary>
            Optional. A function that will handle the select event of this menu.
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>picker</code> : DatePicker<div class="sub-desc">The Ext.DatePicker.</div></li>
            <li><code>date</code> : Date<div class="sub-desc">The selected date.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.hideOnClick">
            <summary>
            False to continue showing the menu after a date is selected, defaults to true.
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.maxHeight">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.pickerId">
            <summary>
            An id to assign to the underlying date picker. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
            function will be called.  Defaults to this DateMenu instance.
            </summary>
        </member>
        <member name="P:Ext.menu.DateMenuConfig.scrollIncrement">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.altText">
            <summary>
            The altText to use for the icon, if it exists. Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.canActivate">
            <summary>
            True if this item can be visually activated (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.href">
            <summary>
            The href attribute to use for the underlying anchor link (defaults to '#').
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.hrefTarget">
            <summary>
            The target attribute to use for the underlying anchor link (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.icon">
            <summary>
            The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL).  If
            icon is specified {@link #iconCls} should not be.
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.iconCls">
            <summary>
            A CSS class that specifies a background image that will be used as the icon for
            this item (defaults to '').  If iconCls is specified {@link #icon} should not be.
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.itemCls">
            <summary>
            The default CSS class to use for menu items (defaults to 'x-menu-item')
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.menu">
            <summary>
            (optional) Either an instance of {@link Ext.menu.Menu} or the config object for an
            {@link Ext.menu.Menu} which acts as the submenu when this item is activated.
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.showDelay">
            <summary>
            Length of time in milliseconds to wait before showing this item (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.menu.ItemConfig.text">
            <summary>
            The text to display in this item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.allowOtherMenus">
            <summary>
            True to allow multiple menus to be displayed at the same time (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.defaultAlign">
            <summary>
            The default {@link Ext.Element#alignTo} anchor position value for this menu
            relative to its element of origin (defaults to 'tl-bl?')
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.defaultOffsets">
            <summary>
            An array specifying the [x, y] offset in pixels by which to
            change the default Menu popup position after aligning according to the {@link #defaultAlign}
            configuration. Defaults to <tt>[0, 0]</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.defaults">
            <summary>
            A config object that will be applied to all items added to this container either via the {@link #items}
            config or via the {@link #add} method.  The defaults config can contain any number of
            name/value property pairs to be added to each item, and should be valid for the types of items
            being added to the menu.
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.enableScrolling">
            <summary>
            True to allow the menu container to have scroller controls if the menu is too long (defaults to true).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.menu.MenuConfig.floating" -->
        <member name="P:Ext.menu.MenuConfig.ignoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays
            a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.items">
            <summary>
            An array of items to be added to this menu. Menus may contain either {@link Ext.menu.Item menu items},
            or general {@link Ext.Component Component}s.
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.maxHeight">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.minWidth">
            <summary>
            The minimum width of the menu in pixels (defaults to 120)
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.plain">
            <summary>
            True to remove the incised line down the left side of the menu. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.scrollIncrement">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.shadow">
            <summary>
            True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop'
            for bottom-right shadow (defaults to 'sides')
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.showSeparator">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.subMenuAlign">
            <summary>
            The {@link Ext.Element#alignTo} anchor position value to use for submenus of
            this menu (defaults to 'tl-tr?')
            </summary>
        </member>
        <member name="P:Ext.menu.MenuConfig.zIndex">
            <summary>
            zIndex to use when the menu is floating.
            </summary>
        </member>
        <member name="T:Ext.menu.Separator">
            <summary>
            @class Ext.menu.Separator
            @extends Ext.menu.BaseItem
            Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
            add one of these by using "-" in you call to add() or in your items config rather than creating one directly.
            @constructor
            @param {Object} config Configuration options
            @xtype menuseparator
            </summary>
        </member>
        <member name="P:Ext.menu.Separator.activeClass">
            <summary>
            @cfg {String} activeClass
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.Separator.hideOnClick">
            <summary>
            @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.Separator.itemCls">
            <summary>
            @cfg {String} itemCls The default CSS class to use for separators (defaults to "x-menu-sep")
            </summary>
        </member>
        <member name="P:Ext.menu.SeparatorConfig.activeClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.menu.SeparatorConfig.hideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.SeparatorConfig.itemCls">
            <summary>
            The default CSS class to use for separators (defaults to "x-menu-sep")
            </summary>
        </member>
        <member name="T:Ext.menu.TextItem">
            <summary>
            @class Ext.menu.TextItem
            @extends Ext.menu.BaseItem
            Adds a static text string to a menu, usually used as either a heading or group separator.
            @constructor
            Creates a new TextItem
            @param {Object/String} config If config is a string, it is used as the text to display, otherwise it
            is applied as a config object (and should contain a <tt>text</tt> property).
            @xtype menutextitem
            </summary>
        </member>
        <member name="M:Ext.menu.TextItem.#ctor(System.Object)">
            <summary>
            @cfg {String} itemCls The default CSS class to use for text items (defaults to "x-menu-text")
            </summary>
        </member>
        <member name="P:Ext.menu.TextItem.hideOnClick">
            <summary>
            @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.TextItem.itemCls">
            <summary>
            @cfg {String} itemCls The default CSS class to use for text items (defaults to "x-menu-text")
            </summary>
        </member>
        <member name="P:Ext.menu.TextItemConfig.hideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.menu.TextItemConfig.itemCls">
            <summary>
            The default CSS class to use for text items (defaults to "x-menu-text")
            </summary>
        </member>
        <member name="P:Ext.menu.TextItemConfig.text">
            <summary>
            The text to display for this item (defaults to '')
            </summary>
        </member>
        <member name="T:Ext.slider.MultiSlider">
            <summary>
            @class Ext.slider.MultiSlider
            @extends Ext.BoxComponent
            Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation. Can be added as an item to any container. Example usage:
            <pre>
            new Ext.Slider({
            renderTo: Ext.getBody(),
            width: 200,
            value: 50,
            increment: 10,
            minValue: 0,
            maxValue: 100
            });
            </pre>
            Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:
            <pre>
            new Ext.Slider({
            renderTo: Ext.getBody(),
            width: 200,
            values: [25, 50, 75],
            minValue: 0,
            maxValue: 100,
            //this defaults to true, setting to false allows the thumbs to pass each other
            {@link #constrainThumbs}: false
            });
            </pre>
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.addThumb(SharpKit.JavaScript.JsNumber)">
            <summary>
            Creates a new thumb and adds it to the slider
            @param {Number} value The initial value to set on the thumb. Defaults to 0
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.doSnap(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            If using snapping, this takes a desired new value and returns the closest snapped
            value to it
            @param {Number} value The unsnapped value
            @return {Number} The value of the nearest snap target
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.getNearest(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Returns the nearest thumb to a click event, along with its distance
            @param {Object} local Object containing top and left values from a click event
            @param {String} prop The property of local to compare on. Use 'left' for horizontal sliders, 'top' for vertical ones
            @return {Object} The closest thumb object and its distance from the click event
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.getRatio">
            <summary>
            @private
            Returns the ratio of pixels to mapped values. e.g. if the slider is 200px wide and maxValue - minValue is 100,
            the ratio is 2
            @return {Number} The ratio of pixels to mapped values
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.getValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the current value of the slider
            @param {Number} index The index of the thumb to return a value for
            @return {Number} The current value of the slider
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.getValues">
            <summary>
            Returns an array of values - one for the location of each thumb
            @return {Array} The set of thumb values
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.initEvents">
            <summary>
            @private
            Adds keyboard and mouse listeners on this.el. Ignores click events on the internal focus element.
            Creates a new DragTracker which is used to control what happens when the user drags the thumb around.
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.moveThumb(SharpKit.JavaScript.JsNumber,System.Object,System.Object)">
            <summary>
            @private
            @param {Number} index Index of the thumb to move
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.normalizeValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Returns a snapped, constrained value when given a desired value
            @param {Number} value Raw number value
            @return {Number} The raw value rounded to the correct d.p. and constrained within the set max and min values
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.onClickChange(System.Object)">
            <summary>
            @private
            Moves the thumb to the indicated position. Note that a Vertical implementation is provided in Ext.slider.Vertical.
            Only changes the value if the click was within this.clickRange.
            @param {Object} local Object containing top and left values for the click event.
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.onKeyDown(System.Object)">
            <summary>
            @private
            Handler for any keypresses captured by the slider. If the key is UP or RIGHT, the thumb is moved along to the right
            by this.keyIncrement. If DOWN or LEFT it is moved left. Pressing CTRL moves the slider to the end in either direction
            @param {Ext.EventObject} e The Event object
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.onMouseDown(System.Object)">
            <summary>
            @private
            Mousedown handler for the slider. If the clickToChange is enabled and the click was not on the draggable 'thumb',
            this calculates the new value of the slider and tells the implementation (Horizontal or Vertical) to move the thumb
            @param {Ext.EventObject} e The click event
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.promoteThumb(Ext.slider.Thumb)">
            <summary>
            @private
            Moves the given thumb above all other by increasing its z-index. This is called when as drag
            any thumb, so that the thumb that was just dragged is always at the highest z-index. This is
            required when the thumbs are stacked on top of each other at one of the ends of the slider's
            range, which can result in the user not being able to move any of them.
            @param {Ext.slider.Thumb} topThumb The thumb to move to the top
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.reverseValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Given a pixel location along the slider, returns the mapped slider value for that pixel.
            E.g. if we have a slider 200px wide with minValue = 100 and maxValue = 500, reverseValue(50)
            returns 200
            @param {Number} pos The position along the slider to return a mapped value for
            @return {Number} The mapped value for the given position
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.setMaxValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the maximum value for the slider instance. If the current value is more than the
            maximum value, the current value will be changed.
            @param {Number} val The new maximum value
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.setMinValue(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the minimum value for the slider instance. If the current value is less than the
            minimum value, the current value will be changed.
            @param {Number} val The new minimum value
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.setValue(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean,System.Object)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within
            the minValue and maxValue.
            @param {Number} index Index of the thumb to move
            @param {Number} value The value to set the slider to. (This will be constrained within minValue and maxValue)
            @param {Boolean} animate Turn on or off animation, defaults to true
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.syncThumb">
            <summary>
            Synchronizes the thumb position to the proper proportion of the total component width based
            on the current slider {@link #value}.  This will be called automatically when the Slider
            is resized by a layout, but if it is rendered auto width, this method can be called from
            another resize handler to sync the Slider if necessary.
            </summary>
        </member>
        <member name="M:Ext.slider.MultiSlider.translateValue(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.animate">
            <summary>
            @cfg {Boolean} animate Turn on or off animation. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.clickToChange">
            <summary>
            @cfg {Boolean} clickToChange Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.constrainThumbs">
            <summary>
            @cfg {Boolean} constrainThumbs True to disallow thumbs from overlapping one another. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.decimalPrecision">
            <summary>
            @cfg {Number/Boolean} decimalPrecision
            <p>The number of decimal places to which to round the Slider's value. Defaults to 0.</p>
            <p>To disable rounding, configure as <tt><b>false</b></tt>.</p>
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.increment">
            <summary>
            @cfg {Number} increment How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.keyIncrement">
            <summary>
            @cfg {Number} keyIncrement How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.maxValue">
            <summary>
            @cfg {Number} maxValue The maximum value for the Slider. Defaults to 100.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.minValue">
            <summary>
            @cfg {Number} minValue The minimum value for the Slider. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.topThumbZIndex">
            <summary>
            @private
            @property topThumbZIndex
            @type Number
            The number used internally to set the z index of the top thumb (see promoteThumb for details)
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSlider.vertical">
            <summary>
            @cfg {Boolean} vertical Orient the Slider vertically rather than horizontally, defaults to false.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.animate">
            <summary>
            Turn on or off animation. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.clickToChange">
            <summary>
            Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.constrainThumbs">
            <summary>
            True to disallow thumbs from overlapping one another. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.decimalPrecision">
            <summary>
            <p>The number of decimal places to which to round the Slider's value. Defaults to 0.</p>
            <p>To disable rounding, configure as <tt><b>false</b></tt>.</p>
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.increment">
            <summary>
            How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.keyIncrement">
            <summary>
            How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.maxValue">
            <summary>
            The maximum value for the Slider. Defaults to 100.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.minValue">
            <summary>
            The minimum value for the Slider. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.value">
            <summary>
            The value to initialize the slider with. Defaults to minValue.
            </summary>
        </member>
        <member name="P:Ext.slider.MultiSliderConfig.vertical">
            <summary>
            Orient the Slider vertically rather than horizontally, defaults to false.
            </summary>
        </member>
        <member name="T:Ext.slider.SingleSlider">
            <summary>
            @class Ext.slider.SingleSlider
            @extends Ext.slider.MultiSlider
            Slider which supports vertical or horizontal orientation, keyboard adjustments,
            configurable snapping, axis clicking and animation. Can be added as an item to
            any container. Example usage:
            <pre><code>
            new Ext.slider.SingleSlider({
            renderTo: Ext.getBody(),
            width: 200,
            value: 50,
            increment: 10,
            minValue: 0,
            maxValue: 100
            });
            </code></pre>
            The class Ext.slider.SingleSlider is aliased to Ext.Slider for backwards compatibility.
            </summary>
        </member>
        <member name="M:Ext.slider.SingleSlider.#ctor(System.Object)">
            <summary>
            @class Ext.slider.SingleSlider
            @extends Ext.slider.MultiSlider
            Slider which supports vertical or horizontal orientation, keyboard adjustments,
            configurable snapping, axis clicking and animation. Can be added as an item to
            any container. Example usage:
            <pre><code>
            new Ext.slider.SingleSlider({
            renderTo: Ext.getBody(),
            width: 200,
            value: 50,
            increment: 10,
            minValue: 0,
            maxValue: 100
            });
            </code></pre>
            The class Ext.slider.SingleSlider is aliased to Ext.Slider for backwards compatibility.
            </summary>
        </member>
        <member name="M:Ext.slider.SingleSlider.getValue">
            <summary>
            Returns the current value of the slider
            @return {Number} The current value of the slider
            </summary>
        </member>
        <member name="M:Ext.slider.SingleSlider.setValue(SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within
            the minValue and maxValue.
            @param {Number} value The value to set the slider to. (This will be constrained within minValue and maxValue)
            @param {Boolean} animate Turn on or off animation, defaults to true
            </summary>
        </member>
        <member name="M:Ext.slider.SingleSlider.syncThumb">
            <summary>
            Synchronizes the thumb position to the proper proportion of the total component width based
            on the current slider {@link #value}.  This will be called automatically when the Slider
            is resized by a layout, but if it is rendered auto width, this method can be called from
            another resize handler to sync the Slider if necessary.
            </summary>
        </member>
        <member name="T:Ext.slider.Thumb">
            <summary>
            @class Ext.slider.Thumb
            @extends Object
            Represents a single thumb element on a Slider. This would not usually be created manually and would instead
            be created internally by an {@link Ext.slider.MultiSlider Ext.Slider}.
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.#ctor(System.Object)">
            <summary>
            @constructor
            @cfg {Ext.slider.MultiSlider} slider The Slider to render to (required)
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.destroy">
            <summary>
            @private
            Destroys the thumb
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.disable">
            <summary>
            Disables the thumb if it is currently enabled
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.enable">
            <summary>
            Enables the thumb if it is currently disabled
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.initEvents">
            <summary>
            Sets up an Ext.dd.DragTracker for this thumb
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.onBeforeDragStart(System.Object)">
            <summary>
            @private
            This is tied into the internal Ext.dd.DragTracker. If the slider is currently disabled,
            this returns false to disable the DragTracker too.
            @return {Boolean} False if the slider is currently disabled
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.onDrag(System.Object)">
            <summary>
            @private
            This is tied into the internal Ext.dd.DragTracker's onDrag template method. This is called every time
            the DragTracker detects a drag movement. It updates the Slider's value using the position of the drag
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.onDragEnd(System.Object)">
            <summary>
            @private
            This is tied to the internal Ext.dd.DragTracker's onEnd template method. Removes the drag CSS class and
            fires the 'changecomplete' event with the new value
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.onDragStart(System.Object)">
            <summary>
            @private
            This is tied into the internal Ext.dd.DragTracker's onStart template method. Adds the drag CSS class
            to the thumb and fires the 'dragstart' event
            </summary>
        </member>
        <member name="M:Ext.slider.Thumb.render">
            <summary>
            Renders the thumb into a slider
            </summary>
        </member>
        <member name="P:Ext.slider.Thumb.dragging">
            <summary>
            True while the thumb is in a drag operation
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.slider.ThumbConfig.constrain">
            <summary>
            True to constrain the thumb so that it cannot overlap its siblings
            </summary>
        </member>
        <member name="T:Ext.slider.Tip">
            <summary>
            @class Ext.slider.Tip
            @extends Ext.Tip
            Simple plugin for using an Ext.Tip with a slider to show the slider value. Example usage:
            <pre>
            new Ext.Slider({
            width: 214,
            minValue: 0,
            maxValue: 100,
            plugins: new Ext.slider.Tip()
            });
            </pre>
            Optionally provide your own tip text by overriding getText:
            <pre>
            new Ext.Slider({
            width: 214,
            minValue: 0,
            maxValue: 100,
            plugins: new Ext.slider.Tip({
            getText: function(thumb){
            return String.format('<b>{0}% complete</b>', thumb.value);
            }
            })
            });
            </pre>
            </summary>
        </member>
        <member name="M:Ext.slider.Tip.getText(Ext.slider.Thumb)">
            <summary>
            Used to create the text that appears in the Tip's body. By default this just returns
            the value of the Slider Thumb that the Tip is attached to. Override to customize.
            @param {Ext.slider.Thumb} thumb The Thumb that the Tip is attached to
            @return {String} The text to display in the tip
            </summary>
        </member>
        <member name="M:Ext.slider.Tip.onSlide(Ext.slider.MultiSlider,System.Object,Ext.slider.Thumb)">
            <summary>
            @private
            Called whenever a dragstart or drag event is received on the associated Thumb.
            Aligns the Tip with the Thumb's new position.
            @param {Ext.slider.MultiSlider} slider The slider
            @param {Ext.EventObject} e The Event object
            @param {Ext.slider.Thumb} thumb The thumb that the Tip is attached to
            </summary>
        </member>
        <member name="P:Ext.slider.Tip.minWidth">
            <summary>
            @class Ext.slider.Tip
            @extends Ext.Tip
            Simple plugin for using an Ext.Tip with a slider to show the slider value. Example usage:
            <pre>
            new Ext.Slider({
            width: 214,
            minValue: 0,
            maxValue: 100,
            plugins: new Ext.slider.Tip()
            });
            </pre>
            Optionally provide your own tip text by overriding getText:
            <pre>
            new Ext.Slider({
            width: 214,
            minValue: 0,
            maxValue: 100,
            plugins: new Ext.slider.Tip({
            getText: function(thumb){
            return String.format('<b>{0}% complete</b>', thumb.value);
            }
            })
            });
            </pre>
            </summary>
        </member>
        <member name="T:Ext.state.CookieProvider">
            <summary>
            @class Ext.state.CookieProvider
            @extends Ext.state.Provider
            The default Provider implementation which saves state via cookies.
            <br />Usage:
            <pre><code>
            var cp = new Ext.state.CookieProvider({
            path: "/cgi-bin/",
            expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
            domain: "extjs.com"
            });
            Ext.state.Manager.setProvider(cp);
            </code></pre>
            @cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
            @cfg {Date} expires The cookie expiration date (defaults to 7 days from now)
            @cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than
            your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include
            all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
            domain the page is running on including the 'www' like 'www.extjs.com')
            @cfg {Boolean} secure True if the site is using SSL (defaults to false)
            @constructor
            Create a new CookieProvider
            @param {Object} config The configuration object
            </summary>
        </member>
        <member name="T:Ext.state.Provider">
            <summary>
            @class Ext.state.Provider
            Abstract base class for state provider implementations. This class provides methods
            for encoding and decoding <b>typed</b> variables including dates and defines the
            Provider interface.
            </summary>
        </member>
        <member name="M:Ext.state.Provider.clear(SharpKit.JavaScript.JsString)">
            <summary>
            Clears a value from the state
            @param {String} name The key name
            </summary>
        </member>
        <member name="M:Ext.state.Provider.#ctor">
            <summary>
            @class Ext.state.Provider
            Abstract base class for state provider implementations. This class provides methods
            for encoding and decoding <b>typed</b> variables including dates and defines the
            Provider interface.
            </summary>
        </member>
        <member name="M:Ext.state.Provider.decodeValue(SharpKit.JavaScript.JsString)">
            <summary>
            Decodes a string previously encoded with {@link #encodeValue}.
            @param {String} value The value to decode
            @return {Mixed} The decoded value
            </summary>
        </member>
        <member name="M:Ext.state.Provider.encodeValue(System.Object)">
            <summary>
            Encodes a value including type information.  Decode with {@link #decodeValue}.
            @param {Mixed} value The value to encode
            @return {String} The encoded value
            </summary>
        </member>
        <member name="M:Ext.state.Provider.get(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Returns the current value for a key
            @param {String} name The key name
            @param {Mixed} defaultValue A default value to return if the key's value is not found
            @return {Mixed} The state data
            </summary>
        </member>
        <member name="M:Ext.state.Provider.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Sets the value for a key
            @param {String} name The key name
            @param {Mixed} value The value to set
            </summary>
        </member>
        <member name="M:Ext.state.CookieProvider.#ctor(System.Object)">
            <summary>
            @class Ext.state.CookieProvider
            @extends Ext.state.Provider
            The default Provider implementation which saves state via cookies.
            <br />Usage:
            <pre><code>
            var cp = new Ext.state.CookieProvider({
            path: "/cgi-bin/",
            expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
            domain: "extjs.com"
            });
            Ext.state.Manager.setProvider(cp);
            </code></pre>
            @cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
            @cfg {Date} expires The cookie expiration date (defaults to 7 days from now)
            @cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than
            your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include
            all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
            domain the page is running on including the 'www' like 'www.extjs.com')
            @cfg {Boolean} secure True if the site is using SSL (defaults to false)
            @constructor
            Create a new CookieProvider
            @param {Object} config The configuration object
            </summary>
        </member>
        <member name="P:Ext.state.CookieProviderConfig.domain">
            <summary>
            The domain to save the cookie for.  Note that you cannot specify a different domain than
            your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include
            all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
            domain the page is running on including the 'www' like 'www.extjs.com')
            </summary>
        </member>
        <member name="P:Ext.state.CookieProviderConfig.expires">
            <summary>
            The cookie expiration date (defaults to 7 days from now)
            </summary>
        </member>
        <member name="P:Ext.state.CookieProviderConfig.path">
            <summary>
            The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
            </summary>
        </member>
        <member name="P:Ext.state.CookieProviderConfig.secure">
            <summary>
            True if the site is using SSL (defaults to false)
            @constructor
            Create a new CookieProvider
            </summary>
        </member>
        <member name="T:Ext.tree.AsyncTreeNode">
            <summary>
            @class Ext.tree.AsyncTreeNode
            @extends Ext.tree.TreeNode
            @cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)
            @constructor
            @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
            </summary>
        </member>
        <member name="M:Ext.tree.AsyncTreeNode.#ctor(System.Object)">
            <summary>
            @class Ext.tree.AsyncTreeNode
            @extends Ext.tree.TreeNode
            @cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)
            @constructor
            @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
            </summary>
        </member>
        <member name="P:Ext.tree.AsyncTreeNodeConfig.loader">
            <summary>
            A TreeLoader to be used by this node (defaults to the loader defined on the tree)
            @constructor
            </summary>
        </member>
        <member name="T:Ext.tree.DefaultSelectionModel">
            <summary>
            @class Ext.tree.DefaultSelectionModel
            @extends Ext.util.Observable
            The default single selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.clearSelections(System.Boolean)">
            <summary>
            Clear all selections
            @param {Boolean} silent True to stop the selectionchange event from firing.
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.#ctor(System.Object)">
            <summary>
            @class Ext.tree.DefaultSelectionModel
            @extends Ext.util.Observable
            The default single selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.getSelectedNode">
            <summary>
            Get the selected node
            @return {TreeNode} The selected node
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.isSelected(System.Object)">
            <summary>
            Returns true if the node is selected
            @param {TreeNode} node The node to check
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.select(System.Object,System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.selectNext(System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.selectPrevious(System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.tree.DefaultSelectionModel.unselect(System.Object,System.Boolean)">
            <summary>
            Deselect a node.
            @param {TreeNode} node The node to unselect
            @param {Boolean} silent True to stop the selectionchange event from firing.
            </summary>
        </member>
        <member name="T:Ext.tree.MultiSelectionModel">
            <summary>
            @class Ext.tree.MultiSelectionModel
            @extends Ext.util.Observable
            Multi selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.clearSelections(System.Object)">
            <summary>
            Clear all selections
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.#ctor(System.Object)">
            <summary>
            @class Ext.tree.MultiSelectionModel
            @extends Ext.util.Observable
            Multi selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.getSelectedNodes">
            <summary>
            Returns an array of the selected nodes
            @return {Array}
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.isSelected(System.Object)">
            <summary>
            Returns true if the node is selected
            @param {TreeNode} node The node to check
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.select(System.Object,System.Object,System.Boolean)">
            <summary>
            Select a node.
            @param {TreeNode} node The node to select
            @param {EventObject} e (optional) An event associated with the selection
            @param {Boolean} keepExisting True to retain existing selections
            @return {TreeNode} The selected node
            </summary>
        </member>
        <member name="M:Ext.tree.MultiSelectionModel.unselect(System.Object)">
            <summary>
            Deselect a node.
            @param {TreeNode} node The node to unselect
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.tree.RootTreeNodeUI" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.tree.TreeNodeUI" -->
        <member name="M:Ext.tree.TreeNodeUI.addClass(System.Object)">
            <summary>
            Adds one or more CSS classes to the node's UI element.
            Duplicate classes are automatically filtered out.
            @param {String/Array} className The CSS class to add, or an array of classes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.tree.TreeNodeUI.#ctor(System.Object)" -->
        <member name="M:Ext.tree.TreeNodeUI.getAnchor">
            <summary>
            Returns the &lt;a> element that provides focus for the node's UI.
            @return {HtmlElement} The DOM anchor element.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.getEl">
            <summary>
            Returns the element which encapsulates this node.
            @return {HtmlElement} The DOM element. The default implementation uses a <code>&lt;li></code>.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.getHref(SharpKit.JavaScript.JsString)">
            <summary>
            @private Gets a normalized href for the node.
            @param {String} href
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.getIconEl">
            <summary>
            Returns the icon &lt;img> element.
            @return {HtmlElement} The DOM image element.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.getTextEl">
            <summary>
            Returns the text node.
            @return {HtmlNode} The DOM text node.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.hide">
            <summary>
            Hides this node.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.isChecked">
            <summary>
            Returns the checked status of the node. If the node was rendered with no
            checkbox, it returns false.
            @return {Boolean} The checked flag.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.removeClass(System.Object)">
            <summary>
            Removes one or more CSS classes from the node's UI element.
            @param {String/Array} className The CSS class to remove, or an array of classes
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.show">
            <summary>
            Shows this node.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNodeUI.toggleCheck(System.Boolean)">
            <summary>
            Sets the checked status of the tree node to the passed value, or, if no value was passed,
            toggles the checked status. If the node was rendered with no checkbox, this has no effect.
            @param {Boolean} value (optional) The new checked status.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.tree.RootTreeNodeUI.render" -->
        <member name="T:Ext.tree.TreeEditor">
            <summary>
            @class Ext.tree.TreeEditor
            @extends Ext.Editor
            Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used
            as the editor field.
            @constructor
            @param {TreePanel} tree
            @param {Object} fieldConfig (optional) Either a prebuilt {@link Ext.form.Field} instance or a Field config object
            that will be applied to the default field instance (defaults to a {@link Ext.form.TextField}).
            @param {Object} config (optional) A TreeEditor config object
            </summary>
        </member>
        <member name="M:Ext.tree.TreeEditor.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            @class Ext.tree.TreeEditor
            @extends Ext.Editor
            Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used
            as the editor field.
            @constructor
            @param {TreePanel} tree
            @param {Object} fieldConfig (optional) Either a prebuilt {@link Ext.form.Field} instance or a Field config object
            that will be applied to the default field instance (defaults to a {@link Ext.form.TextField}).
            @param {Object} config (optional) A TreeEditor config object
            </summary>
        </member>
        <member name="T:Ext.tree.TreeFilter">
            <summary>
            @class Ext.tree.TreeFilter
            Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes
            @param {TreePanel} tree
            @param {Object} config (optional)
            </summary>
        </member>
        <member name="M:Ext.tree.TreeFilter.clear">
            <summary>
            Clears the current filter. Note: with the "remove" option
            set a filter cannot be cleared.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeFilter.filter(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Filter the data by a specific attribute.
            @param {String/RegExp} value Either string that the attribute value
            should start with or a RegExp to test against the attribute
            @param {String} attr (optional) The attribute passed in your node's attributes collection. Defaults to "text".
            @param {TreeNode} startNode (optional) The node to start the filter at.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeFilter.filterBy(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Filter by a function. The passed function will be called with each
            node in the tree (or from the startNode). If the function returns true, the node is kept
            otherwise it is filtered. If a node is filtered, its children are also filtered.
            @param {Function} fn The filter function
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeFilter.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.tree.TreeFilter
            Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes
            @param {TreePanel} tree
            @param {Object} config (optional)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.tree.TreeLoader" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.tree.TreeLoader.#ctor(System.Object)" -->
        <member name="T:Ext.tree.TreeNode">
            <summary>
            @class Ext.tree.TreeNode
            @extends Ext.data.Node
            @cfg {String} text The text for this node
            @cfg {Boolean} expanded true to start the node expanded
            @cfg {Boolean} allowDrag False to make this node undraggable if {@link #draggable} = true (defaults to true)
            @cfg {Boolean} allowDrop False if this node cannot have child nodes dropped on it (defaults to true)
            @cfg {Boolean} disabled true to start the node disabled
            @cfg {String} icon The path to an icon for the node. The preferred way to do this
            is to use the cls or iconCls attributes and add the icon via a CSS background image.
            @cfg {String} cls A css class to be added to the node
            @cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images
            @cfg {String} href URL of the link used for the node (defaults to #)
            @cfg {String} hrefTarget target frame for the link
            @cfg {Boolean} hidden True to render hidden. (Defaults to false).
            @cfg {String} qtip An Ext QuickTip for the node
            @cfg {Boolean} expandable If set to true, the node will always show a plus/minus icon, even when empty
            @cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)
            @cfg {Boolean} singleClickExpand True for single click expand on this node
            @cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
            @cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox
            (defaults to undefined with no checkbox rendered)
            @cfg {Boolean} draggable True to make this node draggable (defaults to false)
            @cfg {Boolean} isTarget False to not allow this node to act as a drop target (defaults to true)
            @cfg {Boolean} allowChildren False to not allow this node to have child nodes (defaults to true)
            @cfg {Boolean} editable False to not allow this node to be edited by an {@link Ext.tree.TreeEditor} (defaults to true)
            @constructor
            @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.collapse(System.Boolean,System.Boolean,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Collapse this node.
            @param {Boolean} deep (optional) True to collapse all children as well
            @param {Boolean} anim (optional) false to cancel the default animation
            @param {Function} callback (optional) A callback to be called when
            expanding this node completes (does not wait for deep expand to complete).
            Called with 1 parameter, this node.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.collapseChildNodes(System.Boolean)">
            <summary>
            Collapse all child nodes
            @param {Boolean} deep (optional) true if the child nodes should also collapse their child nodes
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.#ctor(System.Object)">
            <summary>
            @class Ext.tree.TreeNode
            @extends Ext.data.Node
            @cfg {String} text The text for this node
            @cfg {Boolean} expanded true to start the node expanded
            @cfg {Boolean} allowDrag False to make this node undraggable if {@link #draggable} = true (defaults to true)
            @cfg {Boolean} allowDrop False if this node cannot have child nodes dropped on it (defaults to true)
            @cfg {Boolean} disabled true to start the node disabled
            @cfg {String} icon The path to an icon for the node. The preferred way to do this
            is to use the cls or iconCls attributes and add the icon via a CSS background image.
            @cfg {String} cls A css class to be added to the node
            @cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images
            @cfg {String} href URL of the link used for the node (defaults to #)
            @cfg {String} hrefTarget target frame for the link
            @cfg {Boolean} hidden True to render hidden. (Defaults to false).
            @cfg {String} qtip An Ext QuickTip for the node
            @cfg {Boolean} expandable If set to true, the node will always show a plus/minus icon, even when empty
            @cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)
            @cfg {Boolean} singleClickExpand True for single click expand on this node
            @cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
            @cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox
            (defaults to undefined with no checkbox rendered)
            @cfg {Boolean} draggable True to make this node draggable (defaults to false)
            @cfg {Boolean} isTarget False to not allow this node to act as a drop target (defaults to true)
            @cfg {Boolean} allowChildren False to not allow this node to have child nodes (defaults to true)
            @cfg {Boolean} editable False to not allow this node to be edited by an {@link Ext.tree.TreeEditor} (defaults to true)
            @constructor
            @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.disable">
            <summary>
            Disables this node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.enable">
            <summary>
            Enables this node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.ensureVisible(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Ensures all parent nodes are expanded, and if necessary, scrolls
            the node into view.
            @param {Function} callback (optional) A function to call when the node has been made visible.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.expand(System.Boolean,System.Boolean,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Expand this node.
            @param {Boolean} deep (optional) True to expand all children as well
            @param {Boolean} anim (optional) false to cancel the default animation
            @param {Function} callback (optional) A callback to be called when
            expanding this node completes (does not wait for deep expand to complete).
            Called with 1 parameter, this node.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to this TreeNode.
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.expandChildNodes(System.Boolean,System.Object)">
            <summary>
            Expand all child nodes
            @param {Boolean} deep (optional) true if the child nodes should also expand their child nodes
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.getUI">
            <summary>
            Returns the UI object for this node.
            @return {TreeNodeUI} The object which is providing the user interface for this tree
            node. Unless otherwise specified in the {@link #uiProvider}, this will be an instance
            of {@link Ext.tree.TreeNodeUI}
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.isExpanded">
            <summary>
            Returns true if this node is expanded
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.isSelected">
            <summary>
            Returns true if this node is selected
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.select">
            <summary>
            Triggers selection of this node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the class on this node.
            @param {String} cls
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setHref(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the href for the node.
            @param {String} href The href to set
            @param {String} (Optional) target The target of the href
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setIcon(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the icon for this node.
            @param {String} icon
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setIconCls(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the icon class for this node.
            @param {String} cls
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the text for this node
            @param {String} text
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.setTooltip(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the tooltip for this node.
            @param {String} tip The text for the tip
            @param {String} title (Optional) The title for the tip
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.toggle">
            <summary>
            Toggles expanded/collapsed state of the node
            </summary>
        </member>
        <member name="M:Ext.tree.TreeNode.unselect(System.Boolean)">
            <summary>
            Triggers deselection of this node
            @param {Boolean} silent (optional) True to stop selection change events from firing.
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.allowChildren">
            <summary>
            False to not allow this node to have child nodes (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.allowDrag">
            <summary>
            False to make this node undraggable if {@link #draggable} = true (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.allowDrop">
            <summary>
            False if this node cannot have child nodes dropped on it (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.checked">
            <summary>
            True to render a checked checkbox for this node, false to render an unchecked checkbox
            (defaults to undefined with no checkbox rendered)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.cls">
            <summary>
            A css class to be added to the node
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.disabled">
            <summary>
            true to start the node disabled
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.draggable">
            <summary>
            True to make this node draggable (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.editable">
            <summary>
            False to not allow this node to be edited by an {@link Ext.tree.TreeEditor} (defaults to true)
            @constructor
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.expandable">
            <summary>
            If set to true, the node will always show a plus/minus icon, even when empty
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.expanded">
            <summary>
            true to start the node expanded
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.hidden">
            <summary>
            True to render hidden. (Defaults to false).
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.href">
            <summary>
            URL of the link used for the node (defaults to #)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.hrefTarget">
            <summary>
            target frame for the link
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.icon">
            <summary>
            The path to an icon for the node. The preferred way to do this
            is to use the cls or iconCls attributes and add the icon via a CSS background image.
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.iconCls">
            <summary>
            A css class to be added to the nodes icon element for applying css background images
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.isTarget">
            <summary>
            False to not allow this node to act as a drop target (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.qtip">
            <summary>
            An Ext QuickTip for the node
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.qtipCfg">
            <summary>
            An Ext QuickTip config for the node (used instead of qtip)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.singleClickExpand">
            <summary>
            True for single click expand on this node
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.text">
            <summary>
            The text for this node
            </summary>
        </member>
        <member name="P:Ext.tree.TreeNodeConfig.uiProvider">
            <summary>
            A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.tree.TreePanel" -->
        <member name="M:Ext.tree.TreePanel.collapseAll">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.destroyRoot">
            <summary>
            Destroy the root node. Not included by itself because we need to pass the silent parameter.
            @private
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.expandAll">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.expandPath(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
            @param {String} path
            @param {String} attr (optional) The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)
            @param {Function} callback (optional) The callback to call when the expand is complete. The callback will be called with
            (bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getChecked(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. 'id')
            @param {String} attribute (optional) Defaults to null (return the actual nodes)
            @param {TreeNode} startNode (optional) The node to start from, defaults to the root
            @return {Array}
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getLoader">
            <summary>
            Returns the default {@link Ext.tree.TreeLoader} for this TreePanel.
            @return {Ext.tree.TreeLoader} The TreeLoader for this TreePanel.
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getNodeById(SharpKit.JavaScript.JsString)">
            <summary>
            Gets a node in this tree by its id
            @param {String} id
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getRootNode">
            <summary>
            Returns this root node for this tree
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getSelectionModel">
            <summary>
            Returns the selection model used by this TreePanel.
            @return {TreeSelectionModel} The selection model used by this TreePanel
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.getTreeEl">
            <summary>
            Returns the underlying Element for this tree
            @return {Ext.Element} The Element
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.tree.TreePanel.initComponent" -->
        <member name="M:Ext.tree.TreePanel.selectPath(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
            @param {String} path
            @param {String} attr (optional) The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)
            @param {Function} callback (optional) The callback to call when the selection is complete. The callback will be called with
            (bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.
            </summary>
        </member>
        <member name="M:Ext.tree.TreePanel.setRootNode(System.Object)">
            <summary>
            Sets the root node for this tree. If the TreePanel has already rendered a root node, the
            previous root node (and all of its descendants) are destroyed before the new root node is rendered.
            @param {Node} node
            @return {Node}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.tree.TreePanel.rootVisible" -->
        <member name="P:Ext.tree.TreePanelConfig.activeItem">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.allowDomMove">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.applyTo">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.autoDestroy">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.autoEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.autoLoad">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.autoWidth">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.bufferResize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.contentEl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.data">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.defaults">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.defaultType">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.disabledClass">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.elements">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.hideBorders">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.html">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.items">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.layout">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.layoutConfig">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.monitorResize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.preventBodyReset">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.tpl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.tree.TreePanelConfig.tplWriteMode">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.tree.TreeSorter">
            <summary>
            @class Ext.tree.TreeSorter
            Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the
            associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
            Example usage:<br />
            <pre><code>
            new Ext.tree.TreeSorter(myTree, {
            folderSort: true,
            dir: "desc",
            sortType: function(node) {
            // sort by a custom, typed attribute:
            return parseInt(node.id, 10);
            }
            });
            </code></pre>
            @constructor
            @param {TreePanel} tree
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.tree.TreeSorter.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.tree.TreeSorter
            Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the
            associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
            Example usage:<br />
            <pre><code>
            new Ext.tree.TreeSorter(myTree, {
            folderSort: true,
            dir: "desc",
            sortType: function(node) {
            // sort by a custom, typed attribute:
            return parseInt(node.id, 10);
            }
            });
            </code></pre>
            @constructor
            @param {TreePanel} tree
            @param {Object} config
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.caseSensitive">
            <summary>
            true for case-sensitive sort (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.dir">
            <summary>
            The direction to sort ("asc" or "desc," case-insensitive, defaults to "asc")
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.folderSort">
            <summary>
            True to sort leaf nodes under non-leaf nodes (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.leafAttr">
            <summary>
            The attribute used to determine leaf nodes when {@link #folderSort} = true (defaults to "leaf")
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.property">
            <summary>
            The named attribute on the node to sort by (defaults to "text").  Note that this
            property is only used if no {@link #sortType} function is specified, otherwise it is ignored.
            </summary>
        </member>
        <member name="P:Ext.tree.TreeSorterConfig.sortType">
            <summary>
            A custom "casting" function used to convert node values before sorting.  The function
            will be called with a single parameter (the {@link Ext.tree.TreeNode} being evaluated) and is expected to return
            the node's sort value cast to the specific data type required for sorting.  This could be used, for example, when
            a node's text (or other attribute) should be sorted as a date or numeric value.  See the class description for
            example usage.  Note that if a sortType is specified, any {@link #property} config will be ignored.
            </summary>
        </member>
        <member name="T:Ext.util.ClickRepeater">
            <summary>
            @class Ext.util.ClickRepeater
            @extends Ext.util.Observable
            A wrapper class which can be applied to any element. Fires a "click" event while the
            mouse is pressed. The interval between firings may be specified in the config but
            defaults to 20 milliseconds.
            Optionally, a CSS class may be applied to the element during the time it is pressed.
            @cfg {Mixed} el The element to act as a button.
            @cfg {Number} delay The initial delay before the repeating event begins firing.
            Similar to an autorepeat key delay.
            @cfg {Number} interval The interval between firings of the "click" event. Default 20 ms.
            @cfg {String} pressClass A CSS class name to be applied to the element while pressed.
            @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.
            "interval" and "delay" are ignored.
            @cfg {Boolean} preventDefault True to prevent the default click event
            @cfg {Boolean} stopDefault True to stop the default click event
            @history
            2007-02-02 jvs Original code contributed by Nige "Animal" White
            2007-02-02 jvs Renamed to ClickRepeater
            2007-02-03 jvs Modifications for FF Mac and Safari
            @constructor
            @param {Mixed} el The element to listen on
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.util.ClickRepeater
            @extends Ext.util.Observable
            A wrapper class which can be applied to any element. Fires a "click" event while the
            mouse is pressed. The interval between firings may be specified in the config but
            defaults to 20 milliseconds.
            Optionally, a CSS class may be applied to the element during the time it is pressed.
            @cfg {Mixed} el The element to act as a button.
            @cfg {Number} delay The initial delay before the repeating event begins firing.
            Similar to an autorepeat key delay.
            @cfg {Number} interval The interval between firings of the "click" event. Default 20 ms.
            @cfg {String} pressClass A CSS class name to be applied to the element while pressed.
            @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.
            "interval" and "delay" are ignored.
            @cfg {Boolean} preventDefault True to prevent the default click event
            @cfg {Boolean} stopDefault True to stop the default click event
            @history
            2007-02-02 jvs Original code contributed by Nige "Animal" White
            2007-02-02 jvs Renamed to ClickRepeater
            2007-02-03 jvs Modifications for FF Mac and Safari
            @constructor
            @param {Mixed} el The element to listen on
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.disable(System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.enable">
            <summary>
            Enables the repeater and allows events to fire.
            </summary>
        </member>
        <member name="M:Ext.util.ClickRepeater.setDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean.
            @param {Boolean} disabled
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.clear(SharpKit.JavaScript.JsString)">
            <summary>
            Removes a cookie with the provided name from the browser
            if found by setting its expiration date to sometime in the past.
            @param {String} name The name of the cookie to remove
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.get(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves cookies that are accessible by the current page. If a cookie
            does not exist, <code>get()</code> returns <tt>null</tt>.  The following
            example retrieves the cookie called "valid" and stores the String value
            in the variable <tt>validStatus</tt>.
            <pre><code>
            var validStatus = Ext.util.Cookies.get("valid");
            </code></pre>
            @param {String} name The name of the cookie to get
            @return {Mixed} Returns the cookie value for the specified name;
            null if the cookie name does not exist.
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.getCookieVal(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Cookies.set(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Create a cookie with the specified name and value. Additional settings
            for the cookie may be optionally specified (for example: expiration,
            access restriction, SSL).
            @param {String} name The name of the cookie to set.
            @param {Mixed} value The value to set for the cookie.
            @param {Object} expires (Optional) Specify an expiration date the
            cookie is to persist until.  Note that the specified Date object will
            be converted to Greenwich Mean Time (GMT).
            @param {String} path (Optional) Setting a path on the cookie restricts
            access to pages that match that path. Defaults to all pages (<tt>'/'</tt>).
            @param {String} domain (Optional) Setting a domain restricts access to
            pages on a given domain (typically used to allow cookie access across
            subdomains). For example, "extjs.com" will create a cookie that can be
            accessed from any subdomain of extjs.com, including www.extjs.com,
            support.extjs.com, etc.
            @param {Boolean} secure (Optional) Specify true to indicate that the cookie
            should only be accessible via SSL on a page using the HTTPS protocol.
            Defaults to <tt>false</tt>. Note that this will only work if the page
            calling this code uses the HTTPS protocol, otherwise the cookie will be
            created with default options.
            </summary>
        </member>
        <member name="T:Ext.util.DelayedTask">
            <summary>
            @class Ext.util.DelayedTask
            <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
            performing setTimeout where a new timeout cancels the old timeout. When called, the
            task will wait the specified time period before executing. If durng that time period,
            the task is called again, the original call will be cancelled. This continues so that
            the function is only called a single time for each iteration.</p>
            <p>This method is especially useful for things like detecting whether a user has finished
            typing in a text field. An example would be performing validation on a keypress. You can
            use this class to buffer the keypress events for a certain number of milliseconds, and
            perform only if they stop for that amount of time.  Usage:</p><pre><code>
            var task = new Ext.util.DelayedTask(function(){
            alert(Ext.getDom('myInputField').value.length);
            });
            // Wait 500ms before calling our function. If the user presses another key
            // during that 500ms, it will be cancelled and we'll wait another 500ms.
            Ext.get('myInputField').on('keypress', function(){
            task.{@link #delay}(500);
            });
            </code></pre>
            <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
            option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
            also setup a delayed task for you to buffer events.</p>
            @constructor The parameters to this constructor serve as defaults and are not required.
            @param {Function} fn (optional) The default function to call.
            @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
            function is called. If not specified, <code>this</code> will refer to the browser window.
            @param {Array} args (optional) The default Array of arguments.
            </summary>
        </member>
        <member name="M:Ext.util.DelayedTask.#ctor(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            @class Ext.util.DelayedTask
            <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
            performing setTimeout where a new timeout cancels the old timeout. When called, the
            task will wait the specified time period before executing. If durng that time period,
            the task is called again, the original call will be cancelled. This continues so that
            the function is only called a single time for each iteration.</p>
            <p>This method is especially useful for things like detecting whether a user has finished
            typing in a text field. An example would be performing validation on a keypress. You can
            use this class to buffer the keypress events for a certain number of milliseconds, and
            perform only if they stop for that amount of time.  Usage:</p><pre><code>
            var task = new Ext.util.DelayedTask(function(){
            alert(Ext.getDom('myInputField').value.length);
            });
            // Wait 500ms before calling our function. If the user presses another key
            // during that 500ms, it will be cancelled and we'll wait another 500ms.
            Ext.get('myInputField').on('keypress', function(){
            task.{@link #delay}(500);
            });
            </code></pre>
            <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
            option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
            also setup a delayed task for you to buffer events.</p>
            @constructor The parameters to this constructor serve as defaults and are not required.
            @param {Function} fn (optional) The default function to call.
            @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
            function is called. If not specified, <code>this</code> will refer to the browser window.
            @param {Array} args (optional) The default Array of arguments.
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createDelegate(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Creates a delegate (callback) that sets the scope to obj.
            Call directly on any function. Example: <code>Ext.createDelegate(this.myFunction, this, [arg1, arg2])</code>
            Will create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the
            callback points to obj. Example usage:
            <pre><code>
            var sayHi = function(name){
            // Note this use of "this.text" here.  This function expects to
            // execute within a scope that contains a text property.  In this
            // example, the "this" variable is pointing to the btn object that
            // was passed in createDelegate below.
            alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
            }
            var btn = new Ext.Button({
            text: 'Say Hi',
            renderTo: Ext.getBody()
            });
            // This callback will execute in the scope of the
            // button instance. Clicking the button alerts
            // "Hi, Fred. You clicked the "Say Hi" button."
            btn.on('click', Ext.createDelegate(sayHi, btn, ['Fred']));
            </code></pre>
            @param {Function} fn The function to delegate.
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
            <b>If omitted, defaults to the browser window.</b>
            @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
            @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
            if a number the args are inserted at the specified position
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createInterceptor(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Creates an interceptor function. The passed function is called before the original one. If it returns false,
            the original one is not called. The resulting function returns the results of the original function.
            The passed function is called with the parameters of the original function. Example usage:
            <pre><code>
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            sayHi('Fred'); // alerts "Hi, Fred"
            // create a new function that validates input without
            // directly modifying the original function:
            var sayHiToFriend = Ext.createInterceptor(sayHi, function(name){
            return name == 'Brian';
            });
            sayHiToFriend('Fred');  // no alert
            sayHiToFriend('Brian'); // alerts "Hi, Brian"
            </code></pre>
            @param {Function} origFn The original function.
            @param {Function} newFn The function to call before the original
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the passed function is executed.
            <b>If omitted, defaults to the scope in which the original function is called or the browser window.</b>
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createSequence(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Create a combined function call sequence of the original function + the passed function.
            The resulting function returns the results of the original function.
            The passed fcn is called with the parameters of the original function. Example usage:
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            sayHi('Fred'); // alerts "Hi, Fred"
            var sayGoodbye = Ext.createSequence(sayHi, function(name){
            alert('Bye, ' + name);
            });
            sayGoodbye('Fred'); // both alerts show
            @param {Function} origFn The original function.
            @param {Function} newFn The function to sequence
            @param {Object} scope (optional) The scope (this reference) in which the passed function is executed.
            If omitted, defaults to the scope in which the original function is called or the browser window.
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.defer(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
            <pre><code>
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            // executes immediately:
            sayHi('Fred');
            // executes after 2 seconds:
            Ext.defer(sayHi, 2000, this, ['Fred']);
            // this syntax is sometimes useful for deferring
            // execution of an anonymous function:
            Ext.defer(function(){
            alert('Anonymous');
            }, 100);
            </code></pre>
            @param {Function} fn The function to defer.
            @param {Number} millis The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
            <b>If omitted, defaults to the browser window.</b>
            @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
            @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
            if a number the args are inserted at the specified position
            @return {Number} The timeout id that can be used with clearTimeout
            </summary>
        </member>
        <member name="T:Ext.util.MixedCollection">
            <summary>
            @class Ext.util.MixedCollection
            @extends Ext.util.Observable
            A Collection class that maintains both numeric indexes and keys and exposes events.
            @constructor
            @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
            function should add function references to the collection. Defaults to
            <tt>false</tt>.
            @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
            and return the key value for that item.  This is used when available to look up the key on items that
            were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
            equivalent to providing an implementation for the {@link #getKey} method.
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.#ctor(System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            @class Ext.util.MixedCollection
            @extends Ext.util.Observable
            A Collection class that maintains both numeric indexes and keys and exposes events.
            @constructor
            @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
            function should add function references to the collection. Defaults to
            <tt>false</tt>.
            @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
            and return the key value for that item.  This is used when available to look up the key on items that
            were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
            equivalent to providing an implementation for the {@link #getKey} method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Util.Observable" -->
        <member name="M:Ext.Util.Observable.addEvents(System.Object)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire.
            @param {Object|String} o Either an object with event names as properties with a value of <code>true</code>
            or the first event name string if multiple event names are being passed as separate parameters.
            @param {string} Optional. Event name if multiple event names are being passed as separate parameters.
            Usage:<pre><code>
            this.addEvents('storeloaded', 'storecleared');
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Util.Observable.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)" -->
        <member name="M:Ext.Util.Observable.fireEvent">
            <summary>
            <p>Fires the specified event with the passed parameters (minus the event name).</p>
            <p>An event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#getBubbleTarget})
            by calling {@link #enableBubble}.</p>
            @param {String} eventName The name of the event to fire.
            @param {Object...} args Variable number of parameters are passed to handlers.
            @return {Boolean} returns false if any of the handlers return false otherwise it returns true.
            </summary>
        </member>
        <member name="M:Ext.Util.Observable.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event
            @param {String} eventName The name of the event to check for
            @return {Boolean} True if the event is being listened for, else false
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Util.Observable.#ctor" -->
        <member name="M:Ext.Util.Observable.purgeListeners">
            <summary>
            Removes all listeners for this object
            </summary>
        </member>
        <member name="M:Ext.Util.Observable.releaseCapture(System.Object)">
            <summary>
            Removes <b>all</b> added captures from the Observable.
            @param {Observable} o The Observable to release
            @static
            </summary>
        </member>
        <member name="M:Ext.Util.Observable.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler.
            @param {String}   eventName The type of event the handler was associated with.
            @param {Function} handler   The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
            @param {Object}   scope     (optional) The scope originally specified for the handler.
            </summary>
        </member>
        <member name="M:Ext.Util.Observable.resumeEvents">
            <summary>
            Resume firing events. (see {@link #suspendEvents})
            If events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all
            events fired during event suspension will be sent to any listeners now.
            </summary>
        </member>
        <member name="M:Ext.Util.Observable.suspendEvents(System.Boolean)">
            <summary>
            Suspend the firing of all events. (see {@link #resumeEvents})
            @param {Boolean} queueSuspended Pass as true to queue up suspended events to be fired
            after the {@link #resumeEvents} call instead of discarding all suspended events;
            </summary>
        </member>
    </members>
</doc>
