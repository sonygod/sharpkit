<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.SenchaTouch-1.1.0</name>
    </assembly>
    <members>
        <member name="T:El.fly">
            <summary>
            <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
            the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
            <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
            application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
            will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
            @param {String/HTMLElement} el The dom node or id
            @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
            (e.g. internally Ext uses "_global")
            @return {Element} The shared Element object (or null if no matching element was found)
            @member Ext.Element
            @method fly
            </summary>
        </member>
        <member name="M:El.fly.#ctor(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
            the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
            <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
            application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
            will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
            @param {String/HTMLElement} el The dom node or id
            @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
            (e.g. internally Ext uses "_global")
            @return {Element} The shared Element object (or null if no matching element was found)
            @member Ext.Element
            @method fly
            </summary>
        </member>
        <member name="T:El.get">
            <summary>
            Retrieves Ext.Element objects.
            <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
            retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
            its ID, use {@link Ext.ComponentMgr#get}.</p>
            <p>Uses simple caching to consistently return the same object. Automatically fixes if an
            object was recreated with the same id via AJAX or DOM.</p>
            @param {Mixed} el The id of the node, a DOM Node or an existing Element.
            @return {Element} The Element object (or null if no matching element was found)
            @static
            @member Ext.Element
            @method get
            </summary>
        </member>
        <member name="M:El.get.#ctor(System.Object)">
            <summary>
            Retrieves Ext.Element objects.
            <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
            retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
            its ID, use {@link Ext.ComponentMgr#get}.</p>
            <p>Uses simple caching to consistently return the same object. Automatically fixes if an
            object was recreated with the same id via AJAX or DOM.</p>
            @param {Mixed} el The id of the node, a DOM Node or an existing Element.
            @return {Element} The Element object (or null if no matching element was found)
            @static
            @member Ext.Element
            @method get
            </summary>
        </member>
        <member name="T:Ext.AbstractManager">
            <summary>
            @class Ext.AbstractManager
            @extends Object
            @ignore
            Base Manager class - extended by ComponentMgr and PluginMgr
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.create(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Creates and returns an instance of whatever this manager manages, based on the supplied type and config object
            @param {Object} config The config object
            @param {String} defaultType If no type is discovered in the config object, we fall back to this type
            @return {Mixed} The instance of whatever this manager is managing
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.each(System.Object,System.Object)">
            <summary>
            Executes the specified function once for each item in the collection.
            Returning false from the function will cease iteration.
            The paramaters passed to the function are:
            <div class="mdetail-params"><ul>
            <li><b>key</b> : String<p class="sub-desc">The key of the item</p></li>
            <li><b>value</b> : Number<p class="sub-desc">The value of the item</p></li>
            <li><b>length</b> : Number<p class="sub-desc">The total number of items in the collection</p></li>
            </ul></div>
            @param {Object} fn The function to execute.
            @param {Object} scope The scope to execute in. Defaults to <tt>this</tt>.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.get(SharpKit.JavaScript.JsString)">
            <summary>
            Returns a component by {@link Ext.Component#id id}.
            For additional details see {@link Ext.util.MixedCollection#get}.
            @param {String} id The component {@link Ext.Component#id id}
            @return Ext.Component The Component, <code>undefined</code> if not found, or <code>null</code> if a
            Class was found.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.getCount">
            <summary>
            Gets the number of items in the collection.
            @return {Number} The number of items in the collection.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.isRegistered(Ext.Component)">
            <summary>
            Checks if a Component type is registered.
            @param {Ext.Component} xtype The mnemonic string by which the Component class may be looked up
            @return {Boolean} Whether the type is registered.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.onAvailable(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.
            @param {String} id The component {@link Ext.Component#id id}
            @param {Function} fn The callback function
            @param {Object} scope The scope (<code>this</code> reference) in which the callback is executed. Defaults to the Component.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.register(System.Object)">
            <summary>
            Registers an item to be managed
            @param {Mixed} item The item to register
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.registerType(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            <p>Registers a new Component constructor, keyed by a new
            {@link Ext.Component#xtype}.</p>
            <p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new
            subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying
            child Components.
            see {@link Ext.Container#items}</p>
            @param {String} xtype The mnemonic string by which the Component class may be looked up.
            @param {Constructor} cls The new Component class.
            </summary>
        </member>
        <member name="M:Ext.AbstractManager.unregister(System.Object)">
            <summary>
            Unregisters a component by removing it from this manager
            @param {Mixed} item The item to unregister
            </summary>
        </member>
        <member name="P:Ext.AbstractManager.Count">
            <summary>
            Gets the number of items in the collection.
            @return {Number} The number of items in the collection.
            </summary>
        </member>
        <member name="P:Ext.AbstractManager.typeName">
            <summary>
            @class Ext.AbstractManager
            @extends Object
            @ignore
            Base Manager class - extended by ComponentMgr and PluginMgr
            </summary>
        </member>
        <member name="T:Ext.AbstractStoreSelectionModel">
            <summary>
            @class Ext.AbstractStoreSelectionModel
            @extends Ext.util.Observable
            *
            Tracks what records are currently selected in a databound widget.
            *
            This is an abstract class and is not meant to be directly used.
            *
            DataBound UI widgets such as GridPanel, TreePanel, and ListView
            should subclass AbstractStoreSelectionModel and provide a way
            to binding to the component.
            *
            The abstract methods onSelectChange and onLastFocusChanged should
            be implemented in these subclasses to update the UI widget.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.util.Observable" -->
        <member name="M:Ext.util.Observable.addEvents(System.Object)">
            <summary>
            Adds the specified events to the list of events which this Observable may fire.
            @param {Object|String} o Either an object with event names as properties with a value of <code>true</code>
            or the first event name string if multiple event names are being passed as separate parameters.
            @param {string} Optional. Event name if multiple event names are being passed as separate parameters.
            Usage:<pre><code>
            this.addEvents('storeloaded', 'storecleared');
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Observable.addListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Observable.addManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)" -->
        <member name="M:Ext.util.Observable.capture(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Starts capture on the specified Observable. All events will be passed
            to the supplied function with the event name + standard signature of the event
            <b>before</b> the event is fired. If the supplied function returns false,
            the event will not fire.
            @param {Observable} o The Observable to capture events from.
            @param {Function} fn The function to call when an event is fired.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Observable firing the event.
            @static
            </summary>
        </member>
        <member name="M:Ext.util.Observable.clearListeners">
            <summary>
            Removes all listeners for this object including the managed listeners
            </summary>
        </member>
        <member name="M:Ext.util.Observable.clearManagedListeners">
            <summary>
            Removes all managed listeners for this object.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.enableBubble(System.Object)">
            <summary>
            <p>Enables events fired by this Observable to bubble up an owner hierarchy by calling
            <code>this.getBubbleTarget()</code> if present. There is no implementation in the Observable base class.</p>
            <p>This is commonly used by Ext.Components to bubble events to owner Containers. See {@link Ext.Component.getBubbleTarget}. The default
            implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
            access the required target more quickly.</p>
            <p>Example:</p><pre><code>
            Ext.override(Ext.form.Field, {
            //  Add functionality to Field&#39;s initComponent to enable the change event to bubble
            initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
            this.enableBubble('change');
            }),
            //  We know that we want Field&#39;s events to bubble directly to the FormPanel.
            getBubbleTarget : function() {
            if (!this.formPanel) {
            this.formPanel = this.findParentByType('form');
            }
            return this.formPanel;
            }
            });
            var myForm = new Ext.formPanel({
            title: 'User Details',
            items: [{
            ...
            }],
            listeners: {
            change: function() {
            // Title goes red if form has been modified.
            myForm.header.setStyle('color', 'red');
            }
            }
            });
            </code></pre>
            @param {String/Array} events The event name to bubble, or an Array of event names.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.fireEvent">
            <summary>
            <p>Fires the specified event with the passed parameters (minus the event name).</p>
            <p>An event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#getBubbleTarget})
            by calling {@link #enableBubble}.</p>
            @param {String} eventName The name of the event to fire.
            @param {Object...} args Variable number of parameters are passed to handlers.
            @return {Boolean} returns false if any of the handlers return false otherwise it returns true.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.hasListener(SharpKit.JavaScript.JsString)">
            <summary>
            Checks to see if this object has any listeners for a specified event
            @param {String} eventName The name of the event to check for
            @return {Boolean} True if the event is being listened for, else false
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Observable.observe(SharpKit.JavaScript.JsAction,System.Object)" -->
        <member name="M:Ext.util.Observable.relayEvents(System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.
            @param {Object} o The Observable whose events this object is to relay.
            @param {Array} events Array of event names to relay.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.releaseCapture(System.Object)">
            <summary>
            Removes <b>all</b> added captures from the Observable.
            @param {Observable} o The Observable to release
            @static
            </summary>
        </member>
        <member name="M:Ext.util.Observable.removeListener(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler.
            @param {String}   eventName The type of event the handler was associated with.
            @param {Function} handler   The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
            @param {Object}   scope     (optional) The scope originally specified for the handler.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.removeManagedListener(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes listeners that were added by the {@link #mon} method.
            @param {Observable|Element} item The item from which to remove a listener/listeners.
            @param {Object|String} ename The event name, or an object containing event name properties.
            @param {Function} fn Optional. If the <code>ename</code> parameter was an event name, this
            is the handler function.
            @param {Object} scope Optional. If the <code>ename</code> parameter was an event name, this
            is the scope (<code>this</code> reference) in which the handler function is executed.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.resumeEvents">
            <summary>
            Resume firing events. (see {@link #suspendEvents})
            If events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all
            events fired during event suspension will be sent to any listeners now.
            </summary>
        </member>
        <member name="M:Ext.util.Observable.suspendEvents(System.Boolean)">
            <summary>
            Suspend the firing of all events. (see {@link #resumeEvents})
            @param {Boolean} queueSuspended Pass as true to queue up suspended events to be fired
            after the {@link #resumeEvents} call instead of discarding all suspended events;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.util.Observable.isObservable" -->
        <member name="M:Ext.AbstractStoreSelectionModel.#ctor(System.Object)">
            <summary>
            @property selected
            READ-ONLY A MixedCollection that maintains all of the currently selected
            records.
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.deselect(System.Object,System.Boolean)">
            <summary>
            Deselects a record instance by record instance or index.
            @param {Ext.data.Record/Index} records An array of records or an index
            @param {Boolean} suppressEvent Set to false to not fire a deselect event
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.getLastSelected">
            <summary>
            Returns the last selected record.
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.getSelection">
            <summary>
            Returns an array of the currently selected records.
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.getSelectionMode">
            <summary>
            Returns the current selectionMode. SINGLE, MULTI or SIMPLE.
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.hasSelection">
            <summary>
            Returns true if there is a selected record.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.isLocked">
            <summary>
            Returns true if the selections are locked.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.isSelected(System.Object)">
            <summary>
            Returns <tt>true</tt> if the specified row is selected.
            @param {Record/Number} record The record or index of the record to check
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.select(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Selects a record instance by record instance or index.
            @param {Ext.data.Record/Index} records An array of records or an index
            @param {Boolean} keepExisting
            @param {Boolean} suppressEvent Set to false to not fire a select event
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.selectRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean,System.Object)">
            <summary>
            Selects a range of rows if the selection model
            {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
            All rows in between startRow and endRow are also selected.
            @param {Number} startRow The index of the first row in the range
            @param {Number} endRow The index of the last row in the range
            @param {Boolean} keepExisting (optional) True to retain existing selections
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.setLastFocused(System.Object)">
            <summary>
            @param {Ext.data.Record} record
            Set a record as the last focused record. This does NOT mean
            that the record has been selected.
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.setLocked(System.Boolean)">
            <summary>
            Locks the current selection and disables any changes from
            happening to the selection.
            @param {Boolean} locked
            </summary>
        </member>
        <member name="M:Ext.AbstractStoreSelectionModel.setSelectionMode(System.Object)">
            <summary>
            Sets the current selectionMode. SINGLE, MULTI or SIMPLE.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModel.allowDeselect">
            <summary>
            @cfg {Boolean} allowDeselect
            Allow users to deselect a record in a DataView, List or Grid. Only applicable when the SelectionModel's mode is 'SINGLE'. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModel.LastFocused">
            <summary>
            @param {Ext.data.Record} record
            Set a record as the last focused record. This does NOT mean
            that the record has been selected.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModel.Locked">
            <summary>
            Locks the current selection and disables any changes from
            happening to the selection.
            @param {Boolean} locked
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModel.selected">
            <summary>
            @property selected
            READ-ONLY A MixedCollection that maintains all of the currently selected
            records.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModel.SelectionMode">
            <summary>
            Sets the current selectionMode. SINGLE, MULTI or SIMPLE.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModelConfig.allowDeselect">
            <summary>
            Allow users to deselect a record in a DataView, List or Grid. Only applicable when the SelectionModel's mode is 'SINGLE'. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.AbstractStoreSelectionModelConfig.mode">
            <summary>
            Modes of selection.
            Valid values are SINGLE, SIMPLE, and MULTI. Defaults to 'SINGLE'
            </summary>
        </member>
        <member name="T:Ext.ActionSheet">
            <summary>
            @class Ext.ActionSheet
            @extends Ext.Sheet
            *
            <p>A Button Sheet class designed to popup or slide/anchor a series of buttons.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.ActionSheet/screenshot.png" /></p>
            *
            <h2>Example code:</h2>
            <pre><code>
            var actionSheet = new Ext.ActionSheet({
            items: [
            {
            text: 'Delete draft',
            ui  : 'decline'
            },
            {
            text: 'Save draft'
            },
            {
            text: 'Cancel',
            ui  : 'confirm'
            }
            ]
            });
            actionSheet.show();</code></pre>
            @xtype sheet
            </summary>
        </member>
        <member name="T:Ext.Sheet">
            <summary>
            @class Ext.Sheet
            @extends Ext.Panel
            *
            <p>A general sheet class.  This renderable container provides base support for orientation-aware
            transitions for popup or side-anchored sliding Panels.</p>
            *
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var sheet = new Ext.Sheet({
            height  : 200,
            stretchX: true,
            stretchY: true,
            layout: {
            type: 'hbox',
            align: 'stretch'
            },
            dockedItems: [
            {
            dock : 'bottom',
            xtype: 'button',
            text : 'Click me'
            }
            ]
            });
            sheet.show();
            </code></pre>
            <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
            @xtype sheet
            </summary>
        </member>
        <member name="T:Ext.Panel">
            <summary>
            @class Ext.Panel
            @extends Ext.lib.Panel
            <p>Panel is a container that has specific functionality and structural components that make
            it the perfect building block for application-oriented user interfaces.</p>
            <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
            of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
            <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
            to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
            those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
            default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
            child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
            at all.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #fullscreen}</li>
            <li>{@link #layout}</li>
            <li>{@link #items}</li>
            <li>{@link #dockedItems}</li>
            <li>{@link #html}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #show}</li>
            <li>{@link #hide}</li>
            <li>{@link #showBy}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Panel/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var panel = new Ext.Panel({
            fullscreen: true,
            dockedItems: [
            {
            dock : 'top',
            xtype: 'toolbar',
            title: 'Standard Titlebar'
            },
            {
            dock : 'top',
            xtype: 'toolbar',
            ui   : 'light',
            items: [
            {
            text: 'Test Button'
            }
            ]
            }
            ],
            html: 'Testing'
            });</code></pre>
            @constructor
            Create a new Panel
            @param {Object} config The config object
            @xtype panel
            </summary>
        </member>
        <member name="T:Ext.lib.Panel">
            <summary>
            @class Ext.lib.Panel
            @extends Ext.Container
            Shared Panel class
            </summary>
        </member>
        <member name="T:Ext.Container">
            <summary>
            @class Ext.Container
            @extends Ext.lib.Container
            <p>Base class for any {@link Ext.BoxComponent} that may contain other Components. Containers handle the
            basic behavior of containing items, namely adding, inserting and removing items.</p>
            *
            <p><u><b>Layout</b></u></p>
            <p>Container classes delegate the rendering of child Components to a layout
            manager class which must be configured into the Container using the
            <code><b>{@link #layout}</b></code> configuration property.</p>
            <p>When either specifying child <code>{@link #items}</code> of a Container,
            or dynamically {@link #add adding} Components to a Container, remember to
            consider how you wish the Container to arrange those child elements, and
            whether those child elements need to be sized using one of Ext's built-in
            <b><code>{@link #layout}</code></b> schemes. By default, Containers use the
            {@link Ext.layout.AutoContainerLayout AutoContainerLayout} scheme which only
            renders child components, appending them one after the other inside the
            Container, and <b>does not apply any sizing</b> at all.</p>
            <p>A common mistake is when a developer neglects to specify a
            <b><code>{@link #layout}</code></b>. If a Container is left to use the default
            {@link Ext.layout.AutoContainerLayout AutoContainerLayout} scheme, none of its
            child components will be resized, or changed in any way when the Container
            is resized.</p>
            @xtype container
            </summary>
        </member>
        <member name="T:Ext.lib.Container">
            <summary>
            @class Ext.lib.Container
            @extends Ext.Component
            Shared Container class
            </summary>
        </member>
        <member name="T:Ext.Component">
            <summary>
            @class Ext.Component
            @extends Ext.lib.Component
            <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
            Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
            Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
            or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
            <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
            <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
            {@link Ext#getCmp}, passing the {@link #id}.</p>
            <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
            {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
            <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
            and to either extend or augment ExtJs base classes to create custom Components.</p>
            <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
            xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #fullscreen}</li>
            </ul>
            <pre>
            xtype            Class
            -------------    ------------------
            button           {@link Ext.Button}
            component        {@link Ext.Component}
            container        {@link Ext.Container}
            dataview         {@link Ext.DataView}
            panel            {@link Ext.Panel}
            slider           {@link Ext.form.Slider}
            toolbar          {@link Ext.Toolbar}
            spacer           {@link Ext.Spacer}
            tabpanel         {@link Ext.TabPanel}
            Form components
            ---------------------------------------
            formpanel        {@link Ext.form.FormPanel}
            checkboxfield    {@link Ext.form.Checkbox}
            selectfield      {@link Ext.form.Select}
            field            {@link Ext.form.Field}
            fieldset         {@link Ext.form.FieldSet}
            hiddenfield      {@link Ext.form.Hidden}
            numberfield      {@link Ext.form.Number}
            radiofield       {@link Ext.form.Radio}
            textareafield    {@link Ext.form.TextArea}
            textfield        {@link Ext.form.Text}
            togglefield      {@link Ext.form.Toggle}
            </pre>
            @constructor
            @param {Ext.Element/String/Object} config The configuration options may be specified as either:
            <div class="mdetail-params"><ul>
            <li><b>an element</b> :
            <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
            <li><b>a string</b> :
            <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
            <li><b>anything else</b> :
            <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
            </ul></div>
            @xtype component
            </summary>
        </member>
        <member name="T:Ext.lib.Component">
            <summary>
            @class Ext.lib.Component
            @extends Ext.util.Observable
            Shared Component class
            </summary>
        </member>
        <member name="M:Ext.lib.Component.addCls">
            <summary>
            Adds a CSS class to the top level element representing this component.
            @returns {Ext.Component} Returns the Component to allow method chaining.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.applyRenderSelectors">
            <summary>
            Sets references to elements inside the component. E.g body -> x-panel-body
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.#ctor(System.Object)">
            <summary>
            Read-only property indicating whether or not the component has been rendered.
            @property rendered
            @type {Boolean}
            </summary>
        </member>
        <member name="M:Ext.lib.Component.destroy">
            <summary>
            Destroys the Component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.disable(System.Boolean)">
            <summary>
            Disable the component.
            @param {Boolean} silent
            Passing true, will supress the 'disable' event from being fired.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.doComponentLayout(System.Object,System.Object,System.Object)">
            <summary>
            This method needs to be called whenever you change something on this component that requires the components
            layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
            label of a form field. After a component layout, the container layout will automatically be run. So you could
            be on the safe side and always call doComponentLayout instead of doLayout.
            @return {Ext.Container} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.enable(System.Boolean)">
            <summary>
            Enable the component
            @param {Boolean} silent
            Passing false will supress the 'enable' event from being fired.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getBubbleTarget">
            <summary>
            Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
            @return {Ext.Container} the Container which owns this Component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getEl">
            <summary>
            Retrieves the top level element representing this component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getHeight">
            <summary>
            Gets the current height of the component's underlying element.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getId">
            <summary>
            Retrieves the id of this component.
            Will autogenerate an id if one has not already been set.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getInsertPosition(System.Object)">
            <summary>
            This function takes the position argument passed to onRender and returns a
            DOM element that you can use in the insertBefore.
            @param {String/Number/Element/HTMLElement} position Index, element id or element you want
            to put this component before.
            @return {HTMLElement} DOM element that you can use in the insertBefore
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getSize">
            <summary>
            Gets the current size of the component's underlying element.
            @return {Object} An object containing the element's size {width: (element width), height: (element height)}
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getTargetEl">
            <summary>
            This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getWidth">
            <summary>
            Gets the current width of the component's underlying element.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.lib.Component.getXTypes">
            <summary>
            <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
            available xtypes, see the {@link Ext.Component} header.</p>
            <p><b>If using your own subclasses, be aware that a Component must register its own xtype
            to participate in determination of inherited xtypes.</b></p>
            <p>Example usage:</p>
            <pre><code>
            var t = new Ext.form.Text();
            alert(t.getXTypes());  // alerts 'component/field/textfield'
            </code></pre>
            @return {String} The xtype hierarchy string
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initCls">
            <summary>
            <p>Creates an array of class names from the configurations to add to this Component's <code>el</code> on render.</p>
            <p>Private, but (possibly) used by ComponentQuery for selection by class name if Component is not rendered.</p>
            @return {Array} An array of class names with which the Component's element will be rendered.
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initContainer(System.Object)">
            <summary>
            Adds ctCls to container.
            @return {Ext.Element} The initialized container
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initContent">
            <summary>
            Initializes this components contents. It checks for the properties
            html, contentEl and tpl/data.
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initRenderData">
            <summary>
            Initialized the renderData to be used when rendering the renderTpl.
            @return {Object} Object with keys and values that are going to be applied to the renderTpl
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initRenderTpl">
            <summary>
            Initializes the renderTpl.
            @return {Ext.XTemplate} The renderTpl XTemplate instance.
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.initStyles">
            <summary>
            Function description
            @return {String} A CSS style string with style, padding, margin and border.
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isDisabled">
            <summary>
            Method to determine whether this Component is currently disabled.
            @return {Boolean} the disabled state of this Component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isDraggable">
            <summary>
            Method to determine whether this Component is draggable.
            @return {Boolean} the draggable state of this component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isDroppable">
            <summary>
            Method to determine whether this Component is droppable.
            @return {Boolean} the droppable state of this component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isFloating">
            <summary>
            Method to determine whether this Component is floating.
            @return {Boolean} the floating state of this component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isHidden">
            <summary>
            Method to determine whether this Component is currently set to hidden.
            @return {Boolean} the hidden state of this Component.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isVisible">
            <summary>
            Returns true if this component is visible.
            @return {Boolean} True if this component is visible, false otherwise.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.isXType(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            <p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
            from the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>
            <p><b>If using your own subclasses, be aware that a Component must register its own xtype
            to participate in determination of inherited xtypes.</b></p>
            <p>For a list of all available xtypes, see the {@link Ext.Component} header.</p>
            <p>Example usage:</p>
            <pre><code>
            var t = new Ext.form.Text();
            var isText = t.isXType('textfield');        // true
            var isBoxSubclass = t.isXType('field');       // true, descended from Ext.form.Field
            var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.form.Field instance
            </code></pre>
            @param {String} xtype The xtype to check for this Component
            @param {Boolean} shallow (optional) False to check whether this Component is descended from the xtype (this is
            the default), or true to check whether this Component is directly of the specified xtype.
            @return {Boolean} True if this component descends from the specified xtype, false otherwise.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.nextSibling(System.Object)">
            <summary>
            <p>Returns the next sibling of this Component.</p>
            <p>Optionally selects the next sibling which matches the passed {@link Ext.ComponentQuery ComponentQuery} selector.</p>
            <p>May also be refered to as <code><b>prev()</b></code></p>
            @param selector Optional. A {@link Ext.ComponentQuery ComponentQuery} selector to filter the following items.
            @returns The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.onAdded(Ext.Container,System.Object)">
            <summary>
            @private
            Method to manage awareness of when components are added to their
            respective Container, firing an added event.
            References are established at add time rather than at render time.
            @param {Ext.Container} container Container which holds the component
            @param {number} pos Position at which the component was added
            </summary>
        </member>
        <member name="M:Ext.lib.Component.onRemoved">
            <summary>
            @private
            Method to manage awareness of when components are removed from their
            respective Container, firing an removed event. References are properly
            cleaned up after removing a component from its owning container.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.previousSibling(System.Object)">
            <summary>
            <p>Returns the previous sibling of this Component.</p>
            <p>Optionally selects the previous sibling which matches the passed {@link Ext.ComponentQuery ComponentQuery} selector.</p>
            <p>May also be refered to as <code><b>prev()</b></code></p>
            @param selector Optional. A {@link Ext.ComponentQuery ComponentQuery} selector to filter the preceding items.
            @returns The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.removeCls">
            <summary>
            Removes a CSS class from the top level element representing this component.
            @returns {Ext.Component} Returns the Component to allow method chaining.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setDisabled(System.Boolean)">
            <summary>
            Enable or disable the component.
            @param {Boolean} disabled
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setDocked(System.Object,System.Object)">
            <summary>
            Sets the dock position of this component in its parent panel. Note that
            this only has effect if this item is part of the dockedItems collection
            of a parent that has a DockLayout (note that any Panel has a DockLayout
            by default)
            @return {Component} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setHeight(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the height of the component.  This method fires the {@link #resize} event.
            @param {Number} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS height style.</li>
            <li><i>undefined</i> to leave the height unchanged.</li>
            </ul></div>
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setLoading(System.Object,System.Boolean)">
            <summary>
            This method allows you to show or hide a LoadMask on top of this component.
            @param {Boolean/Object} load True to show the default LoadMask or a config object
            that will be passed to the LoadMask constructor. False to hide the current LoadMask.
            @param {Boolean} targetEl True to mask the targetEl of this Component instead of the this.el.
            For example, setting this to true on a Panel will cause only the body to be masked. (defaults to false)
            @return {Ext.LoadMask} The LoadMask instance that has just been shown.
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setPosition(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
            This method fires the {@link #move} event.
            @param {Number} left The new left
            @param {Number} top The new top
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setSize(System.Object,System.Object)">
            <summary>
            Sets the width and height of this Component. This method fires the {@link #resize} event. This method can accept
            either width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.
            @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS width style.</li>
            <li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
            <li><code>undefined</code> to leave the width unchanged.</li>
            </ul></div>
            @param {Mixed} height The new height to set (not required if a size object is passed as the first arg).
            This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
            <li><code>undefined</code> to leave the height unchanged.</li>
            </ul></div>
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setVisible(System.Boolean)">
            <summary>
            Convenience function to hide or show this component by boolean.
            @param {Boolean} visible True to show, false to hide
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="M:Ext.lib.Component.setWidth(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the width of the component.  This method fires the {@link #resize} event.
            @param {Number} width The new width to setThis may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS width style.</li>
            </ul></div>
            @return {Ext.Component} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.lib.Component.up(SharpKit.JavaScript.JsString)" -->
        <member name="M:Ext.lib.Component.update(System.Object,System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            Update the content area of a component.
            @param {Mixed} htmlOrData
            If this component has been configured with a template via the tpl config
            then it will use this argument as data to populate the template.
            If this component was not configured with a template, the components
            content area will be updated via Ext.Element update
            @param {Boolean} loadScripts
            (optional) Only legitimate when using the html configuration. Defaults to false
            @param {Function} callback
            (optional) Only legitimate when using the html configuration. Callback to execute when scripts have finished loading
            </summary>
        </member>
        <member name="P:Ext.lib.Component.allowDomMove">
            <summary>
            @cfg {Number} maxWidth
            <p>The maximum value in pixels which this Component will set its width to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.Component.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to this components's element. This will also be prepended to
            elements within this component like Panel's body will get a class x-panel-body. This means
            that if you create a subclass of Panel, and you want it to get all the Panels styling for the
            element and the body, you leave the baseCls x-panel and use componentCls to add specific styling for this
            component.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.BubbleTarget">
            <summary>
            Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
            @return {Ext.Container} the Container which owns this Component.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.disabled">
            <summary>
            @cfg {Boolean} disabled
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.Disabled">
            <summary>
            Enable or disable the component.
            @param {Boolean} disabled
            </summary>
        </member>
        <member name="P:Ext.lib.Component.disabledCls">
            <summary>
            @cfg {String} disabledCls
            CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.draggable">
            <summary>
            Read-only property indicating whether or not the component can be dragged
            @property draggable
            @type {Boolean}
            </summary>
        </member>
        <member name="P:Ext.lib.Component.floating">
            <summary>
            @cfg {Boolean} floating
            Create the Component as a floating and use absolute positioning.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.Height">
            <summary>
            Sets the height of the component.  This method fires the {@link #resize} event.
            @param {Number} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS height style.</li>
            <li><i>undefined</i> to leave the height unchanged.</li>
            </ul></div>
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="P:Ext.lib.Component.hidden">
            <summary>
            @cfg {Boolean} hidden
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.isComponent">
            <summary>
            @class Ext.lib.Component
            @extends Ext.util.Observable
            Shared Component class
            </summary>
        </member>
        <member name="P:Ext.lib.Component.rendered">
            <summary>
            Read-only property indicating whether or not the component has been rendered.
            @property rendered
            @type {Boolean}
            </summary>
        </member>
        <member name="P:Ext.lib.Component.renderTpl">
            <summary>
            @cfg {Mixed} renderTpl
            <p>An {@link Ext.XTemplate XTemplate} used to create the internal structure inside this Component's
            encapsulating {@link #getEl Element}.</p>
            <p>You do not normally need to specify this. For the base classes {@link Ext.Component}
            and {@link Ext.Container}, this defaults to <b><code>null</code></b> which means that they will be initially rendered
            with no internal structure; they render their {@link #getEl Element} empty. The more specialized ExtJS and Touch classes
            which use a more complex DOM structure, provide their own template definitions.</p>
            <p>This is intended to allow the developer to create application-specific utility Components with customized
            internal structure.</p>
            <p>Upon rendering, any created child elements may be automatically imported into object properties using the
            {@link #renderSelectors} option.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.Component.Size">
            <summary>
            Gets the current size of the component's underlying element.
            @return {Object} An object containing the element's size {width: (element width), height: (element height)}
            </summary>
        </member>
        <member name="P:Ext.lib.Component.styleHtmlCls">
            <summary>
            @cfg {String} styleHtmlCls
            The class that is added to the content target when you set styleHtmlContent to true.
            Defaults to 'x-html'
            </summary>
        </member>
        <member name="P:Ext.lib.Component.styleHtmlContent">
            <summary>
            @cfg {String} styleHtmlContent
            True to automatically style the html inside the content target of this component (body for panels).
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.Component.tplWriteMode">
            <summary>
            @cfg {String} tplWriteMode The Ext.(X)Template method to use when
            updating the content area of the Component. Defaults to <code>'overwrite'</code>
            (see <code>{@link Ext.XTemplate#overwrite}</code>).
            </summary>
        </member>
        <member name="P:Ext.lib.Component.Visible">
            <summary>
            Convenience function to hide or show this component by boolean.
            @param {Boolean} visible True to show, false to hide
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="P:Ext.lib.Component.Width">
            <summary>
            Sets the width of the component.  This method fires the {@link #resize} event.
            @param {Number} width The new width to setThis may be one of:<div class="mdetail-params"><ul>
            <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
            <li>A String used to set the CSS width style.</li>
            </ul></div>
            @return {Ext.Component} this
            </summary>
        </member>
        <member name="P:Ext.lib.Component.XTypes">
            <summary>
            <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
            available xtypes, see the {@link Ext.Component} header.</p>
            <p><b>If using your own subclasses, be aware that a Component must register its own xtype
            to participate in determination of inherited xtypes.</b></p>
            <p>Example usage:</p>
            <pre><code>
            var t = new Ext.form.Text();
            alert(t.getXTypes());  // alerts 'component/field/textfield'
            </code></pre>
            @return {String} The xtype hierarchy string
            </summary>
        </member>
        <member name="M:Ext.Component.hide(System.Object)">
            <summary>
            Hide the component
            @param {Object/String/Boolean} animation (optional) Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Component.setCentered(System.Boolean,System.Object)">
            <summary>
            Show this component centered of its parent or the window
            This only applies when the component is floating.
            @param {Boolean} centered True to center, false to remove centering
            @returns {Ext.Component} this
            </summary>
        </member>
        <member name="M:Ext.Component.setDraggable(System.Object,System.Boolean)">
            <summary>
            Sets a Component as draggable.
            @param {Boolean/Mixed} draggable On first call, this can be a config object for {@link Ext.util.Draggable}.
            Afterwards, if set to false, the existing draggable object will be disabled
            @param {Boolean} autoShow
            </summary>
        </member>
        <member name="M:Ext.Component.setFloating(System.Boolean,System.Boolean)">
            <summary>
            Sets a Component as floating.
            @param {Boolean} floating
            @param {Boolean} autoShow
            </summary>
        </member>
        <member name="M:Ext.Component.setOrientation(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Sets the orientation for the Panel.
            @param {String} orientation 'landscape' or 'portrait'
            @param {Number/String} width New width of the Panel.
            @param {Number/String} height New height of the Panel.
            </summary>
        </member>
        <member name="M:Ext.Component.setScrollable(System.Object)">
            <summary>
            Sets a Component as scrollable.
            @param {Mixed} config
            Acceptable values are a Ext.Scroller configuration, 'horizontal', 'vertical', 'both', and false
            </summary>
        </member>
        <member name="M:Ext.Component.show(System.Object)">
            <summary>
            Show the component.
            @param {Object/String/Boolean} animation (optional) Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Component.showBy(System.Object,System.Object,System.Boolean,System.Object)">
            <summary>
            Show this component relative another component or element.
            @param {Mixed} alignTo Element or Component
            @param {Object/String/Boolean} animation
            @param {Boolean} allowOnSide true to allow this element to be aligned on the left or right.
            @returns {Ext.Component} this
            </summary>
        </member>
        <member name="P:Ext.Component.centered">
            <summary>
            @cfg {Boolean} centered
            Center the Component. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Component.floatingCls">
            <summary>
            @cfg {Boolean} floatingCls
            The class that is being added to this component when its floating.
            (defaults to x-floating)
            </summary>
        </member>
        <member name="P:Ext.Component.fullscreen">
            <summary>
            @cfg {Boolean} fullscreen
            Force the component to take up 100% width and height available. Defaults to false.
            Setting this configuration immediately sets the monitorOrientation config to true.
            Setting this to true will render the component instantly.
            </summary>
        </member>
        <member name="P:Ext.Component.hideOnMaskTap">
            <summary>
            @cfg {Boolean} hideOnMaskTap
            True to automatically bind a tap listener to the mask that hides the window.
            Defaults to true. Note: if you set this property to false you have to programmaticaly
            hide the overlay.
            </summary>
        </member>
        <member name="P:Ext.Component.layoutOnOrientationChange">
            <summary>
            @cfg {Boolean} layoutOnOrientationChange
            Set this to true to automatically relayout this component on orientation change.
            This property is set to true by default if a component is floating unless you specifically
            set this to false. Also note that you dont have to set this property to true if this component
            is a child of a fullscreen container, since fullscreen components are also laid out automatically
            on orientation change.
            Defaults to <tt>null</tt>
            </summary>
        </member>
        <member name="P:Ext.Component.modal">
            <summary>
            @cfg {Boolean} modal
            True to make the Component modal and mask everything behind it when displayed, false to display it without
            restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Component.monitorOrientation">
            <summary>
            @cfg {Boolean} monitorOrientation
            Monitor Orientation change
            </summary>
        </member>
        <member name="P:Ext.Component.Scrollable">
            <summary>
            Sets a Component as scrollable.
            @param {Mixed} config
            Acceptable values are a Ext.Scroller configuration, 'horizontal', 'vertical', 'both', and false
            </summary>
        </member>
        <member name="P:Ext.Component.showAnimation">
            <summary>
            @cfg {Object/String/Boolean} showAnimation
            The type of animation you want to use when this component is shown. If you set this
            this hide animation will automatically be the opposite.
            </summary>
        </member>
        <member name="P:Ext.Component.stopMaskTapEvent">
            <summary>
            @cfg {Boolean} stopMaskTapEvent
            True to stop the event that fires when you click outside the floating component.
            Defalts to true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.lib.Container.add" -->
        <member name="M:Ext.lib.Container.child(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves the first direct child of this container which matches the passed selector.
            The passed in selector must comply with an Ext.ComponentQuery selector.
            @param {String} selector An Ext.ComponentQuery selector
            @return Ext.Component
            </summary>
        </member>
        <member name="M:Ext.lib.Container.doLayout">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component
            to an already rendered container, or possibly after changing sizing/position properties of child components.
            @return {Ext.Container} this
            </summary>
        </member>
        <member name="M:Ext.lib.Container.down(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves the first descendant of this container which matches the passed selector.
            The passed in selector must comply with an Ext.ComponentQuery selector.
            @param {String} selector An Ext.ComponentQuery selector
            @return Ext.Component
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.lib.Container.getComponent(System.Object)" -->
        <member name="M:Ext.lib.Container.getLayout">
            <summary>
            Returns the {@link Ext.layout.ContainerLayout layout} instance currently associated with this Container.
            If a layout has not been instantiated yet, that is done first
            @return {Ext.layout.ContainerLayout} The layout
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.lib.Container.insert(SharpKit.JavaScript.JsNumber,Ext.Component)" -->
        <member name="M:Ext.lib.Container.query(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves all descendant components which match the passed selector.
            Executes an Ext.ComponentQuery.query using this container as its root.
            @param {String} selector Selector complying to an Ext.ComponentQuery selector
            @return {Array} Ext.Component's which matched the selector
            </summary>
        </member>
        <member name="M:Ext.lib.Container.remove(System.Object,System.Boolean)">
            <summary>
            Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
            the {@link #remove} event after the component has been removed.
            @param {Component/String} component The component reference or id to remove.
            @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
            Defaults to the value of this Container's {@link #autoDestroy} config.
            @return {Ext.Component} component The Component that was removed.
            </summary>
        </member>
        <member name="M:Ext.lib.Container.removeAll(System.Boolean)">
            <summary>
            Removes all components from this container.
            @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
            Defaults to the value of this Container's {@link #autoDestroy} config.
            @return {Array} Array of the destroyed components
            </summary>
        </member>
        <member name="P:Ext.lib.Container.autoDestroy">
            <summary>
            If true the container will automatically destroy any contained component that is removed from it, else
            destruction must be handled manually (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.lib.Container.defaultType">
            <summary>
            <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
            a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
            <p>Defaults to <code>'panel'</code>.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.Container.isContainer">
            <summary>
            <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
            a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
            <p>Defaults to <code>'panel'</code>.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.Container.Layout">
            <summary>
            Returns the {@link Ext.layout.ContainerLayout layout} instance currently associated with this Container.
            If a layout has not been instantiated yet, that is done first
            @return {Ext.layout.ContainerLayout} The layout
            </summary>
        </member>
        <member name="M:Ext.Container.disable">
            <summary>
            Disable this container by masking out
            </summary>
        </member>
        <member name="M:Ext.Container.enable">
            <summary>
            Enable this container by removing mask
            </summary>
        </member>
        <member name="M:Ext.Container.getActiveItem">
            <summary>
            Returns the current activeItem for the layout (only for a card layout)
            @return {activeItem} activeItem Current active component
            </summary>
        </member>
        <member name="M:Ext.Container.initComponent">
            <summary>
            @cfg {String/Mixed} cardSwitchAnimation
            Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
            Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="M:Ext.Container.onBeforeCardSwitch(Ext.Component,Ext.Component,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            A template method that can be implemented by subclasses of
            Container. By returning false we can cancel the card switch.
            @param {Ext.Component} newCard The card that will be switched to
            @param {Ext.Component} oldCard The card that will be switched from
            @param {Number} newIndex The Container index position of the selected card
            @param {Boolean} animated True if this cardswitch will be animated
            @private
            </summary>
        </member>
        <member name="M:Ext.Container.onCardSwitch(Ext.Component,Ext.Component,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            A template method that can be implemented by subclasses of
            Container. If the card is switched using an animation, this method
            will be called after the animation has finished.
            @param {Ext.Component} newCard The card that has been switched to
            @param {Ext.Component} oldCard The card that has been switched from
            @param {Number} newIndex The Container index position of the selected card
            @param {Boolean} animated True if this cardswitch was animated
            @private
            </summary>
        </member>
        <member name="M:Ext.Container.setActiveItem(System.Object,System.Object)">
            <summary>
            Allows you to set the active card in this container. This
            method is only available if the container uses a CardLayout.
            Note that a Carousel and TabPanel both get a CardLayout
            automatically, so both of those components are able to use this method.
            @param {Ext.Component/Number/Object} card The card you want to be made active. A number
            is interpreted as a card index. An object will be converted to a Component using the
            objects xtype property, then added to the container and made active. Passing a Component
            will make sure the component is a child of this container, and then make it active.
            @param {String/Object} cardSwitchAnimation (optional) The cardSwitchAnimation used to switch between the cards.
            This can be an animation type string or an animation configuration object.
            @return {Ext.Container} this
            </summary>
        </member>
        <member name="P:Ext.Container.cardSwitchAnimation">
            <summary>
            @cfg {String/Mixed} cardSwitchAnimation
            Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
            Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.addDocked(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adds docked item(s) to the panel.
            @param {Object/Array} component. The Component or array of components to add. The components
            must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
            'bottom', 'left').
            @param {Number} pos (optional) The index at which the Component will be added
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.getComponent(System.Object)">
            <summary>
            Attempts a default component lookup (see {@link Ext.Container#getComponent}). If the component is not found in the normal
            items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).
            @param {String/Number} comp The docked component id or itemId to find
            @return {Ext.Component} The docked component, if found
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.getDockedComponent(System.Object)">
            <summary>
            Finds a docked component by id, itemId or position
            @param {String/Number} comp The id, itemId or position of the child component (see {@link #getComponent} for details)
            @return {Ext.Component} The component (if found)
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.getDockedItems">
            <summary>
            Retrieve an array of all currently docked components.
            @return {Array} An array of components.
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.initBodyStyles">
            <summary>
            Function description
            @return {String} A CSS style string with style, padding, margin and border.
            @private
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.lib.Panel.initComponent" -->
        <member name="M:Ext.lib.Panel.initRenderData">
            <summary>
            Initialized the renderData to be used when rendering the renderTpl.
            @return {Object} Object with keys and values that are going to be applied to the renderTpl
            @private
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.insertDocked(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Inserts docked item(s) to the panel at the indicated position.
            @param {Number} pos The index at which the Component will be inserted
            @param {Object/Array} component. The Component or array of components to add. The components
            must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
            'bottom', 'left').
            </summary>
        </member>
        <member name="M:Ext.lib.Panel.removeDocked(Ext.Component,System.Boolean)">
            <summary>
            Removes the docked item from the panel.
            @param {Ext.Component} item. The Component to remove.
            @param {Boolean} autoDestroy (optional) Destroy the component after removal.
            </summary>
        </member>
        <member name="P:Ext.lib.Panel.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
            </summary>
        </member>
        <member name="P:Ext.lib.Panel.DockedItems">
            <summary>
            Retrieve an array of all currently docked components.
            @return {Array} An array of components.
            </summary>
        </member>
        <member name="P:Ext.lib.Panel.isPanel">
            <summary>
            @cfg {Number/Boolean} bodyBorder
            A shortcut for setting a border style on the body element. The value can either be
            a number to be applied to all sides, or a normal css string describing borders.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.Panel.scroll">
            <summary>
            @class Ext.Panel
            @extends Ext.lib.Panel
            <p>Panel is a container that has specific functionality and structural components that make
            it the perfect building block for application-oriented user interfaces.</p>
            <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
            of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
            <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
            to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
            those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
            default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
            child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
            at all.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #fullscreen}</li>
            <li>{@link #layout}</li>
            <li>{@link #items}</li>
            <li>{@link #dockedItems}</li>
            <li>{@link #html}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #show}</li>
            <li>{@link #hide}</li>
            <li>{@link #showBy}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Panel/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var panel = new Ext.Panel({
            fullscreen: true,
            dockedItems: [
            {
            dock : 'top',
            xtype: 'toolbar',
            title: 'Standard Titlebar'
            },
            {
            dock : 'top',
            xtype: 'toolbar',
            ui   : 'light',
            items: [
            {
            text: 'Test Button'
            }
            ]
            }
            ],
            html: 'Testing'
            });</code></pre>
            @constructor
            Create a new Panel
            @param {Object} config The config object
            @xtype panel
            </summary>
        </member>
        <member name="P:Ext.Sheet.baseCls">
            <summary>
            @class Ext.Sheet
            @extends Ext.Panel
            *
            <p>A general sheet class.  This renderable container provides base support for orientation-aware
            transitions for popup or side-anchored sliding Panels.</p>
            *
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var sheet = new Ext.Sheet({
            height  : 200,
            stretchX: true,
            stretchY: true,
            layout: {
            type: 'hbox',
            align: 'stretch'
            },
            dockedItems: [
            {
            dock : 'bottom',
            xtype: 'button',
            text : 'Click me'
            }
            ]
            });
            sheet.show();
            </code></pre>
            <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
            @xtype sheet
            </summary>
        </member>
        <member name="P:Ext.Sheet.centered">
            <summary>
            @class Ext.Sheet
            @extends Ext.Panel
            *
            <p>A general sheet class.  This renderable container provides base support for orientation-aware
            transitions for popup or side-anchored sliding Panels.</p>
            *
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var sheet = new Ext.Sheet({
            height  : 200,
            stretchX: true,
            stretchY: true,
            layout: {
            type: 'hbox',
            align: 'stretch'
            },
            dockedItems: [
            {
            dock : 'bottom',
            xtype: 'button',
            text : 'Click me'
            }
            ]
            });
            sheet.show();
            </code></pre>
            <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
            @xtype sheet
            </summary>
        </member>
        <member name="P:Ext.Sheet.enter">
            <summary>
            @cfg {String} enter
            The viewport side from which to anchor the sheet when made visible (top, bottom, left, right)
            Defaults to 'bottom'
            </summary>
        </member>
        <member name="P:Ext.Sheet.enterAnimation">
            <summary>
            @cfg {String/Object} enterAnimation
            the named Ext.anim effect or animation configuration object used for transitions
            when the component is shown. Defaults to 'slide'
            </summary>
        </member>
        <member name="P:Ext.Sheet.exit">
            <summary>
            @cfg {String} exit
            The viewport side used as the exit point when hidden (top, bottom, left, right)
            Applies to sliding animation effects only. Defaults to 'bottom'
            </summary>
        </member>
        <member name="P:Ext.Sheet.exitAnimation">
            <summary>
            *
            @cfg {String/Object} exitAnimation
            the named Ext.anim effect or animation configuration object used for transitions
            when the component is hidden. Defaults to 'slide'
            </summary>
        </member>
        <member name="P:Ext.Sheet.hideOnMaskTap">
            <summary>
            @cfg {Boolean} hideOnMaskTap
            True to automatically bind a tap listener to the mask that hides the window.
            Defaults to false. Note: if you don't set this property to false you have to programmaticaly
            hide the overlay.
            </summary>
        </member>
        <member name="P:Ext.ActionSheet.componentCls">
            <summary>
            @class Ext.ActionSheet
            @extends Ext.Sheet
            *
            <p>A Button Sheet class designed to popup or slide/anchor a series of buttons.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.ActionSheet/screenshot.png" /></p>
            *
            <h2>Example code:</h2>
            <pre><code>
            var actionSheet = new Ext.ActionSheet({
            items: [
            {
            text: 'Delete draft',
            ui  : 'decline'
            },
            {
            text: 'Save draft'
            },
            {
            text: 'Cancel',
            ui  : 'confirm'
            }
            ]
            });
            actionSheet.show();</code></pre>
            @xtype sheet
            </summary>
        </member>
        <member name="T:Ext.Ajax">
            <summary>
            @class Ext.Ajax
            @extends Ext.data.Connection
            A singleton instance of an {@link Ext.data.Connection}.
            @singleton
            </summary>
        </member>
        <member name="T:Ext.Anim">
            <summary>
            @class Ext.Anim
            @extends Object
            <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
            properties defined below.</p>
            <h2>Example usage:</h2>
            <code><pre>
            Ext.Anim.run(this, 'fade', {
            out: false,
            autoClear: true
            });
            </pre></code>
            <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
            @singleton
            </summary>
        </member>
        <member name="M:Ext.Anim.run(System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Used to run an animation on a specific element. Use the config argument to customize the animation
            @param {Ext.Element/Element} el The element to animate
            @param {String} anim The animation type, defined in {@link #Ext.anims}
            @param {Object} config The config object for the animation
            @method run
            </summary>
        </member>
        <member name="P:Ext.Anim.disableAnimations">
            <summary>
            @cfg {Boolean} disableAnimations
            True to disable animations. By default, animations are disabled on Android and Blackberry
            </summary>
        </member>
        <member name="P:Ext.Anim.isAnim">
            <summary>
            @class Ext.Anim
            @extends Object
            <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
            properties defined below.</p>
            <h2>Example usage:</h2>
            <code><pre>
            Ext.Anim.run(this, 'fade', {
            out: false,
            autoClear: true
            });
            </pre></code>
            <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
            @singleton
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.autoClear">
            <summary>
            True to remove all custom CSS defined in the {@link #to} config when the animation is over.
            (Defaults to true).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.before">
            <summary>
            Code to execute before starting the animation.
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.delay">
            <summary>
            Time to delay before starting the animation.
            (Defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.direction">
            <summary>
            Valid values are 'left', 'right', 'up', 'down' and null.
            (Defaults to null).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.disableAnimations">
            <summary>
            True to disable animations. By default, animations are disabled on Android and Blackberry
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.duration">
            <summary>
            Time in milliseconds for the animation to last.
            (Defaults to 250).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.easing">
            <summary>
            Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out' or a cubic-bezier curve as defined by CSS.
            (Defaults to 'ease-in-out').
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.from">
            <summary>
            An object of CSS values which the animation begins with. If you define a CSS property here, you must also
            define it in the {@link #to} config.
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.out">
            <summary>
            True if you want the animation to slide out of the screen.
            (Defaults to true).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.reverse">
            <summary>
            True to reverse the animation direction. For example, if the animation direction was set to 'left', it would
            then use 'right'.
            (Defaults to false).
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.scope">
            <summary>
            Scope to run the {@link before} function in.
            </summary>
        </member>
        <member name="P:Ext.AnimConfig.to">
            <summary>
            An object of CSS values which the animation ends with. If you define a CSS property here, you must also
            define it in the {@link #from} config.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Application" -->
        <member name="M:Ext.Application.bindReady">
            <summary>
            @private
            We bind this outside the constructor so that we can cancel it in the test environment
            </summary>
        </member>
        <member name="M:Ext.Application.#ctor(System.Object)">
            <summary>
            @cfg {Object} profiles A set of named profile specifications that this application supports. See the intro
            docs for an example
            </summary>
        </member>
        <member name="M:Ext.Application.determineProfile(System.Boolean)">
            <summary>
            Calls each configured {@link #profile} function, marking the first one that returns true as the current
            application profile. Fires the 'beforeprofilechange' and 'profilechange' events if the profile has changed
            @param {Boolean} silent If true, the events profilechange event is not fired
            </summary>
        </member>
        <member name="M:Ext.Application.dispatch(System.Object)">
            <summary>
            Dispatches to a given controller/action combo with optional arguments.
            @param {Object} options Object containing strings referencing the controller and action to dispatch
            to, plus optional args array
            @return {Boolean} True if the controller and action were found and dispatched to, false otherwise
            </summary>
        </member>
        <member name="M:Ext.Application.getProfile">
            <summary>
            Gets the name of the currently-detected application profile
            @return {String} The profile name
            </summary>
        </member>
        <member name="M:Ext.Application.initLoadMask">
            <summary>
            @private
            Initializes the loading mask, called automatically by onReady if {@link #useLoadMask} is configured
            </summary>
        </member>
        <member name="M:Ext.Application.onBeforeLaunch">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Application.onHistoryChange(System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Application.onReady">
            <summary>
            @private
            Called when the DOM is ready. Calls the application-specific launch function and dispatches to the
            first controller/action combo
            </summary>
        </member>
        <member name="M:Ext.Application.updateComponentProfiles(SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Sets the profile on every component on the page. Will probably refactor this to something less hacky.
            @param {String} profile The new profile name
            </summary>
        </member>
        <member name="P:Ext.Application.autoInitViewport">
            <summary>
            @cfg {Boolean} autoInitViewport Will automatically set up the application to work in full screen mode by calling
            {@link Ext.Viewport#init} if true (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Application.autoUpdateComponentProfiles">
            <summary>
            @cfg {Boolean} autoUpdateComponentProfiles If true, automatically calls {@link Ext.Component#setProfile} on
            all components whenever a application/device profile change is detected (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Application.loadMaskFadeDuration">
            <summary>
            @cfg {Number} loadMaskFadeDuration The number of milliseconds the load mask takes to fade out. Defaults to 1000
            </summary>
        </member>
        <member name="P:Ext.Application.loadMaskRemoveDuration">
            <summary>
            @cfg {Number} loadMaskRemoveDuration The number of milliseconds until the load mask is removed after starting the
            {@link #loadMaskFadeDuration fadeout}. Defaults to 1050.
            </summary>
        </member>
        <member name="P:Ext.Application.Profile">
            <summary>
            Gets the name of the currently-detected application profile
            @return {String} The profile name
            </summary>
        </member>
        <member name="P:Ext.Application.setProfilesOnLaunch">
            <summary>
            @cfg {Boolean} setProfilesOnLaunch If true, determines the current application profile on launch and calls
            {@link #updateComponentProfiles}. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Application.useHistory">
            <summary>
            @cfg {Boolean} useHistory True to automatically set up Ext.History support (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Application.useLoadMask">
            <summary>
            @cfg {Boolean/String} useLoadMask True to automatically remove an application loading mask when the
            DOM is ready. If set to true, this expects a div called "loading-mask" to be present in the body.
            Pass the id of some other DOM node if using a custom loading mask element. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.autoInitViewport">
            <summary>
            Will automatically set up the application to work in full screen mode by calling
            {@link Ext.Viewport#init} if true (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.autoUpdateComponentProfiles">
            <summary>
            If true, automatically calls {@link Ext.Component#setProfile} on
            all components whenever a application/device profile change is detected (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.defaultUrl">
            <summary>
            When the app is first loaded, this url will be redirected to. Defaults to undefined
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.loadMaskFadeDuration">
            <summary>
            The number of milliseconds the load mask takes to fade out. Defaults to 1000
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.loadMaskRemoveDuration">
            <summary>
            The number of milliseconds until the load mask is removed after starting the
            {@link #loadMaskFadeDuration fadeout}. Defaults to 1050.
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.name">
            <summary>
            The name of the Application. This should be the same as the single global variable that the
            application uses, and should not contain spaces
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.scope">
            <summary>
            The scope to execute the {@link #launch} function in. Defaults to the Application
            instance.
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.setProfilesOnLaunch">
            <summary>
            If true, determines the current application profile on launch and calls
            {@link #updateComponentProfiles}. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.useHistory">
            <summary>
            True to automatically set up Ext.History support (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.ApplicationConfig.useLoadMask">
            <summary>
            True to automatically remove an application loading mask when the
            DOM is ready. If set to true, this expects a div called "loading-mask" to be present in the body.
            Pass the id of some other DOM node if using a custom loading mask element. Defaults to false.
            </summary>
        </member>
        <member name="T:Ext.ApplicationManager">
            <summary>
            @class Ext.ApplicationManager
            @extends Ext.AbstractManager
            @singleton
            @ignore
            </summary>
        </member>
        <member name="T:Ext.apply">
            <summary>
            Copies all the properties of config to obj.
            @param {Object} object The receiver of the properties
            @param {Object} config The source of the properties
            @param {Object} defaults A different object that will also be applied for default values
            @return {Object} returns obj
            @member Ext apply
            </summary>
        </member>
        <member name="T:Ext.Audio">
            <summary>
            @class Ext.Audio
            @extends Ext.Media
            *
            <p>Provides a simple container for HTML5 Audio.</p>
            <p><i>Recommended types: Uncompressed WAV and AIF audio, MP3 audio, and AAC-LC or HE-AAC audio</i></p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #url}</li>
            <li>{@link #autoPause}</li>
            <li>{@link #autoResume}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #pause}</li>
            <li>{@link #play}</li>
            <li>{@link #toggle}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Audio/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var pnl = new Ext.Panel({
            fullscreen: true,
            items: [
            {
            xtype: 'audio',
            url  : "who-goingmobile.mp3"
            }
            ]
            });</code></pre>
            @xtype audio
            </summary>
        </member>
        <member name="T:Ext.Media">
            <summary>
            @class Ext.Media
            @extends Ext.Container
            *
            <p>Provides a base class for audio/visual controls. Should not be used directly.</p>
            @xtype media
            </summary>
        </member>
        <member name="M:Ext.Media.pause">
            <summary>
            Pauses media playback
            </summary>
        </member>
        <member name="M:Ext.Media.play">
            <summary>
            Starts or resumes media playback
            </summary>
        </member>
        <member name="M:Ext.Media.toggle">
            <summary>
            Toggles the media playback state
            </summary>
        </member>
        <member name="P:Ext.Media.autoPause">
            <summary>
            @cfg {Boolean} autoPause
            Will automatically pause the media when the container is deactivated.
            (Defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Media.autoResume">
            <summary>
            @cfg {Boolean} autoResume
            Will automatically start playing the media when the container is activated.
            (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Media.enableControls">
            <summary>
            @cfg {Boolean} enableControls
            Set this to false to turn off the native media controls
            (Defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Media.preload">
            <summary>
            @cfg {Boolean} preload
            Will begin preloading the media immediately.
            (Defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Media.url">
            <summary>
            @cfg {String} url
            Location of the media to play.
            </summary>
        </member>
        <member name="P:Ext.Audio.componentCls">
            <summary>
            @cfg {String} url
            Location of the audio to play.
            </summary>
        </member>
        <member name="P:Ext.AudioConfig.url">
            <summary>
            Location of the audio to play.
            </summary>
        </member>
        <member name="T:Ext.Button">
            <summary>
            @constructor
            Create a new button
            @param {Object} config The config object
            @xtype button
            </summary>
        </member>
        <member name="M:Ext.Button.createAutoHandler">
            <summary>
            @private
            If {@link #autoEvent} is set, this creates a handler function that automatically fires that configured
            event. This is called by initComponent and should never need to be called again.
            </summary>
        </member>
        <member name="M:Ext.Button.getBadgeText">
            <summary>
            Gets the text for this Button's badge
            @return {String} The button text
            </summary>
        </member>
        <member name="M:Ext.Button.getText">
            <summary>
            Gets the text for this Button
            @return {String} The button text
            </summary>
        </member>
        <member name="M:Ext.Button.initComponent">
            <summary>
            @cfg {String/Object} autoEvent If provided, a handler function is automatically created that fires
            the given event in the configured {@link #scope}.
            </summary>
        </member>
        <member name="M:Ext.Button.setBadge(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a badge overlay on the button for displaying notifications.
            @param {String} text The text going into the badge. If you pass null or undefined the badge will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setHandler(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Assigns this Button's click handler
            @param {Function} handler The function to call when the button is clicked
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function is executed.
            Defaults to this Button.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setIcon(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the background image (inline style) of the button.  This method also changes
            the value of the {@link icon} config internally.
            @param {String} icon The path to an image to display in the button. If you pass null or undefined the icon will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setIconAlign(SharpKit.JavaScript.JsString)">
            <summary>
            Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
            been defined, it will only set the value of the {@link iconAlign} internal config.
            @param {String} alignment The alignment you would like to align the button. Valid options are 'top', 'bottom', 'left', 'right'.
            If you pass false, it will remove the current iconAlign. If you pass nothing or an invalid alignment,
            it will default to the last used/default iconAlign.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setIconClass(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
            the value of the {@link iconCls} config internally.
            @param {String} cls The CSS class providing the icon image. If you pass null or undefined the iconCls will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="M:Ext.Button.setText(SharpKit.JavaScript.JsString)">
            <summary>
            Sets this Button's text
            @param {String} text The button text. If you pass null or undefined the text will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.Badge">
            <summary>
            Creates a badge overlay on the button for displaying notifications.
            @param {String} text The text going into the badge. If you pass null or undefined the badge will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.badgeCls">
            <summary>
            @cfg {String} badgeCls CSS class for badge
            Defaults to <tt>'x-badge'</tt>
            </summary>
        </member>
        <member name="P:Ext.Button.badgeText">
            <summary>
            @cfg {String} badgeText The text to be used for a small badge on the button.
            Defaults to <tt>''</tt>
            </summary>
        </member>
        <member name="P:Ext.Button.BadgeText">
            <summary>
            Gets the text for this Button's badge
            @return {String} The button text
            </summary>
        </member>
        <member name="P:Ext.Button.baseCls">
            <summary>
            @cfg {String} baseCls Base CSS class
            Defaults to <tt>'x-button'</tt>
            </summary>
        </member>
        <member name="P:Ext.Button.hasBadgeCls">
            <summary>
            @cfg {String} badgeCls CSS class for badge
            Defaults to <tt>'x-badge'</tt>
            </summary>
        </member>
        <member name="P:Ext.Button.Icon">
            <summary>
            Sets the background image (inline style) of the button.  This method also changes
            the value of the {@link icon} config internally.
            @param {String} icon The path to an image to display in the button. If you pass null or undefined the icon will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.iconAlign">
            <summary>
            @cfg {String} iconAlign The alignment of the buttons icon if one has been defined. Valid options
            are 'top', 'right', 'bottom', 'left' (defaults to 'left').
            </summary>
        </member>
        <member name="P:Ext.Button.IconAlign">
            <summary>
            Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
            been defined, it will only set the value of the {@link iconAlign} internal config.
            @param {String} alignment The alignment you would like to align the button. Valid options are 'top', 'bottom', 'left', 'right'.
            If you pass false, it will remove the current iconAlign. If you pass nothing or an invalid alignment,
            it will default to the last used/default iconAlign.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.IconClass">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
            the value of the {@link iconCls} config internally.
            @param {String} cls The CSS class providing the icon image. If you pass null or undefined the iconCls will be removed.
            @return {Ext.Button} this
            </summary>
        </member>
        <member name="P:Ext.Button.iconMask">
            <summary>
            @cfg {Boolean} iconMask
            Whether or not to mask the icon with the iconMaskCls configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Button.iconMaskCls">
            <summary>
            @cfg {String} iconMaskCls
            CSS class to be added to the iconEl when the iconMask config is set to true.
            Defaults to 'x-icon-mask'
            </summary>
        </member>
        <member name="P:Ext.Button.isButton">
            <summary>
            @cfg {String} ui
            Determines the UI look and feel of the button. Valid options are 'normal', 'back', 'round', 'action', 'forward'.
            Defaults to 'normal'.
            </summary>
        </member>
        <member name="P:Ext.Button.pressedCls">
            <summary>
            @cfg {String} pressedCls CSS class when the button is in pressed state
            Defaults to <tt>'x-button-pressed'</tt>
            </summary>
        </member>
        <member name="P:Ext.Button.pressedDelay">
            <summary>
            @cfg {Number} pressedDelay
            The amount of delay between the tapstart and the moment we add the pressedCls.
            Settings this to true defaults to 100ms
            </summary>
        </member>
        <member name="P:Ext.Button.Text">
            <summary>
            Sets this Button's text
            @param {String} text The button text. If you pass null or undefined the text will be removed.
            @return {Ext.Button} this
            Gets the text for this Button
            @return {String} The button text
            </summary>
        </member>
        <member name="P:Ext.Button.ui">
            <summary>
            @cfg {String} ui
            Determines the UI look and feel of the button. Valid options are 'normal', 'back', 'round', 'action', 'forward'.
            Defaults to 'normal'.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.badgeText">
            <summary>
            The text to be used for a small badge on the button.
            Defaults to <tt>''</tt>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.baseCls">
            <summary>
            Base CSS class
            Defaults to <tt>'x-button'</tt>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.cls">
            <summary>
            A CSS class string to apply to the button's main element.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.disabled">
            <summary>
            True to start disabled (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.handler">
            <summary>
            A function called when the button is clicked (can be used instead of click event).
            The handler is passed the following parameters:<div class="mdetail-params"><ul>
            <li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
            <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
            </ul></div>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.hidden">
            <summary>
            True to start hidden (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.icon">
            <summary>
            The path to an image to display in the button (the image will be set as the background-image
            CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconAlign">
            <summary>
            The alignment of the buttons icon if one has been defined. Valid options
            are 'top', 'right', 'bottom', 'left' (defaults to 'left').
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconMask">
            <summary>
            Whether or not to mask the icon with the iconMaskCls configuration. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.iconMaskCls">
            <summary>
            CSS class to be added to the iconEl when the iconMask config is set to true.
            Defaults to 'x-icon-mask'
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.pressedCls">
            <summary>
            CSS class when the button is in pressed state
            Defaults to <tt>'x-button-pressed'</tt>
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.pressedDelay">
            <summary>
            The amount of delay between the tapstart and the moment we add the pressedCls.
            Settings this to true defaults to 100ms
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.scope">
            <summary>
            The scope (<tt><b>this</b></tt> reference) in which the
            <code>{@link #handler}</code> and <code>{@link #toggleHandler}</code> is
            executed. Defaults to this Button.
            </summary>
        </member>
        <member name="P:Ext.ButtonConfig.text">
            <summary>
            The button text to be used as innerHTML (html tags are accepted)
            </summary>
        </member>
        <member name="T:Ext.Carousel">
            <summary>
            @class Ext.Carousel
            @extends Ext.Panel
            *
            <p>A customized Panel which provides the ability to slide back and forth between
            different child items.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #ui} (defines the style of the carousel)</li>
            <li>{@link #direction} (defines the direction of the carousel)</li>
            <li>{@link #indicator} (defines if the indicator show be shown)</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #next} (moves to the next card)</li>
            <li>{@link #prev} (moves to the previous card)</li>
            <li>{@link #setActiveItem} (moves to the passed card)</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Carousel/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var carousel = new Ext.Carousel({
            items: [
            {
            html: '&lt;p&gt;Navigate the carousel on this page by swiping left/right.&lt;/p&gt;',
            cls : 'card card1'
            },
            {
            html: '&lt;p&gt;Clicking on either side of the indicators below&lt;/p&gt;',
            cls : 'card card2'
            },
            {
            html: 'Card #3',
            cls : 'card card3'
            }
            ]
            });
            var panel = new Ext.Panel({
            cls: 'cards',
            layout: {
            type : 'vbox',
            align: 'stretch'
            },
            defaults: {
            flex: 1
            },
            items: [
            carousel,
            {
            xtype    : 'carousel',
            ui       : 'light',
            direction: 'vertical',
            items: [
            {
            html: '&lt;p&gt;Carousels can be vertical and given a ui of "light" or "dark".&lt;/p&gt;',
            cls : 'card card1'
            },
            {
            html: 'Card #2',
            cls : 'card card2'
            },
            {
            html: 'Card #3',
            cls : 'card card3'
            }
            ]
            }
            ]
            });
            </code></pre>
            @xtype carousel
            </summary>
        </member>
        <member name="M:Ext.Carousel.afterLayout">
            <summary>
            The afterLayout method on the carousel just makes sure the active card
            is still into view. It also makes sure the indicator is pointing to
            the right card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.getActiveIndex">
            <summary>
            Returns the index of the currently active card.
            @return {Number} The index of the currently active card.
            </summary>
        </member>
        <member name="M:Ext.Carousel.getCardIndexOffset(System.Object)">
            <summary>
            Returns the difference between the index of the active card and the passed card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.getCardOffset(System.Object)">
            <summary>
            Returns the amount of pixels from the current drag to a card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.isCardInRange(System.Object)">
            <summary>
            Returns true if the passed card is within 2 cards from the active card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.isHorizontal">
            <summary>
            Method to determine whether this Sortable is currently sorting.
            @return {Boolean} the sorting state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.Carousel.isVertical">
            <summary>
            Method to determine whether this Sortable is currently disabled.
            @return {Boolean} the disabled state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.Carousel.next">
            <summary>
            Switches the next card
            </summary>
        </member>
        <member name="M:Ext.Carousel.onBeforeCardSwitch(System.Object)">
            <summary>
            Here we make sure that the card we are switching to is not translated
            by the carousel anymore. This is only if we are switching card using
            the setActiveItem of setActiveItem methods and thus customDrag is not set
            to true.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.onCardSwitch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This function makes sure that all the cards are in correct locations
            after a card switch
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.onDrag(System.Object)">
            <summary>
            The onDrag method sets the currentScroll object. It also slows down the drag
            if we are at the bounds of the carousel.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.onDragEnd(System.Object,System.Object)">
            <summary>
            This determines if we are going to the next card, the previous card, or back to the active card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.prev">
            <summary>
            Switches the previous card
            </summary>
        </member>
        <member name="M:Ext.Carousel.scrollToCard(System.Object)">
            <summary>
            This is an internal function that is called in onDragEnd that goes to
            the next or previous card.
            @private
            </summary>
        </member>
        <member name="M:Ext.Carousel.updateCardPositions(System.Object)">
            <summary>
            This will update all the cards to their correct position based on the current drag.
            It can be passed true to animate the position updates.
            @private
            </summary>
        </member>
        <member name="P:Ext.Carousel.ActiveIndex">
            <summary>
            Returns the index of the currently active card.
            @return {Number} The index of the currently active card.
            </summary>
        </member>
        <member name="P:Ext.Carousel.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to the Carousel's element (defaults to <code>'x-carousel'</code>).
            </summary>
        </member>
        <member name="P:Ext.Carousel.direction">
            <summary>
            @cfg {String} direction
            The direction of the Carousel. Default is 'horizontal'. 'vertical' also available.
            </summary>
        </member>
        <member name="P:Ext.Carousel.indicator">
            <summary>
            @cfg {Boolean} indicator
            Provides an indicator while toggling between child items to let the user
            know where they are in the card stack.
            </summary>
        </member>
        <member name="P:Ext.Carousel.ui">
            <summary>
            @cfg {String} ui
            Style options for Carousel. Default is 'dark'. 'light' is also available.
            </summary>
        </member>
        <member name="T:Ext.Carousel.Indicator">
            <summary>
            @class Ext.Carousel.Indicator
            @extends Ext.Component
            @xtype carouselindicator
            @private
            *
            A private utility class used by Ext.Carousel to create indicators.
            </summary>
        </member>
        <member name="P:Ext.Carousel.Indicator.baseCls">
            <summary>
            @class Ext.Carousel.Indicator
            @extends Ext.Component
            @xtype carouselindicator
            @private
            *
            A private utility class used by Ext.Carousel to create indicators.
            </summary>
        </member>
        <member name="P:Ext.CarouselConfig.baseCls">
            <summary>
            The base CSS class to apply to the Carousel's element (defaults to <code>'x-carousel'</code>).
            </summary>
        </member>
        <member name="P:Ext.CarouselConfig.direction">
            <summary>
            The direction of the Carousel. Default is 'horizontal'. 'vertical' also available.
            </summary>
        </member>
        <member name="P:Ext.CarouselConfig.indicator">
            <summary>
            Provides an indicator while toggling between child items to let the user
            know where they are in the card stack.
            </summary>
        </member>
        <member name="P:Ext.CarouselConfig.ui">
            <summary>
            Style options for Carousel. Default is 'dark'. 'light' is also available.
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.centered">
            <summary>
            Center the Component. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.floatingCls">
            <summary>
            The class that is being added to this component when its floating.
            (defaults to x-floating)
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.fullscreen">
            <summary>
            Force the component to take up 100% width and height available. Defaults to false.
            Setting this configuration immediately sets the monitorOrientation config to true.
            Setting this to true will render the component instantly.
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.hideOnMaskTap">
            <summary>
            True to automatically bind a tap listener to the mask that hides the window.
            Defaults to true. Note: if you set this property to false you have to programmaticaly
            hide the overlay.
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.layoutOnOrientationChange">
            <summary>
            Set this to true to automatically relayout this component on orientation change.
            This property is set to true by default if a component is floating unless you specifically
            set this to false. Also note that you dont have to set this property to true if this component
            is a child of a fullscreen container, since fullscreen components are also laid out automatically
            on orientation change.
            Defaults to <tt>null</tt>
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.modal">
            <summary>
            True to make the Component modal and mask everything behind it when displayed, false to display it without
            restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.monitorOrientation">
            <summary>
            Monitor Orientation change
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.scroll">
            <summary>
            Configure the component to be scrollable. Acceptable values are:
            <ul>
            <li>'horizontal', 'vertical', 'both' to enabling scrolling for that direction.</li>
            <li>A {@link Ext.util.Scroller Scroller} configuration.</li>
            <li>false to explicitly disable scrolling.</li>
            </ul>
            Enabling scrolling immediately sets the monitorOrientation config to true (for {@link Ext.Panel Panel})
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.showAnimation">
            <summary>
            The type of animation you want to use when this component is shown. If you set this
            this hide animation will automatically be the opposite.
            </summary>
        </member>
        <member name="P:Ext.ComponentConfig.stopMaskTapEvent">
            <summary>
            True to stop the event that fires when you click outside the floating component.
            Defalts to true.
            </summary>
        </member>
        <member name="T:Ext.ComponentMgr">
            <summary>
            @class Ext.ComponentMgr
            @extends Ext.AbstractManager
            <p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass
            thereof) on a page so that they can be easily accessed by {@link Ext.Component component}
            {@link Ext.Component#id id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>
            <p>This object also provides a registry of available Component <i>classes</i>
            indexed by a mnemonic code known as the Component's {@link Ext.Component#xtype xtype}.
            The <code>{@link Ext.Component#xtype xtype}</code> provides a way to avoid instantiating child Components
            when creating a full, nested config object for a complete Ext page.</p>
            <p>A child Component may be specified simply as a <i>config object</i>
            as long as the correct <code>{@link Ext.Component#xtype xtype}</code> is specified so that if and when the Component
            needs rendering, the correct type can be looked up for lazy instantiation.</p>
            <p>For a list of all available <code>{@link Ext.Component#xtype xtypes}</code>, see {@link Ext.Component}.</p>
            @singleton
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.ComponentQuery" -->
        <member name="M:Ext.CompositeElement.add(System.Object,System.Object)">
            <summary>
            Adds elements to this Composite object.
            @param {Mixed} els Either an Array of DOM elements to add, or another Composite object who's elements should be added.
            @return {CompositeElement} This Composite object.
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.contains(System.Object)">
            <summary>
            Returns true if this composite contains the passed element
            @param {Mixed} el The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
            @return Boolean
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            <p>Calls the passed function for each element in this composite.</p>
            @param {Function} fn The function to call. The function is passed the following parameters:<ul>
            <li><b>el</b> : Element<div class="sub-desc">The current Element in the iteration.
            <b>This is the flyweight (shared) Ext.Element instance, so if you require a
            a reference to the dom node, use el.dom.</b></div></li>
            <li><b>c</b> : Composite<div class="sub-desc">This Composite object.</div></li>
            <li><b>idx</b> : Number<div class="sub-desc">The zero-based index in the iteration.</div></li>
            </ul>
            @param {Object} scope (optional) The scope (<i>this</i> reference) in which the function is executed. (defaults to the Element)
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.fill(System.Object)">
            <summary>
            Clears this Composite and adds the elements passed.
            @param {Mixed} els Either an array of DOM elements, or another Composite from which to fill this Composite.
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.filter(System.Object)">
            <summary>
            Filters this composite to only elements that match the passed selector.
            @param {String/Function} selector A string CSS selector or a comparison function.
            The comparison function will be called with the following arguments:<ul>
            <li><code>el</code> : Ext.Element<div class="sub-desc">The current DOM element.</div></li>
            <li><code>index</code> : Number<div class="sub-desc">The current index within the collection.</div></li>
            </ul>
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.first">
            <summary>
            Returns the first Element
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.getCount">
            <summary>
            Returns the number of elements in this Composite.
            @return Number
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.indexOf(System.Object)">
            <summary>
            Find the index of the passed element within the composite collection.
            @param {Mixed} el The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
            @return Number The index of the passed Ext.Element in the composite collection, or -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.item(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a flyweight Element of the dom element object at the specified index
            @param {Number} index
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.CompositeElement.last">
            <summary>
            Returns the last Element
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.addElements(System.Object,System.Object)">
            <summary>
            @class Ext.CompositeElementLite
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.removeElement(System.Object,System.Boolean)">
            <summary>
            Removes the specified element(s).
            @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
            or an array of any of those.
            @param {Boolean} removeDom (optional) True to also remove the element from the document
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="M:Ext.CompositeElementLite.replaceElement(System.Object,System.Object,System.Boolean)">
            <summary>
            Replaces the specified element with the passed element.
            @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
            to replace.
            @param {Mixed} replacement The id of an element or the Element itself.
            @param {Boolean} domReplace (Optional) True to remove and replace the element in the document too.
            @return {CompositeElement} this
            </summary>
        </member>
        <member name="P:Ext.ContainerConfig.cardSwitchAnimation">
            <summary>
            Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
            Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="T:Ext.Controller">
            <summary>
            @author Ed Spencer
            @class Ext.Controller
            @extends Ext.util.Observable
            @constructor
            </summary>
        </member>
        <member name="M:Ext.Controller.build">
            <summary>
            Callback automatically tied to the index view's 'build' event. By default this just renders the registered
            'build' view
            </summary>
        </member>
        <member name="M:Ext.Controller.closeView(Ext.Component)">
            <summary>
            @private
            Used internally whenever we want to remove a component from its parent container. See onCancelEdit and onCancelBuild
            @param {Ext.Component} view The component to close
            </summary>
        </member>
        <member name="M:Ext.Controller.#ctor(System.Object)">
            <summary>
            @author Ed Spencer
            @class Ext.Controller
            @extends Ext.util.Observable
            @constructor
            </summary>
        </member>
        <member name="M:Ext.Controller.control(System.Object,System.Object,System.Object)">
            <summary>
            This function allows you to add listeners to a view
            in a convenient way
            </summary>
        </member>
        <member name="M:Ext.Controller.create(System.Object,System.Object)">
            <summary>
            Saves a phantom Model instance via its configured Proxy. Fires the 'instance-created' event if successful,
            the 'instance-creation-failed' event if not.
            @param {Object} data The data to create the instance from
            @param {Object} options Optional options object containing callbacks for success and failure plus optional scope
            </summary>
        </member>
        <member name="M:Ext.Controller.destroy(Ext.data.Model,System.Object)">
            <summary>
            Destroys one or more existing, previously saved model instances
            @param {Ext.data.Model} instance The model instance to destroy
            @param {Object} options success and failure callbacks
            </summary>
        </member>
        <member name="M:Ext.Controller.edit(Ext.data.Model)">
            <summary>
            Renders the edit form for a given model instance
            @param {Ext.data.Model} instance The instance to edit
            </summary>
        </member>
        <member name="M:Ext.Controller.getBuildListeners">
            <summary>
            Returns the listeners to attach to the view rendered by the {@link #build} action. By default this returns listeners
            for save and cancel, but this can be overridden
            @return {Object} listeners
            </summary>
        </member>
        <member name="M:Ext.Controller.getEditListeners">
            <summary>
            Returns the listeners to attach to the view rendered by the {@link #edit} action. By default this returns listeners
            for save and cancel, but this can be overridden
            @return {Object} listeners
            </summary>
        </member>
        <member name="M:Ext.Controller.getModel">
            <summary>
            Returns the constructor for the model type linked to this controller
            @return {Ext.data.Model} The model constructor
            </summary>
        </member>
        <member name="M:Ext.Controller.onCancelBuild(Ext.Component)">
            <summary>
            Handler for the 'cancel' event fired by an {@link #build} view. By default this just closes the view
            @param {Ext.Component} view The build form
            </summary>
        </member>
        <member name="M:Ext.Controller.onCancelEdit(Ext.Component)">
            <summary>
            Handler for the 'cancel' event fired by an {@link #edit} view. By default this just closes the view
            @param {Ext.Component} view The edit form
            </summary>
        </member>
        <member name="M:Ext.Controller.onCreateInstance(System.Object)">
            <summary>
            Callback automatically tied to the index view's 'create' event. By default this just calls the controller's
            create function with the data and some basic callbacks to handle errors or show success. Can be overridden
            to provide custom behavior
            @param {Ext.View} view The view instance that fired the event
            </summary>
        </member>
        <member name="M:Ext.Controller.onDestroyInstance(Ext.data.Model,System.Object)">
            <summary>
            Callback automatically tied to the index view's 'destroy' event. By default that just calls the controller's
            destroy function with the model instance and some basic callbacks to handle errors or show success. Can be
            overridden to provide custom behavior.
            @param {Ext.data.Model} instance The instance to destroy
            @param {Ext.View} view The view instance that fired the event
            </summary>
        </member>
        <member name="M:Ext.Controller.onUpdateInstance(Ext.Component)">
            <summary>
            Callback automatically tied to the index view's 'update' event. By default this just calls the controller's
            update function with the data and some basic callbacks to handle errors or show success. Can be overridden
            to provide custom behavior
            @param {Ext.Component} view The view instance that fired the event
            </summary>
        </member>
        <member name="M:Ext.Controller.render(System.Object,System.Object)">
            <summary>
            Renders a given view based on a registered name
            @param {String} viewName The name of the view to render
            @param {Object} config Optional config object
            @return {Ext.View} The view instance
            </summary>
        </member>
        <member name="M:Ext.Controller.setRenderTarget(Ext.Container)">
            <summary>
            Sets the default container that components rendered using {@link #render} will be added to.
            In many applications there is a fixed navigation panel and a content panel - the content
            panel would usually form the render target in this type of setup.
            @param {Ext.Container} target The container to add rendered components to
            </summary>
        </member>
        <member name="M:Ext.Controller.update(Ext.data.Model,System.Object,System.Object)">
            <summary>
            Updates an existing model instance by applying optional updates to it and attempting to save
            @param {Ext.data.Model} instance The existing instance
            @param {Object} updates Optional additional updates to apply to the instance before saving
            @param {Object} options success and failure callback functions
            </summary>
        </member>
        <member name="P:Ext.Controller.BuildListeners">
            <summary>
            Returns the listeners to attach to the view rendered by the {@link #build} action. By default this returns listeners
            for save and cancel, but this can be overridden
            @return {Object} listeners
            </summary>
        </member>
        <member name="P:Ext.Controller.EditListeners">
            <summary>
            Returns the listeners to attach to the view rendered by the {@link #edit} action. By default this returns listeners
            for save and cancel, but this can be overridden
            @return {Object} listeners
            </summary>
        </member>
        <member name="P:Ext.Controller.Model">
            <summary>
            Returns the constructor for the model type linked to this controller
            @return {Ext.data.Model} The model constructor
            </summary>
        </member>
        <member name="P:Ext.Controller.RenderTarget">
            <summary>
            Sets the default container that components rendered using {@link #render} will be added to.
            In many applications there is a fixed navigation panel and a content panel - the content
            panel would usually form the render target in this type of setup.
            @param {Ext.Container} target The container to add rendered components to
            </summary>
        </member>
        <member name="T:Ext.ControllerManager">
            <summary>
            @author Ed Spencer
            @class Ext.ControllerManager
            @extends Ext.AbstractManager
            @singleton
            <p>Keeps track of all of the registered controllers. This should very rarely need to be used by developers. This
            is simply an {@link Ext.AbstractManager AbstractManager} with a custom {@link #register} function which sets up
            the controller and its linked {@link Ext.Application application}.</p>
            </summary>
        </member>
        <member name="T:Ext.DataView">
            <summary>
            @class Ext.DataView
            @extends Ext.Component
            A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}
            as its internal templating mechanism, and is bound to an {@link Ext.data.Store}
            so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
            provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
            mouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}
            config must be provided for the DataView to determine what nodes it will be working with.</b>
            *
            <p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>
            <pre><code>
            var store = new Ext.data.JsonStore({
            url: 'get-images.php',
            root: 'images',
            fields: [
            'name', 'url',
            {name:'size', type: 'float'},
            {name:'lastmod', type:'date', dateFormat:'timestamp'}
            ]
            });
            store.load();
            var tpl = new Ext.XTemplate(
            '&lt;tpl for="."&gt;',
            '&lt;div class="thumb-wrap" id="{name}"&gt;',
            '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
            '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
            '&lt;/tpl&gt;',
            '&lt;div class="x-clear"&gt;&lt;/div&gt;'
            );
            var panel = new Ext.Panel({
            id:'images-view',
            frame:true,
            width:535,
            autoHeight:true,
            collapsible:true,
            layout:'fit',
            title:'Simple DataView',
            items: new Ext.DataView({
            store: store,
            tpl: tpl,
            autoHeight:true,
            multiSelect: true,
            overCls:'x-view-over',
            itemSelector:'div.thumb-wrap',
            emptyText: 'No images to display'
            })
            });
            panel.render(document.body);
            </code></pre>
            @constructor
            Create a new DataView
            @param {Object} config The config object
            @xtype dataview
            </summary>
        </member>
        <member name="M:Ext.DataView.bindStore(System.Object,System.Object)">
            <summary>
            Changes the data store bound to this view and refreshes it.
            @param {Store} store The store to bind to this view
            </summary>
        </member>
        <member name="M:Ext.DataView.collectData(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsNumber)">
            <summary>
            <p>Function which can be overridden which returns the data object passed to this
            DataView's {@link #tpl template} to render the whole DataView.</p>
            <p>This is usually an Array of data objects, each element of which is processed by an
            {@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
            data object as an Array. However, <i>named</i> properties may be placed into the data object to
            provide non-repeating data such as headings, totals etc.</p>
            @param {Array} records An Array of {@link Ext.data.Model}s to be rendered into the DataView.
            @param {Number} startIndex the index number of the Record being prepared for rendering.
            @return {Array} An Array of data objects to be processed by a repeating XTemplate. May also
            contain <i>named</i> properties.
            </summary>
        </member>
        <member name="M:Ext.DataView.deselect(System.Object,System.Boolean)">
            <summary>
            Deselects a record instance by record instance or index.
            @param {Ext.data.Record/Index} records An array of records or an index
            @param {Boolean} suppressEvent Set to false to not fire a deselect event
            </summary>
        </member>
        <member name="M:Ext.DataView.findItemByChild(SharpKit.Html4.HtmlElement)">
            <summary>
            Returns the template node the passed child belongs to, or null if it doesn't belong to one.
            @param {HTMLElement} node
            @return {HTMLElement} The template node
            </summary>
        </member>
        <member name="M:Ext.DataView.findTargetByEvent(Ext.EventObject)">
            <summary>
            Returns the template node by the Ext.EventObject or null if it is not found.
            @param {Ext.EventObject} e
            </summary>
        </member>
        <member name="M:Ext.DataView.getNode(System.Object)">
            <summary>
            Gets a template node.
            @param {HTMLElement/String/Number/Ext.data.Model} nodeInfo An HTMLElement template node, index of a template node,
            the id of a template node or the record associated with the node.
            @return {HTMLElement} The node or null if it wasn't found
            </summary>
        </member>
        <member name="M:Ext.DataView.getNodes(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Gets a range nodes.
            @param {Number} start (optional) The index of the first node in the range
            @param {Number} end (optional) The index of the last node in the range
            @return {Array} An array of nodes
            </summary>
        </member>
        <member name="M:Ext.DataView.getRecord(SharpKit.Html4.HtmlElement)">
            <summary>
            Gets a record from a node
            @param {HTMLElement} node The node to evaluate
            @return {Record} record The {@link Ext.data.Model} object
            </summary>
        </member>
        <member name="M:Ext.DataView.getRecords(SharpKit.JavaScript.JsArray)">
            <summary>
            Gets an array of the records from an array of nodes
            @param {Array} nodes The nodes to evaluate
            @return {Array} records The {@link Ext.data.Model} objects
            </summary>
        </member>
        <member name="M:Ext.DataView.getSelectedNodes">
            <summary>
            Gets the currently selected nodes.
            @return {Array} An array of HTMLElements
            </summary>
        </member>
        <member name="M:Ext.DataView.getStore">
            <summary>
            Returns the store associated with this DataView.
            @return {Ext.data.Store} The store
            </summary>
        </member>
        <member name="M:Ext.DataView.indexOf(System.Object)">
            <summary>
            Finds the index of the passed node.
            @param {HTMLElement/String/Number/Record} nodeInfo An HTMLElement template node, index of a template node, the id of a template node
            or a record associated with a node.
            @return {Number} The index of the node or -1
            </summary>
        </member>
        <member name="M:Ext.DataView.isSelected(System.Object)">
            <summary>
            Returns true if the passed node is selected, else false.
            @param {HTMLElement/Number/Ext.data.Model} node The node, node index or record to check
            @return {Boolean} True if selected, else false
            </summary>
        </member>
        <member name="M:Ext.DataView.onDataChanged">
            <summary>
            @private
            Calls this.refresh if this.blockRefresh is not true
            </summary>
        </member>
        <member name="M:Ext.DataView.prepareAssociatedData(Ext.data.Model,SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            This complex-looking method takes a given Model instance and returns an object containing all data from
            all of that Model's *loaded* associations. It does this recursively - for example if we have a User which
            hasMany Orders, and each Order hasMany OrderItems, it will return an object like this:
            {
            orders: [
            {
            id: 123,
            status: 'shipped',
            orderItems: [
            ...
            ]
            }
            ]
            }
            This makes it easy to iterate over loaded associations in a DataView.
            @param {Ext.data.Model} record The Model instance
            @param {Array} ids PRIVATE. The set of Model instance internalIds that have already been loaded
            @return {Object} The nested data set for the Model's loaded associations
            </summary>
        </member>
        <member name="M:Ext.DataView.prepareData(System.Object,SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Function which can be overridden to provide custom formatting for each Record that is used by this
            DataView's {@link #tpl template} to render each node.
            @param {Array/Object} data The raw data object that was used to create the Record.
            @param {Number} recordIndex the index number of the Record being prepared for rendering.
            @param {Record} record The Record being prepared for rendering.
            @return {Array/Object} The formatted data in a format expected by the internal {@link #tpl template}'s overwrite() method.
            (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
            </summary>
        </member>
        <member name="M:Ext.DataView.refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template.
            </summary>
        </member>
        <member name="M:Ext.DataView.refreshNode(SharpKit.JavaScript.JsNumber)">
            <summary>
            Refreshes an individual node's data from the store.
            @param {Number} index The item's data index in the store
            </summary>
        </member>
        <member name="M:Ext.DataView.select(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Selects a record instance by record instance or index.
            @param {Ext.data.Record/Index} records An array of records or an index
            @param {Boolean} keepExisting
            @param {Boolean} suppressEvent Set to false to not fire a select event
            </summary>
        </member>
        <member name="P:Ext.DataView.blockRefresh">
            <summary>
            @cfg {Boolean} blockRefresh Set this to true to ignore datachanged events on the bound store. This is useful if
            you wish to provide custom transition animations via a plugin (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.DataView.deferEmptyText">
            <summary>
            @cfg {Boolean} deferEmptyText True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.DataView.emptyText">
            <summary>
            @cfg {String} emptyText
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.DataView.loadingText">
            <summary>
            @cfg {String} loadingText
            A string to display during data load operations (defaults to undefined).  If specified, this text will be
            displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
            contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="P:Ext.DataView.selectedItemCls">
            <summary>
            @cfg {String} selectedItemCls
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.DataView.SelectedNodes">
            <summary>
            Gets the currently selected nodes.
            @return {Array} An array of HTMLElements
            </summary>
        </member>
        <member name="P:Ext.DataView.Store">
            <summary>
            Returns the store associated with this DataView.
            @return {Ext.data.Store} The store
            </summary>
        </member>
        <member name="P:Ext.DataView.trackOver">
            <summary>
            @cfg {Boolean} trackOver True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.blockRefresh">
            <summary>
            Set this to true to ignore datachanged events on the bound store. This is useful if
            you wish to provide custom transition animations via a plugin (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.deferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.disableSelection">
            <summary>
            <p><tt>true</tt> to disable selection within the DataView. Defaults to <tt>false</tt>.
            This configuration will lock the selection model that the DataView uses.</p>
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.emptyText">
            <summary>
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.itemSelector">
            <summary>
            @required
            <b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or
            <tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be
            working with.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.loadingText">
            <summary>
            A string to display during data load operations (defaults to undefined).  If specified, this text will be
            displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
            contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.overItemCls">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.selectedItemCls">
            <summary>
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.store">
            <summary>
            @required
            The {@link Ext.data.Store} to bind this DataView to.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.tpl">
            <summary>
            @required
            The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should
            be specified in the same format expected by the constructor of {@link Ext.XTemplate}.
            </summary>
        </member>
        <member name="P:Ext.DataViewConfig.trackOver">
            <summary>
            True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.DatePicker" -->
        <member name="T:Ext.Picker">
            <summary>
            @class Ext.Picker
            @extends Ext.Sheet
            *
            <p>A general picker class.  Slots are used to organize multiple scrollable slots into a single picker. {@link #slots} is
            the only necessary property</p>
            <h2>Example usage:</h2>
            <pre><code>
            var picker = new Ext.Picker({
            slots: [
            {
            name : 'limit_speed',
            title: 'Speed',
            data : [
            {text: '50 KB/s', value: 50},
            {text: '100 KB/s', value: 100},
            {text: '200 KB/s', value: 200},
            {text: '300 KB/s', value: 300}
            ]
            }
            ]
            });
            picker.show();
            </code></pre>
            @constructor
            Create a new List
            @param {Object} config The config object
            @xtype picker
            </summary>
        </member>
        <member name="M:Ext.Picker.getValue">
            <summary>
            Returns the values of each of the pickers slots
            @return {Object} The values of the pickers slots
            </summary>
        </member>
        <member name="M:Ext.Picker.onCancelButtonTap">
            <summary>
            @private
            Called when the cancel button has been tapped.
            </summary>
        </member>
        <member name="M:Ext.Picker.onDoneButtonTap">
            <summary>
            @private
            Called when the done button has been tapped.
            </summary>
        </member>
        <member name="M:Ext.Picker.onSlotPick(System.Object,System.Object,System.Object)">
            <summary>
            @private
            Called when a slot has been picked.
            </summary>
        </member>
        <member name="M:Ext.Picker.setValue(System.Object,System.Boolean)">
            <summary>
            Sets the values of the pickers slots
            @param {Object} values The values in a {name:'value'} format
            @param {Boolean} animated True to animate setting the values
            @return {Ext.Picker} this This picker
            </summary>
        </member>
        <member name="P:Ext.Picker.cancelButton">
            <summary>
            @cfg {String/Mixed} doneButton
            Can be either:<ul>
            <li>A {String} text to be used on the Done button</li>
            <li>An {Object} as config for {@link Ext.Button}</li>
            <li>false or null to hide it</li></ul>
            *
            Defaults to 'Done'.
            </summary>
        </member>
        <member name="P:Ext.Picker.componentCls">
            <summary>
            @cfg {String} componentCls
            The main component class
            </summary>
        </member>
        <member name="P:Ext.Picker.doneButton">
            <summary>
            @cfg {String/Mixed} doneButton
            Can be either:<ul>
            <li>A {String} text to be used on the Done button</li>
            <li>An {Object} as config for {@link Ext.Button}</li>
            <li>false or null to hide it</li></ul>
            *
            Defaults to 'Done'.
            </summary>
        </member>
        <member name="P:Ext.Picker.height">
            <summary>
            @cfg {Number} height
            The height of the picker.
            Defaults to 220
            </summary>
        </member>
        <member name="P:Ext.Picker.stretchX">
            <summary>
            @cfg {String} componentCls
            The main component class
            </summary>
        </member>
        <member name="P:Ext.Picker.useTitles">
            <summary>
            @cfg {Boolean} useTitles
            Generate a title header for each individual slot and use
            the title configuration of the slot.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Picker.Value">
            <summary>
            Returns the values of each of the pickers slots
            @return {Object} The values of the pickers slots
            </summary>
        </member>
        <member name="T:Ext.Picker.Slot">
            <summary>
            @private
            @class Ext.Picker.Slot
            @extends Ext.DataView
            *
            <p>A general picker slot class.  Slots are used to organize multiple scrollable slots into a single picker
            See also: {@link Ext.Picker}</p>
            @constructor
            Create a new Picker Slot
            @param {Object} config The config object
            @xtype pickerslot
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.afterComponentLayout">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.getElConfig">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.getSelectedNode">
            <summary>
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.getValue">
            <summary>
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.initComponent">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.initEvents">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.onItemTap(System.Object)">
            <summary>
            @private
            Called when an item has been tapped
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.onScrollEnd(System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.scrollToNode(System.Object,System.Object)">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.setSelectedNode(System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.setupBar">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.Picker.Slot.setValue(System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.align">
            <summary>
            @cfg {String} align
            The alignment of this slot.
            Defaults to 'center'
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.componentCls">
            <summary>
            @private
            @cfg {String} componentCls
            The main component class
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.displayField">
            <summary>
            @cfg {String} displayField
            The display field in the store.
            Defaults to 'text'.
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.isSlot">
            <summary>
            @private
            @class Ext.Picker.Slot
            @extends Ext.DataView
            *
            <p>A general picker slot class.  Slots are used to organize multiple scrollable slots into a single picker
            See also: {@link Ext.Picker}</p>
            @constructor
            Create a new Picker Slot
            @param {Object} config The config object
            @xtype pickerslot
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.itemSelector">
            <summary>
            @hide
            @cfg {String} itemSelector
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.name">
            <summary>
            @cfg {String} name
            The name of this slot. This config option is required.
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.selectedIndex">
            <summary>
            @private
            The current selectedIndex of the picker slot
            </summary>
        </member>
        <member name="P:Ext.Picker.Slot.valueField">
            <summary>
            @cfg {String} valueField
            The value field in the store.
            Defaults to 'value'.
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.align">
            <summary>
            The alignment of this slot.
            Defaults to 'center'
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.componentCls">
            <summary>
            The main component class
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.displayField">
            <summary>
            The display field in the store.
            Defaults to 'text'.
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.itemSelector">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.name">
            <summary>
            The name of this slot. This config option is required.
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.renderTpl">
            <summary>
            The renderTpl of the slot.
            </summary>
        </member>
        <member name="P:Ext.Picker.SlotConfig.valueField">
            <summary>
            The value field in the store.
            Defaults to 'value'.
            </summary>
        </member>
        <member name="M:Ext.DatePicker.getValue">
            <summary>
            Gets the current value as a Date object
            @return {Date} value
            </summary>
        </member>
        <member name="M:Ext.DatePicker.initComponent">
            <summary>
            @cfg {Array} slotOrder
            An array of strings that specifies the order of the slots. Defaults to <tt>['month', 'day', 'year']</tt>.
            </summary>
        </member>
        <member name="M:Ext.DatePicker.setValue(System.Object,System.Boolean)">
            <summary>
            Sets the values of the DatePicker's slots
            @param {Date/Object} value The value either in a {day:'value', month:'value', year:'value'} format or a Date
            @param {Boolean} animated True for animation while setting the values
            @return {Ext.DatePicker} this This DatePicker
            </summary>
        </member>
        <member name="P:Ext.DatePicker.dayText">
            <summary>
            @cfg {String} dayText
            The label to show for the day column. Defaults to 'Day'.
            </summary>
        </member>
        <member name="P:Ext.DatePicker.monthText">
            <summary>
            @cfg {String} monthText
            The label to show for the month column. Defaults to 'Month'.
            </summary>
        </member>
        <member name="P:Ext.DatePicker.Value">
            <summary>
            Gets the current value as a Date object
            @return {Date} value
            </summary>
        </member>
        <member name="P:Ext.DatePicker.yearFrom">
            <summary>
            @cfg {Number} yearFrom
            The start year for the date picker.  Defaults to 1980
            </summary>
        </member>
        <member name="P:Ext.DatePicker.yearText">
            <summary>
            @cfg {String} yearText
            The label to show for the year column. Defaults to 'Year'.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.dayText">
            <summary>
            The label to show for the day column. Defaults to 'Day'.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.monthText">
            <summary>
            The label to show for the month column. Defaults to 'Month'.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.value">
            <summary>
            Default value for the field and the internal {@link Ext.DatePicker} component. Accepts an object of 'year',
            'month' and 'day' values, all of which should be numbers, or a {@link Date}.
            *
            Examples:
            {year: 1989, day: 1, month: 5} = 1st May 1989.
            new Date() = current date
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.yearFrom">
            <summary>
            The start year for the date picker.  Defaults to 1980
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.yearText">
            <summary>
            The label to show for the year column. Defaults to 'Year'.
            </summary>
        </member>
        <member name="P:Ext.DatePickerConfig.yearTo">
            <summary>
            The last year for the date picker.  Defaults to the current year.
            </summary>
        </member>
        <member name="T:Ext.Dispatcher">
            <summary>
            @class Ext.Dispatcher
            @extends Ext.util.Dispatcher
            <p>The Dispatcher is responsible for sending requests through to a specific {@link Ext.Controller controller}
            action. It is usually invoked either by a UI event handler calling {@link Ext#dispatch}, or by the
            {@link Ext.Router Router} recognizing a change in the page url.</p>
            <p>Ext.Dispatcher is the default instance of {@link Ext.util.Dispatcher} that is automatically created for every
            application. Usually it is the only instance that you will need.</p>
            <p>Let's say we have an application that manages instances of a Contact model using a contacts controller:</p>
            <pre><code>
            Ext.regModel('Contact', {
            fields: ['id', 'name', 'email']
            });
            //the controller has a single action - list - which just loads the Contacts and logs them to the console
            Ext.regController('contacts', {
            list: function() {
            new Ext.data.Store({
            model: 'Contact',
            autoLoad: {
            callback: function(contacts) {
            console.log(contacts);
            }
            }
            });
            }
            });
            </code></pre>
            <p>We can easily dispatch to the contacts controller's list action from anywhere in our app:</p>
            <pre><code>
            Ext.dispatch({
            controller: 'contacts',
            action    : 'list',
            historyUrl: 'contacts/list',
            anotherOption: 'some value'
            });
            </code></pre>
            <p>The Dispatcher finds the contacts controller and calls its list action. We also passed in a couple of additional
            options to dispatch - historyUrl and anotherOption. 'historyUrl' is a special parameter which automatically changes
            the browser's url when passed. For example, if your application is being served from http://yourapp.com, dispatching
            with the options we passed above would update the url to http://yourapp.com/#contacts/list, as well as calling the
            controller action as before.</p>
            <p>We also passed a second configuration into dispatch - anotherOption. We can access this inside our controller
            action like this:</p>
            <pre><code>
            Ext.regController('contacts', {
            list: function(options) {
            console.log(options.anotherOption); // 'some value'
            }
            });
            </code></pre>
            <p>We can pass anything in to Ext.dispatch and have it come through to our controller action. Internally, all of the
            options that we pass to dispatch are rolled into an {@link Ext.Interaction}. Interaction is a very simple class that
            represents a single request into the application - typically the controller and action names plus any additional
            information like the Model instance that a particular action is concerned with.</p>
            @singleton
            </summary>
        </member>
        <member name="M:Ext.DomHelper.append(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and appends them to el.
            @param {Mixed} el The context element
            @param {Object/String} o The DOM object spec (and children) or raw HTML blob
            @param {Boolean} returnElement (optional) true to return a Ext.Element
            @return {HTMLElement/Ext.Element} The new node
            </summary>
        </member>
        <member name="M:Ext.DomHelper.applyStyles(System.Object,System.Object)">
            <summary>
            Applies a style specification to an element.
            @param {String/HTMLElement} el The element to apply styles to
            @param {String/Object/Function} styles A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or
            a function which returns such a specification.
            </summary>
        </member>
        <member name="M:Ext.DomHelper.insertAfter(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them after el.
            @param {Mixed} el The context element
            @param {Object} o The DOM object spec (and children)
            @param {Boolean} returnElement (optional) true to return a Ext.Element
            @return {HTMLElement/Ext.Element} The new node
            </summary>
        </member>
        <member name="M:Ext.DomHelper.insertBefore(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them before el.
            @param {Mixed} el The context element
            @param {Object/String} o The DOM object spec (and children) or raw HTML blob
            @param {Boolean} returnElement (optional) true to return a Ext.Element
            @return {HTMLElement/Ext.Element} The new node
            </summary>
        </member>
        <member name="M:Ext.DomHelper.insertFirst(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and inserts them as the first child of el.
            @param {Mixed} el The context element
            @param {Object/String} o The DOM object spec (and children) or raw HTML blob
            @param {Boolean} returnElement (optional) true to return a Ext.Element
            @return {HTMLElement/Ext.Element} The new node
            </summary>
        </member>
        <member name="M:Ext.DomHelper.insertHtml(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString)">
            <summary>
            Inserts an HTML fragment into the DOM.
            @param {String} where Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.
            @param {HTMLElement} el The context element
            @param {String} html The HTML fragment
            @return {HTMLElement} The new node
            </summary>
        </member>
        <member name="M:Ext.DomHelper.markup(System.Object)">
            <summary>
            Returns the markup for the passed Element(s) config.
            @param {Object} o The DOM object spec (and children)
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.DomHelper.overwrite(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates new DOM element(s) and overwrites the contents of el with them.
            @param {Mixed} el The context element
            @param {Object/String} o The DOM object spec (and children) or raw HTML blob
            @param {Boolean} returnElement (optional) true to return a Ext.Element
            @return {HTMLElement/Ext.Element} The new node
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.DomHelper.confRe" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.DomHelper.emptyTags" -->
        <member name="M:Ext.DomQuery.is(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String/HTMLElement/Array} el An element id, element or array of elements
            @param {String} selector The simple selector to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.DomQuery.select(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Selects a group of elements.
            @param {String} selector The selector/xpath query (can be a comma separated list of selectors)
            @param {Node/String} root (optional) The start of the query (defaults to document).
            @return {Array} An Array of DOM elements which match the selector. If there are
            no matches, and empty Array is returned.
            </summary>
        </member>
        <member name="M:Ext.DomQuery.selectNode(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Selects a single element.
            @param {String} selector The selector/xpath query
            @param {Node} root (optional) The start of the query (defaults to document).
            @return {HtmlElement} The DOM element which matched the selector.
            </summary>
        </member>
        <member name="M:Ext.Element.appendChild(System.Object)">
            <summary>
            Appends the passed element(s) to this element
            @param {String/HTMLElement/Array/Element/CompositeElement} el
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.appendTo(System.Object)">
            <summary>
            Appends this element to the passed element
            @param {Mixed} el The new parent element
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.child(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
            </summary>
        </member>
        <member name="M:Ext.Element.createChild(System.Object,SharpKit.Html4.HtmlElement,System.Boolean)">
            <summary>
            Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
            @param {Object} config DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
            automatically generated with the specified attributes.
            @param {HTMLElement} insertBefore (optional) a child element of this element
            @param {Boolean} returnDom (optional) true to return the dom node instead of creating an Element
            @return {Ext.Element} The new child element
            </summary>
        </member>
        <member name="M:Ext.Element.down(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
            </summary>
        </member>
        <member name="M:Ext.Element.findParent(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to search as a number or element (defaults to 50 || document.body)
            @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
            @return {HTMLElement} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.findParentNode(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to
            search as a number or element (defaults to 10 || document.body)
            @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
            @return {HTMLElement} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.first(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the first child, skipping text nodes
            @param {String} selector (optional) Find the next sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The first child or null
            </summary>
        </member>
        <member name="M:Ext.Element.getAlignToXY(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
            supported position values.
            @param {Mixed} element The element to align to.
            @param {String} position (optional, defaults to "tl-bl?") The position to align to.
            @param {Array} offsets (optional) Offset the positioning by [x, y]
            @return {Array} [x, y]
            </summary>
        </member>
        <member name="M:Ext.Element.getAnchorXY(SharpKit.JavaScript.JsString,System.Object,System.Object)">
            <summary>
            Gets the x,y coordinates specified by the anchor position on the element.
            @param {String} anchor (optional) The specified anchor position (defaults to "c").  See {@link #alignTo}
            for details on supported anchor positions.
            @param {Object} size (optional) An object containing the size to use for calculating anchor position
            {width: (target width), height: (target height)} (defaults to the element's current size)
            @return {Array} [x, y] An array containing the element's x and y coordinates
            </summary>
        </member>
        <member name="M:Ext.Element.getBottom(System.Boolean)">
            <summary>
            Gets the bottom Y coordinate of the element (element Y position + element height)
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getBox(System.Boolean,System.Boolean)">
            <summary>
            Return an object defining the area of this Element which can be passed to {@link #setBox} to
            set another Element's size/location to match this element.
            @param {Boolean} contentBox (optional) If true a box for the content of the element is returned.
            @param {Boolean} local (optional) If true the element's left and top are returned instead of page x/y.
            @return {Object} box An object in the format<pre><code>
            {
            x: &lt;Element's X position>,
            y: &lt;Element's Y position>,
            width: &lt;Element's width>,
            height: &lt;Element's height>,
            bottom: &lt;Element's lower bound>,
            right: &lt;Element's rightmost bound>
            }
            </code></pre>
            The returned object may also be addressed as an Array where index 0 contains the X position
            and index 1 contains the Y position. So the result may also be used for {@link #setXY}
            </summary>
        </member>
        <member name="M:Ext.Element.getLeft(System.Boolean)">
            <summary>
            Gets the left X coordinate
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getOffsetsTo(System.Object)">
            <summary>
            Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
            @param {Mixed} element The element to get the offsets from.
            @return {Array} The XY page offsets (e.g. [100, -200])
            </summary>
        </member>
        <member name="M:Ext.Element.getPageBox(System.Boolean)">
            <summary>
            Return an object defining the area of this Element which can be passed to {@link #setBox} to
            set another Element's size/location to match this element.
            @param {Boolean} asRegion(optional) If true an Ext.util.Region will be returned
            @return {Object} box An object in the format<pre><code>
            {
            x: &lt;Element's X position>,
            y: &lt;Element's Y position>,
            width: &lt;Element's width>,
            height: &lt;Element's height>,
            bottom: &lt;Element's lower bound>,
            right: &lt;Element's rightmost bound>
            }
            </code></pre>
            The returned object may also be addressed as an Array where index 0 contains the X position
            and index 1 contains the Y position. So the result may also be used for {@link #setXY}
            </summary>
        </member>
        <member name="M:Ext.Element.getRight(System.Boolean)">
            <summary>
            Gets the right X coordinate of the element (element X position + element width)
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getScrollParent">
            <summary>
            Gets the Scroller instance of the first parent that has one.
            @return {Ext.util.Scroller/null} The first parent scroller
            </summary>
        </member>
        <member name="M:Ext.Element.getTop(System.Boolean)">
            <summary>
            Gets the top Y coordinate
            @param {Boolean} local True to get the local css position instead of page coordinate
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.Element.getX(System.Object)">
            <summary>
            Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Number} The X position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.getXY">
            <summary>
            Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Array} The XY position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.getY(System.Object)">
            <summary>
            Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @return {Number} The Y position of the element
            </summary>
        </member>
        <member name="M:Ext.Element.insertAfter(System.Object)">
            <summary>
            Inserts this element after the passed element in the DOM
            @param {Mixed} el The element to insert after
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.insertBefore(System.Object)">
            <summary>
            Inserts this element before the passed element in the DOM
            @param {Mixed} el The element before which this element will be inserted
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.insertFirst(System.Object,System.Object)">
            <summary>
            Inserts (or creates) an element (or DomHelper config) as the first child of this element
            @param {Mixed/Object} el The id or element to insert or a DomHelper config to create and insert
            @return {Ext.Element} The new child
            </summary>
        </member>
        <member name="M:Ext.Element.insertHtml(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Inserts an html fragment into this element
            @param {String} where Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
            @param {String} html The HTML fragment
            @param {Boolean} returnEl (optional) True to return an Ext.Element (defaults to false)
            @return {HTMLElement/Ext.Element} The inserted node (or nearest related if more than 1 inserted)
            </summary>
        </member>
        <member name="M:Ext.Element.insertSibling(System.Object,SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            @param {Mixed/Object/Array} el The id, element to insert or a DomHelper config to create and insert *or* an array of any of those.
            @param {String} where (optional) 'before' or 'after' defaults to before
            @param {Boolean} returnDom (optional) True to return the .;ll;l,raw DOM element instead of Ext.Element
            @return {Ext.Element} The inserted Element. If an array is passed, the last inserted element is returned.
            </summary>
        </member>
        <member name="M:Ext.Element.last(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the last child, skipping text nodes
            @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The last child or null
            </summary>
        </member>
        <member name="M:Ext.Element.next(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the next sibling, skipping text nodes
            @param {String} selector (optional) Find the next sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The next sibling or null
            </summary>
        </member>
        <member name="M:Ext.Element.parent(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the parent node for this element, optionally chaining up trying to match a selector
            @param {String} selector (optional) Find a parent node that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The parent node or null
            </summary>
        </member>
        <member name="M:Ext.Element.prev(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Gets the previous sibling, skipping text nodes
            @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
            @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
            @return {Ext.Element/HTMLElement} The previous sibling or null
            </summary>
        </member>
        <member name="M:Ext.Element.query(SharpKit.JavaScript.JsString)">
            <summary>
            Selects child nodes based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @return {Array} An array of the matched nodes
            </summary>
        </member>
        <member name="M:Ext.Element.replace(System.Object)">
            <summary>
            Replaces the passed element with this element
            @param {Mixed} el The element to replace
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.replaceWith(System.Object)">
            <summary>
            Replaces this element with the passed element
            @param {Mixed/Object} el The new element or a DomHelper config of an element to create
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.select(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
            @param {String} selector The CSS selector
            @return {CompositeElement/CompositeElement} The composite element
            </summary>
        </member>
        <member name="M:Ext.Element.select(System.Object,System.Object,System.Object)">
            <summary>
            Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
            to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
            {@link Ext.CompositeElement CompositeElement} object.
            @param {String/Array} selector The CSS selector or an array of elements
            @param {HTMLElement/String} root (optional) The root element of the query or id of the root
            @return {CompositeElement}
            @member Ext.Element
            @method select
            </summary>
        </member>
        <member name="M:Ext.Element.setBottom(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS bottom style.
            @param {String} bottom The bottom CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setBox(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
            @param {Object} box The box to fill {x, y, width, height}
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setLeft(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's left position directly using CSS style (instead of {@link #setX}).
            @param {String} left The left CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setRight(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's CSS right style.
            @param {String} right The right CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setTop(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's top position directly using CSS style (instead of {@link #setY}).
            @param {String} top The top CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.setTopLeft(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Sets the element's top and left positions directly using CSS style (instead of {@link #setXY})
            @param {String} top The top CSS property value
            @param {String} left The left CSS property value
            </summary>
        </member>
        <member name="M:Ext.Element.setX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The X position of the element
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Element.setXY(SharpKit.JavaScript.JsArray)" -->
        <member name="M:Ext.Element.setY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The Y position of the element
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="M:Ext.Element.translatePoints(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translates the passed page coordinates into left/top css values for this element
            @param {Number/Array} x The page x or an array containing [x, y]
            @param {Number} y (optional) The page y, required if x is not an array
            @return {Object} An object with left and top properties. e.g. {left: (value), top: (value)}
            </summary>
        </member>
        <member name="M:Ext.Element.up(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
            This is a shortcut for findParentNode() that always returns an Ext.Element.
            @param {String} selector The simple selector to test
            @param {Number/Mixed} maxDepth (optional) The max depth to
            search as a number or element (defaults to 10 || document.body)
            @return {Ext.Element} The matching DOM node (or null if no match was found)
            </summary>
        </member>
        <member name="M:Ext.Element.wrap(System.Object,System.Boolean)">
            <summary>
            Creates and wraps this element with another element
            @param {Object} config (optional) DomHelper element config object for the wrapper element or null for an empty div
            @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Ext.Element
            @return {HTMLElement/Element} The newly created wrapper element
            </summary>
        </member>
        <member name="P:Ext.Element.Bottom">
            <summary>
            Sets the element's CSS bottom style.
            @param {String} bottom The bottom CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="P:Ext.Element.Left">
            <summary>
            Sets the element's left position directly using CSS style (instead of {@link #setX}).
            @param {String} left The left CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="P:Ext.Element.Right">
            <summary>
            Sets the element's CSS right style.
            @param {String} right The right CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="P:Ext.Element.ScrollParent">
            <summary>
            Gets the Scroller instance of the first parent that has one.
            @return {Ext.util.Scroller/null} The first parent scroller
            </summary>
        </member>
        <member name="P:Ext.Element.Top">
            <summary>
            Sets the element's top position directly using CSS style (instead of {@link #setY}).
            @param {String} top The top CSS property value
            @return {Ext.Element} this
            </summary>
        </member>
        <member name="P:Ext.Element.X">
            <summary>
            Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The X position of the element
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Element.XY" -->
        <member name="P:Ext.Element.Y">
            <summary>
            Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            @param {Number} The Y position of the element
            @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
            @return {Ext.Element} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.EventManager.addListener(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object)" -->
        <member name="M:Ext.EventManager.onDocumentReady(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
            accessed shorthanded as Ext.onReady().
            @param {Function} fn The method the event invokes.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
            @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
            <code>{single: true}</code> be used so that the handler is removed on first invocation.
            </summary>
        </member>
        <member name="M:Ext.EventManager.onWindowResize(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds a listener to be notified when the browser window is resized and provides resize event buffering (50 milliseconds),
            passes new viewport width and height to handlers.
            @param {Function} fn      The handler function the window resize event invokes.
            @param {Object}   scope   The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
            @param {boolean}  options Options object as passed to {@link Ext.Element#addListener}
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeAll(System.Object)">
            <summary>
            Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}
            directly on an Element in favor of calling this version.
            @param {String/HTMLElement} el The id or html element from which to remove all event handlers.
            </summary>
        </member>
        <member name="M:Ext.EventManager.removeListener(System.Object,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically
            you will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version.
            @param {String/HTMLElement} el The id or html element from which to remove the listener.
            @param {String} eventName The name of the event.
            @param {Function} fn The handler function to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
            @param {Object} scope If a scope (<b><code>this</code></b> reference) was specified when the listener was added,
            then this must refer to the same object.
            </summary>
        </member>
        <member name="P:Ext.EventManager.optionsRe">
            <summary>
            @class Ext.EventManager
            Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
            several useful events directly.
            See {@link Ext.EventObject} for more details on normalized event objects.
            @singleton
            </summary>
        </member>
        <member name="P:Ext.EventManager.touchRe">
            <summary>
            @class Ext.EventManager
            Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
            several useful events directly.
            See {@link Ext.EventObject} for more details on normalized event objects.
            @singleton
            </summary>
        </member>
        <member name="T:Ext.EventObject">
            <summary>
            @class Ext.EventObject
            Just as {@link Ext.Element} wraps around a native DOM node, Ext.EventObject
            wraps the browser's native event-object normalizing cross-browser differences,
            such as which mouse button is clicked, keys pressed, mechanisms to stop
            event-propagation along with a method to prevent default actions from taking place.
            <p>For example:</p>
            <pre><code>
            function handleClick(e, t){ // e is not a standard event object, it is a Ext.EventObject
            e.preventDefault();
            var target = e.getTarget(); // same as t (the target HTMLElement)
            ...
            }
            var myDiv = {@link Ext#get Ext.get}("myDiv");  // get reference to an {@link Ext.Element}
            myDiv.on(         // 'on' is shorthand for addListener
            "click",      // perform an action on click of myDiv
            handleClick   // reference to the action handler
            );
            // other methods to do the same:
            Ext.EventManager.on("myDiv", 'click', handleClick);
            Ext.EventManager.addListener("myDiv", 'click', handleClick);
            </code></pre>
            @singleton
            </summary>
        </member>
        <member name="T:Ext.EventObjectImpl">
            <summary>
            Adds a listener to be notified when the document is ready (before onload and before images are loaded). Shorthand of {@link Ext.EventManager#onDocumentReady}.
            @param {Function} fn The method the event invokes.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
            @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
            <code>{single: true}</code> be used so that the handler is removed on first invocation.
            @member Ext
            @method onReady
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.getPageX">
            <summary>
            Gets the x coordinate of the event.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.getPageY">
            <summary>
            Gets the y coordinate of the event.
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.getTarget(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Gets the target for the event.
            @param {String} selector (optional) A simple selector to filter the target or look for an ancestor of the target
            @param {Number/Mixed} maxDepth (optional) The max depth to
            search as a number or element (defaults to 10 || document.body)
            @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
            @return {HTMLelement}
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.getXY">
            <summary>
            Gets the page coordinates of the event.
            @return {Array} The xy values like [x, y]
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.preventDefault">
            <summary>
            Prevents the browsers default handling of the event.
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.setEvent(System.Object)">
            <summary>
            * @private
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.stopEvent">
            <summary>
            Stop the event (preventDefault and stopPropagation)
            </summary>
        </member>
        <member name="M:Ext.EventObjectImpl.stopPropagation">
            <summary>
            Cancels bubbling of the event.
            </summary>
        </member>
        <member name="P:Ext.EventObjectImpl.Event">
            <summary>
            * @private
            </summary>
        </member>
        <member name="P:Ext.EventObjectImpl.XY">
            <summary>
            Gets the page coordinates of the event.
            @return {Array} The xy values like [x, y]
            </summary>
        </member>
        <member name="M:Ext.ExtClass.addMetaTags(System.Object)">
            <summary>
            @private
            Creates meta tags for a given config object. This is usually just called internally from Ext.setup - see
            that method for full usage. Extracted into its own function so that Ext.Application and other classes can
            call it without invoking all of the logic inside Ext.setup.
            @param {Object} config The meta tag configuration object
            </summary>
        </member>
        <member name="M:Ext.ExtClass.applyIf(System.Object,System.Object)">
            <summary>
            Copies all the properties of config to obj if they don't already exist.
            @param {Object} obj The receiver of the properties
            @param {Object} config The source of the properties
            @return {Object} returns obj
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.CompositeElement(System.Object,System.Object)" -->
        <member name="M:Ext.ExtClass.create">
            <summary>
            Shorthand for {@link Ext.ComponentMgr#create}
            Creates a new Component from the specified config object using the
            config object's {@link Ext.component#xtype xtype} to determine the class to instantiate.
            @param {Object} config A configuration object for the Component you wish to create.
            @param {Constructor} defaultType The constructor to provide the default Component type if
            the config object does not contain a <code>xtype</code>. (Optional if the config contains a <code>xtype</code>).
            @return {Ext.Component} The newly instantiated Component.
            @member Ext
            @method create
            </summary>
        </member>
        <member name="M:Ext.ExtClass.destroy">
            <summary>
            Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
            DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
            intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of
            {@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be
            passed into this function in a single call as separate arguments.
            @param {Mixed} arg1 An {@link Ext.Element}, {@link Ext.Component}, or an Array of either of these to destroy
            @param {Mixed} arg2 (optional)
            @param {Mixed} etc... (optional)
            </summary>
        </member>
        <member name="M:Ext.ExtClass.dispatch">
            <summary>
            Shorthand for {@link Ext.Dispatcher#dispatch}. Dispatches a request to a controller action
            @member Ext
            @method dispatch
            </summary>
        </member>
        <member name="M:Ext.ExtClass.each(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Iterates an array calling the supplied function.
            @param {Array/NodeList/Mixed} array The array to be iterated. If this
            argument is not really an array, the supplied function is called once.
            @param {Function} fn The function to be called with each item. If the
            supplied function returns false, iteration stops and this method returns
            the current <code>index</code>. This function is called with
            the following arguments:
            <div class="mdetail-params"><ul>
            <li><code>item</code> : <i>Mixed</i>
            <div class="sub-desc">The item at the current <code>index</code>
            in the passed <code>array</code></div></li>
            <li><code>index</code> : <i>Number</i>
            <div class="sub-desc">The current index within the array</div></li>
            <li><code>allItems</code> : <i>Array</i>
            <div class="sub-desc">The <code>array</code> passed as the first
            argument to <code>Ext.each</code>.</div></li>
            </ul></div>
            @param {Object} scope The scope (<code>this</code> reference) in which the specified function is executed.
            Defaults to the <code>item</code> at the current <code>index</code>util
            within the passed <code>array</code>.
            @return See description for the fn parameter.
            </summary>
        </member>
        <member name="M:Ext.ExtClass.emptyFn">
            <summary>
            A reusable empty function
            @property
            @type Function
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getBody">
            <summary>
            Returns the current document body as an {@link Ext.Element}.
            @return Ext.Element The document body
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getCmp(SharpKit.JavaScript.JsString)">
            <summary>
            This is shorthand reference to {@link Ext.ComponentMgr#get}.
            Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}
            @param {String} id The component {@link Ext.Component#id id}
            @return Ext.Component The Component, <tt>undefined</tt> if not found, or <tt>null</tt> if a
            Class was found.
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getDoc">
            <summary>
            Returns the current HTML document object as an {@link Ext.Element}.
            @return Ext.Element The document
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getDom(System.Object)">
            <summary>
            Return the dom node for the passed String (id), dom node, or Ext.Element.
            Here are some examples:
            <pre><code>
            // gets dom node based on id
            var elDom = Ext.getDom('elId');
            // gets dom node based on the dom node
            var elDom1 = Ext.getDom(elDom);
            // If we don&#39;t know if we are working with an
            // Ext.Element or a dom node use Ext.getDom
            function(el){
            var dom = Ext.getDom(el);
            // do something with the dom node
            }
            </code></pre>
            <b>Note</b>: the dom node to be found actually needs to exist (be rendered, etc)
            when this method is called to be successful.
            @param {Mixed} el
            @return HTMLElement
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getOrientation">
            <summary>
            Returns the current orientation of the mobile device
            @return {String} Either 'portrait' or 'landscape'
            </summary>
        </member>
        <member name="M:Ext.ExtClass.getStore(System.Object)">
            <summary>
            Gets a registered Store by id (shortcut to {@link #lookup})
            @param {String/Object} id The id of the Store, or a Store instance
            @return {Ext.data.Store}
            @member Ext
            @method getStore
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.htmlDecode(SharpKit.JavaScript.JsString)" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.htmlEncode(SharpKit.JavaScript.JsString)" -->
        <member name="M:Ext.ExtClass.id(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Generates unique ids. If the element already has an id, it is unchanged
            @param {Mixed} el (optional) The element to generate an id for
            @param {String} prefix (optional) Id prefix (defaults "ext-gen")
            @return {String} The generated Id.
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isArray(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript array, otherwise false.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isBoolean(System.Object)">
            <summary>
            Returns true if the passed value is a boolean.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isDate(System.Object)">
            <summary>
            Returns true if the passed object is a JavaScript date object, otherwise false.
            @param {Object} object The object to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isDefined(System.Object)">
            <summary>
            Returns true if the passed value is not undefined.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isElement(System.Object)">
            <summary>
            Returns true if the passed value is an HTMLElement
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.isEmpty(System.Object,System.Boolean)" -->
        <member name="M:Ext.ExtClass.isFunction(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Function, otherwise false.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isNumber(System.Object)">
            <summary>
            Returns true if the passed value is a number. Returns false for non-finite numbers.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isObject(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript Object, otherwise false.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isPrimitive(System.Object)">
            <summary>
            Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.ExtClass.isString(System.Object)">
            <summary>
            Returns true if the passed value is a string.
            @param {Mixed} value The value to test
            @return {Boolean}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.iterate(System.Object,SharpKit.JavaScript.JsAction,System.Object)" -->
        <member name="M:Ext.ExtClass.namespace">
            <summary>
            Creates namespaces to be used for scoping variables and classes so that they are not global.
            Specifying the last node of a namespace implicitly creates all other nodes. Usage:
            <pre><code>
            Ext.namespace('Company', 'Company.data');
            Ext.namespace('Company.data'); // equivalent and preferable to above syntax
            Company.Widget = function() { ... }
            Company.data.CustomStore = function(config) { ... }
            </code></pre>
            @param {String} namespace1
            @param {String} namespace2
            @param {String} etc
            @return {Object} The namespace object. (If multiple arguments are passed, this will be the last namespace created)
            @method namespace
            </summary>
        </member>
        <member name="M:Ext.ExtClass.num(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Utility method for validating that a value is numeric, returning the specified default value if it is not.
            @param {Mixed} value Should be a number, but any type will be handled appropriately
            @param {Number} defaultValue The value to return if the original value is non-numeric
            @return {Number} Value, if numeric, else defaultValue
            </summary>
        </member>
        <member name="M:Ext.ExtClass.onReady(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
            accessed shorthanded as Ext.onReady().
            @param {Function} fn The method the event invokes.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
            @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
            <code>{single: true}</code> be used so that the handler is removed on first invocation.
            </summary>
        </member>
        <member name="M:Ext.ExtClass.override(System.Object,System.Object)">
            <summary>
            Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
            Usage:<pre><code>
            Ext.override(MyClass, {
            newMethod1: function(){
            // etc.
            },
            newMethod2: function(foo){
            // etc.
            }
            });
            </code></pre>
            @param {Object} origclass The class to override
            @param {Object} overrides The list of functions to add to origClass.  This should be specified as an object literal
            containing one or more methods.
            @method override
            </summary>
        </member>
        <member name="M:Ext.ExtClass.pluck(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Plucks the value of a property from each item in the Array
            *
            // Example:
            Ext.pluck(Ext.query("p"), "className"); // [el1.className, el2.className, ..., elN.className]
            *
            @param {Array|NodeList} arr The Array of items to pluck the value from.
            @param {String} prop The property name to pluck from each element.
            @return {Array} The value from each item in the Array.
            </summary>
        </member>
        <member name="M:Ext.ExtClass.preg">
            <summary>
            Shorthand for {@link Ext.PluginMgr#registerType}
            @param {String} ptype The {@link Ext.component#ptype mnemonic string} by which the Plugin class
            may be looked up.
            @param {Constructor} cls The new Plugin class.
            @member Ext
            @method preg
            </summary>
        </member>
        <member name="M:Ext.ExtClass.redirect">
            <summary>
            Shorthand for {@link Ext.Dispatcher#redirect}. Dispatches a request to a controller action, adding to the History
            stack and updating the page url as necessary.
            @member Ext
            @method redirect
            </summary>
        </member>
        <member name="M:Ext.ExtClass.reg">
            <summary>
            Shorthand for {@link Ext.ComponentMgr#registerType}
            @param {String} xtype The {@link Ext.component#xtype mnemonic string} by which the Component class
            may be looked up.
            @param {Constructor} cls The new Component class.
            @member Ext
            @method reg
            </summary>
        </member>
        <member name="M:Ext.ExtClass.regApplication">
            <summary>
            Shorthand for {@link Ext.ApplicationManager#register}
            Creates a new Application class from the specified config object. See {@link Ext.Application} for full examples.
            @param {Object} config A configuration object for the Model you wish to create.
            @return {Ext.Application} The newly created Application
            @member Ext
            @method regApplication
            </summary>
        </member>
        <member name="M:Ext.ExtClass.regController">
            <summary>
            Shorthand for {@link Ext.ControllerMgr#register}
            Creates a new Controller class from the specified config object. See {@link Ext.Controller} for full examples.
            @param {Object} config A configuration object for the Controller you wish to create.
            @return {Ext.Controller} The newly registered Controller
            @member Ext
            @method regController
            </summary>
        </member>
        <member name="M:Ext.ExtClass.regLayout">
            <summary>
            Shorthand for {@link Ext.layout.LayoutManager#registerType}
            @param {String} type The {@link Ext.layout.Layout#type mnemonic string} by which the Layout class
            may be looked up.
            @param {Constructor} cls The new Layout class.
            @member Ext
            @method regLayout
            </summary>
        </member>
        <member name="M:Ext.ExtClass.regModel">
            <summary>
            Shorthand for {@link Ext.ModelMgr#registerType}
            Creates a new Model class from the specified config object. See {@link Ext.data.Model} for full examples.
            @param {Object} config A configuration object for the Model you wish to create.
            @return {Ext.data.Model} The newly registered Model
            @member Ext
            @method regModel
            </summary>
        </member>
        <member name="M:Ext.ExtClass.regStore(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            <p>Creates a new store for the given id and config, then registers it with the {@link Ext.StoreMgr Store Mananger}.
            Sample usage:</p>
            <pre><code>
            Ext.regStore('AllUsers', {
            model: 'User'
            });
            //the store can now easily be used throughout the application
            new Ext.List({
            store: 'AllUsers',
            ... other config
            });
            </code></pre>
            @param {String} id The id to set on the new store
            @param {Object} config The store config
            @param {Constructor} cls The new Component class.
            @member Ext
            @method regStore
            </summary>
        </member>
        <member name="M:Ext.ExtClass.removeNode(SharpKit.Html4.HtmlElement)">
            <summary>
            <p>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
            All DOM event listeners are removed from this element. If {@link Ext#enableNestedListenerRemoval} is
            <code>true</code>, then DOM event listeners are also removed from all child nodes. The body node
            will be ignored if passed in.</p>
            @param {HTMLElement} node The node to remove
            </summary>
        </member>
        <member name="M:Ext.ExtClass.repaint">
            <summary>
            Repaints the whole page. This fixes frequently encountered painting issues in mobile Safari.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.setup(System.Object)" -->
        <member name="M:Ext.ExtClass.toArray(System.Object,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Converts any iterable (numeric indices and a length property) into a true array
            Don't use this on strings. IE doesn't support "abc"[0] which this implementation depends on.
            For strings, use this instead: "abc".match(/./g) => [a,b,c];
            @param {Iterable} array the iterable object to be turned into a true Array.
            @param {Number} start a number that specifies where to start the selection.
            @param {Number} end a number that specifies where to end the selection.
            @return (Array) array
            </summary>
        </member>
        <member name="M:Ext.ExtClass.urlAppend(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Appends content to the query string of a URL, handling logic for whether to place
            a question mark or ampersand.
            @param {String} url The URL to append to.
            @param {String} s The content to append to the URL.
            @return (String) The resulting URL
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.urlDecode(SharpKit.JavaScript.JsString,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.ExtClass.urlEncode(System.Object,SharpKit.JavaScript.JsString)" -->
        <member name="P:Ext.ExtClass.enableGarbageCollector">
            <summary>
            True to automatically uncache orphaned Ext.Elements periodically (defaults to true)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.ExtClass.enableListenerCollection">
            <summary>
            True to automatically purge event listeners during garbageCollection (defaults to true).
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.ExtClass.isReady">
            <summary>
            True when the document is fully initialized and ready for action
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.ExtClass.Orientation">
            <summary>
            Returns the current orientation of the mobile device
            @return {String} Either 'portrait' or 'landscape'
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.ExtClass.up" -->
        <member name="P:Ext.ExtClass.version">
            <summary>
            The version of the framework
            @type String
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.History" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.IndexBar" -->
        <member name="M:Ext.IndexBar.isHorizontal">
            <summary>
            Method to determine whether this Sortable is currently sorting.
            @return {Boolean} the sorting state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.IndexBar.isVertical">
            <summary>
            Method to determine whether this Sortable is currently disabled.
            @return {Boolean} the disabled state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.IndexBar.refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template.
            </summary>
        </member>
        <member name="P:Ext.IndexBar.componentCls">
            <summary>
            @cfg {String} componentCls Base CSS class
            Defaults to <tt>'x-indexbar'</tt>
            </summary>
        </member>
        <member name="P:Ext.IndexBar.componentLayout">
            <summary>
            @cfg {Ext.data.Store} store
            The store to be used for displaying data on the index bar. The store model must have a <tt>value</tt> field when using the
            default {@link #tpl}. If no {@link #store} is defined, it will create a store using the <tt>IndexBarModel</tt> model.
            </summary>
        </member>
        <member name="P:Ext.IndexBar.direction">
            <summary>
            @cfg {String} direction Layout direction, can be either 'vertical' or 'horizontal'
            Defaults to <tt>'vertical'</tt>
            </summary>
        </member>
        <member name="P:Ext.IndexBar.itemSelector">
            <summary>
            @cfg {String} itemSelector <b>Required</b>. A simple CSS selector (e.g. <tt>div.x-indexbar-item</tt> for items
            </summary>
        </member>
        <member name="P:Ext.IndexBar.listPrefix">
            <summary>
            @cfg {String} listPrefix
            The prefix string to be appended at the beginning of the list. E.g: useful to add a "#" prefix before numbers
            </summary>
        </member>
        <member name="P:Ext.IndexBar.tpl">
            <summary>
            @cfg {String} tpl Template for items
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.alphabet">
            <summary>
            true to use the {@link #letters} property to show a list of the alphabet. Should <b>not</b> be used
            in conjunction with {@link #store}.
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.componentCls">
            <summary>
            Base CSS class
            Defaults to <tt>'x-indexbar'</tt>
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.direction">
            <summary>
            Layout direction, can be either 'vertical' or 'horizontal'
            Defaults to <tt>'vertical'</tt>
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.itemSelector">
            <summary>
            <b>Required</b>. A simple CSS selector (e.g. <tt>div.x-indexbar-item</tt> for items
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.letters">
            <summary>
            The letters to show on the index bar. Defaults to the English alphabet, A-Z.
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.listPrefix">
            <summary>
            The prefix string to be appended at the beginning of the list. E.g: useful to add a "#" prefix before numbers
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.store">
            <summary>
            The store to be used for displaying data on the index bar. The store model must have a <tt>value</tt> field when using the
            default {@link #tpl}. If no {@link #store} is defined, it will create a store using the <tt>IndexBarModel</tt> model.
            </summary>
        </member>
        <member name="P:Ext.IndexBarConfig.tpl">
            <summary>
            Template for items
            </summary>
        </member>
        <member name="T:Ext.Interaction">
            <summary>
            @author Ed Spencer
            @class Ext.Interaction
            @extends Ext.util.Observable
            <p>Interactions are very simple objects that represent an action performed by specific {@link Ext.Controller}
            action. The must consist of the {@link #controller} and {@link #action} to be called, but can contain any other
            data too. See {@link Ext.Dispatcher} for more details on how Interactions fit into the application ecosystem.</p>
            <p>Interactions are an internal representation that most developers will not have much direct use for. They
            help provide a normalized API for controller actions - each action should simply be set up to receive an Interaction
            object. Because Interaction objects are always created when dispatching to a controller action, it is possible to
            store the Interaction objects that were created in a session to perform simple analytics on how the application
            is used. This is not built into the framework at the moment, but is left open for custom development if needed.</p>
            @constructor
            @param {Object} config Options object containing at least a controller/action pair
            </summary>
        </member>
        <member name="M:Ext.Interaction.#ctor(System.Object)">
            <summary>
            True if this Interaction has already been dispatched
            @property dispatched
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.Interaction.action">
            <summary>
            @cfg {String} action The controller action to invoke
            </summary>
        </member>
        <member name="P:Ext.Interaction.controller">
            <summary>
            @cfg {String} controller The controller to dispatch to
            </summary>
        </member>
        <member name="P:Ext.Interaction.dispatched">
            <summary>
            True if this Interaction has already been dispatched
            @property dispatched
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.InteractionConfig.action">
            <summary>
            The controller action to invoke
            </summary>
        </member>
        <member name="P:Ext.InteractionConfig.args">
            <summary>
            Any arguments to pass to the action
            </summary>
        </member>
        <member name="P:Ext.InteractionConfig.controller">
            <summary>
            The controller to dispatch to
            </summary>
        </member>
        <member name="P:Ext.InteractionConfig.scope">
            <summary>
            Optional scope to execute the controller action in
            </summary>
        </member>
        <member name="M:Ext.is.init(System.Object)">
            <summary>
            @class Ext.is
            Determines information about the current platform the application is running on.
            @singleton
            </summary>
        </member>
        <member name="T:Ext.List">
            <summary>
            @class Ext.List
            @extends Ext.DataView
            <p>A mechanism for displaying data using a list layout template. List uses an {@link Ext.XTemplate}
            as its internal templating mechanism, and is bound to an {@link Ext.data.Store} so that as the data
            in the store changes the view is automatically updated to reflect the changes.</p>
            <p>The view also provides built-in behavior for many common events that can occur for its contained items
            including itemtap, containertap, etc. as well as a built-in selection model. <b>In order to use these
            features, an {@link #itemSelector} config must be provided for the DataView to determine what nodes it
            will be working with.</b></p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #itemTpl}</li>
            <li>{@link #store}</li>
            <li>{@link #grouped}</li>
            <li>{@link #indexBar}</li>
            <li>{@link #singleSelect}</li>
            <li>{@link #multiSelect}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #bindStore}</li>
            <li>{@link #getRecord}</li>
            <li>{@link #getRecords}</li>
            <li>{@link #getSelectedRecords}</li>
            <li>{@link #getSelectedNodes}</li>
            <li>{@link #indexOf}</li>
            </ul>
            <h2>Useful Events</h2>
            <ul class="list">
            <li>{@link #itemtap}</li>
            <li>{@link #itemdoubletap}</li>
            <li>{@link #itemswipe}</li>
            <li>{@link #selectionchange}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.List/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            Ext.regModel('Contact', {
            fields: ['firstName', 'lastName']
            });
            var store = new Ext.data.JsonStore({
            model  : 'Contact',
            sorters: 'lastName',
            getGroupString : function(record) {
            return record.get('lastName')[0];
            },
            data: [
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'}
            ]
            });
            var list = new Ext.List({
            fullscreen: true,
            itemTpl : '{firstName} {lastName}',
            grouped : true,
            indexBar: true,
            store: store
            });
            list.show();
            </code></pre>
            @constructor
            Create a new List
            @param {Object} config The config object
            @xtype list
            </summary>
        </member>
        <member name="M:Ext.List.setActiveGroup(System.Object)">
            <summary>
            Set the current active group
            @param {Object} group The group to set active
            </summary>
        </member>
        <member name="P:Ext.List.ActiveGroup">
            <summary>
            Set the current active group
            @param {Object} group The group to set active
            </summary>
        </member>
        <member name="P:Ext.List.clearSelectionOnDeactivate">
            <summary>
            @cfg {Boolean} clearSelectionOnDeactivate
            True to clear any selections on the list when the list is deactivated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.List.componentCls">
            <summary>
            @class Ext.List
            @extends Ext.DataView
            <p>A mechanism for displaying data using a list layout template. List uses an {@link Ext.XTemplate}
            as its internal templating mechanism, and is bound to an {@link Ext.data.Store} so that as the data
            in the store changes the view is automatically updated to reflect the changes.</p>
            <p>The view also provides built-in behavior for many common events that can occur for its contained items
            including itemtap, containertap, etc. as well as a built-in selection model. <b>In order to use these
            features, an {@link #itemSelector} config must be provided for the DataView to determine what nodes it
            will be working with.</b></p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #itemTpl}</li>
            <li>{@link #store}</li>
            <li>{@link #grouped}</li>
            <li>{@link #indexBar}</li>
            <li>{@link #singleSelect}</li>
            <li>{@link #multiSelect}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #bindStore}</li>
            <li>{@link #getRecord}</li>
            <li>{@link #getRecords}</li>
            <li>{@link #getSelectedRecords}</li>
            <li>{@link #getSelectedNodes}</li>
            <li>{@link #indexOf}</li>
            </ul>
            <h2>Useful Events</h2>
            <ul class="list">
            <li>{@link #itemtap}</li>
            <li>{@link #itemdoubletap}</li>
            <li>{@link #itemswipe}</li>
            <li>{@link #selectionchange}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.List/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            Ext.regModel('Contact', {
            fields: ['firstName', 'lastName']
            });
            var store = new Ext.data.JsonStore({
            model  : 'Contact',
            sorters: 'lastName',
            getGroupString : function(record) {
            return record.get('lastName')[0];
            },
            data: [
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'}
            ]
            });
            var list = new Ext.List({
            fullscreen: true,
            itemTpl : '{firstName} {lastName}',
            grouped : true,
            indexBar: true,
            store: store
            });
            list.show();
            </code></pre>
            @constructor
            Create a new List
            @param {Object} config The config object
            @xtype list
            </summary>
        </member>
        <member name="P:Ext.List.grouped">
            <summary>
            @cfg {Boolean} grouped
            True to group the list items together (defaults to false). When using grouping, you must specify a method getGroupString
            on the store so that grouping can be maintained.
            <pre><code>
            Ext.regModel('Contact', {
            fields: ['firstName', 'lastName']
            });
            var store = new Ext.data.JsonStore({
            model  : 'Contact',
            sorters: 'lastName',
            getGroupString : function(record) {
            // Group by the last name
            return record.get('lastName')[0];
            },
            data: [
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'},
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'}
            ]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.List.indexBar">
            <summary>
            @cfg {Boolean/Object} indexBar
            True to render an alphabet IndexBar docked on the right.
            This can also be a config object that will be passed to {@link Ext.IndexBar}
            (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.List.itemCls">
            <summary>
            @cfg {String} itemCls An additional class that will be added to each item in the List.
            Defaults to ''.
            </summary>
        </member>
        <member name="P:Ext.List.itemSelector">
            <summary>
            @cfg {String} itemSelector
            @private
            @ignore
            Not to be used.
            </summary>
        </member>
        <member name="P:Ext.List.onItemDisclosure">
            <summary>
            @cfg {Boolean/Function/Object} onItemDisclosure
            True to display a disclosure icon on each list item.
            This won't bind a listener to the tap event. The list
            will still fire the disclose event though.
            By setting this config to a function, it will automatically
            add a tap event listeners to the disclosure buttons which
            will fire your function.
            Finally you can specify an object with a 'scope' and 'handler'
            property defined. This will also be bound to the tap event listener
            and is useful when you want to change the scope of the handler.
            </summary>
        </member>
        <member name="P:Ext.List.preventSelectionOnDisclose">
            <summary>
            @cfg {Boolean} preventSelectionOnDisclose True to prevent the item selection when the user
            taps a disclose icon. Defaults to <tt>true</tt>
            </summary>
        </member>
        <member name="P:Ext.ListConfig.clearSelectionOnDeactivate">
            <summary>
            True to clear any selections on the list when the list is deactivated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.ListConfig.grouped">
            <summary>
            True to group the list items together (defaults to false). When using grouping, you must specify a method getGroupString
            on the store so that grouping can be maintained.
            <pre><code>
            Ext.regModel('Contact', {
            fields: ['firstName', 'lastName']
            });
            var store = new Ext.data.JsonStore({
            model  : 'Contact',
            sorters: 'lastName',
            getGroupString : function(record) {
            // Group by the last name
            return record.get('lastName')[0];
            },
            data: [
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'},
            {firstName: 'Tommy',   lastName: 'Maintz'},
            {firstName: 'Rob',     lastName: 'Dougan'},
            {firstName: 'Ed',      lastName: 'Spencer'},
            {firstName: 'Jamie',   lastName: 'Avins'},
            {firstName: 'Aaron',   lastName: 'Conran'},
            {firstName: 'Dave',    lastName: 'Kaneda'},
            {firstName: 'Michael', lastName: 'Mullany'},
            {firstName: 'Abraham', lastName: 'Elias'},
            {firstName: 'Jay',     lastName: 'Robinson'}
            ]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.ListConfig.indexBar">
            <summary>
            True to render an alphabet IndexBar docked on the right.
            This can also be a config object that will be passed to {@link Ext.IndexBar}
            (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.ListConfig.itemCls">
            <summary>
            An additional class that will be added to each item in the List.
            Defaults to ''.
            </summary>
        </member>
        <member name="P:Ext.ListConfig.itemSelector">
            <summary>
            @private
            @ignore
            Not to be used.
            </summary>
        </member>
        <member name="P:Ext.ListConfig.itemTpl">
            <summary>
            The inner portion of the item template to be rendered. Follows an XTemplate
            structure and will be placed inside of a tpl for in the tpl configuration.
            </summary>
        </member>
        <member name="P:Ext.ListConfig.onItemDisclosure">
            <summary>
            True to display a disclosure icon on each list item.
            This won't bind a listener to the tap event. The list
            will still fire the disclose event though.
            By setting this config to a function, it will automatically
            add a tap event listeners to the disclosure buttons which
            will fire your function.
            Finally you can specify an object with a 'scope' and 'handler'
            property defined. This will also be bound to the tap event listener
            and is useful when you want to change the scope of the handler.
            </summary>
        </member>
        <member name="P:Ext.ListConfig.pinHeaders">
            <summary>
            Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experience.
            Defaults to <tt>false</tt> on Android and Blackberry (for performance reasons)
            Defaults to <tt>true</tt> on other devices.
            </summary>
        </member>
        <member name="P:Ext.ListConfig.preventSelectionOnDisclose">
            <summary>
            True to prevent the item selection when the user
            taps a disclose icon. Defaults to <tt>true</tt>
            </summary>
        </member>
        <member name="T:Ext.LoadMask">
            <summary>
            @class Ext.LoadMask
            A simple utility class for generically masking elements while loading data.  If the {@link #store}
            config option is specified, the masking will be automatically synchronized with the store's loading
            process and the mask element will be cached for reuse.
            <p>Example usage:</p>
            *<pre><code>
            // Basic mask:
            var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
            myMask.show();
            </code></pre>
            @constructor
            Create a new LoadMask
            @param {Mixed} el The element or DOM node, or its id
            @param {Object} config The config object
            </summary>
        </member>
        <member name="M:Ext.LoadMask.bindStore(System.Object,System.Object)">
            <summary>
            Changes the data store bound to this LoadMask.
            @param {Store} store The store to bind to this LoadMask
            </summary>
        </member>
        <member name="M:Ext.LoadMask.#ctor(System.Object,System.Object)">
            <summary>
            Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
            @type Boolean
            </summary>
        </member>
        <member name="M:Ext.LoadMask.disable">
            <summary>
            Disables the mask to prevent it from being displayed
            </summary>
        </member>
        <member name="M:Ext.LoadMask.enable">
            <summary>
            Enables the mask so that it can be displayed
            </summary>
        </member>
        <member name="M:Ext.LoadMask.hide">
            <summary>
            Hide this LoadMask.
            </summary>
        </member>
        <member name="M:Ext.LoadMask.isDisabled">
            <summary>
            Method to determine whether this LoadMask is currently disabled.
            @return {Boolean} the disabled state of this LoadMask.
            </summary>
        </member>
        <member name="M:Ext.LoadMask.show">
            <summary>
            Show this LoadMask over the configured Element.
            </summary>
        </member>
        <member name="P:Ext.LoadMask.disabled">
            <summary>
            Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.LoadMask.msg">
            <summary>
            @cfg {String} msg
            The text to display in a centered loading message box (defaults to 'Loading...')
            </summary>
        </member>
        <member name="P:Ext.LoadMask.msgCls">
            <summary>
            @cfg {String} msgCls
            The CSS class to apply to the loading message element (defaults to "x-mask-loading")
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.msg">
            <summary>
            The text to display in a centered loading message box (defaults to 'Loading...')
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.msgCls">
            <summary>
            The CSS class to apply to the loading message element (defaults to "x-mask-loading")
            </summary>
        </member>
        <member name="P:Ext.LoadMaskConfig.store">
            <summary>
            Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and
            hidden on either load sucess, or load fail.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Map" -->
        <member name="M:Ext.Map.update(System.Object)">
            <summary>
            Moves the map center to the designated coordinates hash of the form:
            <code><pre>
            { latitude : 37.381592,
            longitude : -122.135672
            }</pre></code>
            or a google.maps.LatLng object representing to the target location.
            @param {Object/google.maps.LatLng} coordinates Object representing the desired Latitude and
            longitude upon which to center the map
            </summary>
        </member>
        <member name="P:Ext.Map.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to the Maps's element (defaults to <code>'x-map'</code>).
            </summary>
        </member>
        <member name="P:Ext.Map.geo">
            <summary>
            @type {Ext.util.GeoLocation}
            </summary>
        </member>
        <member name="P:Ext.Map.map">
            <summary>
            @type {google.maps.Map}
            The wrapped map.
            </summary>
        </member>
        <member name="P:Ext.Map.maskMap">
            <summary>
            @cfg {Boolean} maskMap
            Masks the map (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Map.maskMapCls">
            <summary>
            @cfg {Strng} maskMapCls
            CSS class to add to the map when maskMap is set to true.
            </summary>
        </member>
        <member name="P:Ext.Map.monitorResize">
            <summary>
            @cfg {Boolean} useCurrentLocation
            Pass in true to center the map based on the geolocation coordinates.
            </summary>
        </member>
        <member name="P:Ext.Map.useCurrentLocation">
            <summary>
            @cfg {Boolean} useCurrentLocation
            Pass in true to center the map based on the geolocation coordinates.
            </summary>
        </member>
        <member name="P:Ext.MapConfig.baseCls">
            <summary>
            The base CSS class to apply to the Maps's element (defaults to <code>'x-map'</code>).
            </summary>
        </member>
        <member name="P:Ext.MapConfig.mapOptions">
            <summary>
            MapOptions as specified by the Google Documentation:
            http://code.google.com/apis/maps/documentation/v3/reference.html
            </summary>
        </member>
        <member name="P:Ext.MapConfig.maskMap">
            <summary>
            Masks the map (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.MapConfig.maskMapCls">
            <summary>
            CSS class to add to the map when maskMap is set to true.
            </summary>
        </member>
        <member name="P:Ext.MediaConfig.autoPause">
            <summary>
            Will automatically pause the media when the container is deactivated.
            (Defaults to true)
            </summary>
        </member>
        <member name="P:Ext.MediaConfig.autoResume">
            <summary>
            Will automatically start playing the media when the container is activated.
            (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.MediaConfig.enableControls">
            <summary>
            Set this to false to turn off the native media controls
            (Defaults to true).
            </summary>
        </member>
        <member name="P:Ext.MediaConfig.preload">
            <summary>
            Will begin preloading the media immediately.
            (Defaults to true)
            </summary>
        </member>
        <member name="P:Ext.MediaConfig.url">
            <summary>
            Location of the media to play.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.MessageBox" -->
        <member name="M:Ext.MessageBox.alert(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
            If a callback function is passed it will be called after the user clicks the button, and the
            itemId of the button that was clicked will be passed as the only parameter to the callback
            @param {String} title The title bar text
            @param {String} msg The message box body text
            @param {Function} fn (optional) The callback function invoked after the message box is closed
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
            @return {Ext.MessageBox} this
            </summary>
        </member>
        <member name="M:Ext.MessageBox.confirm(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
            If a callback function is passed it will be called after the user clicks either button,
            and the id of the button that was clicked will be passed as the only parameter to the callback
            (could also be the top-right close button).
            @param {String} title The title bar text
            @param {String} msg The message box body text
            @param {Function} fn (optional) The callback function invoked when user taps on the OK/Cancel button.
            The button is passed as the first argument.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
            @return {Ext.MessageBox} this
            </summary>
        </member>
        <member name="M:Ext.MessageBox.#ctor(System.Object)">
            <summary>
            The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
            @cfg {Number} defaultTextHeight
            </summary>
        </member>
        <member name="M:Ext.MessageBox.prompt(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction,System.Object,System.Object,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
            The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
            clicks either button, and the id of the button that was clicked (could also be the top-right
            close button) and the text that was entered will be passed as the two parameters to the callback.
            @param {String} title The title bar text
            @param {String} msg The message box body text
            @param {Function} fn (optional) The callback function invoked when the user taps on the OK/Cancel button,
            the button is passed as the first argument, the entered string value is passed as the second argument
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
            @param {Boolean/Number} multiLine (optional) True to create a multiline textbox using the defaultTextHeight
            property, or the height in pixels to create the textbox (defaults to false / single-line)
            @param {String} value (optional) Default value of the text input element (defaults to '')
            @param {Object} promptConfig <div class="sub-desc">(optional) A hash collection of input attribute values.<div class="sub-desc">Specified values may include:<ul>
            <li><tt>focus</tt> : Boolean <div class="sub-desc"><tt>true</tt> to assert initial input focus (defaults to false)</div></li>
            <li><tt>placeholder</tt> : String <div class="sub-desc">String value rendered when the input field is empty (defaults to empty string)</div></li>
            <li><tt>autocapitalize</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to capitalize the first letter of each word in the input value (defaults to 'off')</div></li>
            <li><tt>autocorrect</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to enable spell-checking/autocorrect features if supported by the browser (defaults to 'off')</div></li>
            <li><tt>autocomplete</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to enable autoCompletion of supplied text input values if supported by the browser (defaults to 'off')</div></li>
            <li><tt>maxlength</tt> : Number <div class="sub-desc">Maximum number of characters allowed in the input if supported by the browser (defaults to 0)</div></li>
            <li><tt>type</tt> : String <div class="sub-desc">The type of input field. Possible values (if supported by the browser) may include (text, search, number, range, color, tel, url, email, date, month, week, time, datetime) (defaults to 'text')</div></li>
            </ul></div></div>
            Example usage:
            <pre><code>
            Ext.Msg.prompt(
            'Welcome!',
            'What\'s your name going to be today?',
            function(value){
            console.log(value)
            },
            null,
            false,
            null,
            { autocapitalize : true, placeholder : 'First-name please...' }
            );
            </code></pre>
            @return {Ext.MessageBox} this
            </summary>
        </member>
        <member name="M:Ext.MessageBox.setIcon(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Adds the specified icon to the dialog.  By default, the class 'x-msgbox-icon' is applied for default
            styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
            to clear any existing icon. This method must be called before the MessageBox is shown.
            The following built-in icon classes are supported, but you can also pass in a custom class name:
            <pre>
            Ext.MessageBox.INFO
            Ext.MessageBox.WARNING
            Ext.MessageBox.QUESTION
            Ext.MessageBox.ERROR
            *</pre>
            @param {String} icon A CSS classname specifying the icon's background image url, or empty string to clear the icon
            @return {Ext.MessageBox} this
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.MessageBox.show(System.Object)" -->
        <member name="M:Ext.MessageBox.updateText(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Updates the message box body text
            @param {String} text (optional) Replaces the message box element's innerHTML with the specified string (defaults to
            the XHTML-compliant non-breaking space character '&amp;#160;')
            @return {Ext.MessageBox} this
            </summary>
        </member>
        <member name="P:Ext.MessageBox.autoHeight">
            <summary>
            @cfg {String/Mixed} exitAnimation effect when the message box is being hidden (defaults to 'pop')
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.MessageBox.centered" -->
        <member name="P:Ext.MessageBox.componentCls">
            <summary>
            @cfg {String} componentCls
            Component's Base CSS class
            </summary>
        </member>
        <member name="P:Ext.MessageBox.defaultTextHeight">
            <summary>
            The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
            @cfg {Number} defaultTextHeight
            </summary>
        </member>
        <member name="P:Ext.MessageBox.enterAnimation">
            <summary>
            @cfg {String/Mixed} enterAnimation effect when the message box is being displayed (defaults to 'pop')
            </summary>
        </member>
        <member name="P:Ext.MessageBox.exitAnimation">
            <summary>
            @cfg {String/Mixed} exitAnimation effect when the message box is being hidden (defaults to 'pop')
            </summary>
        </member>
        <member name="P:Ext.MessageBoxConfig.componentCls">
            <summary>
            Component's Base CSS class
            </summary>
        </member>
        <member name="P:Ext.MessageBoxConfig.defaultTextHeight">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.MessageBoxConfig.enterAnimation">
            <summary>
            effect when the message box is being displayed (defaults to 'pop')
            </summary>
        </member>
        <member name="T:Ext.ModelMgr">
            <summary>
            @author Ed Spencer
            @class Ext.ModelMgr
            @extends Ext.AbstractManager
            @singleton
            <p>Creates and manages the current set of models</p>
            </summary>
        </member>
        <member name="T:Ext.Msg">
            <summary>
            @class Ext.Msg
            <p>A global shared singleton instance of the {@link Ext.MessageBox} class. See {@link Ext.MessageBox} for documentation.</p>
            @singleton
            </summary>
        </member>
        <member name="T:Ext.NestedList">
            <summary>
            @class Ext.NestedList
            @extends Ext.Panel
            *
            <p>NestedList provides a miller column interface to navigate between nested sets
            and provide a clean interface with limited screen real-estate.</p>
            *
            <pre><code>
            // store with data
            var data = {
            text: 'Groceries',
            items: [{
            text: 'Drinks',
            items: [{
            text: 'Water',
            items: [{
            text: 'Sparkling',
            leaf: true
            },{
            text: 'Still',
            leaf: true
            }]
            },{
            text: 'Coffee',
            leaf: true
            },{
            text: 'Espresso',
            leaf: true
            },{
            text: 'Redbull',
            leaf: true
            },{
            text: 'Coke',
            leaf: true
            },{
            text: 'Diet Coke',
            leaf: true
            }]
            },{
            text: 'Fruit',
            items: [{
            text: 'Bananas',
            leaf: true
            },{
            text: 'Lemon',
            leaf: true
            }]
            },{
            text: 'Snacks',
            items: [{
            text: 'Nuts',
            leaf: true
            },{
            text: 'Pretzels',
            leaf: true
            },{
            text: 'Wasabi Peas',
            leaf: true
            }]
            },{
            text: 'Empty Category',
            items: []
            }]
            };
            Ext.regModel('ListItem', {
            fields: [{name: 'text', type: 'string'}]
            });
            var store = new Ext.data.TreeStore({
            model: 'ListItem',
            root: data,
            proxy: {
            type: 'ajax',
            reader: {
            type: 'tree',
            root: 'items'
            }
            }
            });
            var nestedList = new Ext.NestedList({
            fullscreen: true,
            title: 'Groceries',
            displayField: 'text',
            store: store
            });</code></pre>
            *
            @xtype nestedlist
            </summary>
        </member>
        <member name="M:Ext.NestedList.getDetailCard(System.Object,System.Object)">
            <summary>
            Implement getDetailCard to provide a final card for leaf nodes when useDetailCard
            is enabled. getDetailCard will be passed the currentRecord and the parentRecord.
            The default implementation will return false
            @param {Ext.data.Record} record
            @param {Ext.data.Record} parentRecord
            </summary>
        </member>
        <member name="M:Ext.NestedList.getItemTextTpl(System.Object)">
            <summary>
            Override this method to provide custom template rendering of individual
            nodes. The template will receive all data within the Record and will also
            receive whether or not it is a leaf node.
            @param {Ext.data.Record} node
            </summary>
        </member>
        <member name="M:Ext.NestedList.getListConfig(SharpKit.Html4.HtmlElement)">
            <summary>
            @private
            Returns the list config for a specified node.
            @param {HTMLElement} node The node for the list config
            </summary>
        </member>
        <member name="M:Ext.NestedList.getSubList(SharpKit.Html4.HtmlElement)">
            <summary>
            Returns the subList for a specified node
            @param {HTMLElement} node The node for the subList
            </summary>
        </member>
        <member name="M:Ext.NestedList.getTitleTextTpl(System.Object)">
            <summary>
            Override this method to provide custom template rendering of titles/back
            buttons when useTitleAsBackText is enabled.
            @param {Ext.data.Record} node
            </summary>
        </member>
        <member name="M:Ext.NestedList.onBackTap">
            <summary>
            Called when the {@link #backButton} has been tapped
            </summary>
        </member>
        <member name="M:Ext.NestedList.onItemTap(Ext.List,SharpKit.JavaScript.JsNumber,Ext.Element,Ext.EventObject)">
            <summary>
            Called when an list item has been tapped
            @param {Ext.List} subList The subList the item is on
            @param {Number} subIdx The id of the item tapped
            @param {Ext.Element} el The element of the item tapped
            @param {Ext.EventObject} e The event
            </summary>
        </member>
        <member name="P:Ext.NestedList.allowDeselect">
            <summary>
            @cfg {Boolean} allowDeselect
            Set to true to alow the user to deselect leaf items via interaction.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.NestedList.backButton">
            <summary>
            @type Ext.Button
            </summary>
        </member>
        <member name="P:Ext.NestedList.backText">
            <summary>
            @cfg {String} backText
            The label to display for the back button. Defaults to "Back".
            </summary>
        </member>
        <member name="P:Ext.NestedList.cardSwitchAnimation">
            <summary>
            @cfg {String} cardSwitchAnimation
            Animation to be used during transitions of cards.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
            Defaults to 'slide'.
            </summary>
        </member>
        <member name="P:Ext.NestedList.clearSelectionDelay">
            <summary>
            @cfg {Boolean/Number} clearSelectionDelay
            Number of milliseconds to show the highlight when going back in a list. (Defaults to 200).
            Passing false will keep the prior list selection.
            </summary>
        </member>
        <member name="P:Ext.NestedList.componentCls">
            <summary>
            @class Ext.NestedList
            @extends Ext.Panel
            *
            <p>NestedList provides a miller column interface to navigate between nested sets
            and provide a clean interface with limited screen real-estate.</p>
            *
            <pre><code>
            // store with data
            var data = {
            text: 'Groceries',
            items: [{
            text: 'Drinks',
            items: [{
            text: 'Water',
            items: [{
            text: 'Sparkling',
            leaf: true
            },{
            text: 'Still',
            leaf: true
            }]
            },{
            text: 'Coffee',
            leaf: true
            },{
            text: 'Espresso',
            leaf: true
            },{
            text: 'Redbull',
            leaf: true
            },{
            text: 'Coke',
            leaf: true
            },{
            text: 'Diet Coke',
            leaf: true
            }]
            },{
            text: 'Fruit',
            items: [{
            text: 'Bananas',
            leaf: true
            },{
            text: 'Lemon',
            leaf: true
            }]
            },{
            text: 'Snacks',
            items: [{
            text: 'Nuts',
            leaf: true
            },{
            text: 'Pretzels',
            leaf: true
            },{
            text: 'Wasabi Peas',
            leaf: true
            }]
            },{
            text: 'Empty Category',
            items: []
            }]
            };
            Ext.regModel('ListItem', {
            fields: [{name: 'text', type: 'string'}]
            });
            var store = new Ext.data.TreeStore({
            model: 'ListItem',
            root: data,
            proxy: {
            type: 'ajax',
            reader: {
            type: 'tree',
            root: 'items'
            }
            }
            });
            var nestedList = new Ext.NestedList({
            fullscreen: true,
            title: 'Groceries',
            displayField: 'text',
            store: store
            });</code></pre>
            *
            @xtype nestedlist
            </summary>
        </member>
        <member name="P:Ext.NestedList.displayField">
            <summary>
            @cfg {String} displayField
            Display field to use when setting item text and title.
            This configuration is ignored when overriding getItemTextTpl or
            getTitleTextTpl for the item text or title. (Defaults to 'text')
            </summary>
        </member>
        <member name="P:Ext.NestedList.emptyText">
            <summary>
            @cfg {String} emptyText
            Empty text to display when a subtree is empty.
            </summary>
        </member>
        <member name="P:Ext.NestedList.layout">
            <summary>
            @cfg {String} layout
            @hide
            </summary>
        </member>
        <member name="P:Ext.NestedList.loadingText">
            <summary>
            @cfg {String} loadingText
            Loading text to display when a subtree is loading.
            </summary>
        </member>
        <member name="P:Ext.NestedList.onItemDisclosure">
            <summary>
            @cfg {Boolean/Function} onItemDisclosure
            Maps to the Ext.List onItemDisclosure configuration for individual lists. (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.NestedList.updateTitleText">
            <summary>
            @cfg {Boolean} updateTitleText
            Update the title with the currently selected category. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.NestedList.useTitleAsBackText">
            <summary>
            @cfg {Boolean} useTitleAsBackText
            </summary>
        </member>
        <member name="P:Ext.NestedList.useToolbar">
            <summary>
            @cfg {Boolean} useToolbar True to show the header toolbar. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.allowDeselect">
            <summary>
            Set to true to alow the user to deselect leaf items via interaction.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.backText">
            <summary>
            The label to display for the back button. Defaults to "Back".
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.cardSwitchAnimation">
            <summary>
            Animation to be used during transitions of cards.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
            Defaults to 'slide'.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.clearSelectionDelay">
            <summary>
            Number of milliseconds to show the highlight when going back in a list. (Defaults to 200).
            Passing false will keep the prior list selection.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.defaultType">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.displayField">
            <summary>
            Display field to use when setting item text and title.
            This configuration is ignored when overriding getItemTextTpl or
            getTitleTextTpl for the item text or title. (Defaults to 'text')
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.emptyText">
            <summary>
            Empty text to display when a subtree is empty.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.layout">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.loadingText">
            <summary>
            Loading text to display when a subtree is loading.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.onItemDisclosure">
            <summary>
            Maps to the Ext.List onItemDisclosure configuration for individual lists. (Defaults to false)
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.store">
            <summary>
            The {@link Ext.data.TreeStore} to bind this NestedList to.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.toolbar">
            <summary>
            Configuration for the Ext.Toolbar that is created within the Ext.NestedList.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.tpl">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.updateTitleText">
            <summary>
            Update the title with the currently selected category. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.useTitleAsBackText">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.NestedListConfig.useToolbar">
            <summary>
            True to show the header toolbar. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.PickerConfig.activeCls">
            <summary>
            CSS class to be applied to individual list items when they have
            been chosen.
            </summary>
        </member>
        <member name="P:Ext.PickerConfig.height">
            <summary>
            The height of the picker.
            Defaults to 220
            </summary>
        </member>
        <member name="P:Ext.PickerConfig.slots">
            <summary>
            An array of slot configurations.
            <ul>
            <li>name - {String} - Name of the slot</li>
            <li>align - {String} - Alignment of the slot. left, right, or center</li>
            <li>items - {Array} - An array of text/value pairs in the format {text: 'myKey', value: 'myValue'}</li>
            <li>title - {String} - Title of the slot. This is used in conjunction with useTitles: true.</li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.PickerConfig.useTitles">
            <summary>
            Generate a title header for each individual slot and use
            the title configuration of the slot.
            Defaults to false.
            </summary>
        </member>
        <member name="T:Ext.PluginMgr">
            <summary>
            @class Ext.PluginMgr
            @extends Ext.AbstractManager
            <p>Provides a registry of available Plugin <i>classes</i> indexed by a mnemonic code known as the Plugin's ptype.
            The <code>{@link Ext.Component#xtype xtype}</code> provides a way to avoid instantiating child Components
            when creating a full, nested config object for a complete Ext page.</p>
            <p>A child Component may be specified simply as a <i>config object</i>
            as long as the correct <code>{@link Ext.Component#xtype xtype}</code> is specified so that if and when the Component
            needs rendering, the correct type can be looked up for lazy instantiation.</p>
            <p>For a list of all available <code>{@link Ext.Component#xtype xtypes}</code>, see {@link Ext.Component}.</p>
            @singleton
            </summary>
        </member>
        <member name="T:Ext.Router">
            <summary>
            @author Ed Spencer
            @class Ext.Router
            @extends Ext.util.Observable
            <p>The Router is used to map urls to {@link Ext.Controller controller}/action pairs. It can be used whenever an
            application wishes to provide history and deep linking support. Every {@link Ext.Application} can set up Routes
            using the default {@link Ext.Router} instance, supplying application-specific routes like this:</p>
            <pre><code>
            //Note the # in the url examples below
            Ext.Router.draw(function(map) {
            //maps the url http://mydomain.com/#dashboard to the home controller's index action
            map.connect('dashboard', {controller: 'home', action: 'index'});
            //fallback route - would match routes like http://mydomain.com/#users/list to the 'users' controller's
            //'list' action
            map.connect(':controller/:action');
            });
            </code></pre>
            <p>The Router is concerned only with the segment of the url after the hash (#) character. This segment is parsed
            by the {@link Ext.Dispatcher Dispatcher} and passed to the Router's {@link #recognize} method. Most of the time you
            will not need to modify any of the behavior of the Router - it is all handled internally by the application
            architecture.</p>
            @singleton
            </summary>
        </member>
        <member name="T:Ext.SegmentedButton">
            <summary>
            @class Ext.SegmentedButton
            @extends Ext.Container
            <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
            a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #allowMultiple}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var segmentedButton = new Ext.SegmentedButton({
            allowMultiple: true,
            items: [
            {
            text: 'Option 1'
            },
            {
            text   : 'Option 2',
            pressed: true,
            handler: tappedFn
            },
            {
            text: 'Option 3'
            }
            ],
            listeners: {
            toggle: function(container, button, pressed){
            console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
            }
            }
            });</code></pre>
            @constructor
            @param {Object} config The config object
            @xtype buttons
            </summary>
        </member>
        <member name="M:Ext.SegmentedButton.disable">
            <summary>
            Disables all buttons
            </summary>
        </member>
        <member name="M:Ext.SegmentedButton.enable">
            <summary>
            Enables all buttons
            </summary>
        </member>
        <member name="M:Ext.SegmentedButton.getPressed">
            <summary>
            Gets the pressed button(s)
            @returns {Array/Button} The pressed button or an array of pressed buttons (if allowMultiple is true)
            </summary>
        </member>
        <member name="M:Ext.SegmentedButton.initComponent">
            <summary>
            @cfg {Boolean} allowDepress
            Allow to depress a pressed button. (defaults to true when allowMultiple is true)
            </summary>
        </member>
        <member name="M:Ext.SegmentedButton.setPressed(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Activates a button
            @param {Number/String/Button} position/id/button. The button to activate.
            @param {Boolean} pressed if defined, sets the pressed state of the button,
            otherwise the pressed state is toggled
            @param {Boolean} suppressEvents true to suppress toggle events during the action.
            If allowMultiple is true, then setPressed will toggle the button state.
            </summary>
        </member>
        <member name="P:Ext.SegmentedButton.allowMultiple">
            <summary>
            @cfg {Boolean} allowMultiple
            Allow multiple pressed buttons (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.SegmentedButton.componentCls">
            <summary>
            @class Ext.SegmentedButton
            @extends Ext.Container
            <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
            a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #allowMultiple}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var segmentedButton = new Ext.SegmentedButton({
            allowMultiple: true,
            items: [
            {
            text: 'Option 1'
            },
            {
            text   : 'Option 2',
            pressed: true,
            handler: tappedFn
            },
            {
            text: 'Option 3'
            }
            ],
            listeners: {
            toggle: function(container, button, pressed){
            console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
            }
            }
            });</code></pre>
            @constructor
            @param {Object} config The config object
            @xtype buttons
            </summary>
        </member>
        <member name="P:Ext.SegmentedButton.defaultType">
            <summary>
            @class Ext.SegmentedButton
            @extends Ext.Container
            <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
            a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #allowMultiple}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
            <h2>Example usage:</h2>
            <pre><code>
            var segmentedButton = new Ext.SegmentedButton({
            allowMultiple: true,
            items: [
            {
            text: 'Option 1'
            },
            {
            text   : 'Option 2',
            pressed: true,
            handler: tappedFn
            },
            {
            text: 'Option 3'
            }
            ],
            listeners: {
            toggle: function(container, button, pressed){
            console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
            }
            }
            });</code></pre>
            @constructor
            @param {Object} config The config object
            @xtype buttons
            </summary>
        </member>
        <member name="P:Ext.SegmentedButtonConfig.allowMultiple">
            <summary>
            Allow multiple pressed buttons (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.enter">
            <summary>
            The viewport side from which to anchor the sheet when made visible (top, bottom, left, right)
            Defaults to 'bottom'
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.enterAnimation">
            <summary>
            the named Ext.anim effect or animation configuration object used for transitions
            when the component is shown. Defaults to 'slide'
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.exit">
            <summary>
            The viewport side used as the exit point when hidden (top, bottom, left, right)
            Applies to sliding animation effects only. Defaults to 'bottom'
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.exitAnimation">
            <summary>
            the named Ext.anim effect or animation configuration object used for transitions
            when the component is hidden. Defaults to 'slide'
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.hideOnMaskTap">
            <summary>
            True to automatically bind a tap listener to the mask that hides the window.
            Defaults to false. Note: if you don't set this property to false you have to programmaticaly
            hide the overlay.
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.stretchX">
            <summary>
            If true, the width of anchored Sheets are adjusted to fill the entire top/bottom axis width,
            or false to center the Sheet along the same axis based upon the sheets current/calculated width.
            This option is ignored when {link #centered} is true or x/y coordinates are specified for the Sheet.
            </summary>
        </member>
        <member name="P:Ext.SheetConfig.stretchY">
            <summary>
            If true, the height of anchored Sheets are adjusted to fill the entire right/left axis height,
            or false to center the Sheet along the same axis based upon the sheets current/calculated height.
            This option is ignored when {link #centered} is true or x/y coordinates are specified for the Sheet.
            </summary>
        </member>
        <member name="T:Ext.Spacer">
            <summary>
            @class Ext.Spacer
            @extends Ext.Component
            <p>By default the spacer component will take up a flex of 1 unless a width is set.</p>
            <p>Example usage:</p>
            <pre><code>
            var toolbar = new Ext.Toolbar({
            title: 'Toolbar Title',
            items: [
            {xtype: 'spacer'},
            {
            xtype: 'Button',
            text : 'Button!'
            }
            ]
            });
            </code></pre>
            @xtype spacer
            </summary>
        </member>
        <member name="M:Ext.Spacer.initComponent">
            <summary>
            @class Ext.Spacer
            @extends Ext.Component
            <p>By default the spacer component will take up a flex of 1 unless a width is set.</p>
            <p>Example usage:</p>
            <pre><code>
            var toolbar = new Ext.Toolbar({
            title: 'Toolbar Title',
            items: [
            {xtype: 'spacer'},
            {
            xtype: 'Button',
            text : 'Button!'
            }
            ]
            });
            </code></pre>
            @xtype spacer
            </summary>
        </member>
        <member name="T:Ext.StoreMgr">
            <summary>
            @class Ext.StoreMgr
            @extends Ext.util.MixedCollection
            The default global group of stores.
            @singleton
            TODO: Make this an AbstractMgr
            </summary>
        </member>
        <member name="M:Ext.supports.init">
            <summary>
            @class Ext.supports
            *
            Determines information about features are supported in the current environment
            @singleton
            </summary>
        </member>
        <member name="T:Ext.Tab">
            <summary>
            @class Ext.Tab
            @extends Ext.Button
            <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
            @xtype tab
            </summary>
        </member>
        <member name="M:Ext.Tab.getCard">
            <summary>
            Retrieves a reference to the card associated with this tab
            @returns {Mixed} card
            </summary>
        </member>
        <member name="M:Ext.Tab.setCard(System.Object)">
            <summary>
            Sets the card associated with this tab
            </summary>
        </member>
        <member name="P:Ext.Tab.active">
            <summary>
            @property Boolean
            Read-only property indicating that this tab is currently active.
            This is NOT a public configuration.
            </summary>
        </member>
        <member name="P:Ext.Tab.activeCls">
            <summary>
            @cfg {String} activeCls
            The CSS class to be applied to a Tab when it is active. Defaults to 'x-tab-active'.
            Providing your own CSS for this class enables you to customize the active state.
            </summary>
        </member>
        <member name="P:Ext.Tab.baseCls">
            <summary>
            @class Ext.Tab
            @extends Ext.Button
            <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
            @xtype tab
            </summary>
        </member>
        <member name="P:Ext.Tab.Card">
            <summary>
            Sets the card associated with this tab
            </summary>
        </member>
        <member name="P:Ext.Tab.isTab">
            <summary>
            @class Ext.Tab
            @extends Ext.Button
            <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
            @xtype tab
            </summary>
        </member>
        <member name="P:Ext.Tab.pressedCls">
            <summary>
            @cfg {String} pressedCls
            The CSS class to be applied to a Tab when it is pressed. Defaults to 'x-tab-pressed'.
            Providing your own CSS for this class enables you to customize the pressed state.
            </summary>
        </member>
        <member name="T:Ext.TabBar">
            <summary>
            @class Ext.TabBar
            @extends Ext.Panel
            <p>Used in the {@link Ext.TabPanel} component to display {@link Ext.Tab} components.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.TabBar/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var bar = new Ext.TabBar({
            dock : 'top',
            ui   : 'dark',
            items: [
            {
            text: '1st Button'
            },
            {
            text: '2nd Button'
            }
            ]
            });
            var myPanel = new Ext.Panel({
            dockedItems: [bar],
            fullscreen : true,
            html       : 'Test Panel'
            });
            </code></pre>
            @xtype tabbar
            </summary>
        </member>
        <member name="M:Ext.TabBar.getCardLayout">
            <summary>
            Returns a reference to the TabPanel's layout that wraps around the TabBar.
            @private
            </summary>
        </member>
        <member name="P:Ext.TabBar.activeTab">
            <summary>
            @type {Ext.Tab}
            Read-only property of the currently active tab.
            </summary>
        </member>
        <member name="P:Ext.TabBar.componentCls">
            <summary>
            @class Ext.TabBar
            @extends Ext.Panel
            <p>Used in the {@link Ext.TabPanel} component to display {@link Ext.Tab} components.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.TabBar/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var bar = new Ext.TabBar({
            dock : 'top',
            ui   : 'dark',
            items: [
            {
            text: '1st Button'
            },
            {
            text: '2nd Button'
            }
            ]
            });
            var myPanel = new Ext.Panel({
            dockedItems: [bar],
            fullscreen : true,
            html       : 'Test Panel'
            });
            </code></pre>
            @xtype tabbar
            </summary>
        </member>
        <member name="P:Ext.TabBar.sortable">
            <summary>
            @cfg {Boolean} sortable
            Enable sorting functionality for the TabBar.
            </summary>
        </member>
        <member name="P:Ext.TabBar.sortHoldThreshold">
            <summary>
            @cfg {Number} sortHoldThreshold
            Duration in milliseconds that a user must hold a tab
            before dragging. The sortable configuration must be set for this setting
            to be used.
            </summary>
        </member>
        <member name="P:Ext.TabBarConfig.sortable">
            <summary>
            Enable sorting functionality for the TabBar.
            </summary>
        </member>
        <member name="P:Ext.TabBarConfig.sortHoldThreshold">
            <summary>
            Duration in milliseconds that a user must hold a tab
            before dragging. The sortable configuration must be set for this setting
            to be used.
            </summary>
        </member>
        <member name="P:Ext.TabConfig.activeCls">
            <summary>
            The CSS class to be applied to a Tab when it is active. Defaults to 'x-tab-active'.
            Providing your own CSS for this class enables you to customize the active state.
            </summary>
        </member>
        <member name="P:Ext.TabConfig.pressedCls">
            <summary>
            The CSS class to be applied to a Tab when it is pressed. Defaults to 'x-tab-pressed'.
            Providing your own CSS for this class enables you to customize the pressed state.
            </summary>
        </member>
        <member name="T:Ext.TabPanel">
            <summary>
            @class Ext.TabPanel
            @extends Ext.Panel
            *
            TabPanel is a Container which can hold other components to be accessed in a tabbed
            interface. It uses a {@link Ext.TabBar} to display a {@link Ext.Tab} for each item defined.
            *
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #ui}</li>
            <li>{@link #tabBarDock}</li>
            <li>{@link #cardSwitchAnimation}</li>
            <li>{@link #sortable}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.TabPanel/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            new Ext.TabPanel({
            fullscreen: true,
            ui        : 'dark',
            sortable  : true,
            items: [
            {
            title: 'Tab 1',
            html : '1',
            cls  : 'card1'
            },
            {
            title: 'Tab 2',
            html : '2',
            cls  : 'card2'
            },
            {
            title: 'Tab 3',
            html : '3',
            cls  : 'card3'
            }
            ]
            });</code></pre>
            @xtype tabpanel
            </summary>
        </member>
        <member name="M:Ext.TabPanel.getTabBar">
            <summary>
            Retrieves a reference to the Ext.TabBar associated with the TabPanel.
            @returns {Ext.TabBar} tabBar
            </summary>
        </member>
        <member name="M:Ext.TabPanel.initComponent">
            <summary>
            @cfg {Boolean} sortable
            Enable sorting functionality for the TabBar.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.cardSwitchAnimation">
            <summary>
            @cfg {String} cardSwitchAnimation
            Animation to be used during transitions of cards.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe'), or false.
            Defaults to <tt>'slide'</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.componentCls">
            <summary>
            @cfg {String} tabBarDock
            Where to dock the Ext.TabPanel. Valid values are 'top' and 'bottom'.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.tabBarDock">
            <summary>
            @cfg {String} tabBarDock
            Where to dock the Ext.TabPanel. Valid values are 'top' and 'bottom'.
            </summary>
        </member>
        <member name="P:Ext.TabPanel.ui">
            <summary>
            @cfg {String} ui
            Defaults to 'dark'.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.cardSwitchAnimation">
            <summary>
            Animation to be used during transitions of cards.
            Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe'), or false.
            Defaults to <tt>'slide'</tt>.
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.layout">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.tabBar">
            <summary>
            An Ext.TabBar configuration
            </summary>
        </member>
        <member name="P:Ext.TabPanelConfig.ui">
            <summary>
            Defaults to 'dark'.
            </summary>
        </member>
        <member name="T:Ext.Template">
            <summary>
            @class Ext.Template
            <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
            for greater performance.</p>
            An instance of this class may be created by passing to the constructor either
            a single argument, or multiple arguments:
            <div class="mdetail-params"><ul>
            <li><b>single argument</b> : String/Array
            <div class="sub-desc">
            The single argument may be either a String or an Array:<ul>
            <li><tt>String</tt> : </li><pre><code>
            var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
            t.{@link #append}('some-element', ['foo']);
            </code></pre>
            <li><tt>Array</tt> : </li>
            An Array will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template([
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
            '&lt;/div&gt;',
            ]);
            t.{@link #compile}();
            t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
            </code></pre>
            </ul></div></li>
            <li><b>multiple arguments</b> : String, Object, Array, ...
            <div class="sub-desc">
            Multiple arguments will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template(
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
            '&lt;/div&gt;',
            // a configuration object:
            {
            compiled: true,      // {@link #compile} immediately
            }
            );
            </code></pre>
            <p><b>Notes</b>:</p>
            <div class="mdetail-params"><ul>
            <li>Formatting and <code>disableFormats</code> are not applicable for Sencha Touch.</li>
            <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
            <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
            when no formatting is required.</li>
            </ul></div>
            </div></li>
            </ul></div>
            @param {Mixed} config
            </summary>
        </member>
        <member name="M:Ext.Template.append(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied <code>values</code> to the template and appends
            the new node(s) to the specified <code>el</code>.
            <p>For example usage {@link #Template see the constructor}.</p>
            @param {Mixed} el The context element
            @param {Object/Array} values
            The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
            or an object (i.e. <code>{foo: 'bar'}</code>).
            @param {Boolean} returnElement (optional) true to return an Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.applyTemplate(System.Object)">
            <summary>
            Returns an HTML fragment of this template with the specified values applied.
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @return {String} The HTML fragment
            @hide repeat doc
            </summary>
        </member>
        <member name="M:Ext.Template.compile">
            <summary>
            Compiles the template into an internal function, eliminating the RegEx overhead.
            @return {Ext.Template} this
            @hide repeat doc
            </summary>
        </member>
        <member name="M:Ext.Template.#ctor(System.Object)">
            <summary>
            @class Ext.Template
            <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
            for greater performance.</p>
            An instance of this class may be created by passing to the constructor either
            a single argument, or multiple arguments:
            <div class="mdetail-params"><ul>
            <li><b>single argument</b> : String/Array
            <div class="sub-desc">
            The single argument may be either a String or an Array:<ul>
            <li><tt>String</tt> : </li><pre><code>
            var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
            t.{@link #append}('some-element', ['foo']);
            </code></pre>
            <li><tt>Array</tt> : </li>
            An Array will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template([
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
            '&lt;/div&gt;',
            ]);
            t.{@link #compile}();
            t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
            </code></pre>
            </ul></div></li>
            <li><b>multiple arguments</b> : String, Object, Array, ...
            <div class="sub-desc">
            Multiple arguments will be combined with <code>join('')</code>.
            <pre><code>
            var t = new Ext.Template(
            '&lt;div name="{id}"&gt;',
            '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
            '&lt;/div&gt;',
            // a configuration object:
            {
            compiled: true,      // {@link #compile} immediately
            }
            );
            </code></pre>
            <p><b>Notes</b>:</p>
            <div class="mdetail-params"><ul>
            <li>Formatting and <code>disableFormats</code> are not applicable for Sencha Touch.</li>
            <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
            <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
            when no formatting is required.</li>
            </ul></div>
            </div></li>
            </ul></div>
            @param {Mixed} config
            </summary>
        </member>
        <member name="M:Ext.Template.from(System.Object,System.Object)">
            <summary>
            Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
            @param {String/HTMLElement} el A DOM element or its id
            @param {Object} config A configuration object
            @return {Ext.Template} The created template
            @static
            </summary>
        </member>
        <member name="M:Ext.Template.insertAfter(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.insertBefore(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.insertFirst(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.overwrite(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            @param {Mixed} el The context element
            @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
            @return {HTMLElement/Ext.Element} The new node or Element
            </summary>
        </member>
        <member name="M:Ext.Template.set(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Sets the HTML used as the template and optionally compiles it.
            @param {String} html
            @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
            @return {Ext.Template} this
            </summary>
        </member>
        <member name="P:Ext.Template.disableFormats">
            <summary>
            @cfg {Boolean} disableFormats true to disable format functions in the template. If the template doesn't contain format functions, setting
            disableFormats to true will reduce apply time (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Template.re">
            <summary>
            @cfg {Boolean} disableFormats true to disable format functions in the template. If the template doesn't contain format functions, setting
            disableFormats to true will reduce apply time (defaults to false)
            </summary>
        </member>
        <member name="T:Ext.Toolbar">
            <summary>
            @class Ext.Toolbar
            @extends Ext.Container
            *
            <p>Toolbars are most commonly used as dockedItems within an Ext.Panel. They can
            be docked at the 'top' or 'bottom' of a Panel by specifying the dock config.</p>
            *
            <p>The {@link #defaultType} of Toolbar's is '{@link Ext.Button button}'.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Toolbar/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var myToolbar = new Ext.Toolbar({
            dock : 'top',
            title: 'My Toolbar',
            items: [
            {
            text: 'My Button'
            }
            ]
            });
            var myPanel = new Ext.Panel({
            dockedItems: [myToolbar],
            fullscreen : true,
            html       : 'Test Panel'
            });</code></pre>
            @xtype toolbar
            </summary>
        </member>
        <member name="M:Ext.Toolbar.hideTitle">
            <summary>
            Hide the title if it exists.
            </summary>
        </member>
        <member name="M:Ext.Toolbar.initComponent">
            <summary>
            The title Element
            @property titleEl
            @type Ext.Element
            </summary>
        </member>
        <member name="M:Ext.Toolbar.setTitle(System.Object)">
            <summary>
            Set the title of the Toolbar
            @param title {String} This can be arbitrary HTML.
            </summary>
        </member>
        <member name="M:Ext.Toolbar.showTitle">
            <summary>
            Show the title if it exists.
            </summary>
        </member>
        <member name="P:Ext.Toolbar.baseCls">
            <summary>
            @cfg {String} baseCls
            The base CSS class to apply to the Carousel's element (defaults to <code>'x-toolbar'</code>).
            </summary>
        </member>
        <member name="P:Ext.Toolbar.defaultType">
            <summary>
            @cfg {xtype} defaultType
            The default xtype to create. (Defaults to 'button')
            </summary>
        </member>
        <member name="P:Ext.Toolbar.isToolbar">
            <summary>
            @class Ext.Toolbar
            @extends Ext.Container
            *
            <p>Toolbars are most commonly used as dockedItems within an Ext.Panel. They can
            be docked at the 'top' or 'bottom' of a Panel by specifying the dock config.</p>
            *
            <p>The {@link #defaultType} of Toolbar's is '{@link Ext.Button button}'.</p>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Toolbar/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var myToolbar = new Ext.Toolbar({
            dock : 'top',
            title: 'My Toolbar',
            items: [
            {
            text: 'My Button'
            }
            ]
            });
            var myPanel = new Ext.Panel({
            dockedItems: [myToolbar],
            fullscreen : true,
            html       : 'Test Panel'
            });</code></pre>
            @xtype toolbar
            </summary>
        </member>
        <member name="P:Ext.Toolbar.layout">
            <summary>
            @cfg {Object} layout (optional)
            A layout config object. A string is NOT supported here.
            </summary>
        </member>
        <member name="P:Ext.Toolbar.Title">
            <summary>
            Set the title of the Toolbar
            @param title {String} This can be arbitrary HTML.
            </summary>
        </member>
        <member name="P:Ext.Toolbar.titleCls">
            <summary>
            @cfg {String} titleCls
            The CSS class to apply to the titleEl (defaults to <code>'x-toolbar-title'</code>).
            </summary>
        </member>
        <member name="P:Ext.Toolbar.titleEl">
            <summary>
            The title Element
            @property titleEl
            @type Ext.Element
            </summary>
        </member>
        <member name="P:Ext.Toolbar.ui">
            <summary>
            @cfg {String} ui
            Style options for Toolbar. Default is 'dark'. 'light' is also available.
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.baseCls">
            <summary>
            The base CSS class to apply to the Carousel's element (defaults to <code>'x-toolbar'</code>).
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.defaultType">
            <summary>
            The default xtype to create. (Defaults to 'button')
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.layout">
            <summary>
            (optional)
            A layout config object. A string is NOT supported here.
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.title">
            <summary>
            (optional)
            The title of the Toolbar.
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.titleCls">
            <summary>
            The CSS class to apply to the titleEl (defaults to <code>'x-toolbar-title'</code>).
            </summary>
        </member>
        <member name="P:Ext.ToolbarConfig.ui">
            <summary>
            Style options for Toolbar. Default is 'dark'. 'light' is also available.
            </summary>
        </member>
        <member name="T:Ext.Video">
            <summary>
            @class Ext.Video
            @extends Ext.Media
            *
            <p>Provides a simple Container for HTML5 Video.</p>
            *
            <h2>Useful Properties</h2>
            <ul class="list">
            <li>{@link #url}</li>
            <li>{@link #autoPause}</li>
            <li>{@link #autoResume}</li>
            </ul>
            <h2>Useful Methods</h2>
            <ul class="list">
            <li>{@link #pause}</li>
            <li>{@link #play}</li>
            <li>{@link #toggle}</li>
            </ul>
            <h2>Screenshot:</h2>
            <p><img src="doc_resources/Ext.Video/screenshot.png" /></p>
            <h2>Example code:</h2>
            <pre><code>
            var pnl = new Ext.Panel({
            fullscreen: true,
            items: [
            {
            xtype    : 'video',
            x        : 600,
            y        : 300,
            width    : 175,
            height   : 98,
            url      : "porsche911.mov",
            posterUrl: 'porsche.png'
            }
            ]
            });</code></pre>
            @xtype video
            </summary>
        </member>
        <member name="P:Ext.Video.posterUrl">
            <summary>
            @cfg {String} posterUrl
            Location of a poster image to be shown before showing the video.
            </summary>
        </member>
        <member name="P:Ext.VideoConfig.posterUrl">
            <summary>
            Location of a poster image to be shown before showing the video.
            </summary>
        </member>
        <member name="P:Ext.VideoConfig.url">
            <summary>
            Location of the video to play. This should be in H.264 format and in a
            .mov file format.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.XTemplate" -->
        <member name="M:Ext.XTemplate.applyTemplate(System.Object)">
            <summary>
            Returns an HTML fragment of this template with the specified values applied.
            @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
            @return {String} The HTML fragment
            </summary>
        </member>
        <member name="M:Ext.XTemplate.compile">
            <summary>
            Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.
            @return {Function} The compiled function
            </summary>
        </member>
        <member name="M:Ext.XTemplate.from(System.Object,System.Object)">
            <summary>
            Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
            @param {String/HTMLElement} el A DOM element or its id
            @return {Ext.Template} The created template
            @static
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.XTemplate.argsRe" -->
        <member name="P:Ext.XTemplate.codeRe">
            <summary>
            @cfg {RegExp} codeRe The regular expression used to match code variables (default: matches <tt>{[expression]}</tt>).
            </summary>
        </member>
        <member name="P:Ext.XTemplate.re">
            <summary>
            @cfg {RegExp} codeRe The regular expression used to match code variables (default: matches <tt>{[expression]}</tt>).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.AbstractStore" -->
        <member name="M:Ext.data.AbstractStore.afterCommit(Ext.data.Model)">
            <summary>
            @private
            A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
            @param {Ext.data.Model} record The model instance that was edited
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.afterEdit(Ext.data.Model)">
            <summary>
            @private
            A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
            @param {Ext.data.Model} record The model instance that was edited
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.afterReject(Ext.data.Model)">
            <summary>
            @private
            A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to..
            @param {Ext.data.Model} record The model instance that was edited
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.#ctor(System.Object)">
            <summary>
            @cfg {String} storeId Optional unique identifier for this store. If present, this Store will be registered with
            the {@link Ext.StoreMgr}, making it easy to reuse elsewhere. Defaults to undefined.
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.createSortFunction(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Creates and returns a function which sorts an array by the given field and direction
            @param {String} field The field to create the sorter for
            @param {String} direction The direction to sort by (defaults to "ASC")
            @return {Function} A function which sorts by the field/direction combination provided
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.decodeFilters(SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            Normalizes an array of filter objects, ensuring that they are all Ext.util.Filter instances
            @param {Array} filters The filters array
            @return {Array} Array of Ext.util.Filter objects
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.decodeSorters(SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances
            @param {Array} sorters The sorters array
            @return {Array} Array of Ext.util.Sorter objects
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.filterDirty(System.Object)">
            <summary>
            @private
            Filter function for dirty records.
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.filterNew(System.Object)">
            <summary>
            @private
            Filter function for new records.
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getBatchListeners">
            <summary>
            @private
            Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
            This is broken out into a separate function to allow for customisation of the listeners
            @return {Object} The listeners object
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getNewRecords">
            <summary>
            Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
            yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
            @return {Array} The Model instances
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.getProxy">
            <summary>
            Returns the proxy currently attached to this proxy instance
            @return {Ext.data.Proxy} The Proxy instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.AbstractStore.getSortState" -->
        <member name="M:Ext.data.AbstractStore.getUpdatedRecords">
            <summary>
            Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
            @return {Array} The updated Model instances
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.load(System.Object)">
            <summary>
            Loads the Store using its configured {@link #proxy}.
            @param {Object} options Optional config object. This is passed into the {@link Ext.data.Operation Operation}
            object that is created and then sent to the proxy's {@link Ext.data.Proxy#read} function
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.onBatchComplete(System.Object,System.Object)">
            <summary>
            @private
            Attached as the 'complete' event listener to a proxy's Batch object. Iterates over the batch operations
            and updates the Store's internal data MixedCollection.
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.onBatchOperationComplete(System.Object,System.Object)">
            <summary>
            @private
            Attached as the 'operationcomplete' event listener to a proxy's Batch object. By default just calls through
            to onProxyWrite.
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.setProxy(System.Object)">
            <summary>
            Sets the Store's Proxy by string, config object or Proxy instance
            @param {String|Object|Ext.data.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
            or an Ext.data.Proxy instance
            @return {Ext.data.Proxy} The attached Proxy object
            </summary>
        </member>
        <member name="M:Ext.data.AbstractStore.sync">
            <summary>
            Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
            and deleted records in the store, updating the Store's internal representation of the records
            as each operation completes.
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.autoLoad">
            <summary>
            @cfg {Boolean/Object} autoLoad If data is not specified, and if autoLoad is true or an Object, this store's load method
            is automatically called after creation. If the value of autoLoad is an Object, this Object will be passed to the store's
            load method. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.autoSave">
            <summary>
            @cfg {Boolean} autoSave True to automatically sync the Store with its Proxy after every edit to one of its Records.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.BatchListeners">
            <summary>
            @private
            Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
            This is broken out into a separate function to allow for customisation of the listeners
            @return {Object} The listeners object
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.batchUpdateMode">
            <summary>
            Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's
            internal representation of the data after each operation of the batch has completed, 'complete' will wait until
            the entire batch has been completed before updating the Store's data. 'complete' is a good choice for local
            storage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.
            @property batchUpdateMode
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.defaultProxyType">
            <summary>
            The string type of the Proxy to create if none is specified. This defaults to creating a {@link Ext.data.MemoryProxy memory proxy}.
            @property defaultProxyType
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.defaultSortDirection">
            <summary>
            The default sort direction to use if one is not specified (defaults to "ASC")
            @property defaultSortDirection
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.filterOnLoad">
            <summary>
            If true, any filters attached to this Store will be run after loading data, before the datachanged event is fired.
            Defaults to true, ignored if {@link #remoteFilter} is true
            @property filterOnLoad
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.implicitModel">
            <summary>
            True if a model was created implicitly for this Store. This happens if a fields array is passed to the Store's constructor
            instead of a model constructor or name.
            @property implicitModel
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.isDestroyed">
            <summary>
            True if the Store has already been destroyed via {@link #destroyStore}. If this is true, the reference to Store should be deleted
            as it will not function correctly any more.
            @property isDestroyed
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.isStore">
            <summary>
            True if the Store has already been destroyed via {@link #destroyStore}. If this is true, the reference to Store should be deleted
            as it will not function correctly any more.
            @property isDestroyed
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.NewRecords">
            <summary>
            Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
            yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
            @return {Array} The Model instances
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStore.Proxy">
            <summary>
            Sets the Store's Proxy by string, config object or Proxy instance
            @param {String|Object|Ext.data.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
            or an Ext.data.Proxy instance
            @return {Ext.data.Proxy} The attached Proxy object
            Returns the proxy currently attached to this proxy instance
            @return {Ext.data.Proxy} The Proxy instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.AbstractStore.remoteFilter" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.data.AbstractStore.remoteSort" -->
        <member name="P:Ext.data.AbstractStore.sortOnLoad">
            <summary>
            If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.
            Defaults to true, igored if {@link #remoteSort} is true
            @property sortOnLoad
            @type Boolean
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.AbstractStore.SortState" -->
        <member name="P:Ext.data.AbstractStore.UpdatedRecords">
            <summary>
            Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
            @return {Array} The updated Model instances
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.autoLoad">
            <summary>
            If data is not specified, and if autoLoad is true or an Object, this store's load method
            is automatically called after creation. If the value of autoLoad is an Object, this Object will be passed to the store's
            load method. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.autoSave">
            <summary>
            True to automatically sync the Store with its Proxy after every edit to one of its Records.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.data.AbstractStoreConfig.proxy">
            <summary>
            The Proxy to use for this Store. This can be either a string, a config
            object or a Proxy instance - see {@link #setProxy} for details.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.AjaxProxy" -->
        <member name="T:Ext.data.ServerProxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.ServerProxy
            @extends Ext.data.Proxy
            <p>ServerProxy is a superclass of {@link Ext.data.ScriptTagProxy ScriptTagProxy} and {@link Ext.data.AjaxProxy AjaxProxy},
            and would not usually be used directly.</p>
            <p>ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
            called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now an
            alias of AjaxProxy).</p>
            </summary>
        </member>
        <member name="T:Ext.data.Proxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.Proxy
            @extends Ext.util.Observable
            <p>Proxies are used by {@link Ext.data.Store Stores} to handle the loading and saving of {@link Ext.data.Model Model} data.
            Usually developers will not need to create or interact with proxies directly.</p>
            <p><u>Types of Proxy</u></p>
            <p>There are two main types of Proxy - {@link Ext.data.ClientProxy Client} and {@link Ext.data.ServerProxy Server}. The Client proxies
            save their data locally and include the following subclasses:</p>
            <ul style="list-style-type: disc; padding-left: 25px">
            <li>{@link Ext.data.LocalStorageProxy LocalStorageProxy} - saves its data to localStorage if the browser supports it</li>
            <li>{@link Ext.data.SessionStorageProxy SessionStorageProxy} - saves its data to sessionStorage if the browsers supports it</li>
            <li>{@link Ext.data.MemoryProxy MemoryProxy} - holds data in memory only, any data is lost when the page is refreshed</li>
            </ul>
            <p>The Server proxies save their data by sending requests to some remote server. These proxies include:</p>
            <ul style="list-style-type: disc; padding-left: 25px">
            <li>{@link Ext.data.AjaxProxy AjaxProxy} - sends requests to a server on the same domain</li>
            <li>{@link Ext.data.ScriptTagProxy ScriptTagProxy} - uses JSON-P to send requests to a server on a different domain</li>
            </ul>
            <p>Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four operations
            are mapped to the methods {@link #create}, {@link #read}, {@link #update} and {@link #destroy} respectively. Each Proxy subclass
            implements these functions.</p>
            <p>The CRUD methods each expect an {@link Ext.data.Operation Operation} object as the sole argument. The Operation encapsulates
            information about the action the Store wishes to perform, the {@link Ext.data.Model model} instances that are to be modified, etc.
            See the {@link Ext.data.Operation Operation} documentation for more details. Each CRUD method also accepts a callback function to be
            called asynchronously on completion.</p>
            <p>Proxies also support batching of Operations via a {@link Ext.data.Batch batch} object, invoked by the {@link #batch} method.</p>
            @constructor
            Creates the Proxy
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.batch(System.Object,System.Object)">
            <summary>
            Performs a batch of {@link Ext.data.Operation Operations}, in the order specified by {@link #batchOrder}. Used internally by
            {@link Ext.data.Store}'s {@link Ext.data.Store#sync sync} method. Example usage:
            <pre><code>
            myProxy.batch({
            create : [myModel1, myModel2],
            update : [myModel3],
            destroy: [myModel4, myModel5]
            });
            </code></pre>
            Where the myModel* above are {@link Ext.data.Model Model} instances - in this case 1 and 2 are new instances and have not been
            saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.
            @param {Object} operations Object containing the Model instances to act upon, keyed by action name
            @param {Object} listeners Optional listeners object passed straight through to the Batch - see {@link Ext.data.Batch}
            @return {Ext.data.Batch} The newly created Ext.data.Batch object
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.#ctor(System.Object)">
            <summary>
            @cfg {String/Ext.data.Model} model The name of the Model to tie to this Proxy. Can be either the string name of
            the Model, or a reference to the Model constructor. Required.
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.getModel">
            <summary>
            Returns the model attached to this Proxy
            @return {Ext.data.Model} The model
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.getReader">
            <summary>
            Returns the reader currently attached to this proxy instance
            @return {Ext.data.Reader} The Reader instance
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.getWriter">
            <summary>
            Returns the writer currently attached to this proxy instance
            @return {Ext.data.Writer} The Writer instance
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.setModel(System.Object,System.Boolean)">
            <summary>
            Sets the model associated with this proxy. This will only usually be called by a Store
            @param {String|Ext.data.Model} model The new model. Can be either the model name string,
            or a reference to the model's constructor
            @param {Boolean} setOnStore Sets the new model on the associated Store, if one is present
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.setReader(System.Object)">
            <summary>
            Sets the Proxy's Reader by string, config object or Reader instance
            @param {String|Object|Ext.data.Reader} reader The new Reader, which can be either a type string, a configuration object
            or an Ext.data.Reader instance
            @return {Ext.data.Reader} The attached Reader object
            </summary>
        </member>
        <member name="M:Ext.data.Proxy.setWriter(System.Object)">
            <summary>
            Sets the Proxy's Writer by string, config object or Writer instance
            @param {String|Object|Ext.data.Writer} writer The new Writer, which can be either a type string, a configuration object
            or an Ext.data.Writer instance
            @return {Ext.data.Writer} The attached Writer object
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.batchOrder">
            <summary>
            @cfg {String} batchOrder
            Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this
            to set a different order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.defaultReaderType">
            <summary>
            @cfg {String} defaultReaderType The default registered reader type. Defaults to 'json'
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.defaultWriterType">
            <summary>
            @cfg {String} defaultWriterType The default registered writer type. Defaults to 'json'
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.Model">
            <summary>
            Returns the model attached to this Proxy
            @return {Ext.data.Model} The model
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.Reader">
            <summary>
            Sets the Proxy's Reader by string, config object or Reader instance
            @param {String|Object|Ext.data.Reader} reader The new Reader, which can be either a type string, a configuration object
            or an Ext.data.Reader instance
            @return {Ext.data.Reader} The attached Reader object
            Returns the reader currently attached to this proxy instance
            @return {Ext.data.Reader} The Reader instance
            </summary>
        </member>
        <member name="P:Ext.data.Proxy.Writer">
            <summary>
            Sets the Proxy's Writer by string, config object or Writer instance
            @param {String|Object|Ext.data.Writer} writer The new Writer, which can be either a type string, a configuration object
            or an Ext.data.Writer instance
            @return {Ext.data.Writer} The attached Writer object
            Returns the writer currently attached to this proxy instance
            @return {Ext.data.Writer} The Writer instance
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.buildRequest(Ext.data.Operation)">
            <summary>
            Creates and returns an Ext.data.Request object based on the options passed by the {@link Ext.data.Store Store}
            that this Proxy is attached to.
            @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object to execute
            @return {Ext.data.Request} The request object
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.buildUrl(Ext.data.Request)">
            <summary>
            Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will
            add the cache-buster param to the end of the url. Subclasses may need to perform additional modifications
            to the url.
            @param {Ext.data.Request} request The request object
            @return {String} The url
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.#ctor(System.Object)">
            <summary>
            @ignore
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.doRequest(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            In ServerProxy subclasses, the {@link #create}, {@link #read}, {@link #update} and {@link #destroy} methods all pass
            through to doRequest. Each ServerProxy subclass must implement the doRequest method - see {@link Ext.data.ScriptTagProxy}
            and {@link Ext.data.AjaxProxy} for examples. This method carries the same signature as each of the methods that delegate to it.
            @param {Ext.data.Operation} operation The Ext.data.Operation object
            @param {Function} callback The callback function to call when the Operation has completed
            @param {Object} scope The scope in which to execute the callback
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.encodeFilters(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes the array of {@link Ext.util.Filter} objects into a string to be sent in the request url. By default,
            this simply JSON-encodes the filter data
            @param {Array} sorters The array of {@link Ext.util.Filter Filter} objects
            @return {String} The encoded filters
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.encodeGroupers(System.Object)">
            <summary>
            Encodes the grouping object (field and direction) into a string to be sent in the request url. Be default, this
            simply JSON-encodes the grouping data
            @param {Object} group The group configuration (field and direction)
            @return {String} The encoded group string
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.encodeSorters(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes the array of {@link Ext.util.Sorter} objects into a string to be sent in the request url. By default,
            this simply JSON-encodes the sorter data
            @param {Array} sorters The array of {@link Ext.util.Sorter Sorter} objects
            @return {String} The encoded sorters
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.getParams(System.Object,System.Object)">
            <summary>
            @private
            Copy any sorters, filters etc into the params so they can be sent over the wire
            </summary>
        </member>
        <member name="M:Ext.data.ServerProxy.onDestroy">
            <summary>
            Optional callback function which can be used to clean up after a request has been completed.
            @param {Ext.data.Request} request The Request object
            @param {Boolean} success True if the request was successful
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.cacheString">
            <summary>
            @cfg {String} cacheString The name of the cache param added to the url when using noCache (defaults to "_dc")
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.filterParam">
            <summary>
            @cfg {String} filterParam The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set
            this to undefined if you don't want to send a filter parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.groupParam">
            <summary>
            @cfg {String} groupParam The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this
            to undefined if you don't want to send a group parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.limitParam">
            <summary>
            @cfg {String} limitParam The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this
            to undefined if you don't want to send a limit parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.noCache">
            <summary>
            @cfg {Boolean} noCache (optional) Defaults to true. Disable caching by adding a unique parameter
            name to the request.
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.pageParam">
            <summary>
            @cfg {String} pageParam The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to
            undefined if you don't want to send a page parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.sortParam">
            <summary>
            @cfg {String} sortParam The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this
            to undefined if you don't want to send a sort parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.startParam">
            <summary>
            @cfg {String} startParam The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this
            to undefined if you don't want to send a start parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxy.timeout">
            <summary>
            @cfg {Number} timeout (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="M:Ext.data.AjaxProxy.#ctor">
            <summary>
            @cfg {Object} headers Any headers to add to the Ajax request. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="M:Ext.data.AjaxProxy.createRequestCallback(Ext.data.Request,Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            @private
            TODO: This is currently identical to the ScriptTagProxy version except for the return function's signature. There is a lot
            of code duplication inside the returned function so we need to find a way to DRY this up.
            @param {Ext.data.Request} request The Request object
            @param {Ext.data.Operation} operation The Operation being executed
            @param {Function} callback The callback function to be called when the request completes. This is usually the callback
            passed to doRequest
            @param {Object} scope The scope in which to execute the callback function
            @return {Function} The callback function
            </summary>
        </member>
        <member name="M:Ext.data.AjaxProxy.doRequest(System.Object,System.Object,System.Object)">
            <summary>
            @ignore
            </summary>
        </member>
        <member name="M:Ext.data.AjaxProxy.getMethod(Ext.data.Request)">
            <summary>
            Returns the HTTP method name for a given request. By default this returns based on a lookup on {@link #actionMethods}.
            @param {Ext.data.Request} request The request object
            @return {String} The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE')
            </summary>
        </member>
        <member name="T:Ext.data.ArrayReader">
            <summary>
            @author Ed Spencer
            @class Ext.data.ArrayReader
            @extends Ext.data.JsonReader
            <p>Data reader class to create an Array of {@link Ext.data.Model} objects from an Array.
            Each element of that Array represents a row of data fields. The
            fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
            of the field definition if it exists, or the field's ordinal position in the definition.</p>
            <p><u>Example code:</u></p>
            <pre><code>
            var Employee = Ext.regModel('Employee', {
            fields: [
            'id',
            {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
            {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
            ]
            });
            var myReader = new Ext.data.ArrayReader({
            model: 'Employee'
            }, Employee);
            </code></pre>
            <p>This would consume an Array like this:</p>
            <pre><code>
            [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
            </code></pre>
            @constructor
            Create a new ArrayReader
            @param {Object} meta Metadata configuration options.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.JsonReader" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Reader" -->
        <member name="M:Ext.data.Reader.buildExtractors(System.Boolean)">
            <summary>
            @private
            This builds optimized functions for retrieving record data and meta data from an object.
            Subclasses may need to implement their own getRoot function.
            @param {Boolean} force True to automatically remove existing extractor functions first (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.data.Reader.buildFieldExtractors">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Reader.extractData(System.Object,System.Boolean)">
            <summary>
            Returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
            @param {Object[]/Object} data-root from server response
            @param {Boolean} returnRecords [false] Set true to return instances of Ext.data.Record
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Reader.extractValues(System.Object)">
            <summary>
            @private
            Given an object representing a single model instance's data, iterates over the model's fields and
            builds an object with the value for each field.
            @param {Object} data The data object to convert
            @return {Object} Data object suitable for use with a model constructor
            </summary>
        </member>
        <member name="M:Ext.data.Reader.getAssociatedDataRoot(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Used internally by {@link #readAssociated}. Given a data object (which could be json, xml etc) for a specific
            record, this should return the relevant part of that data for the given association name. This is only really
            needed to support the XML Reader, which has to do a query to get the associated data object
            @param {Mixed} data The raw data object
            @param {String} associationName The name of the association to get data for (uses associationKey if present)
            @return {Mixed} The root
            </summary>
        </member>
        <member name="M:Ext.data.Reader.getData(System.Object)">
            <summary>
            @private
            By default this function just returns what is passed to it. It can be overridden in a subclass
            to return something else. See XmlReader for an example.
            @param {Object} data The data object
            @return {Object} The normalized data object
            </summary>
        </member>
        <member name="M:Ext.data.Reader.getResponseData(System.Object)">
            <summary>
            Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass
            @param {Object} response The responce object
            @return {Object} The useful data from the response
            </summary>
        </member>
        <member name="M:Ext.data.Reader.getRoot(System.Object)">
            <summary>
            @private
            This will usually need to be implemented in a subclass. Given a generic data object (the type depends on the type
            of data we are reading), this function should return the object as configured by the Reader's 'root' meta data config.
            See XmlReader's getRoot implementation for an example. By default the same data object will simply be returned.
            @param {Mixed} data The data object
            @return {Mixed} The same data object
            </summary>
        </member>
        <member name="M:Ext.data.Reader.onMetaChange(System.Object)">
            <summary>
            @private
            Reconfigures the meta data tied to this Reader
            </summary>
        </member>
        <member name="M:Ext.data.Reader.read(System.Object)">
            <summary>
            Reads the given response object. This method normalizes the different types of response object that may be passed
            to it, before handing off the reading of records to the {@link readRecords} function.
            @param {Object} response The response object. This may be either an XMLHttpRequest object or a plain JS object
            @return {Ext.data.ResultSet} The parsed ResultSet object
            </summary>
        </member>
        <member name="M:Ext.data.Reader.readAssociated(Ext.data.Model,System.Object)">
            <summary>
            @private
            Loads a record's associations from the data object. This prepopulates hasMany and belongsTo associations
            on the record provided.
            @param {Ext.data.Model} record The record to load associations for
            @param {Mixed} data The data object
            @return {String} Return value description
            </summary>
        </member>
        <member name="M:Ext.data.Reader.readRecords(System.Object)">
            <summary>
            Abstracts common functionality used by all Reader subclasses. Each subclass is expected to call
            this function before running its own logic and returning the Ext.data.ResultSet instance. For most
            Readers additional processing should not be needed.
            @param {Mixed} data The raw data object
            @return {Ext.data.ResultSet} A ResultSet object
            </summary>
        </member>
        <member name="M:Ext.data.Reader.setModel(System.Object,System.Boolean)">
            <summary>
            Sets a new model for the reader.
            @private
            @param {Object} model The model to set.
            @param {Boolean} setOnProxy True to also set on the Proxy, if one is configured
            </summary>
        </member>
        <member name="P:Ext.data.Reader.idProperty">
            <summary>
            @cfg {String} idProperty Name of the property within a row object
            that contains a record identifier value.  Defaults to <tt>id</tt>
            </summary>
        </member>
        <member name="P:Ext.data.Reader.implicitIncludes">
            <summary>
            @cfg {Boolean} implicitIncludes True to automatically parse models nested within other models in a response
            object. See the Ext.data.Reader intro docs for full explanation. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.data.Reader.root">
            <summary>
            @cfg {String} root <b>Required</b>.  The name of the property
            which contains the Array of row objects.  Defaults to <tt>undefined</tt>.
            An exception will be thrown if the root property is undefined. The data
            packet value for this property should be an empty array to clear the data
            or show no data.
            </summary>
        </member>
        <member name="P:Ext.data.Reader.successProperty">
            <summary>
            @cfg {String} successProperty Name of the property from which to
            retrieve the success attribute. Defaults to <tt>success</tt>.  See
            {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}
            for additional information.
            </summary>
        </member>
        <member name="P:Ext.data.Reader.totalProperty">
            <summary>
            @cfg {String} totalProperty Name of the property from which to
            retrieve the total number of records in the dataset. This is only needed
            if the whole dataset is not passed in one go, but is being paged from
            the remote server.  Defaults to <tt>total</tt>.
            </summary>
        </member>
        <member name="M:Ext.data.JsonReader.extractData(System.Object,System.Object)">
            <summary>
            @private
            We're just preparing the data for the superclass by pulling out the record objects we want. If a {@link #record}
            was specified we have to pull those out of the larger JSON object, which is most of what this function is doing
            @param {Object} root The JSON root node
            @return {Array} The records
            </summary>
        </member>
        <member name="M:Ext.data.JsonReader.readRecords(System.Object)">
            <summary>
            Reads a JSON object and returns a ResultSet. Uses the internal getTotal and getSuccess extractors to
            retrieve meta data from the response, and extractData to turn the JSON data into model instances.
            @param {Object} data The raw JSON data
            @return {Ext.data.ResultSet} A ResultSet containing model instances and meta data about the results
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.JsonReader.root" -->
        <member name="M:Ext.data.ArrayReader.buildExtractors">
            <summary>
            @private
            Most of the work is done for us by JsonReader, but we need to overwrite the field accessors to just
            reference the correct position in the array.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.ArrayStore" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Store" -->
        <member name="M:Ext.data.Store.add(System.Object)">
            <summary>
            Adds Model instances to the Store by instantiating them based on a JavaScript object. When adding already-
            instantiated Models, use {@link #insert} instead. The instances will be added at the end of the existing collection.
            This method accepts either a single argument array of Model instances or any number of model instance arguments.
            Sample usage:
            <pre><code>
            myStore.add({some: 'data'}, {some: 'other data'});
            </code></pre>
            @param {Object} data The data for each model
            @return {Array} The array of newly created model instances
            </summary>
        </member>
        <member name="M:Ext.data.Store.clearFilter(System.Boolean)">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            @param {Boolean} suppressEvent If <tt>true</tt> the filter is cleared silently without firing the
            {@link #datachanged} event.
            </summary>
        </member>
        <member name="M:Ext.data.Store.collect(SharpKit.JavaScript.JsString,System.Boolean,System.Boolean)">
            <summary>
            Collects unique values for a particular dataIndex from this store.
            @param {String} dataIndex The property to collect
            @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
            @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
            @return {Array} An array of the unique values
            </summary>
        </member>
        <member name="M:Ext.data.Store.createFilterFn(SharpKit.JavaScript.JsString,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            @private
            Returns a filter function used to test a the given property's value. Defers most of the work to
            Ext.util.MixedCollection's createValueMatcher function
            @param {String} property The property to create the filter function for
            @param {String/RegExp} value The string/regex to compare the property value to
            @param {Boolean} anyMatch True if we don't care if the filter value is not the full value (defaults to false)
            @param {Boolean} caseSensitive True to create a case-sensitive regex (defaults to false)
            @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
            Ignored if anyMatch is true.
            </summary>
        </member>
        <member name="M:Ext.data.Store.createModel(System.Object)">
            <summary>
            Converts a literal to a model, if it's not a model already
            @private
            @param record {Ext.data.Model/Object} The record to create
            @return {Ext.data.Model}
            </summary>
        </member>
        <member name="M:Ext.data.Store.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Calls the specified function for each of the {@link Ext.data.Record Records} in the cache.
            @param {Function} fn The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.
            Returning <tt>false</tt> aborts and exits the iteration.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed.
            Defaults to the current {@link Ext.data.Record Record} in the iteration.
            </summary>
        </member>
        <member name="M:Ext.data.Store.filter(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Filters the loaded set of records by a given set of filters.
            @param {Mixed} filters The set of filters to apply to the data. These are stored internally on the store,
            but the filtering itself is done on the Store's {@link Ext.util.MixedCollection MixedCollection}. See
            MixedCollection's {@link Ext.util.MixedCollection#filter filter} method for filter syntax. Alternatively,
            pass in a property string
            @param {String} value Optional value to filter by (only if using a property string as the first argument)
            </summary>
        </member>
        <member name="M:Ext.data.Store.filterBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Filter by a function. The specified function will be called for each
            Record in this Store. If the function returns <tt>true</tt> the Record is included,
            otherwise it is filtered out.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            </summary>
        </member>
        <member name="M:Ext.data.Store.find(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds the index of the first matching Record in this store by a specific field value.
            @param {String} fieldName The name of the Record field to test.
            @param {String/RegExp} value Either a string that the field value
            should begin with, or a RegExp to test against the field.
            @param {Number} startIndex (optional) The index to start searching at
            @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
            @param {Boolean} caseSensitive (optional) True for case sensitive comparison
            @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.findBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Find the index of the first matching Record in this Store by a function.
            If the function returns <tt>true</tt> it is considered a match.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            @param {Number} startIndex (optional) The index to start searching at
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.findExact(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Finds the index of the first matching Record in this store by a specific field value.
            @param {String} fieldName The name of the Record field to test.
            @param {Mixed} value The value to match the field against.
            @param {Number} startIndex (optional) The index to start searching at
            @return {Number} The matched index or -1
            </summary>
        </member>
        <member name="M:Ext.data.Store.findRecord">
            <summary>
            Finds the first matching Record in this store by a specific field value.
            @param {String} fieldName The name of the Record field to test.
            @param {String/RegExp} value Either a string that the field value
            should begin with, or a RegExp to test against the field.
            @param {Number} startIndex (optional) The index to start searching at
            @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
            @param {Boolean} caseSensitive (optional) True for case sensitive comparison
            @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
            @return {Ext.data.Record} The matched record or null
            </summary>
        </member>
        <member name="M:Ext.data.Store.first">
            <summary>
            Convenience function for getting the first model instance in the store
            @return {Ext.data.Model/undefined} The first model instance in the store, or undefined
            </summary>
        </member>
        <member name="M:Ext.data.Store.getAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the Record at the specified index.
            @param {Number} index The index of the Record to find.
            @return {Ext.data.Model} The Record at the passed index. Returns undefined if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getById(SharpKit.JavaScript.JsString)">
            <summary>
            Get the Record with the specified id.
            @param {String} id The id of the Record to find.
            @return {Ext.data.Record} The Record with the passed id. Returns undefined if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getCount">
            <summary>
            Gets the number of cached records.
            <p>If using paging, this may not be the total size of the dataset. If the data object
            used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
            the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
            @return {Number} The number of Records in the Store's cache.
            </summary>
        </member>
        <member name="M:Ext.data.Store.getGroups">
            <summary>
            Returns an object containing the result of applying grouping to the records in this store. See {@link #groupField},
            {@link #groupDir} and {@link #getGroupString}. Example for a store containing records with a color field:
            <pre><code>
            var myStore = new Ext.data.Store({
            groupField: 'color',
            groupDir  : 'DESC'
            });
            myStore.getGroups(); //returns:
            [
            {
            name: 'yellow',
            children: [
            //all records where the color field is 'yellow'
            ]
            },
            {
            name: 'red',
            children: [
            //all records where the color field is 'red'
            ]
            }
            ]
            </code></pre>
            @return {Array} The grouped data
            </summary>
        </member>
        <member name="M:Ext.data.Store.getGroupString(Ext.data.Model)">
            <summary>
            Returns the string to group on for a given model instance. The default implementation of this method returns the model's
            {@link #groupField}, but this can be overridden to group by an arbitrary string. For example, to group by the first letter
            of a model's 'name' field, use the following code:
            <pre><code>
            new Ext.data.Store({
            groupDir: 'ASC',
            getGroupString: function(instance) {
            return instance.get('name')[0];
            }
            });
            </code></pre>
            @param {Ext.data.Model} instance The model instance
            @return {String} The string to compare when forming groups
            </summary>
        </member>
        <member name="M:Ext.data.Store.getRange(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns a range of Records between specified indices.
            @param {Number} startIndex (optional) The starting index (defaults to 0)
            @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
            @return {Ext.data.Model[]} An array of Records
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOf(Ext.data.Model)">
            <summary>
            Get the index within the cache of the passed Record.
            @param {Ext.data.Model} record The Ext.data.Model object to find.
            @return {Number} The index of the passed Record. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.indexOfId(SharpKit.JavaScript.JsString)">
            <summary>
            Get the index within the cache of the Record with the passed id.
            @param {String} id The id of the Record to find.
            @return {Number} The index of the Record. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Ext.data.Store.insert(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            Inserts Model instances into the Store at the given index and fires the {@link #add} event.
            See also <code>{@link #add}</code>.
            @param {Number} index The start index at which to insert the passed Records.
            @param {Ext.data.Model[]} records An Array of Ext.data.Model objects to add to the cache.
            </summary>
        </member>
        <member name="M:Ext.data.Store.isFiltered">
            <summary>
            Returns true if this store is currently filtered
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Store.isLoading">
            <summary>
            Returns true if the Store is currently performing a load operation
            @return {Boolean} True if the Store is currently loading
            </summary>
        </member>
        <member name="M:Ext.data.Store.last">
            <summary>
            Convenience function for getting the last model instance in the store
            @return {Ext.data.Model/undefined} The last model instance in the store, or undefined
            </summary>
        </member>
        <member name="M:Ext.data.Store.load(System.Object)">
            <summary>
            <p>Loads data into the Store via the configured {@link #proxy}. This uses the Proxy to make an
            asynchronous call to whatever storage backend the Proxy uses, automatically adding the retrieved
            instances into the Store and calling an optional callback if required. Example usage:</p>
            <pre><code>
            store.load({
            scope   : this,
            callback: function(records, operation, success) {
            //the {@link Ext.data.Operation operation} object contains all of the details of the load operation
            console.log(records);
            }
            });
            </code></pre>
            <p>If the callback scope does not need to be set, a function can simply be passed:</p>
            <pre><code>
            store.load(function(records, operation, success) {
            console.log('loaded records');
            });
            </code></pre>
            @param {Object/Function} options Optional config object, passed into the Ext.data.Operation object before loading.
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadData(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Loads an array of data straight into the Store
            @param {Array} data Array of data to load. Any non-model instances will be cast into model instances first
            @param {Boolean} append True to add the records to the existing records in the store, false to remove the old ones first
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadPage(SharpKit.JavaScript.JsNumber)">
            <summary>
            Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal
            load operation, passing in calculated 'start' and 'limit' params
            @param {Number} page The number of the page to load
            </summary>
        </member>
        <member name="M:Ext.data.Store.loadRecords(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. This should only usually
            be called internally when loading from the {@link Ext.data.Proxy Proxy}, when adding records manually use {@link #add} instead
            @param {Array} records The array of records to load
            @param {Boolean} add True to add these records to the existing records, false to remove the Store's existing records first
            </summary>
        </member>
        <member name="M:Ext.data.Store.nextPage">
            <summary>
            Loads the next 'page' in the current data set
            </summary>
        </member>
        <member name="M:Ext.data.Store.onProxyLoad(System.Object)">
            <summary>
            @private
            Called internally when a Proxy has completed a load request
            </summary>
        </member>
        <member name="M:Ext.data.Store.onProxyWrite(System.Object)">
            <summary>
            @private
            Callback for any write Operation over the Proxy. Updates the Store's MixedCollection to reflect
            the updates provided by the Proxy
            </summary>
        </member>
        <member name="M:Ext.data.Store.previousPage">
            <summary>
            Loads the previous 'page' in the current data set
            </summary>
        </member>
        <member name="M:Ext.data.Store.queryBy(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Query the cached records in this Store using a filtering function. The specified function
            will be called with each record in this Store. If the function returns <tt>true</tt> the record is
            included in the results.
            @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
            <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
            to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
            <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
            </ul>
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
            @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
            </summary>
        </member>
        <member name="M:Ext.data.Store.remove(System.Object)">
            <summary>
            Removes the given record from the Store, firing the 'remove' event for each instance that is removed, plus a single
            'datachanged' event after removal.
            @param {Ext.data.Model/Array} records The Ext.data.Model instance or array of instances to remove
            </summary>
        </member>
        <member name="M:Ext.data.Store.removeAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Removes the model instance at the given index
            @param {Number} index The record index
            </summary>
        </member>
        <member name="M:Ext.data.Store.sort(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            <p>Sorts the data in the Store by one or more of its properties. Example usage:</p>
            <pre><code>
            //sort by a single field
            myStore.sort('myField', 'DESC');
            //sorting by multiple fields
            myStore.sort([
            {
            property : 'age',
            direction: 'ASC'
            },
            {
            property : 'name',
            direction: 'DESC'
            }
            ]);
            </code></pre>
            <p>Internally, Store converts the passed arguments into an array of {@link Ext.util.Sorter} instances, and delegates the actual
            sorting to its internal {@link Ext.util.MixedCollection}.</p>
            <p>When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:</p>
            <pre><code>
            store.sort('myField');
            store.sort('myField');
            </code></pre>
            <p>Is equivalent to this code, because Store handles the toggling automatically:</p>
            <pre><code>
            store.sort('myField', 'ASC');
            store.sort('myField', 'DESC');
            </code></pre>
            @param {String|Array} sorters Either a string name of one of the fields in this Store's configured {@link Ext.data.Model Model},
            or an Array of sorter configurations.
            @param {String} direction The overall direction to sort the data by. Defaults to "ASC".
            </summary>
        </member>
        <member name="M:Ext.data.Store.sum(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Sums the value of <tt>property</tt> for each {@link Ext.data.Record record} between <tt>start</tt>
            and <tt>end</tt> and returns the result.
            @param {String} property A field in each record
            @param {Number} start (optional) The record index to start at (defaults to <tt>0</tt>)
            @param {Number} end (optional) The last record index to include (defaults to length - 1)
            @return {Number} The sum
            </summary>
        </member>
        <member name="P:Ext.data.Store.clearOnPageLoad">
            <summary>
            @cfg {Boolean} clearOnPageLoad True to empty the store when loading another page via {@link #loadPage},
            {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
            large data sets to be loaded one page at a time but rendered all together.
            </summary>
        </member>
        <member name="P:Ext.data.Store.Count">
            <summary>
            Gets the number of cached records.
            <p>If using paging, this may not be the total size of the dataset. If the data object
            used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
            the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
            @return {Number} The number of Records in the Store's cache.
            </summary>
        </member>
        <member name="P:Ext.data.Store.currentPage">
            <summary>
            The page that the Store has most recently loaded (see {@link #loadPage})
            @property currentPage
            @type Number
            </summary>
        </member>
        <member name="P:Ext.data.Store.groupDir">
            <summary>
            The direction in which sorting should be applied when grouping. Defaults to "ASC" - the other supported value is "DESC"
            @property groupDir
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.Store.Groups">
            <summary>
            Returns an object containing the result of applying grouping to the records in this store. See {@link #groupField},
            {@link #groupDir} and {@link #getGroupString}. Example for a store containing records with a color field:
            <pre><code>
            var myStore = new Ext.data.Store({
            groupField: 'color',
            groupDir  : 'DESC'
            });
            myStore.getGroups(); //returns:
            [
            {
            name: 'yellow',
            children: [
            //all records where the color field is 'yellow'
            ]
            },
            {
            name: 'red',
            children: [
            //all records where the color field is 'red'
            ]
            }
            ]
            </code></pre>
            @return {Array} The grouped data
            </summary>
        </member>
        <member name="P:Ext.data.Store.implicitModel">
            <summary>
            True if a model was created implicitly for this Store. This happens if a fields array is passed to the Store's constructor
            instead of a model constructor or name.
            @property implicitModel
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Store.isStore">
            <summary>
            @cfg {Boolean} sortOnFilter For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
            causing the sorters to be reapplied after filtering. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.data.Store.loading">
            <summary>
            True if the Store is currently loading via its Proxy
            @property loading
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Store.pageSize">
            <summary>
            The number of records considered to form a 'page'. This is used to power the built-in
            paging using the nextPage and previousPage functions. Defaults to 25.
            @property pageSize
            @type Number
            </summary>
        </member>
        <member name="P:Ext.data.Store.remoteFilter">
            <summary>
            @cfg {Boolean} remoteFilter
            True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.Store.remoteSort">
            <summary>
            @cfg {Boolean} remoteSort
            True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.Store.sortOnFilter">
            <summary>
            @cfg {Boolean} sortOnFilter For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
            causing the sorters to be reapplied after filtering. Defaults to true
            </summary>
        </member>
        <member name="M:Ext.data.ArrayStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Association" -->
        <member name="M:Ext.data.Association.#ctor(System.Object)">
            <summary>
            @cfg {String} primaryKey The name of the primary key on the associated model. Defaults to 'id'
            </summary>
        </member>
        <member name="P:Ext.data.Association.primaryKey">
            <summary>
            @cfg {String} primaryKey The name of the primary key on the associated model. Defaults to 'id'
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.associatedModel">
            <summary>
            The string name of the model that is being associated with. Required
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.ownerModel">
            <summary>
            The string name of the model that owns the association. Required
            </summary>
        </member>
        <member name="P:Ext.data.AssociationConfig.primaryKey">
            <summary>
            The name of the primary key on the associated model. Defaults to 'id'
            </summary>
        </member>
        <member name="T:Ext.data.Batch">
            <summary>
            @author Ed Spencer
            @class Ext.data.Batch
            @extends Ext.util.Observable
            <p>Provides a mechanism to run one or more {@link Ext.data.Operation operations} in a given order. Fires the 'operationcomplete' event
            after the completion of each Operation, and the 'complete' event when all Operations have been successfully executed. Fires an 'exception'
            event if any of the Operations encounter an exception.</p>
            <p>Usually these are only used internally by {@link Ext.data.Proxy} classes</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Batch.add(System.Object)">
            <summary>
            Adds a new operation to this batch
            @param {Object} operation The {@link Ext.data.Operation Operation} object
            </summary>
        </member>
        <member name="M:Ext.data.Batch.#ctor(System.Object)">
            <summary>
            True to automatically pause the execution of the batch if any operation encounters an exception (defaults to true)
            @property pauseOnException
            @type Boolean
            </summary>
        </member>
        <member name="M:Ext.data.Batch.pause">
            <summary>
            Pauses execution of the batch, but does not cancel the current operation
            </summary>
        </member>
        <member name="M:Ext.data.Batch.runNextOperation">
            <summary>
            @private
            Runs the next operation, relative to this.current.
            </summary>
        </member>
        <member name="M:Ext.data.Batch.runOperation(SharpKit.JavaScript.JsNumber)">
            <summary>
            Executes a operation by its numeric index
            @param {Number} index The operation index to run
            </summary>
        </member>
        <member name="M:Ext.data.Batch.start">
            <summary>
            Kicks off the execution of the batch, continuing from the next operation if the previous
            operation encountered an exception, or if execution was paused
            </summary>
        </member>
        <member name="P:Ext.data.Batch.autoStart">
            <summary>
            True to immediately start processing the batch as soon as it is constructed (defaults to false)
            @property autoStart
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Batch.hasException">
            <summary>
            True if this batch has encountered an exception. This is cleared at the start of each operation
            @property hasException
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Batch.isComplete">
            <summary>
            True if this batch has been executed completely
            @property isComplete
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Batch.isRunning">
            <summary>
            True if the batch is currently running
            @property isRunning
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Batch.pauseOnException">
            <summary>
            True to automatically pause the execution of the batch if any operation encounters an exception (defaults to true)
            @property pauseOnException
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Batch.total">
            <summary>
            The total number of operations in this batch. Read only
            @property total
            @type Number
            </summary>
        </member>
        <member name="T:Ext.data.BelongsToAssociation">
            <summary>
            @author Ed Spencer
            @class Ext.data.BelongsToAssociation
            @extends Ext.data.Association
            <p>Represents a many to one association with another model. The owner model is expected to have
            a foreign key which references the primary key of the associated model:</p>
            <pre><code>
            var Category = Ext.regModel('Category', {
            fields: [
            {name: 'id',   type: 'int'},
            {name: 'name', type: 'string'}
            ]
            });
            var Product = Ext.regModel('Product', {
            fields: [
            {name: 'id',          type: 'int'},
            {name: 'category_id', type: 'int'},
            {name: 'name',        type: 'string'}
            ],
            associations: [
            {type: 'belongsTo', model: 'Category'}
            ]
            });
            </code></pre>
            <p>In the example above we have created models for Products and Categories, and linked them together
            by saying that each Product belongs to a Category. This automatically links each Product to a Category
            based on the Product's category_id, and provides new functions on the Product model:</p>
            <p><u>Generated getter function</u></p>
            <p>The first function that is added to the owner model is a getter function:</p>
            <pre><code>
            var product = new Product({
            id: 100,
            category_id: 20,
            name: 'Sneakers'
            });
            product.getCategory(function(category, operation) {
            //do something with the category object
            alert(category.get('id')); //alerts 20
            }, this);
            </code></pre>
            *
            <p>The getCategory function was created on the Product model when we defined the association. This uses the
            Category's configured {@link Ext.data.Proxy proxy} to load the Category asynchronously, calling the provided
            callback when it has loaded.</p>
            <p>The new getCategory function will also accept an object containing success, failure and callback properties
            - callback will always be called, success will only be called if the associated model was loaded successfully
            and failure will only be called if the associatied model could not be loaded:</p>
            <pre><code>
            product.getCategory({
            callback: function(category, operation) {}, //a function that will always be called
            success : function(category, operation) {}, //a function that will only be called if the load succeeded
            failure : function(category, operation) {}, //a function that will only be called if the load did not succeed
            scope   : this //optionally pass in a scope object to execute the callbacks in
            });
            </code></pre>
            <p>In each case above the callbacks are called with two arguments - the associated model instance and the
            {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
            useful when the instance could not be loaded.</p>
            <p><u>Generated setter function</u></p>
            <p>The second generated function sets the associated model instance - if only a single argument is passed to
            the setter then the following two calls are identical:</p>
            <pre><code>
            //this call
            product.setCategory(10);
            //is equivalent to this call:
            product.set('category_id', 10);
            </code></pre>
            <p>If we pass in a second argument, the model will be automatically saved and the second argument passed to
            the owner model's {@link Ext.data.Model#save save} method:</p>
            <pre><code>
            product.setCategory(10, function(product, operation) {
            //the product has been saved
            alert(product.get('category_id')); //now alerts 10
            });
            //alternative syntax:
            product.setCategory(10, {
            callback: function(product, operation), //a function that will always be called
            success : function(product, operation), //a function that will only be called if the load succeeded
            failure : function(product, operation), //a function that will only be called if the load did not succeed
            scope   : this //optionally pass in a scope object to execute the callbacks in
            })
            </code></pre>
            *
            <p><u>Customisation</u></p>
            <p>Associations reflect on the models they are linking to automatically set up properties such as the
            {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:</p>
            <pre><code>
            var Product = Ext.regModel('Product', {
            fields: [...],
            associations: [
            {type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id'}
            ]
            });
            </code></pre>
            <p>Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
            with our own settings. Usually this will not be needed.</p>
            </summary>
        </member>
        <member name="M:Ext.data.BelongsToAssociation.#ctor(System.Object)">
            <summary>
            @cfg {String} setterName The name of the setter function that will be added to the local model's prototype.
            Defaults to 'set' + the name of the foreign model, e.g. setCategory
            </summary>
        </member>
        <member name="M:Ext.data.BelongsToAssociation.createGetter">
            <summary>
            @private
            Returns a getter function to be placed on the owner model's prototype. We cache the loaded instance
            the first time it is loaded so that subsequent calls to the getter always receive the same reference.
            @return {Function} The getter function
            </summary>
        </member>
        <member name="M:Ext.data.BelongsToAssociation.createSetter">
            <summary>
            @private
            Returns a setter function to be placed on the owner model's prototype
            @return {Function} The setter function
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.foreignKey">
            <summary>
            The name of the foreign key on the owner model that links it to the associated
            model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
            model called Product would set up a product_id foreign key.
            </summary>
        </member>
        <member name="P:Ext.data.BelongsToAssociationConfig.getterName">
            <summary>
            The name of the getter function that will be added to the local model's prototype.
            Defaults to 'get' + the name of the foreign model, e.g. getCategory
            </summary>
        </member>
        <member name="T:Ext.data.ClientProxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.ClientProxy
            @extends Ext.data.Proxy
            <p>Base class for any client-side storage. Used as a superclass for {@link Ext.data.MemoryProxy Memory} and
            {@link Ext.data.WebStorageProxy Web Storage} proxies. Do not use directly, use one of the subclasses instead.</p>
            </summary>
        </member>
        <member name="M:Ext.data.ClientProxy.clear">
            <summary>
            Abstract function that must be implemented by each ClientProxy subclass. This should purge all record data
            from the client side storage, as well as removing any supporting data (such as lists of record IDs)
            </summary>
        </member>
        <member name="T:Ext.data.Connection">
            <summary>
            @class Ext.data.Connection
            @extends Ext.util.Observable
            </summary>
        </member>
        <member name="M:Ext.data.Connection.abort(System.Object)">
            <summary>
            Aborts any outstanding request.
            @param {Object} request (Optional) defaults to the last request
            </summary>
        </member>
        <member name="M:Ext.data.Connection.isLoading(System.Object)">
            <summary>
            Determine whether this object has a request outstanding.
            @param {Object} request (Optional) defaults to the last transaction
            @return {Boolean} True if there is an outstanding request.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Connection.request(System.Object)" -->
        <member name="P:Ext.data.Connection.disableCaching">
            <summary>
            @cfg {Boolean} disableCaching (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.Connection.disableCachingParam">
            <summary>
            @cfg {String} disableCachingParam (Optional) Change the parameter which is sent went disabling caching
            through a cache buster. Defaults to '_dc'
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.Connection.method">
            <summary>
            @class Ext.data.Connection
            @extends Ext.util.Observable
            </summary>
        </member>
        <member name="P:Ext.data.Connection.timeout">
            <summary>
            @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="P:Ext.data.Connection.url">
            <summary>
            @class Ext.data.Connection
            @extends Ext.util.Observable
            </summary>
        </member>
        <member name="P:Ext.data.Connection.useDefaultHeader">
            <summary>
            @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.disableCaching">
            <summary>
            (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.ConnectionConfig.disableCachingParam">
            <summary>
            (Optional) Change the parameter which is sent went disabling caching
            through a cache buster. Defaults to '_dc'
            @type String
            </summary>
        </member>
        <member name="T:Ext.data.Errors">
            <summary>
            @author Ed Spencer
            @class Ext.data.Errors
            @extends Ext.util.MixedCollection
            <p>Wraps a collection of validation error responses and provides convenient functions for
            accessing and errors for specific fields.</p>
            <p>Usually this class does not need to be instantiated directly - instances are instead created
            automatically when {@link Ext.data.Model#validate validate} on a model instance:</p>
            <pre><code>
            //validate some existing model instance - in this case it returned 2 failures messages
            var errors = myModel.validate();
            errors.isValid(); //false
            errors.length; //2
            errors.getByField('name');  // [{field: 'name',  error: 'must be present'}]
            errors.getByField('title'); // [{field: 'title', error: 'is too short'}]
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.util.MixedCollection">
            <summary>
            @class Ext.util.MixedCollection
            @extends Ext.util.Observable
            A Collection class that maintains both numeric indexes and keys and exposes events.
            @constructor
            @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
            function should add function references to the collection. Defaults to
            <tt>false</tt>.
            @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
            and return the key value for that item.  This is used when available to look up the key on items that
            were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
            equivalent to providing an implementation for the {@link #getKey} method.
            </summary>
        </member>
        <member name="M:Ext.util.MixedCollection.#ctor(System.Boolean,SharpKit.JavaScript.JsAction)">
            <summary>
            @class Ext.util.MixedCollection
            @extends Ext.util.Observable
            A Collection class that maintains both numeric indexes and keys and exposes events.
            @constructor
            @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
            function should add function references to the collection. Defaults to
            <tt>false</tt>.
            @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
            and return the key value for that item.  This is used when available to look up the key on items that
            were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
            equivalent to providing an implementation for the {@link #getKey} method.
            </summary>
        </member>
        <member name="M:Ext.data.Errors.getByField(SharpKit.JavaScript.JsString)">
            <summary>
            Returns all of the errors for the given field
            @param {String} fieldName The field to get errors for
            @return {Array} All errors for the given field
            </summary>
        </member>
        <member name="M:Ext.data.Errors.isValid">
            <summary>
            Returns true if there are no errors in the collection
            @return {Boolean}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Field" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.Field.#ctor(System.Object)" -->
        <member name="P:Ext.data.Field.allowBlank">
            <summary>
            @cfg {Boolean} allowBlank
            @private
            (Optional) Used for validating a {@link Ext.data.Model model}, defaults to <code>true</code>.
            An empty value here will cause {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid}
            to evaluate to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.data.Field.dateFormat">
            <summary>
            @cfg {String} dateFormat
            <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
            <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
            value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
            javascript millisecond timestamp. See {@link Date}</p>
            </summary>
        </member>
        <member name="P:Ext.data.Field.defaultValue">
            <summary>
            @cfg {Mixed} defaultValue
            (Optional) The default value used <b>when a Model is being created by a {@link Ext.data.Reader Reader}</b>
            when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
            object (i.e. undefined). (defaults to "")
            </summary>
        </member>
        <member name="P:Ext.data.Field.mapping">
            <summary>
            @cfg {String/Number} mapping
            <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
            that is creating the {@link Ext.data.Model Model} to extract the Field value from the data object.
            If the path expression is the same as the field name, the mapping may be omitted.</p>
            <p>The form of the mapping expression depends on the Reader being used.</p>
            <div class="mdetail-params"><ul>
            <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
            expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
            <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
            item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
            <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
            of the field's value. Defaults to the field specification's Array position.</div></li>
            </ul></div>
            <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
            function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
            return the desired data.</p>
            </summary>
        </member>
        <member name="P:Ext.data.Field.sortDir">
            <summary>
            @cfg {String} sortDir
            (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
            <code>"ASC"</code>.
            </summary>
        </member>
        <member name="P:Ext.data.Field.sortType">
            <summary>
            @cfg {Function} sortType
            (Optional) A function which converts a Field's value to a comparable value in order to ensure
            correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
            sort example:<pre><code>
            // current sort     after sort we want
            // +-+------+          +-+------+
            // |1|First |          |1|First |
            // |2|Last  |          |3|Second|
            // |3|Second|          |2|Last  |
            // +-+------+          +-+------+
            sortType: function(value) {
            switch (value.toLowerCase()) // native toLowerCase():
            {
            case 'first': return 1;
            case 'second': return 2;
            default: return 3;
            }
            }
            </code></pre>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.Field.useNull" -->
        <member name="P:Ext.data.FieldConfig.allowBlank">
            <summary>
            @private
            (Optional) Used for validating a {@link Ext.data.Model model}, defaults to <code>true</code>.
            An empty value here will cause {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid}
            to evaluate to <code>false</code>.
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.convert">
            <summary>
            (Optional) A function which converts the value provided by the Reader into an object that will be stored
            in the Model. It is passed the following parameters:<div class="mdetail-params"><ul>
            <li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
            the configured <code>{@link Ext.data.Field#defaultValue defaultValue}</code>.</div></li>
            <li><b>rec</b> : Ext.data.Model<div class="sub-desc">The data object containing the Model as read so far by the
            Reader. Note that the Model may not be fully populated at this point as the fields are read in the order that
            they are defined in your {@link #fields} array.</div></li>
            </ul></div>
            <pre><code>
            // example of convert function
            function fullName(v, record){
            return record.name.last + ', ' + record.name.first;
            }
            function location(v, record){
            return !record.city ? '' : (record.city + ', ' + record.state);
            }
            var Dude = Ext.regModel({
            fields: [
            {name: 'fullname',  convert: fullName},
            {name: 'firstname', mapping: 'name.first'},
            {name: 'lastname',  mapping: 'name.last'},
            {name: 'city', defaultValue: 'homeless'},
            'state',
            {name: 'location',  convert: location}
            ]
            });
            // create the data store
            var store = new Ext.data.Store({
            reader: {
            type: 'json',
            model: 'Dude',
            idProperty: 'key',
            root: 'daRoot',
            totalProperty: 'total'
            }
            });
            var myData = [
            { key: 1,
            name: { first: 'Fat',    last:  'Albert' }
            // notice no city, state provided in data object
            },
            { key: 2,
            name: { first: 'Barney', last:  'Rubble' },
            city: 'Bedrock', state: 'Stoneridge'
            },
            { key: 3,
            name: { first: 'Cliff',  last:  'Claven' },
            city: 'Boston',  state: 'MA'
            }
            ];
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.dateFormat">
            <summary>
            <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
            <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
            value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
            javascript millisecond timestamp. See {@link Date}</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.defaultValue">
            <summary>
            (Optional) The default value used <b>when a Model is being created by a {@link Ext.data.Reader Reader}</b>
            when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
            object (i.e. undefined). (defaults to "")
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.mapping">
            <summary>
            <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
            that is creating the {@link Ext.data.Model Model} to extract the Field value from the data object.
            If the path expression is the same as the field name, the mapping may be omitted.</p>
            <p>The form of the mapping expression depends on the Reader being used.</p>
            <div class="mdetail-params"><ul>
            <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
            expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
            <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
            item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
            <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
            of the field's value. Defaults to the field specification's Array position.</div></li>
            </ul></div>
            <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
            function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
            return the desired data.</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.name">
            <summary>
            The name by which the field is referenced within the Model. This is referenced by, for example,
            the <code>dataIndex</code> property in column definition objects passed to {@link Ext.grid.ColumnModel}.
            <p>Note: In the simplest case, if no properties other than <code>name</code> are required, a field
            definition may consist of just a String for the field name.</p>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortDir">
            <summary>
            (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
            <code>"ASC"</code>.
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.sortType">
            <summary>
            (Optional) A function which converts a Field's value to a comparable value in order to ensure
            correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
            sort example:<pre><code>
            // current sort     after sort we want
            // +-+------+          +-+------+
            // |1|First |          |1|First |
            // |2|Last  |          |3|Second|
            // |3|Second|          |2|Last  |
            // +-+------+          +-+------+
            sortType: function(value) {
            switch (value.toLowerCase()) // native toLowerCase():
            {
            case 'first': return 1;
            case 'second': return 2;
            default: return 3;
            }
            }
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.FieldConfig.type">
            <summary>
            (Optional) The data type for automatic conversion from received data to the <i>stored</i> value if <code>{@link Ext.data.Field#convert convert}</code>
            has not been specified. This may be specified as a string value. Possible values are
            <div class="mdetail-params"><ul>
            <li>auto (Default, implies no conversion)</li>
            <li>string</li>
            <li>int</li>
            <li>float</li>
            <li>boolean</li>
            <li>date</li></ul></div>
            <p>This may also be specified by referencing a member of the {@link Ext.data.Types} class.</p>
            <p>Developers may create their own application-specific data types by defining new members of the
            {@link Ext.data.Types} class.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.FieldConfig.useNull" -->
        <!-- Badly formed XML comment ignored for member "T:Ext.data.HasManyAssociation" -->
        <member name="M:Ext.data.HasManyAssociation.#ctor(System.Object)">
            <summary>
            @cfg {String} filterProperty Optionally overrides the default filter that is set up on the associated Store. If
            this is not set, a filter is automatically created which filters the association based on the configured
            {@link #foreignKey}. See intro docs for more details. Defaults to undefined
            </summary>
        </member>
        <member name="M:Ext.data.HasManyAssociation.createStore">
            <summary>
            @private
            Creates a function that returns an Ext.data.Store which is configured to load a set of data filtered
            by the owner model's primary key - e.g. in a hasMany association where Group hasMany Users, this function
            returns a Store configured to return the filtered set of a single Group's Users.
            @return {Function} The store-generating function
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.foreignKey">
            <summary>
            The name of the foreign key on the associated model that links it to the owner
            model. Defaults to the lowercased name of the owner model plus "_id", e.g. an association with a where a
            model called Group hasMany Users would create 'group_id' as the foreign key.
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.name">
            <summary>
            The name of the function to create on the owner model. Required
            </summary>
        </member>
        <member name="P:Ext.data.HasManyAssociationConfig.storeConfig">
            <summary>
            Optional configuration object that will be passed to the generated Store. Defaults to
            undefined.
            </summary>
        </member>
        <member name="T:Ext.data.JsonPStore">
            <summary>
            @class Ext.data.JsonPStore
            @extends Ext.data.Store
            @ignore
            @private
            <p><b>NOTE:</b> This class is in need of migration to the new API.</p>
            <p>Small helper class to make creating {@link Ext.data.Store}s from different domain JSON data easier.
            A JsonPStore will be automatically configured with a {@link Ext.data.JsonReader} and a {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
            <p>A store configuration would be something like:<pre><code>
            var store = new Ext.data.JsonPStore({
            // store configs
            autoDestroy: true,
            storeId: 'myStore',
            // proxy configs
            url: 'get-images.php',
            // reader configs
            root: 'images',
            idProperty: 'name',
            fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
            });
            </code></pre></p>
            <p>This store is configured to consume a returned object of the form:<pre><code>
            stcCallback({
            images: [
            {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
            {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
            ]
            })
            </code></pre>
            <p>Where stcCallback is the callback name passed in the request to the remote domain. See {@link Ext.data.ScriptTagProxy ScriptTagProxy}
            for details of how this works.</p>
            An object literal of this form could also be used as the {@link #data} config option.</p>
            <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
            <b>{@link Ext.data.JsonReader JsonReader}</b> and <b>{@link Ext.data.ScriptTagProxy ScriptTagProxy}</b>.</p>
            @constructor
            @param {Object} config
            @xtype jsonpstore
            </summary>
        </member>
        <member name="M:Ext.data.JsonPStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <member name="P:Ext.data.JsonReaderConfig.record">
            <summary>
            The optional location within the JSON response that the record data itself can be found at.
            See the JsonReader intro docs for more details. This is not often needed and defaults to undefined.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.JsonStore" -->
        <member name="M:Ext.data.JsonStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <member name="T:Ext.data.JsonWriter">
            <summary>
            @author Ed Spencer
            @class Ext.data.JsonWriter
            @extends Ext.data.Writer
            <p>Writer that outputs model data in JSON format</p>
            </summary>
        </member>
        <member name="T:Ext.data.Writer">
            <summary>
            @author Ed Spencer
            @class Ext.data.Writer
            @extends Object
            <p>Base Writer class used by most subclasses of {@link Ext.data.ServerProxy}. This class is
            responsible for taking a set of {@link Ext.data.Operation} objects and a {@link Ext.data.Request}
            object and modifying that request based on the Operations.</p>
            <p>For example a {@link Ext.data.JsonWriter} would format the Operations and their {@link Ext.data.Model}
            instances based on the config options passed to the {@link Ext.data.JsonWriter JsonWriter's} constructor.</p>
            <p>Writers are not needed for any kind of local storage - whether via a
            {@link Ext.data.WebStorageProxy Web Storage proxy} (see {@link Ext.data.LocalStorageProxy localStorage}
            and {@link Ext.data.SessionStorageProxy sessionStorage}) or just in memory via a
            {@link Ext.data.MemoryProxy MemoryProxy}.</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Writer.#ctor(System.Object)">
            <summary>
            @author Ed Spencer
            @class Ext.data.Writer
            @extends Object
            <p>Base Writer class used by most subclasses of {@link Ext.data.ServerProxy}. This class is
            responsible for taking a set of {@link Ext.data.Operation} objects and a {@link Ext.data.Request}
            object and modifying that request based on the Operations.</p>
            <p>For example a {@link Ext.data.JsonWriter} would format the Operations and their {@link Ext.data.Model}
            instances based on the config options passed to the {@link Ext.data.JsonWriter JsonWriter's} constructor.</p>
            <p>Writers are not needed for any kind of local storage - whether via a
            {@link Ext.data.WebStorageProxy Web Storage proxy} (see {@link Ext.data.LocalStorageProxy localStorage}
            and {@link Ext.data.SessionStorageProxy sessionStorage}) or just in memory via a
            {@link Ext.data.MemoryProxy MemoryProxy}.</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Writer.getRecordData(System.Object)">
            <summary>
            Formats the data for each record before sending it to the server. This
            method should be overridden to format the data in a way that differs from the default.
            @param {Object} record The record that we are writing to the server.
            @return {Object} An object literal of name/value keys to be written to the server.
            By default this method returns the data property on the record.
            </summary>
        </member>
        <member name="M:Ext.data.Writer.write(Ext.data.Request)">
            <summary>
            Prepares a Proxy's Ext.data.Request object
            @param {Ext.data.Request} request The request object
            @return {Ext.data.Request} The modified request object
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriter.encode">
            <summary>
            @cfg {Boolean} encode True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriter.root">
            <summary>
            @cfg {String} root The key under which the records in this Writer will be placed. Defaults to 'records'.
            Example generated request:
            <pre><code>
            {'records': [{name: 'my record'}, {name: 'another record'}]}
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriterConfig.encode">
            <summary>
            True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.JsonWriterConfig.root">
            <summary>
            The key under which the records in this Writer will be placed. Defaults to 'records'.
            Example generated request:
            <pre><code>
            {'records': [{name: 'my record'}, {name: 'another record'}]}
            </code></pre>
            </summary>
        </member>
        <member name="T:Ext.data.LocalStorageProxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.LocalStorageProxy
            @extends Ext.data.WebStorageProxy
            <p>The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on
            the client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
            LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>
            <p>localStorage is extremely useful for saving user-specific information without needing to build server-side
            infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
            searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:</p>
            <pre><code>
            Ext.regModel('Search', {
            fields: ['id', 'query'],
            proxy: {
            type: 'localstorage',
            id  : 'twitter-Searches'
            }
            });
            </code></pre>
            <p>Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we
            need to pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this
            Proxy from all others. The localStorage API puts all data into a single shared namespace, so by setting an id we
            enable LocalStorageProxy to manage the saved Search data.</p>
            <p>Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:</p>
            <pre><code>
            //our Store automatically picks up the LocalStorageProxy defined on the Search model
            var store = new Ext.data.Store({
            model: "Search"
            });
            //loads any existing Search data from localStorage
            store.load();
            //now add some Searches
            store.add({query: 'Sencha Touch'});
            store.add({query: 'Ext JS'});
            //finally, save our Search data to localStorage
            store.sync();
            </code></pre>
            <p>The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model
            data and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:</p>
            <pre><code>
            var search = Ext.ModelMgr.create({query: 'Sencha Animator'}, 'Search');
            //uses the configured LocalStorageProxy to save the new Search to localStorage
            search.save();
            </code></pre>
            <p><u>Limitations</u></p>
            <p>If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
            A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
            local storage object.</p>
            <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
            but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
            throw an error.</p>
            </summary>
        </member>
        <member name="T:Ext.data.WebStorageProxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.WebStorageProxy
            @extends Ext.data.ClientProxy
            <p>WebStorageProxy is simply a superclass for the {@link Ext.data.LocalStorageProxy localStorage} and
            {@link Ext.data.SessionStorageProxy sessionStorage} proxies. It uses the new HTML5 key/value client-side storage
            objects to save {@link Ext.data.Model model instances} for offline use.</p>
            @constructor
            Creates the proxy, throws an error if local storage is not supported in the current browser
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.clear">
            <summary>
            Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage object
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.#ctor(System.Object)">
            <summary>
            @ignore
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getIds">
            <summary>
            @private
            Returns the array of record IDs stored in this Proxy
            @return {Array} The record IDs. Each is cast as a Number
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getNextId">
            <summary>
            @private
            Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey). Increments
            the counter.
            @return {Number} The id
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getRecord(SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Fetches a model instance from the Proxy by ID. Runs each field's decode function (if present) to decode the data
            @param {String} id The record's unique ID
            @return {Ext.data.Model} The model instance
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getRecordCounterKey">
            <summary>
            @private
            Returns the unique key used to store the current record counter for this proxy. This is used internally when
            realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
            @return {String} The counter key
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getRecordKey(System.Object)">
            <summary>
            @private
            Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when
            storing data in the local storage object and should prevent naming collisions.
            @param {String|Number|Ext.data.Model} id The record id, or a Model instance
            @return {String} The unique key for this record
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.getStorageObject">
            <summary>
            @private
            Abstract function which should return the storage object that data will be saved to. This must be implemented
            in each subclass.
            @return {Object} The storage object
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.initialize">
            <summary>
            @private
            Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called
            automatically by the constructor, this should not need to be called again unless {@link #clear} has been called.
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.removeRecord(System.Object,System.Object)">
            <summary>
            @private
            Physically removes a given record from the local storage. Used internally by {@link #destroy}, which you should
            use instead because it updates the list of currently-stored record ids
            @param {String|Number|Ext.data.Model} id The id of the record to remove, or an Ext.data.Model instance
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.setIds(SharpKit.JavaScript.JsArray)">
            <summary>
            @private
            Saves the array of ids representing the set of all records in the Proxy
            @param {Array} ids The ids to set
            </summary>
        </member>
        <member name="M:Ext.data.WebStorageProxy.setRecord(Ext.data.Model,SharpKit.JavaScript.JsString)">
            <summary>
            Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data
            @param {Ext.data.Model} record The model instance
            @param {String} id The id to save the record under (defaults to the value of the record's getId() function)
            </summary>
        </member>
        <member name="P:Ext.data.WebStorageProxy.Ids">
            <summary>
            @private
            Returns the array of record IDs stored in this Proxy
            @return {Array} The record IDs. Each is cast as a Number
            @private
            Saves the array of ids representing the set of all records in the Proxy
            @param {Array} ids The ids to set
            </summary>
        </member>
        <member name="P:Ext.data.WebStorageProxy.NextId">
            <summary>
            @private
            Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey). Increments
            the counter.
            @return {Number} The id
            </summary>
        </member>
        <member name="P:Ext.data.WebStorageProxy.RecordCounterKey">
            <summary>
            @private
            Returns the unique key used to store the current record counter for this proxy. This is used internally when
            realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
            @return {String} The counter key
            </summary>
        </member>
        <member name="P:Ext.data.WebStorageProxy.StorageObject">
            <summary>
            @private
            Abstract function which should return the storage object that data will be saved to. This must be implemented
            in each subclass.
            @return {Object} The storage object
            </summary>
        </member>
        <member name="M:Ext.data.LocalStorageProxy.getStorageObject">
            <summary>
            @author Ed Spencer
            @class Ext.data.LocalStorageProxy
            @extends Ext.data.WebStorageProxy
            <p>The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on
            the client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
            LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>
            <p>localStorage is extremely useful for saving user-specific information without needing to build server-side
            infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
            searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:</p>
            <pre><code>
            Ext.regModel('Search', {
            fields: ['id', 'query'],
            proxy: {
            type: 'localstorage',
            id  : 'twitter-Searches'
            }
            });
            </code></pre>
            <p>Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we
            need to pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this
            Proxy from all others. The localStorage API puts all data into a single shared namespace, so by setting an id we
            enable LocalStorageProxy to manage the saved Search data.</p>
            <p>Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:</p>
            <pre><code>
            //our Store automatically picks up the LocalStorageProxy defined on the Search model
            var store = new Ext.data.Store({
            model: "Search"
            });
            //loads any existing Search data from localStorage
            store.load();
            //now add some Searches
            store.add({query: 'Sencha Touch'});
            store.add({query: 'Ext JS'});
            //finally, save our Search data to localStorage
            store.sync();
            </code></pre>
            <p>The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model
            data and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:</p>
            <pre><code>
            var search = Ext.ModelMgr.create({query: 'Sencha Animator'}, 'Search');
            //uses the configured LocalStorageProxy to save the new Search to localStorage
            search.save();
            </code></pre>
            <p><u>Limitations</u></p>
            <p>If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
            A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
            local storage object.</p>
            <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
            but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
            throw an error.</p>
            </summary>
        </member>
        <member name="T:Ext.data.MemoryProxy">
            <summary>
            @author Ed Spencer
            @class Ext.data.MemoryProxy
            @extends Ext.data.ClientProxy
            <p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
            every page refresh.</p>
            <p>Usually this Proxy isn't used directly, serving instead as a helper to a {@link Ext.data.Store Store} where a
            reader is required to load data. For example, say we have a Store for a User model and have some inline data we want
            to load, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into
            our Store:</p>
            <pre><code>
            //this is the model we will be using in the store
            Ext.regModel('User', {
            fields: [
            {name: 'id',    type: 'int'},
            {name: 'name',  type: 'string'},
            {name: 'phone', type: 'string', mapping: 'phoneNumber'}
            ]
            });
            //this data does not line up to our model fields - the phone field is called phoneNumber
            var data = {
            users: [
            {
            id: 1,
            name: 'Ed Spencer',
            phoneNumber: '555 1234'
            },
            {
            id: 2,
            name: 'Abe Elias',
            phoneNumber: '666 1234'
            }
            ]
            };
            //note how we set the 'root' in the reader to match the data structure above
            var store = new Ext.data.Store({
            autoLoad: true,
            model: 'User',
            data : data,
            proxy: {
            type: 'memory',
            reader: {
            type: 'json',
            root: 'users'
            }
            }
            });
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.data.MemoryProxy.#ctor(System.Object)">
            <summary>
            @cfg {Array} data Optional array of Records to load into the Proxy
            </summary>
        </member>
        <member name="M:Ext.data.MemoryProxy.read(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Reads data from the configured {@link #data} object. Uses the Proxy's {@link #reader}, if present
            @param {Ext.data.Operation} operation The read Operation
            @param {Function} callback The callback to call when reading has completed
            @param {Object} scope The scope to call the callback function in
            </summary>
        </member>
        <member name="T:Ext.data.Model">
            <summary>
            @author Ed Spencer
            @class Ext.data.Model
            @extends Ext.util.Stateful
            <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
            Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
            and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
            <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',  type: 'string'},
            {name: 'age',   type: 'int'},
            {name: 'phone', type: 'string'},
            {name: 'alive', type: 'boolean', defaultValue: true}
            ],
            changeName: function() {
            var oldName = this.get('name'),
            newName = oldName + " The Barbarian";
            this.set('name', newName);
            }
            });
            </code></pre>
            *
            * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
            * other functions and properties are copied to the new Model's prototype.</p>
            *
            * <p>Now we can create instances of our User model and call any model logic we defined:</p>
            *
            <pre><code>
            var user = Ext.ModelMgr.create({
            name : 'Conan',
            age  : 24,
            phone: '555-555-5555'
            }, 'User');
            user.changeName();
            user.get('name'); //returns "Conan The Barbarian"
            </code></pre>
            <p><u>Validations</u></p>
            <p>Models have built-in support for validations, which are executed against the validator functions in
            {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',     type: 'string'},
            {name: 'age',      type: 'int'},
            {name: 'phone',    type: 'string'},
            {name: 'gender',   type: 'string'},
            {name: 'username', type: 'string'},
            {name: 'alive',    type: 'boolean', defaultValue: true}
            ],
            validations: [
            {type: 'presence',  field: 'age'},
            {type: 'length',    field: 'name',     min: 2},
            {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
            {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
            {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
            ]
            });
            </code></pre>
            <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
            object:</p>
            <pre><code>
            var instance = Ext.ModelMgr.create({
            name: 'Ed',
            gender: 'Male',
            username: 'edspencer'
            }, 'User');
            var errors = instance.validate();
            </code></pre>
            <p><u>Associations</u></p>
            <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
            {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
            application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
            <pre><code>
            Ext.regModel('Post', {
            fields: ['id', 'user_id'],
            belongsTo: 'User',
            hasMany  : {model: 'Comment', name: 'comments'}
            });
            Ext.regModel('Comment', {
            fields: ['id', 'user_id', 'post_id'],
            belongsTo: 'Post'
            });
            Ext.regModel('User', {
            fields: ['id'],
            hasMany: [
            'Post',
            {model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
            and configuration of associations. Note that associations can also be specified like this:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id'],
            associations: [
            {type: 'hasMany', model: 'Post',    name: 'posts'},
            {type: 'hasMany', model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p><u>Using a Proxy</u></p>
            <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
            load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
            which can be set directly on the Model:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id', 'name', 'email'],
            proxy: {
            type: 'rest',
            url : '/users'
            }
            });
            </code></pre>
            <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
            RESTful backend. Let's see how this works:</p>
            <pre><code>
            var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
            user.save(); //POST /users
            </code></pre>
            <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
            Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
            have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
            (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
            list.</p>
            <p>Loading data via the Proxy is equally easy:</p>
            <pre><code>
            //get a reference to the User model class
            var User = Ext.ModelMgr.getModel('User');
            //Uses the configured RestProxy to make a GET request to /users/123
            User.load(123, {
            success: function(user) {
            console.log(user.getId()); //logs 123
            }
            });
            </code></pre>
            <p>Models can also be updated and destroyed easily:</p>
            <pre><code>
            //the user Model we loaded in the last snippet:
            user.set('name', 'Edward Spencer');
            //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
            user.save({
            success: function() {
            console.log('The User was updated');
            }
            });
            //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
            user.destroy({
            success: function() {
            console.log('The User was destroyed!');
            }
            });
            </code></pre>
            <p><u>Usage in Stores</u></p>
            <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
            by creating a {@link Ext.data.Store Store}:</p>
            <pre><code>
            var store = new Ext.data.Store({
            model: 'User'
            });
            //uses the Proxy we set up on Model to load the Store data
            store.load();
            </code></pre>
            <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
            a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
            {@link Ext.data.Store Store docs} for more information on Stores.</p>
            @constructor
            @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
            @param {Number} id Optional unique ID to assign to this model instance
            </summary>
        </member>
        <member name="T:Ext.util.Stateful">
            <summary>
            @class Ext.util.Stateful
            @extends Ext.util.Observable
            Represents any object whose data can be saved by a {@link Ext.data.Proxy Proxy}. Ext.Model
            and Ext.View both inherit from this class as both can save state (Models save field state,
            Views save configuration)
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.commit(System.Boolean)">
            <summary>
            Usually called by the {@link Ext.data.Store} which owns the model instance.
            Commits all changes made to the instance since either creation or the last commit operation.
            <p>Developers should subscribe to the {@link Ext.data.Store#update} event
            to have their code notified of commit operations.</p>
            @param {Boolean} silent (optional) True to skip notification of the owning
            store of the change (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.#ctor(System.Object)">
            <summary>
            @cfg {String} persistanceProperty The property on this Persistable object that its data is saved to.
            Defaults to 'data' (e.g. all persistable data resides in this.data.)
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.copy(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a copy (clone) of this Model instance.
            @param {String} id (optional) A new id, defaults to the id
            of the instance being copied. See <code>{@link #id}</code>.
            To generate a phantom instance with a new id use:<pre><code>
            var rec = record.copy(); // clone the record
            Ext.data.Model.id(rec); // automatically generate a unique sequential id
            </code></pre>
            @return {Record}
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.get(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the value of the given field
            @param {String} fieldName The field to fetch the value for
            @return {Mixed} The value
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.getChanges">
            <summary>
            Gets a hash of only the fields that have been modified since this Model was created or commited.
            @return Object
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.isModified(SharpKit.JavaScript.JsString)">
            <summary>
            Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
            since the load or last commit.
            @param {String} fieldName {@link Ext.data.Field#name}
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.reject(System.Boolean)">
            <summary>
            Usually called by the {@link Ext.data.Store} to which this model instance has been {@link #join joined}.
            Rejects all changes made to the model instance since either creation, or the last commit operation.
            Modified fields are reverted to their original values.
            <p>Developers should subscribe to the {@link Ext.data.Store#update} event
            to have their code notified of reject operations.</p>
            @param {Boolean} silent (optional) True to skip notification of the owning
            store of the change (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.util.Stateful.set(System.Object,System.Object)">
            <summary>
            Sets the given field to the given value, marks the instance as dirty
            @param {String|Object} fieldName The field to set, or an object containing key/value pairs
            @param {Mixed} value The value to set
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Stateful.setDirty" -->
        <member name="P:Ext.util.Stateful.dirty">
            <summary>
            Readonly flag - true if this Record has been modified.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.Stateful.editing">
            <summary>
            Internal flag used to track whether or not the model instance is currently being edited. Read-only
            @property editing
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.Stateful.persistanceProperty">
            <summary>
            @cfg {String} persistanceProperty The property on this Persistable object that its data is saved to.
            Defaults to 'data' (e.g. all persistable data resides in this.data.)
            </summary>
        </member>
        <member name="M:Ext.data.Model.afterCommit">
            <summary>
            @private
            If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
            afterCommit method is called
            </summary>
        </member>
        <member name="M:Ext.data.Model.afterEdit">
            <summary>
            @private
            If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
            afterEdit method is called
            </summary>
        </member>
        <member name="M:Ext.data.Model.afterReject">
            <summary>
            @private
            If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
            afterReject method is called
            </summary>
        </member>
        <member name="M:Ext.data.Model.callStore(SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Helper function used by afterEdit, afterReject and afterCommit. Calls the given method on the
            {@link Ext.data.Store store} that this instance has {@link #join joined}, if any. The store function
            will always be called with the model instance as its single argument.
            @param {String} fn The function to call on the store
            </summary>
        </member>
        <member name="M:Ext.data.Model.#ctor(System.Object,System.Object)">
            <summary>
            @cfg {String} idProperty The name of the field treated as this Model's unique id (defaults to 'id').
            </summary>
        </member>
        <member name="M:Ext.data.Model.getId">
            <summary>
            Returns the unique ID allocated to this model instance as defined by {@link #idProperty}
            @return {Number} The id
            </summary>
        </member>
        <member name="M:Ext.data.Model.getProxy">
            <summary>
            Returns the configured Proxy for this Model
            @return {Ext.data.Proxy} The proxy
            </summary>
        </member>
        <member name="M:Ext.data.Model.id(System.Object)">
            <summary>
            Generates a sequential id. This method is typically called when a record is {@link #create}d
            and {@link #Record no id has been specified}. The returned id takes the form:
            <tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class="mdetail-params"><ul>
            <li><b><tt>PREFIX</tt></b> : String<p class="sub-desc"><tt>Ext.data.Model.PREFIX</tt>
            (defaults to <tt>'ext-record'</tt>)</p></li>
            <li><b><tt>AUTO_ID</tt></b> : String<p class="sub-desc"><tt>Ext.data.Model.AUTO_ID</tt>
            (defaults to <tt>1</tt> initially)</p></li>
            </ul></div>
            @param {Record} rec The record being created.  The record does not exist, it's a {@link #phantom}.
            @return {String} auto-generated string id, <tt>"ext-record-i++'</tt>;
            </summary>
        </member>
        <member name="M:Ext.data.Model.join(Ext.data.Store)">
            <summary>
            Tells this model instance that it has been added to a store
            @param {Ext.data.Store} store The store that the model has been added to
            </summary>
        </member>
        <member name="M:Ext.data.Model.load(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            <b>Static</b>. Asynchronously loads a model instance by id. Sample usage:
            <pre><code>
            MyApp.User = Ext.regModel('User', {
            fields: [
            {name: 'id', type: 'int'},
            {name: 'name', type: 'string'}
            ]
            });
            MyApp.User.load(10, {
            scope: this,
            failure: function(record, operation) {
            //do something if the load failed
            },
            success: function(record, operation) {
            //do something if the load succeeded
            },
            callback: function(record, operation) {
            //do something whether the load succeeded or failed
            }
            });
            </code></pre>
            @param {Number} id The id of the model to load
            @param {Object} config Optional config object containing success, failure and callback functions, plus optional scope
            @member Ext.data.Model
            @method load
            @static
            </summary>
        </member>
        <member name="M:Ext.data.Model.save(System.Object)">
            <summary>
            Saves the model instance using the configured proxy
            @param {Object} options Options to pass to the proxy
            @return {Ext.data.Model} The Model instance
            </summary>
        </member>
        <member name="M:Ext.data.Model.setId(SharpKit.JavaScript.JsNumber)">
            <summary>
            Sets the model instance's id field to the given id
            @param {Number} id The new id
            </summary>
        </member>
        <member name="M:Ext.data.Model.setProxy(System.Object)">
            <summary>
            Sets the Proxy to use for this model. Accepts any options that can be accepted by {@link Ext.data.ProxyMgr#create}
            @param {String/Object/Ext.data.Proxy} proxy The proxy
            </summary>
        </member>
        <member name="M:Ext.data.Model.unjoin(Ext.data.Store)">
            <summary>
            Tells this model instance that it has been removed from the store
            @param {Ext.data.Store} store The store to unjoin
            </summary>
        </member>
        <member name="M:Ext.data.Model.validate">
            <summary>
            Validates the current data against all of its configured {@link #validations} and returns an
            {@link Ext.data.Errors Errors} object
            @return {Ext.data.Errors} The errors object
            </summary>
        </member>
        <member name="P:Ext.data.Model.evented">
            <summary>
            @author Ed Spencer
            @class Ext.data.Model
            @extends Ext.util.Stateful
            <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
            Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
            and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
            <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',  type: 'string'},
            {name: 'age',   type: 'int'},
            {name: 'phone', type: 'string'},
            {name: 'alive', type: 'boolean', defaultValue: true}
            ],
            changeName: function() {
            var oldName = this.get('name'),
            newName = oldName + " The Barbarian";
            this.set('name', newName);
            }
            });
            </code></pre>
            *
            * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
            * other functions and properties are copied to the new Model's prototype.</p>
            *
            * <p>Now we can create instances of our User model and call any model logic we defined:</p>
            *
            <pre><code>
            var user = Ext.ModelMgr.create({
            name : 'Conan',
            age  : 24,
            phone: '555-555-5555'
            }, 'User');
            user.changeName();
            user.get('name'); //returns "Conan The Barbarian"
            </code></pre>
            <p><u>Validations</u></p>
            <p>Models have built-in support for validations, which are executed against the validator functions in
            {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',     type: 'string'},
            {name: 'age',      type: 'int'},
            {name: 'phone',    type: 'string'},
            {name: 'gender',   type: 'string'},
            {name: 'username', type: 'string'},
            {name: 'alive',    type: 'boolean', defaultValue: true}
            ],
            validations: [
            {type: 'presence',  field: 'age'},
            {type: 'length',    field: 'name',     min: 2},
            {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
            {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
            {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
            ]
            });
            </code></pre>
            <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
            object:</p>
            <pre><code>
            var instance = Ext.ModelMgr.create({
            name: 'Ed',
            gender: 'Male',
            username: 'edspencer'
            }, 'User');
            var errors = instance.validate();
            </code></pre>
            <p><u>Associations</u></p>
            <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
            {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
            application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
            <pre><code>
            Ext.regModel('Post', {
            fields: ['id', 'user_id'],
            belongsTo: 'User',
            hasMany  : {model: 'Comment', name: 'comments'}
            });
            Ext.regModel('Comment', {
            fields: ['id', 'user_id', 'post_id'],
            belongsTo: 'Post'
            });
            Ext.regModel('User', {
            fields: ['id'],
            hasMany: [
            'Post',
            {model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
            and configuration of associations. Note that associations can also be specified like this:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id'],
            associations: [
            {type: 'hasMany', model: 'Post',    name: 'posts'},
            {type: 'hasMany', model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p><u>Using a Proxy</u></p>
            <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
            load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
            which can be set directly on the Model:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id', 'name', 'email'],
            proxy: {
            type: 'rest',
            url : '/users'
            }
            });
            </code></pre>
            <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
            RESTful backend. Let's see how this works:</p>
            <pre><code>
            var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
            user.save(); //POST /users
            </code></pre>
            <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
            Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
            have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
            (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
            list.</p>
            <p>Loading data via the Proxy is equally easy:</p>
            <pre><code>
            //get a reference to the User model class
            var User = Ext.ModelMgr.getModel('User');
            //Uses the configured RestProxy to make a GET request to /users/123
            User.load(123, {
            success: function(user) {
            console.log(user.getId()); //logs 123
            }
            });
            </code></pre>
            <p>Models can also be updated and destroyed easily:</p>
            <pre><code>
            //the user Model we loaded in the last snippet:
            user.set('name', 'Edward Spencer');
            //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
            user.save({
            success: function() {
            console.log('The User was updated');
            }
            });
            //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
            user.destroy({
            success: function() {
            console.log('The User was destroyed!');
            }
            });
            </code></pre>
            <p><u>Usage in Stores</u></p>
            <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
            by creating a {@link Ext.data.Store Store}:</p>
            <pre><code>
            var store = new Ext.data.Store({
            model: 'User'
            });
            //uses the Proxy we set up on Model to load the Store data
            store.load();
            </code></pre>
            <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
            a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
            {@link Ext.data.Store Store docs} for more information on Stores.</p>
            @constructor
            @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
            @param {Number} id Optional unique ID to assign to this model instance
            </summary>
        </member>
        <member name="P:Ext.data.Model.Id">
            <summary>
            Returns the unique ID allocated to this model instance as defined by {@link #idProperty}
            @return {Number} The id
            Sets the model instance's id field to the given id
            @param {Number} id The new id
            </summary>
        </member>
        <member name="P:Ext.data.Model.idProperty">
            <summary>
            @cfg {String} idProperty The name of the field treated as this Model's unique id (defaults to 'id').
            </summary>
        </member>
        <member name="P:Ext.data.Model.isModel">
            <summary>
            @author Ed Spencer
            @class Ext.data.Model
            @extends Ext.util.Stateful
            <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
            Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
            and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
            <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',  type: 'string'},
            {name: 'age',   type: 'int'},
            {name: 'phone', type: 'string'},
            {name: 'alive', type: 'boolean', defaultValue: true}
            ],
            changeName: function() {
            var oldName = this.get('name'),
            newName = oldName + " The Barbarian";
            this.set('name', newName);
            }
            });
            </code></pre>
            *
            * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
            * other functions and properties are copied to the new Model's prototype.</p>
            *
            * <p>Now we can create instances of our User model and call any model logic we defined:</p>
            *
            <pre><code>
            var user = Ext.ModelMgr.create({
            name : 'Conan',
            age  : 24,
            phone: '555-555-5555'
            }, 'User');
            user.changeName();
            user.get('name'); //returns "Conan The Barbarian"
            </code></pre>
            <p><u>Validations</u></p>
            <p>Models have built-in support for validations, which are executed against the validator functions in
            {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'name',     type: 'string'},
            {name: 'age',      type: 'int'},
            {name: 'phone',    type: 'string'},
            {name: 'gender',   type: 'string'},
            {name: 'username', type: 'string'},
            {name: 'alive',    type: 'boolean', defaultValue: true}
            ],
            validations: [
            {type: 'presence',  field: 'age'},
            {type: 'length',    field: 'name',     min: 2},
            {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
            {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
            {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
            ]
            });
            </code></pre>
            <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
            object:</p>
            <pre><code>
            var instance = Ext.ModelMgr.create({
            name: 'Ed',
            gender: 'Male',
            username: 'edspencer'
            }, 'User');
            var errors = instance.validate();
            </code></pre>
            <p><u>Associations</u></p>
            <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
            {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
            application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
            <pre><code>
            Ext.regModel('Post', {
            fields: ['id', 'user_id'],
            belongsTo: 'User',
            hasMany  : {model: 'Comment', name: 'comments'}
            });
            Ext.regModel('Comment', {
            fields: ['id', 'user_id', 'post_id'],
            belongsTo: 'Post'
            });
            Ext.regModel('User', {
            fields: ['id'],
            hasMany: [
            'Post',
            {model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
            and configuration of associations. Note that associations can also be specified like this:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id'],
            associations: [
            {type: 'hasMany', model: 'Post',    name: 'posts'},
            {type: 'hasMany', model: 'Comment', name: 'comments'}
            ]
            });
            </code></pre>
            <p><u>Using a Proxy</u></p>
            <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
            load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
            which can be set directly on the Model:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: ['id', 'name', 'email'],
            proxy: {
            type: 'rest',
            url : '/users'
            }
            });
            </code></pre>
            <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
            RESTful backend. Let's see how this works:</p>
            <pre><code>
            var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
            user.save(); //POST /users
            </code></pre>
            <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
            Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
            have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
            (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
            list.</p>
            <p>Loading data via the Proxy is equally easy:</p>
            <pre><code>
            //get a reference to the User model class
            var User = Ext.ModelMgr.getModel('User');
            //Uses the configured RestProxy to make a GET request to /users/123
            User.load(123, {
            success: function(user) {
            console.log(user.getId()); //logs 123
            }
            });
            </code></pre>
            <p>Models can also be updated and destroyed easily:</p>
            <pre><code>
            //the user Model we loaded in the last snippet:
            user.set('name', 'Edward Spencer');
            //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
            user.save({
            success: function() {
            console.log('The User was updated');
            }
            });
            //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
            user.destroy({
            success: function() {
            console.log('The User was destroyed!');
            }
            });
            </code></pre>
            <p><u>Usage in Stores</u></p>
            <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
            by creating a {@link Ext.data.Store Store}:</p>
            <pre><code>
            var store = new Ext.data.Store({
            model: 'User'
            });
            //uses the Proxy we set up on Model to load the Store data
            store.load();
            </code></pre>
            <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
            a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
            {@link Ext.data.Store Store docs} for more information on Stores.</p>
            @constructor
            @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
            @param {Number} id Optional unique ID to assign to this model instance
            </summary>
        </member>
        <member name="P:Ext.data.Model.phantom">
            <summary>
            <tt>true</tt> when the record does not yet exist in a server-side database (see
            {@link #setDirty}).  Any record which has a real database pk set as its id property
            is NOT a phantom -- it's real.
            @property phantom
            @type {Boolean}
            </summary>
        </member>
        <member name="P:Ext.data.Model.Proxy">
            <summary>
            Returns the configured Proxy for this Model
            @return {Ext.data.Proxy} The proxy
            Sets the Proxy to use for this model. Accepts any options that can be accepted by {@link Ext.data.ProxyMgr#create}
            @param {String/Object/Ext.data.Proxy} proxy The proxy
            </summary>
        </member>
        <member name="P:Ext.data.ModelConfig.idProperty">
            <summary>
            The name of the field treated as this Model's unique id (defaults to 'id').
            </summary>
        </member>
        <member name="T:Ext.data.Node">
            <summary>
            @class Ext.data.Node
            @extends Ext.util.Observable
            @cfg {Boolean} leaf true if this node is a leaf and does not have children
            @cfg {String} id The id for this node. If one is not specified, one is generated.
            @constructor
            @param {Object} attributes The attributes/config for the node
            </summary>
        </member>
        <member name="M:Ext.data.Node.appendChild(System.Object)">
            <summary>
            Insert node(s) as the last child node of this node.
            @param {Node/Array} node The node or Array of nodes to append
            @return {Node} The appended node if single append, or null if an array was passed
            </summary>
        </member>
        <member name="M:Ext.data.Node.bubble(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the bubble is stopped.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.cascadeBy(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the cascade is stopped on that branch.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.#ctor(System.Object)">
            <summary>
            @class Ext.data.Node
            @extends Ext.util.Observable
            @cfg {Boolean} leaf true if this node is a leaf and does not have children
            @cfg {String} id The id for this node. If one is not specified, one is generated.
            @constructor
            @param {Object} attributes The attributes/config for the node
            </summary>
        </member>
        <member name="M:Ext.data.Node.contains(System.Object)">
            <summary>
            Returns true if this node is an ancestor (at any point) of the passed node.
            @param {Node} node
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.destroy(System.Object)">
            <summary>
            Destroys the node.
            </summary>
        </member>
        <member name="M:Ext.data.Node.eachChild(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
            will be the args provided or the current node. If the function returns false at any point,
            the iteration stops.
            @param {Function} fn The function to call
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node in the iteration.
            @param {Array} args (optional) The args to call the function with (default to passing the current Node)
            </summary>
        </member>
        <member name="M:Ext.data.Node.findChild(SharpKit.JavaScript.JsString,System.Object,System.Boolean)">
            <summary>
            Finds the first child that has the attribute with the specified value.
            @param {String} attribute The attribute name
            @param {Mixed} value The value to search for
            @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
            @return {Node} The found child or null if none was found
            </summary>
        </member>
        <member name="M:Ext.data.Node.findChildBy(SharpKit.JavaScript.JsAction,System.Object,System.Boolean)">
            <summary>
            Finds the first child by a custom function. The child matches if the function passed returns <code>true</code>.
            @param {Function} fn A function which must return <code>true</code> if the passed Node is the required Node.
            @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Node being tested.
            @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
            @return {Node} The found child or null if none was found
            </summary>
        </member>
        <member name="M:Ext.data.Node.getChildAt(SharpKit.JavaScript.JsNumber)">
            <summary>
            Returns the child node at the specified index.
            @param {Number} index
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Node.getDepth">
            <summary>
            Returns depth of this node (the root node has a depth of 0)
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.data.Node.getOwnerTree">
            <summary>
            Returns the tree this node is in.
            @return {Tree}
            </summary>
        </member>
        <member name="M:Ext.data.Node.getPath(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the path for this node. The path can be used to expand or select this node programmatically.
            @param {String} attr (optional) The attr to use for the path (defaults to the node's id)
            @return {String} The path
            </summary>
        </member>
        <member name="M:Ext.data.Node.hasChildNodes">
            <summary>
            Returns true if this node has one or more child nodes, else false.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.indexOf(System.Object)">
            <summary>
            Returns the index of a child node
            @param {Node} node
            @return {Number} The index of the node or -1 if it was not found
            </summary>
        </member>
        <member name="M:Ext.data.Node.insertBefore(System.Object,System.Object)">
            <summary>
            Inserts the first node before the second node in this nodes childNodes collection.
            @param {Node} node The node to insert
            @param {Node} refNode The node to insert before (if null the node is appended)
            @return {Node} The inserted node
            </summary>
        </member>
        <member name="M:Ext.data.Node.isAncestor(System.Object)">
            <summary>
            Returns true if the passed node is an ancestor (at any point) of this node.
            @param {Node} node
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isExpandable">
            <summary>
            Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
            node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isFirst">
            <summary>
            Returns true if this node is the first child of its parent
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isLast">
            <summary>
            Returns true if this node is the last child of its parent
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.isLeaf">
            <summary>
            Returns true if this node is a leaf
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.data.Node.remove(System.Boolean)">
            <summary>
            Removes this node from its parent
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} this
            </summary>
        </member>
        <member name="M:Ext.data.Node.removeAll(System.Boolean)">
            <summary>
            Removes all child nodes from this node.
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} this
            </summary>
        </member>
        <member name="M:Ext.data.Node.removeChild(System.Object,System.Boolean)">
            <summary>
            Removes a child node from this node.
            @param {Node} node The node to remove
            @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
            @return {Node} The removed node
            </summary>
        </member>
        <member name="M:Ext.data.Node.replaceChild(System.Object,System.Object)">
            <summary>
            Replaces one child node in this node with another.
            @param {Node} newChild The replacement node
            @param {Node} oldChild The node to replace
            @return {Node} The replaced node
            </summary>
        </member>
        <member name="M:Ext.data.Node.setId(SharpKit.JavaScript.JsString)">
            <summary>
            Changes the id of this node.
            @param {String} id The new id for the node.
            </summary>
        </member>
        <member name="M:Ext.data.Node.sort(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Sorts this nodes children using the supplied sort function.
            @param {Function} fn A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
            @param {Object} scope (optional)The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
            </summary>
        </member>
        <member name="P:Ext.data.Node.Id">
            <summary>
            Changes the id of this node.
            @param {String} id The new id for the node.
            </summary>
        </member>
        <member name="P:Ext.data.NodeConfig.id">
            <summary>
            The id for this node. If one is not specified, one is generated.
            @constructor
            </summary>
        </member>
        <member name="P:Ext.data.NodeConfig.leaf">
            <summary>
            true if this node is a leaf and does not have children
            </summary>
        </member>
        <member name="T:Ext.data.Operation">
            <summary>
            @author Ed Spencer
            @class Ext.data.Operation
            @extends Object
            <p>Represents a single read or write operation performed by a {@link Ext.data.Proxy Proxy}.
            Operation objects are used to enable communication between Stores and Proxies. Application
            developers should rarely need to interact with Operation objects directly.</p>
            <p>Several Operations can be batched together in a {@link Ext.data.Batch batch}.</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Operation.allowWrite">
            <summary>
            Checks whether this operation should cause writing to occur.
            @return {Boolean} Whether the operation should cause a write to occur.
            </summary>
        </member>
        <member name="M:Ext.data.Operation.#ctor(System.Object)">
            <summary>
            The error object passed when {@link #setException} was called. This could be any object or primitive.
            @property error
            @type Mixed
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getError">
            <summary>
            Returns the error string or object that was set using {@link #setException}
            @return {Mixed} The error object
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getRecords">
            <summary>
            Returns an array of Ext.data.Model instances as set by the Proxy.
            @return {Array} Any loaded Records
            </summary>
        </member>
        <member name="M:Ext.data.Operation.getResultSet">
            <summary>
            Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model} instances
            as well as meta data such as number of instances fetched, number available etc
            @return {Ext.data.ResultSet} The ResultSet object
            </summary>
        </member>
        <member name="M:Ext.data.Operation.hasException">
            <summary>
            Returns true if this Operation encountered an exception (see also {@link #getError})
            @return {Boolean} True if there was an exception
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isComplete">
            <summary>
            Returns true if the Operation has been completed
            @return {Boolean} True if the Operation is complete
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isRunning">
            <summary>
            Returns true if the Operation has been started but has not yet completed.
            @return {Boolean} True if the Operation is currently running
            </summary>
        </member>
        <member name="M:Ext.data.Operation.isStarted">
            <summary>
            Returns true if the Operation has been started. Note that the Operation may have started AND completed,
            see {@link #isRunning} to test if the Operation is currently running.
            @return {Boolean} True if the Operation has started
            </summary>
        </member>
        <member name="M:Ext.data.Operation.markCompleted">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Operation.markException">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Operation.markStarted">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Operation.markSuccessful">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setBatch(Ext.data.Batch)">
            <summary>
            @private
            Associates this Operation with a Batch
            @param {Ext.data.Batch} batch The batch
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setCompleted">
            <summary>
            Marks the Operation as completed
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setException(System.Object)">
            <summary>
            Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
            @param {Mixed} error Optional error string/object
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setStarted">
            <summary>
            Marks the Operation as started
            </summary>
        </member>
        <member name="M:Ext.data.Operation.setSuccessful">
            <summary>
            Marks the Operation as successful
            </summary>
        </member>
        <member name="M:Ext.data.Operation.wasSuccessful">
            <summary>
            Returns true if the Operation has completed and was successful
            @return {Boolean} True if successful
            </summary>
        </member>
        <member name="P:Ext.data.Operation.Batch">
            <summary>
            @private
            Associates this Operation with a Batch
            @param {Ext.data.Batch} batch The batch
            </summary>
        </member>
        <member name="P:Ext.data.Operation.complete">
            <summary>
            Read-only property tracking the completion status of this Operation. Use {@link #isComplete}.
            @property complete
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Operation.exception">
            <summary>
            Read-only property tracking the exception status of this Operation. Use {@link #hasException} and see {@link #getError}.
            @property exception
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Operation.Exception">
            <summary>
            Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
            @param {Mixed} error Optional error string/object
            </summary>
        </member>
        <member name="P:Ext.data.Operation.Records">
            <summary>
            Returns an array of Ext.data.Model instances as set by the Proxy.
            @return {Array} Any loaded Records
            </summary>
        </member>
        <member name="P:Ext.data.Operation.ResultSet">
            <summary>
            Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model} instances
            as well as meta data such as number of instances fetched, number available etc
            @return {Ext.data.ResultSet} The ResultSet object
            </summary>
        </member>
        <member name="P:Ext.data.Operation.running">
            <summary>
            Read-only property tracking the run status of this Operation. Use {@link #isRunning}.
            @property running
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Operation.started">
            <summary>
            Read-only property tracking the start status of this Operation. Use {@link #isStarted}.
            @property started
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.data.Operation.synchronous">
            <summary>
            @cfg {Boolean} synchronous True if this Operation is to be executed synchronously (defaults to true). This
            property is inspected by a {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in
            parallel or not.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.action">
            <summary>
            The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.batch">
            <summary>
            The batch that this Operation is a part of (optional)
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.filters">
            <summary>
            Optional array of filter objects. Only applies to 'read' actions.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.group">
            <summary>
            Optional grouping configuration. Only applies to 'read' actions where grouping is desired.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.limit">
            <summary>
            The number of records to load. Used on 'read' actions when paging is being used.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.sorters">
            <summary>
            Optional array of sorter objects. Only applies to 'read' actions.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.start">
            <summary>
            The start index (offset), used in paging when running a 'read' action.
            </summary>
        </member>
        <member name="P:Ext.data.OperationConfig.synchronous">
            <summary>
            True if this Operation is to be executed synchronously (defaults to true). This
            property is inspected by a {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in
            parallel or not.
            </summary>
        </member>
        <member name="T:Ext.data.PolymorphicAssociation">
            <summary>
            @author Ed Spencer
            @class Ext.data.PolymorphicAssociation
            @extends Ext.data.Association
            @ignore
            </summary>
        </member>
        <member name="M:Ext.data.PolymorphicAssociation.#ctor(System.Object)">
            <summary>
            @author Ed Spencer
            @class Ext.data.PolymorphicAssociation
            @extends Ext.data.Association
            @ignore
            </summary>
        </member>
        <member name="M:Ext.data.PolymorphicAssociation.createStore">
            <summary>
            @private
            Creates the association function that will be injected on the ownerModel. Most of what this is doing
            is filtering the dataset down to the appropriate model/id combination, and adding modelDefaults to
            any model instances that are created/inserted into the generated store.
            @return {Function} The store-generating function
            </summary>
        </member>
        <member name="P:Ext.data.ProxyConfig.batchOrder">
            <summary>
            Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this
            to set a different order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'
            </summary>
        </member>
        <member name="P:Ext.data.ProxyConfig.defaultReaderType">
            <summary>
            The default registered reader type. Defaults to 'json'
            @private
            </summary>
        </member>
        <member name="P:Ext.data.ProxyConfig.defaultWriterType">
            <summary>
            The default registered writer type. Defaults to 'json'
            @private
            </summary>
        </member>
        <member name="T:Ext.data.ProxyMgr">
            <summary>
            @author Ed Spencer
            @class Ext.data.ProxyMgr
            @extends Ext.AbstractManager
            @singleton
            @ignore
            </summary>
        </member>
        <member name="P:Ext.data.ReaderConfig.idProperty">
            <summary>
            Name of the property within a row object
            that contains a record identifier value.  Defaults to <tt>id</tt>
            </summary>
        </member>
        <member name="P:Ext.data.ReaderConfig.implicitIncludes">
            <summary>
            True to automatically parse models nested within other models in a response
            object. See the Ext.data.Reader intro docs for full explanation. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.data.ReaderConfig.root">
            <summary>
            <b>Required</b>.  The name of the property
            which contains the Array of row objects.  Defaults to <tt>undefined</tt>.
            An exception will be thrown if the root property is undefined. The data
            packet value for this property should be an empty array to clear the data
            or show no data.
            </summary>
        </member>
        <member name="P:Ext.data.ReaderConfig.successProperty">
            <summary>
            Name of the property from which to
            retrieve the success attribute. Defaults to <tt>success</tt>.  See
            {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}
            for additional information.
            </summary>
        </member>
        <member name="P:Ext.data.ReaderConfig.totalProperty">
            <summary>
            Name of the property from which to
            retrieve the total number of records in the dataset. This is only needed
            if the whole dataset is not passed in one go, but is being paged from
            the remote server.  Defaults to <tt>total</tt>.
            </summary>
        </member>
        <member name="T:Ext.data.ReaderMgr">
            <summary>
            @author Ed Spencer
            @class Ext.data.ReaderMgr
            @extends Ext.AbstractManager
            @singleton
            @ignore
            <p>Maintains the set of all registered {@link Ext.data.Reader Reader} types.</p>
            </summary>
        </member>
        <member name="T:Ext.data.Request">
            <summary>
            @author Ed Spencer
            @class Ext.data.Request
            @extends Object
            <p>Simple class that represents a Request that will be made by any {@link Ext.data.ServerProxy} subclass.
            All this class does is standardize the representation of a Request as used by any ServerProxy subclass,
            it does not contain any actual logic or perform the request itself.</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.Request.#ctor(System.Object)">
            <summary>
            @cfg {String} url The url to access on this Request
            </summary>
        </member>
        <member name="P:Ext.data.Request.method">
            <summary>
            @cfg {String} method The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.action">
            <summary>
            The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.method">
            <summary>
            The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
            </summary>
        </member>
        <member name="P:Ext.data.RequestConfig.params">
            <summary>
            HTTP request params. The Proxy and its Writer have access to and can modify this object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.RestProxy" -->
        <member name="M:Ext.data.RestProxy.buildUrl(System.Object)">
            <summary>
            Specialized version of buildUrl that incorporates the {@link #appendId} and {@link #format} options into the
            generated url. Override this to provide further customizations, but remember to call the superclass buildUrl
            so that additional parameters like the cache buster string are appended
            </summary>
        </member>
        <member name="P:Ext.data.RestProxy.appendId">
            <summary>
            @cfg {Boolean} appendId True to automatically append the ID of a Model instance when performing a request based
            on that single instance. See RestProxy intro docs for more details. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.data.RestProxyConfig.appendId">
            <summary>
            True to automatically append the ID of a Model instance when performing a request based
            on that single instance. See RestProxy intro docs for more details. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.data.RestProxyConfig.format">
            <summary>
            Optional data format to send to the server when making any request (e.g. 'json'). See the
            RestProxy intro docs for full details. Defaults to undefined.
            </summary>
        </member>
        <member name="T:Ext.data.ResultSet">
            <summary>
            @author Ed Spencer
            @class Ext.data.ResultSet
            @extends Object
            <p>Simple wrapper class that represents a set of records returned by a Proxy.</p>
            @constructor
            Creates the new ResultSet
            </summary>
        </member>
        <member name="M:Ext.data.ResultSet.#ctor(System.Object)">
            <summary>
            @cfg {Array} records The array of record instances. Required
            </summary>
        </member>
        <member name="P:Ext.data.ResultSet.count">
            <summary>
            @cfg {Number} count
            The number of records in this ResultSet. Note that total may differ from this number
            </summary>
        </member>
        <member name="P:Ext.data.ResultSet.loaded">
            <summary>
            @cfg {Boolean} loaded
            True if the records have already been loaded. This is only meaningful when dealing with
            SQL-backed proxies
            </summary>
        </member>
        <member name="P:Ext.data.ResultSet.success">
            <summary>
            @cfg {Boolean} success
            True if the ResultSet loaded successfully, false if any errors were encountered
            </summary>
        </member>
        <member name="P:Ext.data.ResultSet.total">
            <summary>
            @cfg {Number} total
            The total number of records reported by the data source. This ResultSet may form a subset of
            those records (see count)
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.count">
            <summary>
            The number of records in this ResultSet. Note that total may differ from this number
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.loaded">
            <summary>
            True if the records have already been loaded. This is only meaningful when dealing with
            SQL-backed proxies
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.success">
            <summary>
            True if the ResultSet loaded successfully, false if any errors were encountered
            </summary>
        </member>
        <member name="P:Ext.data.ResultSetConfig.total">
            <summary>
            The total number of records reported by the data source. This ResultSet may form a subset of
            those records (see count)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.ScriptTagProxy" -->
        <member name="M:Ext.data.ScriptTagProxy.abort">
            <summary>
            Aborts the current server request if one is currently running
            </summary>
        </member>
        <member name="M:Ext.data.ScriptTagProxy.buildUrl(Ext.data.Request)">
            <summary>
            Generates a url based on a given Ext.data.Request object. Adds the params and callback function name to the url
            @param {Ext.data.Request} request The request object
            @return {String} The url
            </summary>
        </member>
        <member name="M:Ext.data.ScriptTagProxy.#ctor">
            <summary>
            @cfg {Boolean} autoAppendParams True to automatically append the request's params to the generated url. Defaults to true
            </summary>
        </member>
        <member name="M:Ext.data.ScriptTagProxy.createRequestCallback(Ext.data.Request,Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            @private
            Creates and returns the function that is called when the request has completed. The returned function
            should accept a Response object, which contains the response to be read by the configured Reader.
            The third argument is the callback that should be called after the request has been completed and the Reader has decoded
            the response. This callback will typically be the callback passed by a store, e.g. in proxy.read(operation, theCallback, scope)
            theCallback refers to the callback argument received by this function.
            See {@link #doRequest} for details.
            @param {Ext.data.Request} request The Request object
            @param {Ext.data.Operation} operation The Operation being executed
            @param {Function} callback The callback function to be called when the request completes. This is usually the callback
            passed to doRequest
            @param {Object} scope The scope in which to execute the callback function
            @return {Function} The callback function
            </summary>
        </member>
        <member name="M:Ext.data.ScriptTagProxy.createTimeoutHandler(Ext.data.Request,System.Object)">
            <summary>
            @private
            Starts a timer with the value of this.timeout - if this fires it means the request took too long so we
            cancel the request. If the request was successful this timer is cancelled by this.afterRequest
            @param {Ext.data.Request} request The Request to handle
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.data.ScriptTagProxy.doRequest(Ext.data.Operation,SharpKit.JavaScript.JsAction,System.Object)" -->
        <member name="M:Ext.data.ScriptTagProxy.encodeRecords(SharpKit.JavaScript.JsArray)">
            <summary>
            Encodes an array of records into a string suitable to be appended to the script src url. This is broken
            out into its own function so that it can be easily overridden.
            @param {Array} records The records array
            @return {String} The encoded records string
            </summary>
        </member>
        <member name="M:Ext.data.ScriptTagProxy.isLoading">
            <summary>
            @private
            @return {Boolean} True if there is a current request that hasn't completed yet
            </summary>
        </member>
        <member name="P:Ext.data.ScriptTagProxy.autoAppendParams">
            <summary>
            @cfg {Boolean} autoAppendParams True to automatically append the request's params to the generated url. Defaults to true
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.ScriptTagProxy.callbackParam" -->
        <member name="P:Ext.data.ScriptTagProxy.callbackPrefix">
            <summary>
            @cfg {String} callbackPrefix
            The prefix string that is used to create a unique callback function name in the global scope. This can optionally
            be modified to give control over how the callback string passed to the remote server is generated. Defaults to 'stcCallback'
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.ScriptTagProxy.defaultWriterType" -->
        <member name="P:Ext.data.ScriptTagProxy.recordParam">
            <summary>
            @cfg {String} recordParam
            The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString').
            Defaults to 'records'
            </summary>
        </member>
        <member name="P:Ext.data.ScriptTagProxy.scriptIdPrefix">
            <summary>
            @cfg {String} scriptIdPrefix
            The prefix string that is used to create a unique ID for the injected script tag element (defaults to 'stcScript')
            </summary>
        </member>
        <member name="P:Ext.data.ScriptTagProxyConfig.autoAppendParams">
            <summary>
            True to automatically append the request's params to the generated url. Defaults to true
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.data.ScriptTagProxyConfig.callbackParam" -->
        <member name="P:Ext.data.ScriptTagProxyConfig.callbackPrefix">
            <summary>
            The prefix string that is used to create a unique callback function name in the global scope. This can optionally
            be modified to give control over how the callback string passed to the remote server is generated. Defaults to 'stcCallback'
            </summary>
        </member>
        <member name="P:Ext.data.ScriptTagProxyConfig.recordParam">
            <summary>
            The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString').
            Defaults to 'records'
            </summary>
        </member>
        <member name="P:Ext.data.ScriptTagProxyConfig.scriptIdPrefix">
            <summary>
            The prefix string that is used to create a unique ID for the injected script tag element (defaults to 'stcScript')
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.cacheString">
            <summary>
            The name of the cache param added to the url when using noCache (defaults to "_dc")
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.extraParams">
            <summary>
            Extra parameters that will be included on every request. Individual requests with params
            of the same name will override these params when they are in conflict.
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.filterParam">
            <summary>
            The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set
            this to undefined if you don't want to send a filter parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.groupParam">
            <summary>
            The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this
            to undefined if you don't want to send a group parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.limitParam">
            <summary>
            The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this
            to undefined if you don't want to send a limit parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.noCache">
            <summary>
            (optional) Defaults to true. Disable caching by adding a unique parameter
            name to the request.
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.pageParam">
            <summary>
            The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to
            undefined if you don't want to send a page parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.reader">
            <summary>
            The Ext.data.Reader to use to decode the server's response. This can
            either be a Reader instance, a config object or just a valid Reader type name (e.g. 'json', 'xml').
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.sortParam">
            <summary>
            The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this
            to undefined if you don't want to send a sort parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.startParam">
            <summary>
            The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this
            to undefined if you don't want to send a start parameter
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.timeout">
            <summary>
            (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.url">
            <summary>
            The URL from which to request the data object.
            </summary>
        </member>
        <member name="P:Ext.data.ServerProxyConfig.writer">
            <summary>
            The Ext.data.Writer to use to encode any request sent to the server.
            This can either be a Writer instance, a config object or just a valid Writer type name (e.g. 'json', 'xml').
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.SessionStorageProxy" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.data.SessionStorageProxy.getStorageObject" -->
        <member name="M:Ext.data.SortTypes.asDate(System.Object)">
            <summary>
            Date sorting
            @param {Mixed} s The value being converted
            @return {Number} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asFloat(System.Object)">
            <summary>
            Float sorting
            @param {Mixed} s The value being converted
            @return {Float} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asInt(System.Object)">
            <summary>
            Integer sorting
            @param {Mixed} s The value being converted
            @return {Number} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCString(System.Object)">
            <summary>
            Case insensitive string
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.asUCText(System.Object)">
            <summary>
            Strips all HTML tags to sort on text only - Case insensitive
            @param {Mixed} s The value being converted
            @return {String} The comparison value
            </summary>
        </member>
        <member name="M:Ext.data.SortTypes.none(System.Object)">
            <summary>
            Default sort that does nothing
            @param {Mixed} s The value being converted
            @return {Mixed} The comparison value
            </summary>
        </member>
        <member name="P:Ext.data.SortTypes.stripTagsRE">
            <summary>
            The regular expression used to strip tags
            @type {RegExp}
            @property
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.clearOnPageLoad">
            <summary>
            True to empty the store when loading another page via {@link #loadPage},
            {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
            large data sets to be loaded one page at a time but rendered all together.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.data">
            <summary>
            Optional array of Model instances or data objects to load locally. See "Inline data" above for details.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.proxy">
            <summary>
            The Proxy to use for this Store. This can be either a string, a config
            object or a Proxy instance - see {@link #setProxy} for details.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteFilter">
            <summary>
            True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.StoreConfig.remoteSort">
            <summary>
            True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="T:Ext.data.Tree">
            <summary>
            @class Ext.data.Tree
            @extends Ext.util.Observable
            Represents a tree data structure and bubbles all the events for its nodes. The nodes
            in the tree have most standard DOM functionality.
            @constructor
            @param {Node} root (optional) The root node
            </summary>
        </member>
        <member name="M:Ext.data.Tree.#ctor(System.Object)">
            <summary>
            @class Ext.data.Tree
            @extends Ext.util.Observable
            Represents a tree data structure and bubbles all the events for its nodes. The nodes
            in the tree have most standard DOM functionality.
            @constructor
            @param {Node} root (optional) The root node
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getNodeById(SharpKit.JavaScript.JsString)">
            <summary>
            Gets a node in this tree by its id.
            @param {String} id
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Tree.getRootNode">
            <summary>
            Returns the root node for this tree.
            @return {Node}
            </summary>
        </member>
        <member name="M:Ext.data.Tree.setRootNode(System.Object)">
            <summary>
            Sets the root node for this tree.
            @param {Node} node
            @return {Node}
            </summary>
        </member>
        <member name="P:Ext.data.Tree.pathSeparator">
            <summary>
            @cfg {String} pathSeparator
            The token used to separate paths in node ids (defaults to '/').
            </summary>
        </member>
        <member name="P:Ext.data.Tree.RootNode">
            <summary>
            Sets the root node for this tree.
            @param {Node} node
            @return {Node}
            </summary>
        </member>
        <member name="P:Ext.data.TreeConfig.pathSeparator">
            <summary>
            The token used to separate paths in node ids (defaults to '/').
            </summary>
        </member>
        <member name="T:Ext.data.TreeStore">
            <summary>
            @author Aaron Conran
            @class Ext.data.TreeStore
            @extends Ext.data.AbstractStore
            *
            <p>A store class that allows the representation of hierarchical data.</p>
            @constructor
            @param {Object} config Optional config object
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.#ctor(System.Object)">
            <summary>
            @cfg {String} defaultRootId
            The default root id. Defaults to 'root'
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.getNodeById(System.Object)">
            <summary>
            Returns the record node by id
            @return {Ext.data.RecordNode}
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.getRootNode">
            <summary>
            Returns the root node for this tree.
            @return {Ext.data.RecordNode}
            </summary>
        </member>
        <member name="M:Ext.data.TreeStore.getSubStore(System.Object)">
            <summary>
            Returns a flat Ext.data.Store with the correct type of model.
            @param {Ext.data.RecordNode/Ext.data.Record} record
            @returns Ext.data.Store
            </summary>
        </member>
        <member name="P:Ext.data.TreeStore.clearOnLoad">
            <summary>
            @cfg {Boolean} clearOnLoad (optional) Default to true. Remove previously existing
            child nodes before loading.
            </summary>
        </member>
        <member name="P:Ext.data.TreeStore.defaultRootId">
            <summary>
            @cfg {String} defaultRootId
            The default root id. Defaults to 'root'
            </summary>
        </member>
        <member name="P:Ext.data.TreeStore.nodeParam">
            <summary>
            @cfg {String} nodeParam The name of the parameter sent to the server which contains
            the identifier of the node. Defaults to <tt>'node'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.clearOnLoad">
            <summary>
            (optional) Default to true. Remove previously existing
            child nodes before loading.
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.defaultRootId">
            <summary>
            The default root id. Defaults to 'root'
            </summary>
        </member>
        <member name="P:Ext.data.TreeStoreConfig.nodeParam">
            <summary>
            The name of the parameter sent to the server which contains
            the identifier of the node. Defaults to <tt>'node'</tt>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.Types" -->
        <member name="M:Ext.data.validations.exclusion(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Validates that the given value is present in the configured {@link #list}
            @param {Object} config Optional config object
            @param {String} value The value to validate
            @return {Boolean} True if the value is not present in the list
            </summary>
        </member>
        <member name="M:Ext.data.validations.format(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the given value passes validation against the configured {@link #matcher} regex
            @param {Object} config Optional config object
            @param {String} value The value to validate
            @return {Boolean} True if the value passes the format validation
            </summary>
        </member>
        <member name="M:Ext.data.validations.inclusion(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Validates that the given value is present in the configured {@link #list}
            @param {String} value The value to validate
            @return {Boolean} True if the value is present in the list
            </summary>
        </member>
        <member name="M:Ext.data.validations.length(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if the given value is between the configured min and max values
            @param {Object} config Optional config object
            @param {String} value The value to validate
            @return {Boolean} True if the value passes validation
            </summary>
        </member>
        <member name="M:Ext.data.validations.presence(System.Object,System.Object)">
            <summary>
            Validates that the given value is present
            @param {Object} config Optional config object
            @param {Mixed} value The value to validate
            @return {Boolean} True if validation passed
            </summary>
        </member>
        <member name="P:Ext.data.validations.exclusionMessage">
            <summary>
            The default error message used when an exclusion validation fails
            @property exclusionMessage
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.validations.formatMessage">
            <summary>
            The default error message used when a format validation fails
            @property formatMessage
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.data.validations.inclusionMessage">
            <summary>
            The default error message used when an inclusion validation fails
            @property inclusionMessage
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.validations.lengthMessage">
            <summary>
            The default error message used when a length validation fails
            @property lengthMessage
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.validations.presenceMessage">
            <summary>
            The default error message used when a presence validation fails
            @property presenceMessage
            @type String
            </summary>
        </member>
        <member name="P:Ext.data.WebStorageProxyConfig.id">
            <summary>
            The unique ID used as the key in which all record data are stored in the local storage object
            </summary>
        </member>
        <member name="T:Ext.data.WriterMgr">
            <summary>
            @author Ed Spencer
            @class Ext.data.WriterMgr
            @extends Ext.AbstractManager
            @ignore
            <p>Keeps track of all of the registered {@link Ext.data.Writer Writers}</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.XmlReader" -->
        <member name="M:Ext.data.XmlReader.#ctor(System.Object)">
            <summary>
            @constructor
            @ignore
            TODO: This can be removed in 5.0 as all it does is support some deprecated config
            </summary>
        </member>
        <member name="M:Ext.data.XmlReader.extractData(Ext.Element,System.Object)">
            <summary>
            @private
            We're just preparing the data for the superclass by pulling out the record nodes we want
            @param {Element} root The XML root node
            @return {Array} The records
            </summary>
        </member>
        <member name="M:Ext.data.XmlReader.getAssociatedDataRoot(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            @private
            See Ext.data.Reader's getAssociatedDataRoot docs
            @param {Mixed} data The raw data object
            @param {String} associationName The name of the association to get data for (uses associationKey if present)
            @return {Mixed} The root
            </summary>
        </member>
        <member name="M:Ext.data.XmlReader.getData(System.Object)">
            <summary>
            Normalizes the data object
            @param {Object} data The raw data object
            @return {Object} Returns the documentElement property of the data object if present, or the same object if not
            </summary>
        </member>
        <member name="M:Ext.data.XmlReader.getRoot(System.Object)">
            <summary>
            @private
            Given an XML object, returns the Element that represents the root as configured by the Reader's meta data
            @param {Object} data The XML data object
            @return {Element} The root node element
            </summary>
        </member>
        <member name="M:Ext.data.XmlReader.readRecords(System.Object)">
            <summary>
            Parses an XML document and returns a ResultSet containing the model instances
            @param {Object} doc Parsed XML document
            @return {Ext.data.ResultSet} The parsed result set
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.id">
            <summary>
            DEPRECATED - this will be removed in Ext JS 5.0. Please use idProperty instead
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.idPath">
            <summary>
            DEPRECATED - this will be removed in Ext JS 5.0. Please use idProperty instead
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.record">
            <summary>
            The DomQuery path to the repeated element which contains record information.
            <b>This is an alias for the {@link #root} config option.</b>
            </summary>
        </member>
        <member name="P:Ext.data.XmlReaderConfig.success">
            <summary>
            DEPRECATED - this will be removed in Ext JS 5.0. Please use successProperty instead
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.data.XmlStore" -->
        <member name="M:Ext.data.XmlStore.#ctor(System.Object)">
            <summary>
            @cfg {Ext.data.DataReader} reader @hide
            </summary>
        </member>
        <member name="T:Ext.data.XmlWriter">
            <summary>
            @author Ed Spencer
            @class Ext.data.XmlWriter
            @extends Ext.data.Writer
            <p>Writer that outputs model data in XML format</p>
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriter.documentRoot">
            <summary>
            @cfg {String} documentRoot The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriter.header">
            <summary>
            @cfg {String} header A header to use in the XML document (such as setting the encoding or version).
            Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriter.record">
            <summary>
            @cfg {String} record The name of the node to use for each record. Defaults to <tt>'record'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriterConfig.documentRoot">
            <summary>
            The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriterConfig.header">
            <summary>
            A header to use in the XML document (such as setting the encoding or version).
            Defaults to <tt>''</tt>.
            </summary>
        </member>
        <member name="P:Ext.data.XmlWriterConfig.record">
            <summary>
            The name of the node to use for each record. Defaults to <tt>'record'</tt>.
            </summary>
        </member>
        <member name="T:Ext.form.Checkbox">
            <summary>
            @class Ext.form.Checkbox
            @extends Ext.form.Field
            Simple Checkbox class. Can be used as a direct replacement for traditional checkbox fields.
            @constructor
            @param {Object} config Optional config object
            @xtype checkboxfield
            </summary>
        </member>
        <member name="T:Ext.form.Field">
            <summary>
            @class Ext.form.Field
            @extends Ext.Container
            <p>Base class for form fields that provides default event handling, sizing, value handling and other functionality. Ext.form.Field
            is not used directly in applications, instead the subclasses such as {@link Ext.form.Text} should be used.</p>
            @constructor
            Creates a new Field
            @param {Object} config Configuration options
            @xtype field
            </summary>
        </member>
        <member name="M:Ext.form.Field.afterRender">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.Field.applyRenderSelectors">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.Field.getName">
            <summary>
            Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            attribute of the field if available.
            @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            </summary>
        </member>
        <member name="M:Ext.form.Field.getValue">
            <summary>
            Returns the field data value
            @return {Mixed} value The field value
            </summary>
        </member>
        <member name="M:Ext.form.Field.initRenderData">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.Field.isDirty">
            <summary>
            <p>Returns true if the value of this Field has been changed from its original value.
            Will return false if the field is disabled or has not been rendered yet.</p>
            <p>Note that if the owning {@link Ext.form.BasicForm form} was configured with
            {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
            then the <i>original value</i> is updated when the values are loaded by
            {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>
            @return {Boolean} True if this field has been changed from its original value (and
            is not disabled), false otherwise.
            </summary>
        </member>
        <member name="M:Ext.form.Field.onRender">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.form.Field.reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages.
            See {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
            </summary>
        </member>
        <member name="M:Ext.form.Field.setLabelWidth(System.Object)">
            <summary>
            Set the label width
            @param {Mixed} width The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="M:Ext.form.Field.setValue(System.Object)">
            <summary>
            Set the field data value
            @param {Mixed} value The value to set
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.Field.autoCreateField">
            <summary>
            @cfg {Boolean} autoCreateField True to automatically create the field input element on render.
            This is true by default, but should be set to false for any Ext.Field subclasses that don't
            need an HTML input (e.g. Ext.Slider and similar)
            </summary>
        </member>
        <member name="P:Ext.form.Field.baseCls">
            <summary>
            @cfg {String} fieldCls The default CSS class for the field (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.Field.disabled">
            <summary>
            @cfg {Boolean} disabled True to disable the field (defaults to false).
            <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
            disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
            </summary>
        </member>
        <member name="P:Ext.form.Field.fieldCls">
            <summary>
            @cfg {String} fieldCls The default CSS class for the field (defaults to 'x-form-field')
            </summary>
        </member>
        <member name="P:Ext.form.Field.inputType">
            <summary>
            @cfg {String} inputType The type attribute for input fields -- e.g. radio, text, password, file (defaults
            to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
            no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
            is not supported and should be avoided.
            </summary>
        </member>
        <member name="P:Ext.form.Field.isField">
            <summary>
            Set to true on all Ext.form.Field subclasses. This is used by {@link Ext.form.FormPanel#getValues} to determine which
            components inside a form are fields.
            @property isField
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.form.Field.label">
            <summary>
            @cfg {String} label The label to associate with this field. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Field.labelAlign">
            <summary>
            @cfg {String} labelAlign The location to render the label of the field. Acceptable values are 'top' and 'left'.
            Defaults to <tt>'left'</tt>
            </summary>
        </member>
        <member name="P:Ext.form.Field.labelWidth">
            <summary>
            @cfg {Mixed} labelWidth The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'.
            Defaults to <tt>'30%'</tt>
            </summary>
        </member>
        <member name="P:Ext.form.Field.LabelWidth">
            <summary>
            Set the label width
            @param {Mixed} width The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="P:Ext.form.Field.Name">
            <summary>
            Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            attribute of the field if available.
            @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
            </summary>
        </member>
        <member name="P:Ext.form.Field.required">
            <summary>
            @cfg {Boolean} required True to make this field required. Note: this only causes a visual indication.
            Doesn't prevent user from submitting the form.
            </summary>
        </member>
        <member name="P:Ext.form.Field.Value">
            <summary>
            Set the field data value
            @param {Mixed} value The value to set
            @return {Ext.form.Field} this
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.check">
            <summary>
            Set the checked state of the checkbox to true
            @return {Ext.form.Checkbox} this This checkbox
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.getGroupValues">
            <summary>
            Returns an array of values from the checkboxes in the group that are checked,
            @return {Array}
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.isChecked">
            <summary>
            Returns the checked state of the checkbox.
            @return {Boolean} True if checked, else otherwise
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.setChecked(System.Object)">
            <summary>
            Set the checked state of the checkbox.
            @return {Ext.form.Checkbox} this This checkbox
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.setGroupValues(SharpKit.JavaScript.JsArray)">
            <summary>
            Set the status of all matched checkboxes in the same group to checked
            @param {Array} values An array of values
            @return {Ext.form.Checkbox} This checkbox
            </summary>
        </member>
        <member name="M:Ext.form.Checkbox.uncheck">
            <summary>
            Set the checked state of the checkbox to false
            @return {Ext.form.Checkbox} this This checkbox
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.checked">
            <summary>
            @cfg {Boolean} checked <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.Checked">
            <summary>
            Set the checked state of the checkbox.
            @return {Ext.form.Checkbox} this This checkbox
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.GroupValues">
            <summary>
            Set the status of all matched checkboxes in the same group to checked
            @param {Array} values An array of values
            @return {Ext.form.Checkbox} This checkbox
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.ui">
            <summary>
            @class Ext.form.Checkbox
            @extends Ext.form.Field
            Simple Checkbox class. Can be used as a direct replacement for traditional checkbox fields.
            @constructor
            @param {Object} config Optional config object
            @xtype checkboxfield
            </summary>
        </member>
        <member name="P:Ext.form.Checkbox.value">
            <summary>
            @cfg {String} value The string value to submit if the item is in a checked state.
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.checked">
            <summary>
            <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
            </summary>
        </member>
        <member name="P:Ext.form.CheckboxConfig.value">
            <summary>
            The string value to submit if the item is in a checked state.
            </summary>
        </member>
        <member name="T:Ext.form.DatePicker">
            <summary>
            @class Ext.form.DatePicker
            @extends Ext.form.Field
            <p>Specialized field which has a button which when pressed, shows a {@link Ext.DatePicker}.</p>
            @xtype datepickerfield
            </summary>
        </member>
        <member name="M:Ext.form.DatePicker.getDatePicker">
            <summary>
            Get an instance of the internal date picker; will create a new instance if not exist.
            @return {Ext.DatePicker} datePicker
            </summary>
        </member>
        <member name="M:Ext.form.DatePicker.getValue(System.Boolean)">
            <summary>
            Returns the value of the field, which will be a {@link Date} unless the <tt>format</tt> parameter is true.
            @param {Boolean} format True to format the value with <tt>Ext.util.Format.defaultDateFormat</tt>
            </summary>
        </member>
        <member name="M:Ext.form.DatePicker.onMaskTap">
            <summary>
            @private
            Listener to the tap event of the mask element. Shows the internal {@link #datePicker} component when the button has been tapped.
            </summary>
        </member>
        <member name="M:Ext.form.DatePicker.onPickerChange(Ext.DatePicker,System.Object)">
            <summary>
            Called when the picker changes its value
            @param {Ext.DatePicker} picker The date picker
            @param {Object} value The new value from the date picker
            @private
            </summary>
        </member>
        <member name="M:Ext.form.DatePicker.onPickerHide">
            <summary>
            Destroys the picker when it is hidden, if
            {@link Ext.form.DatePicker#destroyPickerOnHide destroyPickerOnHide} is set to true
            @private
            </summary>
        </member>
        <member name="P:Ext.form.DatePicker.DatePicker2">
            <summary>
            Get an instance of the internal date picker; will create a new instance if not exist.
            @return {Ext.DatePicker} datePicker
            </summary>
        </member>
        <member name="P:Ext.form.DatePicker.destroyPickerOnHide">
            <summary>
            @cfg {Boolean} destroyPickerOnHide
            Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,
            but increase delay time on the next show due to re-instantiation. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.form.DatePicker.picker">
            <summary>
            @cfg {Object/Ext.DatePicker} picker
            An object that is used when creating the internal {@link Ext.DatePicker} component or a direct instance of {@link Ext.DatePicker}
            Defaults to null
            </summary>
        </member>
        <member name="P:Ext.form.DatePicker.ui">
            <summary>
            @class Ext.form.DatePicker
            @extends Ext.form.Field
            <p>Specialized field which has a button which when pressed, shows a {@link Ext.DatePicker}.</p>
            @xtype datepickerfield
            </summary>
        </member>
        <member name="P:Ext.form.DatePickerConfig.destroyPickerOnHide">
            <summary>
            Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,
            but increase delay time on the next show due to re-instantiation. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.form.DatePickerConfig.picker">
            <summary>
            An object that is used when creating the internal {@link Ext.DatePicker} component or a direct instance of {@link Ext.DatePicker}
            Defaults to null
            </summary>
        </member>
        <member name="P:Ext.form.DatePickerConfig.value">
            <summary>
            Default value for the field and the internal {@link Ext.DatePicker} component. Accepts an object of 'year',
            'month' and 'day' values, all of which should be numbers, or a {@link Date}.
            Example: {year: 1989, day: 1, month: 5} = 1st May 1989 or new Date()
            </summary>
        </member>
        <member name="T:Ext.form.Email">
            <summary>
            @class Ext.form.Email
            @extends Ext.form.Text
            <p>Wraps an HTML5 email field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype emailfield
            </summary>
        </member>
        <member name="T:Ext.form.Text">
            <summary>
            @class Ext.form.Text
            @extends Ext.form.Field
            <p>Simple text input field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype textfield
            </summary>
        </member>
        <member name="M:Ext.form.Text.blur">
            <summary>
            Attempts to forcefully blur input focus for the field.
            @return {Ext.form.Text} this
            </summary>
        </member>
        <member name="M:Ext.form.Text.focus">
            <summary>
            Attempts to set the field as the active input focus.
            @return {Ext.form.Text} this
            </summary>
        </member>
        <member name="P:Ext.form.Text.focusCls">
            <summary>
            @cfg {String} focusCls The CSS class to use when the field receives focus (defaults to 'x-field-focus')
            </summary>
        </member>
        <member name="P:Ext.form.Text.isFocused">
            <summary>
            @property {Boolean} <tt>True</tt> if the field currently has focus.
            </summary>
        </member>
        <member name="P:Ext.form.Text.maxLength">
            <summary>
            @cfg {Integer} maxLength The maximum number of permitted input characters (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.form.Text.ui">
            <summary>
            @class Ext.form.Text
            @extends Ext.form.Field
            <p>Simple text input field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype textfield
            </summary>
        </member>
        <member name="P:Ext.form.Email.inputType">
            <summary>
            @class Ext.form.Email
            @extends Ext.form.Text
            <p>Wraps an HTML5 email field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype emailfield
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.autoCreateField">
            <summary>
            True to automatically create the field input element on render.
            This is true by default, but should be set to false for any Ext.Field subclasses that don't
            need an HTML input (e.g. Ext.Slider and similar)
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.cls">
            <summary>
            A custom CSS class to apply to the field's underlying element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.disabled">
            <summary>
            True to disable the field (defaults to false).
            <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
            disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.form.FieldConfig.inputCls" -->
        <member name="P:Ext.form.FieldConfig.inputType">
            <summary>
            The type attribute for input fields -- e.g. radio, text, password, file (defaults
            to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
            no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
            is not supported and should be avoided.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.label">
            <summary>
            The label to associate with this field. Defaults to <tt>null</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.labelAlign">
            <summary>
            The location to render the label of the field. Acceptable values are 'top' and 'left'.
            Defaults to <tt>'left'</tt>
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.labelWidth">
            <summary>
            The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'.
            Defaults to <tt>'30%'</tt>
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.name">
            <summary>
            The field's HTML name attribute (defaults to '').
            <b>Note</b>: this property must be set if this field is to be automatically included with
            {@link Ext.form.FormPanel#submit form submit()}.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.required">
            <summary>
            True to make this field required. Note: this only causes a visual indication.
            Doesn't prevent user from submitting the form.
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.tabIndex">
            <summary>
            The tabIndex for this field. Note this only applies to fields that are rendered,
            not those which are built via applyTo (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.form.FieldConfig.value">
            <summary>
            A value to initialize this field with (defaults to undefined).
            </summary>
        </member>
        <member name="T:Ext.form.FieldSet">
            <summary>
            @class Ext.form.FieldSet
            @extends Ext.Container
            <p>Simple FieldSet, can contain fields as items. FieldSets do not add any behavior, other than an optional title, and
            are just used to group similar fields together. Example usage (within a form):</p>
            <pre><code>
            new Ext.form.FormPanel({
            items: [
            {
            xtype: 'fieldset',
            title: 'About Me',
            items: [
            {
            xtype: 'textfield',
            name : 'firstName',
            label: 'First Name'
            },
            {
            xtype: 'textfield',
            name : 'lastName',
            label: 'Last Name'
            }
            ]
            }
            ]
            });
            </code></pre>
            @xtype fieldset
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.afterLayout(System.Object)">
            <summary>
            @cfg {String} instructions Optional fieldset instructions, rendered just below the grouped fields
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.setInstructions(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the instructions of the current fieldset.
            @param {String} instructions The new instructions
            @return {Ext.form.FieldSet} this
            </summary>
        </member>
        <member name="M:Ext.form.FieldSet.setTitle(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the title of the current fieldset.
            @param {String} title The new title
            @return {Ext.form.FieldSet} this
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.componentCls">
            <summary>
            @class Ext.form.FieldSet
            @extends Ext.Container
            <p>Simple FieldSet, can contain fields as items. FieldSets do not add any behavior, other than an optional title, and
            are just used to group similar fields together. Example usage (within a form):</p>
            <pre><code>
            new Ext.form.FormPanel({
            items: [
            {
            xtype: 'fieldset',
            title: 'About Me',
            items: [
            {
            xtype: 'textfield',
            name : 'firstName',
            label: 'First Name'
            },
            {
            xtype: 'textfield',
            name : 'lastName',
            label: 'Last Name'
            }
            ]
            }
            ]
            });
            </code></pre>
            @xtype fieldset
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.Instructions">
            <summary>
            Sets the instructions of the current fieldset.
            @param {String} instructions The new instructions
            @return {Ext.form.FieldSet} this
            </summary>
        </member>
        <member name="P:Ext.form.FieldSet.Title">
            <summary>
            Sets the title of the current fieldset.
            @param {String} title The new title
            @return {Ext.form.FieldSet} this
            </summary>
        </member>
        <member name="P:Ext.form.FieldSetConfig.title">
            <summary>
            Optional fieldset title, rendered just above the grouped fields
            </summary>
        </member>
        <member name="T:Ext.form.FormPanel">
            <summary>
            @class Ext.form.FormPanel
            @extends Ext.Panel
            <p>Simple form panel which enables easy getting and setting of field values. Can load model instances. Example usage:</p>
            <pre><code>
            var form = new Ext.form.FormPanel({
            items: [
            {
            xtype: 'textfield',
            name : 'first',
            label: 'First name'
            },
            {
            xtype: 'textfield',
            name : 'last',
            label: 'Last name'
            },
            {
            xtype: 'numberfield',
            name : 'age',
            label: 'Age'
            },
            {
            xtype: 'urlfield',
            name : 'url',
            label: 'Website'
            }
            ]
            });
            </code></pre>
            <p>Loading model instances:</p>
            <pre><code>
            Ext.regModel('User', {
            fields: [
            {name: 'first', type: 'string'},
            {name: 'last',  type: 'string'},
            {name: 'age',   type: 'int'},
            {name: 'url',   type: 'string'}
            ]
            });
            var user = Ext.ModelMgr.create({
            first: 'Ed',
            last : 'Spencer',
            age  : 24,
            url  : 'http://extjs.com'
            }, 'User');
            form.load(user);
            </code></pre>
            @xtype form
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.disable">
            <summary>
            A convenient method to disable all fields in this forms
            @return {Ext.form.FormPanel} this This form
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.enable">
            <summary>
            A convenient method to enable all fields in this forms
            @return {Ext.form.FormPanel} this This form
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.getElConfig">
            <summary>
            @cfg {Object} submitOnAction
            When this is set to true, the form will automatically submit itself whenever the 'action'
            event fires on a field in this form. The action event usually fires whenever you press
            go or enter inside a textfield.
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.getFields(System.Object)">
            <summary>
            @private
            Returns all {@link Ext.Field field} instances inside this form
            @param byName return only fields that match the given name, otherwise return all fields.
            @return {Object/Array} All field instances, mapped by field name; or an array if byName is passed
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.getRecord">
            <summary>
            Returns the Model instance currently loaded into this form (if any)
            @return {Ext.data.Model} The Model instance
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.getValues(System.Boolean)">
            <summary>
            Returns an object containing the value of each field in the form, keyed to the field's name.
            For groups of checkbox fields with the same name, it will be arrays of values. For examples:
            <pre><code>
            {
            name: "Jacky Nguyen", // From a TextField
            favorites: [
            'pizza',
            'noodle',
            'cake'
            ]
            }
            </code></pre>
            @param {Boolean} enabled <tt>true</tt> to return only enabled fields
            @return {Object} Object mapping field name to its value
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.hideMask">
            <summary>
            Hides a previously shown wait mask (See {@link #showMask})
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.loadModel">
            <summary>
            @private
            Backwards-compatibility for a poorly-named function
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.loadRecord(Ext.data.Model)">
            <summary>
            Loads matching fields from a model instance into this form
            @param {Ext.data.Model} instance The model instance
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.reset">
            <summary>
            Resets all fields in the form back to their original values
            @return {Ext.form.FormPanel} this This form
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.setValues(System.Object)">
            <summary>
            Sets the values of form fields in bulk. Example usage:
            <pre><code>
            myForm.setValues({
            name: 'Ed',
            crazy: true,
            username: 'edspencer'
            });
            </code></pre>
            If there groups of checkbox fields with the same name, pass their values in an array. For example:
            <pre><code>
            myForm.setValues({
            name: 'Jacky',
            crazy: false,
            hobbies: [
            'reading',
            'cooking',
            'gaming'
            ]
            });
            </code></pre>
            @param {Object} values field name => value mapping object
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.showMask(System.Object,System.Object)">
            <summary>
            Shows a generic/custom mask over a designated Element.
            @param {String/Object} cfg Either a string message or a configuration object supporting
            the following options:
            <pre><code>
            {
            message : 'Please Wait',
            transparent : false,
            target  : Ext.getBody(),  //optional target Element
            cls : 'form-mask',
            customImageUrl : 'trident.jpg'
            }
            </code></pre>This object is passed to the {@link #waitTpl} for use with a custom masking implementation.
            @param {String/Element} target The target Element instance or Element id to use
            as the masking agent for the operation (defaults the container Element of the component)
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.submit(System.Object)">
            <summary>
            Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise
            executes a standard HTML Form submit action.
            @param {Object} options Unless otherwise noted, options may include the following:
            <ul>
            <li><b>url</b> : String
            <div class="sub-desc">
            The url for the action (defaults to the form's {@link #url url}.)
            </div></li>
            *
            <li><b>method</b> : String
            <div class="sub-desc">
            The form method to use (defaults to the form's method, or POST if not defined)
            </div></li>
            *
            <li><b>params</b> : String/Object
            <div class="sub-desc">
            The params to pass
            (defaults to the FormPanel's baseParams, or none if not defined)
            Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.
            </div></li>
            *
            <li><b>headers</b> : Object
            <div class="sub-desc">
            Request headers to set for the action
            (defaults to the form's default headers)
            </div></li>
            <li><b>autoAbort</b> : Boolean
            <div class="sub-desc">
            <tt>true</tt> to abort any pending Ajax request prior to submission (defaults to false)
            Note: Has no effect when standardSubmit is enabled.
            </div></li>
            <li><b>submitDisabled</b> : Boolean
            <div class="sub-desc">
            <tt>true</tt> to submit all fields regardless of disabled state (defaults to false)
            Note: Has no effect when standardSubmit is enabled.
            </div></li>
            *
            <li><b>waitMsg</b> : String/Config
            <div class="sub-desc">
            If specified, the value is applied to the {@link #waitTpl} if defined, and rendered to the
            {@link #waitMsgTarget} prior to a Form submit action.
            </div></li>
            <li><b>success</b> : Function
            <div class="sub-desc">
            The callback that will be invoked after a successful response. A response is successful if
            a response is received from the server and is a JSON object where the success property is set
            to true, {"success": true}
            The function is passed the following parameters:
            <ul>
            <li>form : Ext.FormPanel The form that requested the action</li>
            <li>result : The result object returned by the server as a result of the submit request.</li>
            </ul>
            </div></li>
            *
            <li><b>failure</b> : Function
            <div class="sub-desc">
            The callback that will be invoked after a
            failed transaction attempt. The function is passed the following parameters:
            <ul>
            <li>form : The Ext.FormPanel that requested the submit.</li>
            <li>result : The failed response or result object returned by the server which performed the operation.</li>
            </ul>
            </div></li>
            <li><b>scope</b> : Object
            <div class="sub-desc">
            The scope in which to call the callback functions (The this reference for the callback functions).
            </div></li>
            </ul>
            *
            @return {Ext.data.Connection} request Object
            </summary>
        </member>
        <member name="M:Ext.form.FormPanel.updateRecord(Ext.data.Model,System.Boolean)">
            <summary>
            Updates a model instance with the current values of this form
            @param {Ext.data.Model} instance The model instance
            @param {Boolean} enabled <tt>true</tt> to update the Model with values from enabled fields only
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="P:Ext.form.FormPanel.componentCls">
            <summary>
            @cfg {Boolean} standardSubmit
            Wether or not we want to perform a standard form submit. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.form.FormPanel.Record">
            <summary>
            Returns the Model instance currently loaded into this form (if any)
            @return {Ext.data.Model} The Model instance
            </summary>
        </member>
        <member name="P:Ext.form.FormPanel.standardSubmit">
            <summary>
            @cfg {Boolean} standardSubmit
            Wether or not we want to perform a standard form submit. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.form.FormPanel.submitOnAction">
            <summary>
            @cfg {Object} submitOnAction
            When this is set to true, the form will automatically submit itself whenever the 'action'
            event fires on a field in this form. The action event usually fires whenever you press
            go or enter inside a textfield.
            </summary>
        </member>
        <member name="P:Ext.form.FormPanel.Values">
            <summary>
            Sets the values of form fields in bulk. Example usage:
            <pre><code>
            myForm.setValues({
            name: 'Ed',
            crazy: true,
            username: 'edspencer'
            });
            </code></pre>
            If there groups of checkbox fields with the same name, pass their values in an array. For example:
            <pre><code>
            myForm.setValues({
            name: 'Jacky',
            crazy: false,
            hobbies: [
            'reading',
            'cooking',
            'gaming'
            ]
            });
            </code></pre>
            @param {Object} values field name => value mapping object
            @return {Ext.form.FormPanel} this
            </summary>
        </member>
        <member name="P:Ext.form.FormPanelConfig.baseParams">
            <summary>
            Optional hash of params to be sent (when standardSubmit configuration is false) on every submit.
            </summary>
        </member>
        <member name="P:Ext.form.FormPanelConfig.submitOnAction">
            <summary>
            When this is set to true, the form will automatically submit itself whenever the 'action'
            event fires on a field in this form. The action event usually fires whenever you press
            go or enter inside a textfield.
            </summary>
        </member>
        <member name="P:Ext.form.FormPanelConfig.url">
            <summary>
            The default Url for submit actions
            </summary>
        </member>
        <member name="P:Ext.form.FormPanelConfig.waitTpl">
            <summary>
            The defined {@link #waitMsg} template.  Used for precise control over the masking agent used
            to mask the FormPanel (or other Element) during form Ajax/submission actions. For more options, see
            {@link #showMask} method.
            </summary>
        </member>
        <member name="T:Ext.form.Hidden">
            <summary>
            @class Ext.form.Hidden
            @extends Ext.form.Field
            <p>Wraps a hidden field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype hiddenfield
            </summary>
        </member>
        <member name="P:Ext.form.Hidden.ui">
            <summary>
            @class Ext.form.Hidden
            @extends Ext.form.Field
            <p>Wraps a hidden field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype hiddenfield
            </summary>
        </member>
        <member name="T:Ext.form.HiddenField">
            <summary>
            @class Ext.form.HiddenField
            @extends Ext.form.Hidden
            @private
            @hidden
            DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
            </summary>
        </member>
        <member name="M:Ext.form.HiddenField.#ctor">
            <summary>
            @class Ext.form.HiddenField
            @extends Ext.form.Hidden
            @private
            @hidden
            DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
            </summary>
        </member>
        <member name="T:Ext.form.Number">
            <summary>
            @class Ext.form.Number
            @extends Ext.form.Text
            <p>Wraps an HTML5 number field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype numberfield
            </summary>
        </member>
        <member name="P:Ext.form.Number.ui">
            <summary>
            @class Ext.form.Number
            @extends Ext.form.Text
            <p>Wraps an HTML5 number field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype numberfield
            </summary>
        </member>
        <member name="T:Ext.form.Password">
            <summary>
            @class Ext.form.Password
            @extends Ext.form.Text
            <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype passwordfield
            </summary>
        </member>
        <member name="P:Ext.form.Password.autoCapitalize">
            <summary>
            @class Ext.form.Password
            @extends Ext.form.Text
            <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype passwordfield
            </summary>
        </member>
        <member name="P:Ext.form.Password.inputType">
            <summary>
            @class Ext.form.Password
            @extends Ext.form.Text
            <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype passwordfield
            </summary>
        </member>
        <member name="T:Ext.form.Radio">
            <summary>
            @class Ext.form.Radio
            @extends Ext.form.Checkbox
            <p>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
            Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</p>
            @constructor
            Creates a new Radio
            @param {Object} config Configuration options
            @xtype radiofield
            </summary>
        </member>
        <member name="M:Ext.form.Radio.getGroupValue">
            <summary>
            Returns the selected value if this radio is part of a group (other radio fields with the same name, in the same FormPanel),
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.form.Radio.setGroupValue(SharpKit.JavaScript.JsString)">
            <summary>
            Set the matched radio field's status (that has the same value as the given string) to checked
            @param {String} value The value of the radio field to check
            @return {String}
            </summary>
        </member>
        <member name="P:Ext.form.Radio.GroupValue">
            <summary>
            Set the matched radio field's status (that has the same value as the given string) to checked
            @param {String} value The value of the radio field to check
            @return {String}
            </summary>
        </member>
        <member name="P:Ext.form.Radio.inputType">
            <summary>
            @class Ext.form.Radio
            @extends Ext.form.Checkbox
            <p>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
            Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</p>
            @constructor
            Creates a new Radio
            @param {Object} config Configuration options
            @xtype radiofield
            </summary>
        </member>
        <member name="P:Ext.form.RadioConfig.useClearIcon">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Search">
            <summary>
            @class Ext.form.Search
            @extends Ext.form.Text
            Wraps an HTML5 search field. See {@link Ext.form.FormPanel FormPanel} for example usage.
            @xtype searchfield
            </summary>
        </member>
        <member name="P:Ext.form.Search.inputType">
            <summary>
            @class Ext.form.Search
            @extends Ext.form.Text
            Wraps an HTML5 search field. See {@link Ext.form.FormPanel FormPanel} for example usage.
            @xtype searchfield
            </summary>
        </member>
        <member name="P:Ext.form.SearchConfig.useClearIcon">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Select">
            <summary>
            @class Ext.form.Select
            @extends Ext.form.Text
            Simple Select field wrapper. Example usage:
            <pre><code>
            new Ext.form.Select({
            options: [
            {text: 'First Option',  value: 'first'},
            {text: 'Second Option', value: 'second'},
            {text: 'Third Option',  value: 'third'}
            ]
            });
            </code></pre>
            @xtype selectfield
            </summary>
        </member>
        <member name="M:Ext.form.Select.setOptions(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Updates the underlying &lt;options&gt; list with new values.
            @param {Array} options An array of options configurations to insert or append.
            @param {Boolean} append <tt>true</tt> to append the new options existing values.
            <pre><code>
            selectBox.setOptions(
            [   {text: 'First Option',  value: 'first'},
            {text: 'Second Option', value: 'second'},
            {text: 'Third Option',  value: 'third'}
            ]).setValue('third');
            </code></pre>
            Note: option object member names should correspond with defined {@link #valueField valueField} and
            {@link #displayField displayField} values.
            @return {Ext.form.Select} this
            </summary>
        </member>
        <member name="P:Ext.form.Select.displayField">
            <summary>
            @cfg {String/Integer} displayField The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
            Select control. This resolved value is the visibly rendered value of the available selection options.
            (defaults to 'text')
            </summary>
        </member>
        <member name="P:Ext.form.Select.ui">
            <summary>
            @class Ext.form.Select
            @extends Ext.form.Text
            Simple Select field wrapper. Example usage:
            <pre><code>
            new Ext.form.Select({
            options: [
            {text: 'First Option',  value: 'first'},
            {text: 'Second Option', value: 'second'},
            {text: 'Third Option',  value: 'third'}
            ]
            });
            </code></pre>
            @xtype selectfield
            </summary>
        </member>
        <member name="P:Ext.form.Select.valueField">
            <summary>
            @cfg {String/Integer} valueField The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
            Select control. (defaults to 'value')
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.displayField">
            <summary>
            The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
            Select control. This resolved value is the visibly rendered value of the available selection options.
            (defaults to 'text')
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.hiddenName">
            <summary>
            Specify a hiddenName if you're using the {@link Ext.form.FormPanel#standardSubmit standardSubmit} option.
            This name will be used to post the underlying value of the select to the server.
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.options">
            <summary>
            (Optional) An array of select options.
            <pre><code>
            [
            {text: 'First Option',  value: 'first'},
            {text: 'Second Option', value: 'second'},
            {text: 'Third Option',  value: 'third'}
            ]
            </code></pre>
            Note: option object member names should correspond with defined {@link #valueField valueField} and {@link #displayField displayField} values.
            This config will be ignore if a {@link #store store} instance is provided
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.store">
            <summary>
            (Optional) store instance used to provide selection options data.
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.useClearIcon">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.SelectConfig.valueField">
            <summary>
            The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
            Select control. (defaults to 'value')
            </summary>
        </member>
        <member name="T:Ext.form.Slider">
            <summary>
            @class Ext.form.Slider
            @extends Ext.form.Field
            <p>Form component allowing a user to move a 'thumb' along a slider axis to choose a value. Sliders can equally be used outside
            of the context of a form. Example usage:</p>
            <pre><code>
            new Ext.form.FormPanel({
            items: [
            {
            xtype   : 'sliderfield',
            label   : 'Volume',
            value   : 5,
            minValue: 0,
            maxValue: 10
            }
            ]
            });
            </code></pre>
            Or as a standalone component:
            <pre><code>
            var slider = new Ext.form.Slider({
            value: 5,
            minValue: 0,
            maxValue: 10
            });
            slider.setValue(8); //will update the value and move the thumb;
            slider.getValue(); //returns 8
            </code></pre>
            @xtype sliderfield
            </summary>
        </member>
        <member name="M:Ext.form.Slider.constrain(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Takes a desired value of a thumb and returns the nearest snap value. e.g if minValue = 0, maxValue = 100, increment = 10 and we
            pass a value of 67 here, the returned value will be 70. The returned number is constrained within {@link minValue} and {@link maxValue},
            so in the above example 68 would be returned if {@link maxValue} was set to 68.
            @param {Number} value The value to snap
            @return {Number} The snapped value
            </summary>
        </member>
        <member name="M:Ext.form.Slider.#ctor(System.Object)">
            <summary>
            @cfg {Array} thumbs Optional array of Ext.form.Slider.Thumb instances. Usually {@link values} should be used instead
            </summary>
        </member>
        <member name="M:Ext.form.Slider.disable">
            <summary>
            Disables the slider by calling the internal {@link #setThumbsDisabled} method
            </summary>
        </member>
        <member name="M:Ext.form.Slider.enable">
            <summary>
            Enables the slider by calling the internal {@link #setThumbsDisabled} method.
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getNearest(SharpKit.JavaScript.JsNumber)">
            <summary>
            @private
            Finds and returns the nearest {@link Ext.form.Slider.Thumb thumb} to the given value.
            @param {Number} value The value
            @return {Ext.form.Slider.Thumb} The nearest thumb
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getPixelValue(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            @private
            might represent), this returns the pixel on the rendered slider that the thumb should be positioned at
            @param {Number} value The internal slider value
            @return {Number} The pixel value, rounded and relative to the left edge of the scroller
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getSliderValue(SharpKit.JavaScript.JsNumber,System.Object)">
            <summary>
            @private
            Maps a pixel value to a slider value. If we have a slider that is 200px wide, where minValue is 100 and maxValue is 500,
            passing a pixelValue of 38 will return a mapped value of 176
            @param {Number} pixelValue The pixel value, relative to the left edge of the slider
            @return {Number} The value based on slider units
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getThumb">
            <summary>
            Returns the Thumb instance bound to this Slider
            @return {Ext.form.Slider.Thumb} The thumb instance
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getThumbValue(System.Object)">
            <summary>
            @private
            Get the value for a draggable thumb.
            </summary>
        </member>
        <member name="M:Ext.form.Slider.getValue">
            <summary>
            Returns the current value of the Slider's thumb
            @return {Number} The thumb value
            </summary>
        </member>
        <member name="M:Ext.form.Slider.moveThumb(System.Object,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            @private
            Moves the thumb element. Should only ever need to be called from within {@link setValue}
            @param {Ext.form.Slider.Thumb} thumb The thumb to move
            @param {Number} pixel The pixel the thumb should be centered on
            @param {Boolean} animationDuration True to animationDuration the movement
            </summary>
        </member>
        <member name="M:Ext.form.Slider.onDrag(System.Object)">
            <summary>
            @private
            Fires drag events so the user can interact.
            </summary>
        </member>
        <member name="M:Ext.form.Slider.onTap(System.Object)">
            <summary>
            @private
            Updates the value of the nearest thumb on tap events
            </summary>
        </member>
        <member name="M:Ext.form.Slider.onThumbDragEnd(System.Object)">
            <summary>
            @private
            Updates a thumb after it has been dragged
            </summary>
        </member>
        <member name="M:Ext.form.Slider.renderThumbs">
            <summary>
            @private
            Creates an Ext.form.Slider.Thumb instance for each configured {@link values value}. Assumes that this.el is already present
            </summary>
        </member>
        <member name="M:Ext.form.Slider.setThumbsDisabled(System.Boolean)">
            <summary>
            @private
            Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
            on the param specified.
            @param {Boolean} disable True to disable, false to enable
            </summary>
        </member>
        <member name="M:Ext.form.Slider.setValue(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Sets the new value of the slider, constraining it within {@link minValue} and {@link maxValue}, and snapping to the nearest
            {@link increment} if set
            @param {Number} value The new value
            @param {Number} animationDuration Animation duration, 0 for no animation
            @param {Boolean} moveThumb Whether or not to move the thumb as well. Defaults to true
            @return {Ext.form.Slider} this This Slider
            </summary>
        </member>
        <member name="P:Ext.form.Slider.animationDuration">
            <summary>
            @cfg {Number} animationDuration When set to a number greater than 0, it will be the animation duration in ms, defaults to 200
            </summary>
        </member>
        <member name="P:Ext.form.Slider.increment">
            <summary>
            @cfg {Number} increment The increment by which to snap each thumb when its value changes. Defaults to 1. Any thumb movement
            will be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user tries to move
            the thumb to 67, it will be snapped to 70 instead)
            </summary>
        </member>
        <member name="P:Ext.form.Slider.inputCls">
            <summary>
            @cfg {String} inputCls Overrides {@link Ext.form.Field}'s inputCls. Defaults to 'x-slider'
            </summary>
        </member>
        <member name="P:Ext.form.Slider.inputType">
            <summary>
            @cfg {String} inputCls Overrides {@link Ext.form.Field}'s inputCls. Defaults to 'x-slider'
            </summary>
        </member>
        <member name="P:Ext.form.Slider.maxValue">
            <summary>
            @cfg {Number} maxValue The highest value any thumb on this slider can be set to (defaults to 100)
            </summary>
        </member>
        <member name="P:Ext.form.Slider.minValue">
            <summary>
            @cfg {Number} minValue The lowest value any thumb on this slider can be set to (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.Slider.monitorOrientation">
            <summary>
            @private
            @cfg {Number} trackWidth The current track width. Used when the field is hidden so setValue will continue to work (needs
            the fieldEls width).
            </summary>
        </member>
        <member name="P:Ext.form.Slider.ThumbsDisabled">
            <summary>
            @private
            Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
            on the param specified.
            @param {Boolean} disable True to disable, false to enable
            </summary>
        </member>
        <member name="P:Ext.form.Slider.trackWidth">
            <summary>
            @private
            @cfg {Number} trackWidth The current track width. Used when the field is hidden so setValue will continue to work (needs
            the fieldEls width).
            </summary>
        </member>
        <member name="P:Ext.form.Slider.ui">
            <summary>
            @class Ext.form.Slider
            @extends Ext.form.Field
            <p>Form component allowing a user to move a 'thumb' along a slider axis to choose a value. Sliders can equally be used outside
            of the context of a form. Example usage:</p>
            <pre><code>
            new Ext.form.FormPanel({
            items: [
            {
            xtype   : 'sliderfield',
            label   : 'Volume',
            value   : 5,
            minValue: 0,
            maxValue: 10
            }
            ]
            });
            </code></pre>
            Or as a standalone component:
            <pre><code>
            var slider = new Ext.form.Slider({
            value: 5,
            minValue: 0,
            maxValue: 10
            });
            slider.setValue(8); //will update the value and move the thumb;
            slider.getValue(); //returns 8
            </code></pre>
            @xtype sliderfield
            </summary>
        </member>
        <member name="P:Ext.form.Slider.value">
            <summary>
            @cfg {Number} value The value to initialize the thumb at (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.Slider.Value">
            <summary>
            Returns the current value of the Slider's thumb
            @return {Number} The thumb value
            </summary>
        </member>
        <member name="T:Ext.form.Slider.Thumb">
            <summary>
            @class Ext.form.Slider.Thumb
            @extends Ext.form.Field
            @xtype thumb
            @ignore
            Utility class used by Ext.form.Slider - should never need to be used directly.
            </summary>
        </member>
        <member name="M:Ext.form.Slider.Thumb.onRender">
            <summary>
            @cfg {Ext.form.Slider} slider The Slider that this thumb is attached to. Required
            </summary>
        </member>
        <member name="P:Ext.form.Slider.Thumb.baseCls">
            <summary>
            @class Ext.form.Slider.Thumb
            @extends Ext.form.Field
            @xtype thumb
            @ignore
            Utility class used by Ext.form.Slider - should never need to be used directly.
            </summary>
        </member>
        <member name="P:Ext.form.Slider.Thumb.isField">
            <summary>
            @class Ext.form.Slider.Thumb
            @extends Ext.form.Field
            @xtype thumb
            @ignore
            Utility class used by Ext.form.Slider - should never need to be used directly.
            </summary>
        </member>
        <member name="P:Ext.form.Slider.Thumb.value">
            <summary>
            @cfg {Number} value The value to initialize this thumb with (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.Slider.ThumbConfig.value">
            <summary>
            The value to initialize this thumb with (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.animationDuration">
            <summary>
            When set to a number greater than 0, it will be the animation duration in ms, defaults to 200
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.increment">
            <summary>
            The increment by which to snap each thumb when its value changes. Defaults to 1. Any thumb movement
            will be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user tries to move
            the thumb to 67, it will be snapped to 70 instead)
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.maxValue">
            <summary>
            The highest value any thumb on this slider can be set to (defaults to 100)
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.minValue">
            <summary>
            The lowest value any thumb on this slider can be set to (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.useClearIcon">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.value">
            <summary>
            The value to initialize the thumb at (defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.form.SliderConfig.values">
            <summary>
            The values to initialize each thumb with. One thumb will be created for each value. This configuration
            should always be defined but if it is not then it will be treated as though [0] was passed.
            *
            This is intentionally doc'd as private and is not fully supported/implemented yet.
            @private
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.form.Spinner" -->
        <member name="P:Ext.form.Spinner.accelerateOnTapHold">
            <summary>
            @cfg {Boolean} accelerateOnTapHold True if autorepeating should start slowly and accelerate.
            Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.autoCapitalize">
            <summary>
            @cfg {Boolean} autoCapitalize @hide
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.componentCls">
            <summary>
            @cfg {Boolean} useClearIcon @hide
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.cycle">
            <summary>
            @cfg {Boolean} cycle When set to true, it will loop the values of a minimum or maximum is reached.
            If the maximum value is reached, the value will be set to the minimum.
            If the minimum value is reached, the value will be set to the maximum.
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.disableInput">
            <summary>
            @cfg {Boolean} disableInput True to disable the input field, meaning that only the spinner buttons
            can be used. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.incrementValue">
            <summary>
            @cfg {Number} incrementValue Value that is added or subtracted from the current value when a spinner is used.
            Defaults to <tt>1</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.Spinner.useClearIcon">
            <summary>
            @cfg {Boolean} useClearIcon @hide
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.accelerateOnTapHold">
            <summary>
            True if autorepeating should start slowly and accelerate.
            Defaults to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.autoCapitalize">
            <summary>
            @hide
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.cycle">
            <summary>
            When set to true, it will loop the values of a minimum or maximum is reached.
            If the maximum value is reached, the value will be set to the minimum.
            If the minimum value is reached, the value will be set to the maximum.
            Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.disableInput">
            <summary>
            True to disable the input field, meaning that only the spinner buttons
            can be used. Defaults to <tt>false</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.incrementValue">
            <summary>
            Value that is added or subtracted from the current value when a spinner is used.
            Defaults to <tt>1</tt>.
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.maxValue">
            <summary>
            The maximum allowed value (defaults to Number.MAX_VALUE)
            </summary>
        </member>
        <member name="P:Ext.form.SpinnerConfig.minValue">
            <summary>
            The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)
            </summary>
        </member>
        <member name="T:Ext.form.TextArea">
            <summary>
            @class Ext.form.TextArea
            @extends Ext.form.Text
            <p>Wraps a textarea. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype textareafield
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.autoCapitalize">
            <summary>
            @cfg {Integer} maxRows The maximum number of lines made visible by the input.
            </summary>
        </member>
        <member name="P:Ext.form.TextArea.ui">
            <summary>
            @class Ext.form.TextArea
            @extends Ext.form.Text
            <p>Wraps a textarea. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
            @xtype textareafield
            </summary>
        </member>
        <member name="P:Ext.form.TextAreaConfig.maxRows">
            <summary>
            The maximum number of lines made visible by the input.
            </summary>
        </member>
        <member name="P:Ext.form.TextConfig.autoCapitalize">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.form.TextConfig.autoComplete">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.form.TextConfig.autoCorrect">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.form.TextConfig.focusCls">
            <summary>
            The CSS class to use when the field receives focus (defaults to 'x-field-focus')
            </summary>
        </member>
        <member name="P:Ext.form.TextConfig.placeHolder">
            <summary>
            A string value displayed in the input (if supported) when the control is empty.
            </summary>
        </member>
        <member name="T:Ext.form.TextField">
            <summary>
            @class Ext.form.TextField
            @extends Ext.form.Text
            @private
            @hidden
            DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
            </summary>
        </member>
        <member name="M:Ext.form.TextField.#ctor">
            <summary>
            @class Ext.form.TextField
            @extends Ext.form.Text
            @private
            @hidden
            DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
            </summary>
        </member>
        <member name="T:Ext.form.Toggle">
            <summary>
            @class Ext.form.Toggle
            @extends Ext.form.Slider
            <p>Specialized Slider with a single thumb and only two values. By default the toggle component can
            be switched between the values of 0 and 1.</p>
            @xtype togglefield
            </summary>
        </member>
        <member name="M:Ext.form.Toggle.onTap">
            <summary>
            @private
            Listener to the tap event, just toggles the value
            </summary>
        </member>
        <member name="M:Ext.form.Toggle.toggle">
            <summary>
            Toggles between the minValue (0 by default) and the maxValue (1 by default)
            </summary>
        </member>
        <member name="P:Ext.form.Toggle.maxValueCls">
            <summary>
            @cfg {String} maxValueCls CSS class added to the field when toggled to its maxValue
            </summary>
        </member>
        <member name="P:Ext.form.Toggle.minValue">
            <summary>
            @class Ext.form.Toggle
            @extends Ext.form.Slider
            <p>Specialized Slider with a single thumb and only two values. By default the toggle component can
            be switched between the values of 0 and 1.</p>
            @xtype togglefield
            </summary>
        </member>
        <member name="P:Ext.form.Toggle.minValueCls">
            <summary>
            @cfg {String} minValueCls CSS class added to the field when toggled to its minValue
            </summary>
        </member>
        <member name="P:Ext.form.ToggleConfig.maxValueCls">
            <summary>
            CSS class added to the field when toggled to its maxValue
            </summary>
        </member>
        <member name="P:Ext.form.ToggleConfig.minValueCls">
            <summary>
            CSS class added to the field when toggled to its minValue
            </summary>
        </member>
        <member name="P:Ext.form.ToggleConfig.useClearIcon">
            <summary>
            @hide
            </summary>
        </member>
        <member name="T:Ext.form.Url">
            <summary>
            @class Ext.form.Url
            @extends Ext.form.Text
            Wraps an HTML5 url field. See {@link Ext.form.FormPanel FormPanel} for example usage.
            @xtype urlfield
            </summary>
        </member>
        <member name="P:Ext.form.Url.inputType">
            <summary>
            @class Ext.form.Url
            @extends Ext.form.Text
            Wraps an HTML5 url field. See {@link Ext.form.FormPanel FormPanel} for example usage.
            @xtype urlfield
            </summary>
        </member>
        <member name="M:Ext.gesture.Drag.isHorizontal">
            <summary>
            Method to determine whether this Sortable is currently sorting.
            @return {Boolean} the sorting state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.gesture.Drag.isVertical">
            <summary>
            Method to determine whether this Sortable is currently disabled.
            @return {Boolean} the disabled state of this Sortable.
            </summary>
        </member>
        <member name="T:Ext.layout.AutoComponentLayout">
            <summary>
            @class Ext.layout.AutoComponentLayout
            @extends Ext.layout.ComponentLayout
            *
            <p>The AutoLayout is the default layout manager delegated by {@link Ext.Component} to
            render any child Elements when no <tt>{@link Ext.Component#layout layout}</tt> is configured.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.ComponentLayout">
            <summary>
            * @class Ext.layout.ComponentLayout
            * @extends Ext.layout.Layout
            * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Component#componentLayout layout}</b></tt>
            * configuration property.  See <tt><b>{@link Ext.Component#componentLayout}</b></tt> for additional details.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.Layout">
            <summary>
            @class Ext.layout.Layout
            @extends Object
            Base Layout class - extended by ComponentLayout and ContainerLayout
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.afterRemove(System.Object)">
            <summary>
            @private
            Removes itemCls
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.configureItem(System.Object,System.Object)">
            <summary>
            @private
            Applies itemCls
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.destroy">
            <summary>
            Destroys this layout. This is a template method that is empty by default, but should be implemented
            by subclasses that require explicit destruction to purge event handlers or remove DOM nodes.
            @protected
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.initLayout">
            <summary>
            @private
            Adds the layout's targetCls if necessary and sets
            initialized flag when complete.
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.layout">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.moveItem(System.Object,System.Object,System.Object)">
            <summary>
            @private
            Moved Component to the provided target instead.
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.renderItem(Ext.Component,SharpKit.JavaScript.JsNumber,Ext.Element)">
            <summary>
            @private
            Renders the given Component into the target Element.
            @param {Ext.Component} c The Component to render
            @param {Number} position The position within the target to render the item to
            @param {Ext.Element} target The target Element
            </summary>
        </member>
        <member name="M:Ext.layout.Layout.renderItems(System.Object,System.Object)">
            <summary>
            @private
            Iterates over all passed items, ensuring they are rendered.  If the items are already rendered,
            also determines if the items are in the proper place dom.
            </summary>
        </member>
        <member name="P:Ext.layout.Layout.isLayout">
            <summary>
            @class Ext.layout.Layout
            @extends Object
            Base Layout class - extended by ComponentLayout and ContainerLayout
            </summary>
        </member>
        <member name="M:Ext.layout.ComponentLayout.getTarget">
            <summary>
            Returns the owner component's resize element.
            @return {Ext.Element}
            </summary>
        </member>
        <member name="M:Ext.layout.ComponentLayout.needsLayout(System.Object,System.Object)">
            <summary>
            Check if the new size is different from the current size and only
            trigger a layout if it is necessary.
            @param {Mixed} width The new width to set.
            @param {Mixed} height The new height to set.
            </summary>
        </member>
        <member name="M:Ext.layout.ComponentLayout.setElementSize(System.Object,System.Object,System.Object)">
            <summary>
            Set the size of any element supporting undefined, null, and values.
            @param {Mixed} width The new width to set.
            @param {Mixed} height The new height to set.
            </summary>
        </member>
        <member name="M:Ext.layout.ComponentLayout.setTargetSize(System.Object,System.Object)">
            <summary>
            Set the size of the target element.
            @param {Mixed} width The new width to set.
            @param {Mixed} height The new height to set.
            </summary>
        </member>
        <member name="P:Ext.layout.ComponentLayout.type">
            <summary>
            * @class Ext.layout.ComponentLayout
            * @extends Ext.layout.Layout
            * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Component#componentLayout layout}</b></tt>
            * configuration property.  See <tt><b>{@link Ext.Component#componentLayout}</b></tt> for additional details.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.AutoComponentLayout.type">
            <summary>
            @class Ext.layout.AutoComponentLayout
            @extends Ext.layout.ComponentLayout
            *
            <p>The AutoLayout is the default layout manager delegated by {@link Ext.Component} to
            render any child Elements when no <tt>{@link Ext.Component#layout layout}</tt> is configured.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.AutoContainerLayout">
            <summary>
            @class Ext.layout.AutoContainerLayout
            @extends Ext.layout.ContainerLayout
            *
            <p>The AutoLayout is the default layout manager delegated by {@link Ext.Container} to
            render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
            a <tt>{@link Ext.Container Container}.</tt>.  AutoLayout provides only a passthrough of any layout calls
            to any child containers.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.ContainerLayout">
            <summary>
            * @class Ext.layout.ContainerLayout
            * @extends Ext.layout.Layout
            * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            * configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.getLayoutItems">
            <summary>
            Returns an array of child components.
            @return {Array} of child components
            </summary>
        </member>
        <member name="M:Ext.layout.ContainerLayout.getTarget">
            <summary>
            Returns the owner component's resize element.
            @return {Ext.Element}
            </summary>
        </member>
        <member name="P:Ext.layout.ContainerLayout.LayoutItems">
            <summary>
            Returns an array of child components.
            @return {Array} of child components
            </summary>
        </member>
        <member name="P:Ext.layout.ContainerLayout.type">
            <summary>
            * @class Ext.layout.ContainerLayout
            * @extends Ext.layout.Layout
            * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
            * configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.AutoContainerLayout.type">
            <summary>
            @class Ext.layout.AutoContainerLayout
            @extends Ext.layout.ContainerLayout
            *
            <p>The AutoLayout is the default layout manager delegated by {@link Ext.Container} to
            render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
            a <tt>{@link Ext.Container Container}.</tt>.  AutoLayout provides only a passthrough of any layout calls
            to any child containers.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.BoxLayout">
            <summary>
            @class Ext.layout.BoxLayout
            @extends Ext.layout.ContainerLayout
            <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
            </summary>
        </member>
        <member name="M:Ext.layout.BoxLayout.onLayout">
            <summary>
            @private
            Runs the child box calculations and caches them in childBoxCache. Subclasses can used these cached values
            when laying out
            </summary>
        </member>
        <member name="P:Ext.layout.BoxLayout.direction">
            <summary>
            @cfg {String} direction Specifies the direction in which child components are laid out. Defaults
            to <tt>'normal'</tt>, which means they are laid out in the order they are added. You can use the
            <tt>'reverse'</tt> option to have them laid out in reverse.
            </summary>
        </member>
        <member name="P:Ext.layout.BoxLayout.type">
            <summary>
            @class Ext.layout.BoxLayout
            @extends Ext.layout.ContainerLayout
            <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.BoxLayoutConfig.direction">
            <summary>
            Specifies the direction in which child components are laid out. Defaults
            to <tt>'normal'</tt>, which means they are laid out in the order they are added. You can use the
            <tt>'reverse'</tt> option to have them laid out in reverse.
            </summary>
        </member>
        <member name="T:Ext.layout.CardLayout">
            <summary>
            @class Ext.layout.CardLayout
            @extends Ext.layout.FitLayout
            <p>This layout manages multiple child Components, each is fit to the Container, where only a single child Component
            can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
            the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
            so that functionality must be provided by the developer.</p>
            <p>Containers that are configured with a card layout will have a method setActiveItem dynamically added to it.
            <pre><code>
            var p = new Ext.Panel({
            fullscreen: true,
            layout: 'card',
            items: [{
            html: 'Card 1'
            },{
            html: 'Card 2'
            }]
            });
            p.setActiveItem(1);
            </code></pre>
            </p>
            </summary>
        </member>
        <member name="T:Ext.layout.FitLayout">
            <summary>
            @class Ext.layout.FitLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.FitLayout.itemCls">
            <summary>
            @class Ext.layout.FitLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.FitLayout.targetCls">
            <summary>
            @class Ext.layout.FitLayout
            @extends Ext.layout.ContainerLayout
            <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
            config, and should generally not need to be created directly via the new keyword.</p>
            <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.</p>
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.getActiveItem">
            <summary>
            Return the active (visible) component in the layout.
            @returns {Ext.Component}
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.getNext(System.Object)">
            <summary>
            Return the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
            card when the end of the stack is reached.
            @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
            @returns {Ext.Component}
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.getPrev(System.Object)">
            <summary>
            Return the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
            the last card when the beginning of the stack is reached.
            @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
            @returns {Ext.Component}
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.next(System.Object,System.Object)">
            <summary>
            Sets the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
            card when the end of the stack is reached.
            @param {Mixed} anim Animation to use for the card transition
            @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.prev(System.Object,System.Object)">
            <summary>
            Sets the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
            the last card when the beginning of the stack is reached.
            @param {Mixed} anim Animation to use for the card transition
            @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
            </summary>
        </member>
        <member name="M:Ext.layout.CardLayout.setActiveItem(System.Object,System.Object)">
            <summary>
            Sets the active (visible) item in the layout.
            @param {String/Number} item The string component id or numeric index of the item to activate
            </summary>
        </member>
        <member name="P:Ext.layout.CardLayout.type">
            <summary>
            @class Ext.layout.CardLayout
            @extends Ext.layout.FitLayout
            <p>This layout manages multiple child Components, each is fit to the Container, where only a single child Component
            can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
            and should generally not need to be created directly via the new keyword.</p>
            <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
            the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
            so that functionality must be provided by the developer.</p>
            <p>Containers that are configured with a card layout will have a method setActiveItem dynamically added to it.
            <pre><code>
            var p = new Ext.Panel({
            fullscreen: true,
            layout: 'card',
            items: [{
            html: 'Card 1'
            },{
            html: 'Card 2'
            }]
            });
            p.setActiveItem(1);
            </code></pre>
            </p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.layout.ContainerLayoutConfig.itemCls" -->
        <member name="T:Ext.layout.DockLayout">
            <summary>
            @class Ext.layout.DockLayout
            @extends Ext.layout.ComponentLayout
            This ComponentLayout handles docking for Panels. It takes care of panels that are
            part of a ContainerLayout that sets this Panel's size and Panels that are part of
            an AutoContainerLayout in which this panel get his height based of the CSS or
            or its content.
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.adjustAutoBox(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            @protected
            This method will adjust the position of the docked item inside an AutoContainerLayout
            and adjust the body box accordingly.
            @param {Object} box The box containing information about the width and height
            of this docked item
            @param {Number} index The index position of this docked item
            @return {Object} The adjusted box
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.adjustSizedBox(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            @protected
            This method will adjust the position of the docked item and adjust the body box
            accordingly.
            @param {Object} box The box containing information about the width and height
            of this docked item
            @param {Number} index The index position of this docked item
            @return {Object} The adjusted box
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.calculateDockBoxes(SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            @protected
            This method will set up some initial information about the panel size and bodybox
            and then loop over all the items you pass it to take care of stretching, aligning,
            dock position and all calculations involved with adjusting the body box.
            @param {Array} items Array containing all the docked items we have to layout
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.configureItem(Ext.Component,System.Object)">
            <summary>
            @protected
            We are overriding the Ext.layout.Layout configureItem method to also add a class that
            indicates the position of the docked item. We use the itemCls (x-docked) as a prefix.
            An example of a class added to a dock: right item is x-docked-right
            @param {Ext.Component} item The item we are configuring
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.dockItems(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            @protected
            This method will first update all the information about the docked items,
            body dimensions and position, the panel's total size. It will then
            set all these values on the docked items and panel body.
            @param {Array} items Array containing all the docked items
            @param {Boolean} autoBoxes Set this to true if the Panel is part of an
            AutoContainerLayout
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.getLayoutItems">
            <summary>
            @protected
            Returns an array containing all the docked items inside this layout's owner panel
            @return {Array} An array containing all the docked items of the Panel
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.initBox(Ext.Component)">
            <summary>
            @protected
            This method will create a box object, with a reference to the item, the type of dock
            (top, left, bottom, right). It will also take care of stretching and aligning of the
            docked items.
            @param {Ext.Component} item The docked item we want to initialize the box for
            @return {Object} The initial box containing width and height and other useful information
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.onLayout(Ext.Component,Ext.Element)">
            <summary>
            @protected
            @param {Ext.Component} owner The Panel that owns this DockLayout
            @param {Ext.Element} target The target in which we are going to render the docked items
            @param {Array} args The arguments passed to the ComponentLayout.layout method
            </summary>
        </member>
        <member name="M:Ext.layout.DockLayout.setBodyBox(System.Object)">
            <summary>
            @protected
            This function will be called by the dockItems method. Since the body is positioned absolute,
            we need to give it dimensions and a position so that it is in the middle surrounded by
            docked items
            @param {Object} box An object containing new x, y, width and height values for the
            Panel's body
            </summary>
        </member>
        <member name="P:Ext.layout.DockLayout.BodyBox">
            <summary>
            @protected
            This function will be called by the dockItems method. Since the body is positioned absolute,
            we need to give it dimensions and a position so that it is in the middle surrounded by
            docked items
            @param {Object} box An object containing new x, y, width and height values for the
            Panel's body
            </summary>
        </member>
        <member name="P:Ext.layout.DockLayout.itemCls">
            <summary>
            @property itemCls
            @type String
            This class is automatically added to each docked item within this layout.
            We also use this as a prefix for the position class e.g. x-docked-bottom
            </summary>
        </member>
        <member name="P:Ext.layout.DockLayout.LayoutItems">
            <summary>
            @protected
            Returns an array containing all the docked items inside this layout's owner panel
            @return {Array} An array containing all the docked items of the Panel
            </summary>
        </member>
        <member name="P:Ext.layout.DockLayout.type">
            <summary>
            @class Ext.layout.DockLayout
            @extends Ext.layout.ComponentLayout
            This ComponentLayout handles docking for Panels. It takes care of panels that are
            part of a ContainerLayout that sets this Panel's size and Panels that are part of
            an AutoContainerLayout in which this panel get his height based of the CSS or
            or its content.
            </summary>
        </member>
        <member name="T:Ext.layout.FieldLayout">
            <summary>
            @class Ext.layout.FieldLayout
            @extends Ext.layout.ComponentLayout
            *
            <p>The FieldLayout is the default layout manager delegated by {@link Ext.Field} to
            render field Elements.</p>
            </summary>
        </member>
        <member name="P:Ext.layout.FieldLayout.type">
            <summary>
            @class Ext.layout.FieldLayout
            @extends Ext.layout.ComponentLayout
            *
            <p>The FieldLayout is the default layout manager delegated by {@link Ext.Field} to
            render field Elements.</p>
            </summary>
        </member>
        <member name="T:Ext.layout.HBoxLayout">
            <summary>
            @class Ext.layout.HBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
            space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
            distributes width after any items with explicit widths have been accounted for. In the code below, the width is calculated
            as follows:
            <ul>
            <li>The fixed width item is subtracted, leaving us with 300 width</li>
            <li>The total flex number is counted, in this case, it is 3</li>
            <li>The ratio is then calculated, 300 / 3 = 100</li>
            <li>The first item has a flex of 2, so it is set to 2 * 100</li>
            <li>The other remaining item is set to 1 * 100</li>
            </ul></p>
            <pre><code>
            new Ext.Container({
            width: 400,
            height: 300,
            layout: {
            type: 'hbox',
            align: 'stretch'
            },
            items: [{
            flex: 2,
            html: 'First'
            },{
            width: 100,
            html: 'Second'
            },{
            flex: 1,
            html: 'Third'
            }]
            });
            </code></pre>
            This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="P:Ext.layout.HBoxLayout.orientation">
            <summary>
            @class Ext.layout.HBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
            space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
            distributes width after any items with explicit widths have been accounted for. In the code below, the width is calculated
            as follows:
            <ul>
            <li>The fixed width item is subtracted, leaving us with 300 width</li>
            <li>The total flex number is counted, in this case, it is 3</li>
            <li>The ratio is then calculated, 300 / 3 = 100</li>
            <li>The first item has a flex of 2, so it is set to 2 * 100</li>
            <li>The other remaining item is set to 1 * 100</li>
            </ul></p>
            <pre><code>
            new Ext.Container({
            width: 400,
            height: 300,
            layout: {
            type: 'hbox',
            align: 'stretch'
            },
            items: [{
            flex: 2,
            html: 'First'
            },{
            width: 100,
            html: 'Second'
            },{
            flex: 1,
            html: 'Third'
            }]
            });
            </code></pre>
            This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="P:Ext.layout.HBoxLayoutConfig.align">
            <summary>
            Specifies the vertical alignment of child components. Defaults to <tt>'center'</tt>. Acceptable values are:
            <ul>
            <li><b>center</b> : <div class="sub-desc">
            Aligned to the center of the container.
            </div></li>
            <li><b>end</b> : <div class="sub-desc">
            Aligned to the bottom of the container.
            </div></li>
            <li><b>start</b> : <div class="sub-desc">
            Aligned to the top of the container.
            </div></li>
            <li><b>stretch</b> : <div class="sub-desc">
            Components are stretched vertically to fill the container.
            </div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.layout.HBoxLayoutConfig.pack">
            <summary>
            Specifies the horizontal alignment of child components. Defaults to <tt>'start'</tt>. Acceptable values are:
            <ul>
            <li><b>center</b> : <div class="sub-desc">
            Aligned to the center of the container.
            </div></li>
            <li><b>end</b> : <div class="sub-desc">
            Aligned to the right of the container.
            </div></li>
            <li><b>justify</b> : <div class="sub-desc">
            Justified with both the left and right of the container.
            </div></li>
            <li><b>start</b> : <div class="sub-desc">
            Aligned to the left of the container.
            </div></li>
            </ul>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.layout.LayoutManager" -->
        <member name="T:Ext.layout.VBoxLayout">
            <summary>
            @class Ext.layout.VBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
            space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
            distributes height after any items with explicit heights have been accounted for. In the code below, the height is calculated
            as follows:
            <ul>
            <li>The fixed height item is subtracted, leaving us with 300 height</li>
            <li>The total flex number is counted, in this case, it is 3</li>
            <li>The ratio is then calculated, 300 / 3 = 100</li>
            <li>The first item has a flex of 2, so it is set to 2 * 100</li>
            <li>The other remaining item is set to 1 * 100</li>
            </ul></p>
            <pre><code>
            new Ext.Container({
            width: 300,
            height: 400,
            layout: {
            type: 'vbox',
            align: 'stretch'
            },
            items: [{
            flex: 2,
            html: 'First'
            },{
            width: 100,
            html: 'Second'
            },{
            flex: 1,
            html: 'Third'
            }]
            });
            </code></pre>
            This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayout.orientation">
            <summary>
            @class Ext.layout.VBoxLayout
            @extends Ext.layout.BoxLayout
            <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
            space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
            distributes height after any items with explicit heights have been accounted for. In the code below, the height is calculated
            as follows:
            <ul>
            <li>The fixed height item is subtracted, leaving us with 300 height</li>
            <li>The total flex number is counted, in this case, it is 3</li>
            <li>The ratio is then calculated, 300 / 3 = 100</li>
            <li>The first item has a flex of 2, so it is set to 2 * 100</li>
            <li>The other remaining item is set to 1 * 100</li>
            </ul></p>
            <pre><code>
            new Ext.Container({
            width: 300,
            height: 400,
            layout: {
            type: 'vbox',
            align: 'stretch'
            },
            items: [{
            flex: 2,
            html: 'First'
            },{
            width: 100,
            html: 'Second'
            },{
            flex: 1,
            html: 'Third'
            }]
            });
            </code></pre>
            This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayoutConfig.align">
            <summary>
            Specifies the horizontal alignignment of child components. Defaults to <tt>'center'</tt>. Acceptable values are:
            <ul>
            <li><b>center</b> : <div class="sub-desc">
            Aligned to the center of the container.
            </div></li>
            <li><b>end</b> : <div class="sub-desc">
            Aligned to the right of the container.
            </div></li>
            <li><b>start</b> : <div class="sub-desc">
            Aligned to the left of the container.
            </div></li>
            <li><b>stretch</b> : <div class="sub-desc">
            Components are stretched horizontally to fill the container.
            </div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.layout.VBoxLayoutConfig.pack">
            <summary>
            Specifies the vertical alignment of child components. Defaults to <tt>'start'</tt>. Acceptable values are:
            <ul>
            <li><b>center</b> : <div class="sub-desc">
            Aligned to the center of the container.
            </div></li>
            <li><b>end</b> : <div class="sub-desc">
            Aligned to the bottom of the container.
            </div></li>
            <li><b>justify</b> : <div class="sub-desc">
            Justified with both the top and bottom of the container.
            </div></li>
            <li><b>start</b> : <div class="sub-desc">
            Aligned to the top of the container.
            </div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.baseCls">
            <summary>
            The base CSS class to apply to this components's element. This will also be prepended to
            elements within this component like Panel's body will get a class x-panel-body. This means
            that if you create a subclass of Panel, and you want it to get all the Panels styling for the
            element and the body, you leave the baseCls x-panel and use componentCls to add specific styling for this
            component.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.border">
            <summary>
            Specifies the border for this component. The border can be a single numeric value to apply to all sides or
            it can be a CSS style specification for each style, for example: '10 5 3 10'.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be
            useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.componentCls">
            <summary>
            CSS Class to be added to a components root level element to give distinction to it
            via styling.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.lib.ComponentConfig.componentLayout" -->
        <member name="P:Ext.lib.ComponentConfig.contentEl">
            <summary>
            <p>Optional. Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as the content
            for this component.</p>
            <ul>
            <li><b>Description</b> :
            <div class="sub-desc">This config option is used to take an existing HTML element and place it in the layout element
            of a new component (it simply moves the specified DOM element <i>after the Component is rendered</i> to use as the content.</div></li>
            <li><b>Notes</b> :
            <div class="sub-desc">The specified HTML element is appended to the layout element of the component <i>after any configured
            {@link #html HTML} has been inserted</i>, and so the document will not contain this element at the time the {@link #render} event is fired.</div>
            <div class="sub-desc">The specified HTML element used will not participate in any <code><b>{@link Ext.Container#layout layout}</b></code>
            scheme that the Component may use. It is just HTML. Layouts operate on child <code><b>{@link Ext.Container#items items}</b></code>.</div>
            <div class="sub-desc">Add either the <code>x-hidden</code> or the <code>x-hide-display</code> CSS class to
            prevent a brief flicker of the content before it is rendered to the panel.</div></li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.data">
            <summary>
            The initial set of data to apply to the <code>{@link #tpl}</code> to
            update the content area of the Component.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.disabled">
            <summary>
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.disabledCls">
            <summary>
            CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.draggable">
            <summary>
            Allows the component to be dragged via the touch event.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.floating">
            <summary>
            Create the Component as a floating and use absolute positioning.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.height">
            <summary>
            The height of this component in pixels.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.hidden">
            <summary>
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.html">
            <summary>
            An HTML fragment, or a {@link Ext.DomHelper DomHelper} specification to use as the layout element
            content (defaults to ''). The HTML content is added after the component is rendered,
            so the document will not contain this HTML at the time the {@link #render} event is fired.
            This content is inserted into the body <i>before</i> any configured {@link #contentEl} is appended.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.margin">
            <summary>
            Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or
            it can be a CSS style specification for each style, for example: '10 5 3 10'.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.maxHeight">
            <summary>
            <p>The maximum value in pixels which this Component will set its height to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.maxWidth">
            <summary>
            <p>The maximum value in pixels which this Component will set its width to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.minHeight">
            <summary>
            <p>The minimum value in pixels which this Component will set its height to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.minWidth">
            <summary>
            <p>The minimum value in pixels which this Component will set its width to.</p>
            <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.padding">
            <summary>
            Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or
            it can be a CSS style specification for each style, for example: '10 5 3 10'.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.plugins">
            <summary>
            An object or array of objects that will provide custom functionality for this component.  The only
            requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.
            When a component is created, if any plugins are available, the component will call the init method on each
            plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the
            component as needed to provide its functionality.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.lib.ComponentConfig.renderSelectors" -->
        <member name="P:Ext.lib.ComponentConfig.renderTo">
            <summary>
            <p>Specify the id of the element, a DOM element or an existing Element that this component
            will be rendered into.</p><div><ul>
            <li><b>Notes</b> : <ul>
            <div class="sub-desc">Do <u>not</u> use this option if the Component is to be a child item of
            a {@link Ext.Container Container}. It is the responsibility of the
            {@link Ext.Container Container}'s {@link Ext.Container#layout layout manager}
            to render and manage its child items.</div>
            <div class="sub-desc">When using this config, a call to render() is not required.</div>
            </ul></li>
            </ul></div>
            <p>See <code>{@link #render}</code> also.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.renderTpl">
            <summary>
            <p>An {@link Ext.XTemplate XTemplate} used to create the internal structure inside this Component's
            encapsulating {@link #getEl Element}.</p>
            <p>You do not normally need to specify this. For the base classes {@link Ext.Component}
            and {@link Ext.Container}, this defaults to <b><code>null</code></b> which means that they will be initially rendered
            with no internal structure; they render their {@link #getEl Element} empty. The more specialized ExtJS and Touch classes
            which use a more complex DOM structure, provide their own template definitions.</p>
            <p>This is intended to allow the developer to create application-specific utility Components with customized
            internal structure.</p>
            <p>Upon rendering, any created child elements may be automatically imported into object properties using the
            {@link #renderSelectors} option.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.style">
            <summary>
            A custom style specification to be applied to this component's Element.  Should be a valid argument to
            {@link Ext.Element#applyStyles}.
            <pre><code>
            new Ext.Panel({
            title: 'Some Title',
            renderTo: Ext.getBody(),
            width: 400, height: 300,
            layout: 'form',
            items: [{
            xtype: 'textareafield',
            style: {
            width: '95%',
            marginBottom: '10px'
            }
            },
            new Ext.Button({
            text: 'Send',
            minWidth: '100',
            style: {
            marginBottom: '10px'
            }
            })
            ]
            });
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.styleHtmlCls">
            <summary>
            The class that is added to the content target when you set styleHtmlContent to true.
            Defaults to 'x-html'
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.styleHtmlContent">
            <summary>
            True to automatically style the html inside the content target of this component (body for panels).
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.tpl">
            <summary>
            An <bold>{@link Ext.Template}</bold>, <bold>{@link Ext.XTemplate}</bold>
            or an array of strings to form an Ext.XTemplate.
            Used in conjunction with the <code>{@link #data}</code> and
            <code>{@link #tplWriteMode}</code> configurations.
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.tplWriteMode">
            <summary>
            The Ext.(X)Template method to use when
            updating the content area of the Component. Defaults to <code>'overwrite'</code>
            (see <code>{@link Ext.XTemplate#overwrite}</code>).
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.ui">
            <summary>
            A set of predefined ui styles for individual components.
            *
            Most components support 'light' and 'dark'.
            *
            Extra string added to the baseCls with an extra '-'.
            <pre><code>
            new Ext.Panel({
            title: 'Some Title',
            baseCls: 'x-component'
            ui: 'green'
            });
            </code></pre>
            <p>The ui configuration in this example would add 'x-component-green' as an additional class.</p>
            </summary>
        </member>
        <member name="P:Ext.lib.ComponentConfig.width">
            <summary>
            The width of this component in pixels.
            </summary>
        </member>
        <member name="P:Ext.lib.ContainerConfig.activeItem">
            <summary>
            A string component id or the numeric index of the component that should be initially activated within the
            container's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first
            item in the container's collection).  activeItem only applies to layout styles that can display
            items one at a time (like {@link Ext.layout.CardLayout} and
            {@link Ext.layout.FitLayout}).  Related to {@link Ext.layout.ContainerLayout#activeItem}.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.lib.ContainerConfig.bubbleEvents" -->
        <member name="P:Ext.lib.ContainerConfig.defaults">
            <summary>
            <p>This option is a means of applying default settings to all added items whether added through the {@link #items}
            config or via the {@link #add} or {@link #insert} methods.</p>
            <p>If an added item is a config object, and <b>not</b> an instantiated Component, then the default properties are
            unconditionally applied. If the added item <b>is</b> an instantiated Component, then the default properties are
            applied conditionally so as not to override existing properties in the item.</p>
            <p>If the defaults option is specified as a function, then the function will be called using this Container as the
            scope (<code>this</code> reference) and passing the added item as the first parameter. Any resulting object
            from that call is then applied to the item as default properties.</p>
            <p>For example, to automatically apply padding to the body of each of a set of
            contained {@link Ext.Panel} items, you could pass: <code>defaults: {bodyStyle:'padding:15px'}</code>.</p>
            <p>Usage:</p><pre><code>
            defaults: {               // defaults are applied to items, not the container
            autoScroll:true
            },
            items: [
            {
            xtype: 'panel',   // defaults <b>do not</b> have precedence over
            id: 'panel1',     // options in config objects, so the defaults
            autoScroll: false // will not be applied here, panel1 will be autoScroll:false
            },
            new Ext.Panel({       // defaults <b>do</b> have precedence over options
            id: 'panel2',     // options in components, so the defaults
            autoScroll: false // will be applied here, panel2 will be autoScroll:true.
            })
            ]
            </code></pre>
            </summary>
        </member>
        <member name="P:Ext.lib.ContainerConfig.items">
            <summary>
            <pre><b>** IMPORTANT</b>: be sure to <b>{@link #layout specify a <code>layout</code>} if needed ! **</b></pre>
            <p>A single item, or an array of child Components to be added to this container,
            for example:</p>
            <pre><code>
            // specifying a single item
            items: {...},
            layout: 'fit',    // specify a layout!
            // specifying multiple items
            items: [{...}, {...}],
            layout: 'hbox', // specify a layout!
            </code></pre>
            <p>Each item may be:</p>
            <div><ul class="mdetail-params">
            <li>any type of object based on {@link Ext.Component}</li>
            <li>a fully instanciated object or</li>
            <li>an object literal that:</li>
            <div><ul class="mdetail-params">
            <li>has a specified <code>{@link Ext.Component#xtype xtype}</code></li>
            <li>the {@link Ext.Component#xtype} specified is associated with the Component
            desired and should be chosen from one of the available xtypes as listed
            in {@link Ext.Component}.</li>
            <li>If an <code>{@link Ext.Component#xtype xtype}</code> is not explicitly
            specified, the {@link #defaultType} for that Container is used.</li>
            <li>will be "lazily instanciated", avoiding the overhead of constructing a fully
            instanciated Component object</li>
            </ul></div></ul></div>
            <p><b>Notes</b>:</p>
            <div><ul class="mdetail-params">
            <li>Ext uses lazy rendering. Child Components will only be rendered
            should it become necessary. Items are automatically laid out when they are first
            shown (no sizing is done while hidden), or in response to a {@link #doLayout} call.</li>
            <li>Do not specify <code>{@link Ext.Panel#contentEl contentEl}</code>/
            <code>{@link Ext.Panel#html html}</code> with <code>items</code>.</li>
            </ul></div>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.lib.ContainerConfig.layout" -->
        <member name="P:Ext.lib.PanelConfig.baseCls">
            <summary>
            The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
            </summary>
        </member>
        <member name="P:Ext.lib.PanelConfig.bodyBorder">
            <summary>
            A shortcut for setting a border style on the body element. The value can either be
            a number to be applied to all sides, or a normal css string describing borders.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.lib.PanelConfig.bodyMargin">
            <summary>
            A shortcut for setting a margin style on the body element. The value can either be
            a number to be applied to all sides, or a normal css string describing margins.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.lib.PanelConfig.bodyPadding">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be
            a number to be applied to all sides, or a normal css string describing padding.
            Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="T:Ext.plugins.ListPagingPlugin">
            <summary>
            @class Ext.plugins.ListPagingPlugin
            @extends Ext.util.Observable
            Adds a Load More button at the bottom of the list. When the user presses this button,
            the next page of data will be loaded into the store and appended to the List.
            </summary>
        </member>
        <member name="M:Ext.plugins.ListPagingPlugin.init(System.Object)">
            <summary>
            @cfg {String} loadMoreText The text used as the label of the Load More button.
            </summary>
        </member>
        <member name="M:Ext.plugins.ListPagingPlugin.onPagingTap(System.Object)">
            <summary>
            Here we listen for taps on the loadingEl and load the store's next page. Adding the 'x-loading' class to the
            loadingEl hides the 'Load next page' text.
            </summary>
        </member>
        <member name="P:Ext.plugins.ListPagingPlugin.autoPaging">
            <summary>
            @cfg {Boolean} autoPaging True to automatically load the next page when you scroll to the bottom of the list.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.plugins.ListPagingPlugin.loadMoreText">
            <summary>
            @cfg {String} loadMoreText The text used as the label of the Load More button.
            </summary>
        </member>
        <member name="P:Ext.plugins.ListPagingPluginConfig.autoPaging">
            <summary>
            True to automatically load the next page when you scroll to the bottom of the list.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.plugins.ListPagingPluginConfig.loadMoreText">
            <summary>
            The text used as the label of the Load More button.
            </summary>
        </member>
        <member name="T:Ext.plugins.PullRefreshPlugin">
            <summary>
            @class Ext.plugins.ListPagingPlugin
            @extends Ext.util.Observable
            This plugin adds pull to refresh functionality to the List.
            </summary>
        </member>
        <member name="M:Ext.plugins.PullRefreshPlugin.onBeforeLoad">
            <summary>
            This function makes sure that the List's LoadMask is not shown when the list is being reloaded by
            this plugin.
            @private
            </summary>
        </member>
        <member name="M:Ext.plugins.PullRefreshPlugin.onListUpdate">
            <summary>
            This function renders the pull to refresh markup into the list if it doesnt exist yet. It also makes sure
            that the pull to refresh element is inserted to the beginning of the list again after the List items have
            been updated.
            @private
            </summary>
        </member>
        <member name="M:Ext.plugins.PullRefreshPlugin.onLoadComplete">
            <summary>
            This function is called after the List has been refreshed. It resets the Pull to Refresh markup and
            updates the last updated date. It also animates the pull to refresh markup away.
            @private
            </summary>
        </member>
        <member name="M:Ext.plugins.PullRefreshPlugin.render">
            <summary>
            This function renders the pull to refresh markup into the list and binds listeners to the scroller.
            @private
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPlugin.loadingText">
            <summary>
            @cfg {String} pullRefreshText The text that will be shown while the list is refreshing.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPlugin.pullRefreshText">
            <summary>
            @cfg {String} pullRefreshText The text that will be shown while you are pulling down.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPlugin.refreshFn">
            <summary>
            @cfg {Function} refreshFn The function that will be called to refresh the list. If this is not defined, the store's load
            function will be called. The refresh function gets called with two parameters. The first one is the callback function
            that should be called after your refresh is complete. The second one is a reference to this plugin instance.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPlugin.releaseRefreshText">
            <summary>
            @cfg {String} pullRefreshText The text that will be shown after you have pulled down enough to show the release message.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPlugin.snappingAnimationDuration">
            <summary>
            @cfg {String} snappingAnimationDuration The duration for snapping back animation after the data has been refreshed
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPluginConfig.pullTpl">
            <summary>
            The template being used for the pull to refresh markup.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPluginConfig.refreshFn">
            <summary>
            The function that will be called to refresh the list. If this is not defined, the store's load
            function will be called. The refresh function gets called with two parameters. The first one is the callback function
            that should be called after your refresh is complete. The second one is a reference to this plugin instance.
            </summary>
        </member>
        <member name="P:Ext.plugins.PullRefreshPluginConfig.snappingAnimationDuration">
            <summary>
            The duration for snapping back animation after the data has been refreshed
            </summary>
        </member>
        <member name="M:Ext.util.Date.getElapsed(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsDate)">
            <summary>
            Returns the number of milliseconds between two dates
            @param {Date} dateA
            @param {Date} dateB (optional) Defaults to now
            @return {Number} The diff in milliseconds
            </summary>
        </member>
        <member name="T:Ext.util.DelayedTask">
            <summary>
            @class Ext.util.DelayedTask
            <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
            performing setTimeout where a new timeout cancels the old timeout. When called, the
            task will wait the specified time period before executing. If durng that time period,
            the task is called again, the original call will be cancelled. This continues so that
            the function is only called a single time for each iteration.</p>
            <p>This method is especially useful for things like detecting whether a user has finished
            typing in a text field. An example would be performing validation on a keypress. You can
            use this class to buffer the keypress events for a certain number of milliseconds, and
            perform only if they stop for that amount of time.  Usage:</p><pre><code>
            var task = new Ext.util.DelayedTask(function(){
            alert(Ext.getDom('myInputField').value.length);
            });
            // Wait 500ms before calling our function. If the user presses another key
            // during that 500ms, it will be cancelled and we'll wait another 500ms.
            Ext.get('myInputField').on('keypress', function(){
            task.{@link #delay}(500);
            });
            </code></pre>
            <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
            option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
            also setup a delayed task for you to buffer events.</p>
            @constructor The parameters to this constructor serve as defaults and are not required.
            @param {Function} fn (optional) The default function to call.
            @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
            function is called. If not specified, <code>this</code> will refer to the browser window.
            @param {Array} args (optional) The default Array of arguments.
            </summary>
        </member>
        <member name="M:Ext.util.DelayedTask.#ctor(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            @class Ext.util.DelayedTask
            <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
            performing setTimeout where a new timeout cancels the old timeout. When called, the
            task will wait the specified time period before executing. If durng that time period,
            the task is called again, the original call will be cancelled. This continues so that
            the function is only called a single time for each iteration.</p>
            <p>This method is especially useful for things like detecting whether a user has finished
            typing in a text field. An example would be performing validation on a keypress. You can
            use this class to buffer the keypress events for a certain number of milliseconds, and
            perform only if they stop for that amount of time.  Usage:</p><pre><code>
            var task = new Ext.util.DelayedTask(function(){
            alert(Ext.getDom('myInputField').value.length);
            });
            // Wait 500ms before calling our function. If the user presses another key
            // during that 500ms, it will be cancelled and we'll wait another 500ms.
            Ext.get('myInputField').on('keypress', function(){
            task.{@link #delay}(500);
            });
            </code></pre>
            <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
            option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
            also setup a delayed task for you to buffer events.</p>
            @constructor The parameters to this constructor serve as defaults and are not required.
            @param {Function} fn (optional) The default function to call.
            @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
            function is called. If not specified, <code>this</code> will refer to the browser window.
            @param {Array} args (optional) The default Array of arguments.
            </summary>
        </member>
        <member name="T:Ext.util.Dispatcher">
            <summary>
            @author Ed Spencer
            @class Ext.util.Dispatcher
            @extends Ext.util.Observable
            <p>The Dispatcher class is used to send requests through to a controller action. Usually, only a single Dispatcher
            is required on the page, and by default a single instance is already created - {@link Ext.Dispatcher}. See the
            {@link Ext.Dispatcher Dispatcher docs} for details on how this works.</p>
            @constructor
            </summary>
        </member>
        <member name="M:Ext.util.Dispatcher.#ctor(System.Object)">
            <summary>
            @author Ed Spencer
            @class Ext.util.Dispatcher
            @extends Ext.util.Observable
            <p>The Dispatcher class is used to send requests through to a controller action. Usually, only a single Dispatcher
            is required on the page, and by default a single instance is already created - {@link Ext.Dispatcher}. See the
            {@link Ext.Dispatcher Dispatcher docs} for details on how this works.</p>
            @constructor
            </summary>
        </member>
        <member name="M:Ext.util.Dispatcher.createRedirect(System.Object)">
            <summary>
            Convenience method which returns a function that calls Ext.Dispatcher.redirect. Useful when setting
            up several listeners that should redirect, e.g.:
            <pre><code>
            myComponent.on({
            homeTap : Ext.Dispatcher.createRedirect('home'),
            inboxTap: Ext.Dispatcher.createRedirect('inbox'),
            });
            </code></pre>
            @param {String/Object} url The url to create the redirect function for
            @return {Function} The redirect function
            </summary>
        </member>
        <member name="M:Ext.util.Dispatcher.dispatch(System.Object)">
            <summary>
            Dispatches a single interaction to a controller/action pair
            @param {Object} options Options representing at least the controller and action to dispatch to
            </summary>
        </member>
        <member name="M:Ext.util.Dispatcher.redirect(System.Object)">
            <summary>
            Dispatches to a controller/action pair, adding a new url to the History stack
            </summary>
        </member>
        <member name="T:Ext.util.Draggable">
            <summary>
            @class Ext.util.Draggable
            @extends Ext.util.Observable
            A core util class to bring Draggable behavior to any DOM element, acts as a base class for Scroller and Sortable
            @constructor
            @param {Mixed} el The element you want to make draggable.
            @param {Object} config The configuration object for this Draggable.
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.destroy">
            <summary>
            Destroys this Draggable instance.
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.disable">
            <summary>
            Disable the Draggable.
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.enable">
            <summary>
            Enable the Draggable.
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.getNewOffsetFromTouchPoint(Ext.util.Offset)">
            <summary>
            Gets the new offset from a touch offset.
            @param {Ext.util.Offset} touchPoint The touch offset instance.
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.getOffset">
            <summary>
            Returns the current offset relative to the original location of this Draggable.
            @return {Ext.util.Offset} offset An Ext.util.Offset instance containing the offset.
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.getProxyEl">
            <summary>
            Returns the element thats is being visually dragged.
            @returns {Ext.Element} proxy The proxy element.
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.handleAnimationFrame">
            <summary>
            Internal method that handles a frame of the offset animation.
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.isDragging">
            <summary>
            Method to determine whether this Draggable is currently dragging.
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.isHorizontal">
            <summary>
            Method to determine whether this Draggable can be dragged on the x-axis
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.isVertical">
            <summary>
            Method to determine whether this Draggable can be dragged on the y-axis
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.moveTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Use this to move the draggable to a coordinate on the screen.
            @param {Number} x the vertical coordinate in pixels
            @param {Number} y the horizontal coordinate in pixels
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.onDrag(System.Object)">
            <summary>
            Fires when a drag events happens. Internal use only.
            @param {Event} e The event object for the drag event
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.onDragEnd(System.Object)">
            <summary>
            Fires when a dragend event happens. Internal use only.
            @param {Event} e The event object for the dragend event
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.onOrientationChange">
            <summary>
            Fires when the orientation changes. Internal use only.
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.onStart(System.Object)">
            <summary>
            Fires when the Drag operation starts. Internal use only.
            @param {Event} e The event object for the drag operation
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.reset">
            <summary>
            This method will reset the initial region of the Draggable.
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setDragging(System.Boolean)">
            <summary>
            Sets the dragging flag and adds a dragging class to the element.
            @param {Boolean} dragging True to enable dragging, false to disable.
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setEnabled(System.Boolean)">
            <summary>
            Combined method to disable or enable the Draggable. This method is called by the enable and
            disable methods.
            @param {Boolean} enabled True to enable, false to disable. Defaults to false.
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setOffset(System.Object,System.Object)">
            <summary>
            Sets the offset of this Draggable relatively to its original offset.
            @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
            x and y coordinates.
            @param {Boolean/Number} animate Whether or not to animate the setting of the offset. True
            to use the default animationDuration, a number to specify the duration for this operation.
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setStyleOffset(System.Object)">
            <summary>
            Internal method that sets the left and top of the proxyEl.
            @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
            x and y coordinates.
            @return {Ext.util.Draggable} this This Draggable instance
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setTransformOffset(System.Object,System.Object)">
            <summary>
            Internal method that sets the transform of the proxyEl.
            @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
            x and y coordinates for the transform.
            @return {Ext.util.Draggable} this This Draggable instance
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.setUseCssTransform(System.Boolean)">
            <summary>
            Change the Draggable to use css transforms instead of style offsets
            or the other way around.
            @param {Boolean} useCssTransform True to use css transforms instead of style offsets.
            @return {Ext.util.Draggable} this This Draggable instance
            @public
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.startAnimation(System.Object,System.Object)">
            <summary>
            Internal method that sets the offset of the Draggable using an animation
            @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
            x and y coordinates for the transform.
            @param {Boolean/Number} animate Whether or not to animate the setting of the offset. True
            to use the default animationDuration, a number to specify the duration for this operation.
            @return {Ext.util.Draggable} this This Draggable instance
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.stopAnimation">
            <summary>
            Internal method that stops the current offset animation
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Draggable.updateBoundary(System.Boolean)">
            <summary>
            Updates the boundary information for this Draggable. This method shouldn't
            have to be called by the developer and is mostly used for internal purposes.
            Might be useful when creating subclasses of Draggable.
            @param {Boolean} init Whether or not this is happing during instantiation, which we need
            to apply the transform / style to the DOM element
            @return {Ext.util.Draggable} this This Draggable instance
            @private
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.animationDuration">
            <summary>
            How long animations for this draggable take by default when using setOffset with animate being true.
            Defaults to 300.
            @type Number
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.baseCls">
            <summary>
            @class Ext.util.Draggable
            @extends Ext.util.Observable
            A core util class to bring Draggable behavior to any DOM element, acts as a base class for Scroller and Sortable
            @constructor
            @param {Mixed} el The element you want to make draggable.
            @param {Object} config The configuration object for this Draggable.
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.cancelSelector">
            <summary>
            @cfg {String} cancelSelector
            A simple CSS selector that represents elements within the draggable
            that should NOT initiate a drag.
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.delay">
            <summary>
            @cfg {Number} delay
            How many milliseconds a user must hold the draggable before starting a
            drag operation. Defaults to 0 or immediate.
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.direction">
            <summary>
            @cfg {String} direction
            Possible values: 'vertical', 'horizontal', or 'both'
            Defaults to 'both'
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.disabled">
            <summary>
            @cfg {Boolean} disabled
            Whether or not the draggable behavior is disabled on instantiation
            Defaults to false
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.dragging">
            <summary>
            Read-only Property representing whether or not the Draggable is currently
            dragging or not.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.Dragging">
            <summary>
            Sets the dragging flag and adds a dragging class to the element.
            @param {Boolean} dragging True to enable dragging, false to disable.
            @private
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.Enabled">
            <summary>
            Combined method to disable or enable the Draggable. This method is called by the enable and
            disable methods.
            @param {Boolean} enabled True to enable, false to disable. Defaults to false.
            @return {Ext.util.Draggable} this This Draggable instance
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.group">
            <summary>
            @cfg {String} group
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.horizontal">
            <summary>
            Read-only value representing whether the Draggable can be moved horizontally.
            This is automatically calculated by Draggable by the direction configuration.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.Offset">
            <summary>
            Returns the current offset relative to the original location of this Draggable.
            @return {Ext.util.Offset} offset An Ext.util.Offset instance containing the offset.
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.offsetBoundary">
            <summary>
            Read-only Property representing the region that the Draggable
            is constrained to.
            @type Ext.util.Region
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.revert">
            <summary>
            @cfg {Boolean} revert
            Whether or not the element or it's proxy will be reverted back (with animation)
            when it's not dropped and held by a Droppable
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.StyleOffset">
            <summary>
            Internal method that sets the left and top of the proxyEl.
            @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
            x and y coordinates.
            @return {Ext.util.Draggable} this This Draggable instance
            @private
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.threshold">
            <summary>
            The amount of pixels you have to move before the drag operation starts.
            Defaults to 0
            @type Number
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.updateBoundaryOnTouchStart">
            <summary>
            Whether or not to automatically re-calculate the Scroller's and its container's size on every
            touchstart.
            Defaults to true
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.useCssTransform">
            <summary>
            @cfg {Boolean} useCssTransform
            Whether or not to translate the element using CSS Transform (much faster) instead of
            left and top properties, defaults to true
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.UseCssTransform">
            <summary>
            Change the Draggable to use css transforms instead of style offsets
            or the other way around.
            @param {Boolean} useCssTransform True to use css transforms instead of style offsets.
            @return {Ext.util.Draggable} this This Draggable instance
            @public
            </summary>
        </member>
        <member name="P:Ext.util.Draggable.vertical">
            <summary>
            Read-only value representing whether the Draggable can be moved vertically.
            This is automatically calculated by Draggable by the direction configuration.
            @type Boolean
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.cancelSelector">
            <summary>
            A simple CSS selector that represents elements within the draggable
            that should NOT initiate a drag.
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.constrain">
            <summary>
            Can be either a DOM element, an instance of Ext.Element, 'parent' or null for no constrain
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.delay">
            <summary>
            How many milliseconds a user must hold the draggable before starting a
            drag operation. Defaults to 0 or immediate.
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.direction">
            <summary>
            Possible values: 'vertical', 'horizontal', or 'both'
            Defaults to 'both'
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.disabled">
            <summary>
            Whether or not the draggable behavior is disabled on instantiation
            Defaults to false
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.eventTarget">
            <summary>
            The element to actually bind touch events to, the only string accepted is 'parent'
            for convenience.
            Defaults to this class' element itself
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.group">
            <summary>
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.revert">
            <summary>
            Whether or not the element or it's proxy will be reverted back (with animation)
            when it's not dropped and held by a Droppable
            </summary>
        </member>
        <member name="P:Ext.util.DraggableConfig.useCssTransform">
            <summary>
            Whether or not to translate the element using CSS Transform (much faster) instead of
            left and top properties, defaults to true
            </summary>
        </member>
        <member name="T:Ext.util.Droppable">
            <summary>
            @class Ext.util.Droppable
            @extends Ext.util.Observable
            @constructor
            </summary>
        </member>
        <member name="M:Ext.util.Droppable.#ctor(System.Object,System.Object)">
            <summary>
            @constructor
            @param el {Mixed} String, HtmlElement or Ext.Element representing an
            element on the page.
            @param config {Object} Configuration options for this class.
            </summary>
        </member>
        <member name="M:Ext.util.Droppable.disable">
            <summary>
            Disable the Droppable target.
            </summary>
        </member>
        <member name="M:Ext.util.Droppable.enable">
            <summary>
            Enable the Droppable target.
            This is invoked immediately after constructing a Droppable if the
            disabled parameter is NOT set to true.
            </summary>
        </member>
        <member name="M:Ext.util.Droppable.isDisabled">
            <summary>
            Method to determine whether this Component is currently disabled.
            @return {Boolean} the disabled state of this Component.
            </summary>
        </member>
        <member name="M:Ext.util.Droppable.isMonitoring">
            <summary>
            Method to determine whether this Droppable is currently monitoring drag operations of Draggables.
            @return {Boolean} the monitoring state of this Droppable
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.activeCls">
            <summary>
            @cfg {String} activeCls
            The CSS added to a Droppable when a Draggable in the same group is being
            dragged. Defaults to 'x-drop-active'.
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.baseCls">
            <summary>
            @class Ext.util.Droppable
            @extends Ext.util.Observable
            @constructor
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.disabled">
            <summary>
            @cfg {Boolean} disabled
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.group">
            <summary>
            @cfg {String} group
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.hoverCls">
            <summary>
            @cfg {String} hoverCls
            The CSS class to add to the droppable when hovering over a valid drop. (Defaults to 'x-drop-hover')
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.invalidCls">
            <summary>
            @cfg {String} invalidCls
            The CSS class to add to the droppable when dragging a draggable that is
            not in the same group. Defaults to 'x-drop-invalid'.
            </summary>
        </member>
        <member name="P:Ext.util.Droppable.validDropMode">
            <summary>
            @cfg {String} validDropMode
            Determines when a drop is considered 'valid' whether it simply need to
            intersect the region or if it needs to be contained within the region.
            Valid values are: 'intersects' or 'contains'
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.activeCls">
            <summary>
            The CSS added to a Droppable when a Draggable in the same group is being
            dragged. Defaults to 'x-drop-active'.
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.disabled">
            <summary>
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.group">
            <summary>
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.hoverCls">
            <summary>
            The CSS class to add to the droppable when hovering over a valid drop. (Defaults to 'x-drop-hover')
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.invalidCls">
            <summary>
            The CSS class to add to the droppable when dragging a draggable that is
            not in the same group. Defaults to 'x-drop-invalid'.
            </summary>
        </member>
        <member name="P:Ext.util.DroppableConfig.validDropMode">
            <summary>
            Determines when a drop is considered 'valid' whether it simply need to
            intersect the region or if it needs to be contained within the region.
            Valid values are: 'intersects' or 'contains'
            </summary>
        </member>
        <member name="M:Ext.util.EventSimulator.fireMouseEvent(System.Object,System.Object,System.Object)">
            <summary>
            Mouse events =======================================================================================
            </summary>
        </member>
        <member name="M:Ext.util.EventSimulator.fireTouchEvent(System.Object,System.Object,System.Object)">
            <summary>
            Touch events ==========================================================================
            </summary>
        </member>
        <member name="T:Ext.util.Filter">
            <summary>
            @class Ext.util.Filter
            @extends Object
            <p>Represents a filter that can be applied to a {@link Ext.data.MixedCollection MixedCollection}. Can either simply
            filter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the context
            of MixedCollections, though {@link Ext.data.Store Store}s frequently create them when filtering and searching on their
            records. Example usage:</p>
            <pre><code>
            //set up a fictional MixedCollection containing a few people to filter on
            var allNames = new Ext.util.MixedCollection();
            allNames.addAll([
            {id: 1, name: 'Ed',    age: 25},
            {id: 2, name: 'Jamie', age: 37},
            {id: 3, name: 'Abe',   age: 32},
            {id: 4, name: 'Aaron', age: 26},
            {id: 5, name: 'David', age: 32}
            ]);
            var ageFilter = new Ext.util.Filter({
            property: 'age',
            value   : 32
            });
            var longNameFilter = new Ext.util.Filter({
            filterFn: function(item) {
            return item.name.length > 4;
            }
            });
            //a new MixedCollection with the 3 names longer than 4 characters
            var longNames = allNames.filter(longNameFilter);
            //a new MixedCollection with the 2 people of age 24:
            var youngFolk = allNames.filter(ageFilter);
            </code></pre>
            @constructor
            @param {Object} config Config object
            </summary>
        </member>
        <member name="M:Ext.util.Filter.#ctor(System.Object)">
            <summary>
            @cfg {String} root Optional root property. This is mostly useful when filtering a Store, in which case we set the
            root to 'data' to make the filter pull the {@link #property} out of the data object of each item
            </summary>
        </member>
        <member name="M:Ext.util.Filter.createFilterFn">
            <summary>
            @private
            Creates a filter function for the configured property/value/anyMatch/caseSensitive options for this Filter
            </summary>
        </member>
        <member name="M:Ext.util.Filter.createValueMatcher">
            <summary>
            @private
            Returns a regular expression based on the given value and matching options
            </summary>
        </member>
        <member name="M:Ext.util.Filter.getRoot(System.Object)">
            <summary>
            @private
            Returns the root property of the given item, based on the configured {@link #root} property
            @param {Object} item The item
            @return {Object} The root property of the object
            </summary>
        </member>
        <member name="P:Ext.util.Filter.anyMatch">
            <summary>
            @cfg {Boolean} anyMatch True to allow any match - no regex start/end line anchors will be added. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.util.Filter.caseSensitive">
            <summary>
            @cfg {Boolean} caseSensitive True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.util.Filter.exactMatch">
            <summary>
            @cfg {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
            Ignored if anyMatch is true.
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.anyMatch">
            <summary>
            True to allow any match - no regex start/end line anchors will be added. Defaults to false
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.caseSensitive">
            <summary>
            True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.exactMatch">
            <summary>
            True to force exact match (^ and $ characters added to the regex). Defaults to false.
            Ignored if anyMatch is true.
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.filterFn">
            <summary>
            A custom filter function which is passed each item in the {@link Ext.util.MixedCollection}
            in turn. Should return true to accept each item or false to reject it
            </summary>
        </member>
        <member name="P:Ext.util.FilterConfig.property">
            <summary>
            The property to filter on. Required unless a {@link #filter} is passed
            </summary>
        </member>
        <member name="M:Ext.util.Format.date(System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Parse a value into a formatted date using the specified format pattern.
            @param {String/Date} value The value to format (Strings must conform to the format expected by the javascript
            Date object's <a href="http://www.w3schools.com/jsref/jsref_parse.asp">parse()</a> method)
            @param {String} format (optional) Any valid date format string (defaults to 'm/d/Y')
            @return {String} The formatted date string
            </summary>
        </member>
        <member name="M:Ext.util.Format.ellipsis(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,System.Boolean)">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
            @param {String} value The string to truncate
            @param {Number} length The maximum length to allow before truncating
            @param {Boolean} word True to try to find a common word break
            @return {String} The converted text
            </summary>
        </member>
        <member name="M:Ext.util.Format.escape(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for ' and \
            @param {String} string The string to escape
            @return {String} The escaped string
            @static
            </summary>
        </member>
        <member name="M:Ext.util.Format.escapeRegex(SharpKit.JavaScript.JsString)">
            <summary>
            Escapes the passed string for use in a regular expression
            @param {String} str
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.util.Format.format(SharpKit.JavaScript.JsString)">
            <summary>
            Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
            token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
            <pre><code>
            var cls = 'my-class', text = 'Some text';
            var s = Ext.util.Format.format('&lt;div class="{0}">{1}&lt;/div>', cls, text);
            // s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
            </code></pre>
            @param {String} string The tokenized string to be formatted
            @param {String} value1 The value to replace token {0}
            @param {String} value2 Etc...
            @return {String} The formatted string
            @static
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Format.htmlDecode(SharpKit.JavaScript.JsString)" -->
        <!-- Badly formed XML comment ignored for member "M:Ext.util.Format.htmlEncode(SharpKit.JavaScript.JsString)" -->
        <member name="M:Ext.util.Format.leftPad(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Pads the left side of a string with a specified character.  This is especially useful
            for normalizing number and date strings.  Example usage:
            *
            <pre><code>
            var s = Ext.util.Format.leftPad('123', 5, '0');
            // s now contains the string: '00123'
            </code></pre>
            @param {String} string The original string
            @param {Number} size The total length of the output string
            @param {String} char (optional) The character with which to pad the original string (defaults to empty string " ")
            @return {String} The padded string
            @static
            </summary>
        </member>
        <member name="M:Ext.util.Format.toggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Utility function that allows you to easily switch a string between two alternating values.  The passed value
            is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
            they are already different, the first value passed in is returned.  Note that this method returns the new value
            but does not change the current string.
            <pre><code>
            // alternate sort directions
            sort = Ext.util.Format.toggle(sort, 'ASC', 'DESC');
            // instead of conditional logic:
            sort = (sort == 'ASC' ? 'DESC' : 'ASC');
            </code></pre>
            @param {String} string The current string
            @param {String} value The value to compare to the current string
            @param {String} other The new value to use if the string already equals the first value passed in
            @return {String} The new value
            </summary>
        </member>
        <member name="M:Ext.util.Format.trim(SharpKit.JavaScript.JsString)">
            <summary>
            Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
            <pre><code>
            var s = '  foo bar  ';
            alert('-' + s + '-');         //alerts "- foo bar -"
            alert('-' + Ext.util.Format.trim(s) + '-');  //alerts "-foo bar-"
            </code></pre>
            @param {String} string The string to escape
            @return {String} The trimmed string
            </summary>
        </member>
        <member name="P:Ext.util.Format.defaultDateFormat">
            <summary>
            @class Ext.util.Format
            Reusable data formatting functions
            @singleton
            </summary>
        </member>
        <member name="P:Ext.util.Format.escapeRe">
            <summary>
            @class Ext.util.Format
            Reusable data formatting functions
            @singleton
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createDelegate(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Creates a delegate (callback) that sets the scope to obj.
            Call directly on any function. Example: <code>Ext.createDelegate(this.myFunction, this, [arg1, arg2])</code>
            Will create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the
            callback points to obj. Example usage:
            <pre><code>
            var sayHi = function(name){
            // Note this use of "this.text" here.  This function expects to
            // execute within a scope that contains a text property.  In this
            // example, the "this" variable is pointing to the btn object that
            // was passed in createDelegate below.
            alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
            }
            var btn = new Ext.Button({
            text: 'Say Hi',
            renderTo: Ext.getBody()
            });
            // This callback will execute in the scope of the
            // button instance. Clicking the button alerts
            // "Hi, Fred. You clicked the "Say Hi" button."
            btn.on('click', Ext.createDelegate(sayHi, btn, ['Fred']));
            </code></pre>
            @param {Function} fn The function to delegate.
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
            <b>If omitted, defaults to the browser window.</b>
            @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
            @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
            if a number the args are inserted at the specified position
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createInterceptor(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Creates an interceptor function. The passed function is called before the original one. If it returns false,
            the original one is not called. The resulting function returns the results of the original function.
            The passed function is called with the parameters of the original function. Example usage:
            <pre><code>
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            sayHi('Fred'); // alerts "Hi, Fred"
            // create a new function that validates input without
            // directly modifying the original function:
            var sayHiToFriend = Ext.createInterceptor(sayHi, function(name){
            return name == 'Brian';
            });
            sayHiToFriend('Fred');  // no alert
            sayHiToFriend('Brian'); // alerts "Hi, Brian"
            </code></pre>
            @param {Function} origFn The original function.
            @param {Function} newFn The function to call before the original
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the passed function is executed.
            <b>If omitted, defaults to the scope in which the original function is called or the browser window.</b>
            @param {Mixed} returnValue (optional) The value to return if the passed function return false (defaults to null).
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.createSequence(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Create a combined function call sequence of the original function + the passed function.
            The resulting function returns the results of the original function.
            The passed fcn is called with the parameters of the original function. Example usage:
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            sayHi('Fred'); // alerts "Hi, Fred"
            var sayGoodbye = Ext.createSequence(sayHi, function(name){
            alert('Bye, ' + name);
            });
            sayGoodbye('Fred'); // both alerts show
            @param {Function} origFn The original function.
            @param {Function} newFn The function to sequence
            @param {Object} scope (optional) The scope (this reference) in which the passed function is executed.
            If omitted, defaults to the scope in which the original function is called or the browser window.
            @return {Function} The new function
            </summary>
        </member>
        <member name="M:Ext.util.Functions.defer(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsNumber,System.Object,SharpKit.JavaScript.JsArray,System.Object)">
            <summary>
            Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
            <pre><code>
            var sayHi = function(name){
            alert('Hi, ' + name);
            }
            // executes immediately:
            sayHi('Fred');
            // executes after 2 seconds:
            Ext.defer(sayHi, 2000, this, ['Fred']);
            // this syntax is sometimes useful for deferring
            // execution of an anonymous function:
            Ext.defer(function(){
            alert('Anonymous');
            }, 100);
            </code></pre>
            @param {Function} fn The function to defer.
            @param {Number} millis The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
            @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
            <b>If omitted, defaults to the browser window.</b>
            @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
            @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
            if a number the args are inserted at the specified position
            @return {Number} The timeout id that can be used with clearTimeout
            </summary>
        </member>
        <member name="T:Ext.util.GeoLocation">
            <summary>
            @class Ext.util.GeoLocation
            @extends Ext.util.Observable
            *
            Provides a cross browser class for retrieving location information.<br/>
            <br/>
            Based on the <a href="http://dev.w3.org/geo/api/spec-source.html">Geolocation API Specification</a>.<br/>
            If the browser does not implement that specification (Internet Explorer 6-8), it can fallback on Google Gears
            as long as the browser has it installed, and the following javascript file from google is included on the page:
            <pre><code>&lt;script type="text/javascript" src="http://code.google.com/apis/gears/gears_init.js"&gt;&lt;/script&gt;</code></pre>
            <br/>
            Note: Location implementations are only required to return timestamp, longitude, latitude, and accuracy.<br/>
            Other properties (altitude, altitudeAccuracy, heading, speed) can be null or sporadically returned.<br/>
            <br/>
            When instantiated, by default this class immediately begins tracking location information,
            firing a {@link #locationupdate} event when new location information is available.  To disable this
            location tracking (which may be battery intensive on mobile devices), set {@link #autoUpdate} to false.<br/>
            When this is done, only calls to {@link #updateLocation} will trigger a location retrieval.<br/>
            <br/>
            A {@link #locationerror} event is raised when an error occurs retrieving the location, either due to a user
            denying the application access to it, or the browser not supporting it.<br/>
            <br/>
            The below code shows a GeoLocation making a single retrieval of location information.
            <pre><code>
            var geo = new Ext.util.GeoLocation({
            autoUpdate: false,
            listeners: {
            locationupdate: function (geo) {
            alert('New latitude: ' + geo.latitude);
            },
            locationerror: function (   geo,
            bTimeout,
            bPermissionDenied,
            bLocationUnavailable,
            message) {
            if(bTimeout){
            alert('Timeout occurred.');
            }
            else{
            alert('Error occurred.');
            }
            }
            }
            });
            geo.updateLocation();</code></pre>
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.getLocation(System.Object,System.Object)">
            <summary>
            @private
            Returns cached coordinates, and updates if there are no cached coords yet.
            @deprecated
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.setAllowHighAccuracy(SharpKit.JavaScript.JsNumber)">
            <summary>
            Changes the {@link #allowHighAccuracy} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.setAutoUpdate(System.Boolean)">
            <summary>
            Enabled/disables the auto-retrieval of the location information.<br/>
            If called with autoUpdate=true, it will execute an immediate location update
            and continue monitoring for location updates.<br/>
            If autoUpdate=false, any current location change monitoring will be disabled.
            @param {Boolean} autoUpdate Whether to start/stop location monitoring.
            @return {Boolean} If enabling autoUpdate, returns false if the location tracking
            cannot begin due to an error supporting geolocation.
            A locationerror event is also fired.
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.setMaximumAge(SharpKit.JavaScript.JsNumber)">
            <summary>
            Changes the {@link #maximumAge} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} maximumAge The value to set the maximumAge option to.
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.setTimeout(SharpKit.JavaScript.JsNumber)">
            <summary>
            Changes the {@link #timeout} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} timeout The value to set the timeout option to.
            </summary>
        </member>
        <member name="M:Ext.util.GeoLocation.updateLocation(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Executes a onetime location update operation,
            raising either a {@link #locationupdate} or {@link #locationerror} event.<br/>
            Does not interfere with or restart ongoing location monitoring.
            @param {Function} callback
            A callback method to be called when the location retrieval has been completed.<br/>
            Will be called on both success and failure.<br/>
            The method will be passed one parameter, {@link Ext.GeoLocation} (<b>this</b> reference),
            set to null on failure.
            <pre><code>
            geo.updateLocation(function (geo) {
            alert('Latitude: ' + (geo != null ? geo.latitude : 'failed'));
            });
            </code></pre>
            @param {Object} scope (optional)
            (optional) The scope (<b>this</b> reference) in which the handler function is executed.
            <b>If omitted, defaults to the object which fired the event.</b>
            <!--positonOptions undocumented param, see W3C spec-->
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.accuracy">
            <summary>
            Read-only property representing the last retrieved
            accuracy level of the latitude and longitude coordinates,
            specified in meters.<br/>
            This will always be a non-negative number.<br/>
            This corresponds to a 95% confidence level.
            @type Number
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.allowHighAccuracy">
            <summary>
            @cfg {Boolean} allowHighAccuracy
            Defaults to false.<br/>
            When set to true, provide a hint that the application would like to receive
            the best possible results. This may result in slower response times or increased power consumption.
            The user might also deny this capability, or the device might not be able to provide more accurate
            results than if this option was set to false.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.AllowHighAccuracy">
            <summary>
            Changes the {@link #allowHighAccuracy} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.altitude">
            <summary>
            Read-only property representing the last retrieved
            height of the position, specified in meters above the ellipsoid
            <a href="http://dev.w3.org/geo/api/spec-source.html#ref-wgs">[WGS84]</a>.
            @type Number/null
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.altitudeAccuracy">
            <summary>
            Read-only property representing the last retrieved
            accuracy level of the altitude coordinate, specified in meters.<br/>
            If altitude is not null then this will be a non-negative number.
            Otherwise this returns null.<br/>
            This corresponds to a 95% confidence level.
            @type Number/null
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.autoUpdate">
            <summary>
            @cfg {Boolean} autoUpdate
            Defaults to true.<br/>
            When set to true, continually monitor the location of the device
            (beginning immediately) and fire {@link #locationupdate}/{@link #locationerror} events.<br/>
            <br/>
            When using google gears, if the user denies access or another error occurs, this will be reset to false.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.AutoUpdate">
            <summary>
            Enabled/disables the auto-retrieval of the location information.<br/>
            If called with autoUpdate=true, it will execute an immediate location update
            and continue monitoring for location updates.<br/>
            If autoUpdate=false, any current location change monitoring will be disabled.
            @param {Boolean} autoUpdate Whether to start/stop location monitoring.
            @return {Boolean} If enabling autoUpdate, returns false if the location tracking
            cannot begin due to an error supporting geolocation.
            A locationerror event is also fired.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.heading">
            <summary>
            Read-only property representing the last retrieved
            direction of travel of the hosting device,
            specified in non-negative degrees between 0 and 359,
            counting clockwise relative to the true north.<br/>
            If speed is 0 (device is stationary), then this returns NaN
            @type Number/null
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.latitude">
            <summary>
            Read-only property representing the last retrieved
            geographical coordinate specified in degrees.
            @type Number
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.longitude">
            <summary>
            Read-only property representing the last retrieved
            geographical coordinate specified in degrees.
            @type Number
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.maximumAge">
            <summary>
            @cfg {Number} maximumAge
            Defaults to 0.<br/>
            This option indicates that the application is willing to accept cached location information whose age
            is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
            new location information is made immediately.<br/>
            Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
            If the device does not have cached location information available whose age is no
            greater than the specified maximumAge, then it must acquire new location information.<br/>
            For example, if location information no older than 10 minutes is required, set this property to 600000.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.MaximumAge">
            <summary>
            Changes the {@link #maximumAge} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} maximumAge The value to set the maximumAge option to.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.speed">
            <summary>
            Read-only property representing the last retrieved
            current ground speed of the device, specified in meters per second.<br/>
            If this feature is unsupported by the device, this returns null.<br/>
            If the device is stationary, this returns 0,
            otherwise it returns a non-negative number.
            @type Number/null
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.Timeout">
            <summary>
            Changes the {@link #timeout} option and restarts any active
            location monitoring with the updated setting.
            @param {Number} timeout The value to set the timeout option to.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocation.timestamp">
            <summary>
            Read-only property representing when the last retrieved
            positioning information was acquired by the device.
            @type Date
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocationConfig.allowHighAccuracy">
            <summary>
            Defaults to false.<br/>
            When set to true, provide a hint that the application would like to receive
            the best possible results. This may result in slower response times or increased power consumption.
            The user might also deny this capability, or the device might not be able to provide more accurate
            results than if this option was set to false.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocationConfig.autoUpdate">
            <summary>
            Defaults to true.<br/>
            When set to true, continually monitor the location of the device
            (beginning immediately) and fire {@link #locationupdate}/{@link #locationerror} events.<br/>
            <br/>
            When using google gears, if the user denies access or another error occurs, this will be reset to false.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocationConfig.maximumAge">
            <summary>
            Defaults to 0.<br/>
            This option indicates that the application is willing to accept cached location information whose age
            is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
            new location information is made immediately.<br/>
            Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
            If the device does not have cached location information available whose age is no
            greater than the specified maximumAge, then it must acquire new location information.<br/>
            For example, if location information no older than 10 minutes is required, set this property to 600000.
            </summary>
        </member>
        <member name="P:Ext.util.GeoLocationConfig.timeout">
            <summary>
            Defaults to Infinity.<br/>
            The maximum number of milliseconds allowed to elapse between a location update operation
            and the corresponding {@link #locationupdate} event being raised.  If a location was not successfully
            acquired before the given timeout elapses (and no other internal errors have occurred in this interval),
            then a {@link #locationerror} event will be raised indicating a timeout as the cause.<br/>
            Note that the time that is spent obtaining the user permission is <b>not</b> included in the period
            covered by the timeout.  The timeout attribute only applies to the location acquisition operation.<br/>
            In the case of calling updateLocation, the {@link #locationerror} event will be raised only once.<br/>
            If {@link #autoUpdate} is set to true, the {@link #locationerror} event could be raised repeatedly.
            The first timeout is relative to the moment {@link #autoUpdate} was set to true
            (or this {@link Ext.util.GeoLocation} was initialized with the {@link #autoUpdate} config option set to true).
            Subsequent timeouts are relative to the moment when the device determines that it's position has changed.
            </summary>
        </member>
        <member name="T:Ext.util.HashMap">
            <summary>
            @class Ext.util.HashMap
            @extends Ext.util.Observable
            <p>A simple unordered dictionary implementation to store key/value pairs.</p>
            @cfg {Function} keyFn A function that is used to retrieve a default key for a passed object.
            A default is provided that returns the <b>id</b> property on the object. This function is only used
            if the add method is called with a single argument.
            @constructor
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.add(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Add a new item to the hash. An exception will be thrown if the key already exists.
            @param {String} key The key of the new item.
            @param {Object} value The value of the new item.
            @return {Object} The value of the new item added.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.clear(System.Object)">
            <summary>
            private
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.clone">
            <summary>
            Performs a shallow copy on this hash.
            @return {Ext.util.HashMap} The new hash object.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.#ctor(System.Object)">
            <summary>
            @class Ext.util.HashMap
            @extends Ext.util.Observable
            <p>A simple unordered dictionary implementation to store key/value pairs.</p>
            @cfg {Function} keyFn A function that is used to retrieve a default key for a passed object.
            A default is provided that returns the <b>id</b> property on the object. This function is only used
            if the add method is called with a single argument.
            @constructor
            @param {Object} config The configuration options
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.contains(System.Object)">
            <summary>
            Checks whether a value exists in the hash.
            @param {Object} value The value to check for.
            @return {Boolean} True if the value exists in the dictionary.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.containsKey(SharpKit.JavaScript.JsString)">
            <summary>
            Checks whether a key exists in the hash.
            @param {String} key The key to check for.
            @return {Boolean} True if they key exists in the hash.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function once for each item in the hash.
            Returning false from the function will cease iteration.
            The paramaters passed to the function are:
            <div class="mdetail-params"><ul>
            <li><b>key</b> : String<p class="sub-desc">The key of the item</p></li>
            <li><b>value</b> : Number<p class="sub-desc">The value of the item</p></li>
            <li><b>length</b> : Number<p class="sub-desc">The total number of items in the hash</p></li>
            </ul></div>
            @param {Function} fn The function to execute.
            @param {Object} scope The scope to execute in. Defaults to <tt>this</tt>.
            @return {Ext.util.HashMap} this
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.findKey(System.Object)">
            <summary>
            @private
            Find the key for a value.
            @param {Object} value The value to find.
            @return {Object} The value of the item. Returns <tt>undefined</tt> if not found.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.get(SharpKit.JavaScript.JsString)">
            <summary>
            Retrieves an item with a particular key.
            @param {String} key The key to lookup.
            @return {Object} The value at that key. If it doesn't exist, <tt>undefined</tt> is returned.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getArray(System.Boolean)">
            <summary>
            Gets either the keys/values in an array from the hash.
            @private
            @param {Boolean} isKey True to extract the keys, otherwise, the value
            @return {Array} An array of either keys/values from the hash.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getCount">
            <summary>
            Gets the number of items in the hash.
            @return {Number} The number of items in the hash.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getData(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Implementation for being able to extract the key from an object if only
            a single argument is passed.
            @private
            @param {String} key The key
            @param {Object} value The value
            @return {Array} [key, value]
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getKey(System.Object)">
            <summary>
            Extracts the key from an object. This is a default implementation, it may be overridden
            @private
            @param {Object} o The object to get the key from
            @return {String} The key to use.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getKeys">
            <summary>
            Return all of the keys in the hash.
            @return {Array} An array of keys.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.getValues">
            <summary>
            Return all of the values in the hash.
            @return {Array} An array of values.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.remove(System.Object)">
            <summary>
            Remove an item from the hash.
            @param {Object} o The value of the item to remove.
            @return {Boolean} True if the item was successfully removed.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.removeByKey(SharpKit.JavaScript.JsString)">
            <summary>
            Remove an item from the hash.
            @param {String} key The key to remove.
            @return {Boolean} True if the item was successfully removed.
            </summary>
        </member>
        <member name="M:Ext.util.HashMap.replace(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Replaces an item in the hash. If the key doesn't exist, the
            {@link #add} method will be used.
            @param {String} key The key of the item.
            @param {Object} value The new value for the item.
            @return {Object} The new value of the item.
            </summary>
        </member>
        <member name="P:Ext.util.HashMap.Count">
            <summary>
            Gets the number of items in the hash.
            @return {Number} The number of items in the hash.
            </summary>
        </member>
        <member name="P:Ext.util.HashMap.Keys">
            <summary>
            Return all of the keys in the hash.
            @return {Array} An array of keys.
            </summary>
        </member>
        <member name="P:Ext.util.HashMap.Values">
            <summary>
            Return all of the values in the hash.
            @return {Array} An array of values.
            </summary>
        </member>
        <member name="P:Ext.util.HashMapConfig.keyFn">
            <summary>
            A function that is used to retrieve a default key for a passed object.
            A default is provided that returns the <b>id</b> property on the object. This function is only used
            if the add method is called with a single argument.
            @constructor
            </summary>
        </member>
        <member name="M:Ext.util.JSON.encode(System.Object)">
            <summary>
            @class Ext.util.JSON
            Modified version of Douglas Crockford"s json.js that doesn"t
            mess with the Object prototype
            http://www.json.org/js.html
            @singleton
            </summary>
        </member>
        <member name="M:Ext.util.JSONP.request(System.Object)">
            <summary>
            Make a cross-domain request using JSONP.
            @param {Object} config
            Valid configurations are:
            <ul>
            <li>url - {String} - Url to request data from. (required) </li>
            <li>params - {Object} - A set of key/value pairs to be url encoded and passed as GET parameters in the request.</li>
            <li>callbackKey - {String} - Key specified by the server-side provider.</li>
            <li>callback - {Function} - Will be passed a single argument of the result of the request.</li>
            <li>scope - {Scope} - Scope to execute your callback in.</li>
            </ul>
            </summary>
        </member>
        <member name="P:Ext.util.JSONP.current">
            <summary>
            Read-only current executing request
            @type Object
            </summary>
        </member>
        <member name="M:Ext.util.Numbers.constrain(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Checks whether or not the current number is within a desired range.  If the number is already within the
            range it is returned, otherwise the min or max value is returned depending on which side of the range is
            exceeded.  Note that this method returns the constrained value but does not change the current number.
            @param {Number} number The number to check
            @param {Number} min The minimum number in the range
            @param {Number} max The maximum number in the range
            @return {Number} The constrained value if outside the range, otherwise the current value
            </summary>
        </member>
        <member name="M:Ext.util.Numbers.toFixed(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Formats a number using fixed-point notation
            @param {Number} value The number to format
            @param {Number} precision The number of digits to show after the decimal point
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.util.ObservableConfig.listeners" -->
        <member name="T:Ext.util.Point">
            <summary>
            @class Ext.util.Point
            @extends Object
            *
            Represents a 2D point with x and y properties, useful for comparison and instantiation
            from an event:
            <pre><code>
            var point = Ext.util.Point.fromEvent(e);
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.util.Point.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.util.Point
            @extends Object
            *
            Represents a 2D point with x and y properties, useful for comparison and instantiation
            from an event:
            <pre><code>
            var point = Ext.util.Point.fromEvent(e);
            </code></pre>
            </summary>
        </member>
        <member name="M:Ext.util.Point.copy">
            <summary>
            Copy a new instance of this point
            @return {Ext.util.Point} the new point
            </summary>
        </member>
        <member name="M:Ext.util.Point.copyFrom(System.Object)">
            <summary>
            Copy the x and y values of another point / object to this point itself
            @param {}
            @return {Ext.util.Point} this This point
            </summary>
        </member>
        <member name="M:Ext.util.Point.equals(System.Object)">
            <summary>
            Compare this point and another point
            @param {Ext.util.Point/Object} The point to compare with, either an instance
            of Ext.util.Point or an object with x and y properties
            @return {Boolean} Returns whether they are equivalent
            </summary>
        </member>
        <member name="M:Ext.util.Point.fromEvent(System.Object)">
            <summary>
            Returns a new instance of Ext.util.Point base on the pageX / pageY values of the given event
            @static
            @param {Event} e The event
            @returns Ext.util.Point
            </summary>
        </member>
        <member name="M:Ext.util.Point.isWithin(System.Object,System.Object)">
            <summary>
            Whether the given point is not away from this point within the given threshold amount
            @param {Ext.util.Point/Object} The point to check with, either an instance
            of Ext.util.Point or an object with x and y properties
            @param {Object/Number} threshold Can be either an object with x and y properties or a number
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Point.roundedEquals(System.Object)">
            <summary>
            Compare this point with another point when the x and y values of both points are rounded. E.g:
            [100.3,199.8] will equals to [100, 200]
            @param {Ext.util.Point/Object} The point to compare with, either an instance
            of Ext.util.Point or an object with x and y properties
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Point.toString">
            <summary>
            Returns a human-eye-friendly string that represents this point,
            useful for debugging
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.util.Point.translate(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Translate this point by the given amounts
            @param {Number} x Amount to translate in the x-axis
            @param {Number} y Amount to translate in the y-axis
            @return {Boolean}
            </summary>
        </member>
        <member name="T:Ext.util.Region">
            <summary>
            @class Ext.util.Region
            @extends Object
            *
            Represents a rectangular region and provides a number of utility methods
            to compare regions.
            </summary>
        </member>
        <member name="M:Ext.util.Region.adjust(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Modifies the current region to be adjusted by offsets.
            @param {Number} top top offset
            @param {Number} right right offset
            @param {Number} bottom bottom offset
            @param {Number} left left offset
            </summary>
        </member>
        <member name="M:Ext.util.Region.constrainTo(Ext.util.Region)">
            <summary>
            Modifies the current region to be constrained to the targetRegion.
            @param {Ext.util.Region} targetRegion
            </summary>
        </member>
        <member name="M:Ext.util.Region.#ctor(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            @constructor
            @param {Number} top Top
            @param {Number} right Right
            @param {Number} bottom Bottom
            @param {Number} left Left
            </summary>
        </member>
        <member name="M:Ext.util.Region.contains(Ext.util.Region)">
            <summary>
            Checks if this region completely contains the region that is passed in.
            @param {Ext.util.Region} region
            </summary>
        </member>
        <member name="M:Ext.util.Region.copy">
            <summary>
            Copy a new instance
            @return {Ext.util.Region}
            </summary>
        </member>
        <member name="M:Ext.util.Region.equals(Ext.util.Region)">
            <summary>
            Check whether this region is equivalent to the given region
            @param {Ext.util.Region} region The region to compare with
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Region.from(System.Object)">
            <summary>
            @static
            @param {Object} o An object with top, right, bottom, left properties
            @return {Ext.util.Region} region The region constructed based on the passed object
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffset(SharpKit.JavaScript.JsString,Ext.util.Point)">
            <summary>
            Get the offset amount of a point outside the region
            @param {String} axis optional
            @param {Ext.util.Point} p the point
            @return {Ext.util.Offset}
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffsetX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the offset amount on the x-axis
            @param {Number} p the offset
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.util.Region.getOutOfBoundOffsetY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the offset amount on the y-axis
            @param {Number} p the offset
            @return {Number}
            </summary>
        </member>
        <member name="M:Ext.util.Region.getRegion(System.Object)">
            <summary>
            @static
            @param {Mixed} el A string, DomElement or Ext.Element representing an element
            on the page.
            @returns {Ext.util.Region} region
            Retrieves an Ext.util.Region for a particular element.
            </summary>
        </member>
        <member name="M:Ext.util.Region.getSize">
            <summary>
            Get the width / height of this region
            @return {Object} an object with width and height properties
            </summary>
        </member>
        <member name="M:Ext.util.Region.intersect(Ext.util.Region)">
            <summary>
            Checks if this region intersects the region passed in.
            @param {Ext.util.Region} region
            @return {Ext.util.Region/Boolean} Returns the intersected region or false if there is no intersection.
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBound(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Check whether the point / offset is out of bound
            @param {String} axis optional
            @param {Ext.util.Point/Number} p the point / offset
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBoundX(SharpKit.JavaScript.JsNumber)">
            <summary>
            Check whether the offset is out of bound in the x-axis
            @param {Number} p the offset
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Region.isOutOfBoundY(SharpKit.JavaScript.JsNumber)">
            <summary>
            Check whether the offset is out of bound in the y-axis
            @param {Number} p the offset
            @return {Boolean}
            </summary>
        </member>
        <member name="M:Ext.util.Region.restrict(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Restrict a point within the region by a certain factor.
            @param {String} axis Optional
            @param {Ext.util.Point/Ext.util.Offset/Object} p
            @param {Number} factor
            @return {Ext.util.Point/Ext.util.Offset/Object/Number}
            </summary>
        </member>
        <member name="M:Ext.util.Region.restrictX(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Restrict an offset within the region by a certain factor, on the x-axis
            @param {Number} p
            @param {Number} factor The factor, optional, defaults to 1
            @return
            </summary>
        </member>
        <member name="M:Ext.util.Region.restrictY(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Restrict an offset within the region by a certain factor, on the y-axis
            @param {Number} p
            @param {Number} factor The factor, optional, defaults to 1
            </summary>
        </member>
        <member name="M:Ext.util.Region.round">
            <summary>
            Round all the properties of this region
            @return {Ext.util.Region} this This Region
            </summary>
        </member>
        <member name="M:Ext.util.Region.toString">
            <summary>
            Dump this to an eye-friendly string, great for debugging
            @return {String}
            </summary>
        </member>
        <member name="M:Ext.util.Region.translateBy(System.Object)">
            <summary>
            Translate this region by the given offset amount
            @param {Ext.util.Offset/Object} offset
            @return {Ext.util.Region} this This Region
            </summary>
        </member>
        <member name="M:Ext.util.Region.union(Ext.util.Region)">
            <summary>
            Returns the smallest region that contains the current AND targetRegion.
            @param {Ext.util.Region} region
            </summary>
        </member>
        <member name="P:Ext.util.Region.Size">
            <summary>
            Get the width / height of this region
            @return {Object} an object with width and height properties
            </summary>
        </member>
        <member name="T:Ext.util.Route">
            <summary>
            @author Ed Spencer
            @class Ext.util.Route
            @extends Object
            @ignore
            <p>Represents a mapping between a url and a controller/action pair. May also contain additional params</p>
            </summary>
        </member>
        <member name="M:Ext.util.Route.#ctor(System.Object)">
            <summary>
            @cfg {String} url The url string to match. Required.
            </summary>
        </member>
        <member name="M:Ext.util.Route.createMatcherRegex(SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Takes the configured url string including wildcards and returns a regex that can be used to match
            against a url
            @param {String} url The url string
            @return {RegExp} The matcher regex
            </summary>
        </member>
        <member name="M:Ext.util.Route.matchesFor(SharpKit.JavaScript.JsString)">
            <summary>
            @private
            Returns a hash of matching url segments for the given url.
            @param {String} url The url to extract matches for
            @return {Object} matching url segments
            </summary>
        </member>
        <member name="M:Ext.util.Route.recognize(SharpKit.JavaScript.JsString)">
            <summary>
            Attempts to recognize a given url string and return controller/action pair for it
            @param {String} url The url to recognize
            @return {Object} The matched data, or false if no match
            </summary>
        </member>
        <member name="M:Ext.util.Route.recognizes(SharpKit.JavaScript.JsString)">
            <summary>
            Returns true if this Route matches the given url string
            @param {String} url The url to test
            @return {Boolean} True if this Route recognizes the url
            </summary>
        </member>
        <member name="M:Ext.util.Route.urlFor(System.Object)">
            <summary>
            Constructs a url for the given config object by replacing wildcard placeholders in the Route's url
            @param {Object} config The config object
            @return {String} The constructed url
            </summary>
        </member>
        <member name="T:Ext.util.Router">
            <summary>
            @author Ed Spencer
            @class Ext.util.Router
            @extends Ext.util.Observable
            <p>See {@link Ext.Router}.</p>
            </summary>
        </member>
        <member name="M:Ext.util.Router.connect(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Connects a url-based route to a controller/action pair plus additional params
            @param {String} url The url to recognize
            </summary>
        </member>
        <member name="M:Ext.util.Router.#ctor(System.Object)">
            <summary>
            @author Ed Spencer
            @class Ext.util.Router
            @extends Ext.util.Observable
            <p>See {@link Ext.Router}.</p>
            </summary>
        </member>
        <member name="M:Ext.util.Router.draw(SharpKit.JavaScript.JsAction)">
            <summary>
            Convenience method which just calls the supplied function with the Router instance. Example usage:
            <pre><code>
            Ext.Router.draw(function(map) {
            map.connect('activate/:token', {controller: 'users', action: 'activate'});
            map.connect('home',            {controller: 'index', action: 'home'});
            });
            </code></pre>
            @param {Function} fn The fn to call
            </summary>
        </member>
        <member name="M:Ext.util.Router.recognize(SharpKit.JavaScript.JsString)">
            <summary>
            Recognizes a url string connected to the Router, return the controller/action pair plus any additional
            config associated with it
            @param {String} url The url to recognize
            @return {Object/undefined} If the url was recognized, the controller and action to call, else undefined
            </summary>
        </member>
        <member name="T:Ext.util.Scroller">
            <summary>
            @class Ext.util.Scroller
            @extends Ext.util.Draggable
            *
            Provide the native scrolling experience on iDevices for any DOM element
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.getLastActualFps">
            <summary>
            Get the last actual fps performed by this Scroller. Useful for benchmarking
            @return {Number} The actual fps
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.handleMomentumAnimationFrame">
            <summary>
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.scrollBy(System.Object,System.Object)">
            <summary>
            Change the scroll offset by the given amount
            @param {Ext.util.Offset/Object} offset The amount to scroll by, e.g {x: 100, y: 200}
            @param {Number/Boolean} animate Whether or not to animate while changing the scroll position.
            If it's a number, will be treated as the duration in ms
            @return {Ext.util.Scroller} this This Scroller
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.scrollTo(System.Object,System.Object)">
            <summary>
            Similar to {@link Ext.util.Scroller#setOffset setOffset}, but will stop any existing animation
            @param {Object} pos The new scroll position, e.g {x: 100, y: 200}
            @param {Number/Boolean} animate Whether or not to animate while changing the scroll position.
            If it's a number, will be treated as the duration in ms
            @return {Ext.util.Scroller} this This Scroller
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.snapToBoundary(System.Object)">
            <summary>
            Snap this scrollable content back to the container's boundary, if it's currently out of bound
            @return {Ext.util.Scroller} this This Scroller
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.acceleration">
            <summary>
            @cfg {Number} acceleration
            A higher acceleration gives the scroller more initial velocity. Defaults to 30
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.autoAdjustFps">
            <summary>
            @cfg {Number} fps
            The desired fps of the deceleration. Defaults to 70.
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.baseCls">
            <summary>
            @class Ext.util.Scroller
            @extends Ext.util.Draggable
            *
            Provide the native scrolling experience on iDevices for any DOM element
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.bounces">
            <summary>
            @cfg {Boolean/String} bounces
            Enable bouncing during scrolling past the bounds. Defaults to true. (Which is 'both').
            You can also specify 'vertical', 'horizontal', or 'both'
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.cancelRevert">
            <summary>
            @cfg {Boolean} momentum
            Whether or not to enable scrolling momentum. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.friction">
            <summary>
            @cfg {Number} friction
            The friction of the scroller.
            By raising this value the length that momentum scrolls becomes shorter. This value is best kept
            between 0 and 1. The default value is 0.5
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.LastActualFps">
            <summary>
            Get the last actual fps performed by this Scroller. Useful for benchmarking
            @return {Number} The actual fps
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.minVelocityForAnimation">
            <summary>
            @cfg {Number} minVelocityForAnimation
            The minimum velocity to keep animating. Defaults to 1 (1px per second)
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.momentum">
            <summary>
            @cfg {Boolean} momentum
            Whether or not to enable scrolling momentum. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.outOfBoundRestrictFactor">
            <summary>
            @cfg {Number} outOfBoundRestrictFactor
            Determines the offset ratio when the scroller is pulled / pushed out of bound (when it's not decelerating)
            A value of 0.5 means 1px allowed for every 2px. Defaults to 0.5
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.springTension">
            <summary>
            @cfg {Number} springTension
            The tension of the spring that is attached to the scroller when it bounces.
            By raising this value the bounce becomes shorter. This value is best kept
            between 0 and 1. The default value is 0.3
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.startMomentumResetTime">
            <summary>
            @cfg {Number} startMomentumResetTime
            The time duration in ms to reset the start time of momentum
            Defaults to 350
            </summary>
        </member>
        <member name="T:Ext.util.Scroller.Indicator">
            <summary>
            @class Ext.util.Indicator
            @extends Object
            *
            Represent the Scroll Indicator to be used in a {@link Ext.util.ScrollView ScrollView}
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.#ctor(System.Object,System.Object)">
            <summary>
            @cfg {String} type
            The type of this Indicator, valid values are 'vertical' or 'horizontal'
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.hide">
            <summary>
            Hide this Indicator
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.setOffset(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set the offset position of this Indicator, relative to its container
            @param {Number} offset The new offset
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.setSize(SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the size of this Indicator, will change the height if {@link Ext.util.Scroller.Indicator#type type}
            is 'vertical', and width for 'horizontal'
            @param {Number} size The new size to change to
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.setVisibility(System.Boolean)">
            <summary>
            Set the visibility of this Indicator, a wrapper function for
            {@link Ext.util.Scroller.Indicator#show show} and {@link Ext.util.Scroller.Indicator#show hide}
            @param {Boolean} isVisible True to show this Indicator, false to hide
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="M:Ext.util.Scroller.Indicator.show">
            <summary>
            Show this Indicator
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.Indicator.baseCls">
            <summary>
            @class Ext.util.Indicator
            @extends Object
            *
            Represent the Scroll Indicator to be used in a {@link Ext.util.ScrollView ScrollView}
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.Indicator.Offset">
            <summary>
            Set the offset position of this Indicator, relative to its container
            @param {Number} offset The new offset
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.Indicator.Size">
            <summary>
            Adjust the size of this Indicator, will change the height if {@link Ext.util.Scroller.Indicator#type type}
            is 'vertical', and width for 'horizontal'
            @param {Number} size The new size to change to
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.Indicator.type">
            <summary>
            @cfg {String} type
            The type of this Indicator, valid values are 'vertical' or 'horizontal'
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.Indicator.Visibility">
            <summary>
            Set the visibility of this Indicator, a wrapper function for
            {@link Ext.util.Scroller.Indicator#show show} and {@link Ext.util.Scroller.Indicator#show hide}
            @param {Boolean} isVisible True to show this Indicator, false to hide
            @return {Ext.util.Scroller.Indicator} this This Indicator
            </summary>
        </member>
        <member name="P:Ext.util.Scroller.IndicatorConfig.type">
            <summary>
            The type of this Indicator, valid values are 'vertical' or 'horizontal'
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.acceleration">
            <summary>
            A higher acceleration gives the scroller more initial velocity. Defaults to 30
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.bounces">
            <summary>
            Enable bouncing during scrolling past the bounds. Defaults to true. (Which is 'both').
            You can also specify 'vertical', 'horizontal', or 'both'
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.fps">
            <summary>
            The desired fps of the deceleration. Defaults to 70.
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.friction">
            <summary>
            The friction of the scroller.
            By raising this value the length that momentum scrolls becomes shorter. This value is best kept
            between 0 and 1. The default value is 0.5
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.minVelocityForAnimation">
            <summary>
            The minimum velocity to keep animating. Defaults to 1 (1px per second)
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.outOfBoundRestrictFactor">
            <summary>
            Determines the offset ratio when the scroller is pulled / pushed out of bound (when it's not decelerating)
            A value of 0.5 means 1px allowed for every 2px. Defaults to 0.5
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.springTension">
            <summary>
            The tension of the spring that is attached to the scroller when it bounces.
            By raising this value the bounce becomes shorter. This value is best kept
            between 0 and 1. The default value is 0.3
            </summary>
        </member>
        <member name="P:Ext.util.ScrollerConfig.startMomentumResetTime">
            <summary>
            The time duration in ms to reset the start time of momentum
            Defaults to 350
            </summary>
        </member>
        <member name="T:Ext.util.ScrollView">
            <summary>
            @class Ext.util.ScrollView
            @extends Ext.util.Observable
            *
            A wrapper class around {@link Ext.util.Scroller Ext.util.Scroller} and {@link Ext.util.Scroller.Indicator Ext.util.Scroller.Indicator}
            that listens to scroll events and control the scroll indicators
            </summary>
        </member>
        <member name="M:Ext.util.ScrollView.#ctor(System.Object,System.Object)">
            <summary>
            @cfg {Number} indicatorMargin
            The margin value for the indicator relatively to the container.
            Defaults to <tt>4</tt>
            </summary>
        </member>
        <member name="M:Ext.util.ScrollView.hideIndicators">
            <summary>
            Hide the indicators if they are enabled; called automatically when the scrolling ends
            @return {Ext.util.ScrollView} this This ScrollView
            </summary>
        </member>
        <member name="M:Ext.util.ScrollView.showIndicators">
            <summary>
            Show the indicators if they are enabled; called automatically when the Scroller starts moving
            @return {Ext.util.ScrollView} this This ScrollView
            </summary>
        </member>
        <member name="P:Ext.util.ScrollView.indicatorMargin">
            <summary>
            @cfg {Number} indicatorMargin
            The margin value for the indicator relatively to the container.
            Defaults to <tt>4</tt>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.util.ScrollView.useIndicators" -->
        <member name="P:Ext.util.ScrollViewConfig.indicatorConfig">
            <summary>
            A valid config object for {@link Ext.util.Scroller.Indicator Ext.util.Scroller.Indicator}
            </summary>
        </member>
        <member name="P:Ext.util.ScrollViewConfig.indicatorMargin">
            <summary>
            The margin value for the indicator relatively to the container.
            Defaults to <tt>4</tt>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.util.ScrollViewConfig.useIndicators" -->
        <member name="T:Ext.util.Sortable">
            <summary>
            @class Ext.util.Sortable
            @extends Ext.util.Observable
            @constructor
            @param {Mixed} el
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.#ctor(System.Object,System.Object)">
            <summary>
            Read-only value representing whether the Draggable can be moved horizontally.
            This is automatically calculated by Draggable by the direction configuration.
            @type Boolean
            @private
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.disable">
            <summary>
            Disables sorting for this Sortable.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.enable">
            <summary>
            Enables sorting for this Sortable.
            This method is invoked immediately after construction of a Sortable unless
            the disabled configuration is set to true.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.isDisabled">
            <summary>
            Method to determine whether this Sortable is currently disabled.
            @return {Boolean} the disabled state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.isHorizontal">
            <summary>
            Method to determine whether this Sortable is currently sorting.
            @return {Boolean} the sorting state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.isSorting">
            <summary>
            Method to determine whether this Sortable is currently sorting.
            @return {Boolean} the sorting state of this Sortable.
            </summary>
        </member>
        <member name="M:Ext.util.Sortable.isVertical">
            <summary>
            Method to determine whether this Sortable is currently disabled.
            @return {Boolean} the disabled state of this Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.baseCls">
            <summary>
            @class Ext.util.Sortable
            @extends Ext.util.Observable
            @constructor
            @param {Mixed} el
            @param {Object} config
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.cancelSelector">
            <summary>
            @cfg {String} cancelSelector
            A simple CSS selector that represents elements within the draggable
            that should NOT initiate a drag.
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.delay">
            <summary>
            @cfg {Number} delay
            How many milliseconds a user must hold the draggable before starting a
            drag operation. Defaults to 0 or immediate.
            @private
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.direction">
            <summary>
            @cfg {String} direction
            Possible values: 'vertical', 'horizontal'
            Defaults to 'vertical'
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.disabled">
            <summary>
            @cfg {Boolean} disabled
            Passing in true will disable this Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.group">
            <summary>
            @cfg {String} group
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.handleSelector">
            <summary>
            @cfg {String} handleSelector
            A simple CSS selector to indicate what is the handle to drag the Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.itemSelector">
            <summary>
            @cfg {String} itemSelector
            A simple CSS selector that represents individual items within the Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.revert">
            <summary>
            @cfg {Boolean} revert
            This should NOT be changed.
            @private
            </summary>
        </member>
        <member name="P:Ext.util.Sortable.sorting">
            <summary>
            Read-only property that indicates whether a Sortable is currently sorting.
            @type Boolean
            @private
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.cancelSelector">
            <summary>
            A simple CSS selector that represents elements within the draggable
            that should NOT initiate a drag.
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.constrain">
            <summary>
            An Element to constrain the Sortable dragging to. Defaults to <tt>window</tt>.
            If <tt>true</tt> is specified, the dragging will be constrained to the element
            of the sortable.
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.delay">
            <summary>
            How many milliseconds a user must hold the draggable before starting a
            drag operation. Defaults to 0 or immediate.
            @private
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.direction">
            <summary>
            Possible values: 'vertical', 'horizontal'
            Defaults to 'vertical'
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.disabled">
            <summary>
            Passing in true will disable this Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.group">
            <summary>
            Draggable and Droppable objects can participate in a group which are
            capable of interacting. Defaults to 'base'
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.handleSelector">
            <summary>
            A simple CSS selector to indicate what is the handle to drag the Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.itemSelector">
            <summary>
            A simple CSS selector that represents individual items within the Sortable.
            </summary>
        </member>
        <member name="P:Ext.util.SortableConfig.revert">
            <summary>
            This should NOT be changed.
            @private
            </summary>
        </member>
        <member name="T:Ext.util.Sorter">
            <summary>
            @class Ext.util.Sorter
            @extends Object
            Represents a single sorter that can be applied to a Store
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.#ctor(System.Object)">
            <summary>
            @cfg {String} direction The direction to sort by. Defaults to ASC
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.createSortFunction(System.Object)">
            <summary>
            @private
            Creates and returns a function which sorts an array by the given property and direction
            @return {Function} A function which sorts by the property/direction combination provided
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.defaultSorterFn(System.Object,System.Object)">
            <summary>
            @private
            Basic default sorter function that just compares the defined property of each object
            </summary>
        </member>
        <member name="M:Ext.util.Sorter.getRoot(System.Object)">
            <summary>
            @private
            Returns the root property of the given item, based on the configured {@link #root} property
            @param {Object} item The item
            @return {Object} The root property of the object
            </summary>
        </member>
        <member name="P:Ext.util.Sorter.direction">
            <summary>
            @cfg {String} direction The direction to sort by. Defaults to ASC
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.direction">
            <summary>
            The direction to sort by. Defaults to ASC
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.property">
            <summary>
            The property to sort by. Required unless {@link #sorter} is provided
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.root">
            <summary>
            Optional root property. This is mostly useful when sorting a Store, in which case we set the
            root to 'data' to make the filter pull the {@link #property} out of the data object of each item
            </summary>
        </member>
        <member name="P:Ext.util.SorterConfig.sorterFn">
            <summary>
            A specific sorter function to execute. Can be passed instead of {@link #property}
            </summary>
        </member>
        <member name="P:Ext.util.StatefulConfig.persistanceProperty">
            <summary>
            The property on this Persistable object that its data is saved to.
            Defaults to 'data' (e.g. all persistable data resides in this.data.)
            </summary>
        </member>
        <member name="T:Ext.util.TapRepeater">
            <summary>
            @class Ext.util.TapRepeater
            @extends Ext.util.Observable
            *
            A wrapper class which can be applied to any element. Fires a "tap" event while
            touching the device. The interval between firings may be specified in the config but
            defaults to 20 milliseconds.
            *
            @constructor
            @param {Mixed} el The element to listen on
            @param {Object} config
            </summary>
        </member>
        <member name="M:Ext.util.TapRepeater.#ctor(System.Object,System.Object)">
            <summary>
            @class Ext.util.TapRepeater
            @extends Ext.util.Observable
            *
            A wrapper class which can be applied to any element. Fires a "tap" event while
            touching the device. The interval between firings may be specified in the config but
            defaults to 20 milliseconds.
            *
            @constructor
            @param {Mixed} el The element to listen on
            @param {Object} config
            </summary>
        </member>
    </members>
</doc>
