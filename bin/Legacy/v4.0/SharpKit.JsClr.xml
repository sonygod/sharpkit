<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.JsClr</name>
    </assembly>
    <members>
        <member name="T:SharpKit.JavaScript.Private.JsImplHashSet`1">
            <summary>Represents a set of values.</summary>
            <typeparam name="T">The type of elements in the hast set.</typeparam>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplISet`1">
            <summary>Provides the base interface for the abstraction of sets.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEnumerable`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <typeparamref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplICollection`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplICollection`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.Add(`0)">
            <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added. </summary>
            <returns>true if the element is added to the set; false if the element is already in the set.</returns>
            <param name="item">The element to add to the set.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.UnionWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IntersectWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.ExceptWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Removes all elements in the specified collection from the current set.</summary>
            <param name="other">The collection of items to remove from the set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.SymmetricExceptWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsSubsetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether a set is a subset of a specified collection.</summary>
            <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsSupersetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a superset of a specified collection.</summary>
            <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsProperSupersetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a correct superset of a specified collection.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ISet`1" /> object is a correct superset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set. </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsProperSubsetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a property (strict) subset of a specified collection.</summary>
            <returns>true if the current set is a correct subset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.Overlaps(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.SetEquals(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <returns>true if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Compilation.JsTypeHelper._GetTypeWithArguments(System.String,System.Boolean)">
            <summary>
            returns null if no args exist in name.
            </summary>
            <param name="typeName"></param>
            <param name="throwIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="T:SharpKit.Web.JsRuntime">
            <summary>
            The client side JavaScript .net runtime, loading and running js .net runtime modules and assembies
            </summary>
        </member>
        <member name="M:SharpKit.Web.JsRuntime.Start">
            <summary>
            Starts the js runtime, binding all currently included js modules / assemblies (.js files),
            this function can be called from javascript using this code:
            <code>JsRuntime.Start();</code>
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMemberInfo.GetBaseMember">
            <summary>
            Returns the base member for custom attribute inheritance
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpKit.JavaScript.Compilation.JsType">
            <summary>
            A type used internally by the Js Type System
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(SharpKit.JavaScript.JsArray)">
            <summary>
            An array to be copied to the array being constructed. 
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(System.Int32)">
            <summary>
            The size of the array. As arrays are zero-based, created elements will have indexes from zero to size -1. 
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(System.Object[])">
            <summary>
            A typed array that contains all the parameters passed to the constructor. These parameters are used as the first elements of the array. 
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source" /> is null.</exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplIEnumerator`1.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1">
            <summary>Defines methods to support the comparison of objects for equality.</summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object of type <typeparamref name="T" /> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T" /> to compare.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <returns>A hash code for the specified object.</returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMath.Truncate(System.Decimal)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number. 
            </summary>
            <param name="d">The value to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMath.Truncate(System.Double)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number. 
            </summary>
            <param name="d">The value to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplList`1.ForEach(System.Action{`0})">
            <summary>Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
            <param name="action">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="action" /> is null.</exception>
        </member>
        <member name="T:SharpKit.JavaScript.Utils.Js">
            <summary>
            TODO: Inline all method implementations!!!
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.decodeURIComponent(System.String)">
            <summary>
            Returns the unencoded version of an encoded component of a Uniform Resource Identifier (URI). 
            </summary>
            <param name="encodedURIString"></param>
            <returns>The required encodedURIString argument is a value representing an encoded URI component.A URIComponent is part of a complete URI. If the encodedURIString is not valid, a URIError occurs. 
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.encodeURIComponent(System.String)">
            <summary>
            Encodes a text string as a valid component of a Uniform Resource Identifier (URI). 
            </summary>
            <param name="encodedURIString"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.encodeURI(System.String)">
            <summary>
            Encodes a text string as a valid Uniform Resource Identifier (URI) 
            </summary>
            <param name="URIString"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.decodeURI(System.String)">
            <summary>
            Returns the unencoded version of an encoded Uniform Resource Identifier (URI). 
            </summary>
            <param name="URIString"></param>
            <returns></returns>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplNotSupportedException">
            <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
            <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplStack`1">
            <summary>
            Implements System.Collections.Generic.Stack &lt;T&gt;
            </summary>
            <remarks>
            A stack is a last-in first-out (LIFO) collection. 
            </remarks>
            <see cref="!:http://en.wikipedia.org/wiki/Stack_(abstract_data_type)"/>
            <typeparam name="T">The type of objects in the collection.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplStack`1"/> class.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Clear">
            <summary>
            Clears all elements from the stack.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.ToArray">
            <summary>
            Returns the collection as an array, leaving all elements on the stack.
            </summary>
            <returns>An array.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Push(`0)">
            <summary>
            Pushes the specified item onto the stack.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Pop">
            <summary>
            Pops and returns an item from the top of the stack.
            </summary>
            <returns></returns>
            <exception cref="T:SharpKit.JavaScript.JsError"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Peek">
            <summary>
            Returns the element at the top of the stack, without removing it.
            </summary>
            <returns></returns>
            <exception cref="T:SharpKit.JavaScript.JsError"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Contains(`0)">
            <summary>
            Determines whether this stack contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this stack contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            SharpKit library for Clr mode, .NET runtime implementation written in pure JavaScript.
            This library supports namespaces, classes, generics, interfaces, enums, delegates, LINQ, reflection and many other .NET features.
            To use this library, you must include the jsclr.js script and call the Compile() method.
            Clr scripts have no dependencies, and you can include your own clr scripts in any order you want.
            </summary>
        </member>
    </members>
</doc>
