<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.Scriptaculous</name>
    </assembly>
    <members>
        <member name="T:SharpKit.Scriptaculous.AutocompleterOptions">
            <summary>
            Ajax.Autocompleter allows for server-powered autocompleting text fields.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.AjaxOptions">
            <summary>
            All Ajax classes share a common set of options and callbacks.
            Callbacks are called at various points in the life-cycle of a request, and always feature the same list of arguments.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.asynchronous">
            <summary>
            (Boolean; default true): Determines whether XMLHttpRequest is used asynchronously or not.
            Synchronous usage is strongly discouraged — it halts all script execution for the duration of the request and blocks the browser UI.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.contentType">
            <summary>
            (String; default application/x-www-form-urlencoded): The Content-type header for your request.
            Change this header if you want to send data in another format (like XML).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.encoding">
            <summary>
            (String; default UTF-8): The encoding for the contents of your request.
            It is best left as-is, but should weird encoding issues arise, you may have to tweak this.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.method">
            <summary>
            (String; default post): The HTTP method to use for the request. The other common possibility is get.
            Abiding by Rails conventions,
            Prototype also reacts to other HTTP verbs(such as put and delete) by submitting via post and adding a extra _method parameter with the originally-requested method.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.parameters">
            <summary>
            The parameters for the request, which will be encoded into the URL for a get method, or into the request body for the other methods.
            This can be provided either as a URL-encoded string, a Hash, or a plain Object.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.postBody">
            <summary>
            Specific contents for the request body on a post method. If it is not provided, the contents of the parameters option will be used instead.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.requestHeaders">
            <summary>
            A set of key-value pairs, with properties representing header names.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.evalJS">
            <summary>
            (Boolean | String; default true):
            Automatically evals the content of Ajax.Response#responseText and populates Ajax.Response#responseJSON with it if the Content-type returned by the server is set to application/json.
            If the request doesn't obey same-origin policy, the content is sanitized before evaluation.
            If you need to force evalutation, pass 'force'. To prevent it altogether, pass false.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.evalJSString">
            <summary>
            (Boolean | String; default true):
            Automatically evals the content of Ajax.Response#responseText and populates Ajax.Response#responseJSON with it if the Content-type returned by the server is set to application/json.
            If the request doesn't obey same-origin policy, the content is sanitized before evaluation.
            If you need to force evalutation, pass 'force'. To prevent it altogether, pass false.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AjaxOptions.sanitizeJSON">
            <summary>
            (Boolean; default is false for same-origin requests, true otherwise): Sanitizes the contents of Ajax.Response#responseText before evaluating it.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.paramName">
            <summary>
            Name of the parameter for the string typed by the user on the autocompletion field
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.tokens">
            <summary>
            Tokenized incremental autocompletion is enabled automatically when an autocompleter is instantiated with the ‘tokens’ option in the options parameter:
            See Also Autocompleter.Base
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.frequency">
            <summary>
            Default : 0.4
            How frequently (in seconds) the input field should be polled for changes before firing an Ajax request.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.minChars">
            <summary>
            Default : 1
            The minimum number of characters that must be entered in the input field before an Ajax request is made.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.select">
            <summary>
            The class name of the element that contains the text to be placed into the input box. By default all text will be used.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.indicator">
            <summary>
            The HTML id of an element to display (using Element.show) while the Ajax request is in progress.
            This element will be hidden with Element.hide when the request is completed.
            This is useful for displaying an animated spinner during processing. See Ajaxload for some image examples.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.Scriptaculous.AutocompleterOptions.updateElement" -->
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.afterUpdateElement">
            <summary>
            Hook for a custom function that’s called following the execution of the built-in function that adds the list item text to the input field,
            which happens after a user has selected an entry.
            (The difference between updateElement and afterUpdateElement is that updateElement replaces the built-in Autocompleter function; afterUpdateElement supplements that built-in function.)
            The function receives two parameters, the input field specified for autocompletion, and the selected item (the &lt;li> item selected)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.AutocompleterOptions.callback">
            <summary>
            This function is called just before the Request is actually made, allowing you to modify the querystring that is sent to the server.
            The function receives the completer’s input field and the default querystring (‘value=XXX’) as parameters.
            You should return the querystring you want used, including the default part.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.Scriptaculous.AutocompleterOptions.parameters" -->
        <member name="T:SharpKit.Scriptaculous.InPlaceCollectionEditor">
            <summary>
            This constructor generates a Flickr-style AJAX-based “on-the-fly” fields with a select box instead of Ajax.InPlaceEditor text fields.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.InPlaceCollectionEditor.#ctor(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.Scriptaculous.InPlaceCollectionEditorOptions)">
            <summary>
            The constructor takes three parameters. The first is the element that should support in-place editing.
            The second is the url to submit the changed value to. The server should respond with the updated value
            (the server might have post-processed it or validation might have prevented it from changing).
            The third is a hash of options. Within that hash of options should be a field called collection that is an array of values to place inside your select box.
            The server side component gets the new value as the parameter ‘value’ (POST method), and should send the new value as the body of the response.
            If the collection parameter (or the result of the loadCollectionURL) is a one-dimensional array,
            the option tag’s value attribute will be the same as the label. For explicit value attributes,
            use a two dimensional array for the collection where the second dimension is a key value pair such as [['key', 'value'], ['key', 'value']].
            </summary>
            <param name="element"> The first is the element that should support in-place editing.</param>
            <param name="url"> The second is the url to submit the changed value to.</param>
            <param name="config"> The third is a hash of options.
            Within that hash of options should be a field called collection that is an array of values to place inside your select box.</param>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.okControl">
            <summary>
            Default : “button”
            What type of ok button to use in edit mode, or none at all (button, link, false)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.cancelControl">
            <summary>
            Default : “link”
            What type of cancel button to use in edit mode, or none at all (button, link, false)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.okText">
            <summary>
            Default : “ok”
            The text of the submit button that submits the changed value to the server
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.cancelText">
            <summary>
            Default : “cancel”
            The text of the link that cancels editing
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.savingText">
            <summary>
            Default : “Saving…”
            The text shown while the text is sent to the server
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.clickToEditText">
            <summary>
            Default : “Click to edit”
            The text shown during mouseover the editable text
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.formId">
            <summary>
            Default : id of the element to edit plus ‘InPlaceForm’
            The id given to the element
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.externalControl">
            <summary>
            Default : null
            ID of an element that acts as an external control used to enter edit mode.
            The external control will be hidden when entering edit mode and shown again when leaving edit mode.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.externalControlOnly">
            <summary>
            Default : false
            Whether or not to disable onclick editing so that only an external control can activate editable mode
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.rows">
            <summary>
            Default : 1
            The row height of the input field (anything greater than 1 uses a multiline textarea for input)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.onComplete">
            <summary>
            Default : “function(transport, element) {new Effect.Highlight(element, {startcolor: this.options.highlightColor});}”
            Code run if update successful with server. Also if user cancels the form. See bug.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.onFailure">
            <summary>
            Default : “function(transport) {alert(“Error communicating with the server: ” + transport.responseText.stripTags());}”
            Code run if update failed with server
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.cols">
            <summary>
            Default : none
            The number of columns the text area should span (works for both single line or multi line)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.size">
            <summary>
            Default : none
            Synonym for ‘cols’ when using single-line (rows=1) input
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.highlightColor">
            <summary>
            Default : Ajax.InPlaceEditor.defaultHighlightColor
            The highlight color. Must be six hex digits, not 3.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.highlightEndColor">
            <summary>
            Default : ”#FFFFFF”
            The color which the highlight fades to. Must be six hex digits, not 3.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.savingClassName">
            <summary>
            Default : “inplaceeditor-saving”
            CSS class added to the element while displaying “Saving…” (removed when server responds)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.formClassName">
            <summary>
            Default : “inplaceeditor-form”
            CSS class used for the in place edit form
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.hoverClassName">
            <summary>
            Default : ?
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.loadTextURL">
            <summary>
            Default : null
            Will cause the text to be loaded from the server (useful if your text is actually textile and formatted on the server)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.loadingText">
            <summary>
            Default : “Loading…”
            If the loadText URL option is specified then this text is displayed while the text is being loaded from the server
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.callback">
            <summary>
            Default : function(form) {Form.serialize(form)}
            A function that will get executed just before the request is sent to the server, should return the parameters to be sent in the URL.
            Will get two parameters, the entire form and the value of the text control.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.submitOnBlur">
            <summary>
            Default : “false”
            This option if true will submit the in_place_edit form when the input tag loses focus.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceEditorOptions.ajaxOptions">
            <summary>
            Default : Options specified to all AJAX calls (loading and saving text), these options are passed through to the prototype AJAX classes.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceCollectionEditorOptions.collection">
            <summary>
            Array of static elements to be displayed as options (in JSON format)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.Scriptaculous.InPlaceCollectionEditorOptions.loadCollectionURL" -->
        <member name="P:SharpKit.Scriptaculous.InPlaceCollectionEditorOptions.loadingCollectionText">
            <summary>
            Text to be displayed while the collection is loading
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.InPlaceCollectionEditorOptions.loadingClassName">
            <summary>
            Class applied to form while the collection is loading
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.InPlaceEditor">
            <summary>
            The in-place “text edit” testing allows for Flickr-style AJAX-backed “on-the-fly” textfields.
            See the documentation on Ajax.InPlaceEditor and Ajax.InPlaceCollectionEditor
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.InPlaceEditor.#ctor(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.Scriptaculous.InPlaceEditorOptions)">
            <summary>
            The constructor takes three parameters.
            The first is the element that should support in-place editing.
            The second is the url to submit the changed value to. The server should respond with the updated value
            (the server might have post-processed it or validation might have prevented it from changing).
            The third is a hash of options.
            The server side component gets the new value as the parameter ‘value’ (POST method), and should send the new value as the body of the response.
            </summary>
            <param name="element">The first is the element that should support in-place editing.</param>
            <param name="url">The second is the url to submit the changed value to. The server should respond with the updated value</param>
            <param name="options">The third is a hash of options.</param>
        </member>
        <member name="T:SharpKit.Scriptaculous.Local">
            <summary>
            The local array autocompleter. Used when you’d prefer to inject an array of autocompletion options into the page, rather than sending out Ajax queries.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Local.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},SharpKit.Scriptaculous.LocalOptions)">
            <summary>
            The constructor takes four parameters.
            The first two are, as usual, the id of the monitored textbox, and id of the autocompletion menu.
            The third is an array of strings that you want to autocomplete from, and the fourth is the options block.
            </summary>
            <param name="id_of_text_field"></param>
            <param name="id_of_div_to_populate"></param>
            <param name="array_of_strings"></param>
            <param name="options"></param>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.choices">
            <summary>
            Default : 10
            How many autocompletion choices to offer
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.partialSearch">
            <summary>
            Default :true
            If false, the autocompleter will match entered text only at the beginning of strings in the autocomplete array.
            Defaults to true, which will match text at the beginning of any word in the strings in the autocomplete array.
            If you want to search anywhere in the string, additionally set the option fullSearch to true
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.fullSearch">
            <summary>
            Default :false
            Search anywhere in autocomplete array strings.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.partialChars">
            <summary>
            Default :2
            How many characters to enter before triggering a partial match (unlike minChars, which defines how many characters are required to do any match at all).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.ignoreCase">
            <summary>
            Default : true
            Whether to ignore case when autocompleting
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.LocalOptions.selector">
            <summary>
            It’s possible to pass in a custom function as the ‘selector’ option, if you prefer to write your own autocompletion logic.
            In that case, the other options above will not apply unless you support them.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Slider">
            <summary>
            A slider control which can be used to select a single or multiple values from a given range, or even set of values.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Slider.#ctor(System.Object,System.Object,SharpKit.Scriptaculous.SliderOptions)">
            <summary>
            To make a slider element, you create a new instance of class Control.Slider.
            handles can either be a single id (or element) or, if you want more than one handle, an array of ids (or elements). track is either id or element.
            </summary>
            <param name="handles"></param>
            <param name="track"></param>
            <param name="options"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Slider.#ctor(System.Object,System.Object)">
            <summary>
            To make a slider element, you create a new instance of class Control.Slider.
            handles can either be a single id (or element) or, if you want more than one handle, an array of ids (or elements). track is either id or element.
            </summary>
            <param name="handles"></param>
            <param name="track"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.SliderOptions.setValue(System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Will update the slider’s value and thus move the slider handle to the appropriate position.
            handleIndex is optional, when it is not passed then ‘active’ (last-dragged/used) handle is used.
            NOTE: when using setValue, the onChange callback function is called.
            </summary>
            <param name="value"></param>
            <param name="handleIndex"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.SliderOptions.setValue(System.Object)">
            <summary>
            Will update the slider’s value and thus move the slider handle to the appropriate position.
            handleIndex is optional, when it is not passed then ‘active’ (last-dragged/used) handle is used.
            NOTE: when using setValue, the onChange callback function is called.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.SliderOptions.setDisabled(System.Boolean)">
            <summary>
            Will set the slider to the disabled state (disabled = true).
            </summary>
            <param name="disabled"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.SliderOptions.setEnabled(System.Boolean)">
            <summary>
            Will set the slider to the enabled state (disabled = false).
            </summary>
            <param name="disabled"></param>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.axis">
            <summary>
            Default: horizontal
            Sets the direction that the slider will move in. It should either be horizontal or vertical.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.increment">
            <summary>
            Default: 1	
            Defines the relationship of value to pixels. Setting this to 1 will mean each movement of 1 pixel equates to 1 value.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.maximum">
            <summary>
            Default: (none)	
            Length of track in pixels adjusted by increment.
            The maximum value that the slider will move to. For horizontal this is to the right while vertical it is down.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.minimum">
            <summary>
            Default: 0
            The minimum value that the slider can move to.
            For horizontal this is to the left while vertical it is up. Note: this also sets the beginning of the slider (zeroes it out).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.range">
            <summary>
            Default: (none)	
            Use the $R(min,max)
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.alignX">
            <summary>
            Default:0	
            This will move the starting point on the x-axis for the handle in relation to the track.
            It is often used to move the ‘point’ of the handle to where 0 should be. It can also be used to set a different starting point on the track.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.alignY">
            <summary>
            Default:0	
            This will move the starting point on the y-axis for the handle in relation to the track.
            It is often used to move the ‘point’ of the handle to where 0 should be. It can also be used to set a different starting point on the track.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.sliderValue">
            <summary>
            Default: 0	
            Will set the initial slider value. The handle will be set to this value, assuming it is within the minimum and maxium values.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.disabled">
            <summary>
            Default:(none)	 
            This will lock the slider so that it will not move and thus is disabled.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.handleImage">
            <summary>
            Default:(none)	 
            The id of the image that represents the handle. This is used to swap out the image src with disabled image src when the slider is enabled.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.handleDisabled">
            <summary>
            Default: (none)	
            The id of the image that represents the disabled handle. This is used to change the image src when the slider is disabled.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.values">
            <summary>
            Default: (none)	
            Accepts an array of integers.
            If set these will be the only legal values for the slider to be at. Thus you can set specific slider values that the user can move the slider to.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.spans">
            <summary>
            Default: (none)	 
            An array of ids or elements which are positioned between handles. This is used only when slider has more than one handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.spansElementArray">
            <summary>
            Default: (none)	 
            An array of ids or elements which are positioned between handles. This is used only when slider has more than one handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SliderOptions.restricted">
            <summary>
            Default: false	
            Used only for multiple handles, when restricted is true, handle(s) with greater indexes are not allowed to have values less than handles with smaller indexes.
            When restricted is false, handles can be moved independently from others.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Draggable">
            <summary>
            To make an element draggable, create a new instance of class Draggable.
            For additional built-in functionality, make a Sortable instead.
            There is also a class named Draggables that exposes functions for observing drag actions.
            Draggables become much more useful when you use them with droppables, which are the areas that you can drag draggables to.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.register">
            <summary>
            function(draggable). Called when you create a new Draggable?. If this is the first Draggable on the page, starts observing mouse events necessary for dragging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.unregister">
            <summary>
            function(draggable). Called by Draggable.destroy()?.
            Stops observing window mouse events if Draggable.drag is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.activate">
            <summary>
            Marks a particular Draggable as the activeDraggable
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.deactivate">
            <summary>
            Sets Draggables.activeDraggable to @null
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.updateDrag">
            <summary>
            Passes the window mousemove event to the @activeDraggable@’s updateDrag function.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.endDrag">
            <summary>
            Caught by the window’s mouseup, stops dragging the activeDraggable, if any, via its endDrag function.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.keyPress">
            <summary>
            Passes the window keypress event to the @activeDraggable@’s keyPress function.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.addObserver">
            <summary>
            Adds an observer to Draggables.observers
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.removeObserver">
            <summary>
            Removes an observer from Draggables.observers. Takes the observer’s element property as a parameter
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Draggables.notify">
            <summary>
            Calls the observers’ onStart(), onEnd(), and onDrag() functions as necessary
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Draggables.drags">
            <summary>
            Array of all Draggables on the page
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Draggables.observers">
            <summary>
            function(draggable). Called when you create a new Draggable?.
            If this is the first Draggable on the page, starts observing mouse events necessary for dragging.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.handleString">
            <summary>
            string or DOM reference, not set by default. As above, except now the value may be a string referencing a CSS class value.
            The first child/grandchild/etc. element found within the element that has this CSS class value will be used as the handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.handle">
            <summary>
            string or DOM reference, not set by default. As above, except now the value may be a string referencing a CSS class value.
            The first child/grandchild/etc. element found within the element that has this CSS class value will be used as the handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.revert">
            <summary>
            boolean or function reference, defaults to false.
            Revert can also be an arbitrary function reference, called when the drag ends.
            Specifying 'failure' will instruct the draggable not to revert if successfully dropped in a droppable.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.revertFunction">
            <summary>
            boolean or function reference, defaults to false.
            Revert can also be an arbitrary function reference, called when the drag ends.
            Specifying 'failure' will instruct the draggable not to revert if successfully dropped in a droppable.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.snap">
            <summary>
            If set to false no snapping occurs.
            Otherwise takes one of the following forms – Δi: one delta value for both horizontal and vertical snap, [Δx, Δy]: delta values for horizontal and vertical snap,
            function(x, y, draggable_object) { return [x, y]; }: a function that receives the proposed new top left
            coordinate pair and returns the coordinate pair to actually be used.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.zindex">
            <summary>
            integer value, defaults to 1000. The css z-index of the draggable item.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.constraint">
            <summary>
            string, not set by default. If set to 'horizontal' or 'vertical' the drag will be constrained to take place only horizontally or vertically.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.ghosting">
            <summary>
            boolean, defaults to false. Clones the element and drags the clone, leaving the original in place until the clone is dropped.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.starteffect">
            <summary>
            Effect, defaults to Effect.Opacity. Defines the effect to use when the draggable starts being dragged.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.reverteffect">
            <summary>
            Effect, default to Effect.Move. Defines the effect to use when the draggable reverts back to its starting position.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.endeffect">
            <summary>
            Effect, defaults to Effect.Opacity. Defines the effect to use when the draggable stops being dragged.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.scrollString">
            <summary>
            string or DOM reference, not set by default. Specifies the element which will scroll when you get to the boundary. By default this is turned off.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.scroll">
            <summary>
            string or DOM reference, not set by default. Specifies the element which will scroll when you get to the boundary. By default this is turned off.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DraggableOptions.scrollSensitivity">
            <summary>
            integer value, defaults to 20 pixels. Minimum distance from the element boundary to start scrolling.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Droppables">
            <summary>
            To make an element react when a Draggable is dropped onto it, you’ll add it to the Droppables of the page with the Droppables.add class method.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.accept">
            <summary>
            Set accept to a string or an array of strings describing CSS classes.
            The Droppable will only accept Draggables that have one or more of these CSS classes.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.acceptArray">
            <summary>
            Set accept to a string or an array of strings describing CSS classes.
            The Droppable will only accept Draggables that have one or more of these CSS classes.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.containment">
            <summary>
            The droppable will only accept the Draggable if the Draggable is contained in the given elements (or element ids).
            Can be a single element or an array of elements. This option is used by Sortables to control Drag-and-Drop between Sortables.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.containmentArray">
            <summary>
            The droppable will only accept the Draggable if the Draggable is contained in the given elements (or element ids).
            Can be a single element or an array of elements. This option is used by Sortables to control Drag-and-Drop between Sortables.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.hoverclass">
            <summary>
            if set, the Droppable will have this additional CSS class when an accepted Draggable is hovered over it.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.overlap">
            <summary>
            If set to ‘horizontal’ or ‘vertical’ the droppable will only react to a Draggable if its overlapping by more than 50% in the given direction. Used by Sortables.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.DroppablesOptions.greedy">
            <summary>
            OBSOLETE starting at v1.6.1 (mid-2006) boolean, defaults to true, stops processing hovering (don’t look for other Droppables that are under the Draggable)
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.create(SharpKit.JavaScript.JsString,SharpKit.Scriptaculous.SortableCreateOptions)">
            <summary>
            Use Sortable.create('id_of_container',[options]); to create new Sortables.
            See Sortable.create. Furthermore, there are special requirements to get sortables to work in FF3 which are also covered in Sortable.create.
            </summary>
            <param name="id_of_container"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.create(SharpKit.JavaScript.JsString)">
            <summary>
            Use Sortable.create('id_of_container',[options]); to create new Sortables.
            See Sortable.create. Furthermore, there are special requirements to get sortables to work in FF3 which are also covered in Sortable.create.
            </summary>
            <param name="id_of_container"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.findElements(SharpKit.Html4.HtmlElement,System.Object,System.Object)">
            <summary>
            Internal function, which may be overridden through the options parameter on creation
            </summary>
            <param name="element"></param>
            <param name="dropon"></param>
            <param name="overlap"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.serialize(SharpKit.JavaScript.JsString,SharpKit.Scriptaculous.SortableSerializeOptions)">
            <summary>
            The Sortable object also provides a function to serialize the Sortable in a format suitable for HTTP GET or POST requests.
            This can be used to submit the order of the Sortable via an Ajax call:
            Important: For this to work, the elements contained in your Sortable must have id attributes in the following form:
            id="string_identifier" 
            
            //Example
            &lt;ol id="container_id">
              &lt;li id="image_1">Item 1&lt;/li>
              &lt;li id="image_2">Item 1&lt;/li>
              &lt;li id="image_3">Item 1&lt;/li>
            &lt;/ol>
            Only the identifier part of the id attribute will be serialized. If you want to use an other form of id attributes, you need to implement your own serialization.
            </summary>
            <param name="id_of_container"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.serialize(SharpKit.JavaScript.JsString)">
            <summary>
            The Sortable object also provides a function to serialize the Sortable in a format suitable for HTTP GET or POST requests.
            This can be used to submit the order of the Sortable via an Ajax call:
            Important: For this to work, the elements contained in your Sortable must have id attributes in the following form:
            id="string_identifier" 
            
            //Example
            &lt;ol id="container_id">
              &lt;li id="image_1">Item 1&lt;/li>
              &lt;li id="image_2">Item 1&lt;/li>
              &lt;li id="image_3">Item 1&lt;/li>
            &lt;/ol>
            Only the identifier part of the id attribute will be serialized. If you want to use an other form of id attributes, you need to implement your own serialization.
            </summary>
            <param name="id_of_container"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sortable.sequence(SharpKit.JavaScript.JsString)">
            <summary>
            The Sortable object also provides a function to get a sequence array of the id’s.
            </summary>
            <param name="id_of_container"></param>
            <returns></returns>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.tag">
            <summary>
            Default: ‘li’
            The kind of tag (of the child elements of the container) that will be made sortable. For UL and OL containers, this is ‘LI’, you have to provide the tag kind for other sorts of child tags.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.only">
            <summary>
            Default: (none)
            Further restricts the selection of child elements to only encompass elements with the given CSS class
            (or, if you provide an array of strings, on any of the classes).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.overlap">
            <summary>
            Default: ‘vertical’
            Either ‘vertical’ or ‘horizontal’. For floating sortables or horizontal lists, choose ‘horizontal’. Vertical lists should use ‘vertical’.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.constraint">
            <summary>
            string, not set by default. If set to 'horizontal' or 'vertical' the drag will be constrained to take place only horizontally or vertically.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.containment">
            <summary>
            Default: (only within container)
            Enables dragging and dropping between Sortables. Takes an array of elements or element-ids (of the containers).
            Important note: To ensure that two way dragging between containers is possible, place all Sortable.create calls after the container elements
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.containmentArray">
            <summary>
            Default: (only within container)
            Enables dragging and dropping between Sortables. Takes an array of elements or element-ids (of the containers).
            Important note: To ensure that two way dragging between containers is possible, place all Sortable.create calls after the container elements
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.format">
            <summary>
            Default:
            /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/
            The format that the id is computed from each item-id
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.handleString">
            <summary>
            string or DOM reference, not set by default. As above, except now the value may be a string referencing a CSS class value.
            The first child/grandchild/etc. element found within the element that has this CSS class value will be used as the handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.handle">
            <summary>
            string or DOM reference, not set by default. As above, except now the value may be a string referencing a CSS class value.
            The first child/grandchild/etc. element found within the element that has this CSS class value will be used as the handle.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.hoverclass">
            <summary>
            Default: (none)
            Gives the created Droppables a hoverclass (see there).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.ghosting">
            <summary>
            If set to true, dragged elements of the Sortable will be cloned and appear as “ghost”, i.e. a representation of their original element,
            instead of directly dragging the original element. See below for more details.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.dropOnEmpty">
            <summary>
            f set to true, the Sortable container will be made into a Droppable,
            that can receive a Draggable (as according to the containment rules) as a child element when there are no more elements inside.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.scroll">
            <summary>
            Default: none
            When the sortable is contained in an element with style overflow:scroll, this value can be set to the ID of that container (or the container’s DOM object).
            The scroll position of the container will now move along when the sortable is dragged out of the viewable area.
            The container must have overflow:scroll set to include scroll bars. Does not yet work for scrolling the entire document.
            To get this to work correctly, include this line in your code before creating the sortable: Position.includeScrollOffsets = true;
            Update: Scrolling the whole document does work (at least on Safari 3.2 (Mac), IE7 and Firefox). Use scroll: window
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.scrollSensitivity">
            <summary>
            Default: 20
            Will start scrolling when element is x pixels from the bottom, where x is the scrollSensitivity.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.scrollSpeed">
            <summary>
            Default: 15
            Will scroll the element in increments of scrollSpeed pixels.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.tree">
            <summary>
            Default: false
            If true, sets sortable functionality to elements listed in treeTag
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableCreateOptions.treeTag">
            <summary>
            Default: ul
            The element type tree nodes are contained in.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.SortableSerializeOptions.tag">
            <summary>
            The kind of tag (of the child elements of the container) that will be serialized.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.Scriptaculous.SortableSerializeOptions.name" -->
        <member name="T:SharpKit.Scriptaculous.Builder">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="attributes">Object, Typical attributes are id, className, style, onclick, etc.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="attributes">Object, Typical attributes are id, className, style, onclick, etc.</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsNumber)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="attributes">Object, Typical attributes are id, className, style, onclick, etc.</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.Scriptaculous.Builder.node(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Use Builder to easily create DOM elements dynamically.
            Special cases:
            class: When specifying the class attribute for the node, use className to circumvent a Firefox bug.
            for: To set a for attribute (in labels) use htmlFor, since ‘for’ is a reserved word in javascript.
            </summary>
            <param name="elementName">String, The tag name for the element</param>
            <param name="attributes">Object, Typical attributes are id, className, style, onclick, etc.</param>
            <param name="children">Array, List of other nodes to be appended as children
            If an element of the children Array is a String or Number, it will be automatically appended as a text node.
            Instead of an array, children can also be a JavaScript String or Number, to ease usage.</param>
            <returns></returns>
        </member>
        <member name="T:SharpKit.Scriptaculous.Sound">
            <summary>
            Use Sound to play audio directly from the browser.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sound.play(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="replace">replace the current active track, defauts to false</param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sound.play(SharpKit.JavaScript.JsString)">
            <summary>
            
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sound.enable">
            <summary>
            Sound.enable does not resume the playback, just allows the next track to be played.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Sound.disable">
            <summary>
            Sound.disable does not disable the playback immediately, it just prevents the next tracks from being played.
            Watch the demo to see how to stop the sound immediately.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Effect">
            <summary>
            The seven core effects Effect.Opacity, Effect.Scale, Effect.Morph, Effect.Move, Effect.Highlight, Effect.Parallel, Effect.Tween are the foundation of the script.aculo.us Visual Effects JavaScript library.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Effect.#ctor(SharpKit.Html4.HtmlElement,SharpKit.Scriptaculous.EffectOptions)">
            <summary>
            The basic syntax to start an effect
            </summary>
            <param name="el">element can be either a string containing the id of the element, or a Java Script DOM element object.</param>
            <param name="required_params">required-params depend on the effect being called and may not be needed. Most effects do not have required parameters.
            See the documentation for the core effects to learn if the effect has required parameters or if this parameter should be omitted.</param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Effect.#ctor(SharpKit.JavaScript.JsString,SharpKit.Scriptaculous.EffectOptions)">
            <summary>
            The basic syntax to start an effect
            </summary>
            <param name="el">element can be either a string containing the id of the element, or a Java Script DOM element object.</param>
            <param name="required_params">required-params depend on the effect being called and may not be needed. Most effects do not have required parameters.
            See the documentation for the core effects to learn if the effect has required parameters or if this parameter should be omitted.</param>
        </member>
        <member name="M:SharpKit.Scriptaculous.Effect.cancel">
            <summary>
            Stop the effect as is.
            </summary>
        </member>
        <member name="M:SharpKit.Scriptaculous.Effect.inspect">
            <summary>
            Get basic debugging information about the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.element">
            <summary>
            The element the effect is applied to.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.options">
            <summary>
            Holds the options you gave to the effect.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.currentFrame">
            <summary>
            The number of the last frame rendered.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.startOn">
            <summary>
            The times (in ms) when the effect was started, and when it will be finished.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.finishOn">
            <summary>
            The times (in ms) when the effect was started, and when it will be finished.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.Effect.effects">
            <summary>
            On an Effect.Parallel effect, there’s an effects[] array containing the individual effects the parallel effect is composed of.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.duration">
            <summary>
            duration of the effect in seconds, given as a float. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.fps">
            <summary>
            Target this many frames per second. Default to 25. Can’t be higher than 100.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.transition">
            <summary>
            Sets a function that modifies the current point of the animation, which is between 0 and 1.
            Following transitions are supplied:
            Effect.Transitions.sinoidal (default),
            Effect.Transitions.linear,
            Effect.Transitions.reverse,
            Effect.Transitions.wobble, 
            Effect.Transitions.flicker, 
            Effect.Transitions.pulse, 
            Effect.Transitions.spring, 
            Effect.Transitions.none,
            Effect.Transitions.full.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.from">
            <summary>
            Sets the starting point of the transition, a float between 0.0 and 1.0. Defaults to 0.0.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.to">
            <summary>
            Sets the end point of the transition, a float between 0.0 and 1.0. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.sync">
            <summary>
            Sets whether the effect should render new frames automatically (which it does by default).
            If true, you can render frames manually by calling the render() instance method of an effect. This is used by Effect.Parallel().
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.queue">
            <summary>
            Sets queuing options.
            When used with a string, can be ‘front’ or ‘end’ to queue the effect in the global effects queue at the beginning or end,
            or a queue parameter object that can have { position: ’front/end’, scope: ’scope’, limit: 1 }. For more info on this, see Effect Queues.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.queueObject">
            <summary>
            Sets queuing options.
            When used with a string, can be ‘front’ or ‘end’ to queue the effect in the global effects queue at the beginning or end,
            or a queue parameter object that can have { position: ’front/end’, scope: ’scope’, limit: 1 }. For more info on this, see Effect Queues.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.EffectOptions.delay">
            <summary>
            Sets the number of seconds to wait before the effect actually starts. Defaults to 0.0.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Highlight">
            <summary>
            This effect flashes a color as the background of an element.
            It is mostly used to draw attention to a part of the page that has been updated via JavaScript or AJAX, when the update would not otherwise be obvious.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.HighlightOptions.startcolor">
            <summary>
            Sets the color of first frame of the highlight. Defaults to ”#ffff99” (a light yellow).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.HighlightOptions.endcolor">
            <summary>
            Sets the color of the last frame of the highlight. This is best set to the background color of the highlighted element. Defaults to ”#ffffff” (white).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.HighlightOptions.restorecolor">
            <summary>
            Sets the background-color of the element after the highlight has finished. Defaults to the current background-color of the highlighted element.
            If the restorecolor option is not given,
            Effect.Highlight tries to find out the current background color of the element,
            which will only work reliably across browsers if the color is given with a CSS rgb triplet, like rgb(0, 255, 0).
            Also be aware that applying an effect (without setting a restorecolor), to an element that already has an highlight effect in progress,
            will cause the restorecolor to be set to the elements background-color at the time of the new effect, and not the original background-color.
            For example, click the example below 4-5 times in quick succession, and the paragraph will stay yellow as opposed to the original white.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.HighlightOptions.keepBackgroundImage">
            <summary>
            Unless this is set to true, any background image on the element will not be preserved.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Morph">
             <summary>
            This effect changes the CSS properties of an element.
             </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.MorphOptions.style">
            <summary>
            the target style of your element, as a string written with the standard CSS syntax, a hash, or a CSS class name.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Move">
            <summary>
            This effect flashes a color as the background of an element.
            It is mostly used to draw attention to a part of the page that has been updated via JavaScript or AJAX, when the update would not otherwise be obvious.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.MoveOptions.x">
            <summary>
            integer value, either the new absolute target of the effect elements left value or the modifier of its current left value, depending on the mode option
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.MoveOptions.y">
            <summary>
            integer value, either the new absolute target of the effect elements top value or the modifier of its current top value, depending on the mode option
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.MoveOptions.mode">
            <summary>
            string, defaults to 'relative', can also be 'absolute', specifies if the element is moved absolutely or relative to its own position.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Opacity">
            <summary>
            This effect changes an element’s opacity (transparency).
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Scale">
             <summary>
            This effect changes an elements width and height dimensions and the base for em units.
            This allows for smooth, automatic relative scaling of elements contained within the scaled element.
             </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleX">
            <summary>
            Sets whether the element should be scaled horizontally, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleY">
            <summary>
            Sets whether the element should be scaled vertically, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleContent">
            <summary>
            Sets whether content scaling should be enabled, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleFromCenter">
            <summary>
            If true, scale the element in a way that the center of the element stays on the same position on the screen, defaults to false.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleMode">
            <summary>
            Either ‘box’ (default, scales the visible area of the element) or ‘contents’ (scales the complete element,
            that is parts normally only visible byscrolling are taken into account).
            You can also precisely control the size the element will become by assigning the originalHeight and originalWidth variables to scaleMode.
            Example: scaleMode: { originalHeight: 900, originalWidth: 900 }
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ScaleOptions.scaleFrom">
            <summary>
            Sets the starting percentage for scaling, defaults to 100.0.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Parallel">
             <summary>
            This is a special effect which allows to combine more than one core effect into a parallel effect.
            It’s the only effect that doesn’t take an element as first parameter, but an array of subeffects.
             </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Templet">
            <summary>
            This effect flashes a color as the background of an element.
            It is mostly used to draw attention to a part of the page that has been updated via JavaScript or AJAX, when the update would not otherwise be obvious.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.TempletOptions.startcolor">
            <summary>
            Sets the color of first frame of the highlight. Defaults to ”#ffff99” (a light yellow).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.TempletOptions.endcolor">
            <summary>
            Sets the color of the last frame of the highlight. This is best set to the background color of the highlighted element. Defaults to ”#ffffff” (white).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.TempletOptions.restorecolor">
            <summary>
            Sets the background-color of the element after the highlight has finished. Defaults to the current background-color of the highlighted element.
            If the restorecolor option is not given,
            Effect.Highlight tries to find out the current background color of the element,
            which will only work reliably across browsers if the color is given with a CSS rgb triplet, like rgb(0, 255, 0).
            Also be aware that applying an effect (without setting a restorecolor), to an element that already has an highlight effect in progress,
            will cause the restorecolor to be set to the elements background-color at the time of the new effect, and not the original background-color.
            For example, click the example below 4-5 times in quick succession, and the paragraph will stay yellow as opposed to the original white.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.TempletOptions.keepBackgroundImage">
            <summary>
            Unless this is set to true, any background image on the element will not be preserved.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Appear">
            <summary>
            Make an element appear. 
            If the element was previously set to display:none inside the style attribute of the element, the effect will automatically show the element. 
            This means that display must be set within the style attribute of an object, and not in the CSS in the head of the document or a linked file.
            In other words, this Effect will not work if display:none is set within style tag or linked CSS file. Alternatively,
            display:none can be set using a document.getElementById script even if no style is set in the style attribute.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.BlindDown">
            <summary>
            This effect simulates a window blind, where the contents of the affected elements stay in place.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleX">
            <summary>
            defaults to false
            Sets whether the element should be scaled horizontally, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleY">
            <summary>
            defaults to true
            Sets whether the element should be scaled vertically, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleContent">
            <summary>
            defaults to true
            Sets whether content scaling should be enabled, defaults to true.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleFromCenter">
            <summary>
            defaults to false
            If true, scale the element in a way that the center of the element stays on the same position on the screen, defaults to false.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleMode">
            <summary>
            Either ‘box’ (default, scales the visible area of the element) or ‘contents’ (scales the complete element,
            that is parts normally only visible byscrolling are taken into account).
            You can also precisely control the size the element will become by assigning the originalHeight and originalWidth variables to scaleMode.
            Example: scaleMode: { originalHeight: 900, originalWidth: 900 }
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleFrom">
            <summary>
            integer value, percentage (0%–100%), defaults to 100
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.BlindOptions.scaleTo">
            <summary>
            integer value, percentage (0%–100%), defaults to 0
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.BlindUp">
            <summary>
            This effect simulates a window blind, where the contents of the affected elements stay in place.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.DropOut">
            <summary>
            Makes an element drop and fade out at the same time.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Fade">
            <summary>
            Makes an element fade away and takes it out of the document flow when the effect is complete by setting the CSS display property to none. Opposite of Effect.Appear.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Fold">
            <summary>
            Reduce the element to its top then to left to make it disappear.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Grow">
            <summary>
            “Grows” an element into a specific direction (see demo for better understanding).
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.GrowOptions.direction">
            <summary>
            string, defaults to 'center', can also be: 'top-left', 'top-right', 'bottom-left', 'bottom-right', specifying the origin from which to “grow” the element
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Puff">
            <summary>
            Gives the illusion of the element puffing away (like a in a cloud of smoke).
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Pulsate">
            <summary>
            Pulsates the element, loops over five times over fading out and in.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Shake">
            <summary>
            Moves the element slightly to the left, then to the right, repeatedly.
            </summary>
        </member>
        <member name="P:SharpKit.Scriptaculous.ShakeOptions.distance">
            <summary>
            integer value, defaults to 20, the number of pixels to move horizontally
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Shrink">
            <summary>
            “Shrinks” an element into a specific direction (see demo for better understanding), hides it when the effect is complete.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.SlideDown">
            <summary>
            This effect simulates a window blind, where the contents of the affected elements scroll up and down accordingly.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.SlideUp">
            <summary>
            This effect simulates a window blind, where the contents of the affected elements scroll up accordingly.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.Squish">
            <summary>
            Reduce the element to its top-left corner.
            </summary>
        </member>
        <member name="T:SharpKit.Scriptaculous.SwitchOff">
            <summary>
            Gives the illusion of a TV-style switch off.
            </summary>
        </member>
    </members>
</doc>
