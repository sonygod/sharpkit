<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.Yui</name>
    </assembly>
    <members>
        <member name="T:Y_.Test_.ShouldError">
            <summary>
            ShouldError is subclass of Error that is thrown whenever
            a test is expected to throw an error but doesn't.
            </summary>
        </member>
        <member name="T:Y_.Test_.AssertionError">
            <summary>
            Error is thrown whenever an assertion fails. It provides methods
            to more easily get at error information and also provides a base class
            from which more specific assertion errors can be derived.
            </summary>
        </member>
        <member name="M:Y_.Test_.AssertionError.getMessage">
            <summary>
            Returns a fully formatted error for an assertion failure. This should
            be overridden by all subclasses to provide specific information.
            </summary>
        </member>
        <member name="M:Y_.Test_.AssertionError.toString">
            <summary>
            Returns a string representation of the error.
            </summary>
        </member>
        <member name="T:Y_.Test_.Runner">
            <summary>
            Runs test suites and test cases, providing events to allowing for the
            interpretation of test results.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.add(System.Object)">
            <summary>
            Adds a test suite or test case to the list of test objects to run.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.clear">
            <summary>
            Removes all test objects from the runner.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.getCoverage(SharpKit.JavaScript.JsAction)">
            <summary>
            Returns the coverage report for the files that have been executed.
            This returns only coverage information for files that have been
            instrumented using YUI Test Coverage and only those that were run
            in the same pass.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.getName">
            <summary>
            Retrieves the name of the current result set.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.getResults(SharpKit.JavaScript.JsAction)">
            <summary>
            Returns the last complete results set from the TestRunner. Null is returned
            if the TestRunner is running or no tests have been run.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.isRunning">
            <summary>
            Indicates that the TestRunner is busy running tests and therefore can't
            be stopped and results cannot be gathered.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.isWaiting">
            <summary>
            Indicates if the TestRunner is waiting for a test to resume
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.resume(SharpKit.JavaScript.JsAction)">
            <summary>
            Resumes the TestRunner after wait() was called.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.run(System.Object)">
            <summary>
            Runs the test suite.
            </summary>
        </member>
        <member name="M:Y_.Test_.Runner.setName(System.Object)">
            <summary>
            The name assigned to the master suite of the TestRunner. This is the name
            that is output as the root's name when results are retrieved.
            </summary>
        </member>
        <member name="T:Y_.Test_.ComparisonFailure">
            <summary>
            ComparisonFailure is subclass of Error that is thrown whenever
            a comparison between two values fails. It provides mechanisms to retrieve
            both the expected and actual value.
            </summary>
        </member>
        <member name="M:Y_.Test_.ComparisonFailure.getMessage">
            <summary>
            Returns a fully formatted error for an assertion failure. This message
            provides information about the expected and actual values.
            </summary>
        </member>
        <member name="P:Y_.Test_.ComparisonFailure.actual">
            <summary>
            The actual value.
            </summary>
        </member>
        <member name="P:Y_.Test_.ComparisonFailure.expected">
            <summary>
            The expected value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Shape" -->
        <member name="M:Y_.Shape.addClass(System.Object)">
            <summary>
            Add a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.Shape.compareTo(System.Object)">
            <summary>
            Compares nodes to determine if they match.
            Node instances can be compared to each other and/or HTMLElements.
            </summary>
        </member>
        <member name="M:Y_.Shape.contains(System.Object)">
            <summary>
            Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Shape.destroy">
            <summary>
            Destroys the instance.
            </summary>
        </member>
        <member name="M:Y_.Shape.getBounds">
            <summary>
            Returns the bounds for a shape.
            Calculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.
            The calculated bounding box is used by the graphic instance to calculate its viewBox.
            </summary>
        </member>
        <member name="M:Y_.Shape.getXY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.Shape.init">
            <summary>
            Init method, invoked during construction.
            Calls `initializer` method.
            </summary>
        </member>
        <member name="M:Y_.Shape.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.Shape.rotate(Y_.DataType_.Number)">
            <summary>
            Rotates the shape clockwise around it transformOrigin.
            </summary>
        </member>
        <member name="M:Y_.Shape.scale(Y_.DataType_.Number)">
            <summary>
            Specifies a 2d scaling operation.
            </summary>
        </member>
        <member name="M:Y_.Shape.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.Shape.setXY(Y_.Array)">
            <summary>
            Set the position of the shape in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.Shape.skew(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis and y-axis.
            </summary>
        </member>
        <member name="M:Y_.Shape.skewX(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis.
            </summary>
        </member>
        <member name="M:Y_.Shape.skewY(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the y-axis.
            </summary>
        </member>
        <member name="M:Y_.Shape.test(System.Object)">
            <summary>
            Test if the supplied node matches the supplied selector.
            </summary>
        </member>
        <member name="M:Y_.Shape.translate(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Specifies a 2d translation.
            </summary>
        </member>
        <member name="M:Y_.Shape.translateX(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the x-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="M:Y_.Shape.translateY(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the y-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.WidgetAnim">
            <summary>
            A plugin class which can be used to animate widget visibility changes.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Base">
            <summary>
            The base class for all Plugin instances.
            </summary>
        </member>
        <member name="T:Y_.Base">
            <summary>
            <p>
            A base class which objects requiring attributes and custom event support can
            extend. Base also handles the chaining of initializer and destructor methods across
            the hierarchy as part of object construction and destruction. Additionally, attributes configured
            through the static <a href="#property_Base.ATTRS">ATTRS</a> property for each class
            in the hierarchy will be initialized by Base.
            </p>
            <p>
            The static <a href="#property_Base.NAME">NAME</a> property of each class extending
            from Base will be used as the identifier for the class, and is used by Base to prefix
            all events fired by instances of that class.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Base._defDestroyFn(Y_.EventFacade)">
            <summary>
            Default destroy event handler
            </summary>
        </member>
        <member name="M:Y_.Base._defInitFn(Y_.EventFacade)">
            <summary>
            Default init event handler
            </summary>
        </member>
        <member name="M:Y_.Base.build(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            <p>
            Builds a custom constructor function (class) from the
            main function, and array of extension functions (classes)
            provided. The NAME field for the constructor function is
            defined by the first argument passed in.
            </p>
            <p>
            The cfg object supports the following properties
            </p>
            <dl>
            <dt>dynamic &#60;boolean&#62;</dt>
            <dd>
            <p>If true (default), a completely new class
            is created which extends the main class, and acts as the
            host on which the extension classes are augmented.</p>
            <p>If false, the extensions classes are augmented directly to
            the main class, modifying the main class' prototype.</p>
            </dd>
            <dt>aggregates &#60;String[]&#62;</dt>
            <dd>An array of static property names, which will get aggregated
            on to the built class, in addition to the default properties build
            will always aggregate as defined by the main class' static _buildCfg
            property.
            </dd>
            </dl>
            </summary>
        </member>
        <member name="M:Y_.Base.create(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new class (constructor function) which extends the base class passed in as the second argument,
            and mixes in the array of extensions provided.
            Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).
            Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).
            **NOTE FOR COMPONENT DEVELOPERS**: Both the `base` class, and `extensions` can define static a `_buildCfg`
            property, which acts as class creation meta-data, and drives how special static properties from the base
            class, or extensions should be copied, aggregated or (custom) mixed into the newly created class.
            The `_buildCfg` property is a hash with 3 supported properties: `statics`, `aggregates` and `custom`, e.g:
            // If the Base/Main class is the thing introducing the property:
            MyBaseClass._buildCfg = {
            // Static properties/methods to copy (Alias) to the built class.
            statics: ["CopyThisMethod", "CopyThisProperty"],
            // Static props to aggregate onto the built class.
            aggregates: ["AggregateThisProperty"],
            // Static properties which need custom handling (e.g. deep merge etc.)
            custom: {
            "CustomProperty" : function(property, Receiver, Supplier) {
            ...
            var triggers = Receiver.CustomProperty.triggers;
            Receiver.CustomProperty.triggers = triggers.concat(Supplier.CustomProperty.triggers);
            ...
            }
            }
            };
            MyBaseClass.CopyThisMethod = function() {...};
            MyBaseClass.CopyThisProperty = "foo";
            MyBaseClass.AggregateThisProperty = {...};
            MyBaseClass.CustomProperty = {
            triggers: [...]
            }
            // Or, if the Extension is the thing introducing the property:
            MyExtension._buildCfg = {
            statics : ...
            aggregates : ...
            custom : ...
            }
            This way, when users pass your base or extension class to `Y.Base.create` or `Y.Base.mix`, they don't need to
            know which properties need special handling. `Y.Base` has a buildCfg which defines `ATTRS` for custom mix handling
            (to protect the static config objects), and `Y.Widget` has a buildCfg which specifies `HTML_PARSER` for
            straight up aggregation.
            </summary>
        </member>
        <member name="M:Y_.Base.destroy">
            <summary>
            <p>
            Destroy lifecycle method. Fires the destroy
            event, prior to invoking destructors for the
            class hierarchy.
            </p>
            <p>
            Subscribers to the destroy
            event can invoke preventDefault on the event object, to prevent destruction
            from proceeding.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Base.init(System.Object)">
            <summary>
            Init lifecycle method, invoked during construction.
            Fires the init event prior to setting up attributes and
            invoking initializers for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Base.mix(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            <p>Mixes in a list of extensions to an existing class.</p>
            </summary>
        </member>
        <member name="M:Y_.Base.plug">
            <summary>
            Alias for <a href="Plugin.Host.html#method_Plugin.Host.plug">Plugin.Host.plug</a>. See aliased
            method for argument and return value details.
            </summary>
        </member>
        <member name="M:Y_.Base.unplug">
            <summary>
            Alias for <a href="Plugin.Host.html#method_Plugin.Host.unplug">Plugin.Host.unplug</a>. See the
            aliased method for argument and return value details.
            </summary>
        </member>
        <member name="P:Y_.Base.ATTRS">
            <summary>
            The default set of attributes which will be available for instances of this class, and
            their configuration. In addition to the configuration properties listed by
            Attribute's <a href="Attribute.html#method_addAttr">addAttr</a> method, the attribute
            can also be configured with a "cloneDefaultValue" property, which defines how the statically
            defined value field should be protected ("shallow", "deep" and false are supported values).
            By default if the value is an object literal or an array it will be "shallow" cloned, to
            protect the default value.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.afterHostEvent(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listens for the "after" moment of events fired by the host object.
            Listeners attached through this method will be detached when the plugin is unplugged.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.afterHostMethod(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Injects a function to be executed after a given method on host object.
            The function will be detached when the plugin is unplugged.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.beforeHostMethod(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Injects a function to be executed before a given method on host object.
            The function will be detached when the plugin is unplugged.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.destructor">
            <summary>
            Destructor lifecycle implementation.
            Removes any event listeners or injected methods applied by the Plugin
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.doAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listens for the "after" moment of events fired by the host,
            or injects code "after" a given method on the host.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.doBefore(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listens for the "on" moment of events fired by the host,
            or injects code "before" a given method on the host.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.initializer(System.Object)">
            <summary>
            Initializer lifecycle implementation.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Base.onHostEvent(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listens for the "on" moment of events fired by the host object.
            Listeners attached through this method will be detached when the plugin is unplugged.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Base.ATTRS">
            <summary>
            Object defining the set of attributes supported by the Plugin.Base class
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Base.host">
            <summary>
            The plugin's host object.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.WidgetAnim._uiAnimSetVisible(System.Object)">
            <summary>
            The injected method used to override the host widget's _uiSetVisible implementation with
            an animated version of the same.
            <p>This method replaces the default _uiSetVisible handler
            Widget provides, by injecting itself before _uiSetVisible,
            and preventing the default behavior. </p>
            </summary>
        </member>
        <member name="M:Y_.Plugin_.WidgetAnim.destructor">
            <summary>
            The initializer destructor implementation. Responsible for destroying the configured
            animation instances.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.WidgetAnim.initializer(System.Object)">
            <summary>
            The initializer lifecycle implementation. Modifies the host widget's
            visibililty implementation to add animation.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.WidgetAnim.ANIMATIONS">
            <summary>
            Pre-Packaged Animation implementations, which can be used for animShow and animHide attribute
            values.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.WidgetAnim.animHide">
            <summary>
            Default animation instance used for hiding the widget (opacity fade-out)
            </summary>
        </member>
        <member name="P:Y_.Plugin_.WidgetAnim.animShow">
            <summary>
            Default animation instance used for showing the widget (opacity fade-in)
            </summary>
        </member>
        <member name="P:Y_.Plugin_.WidgetAnim.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration for the plugin.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.WidgetAnim.duration">
            <summary>
            Default duration in seconds. Used as the default duration for the default animation implementations
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ScrollViewScrollbars">
            <summary>
            ScrollView plugin that adds scroll indicators to ScrollView instances
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._defaultNode">
            <summary>
            Creates default node instances for scrollbars
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._hostDimensionsChange">
            <summary>
            Set up the DOM nodes for the scrollbars. This method is invoked whenever the
            host's _uiDimensionsChange fires, giving us the opportunity to remove un-needed
            scrollbars, as well as add one if necessary.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._hostScrollEnd(System.Object)">
            <summary>
            Handler for the scrollEnd event fired by the host. Default implementation flashes the scrollbar
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._setNode(Y_.Node,System.Object)">
            <summary>
            Setter for the verticalNode and horizontalNode attributes
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._show(System.Object,System.Object)">
            <summary>
            Internal hide/show implementation utility method
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars._update(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            AOP method, invoked after the host's _uiScrollTo method,
            to position and resize the scroll bars
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars.flash">
            <summary>
            Momentarily flash the scroll bars to indicate current scroll position
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars.hide(System.Object)">
            <summary>
            Hide the scroll bar indicators
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars.initializer">
            <summary>
            Designated initializer
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewScrollbars.show(System.Object)">
            <summary>
            Show the scroll bar indicators
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ScrollViewScrollbars.ATTRS">
            <summary>
            The default attribute configuration for the plugin
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ScrollViewScrollbars.SCROLLBAR_TEMPLATE">
            <summary>
            HTML template for the scrollbar
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ConsoleFilters">
            <summary>
            <p>Provides Plugin.ConsoleFilters plugin class.</p>
            <p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._afterCacheLimitChange(Y_.Event)">
            <summary>
            Trims the cache of entries to the appropriate new length.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._afterCategoryChange(Y_.Event)">
            <summary>
            Triggers the Console to update if a known category filter
            changes value (e.g. visible => hidden).  Updates the appropriate
            checkbox's checked state if necessary.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._afterClearConsole">
            <summary>
            Flushes the cached entries after a call to the Console's clearConsole().
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._afterSourceChange(Y_.Event)">
            <summary>
            Triggers the Console to update if a known source filter
            changes value (e.g. visible => hidden).  Updates the appropriate
            checkbox's checked state if necessary.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._createCheckbox(Y_.Node,System.Object)">
            <summary>
            Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for
            the provided type and name.  The checkbox and label are appended to the
            container node passes as the first arg.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._filterBuffer">
            <summary>
            Flushes the Console's print buffer of any entries that have a category
            or source that is currently being excluded.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._onCategoryCheckboxClick(Y_.Event)">
            <summary>
            Passes checkbox clicks on to the category attribute.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._onEntry(Y_.Event)">
            <summary>
            Ensures a filter is set up for any new categories or sources and
            collects the messages in _entries.  If the message is stamped with a
            category or source that is currently being filtered out, the message
            will not pass to the Console's print buffer.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._onSourceCheckboxClick(Y_.Event)">
            <summary>
            Passes checkbox clicks on to the source attribute.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._setCacheLimit(Y_.DataType_.Number)">
            <summary>
            Setter method for cacheLimit attribute.  Basically a validator to ensure
            numeric input.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._uiSetCheckbox(System.Object,System.Object,System.Object)">
            <summary>
            Updates the checked property of a filter checkbox of the specified type.
            If no checkbox is found for the input params, one is created.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._validateCategory(System.Object,System.Object)">
            <summary>
            Validates category updates are objects and the subattribute is not too
            deep.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters._validateSource(System.Object,System.Object)">
            <summary>
            Validates source updates are objects and the subattribute is not too
            deep.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.bindUI">
            <summary>
            Binds to checkbox click events and internal attribute change events to
            maintain the UI state.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.destructor">
            <summary>
            Removes the plugin UI and unwires events.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.hideCategory(System.Object)">
            <summary>
            Hides any number of categories from the UI.  Convenience method for
            myConsole.filter.set('category.foo', false); set('category.bar', false);
            and so on.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.hideSource(System.Object)">
            <summary>
            Hides any number of sources from the UI.  Convenience method for
            myConsole.filter.set('source.foo', false); set('source.bar', false);
            and so on.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.initializer">
            <summary>
            Initialize entries collection and attach listeners to host events and
            methods.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.refreshConsole">
            <summary>
            Repopulates the Console with entries appropriate to the current filter
            settings.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.renderUI">
            <summary>
            Adds the category and source filter sections to the Console footer.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.showCategory(System.Object)">
            <summary>
            Shows any number of categories in the UI.  Convenience method for
            myConsole.filter.set('category.foo', true); set('category.bar', true);
            and so on.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.showSource(System.Object)">
            <summary>
            Shows any number of sources in the UI.  Convenience method for
            myConsole.filter.set('source.foo', true); set('source.bar', true);
            and so on.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ConsoleFilters.syncUI">
            <summary>
            Updates the UI to be in accordance with the current state of the plugin.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters._categories">
            <summary>
            The container node created to house the category filters.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters._entries">
            <summary>
            Collection of all log messages passed through since the plugin's
            instantiation.  This holds all messages regardless of filter status.
            Used as a single source of truth for repopulating the Console body when
            filters are changed.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters._sources">
            <summary>
            The container node created to house the source filters.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters.category">
            <summary>
            <p>Map of entry categories to their visibility status.  Update a
            particular category's visibility by setting the subattribute to true
            (visible) or false (hidden).</p>
            <p>For example, yconsole.filter.set('category.info', false) to hide
            log entries with the category/logLevel of 'info'.</p>
            <p>Similarly, yconsole.filter.get('category.warn') will return a
            boolean indicating whether that category is currently being included
            in the UI.</p>
            <p>Unlike the YUI instance configuration's logInclude and logExclude
            properties, filtered entries are only hidden from the UI, but
            can be made visible again.</p>
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters.CHROME_CLASSES">
            <summary>
            Classnames used by the templates when creating nodes.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ConsoleFilters.source">
            <summary>
            <p>Map of entry sources to their visibility status.  Update a
            particular sources's visibility by setting the subattribute to true
            (visible) or false (hidden).</p>
            <p>For example, yconsole.filter.set('sources.slider', false) to hide
            log entries originating from Y.Slider.</p>
            </summary>
        </member>
        <member name="T:Y_.PieChart">
            <summary>
            The PieChart class creates a pie chart
            </summary>
        </member>
        <member name="M:Y_.PieChart._getAriaMessage(Y_.DataType_.Number)">
            <summary>
            Returns the appropriate message based on the key press.
            </summary>
        </member>
        <member name="M:Y_.PieChart.getSeriesItem(System.Object,System.Object)">
            <summary>
            Returns an object literal containing a categoryItem and a valueItem for a given series index.
            </summary>
        </member>
        <member name="P:Y_.PieChart.axes">
            <summary>
            Axes to appear in the chart.
            </summary>
        </member>
        <member name="P:Y_.PieChart.seriesCollection">
            <summary>
            Collection of series to appear on the chart. This can be an array of Series instances or object literals
            used to describe a Series instance.
            </summary>
        </member>
        <member name="T:Y_.Loader">
            <summary>
            Loader dynamically loads script and css files.  It includes the dependency
            info for the version of the library in use, and will automatically pull in
            dependencies for the modules requested. It can load the
            files from the Yahoo! CDN, and it can utilize the combo service provided on
            this network to reduce the number of http connections required to download
            YUI files. You can also specify an external, custom combo service to host
            your modules as well.
            var Y = YUI();
            var loader = new Y.Loader({
            filter: 'debug',
            base: '../../',
            root: 'build/',
            combine: true,
            require: ['node', 'dd', 'console']
            });
            var out = loader.resolve(true);
            </summary>
        </member>
        <member name="M:Y_.Loader.addAlias(Y_.Array,System.Object)">
            <summary>
            Adds an alias module to the system
            </summary>
        </member>
        <member name="M:Y_.Loader.addGroup(System.Object,System.Object)">
            <summary>
            Add a new module group
            </summary>
        </member>
        <member name="M:Y_.Loader.addModule(System.Object)">
            <summary>
            Add a new module to the component metadata.
            </summary>
        </member>
        <member name="M:Y_.Loader.addModule(System.Object,System.Object)">
            <summary>
            Add a new module to the component metadata.
            </summary>
        </member>
        <member name="M:Y_.Loader.calculate(System.Object,System.Object)">
            <summary>
            Calculates the dependency tree, the result is stored in the sorted
            property.
            </summary>
        </member>
        <member name="M:Y_.Loader.filterRequires(Y_.Array)">
            <summary>
            Explodes the required array to remove aliases and replace them with real modules
            </summary>
        </member>
        <member name="M:Y_.Loader.formatSkin(System.Object,System.Object)">
            <summary>
            Returns the skin module name for the specified skin name.  If a
            module name is supplied, the returned skin module name is
            specific to the module passed in.
            </summary>
        </member>
        <member name="M:Y_.Loader.getLangPackName(System.Object,System.Object)">
            <summary>
            Builds a module name for a language pack
            </summary>
        </member>
        <member name="M:Y_.Loader.getModule(System.Object)">
            <summary>
            Get's the loader meta data for the requested module
            </summary>
        </member>
        <member name="M:Y_.Loader.getProvides(System.Object)">
            <summary>
            Returns a hash of module names the supplied module satisfies.
            </summary>
        </member>
        <member name="M:Y_.Loader.getRequires(System.Object)">
            <summary>
            Returns an object containing properties for all modules required
            in order to load the requested module
            </summary>
        </member>
        <member name="M:Y_.Loader.insert(System.Object,System.Object)">
            <summary>
            inserts the requested modules and their dependencies.
            <code>type</code> can be "js" or "css".  Both script and
            css are inserted if type is not provided.
            </summary>
        </member>
        <member name="M:Y_.Loader.isCSSLoaded(System.Object)">
            <summary>
            Check to see if named css module is already loaded on the page
            </summary>
        </member>
        <member name="M:Y_.Loader.load(System.Object)">
            <summary>
            Shortcut to calculate, resolve and load all modules.
            var loader = new Y.Loader({
            ignoreRegistered: true,
            modules: {
            mod: {
            path: 'mod.js'
            }
            },
            requires: [ 'mod' ]
            });
            loader.load(function() {
            console.log('All modules have loaded..');
            });
            </summary>
        </member>
        <member name="M:Y_.Loader.loadNext(System.Object)">
            <summary>
            Executed every time a module is loaded, and if we are in a load
            cycle, we attempt to load the next script.  Public so that it
            is possible to call this if using a method other than
            Y.register to determine when scripts are fully loaded
            </summary>
        </member>
        <member name="M:Y_.Loader.onCSS">
            <summary>
            Callback for the 'CSSComplete' event.  When loading YUI components
            with CSS the CSS is loaded first, then the script.  This provides
            a moment you can tie into to improve the presentation of the page
            while the script is loading.
            </summary>
        </member>
        <member name="M:Y_.Loader.onFailure">
            <summary>
            Callback that will be executed if there is a failure
            </summary>
        </member>
        <member name="M:Y_.Loader.onProgress">
            <summary>
            Callback executed each time a script or css file is loaded
            </summary>
        </member>
        <member name="M:Y_.Loader.onSuccess">
            <summary>
            Callback that will be executed when the loader is finished
            with an insert
            </summary>
        </member>
        <member name="M:Y_.Loader.onTimeout">
            <summary>
            Callback that will be executed if a timeout occurs
            </summary>
        </member>
        <member name="M:Y_.Loader.require(System.Object)">
            <summary>
            Add a requirement for one or more module
            </summary>
        </member>
        <member name="M:Y_.Loader.resolve">
            <summary>
            Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
            </summary>
        </member>
        <member name="M:Y_.Loader.resolve(Y_.Array)">
            <summary>
            Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
            </summary>
        </member>
        <member name="M:Y_.Loader.resolve(System.Object)">
            <summary>
            Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
            </summary>
        </member>
        <member name="M:Y_.Loader.resolve(System.Object,Y_.Array)">
            <summary>
            Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
            </summary>
        </member>
        <member name="P:Y_.Loader.base">
            <summary>
            The base directory.
            </summary>
        </member>
        <member name="P:Y_.Loader.charset">
            <summary>
            The charset attribute for inserted nodes
            </summary>
        </member>
        <member name="P:Y_.Loader.comboBase">
            <summary>
            Base path for the combo service
            </summary>
        </member>
        <member name="P:Y_.Loader.context">
            <summary>
            The execution context for all callbacks
            </summary>
        </member>
        <member name="P:Y_.Loader.cssAttributes">
            <summary>
            An object literal containing attributes to add to link nodes
            </summary>
        </member>
        <member name="P:Y_.Loader.data">
            <summary>
            Data that is passed to all callbacks
            </summary>
        </member>
        <member name="P:Y_.Loader.FILTER_DEFS">
            <summary>
            Default filters for raw and debug
            </summary>
        </member>
        <member name="P:Y_.Loader.filters">
            <summary>
            per-component filter specification.  If specified for a given
            component, this overrides the filter config.
            </summary>
        </member>
        <member name="P:Y_.Loader.ignoreRegistered">
            <summary>
            Ignore modules registered on the YUI global
            </summary>
        </member>
        <member name="P:Y_.Loader.jsAttributes">
            <summary>
            An object literal containing attributes to add to script nodes
            </summary>
        </member>
        <member name="P:Y_.Loader.maxURLLength">
            <summary>
            Max url length for combo urls.  The default is 2048. This is the URL
            limit for the Yahoo! hosted combo servers.  If consuming
            a different combo service that has a different URL limit
            it is possible to override this default by supplying
            the maxURLLength config option.  The config option will
            only take effect if lower than the default.
            </summary>
        </member>
        <member name="P:Y_.Loader.moduleInfo">
            <summary>
            The library metadata
            </summary>
        </member>
        <member name="P:Y_.Loader.patterns">
            <summary>
            If a module name is predefined when requested, it is checked againsts
            the patterns provided in this property.  If there is a match, the
            module is added with the default configuration.
            At the moment only supporting module prefixes, but anticipate
            supporting at least regular expressions.
            </summary>
        </member>
        <member name="P:Y_.Loader.rollups">
            <summary>
            List of rollup files found in the library metadata
            </summary>
        </member>
        <member name="P:Y_.Loader.root">
            <summary>
            Root path to prepend to module path for the combo
            service
            </summary>
        </member>
        <member name="P:Y_.Loader.skipped">
            <summary>
            List of skipped modules during insert() because the module
            was not defined
            </summary>
        </member>
        <member name="P:Y_.Loader.timeout">
            <summary>
            Timeout value in milliseconds.  If set, self value will be used by
            the get utility.  the timeout event will fire if
            a timeout occurs.
            </summary>
        </member>
        <member name="T:Y_.Histogram">
            <summary>
            Histogram is the base class for Column and Bar series.
            </summary>
        </member>
        <member name="M:Y_.Histogram.drawSeries">
            <summary>
            Draws the series.
            </summary>
        </member>
        <member name="P:Y_.Histogram._defaultFillColors">
            <summary>
            Collection of default colors used for marker fills in a series when not specified by user.
            </summary>
        </member>
        <member name="T:Y_.GroupCircle">
            <summary>
            Abstract class for creating groups of circles with the same styles and dimensions.
            </summary>
        </member>
        <member name="M:Y_.GroupCircle.drawShape(System.Object)">
            <summary>
            Algorithm for drawing shape.
            </summary>
        </member>
        <member name="T:Y_.Do_.Halt">
            <summary>
            Return a Halt object when you want to terminate the execution
            of all subsequent subscribers as well as the wrapped method
            if it has not exectued yet.  Useful for Do.before subscribers.
            </summary>
        </member>
        <member name="T:Y_.DD_.Drop">
            <summary>
            Provides the ability to create a Drop Target.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drop.addToGroup(System.Object)">
            <summary>
            Add this Drop instance to a group, this should be used for on-the-fly group additions.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drop.inGroup(Y_.Array)">
            <summary>
            Check if this target is in one of the supplied groups.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drop.removeFromGroup(System.Object)">
            <summary>
            Remove this Drop instance from a group, this should be used for on-the-fly group removals.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drop.sizeShim">
            <summary>
            Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..
            </summary>
        </member>
        <member name="P:Y_.DD_.Drop.bubbles">
            <summary>
            Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drop.groups">
            <summary>
            Array of groups to add this drop into.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drop.node">
            <summary>
            Y.Node instanace to use as the element to make a Drop Target
            </summary>
        </member>
        <member name="P:Y_.DD_.Drop.region">
            <summary>
            A region object associated with this target, used for checking regions while dragging.
            </summary>
        </member>
        <member name="T:Y_.Cookie">
            <summary>
            Cookie utility.
            </summary>
        </member>
        <member name="M:Y_.Cookie.exists(System.Object)">
            <summary>
            Determines if the cookie with the given name exists. This is useful for
            Boolean cookies (those that do not follow the name=value convention).
            </summary>
        </member>
        <member name="M:Y_.Cookie.get(System.Object,System.Object)">
            <summary>
            Returns the cookie value for the given name.
            </summary>
        </member>
        <member name="M:Y_.Cookie.getSub(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Returns the value of a subcookie.
            </summary>
        </member>
        <member name="M:Y_.Cookie.getSubs(System.Object)">
            <summary>
            Returns an object containing name-value pairs stored in the cookie with the given name.
            </summary>
        </member>
        <member name="M:Y_.Cookie.remove(System.Object,System.Object)">
            <summary>
            Removes a cookie from the machine by setting its expiration date to
            sometime in the past.
            </summary>
        </member>
        <member name="M:Y_.Cookie.removeSub(System.Object,System.Object,System.Object)">
            <summary>
            Removes a sub cookie with a given name.
            </summary>
        </member>
        <member name="M:Y_.Cookie.set(System.Object,System.Object,System.Object)">
            <summary>
            Sets a cookie with a given name and value.
            </summary>
        </member>
        <member name="M:Y_.Cookie.setSub(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets a sub cookie with a given name to a particular value.
            </summary>
        </member>
        <member name="M:Y_.Cookie.setSubs(System.Object,System.Object,System.Object)">
            <summary>
            Sets a cookie with a given name to contain a hash of name-value pairs.
            </summary>
        </member>
        <member name="T:Y_.ChartLegend">
            <summary>
            ChartLegend provides a legend for a chart.
            </summary>
        </member>
        <member name="T:Y_.Widget">
            <summary>
            A base class for widgets, providing:
            <ul>
            <li>The render lifecycle method, in addition to the init and destroy
            lifecycle methods provide by Base</li>
            <li>Abstract methods to support consistent MVC structure across
            widgets: renderer, renderUI, bindUI, syncUI</li>
            <li>Support for common widget attributes, such as boundingBox, contentBox, visible,
            disabled, focused, strings</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.Widget._afterChildSelectedChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the <code>selected</code>
            attribute, responsible for updating the UI, in response to
            attribute changes.
            </summary>
        </member>
        <member name="M:Y_.Widget._applyParser(System.Object)">
            <summary>
            Utilitity method used to apply the <code>HTML_PARSER</code> configuration for the
            instance, to retrieve config data values.
            </summary>
        </member>
        <member name="M:Y_.Widget._bindDOM">
            <summary>
            Sets up DOM listeners, on elements rendered by the widget.
            </summary>
        </member>
        <member name="M:Y_.Widget._bindUI">
            <summary>
            Sets up DOM and CustomEvent listeners for the widget.
            </summary>
        </member>
        <member name="M:Y_.Widget._bindUIChild">
            <summary>
            Binds event listeners responsible for updating the UI state in response
            to WidgetChild related state changes.
            <p>
            This method is invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget._defaultCB">
            <summary>
            Returns the default value for the contentBox attribute.
            For the Widget class, this will be the srcNode if provided, otherwise null (resulting in
            a new contentBox node instance being created)
            </summary>
        </member>
        <member name="M:Y_.Widget._defRenderFn(Y_.EventFacade,Y_.Node)">
            <summary>
            Default render handler
            </summary>
        </member>
        <member name="M:Y_.Widget._destroyBox">
            <summary>
            Removes and destroys the widgets rendered boundingBox, contentBox,
            and detaches bound UI events.
            </summary>
        </member>
        <member name="M:Y_.Widget._getStrings(System.Object)">
            <summary>
            Returns the strings key/value hash for a paricular locale, without locale lookup applied.
            </summary>
        </member>
        <member name="M:Y_.Widget._getUIEventNode">
            <summary>
            Returns the node on which to bind delegate listeners.
            Override of Widget's implementation of _getUIEventNode() to ensure that
            all event listeners are bound to the Widget's topmost DOM element.
            This ensures that the firing of each type of Widget UI event (click,
            mousedown, etc.) is facilitated by a single, top-level, delegated DOM
            event listener.
            </summary>
        </member>
        <member name="M:Y_.Widget._mapInstance(System.Object)">
            <summary>
            Utility method used to add an entry to the boundingBox id to instance map.
            This method can be used to populate the instance with lazily created boundingBox Node references.
            </summary>
        </member>
        <member name="M:Y_.Widget._onDocFocus(Y_.EventFacade)">
            <summary>
            DOM focus event handler, used to sync the state of the Widget with the DOM
            </summary>
        </member>
        <member name="M:Y_.Widget._onDocMouseDown(Y_.EventFacade)">
            <summary>
            "mousedown" event handler for the owner document of the
            widget's bounding box.
            </summary>
        </member>
        <member name="M:Y_.Widget._removeLoadingClassNames">
            <summary>
            Removes class names representative of the widget's loading state from
            the boundingBox.
            </summary>
        </member>
        <member name="M:Y_.Widget._renderBoxClassNames">
            <summary>
            Applies standard class names to the boundingBox and contentBox
            </summary>
        </member>
        <member name="M:Y_.Widget._renderUI">
            <summary>
            Initializes the UI state for the Widget's bounding/content boxes.
            </summary>
        </member>
        <member name="M:Y_.Widget._setStrings(System.Object,System.Object)">
            <summary>
            Sets strings for a particular locale, merging with any existing
            strings which may already be defined for the locale.
            </summary>
        </member>
        <member name="M:Y_.Widget._strSetter(System.Object)">
            <summary>
            The default setter for the strings attribute. Merges partial sets
            into the full string set, to allow users to partial sets of strings
            </summary>
        </member>
        <member name="M:Y_.Widget._syncUI">
            <summary>
            Updates the widget UI to reflect the attribute state.
            </summary>
        </member>
        <member name="M:Y_.Widget._syncUIChild">
            <summary>
            Synchronizes the UI to match the WidgetChild state.
            <p>
            This method is invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetChildSelected(Y_.DataType_.Number)">
            <summary>
            Updates the UI to reflect the <code>selected</code> attribute value.
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetDisabled(System.Object)">
            <summary>
            Sets the disabled state for the UI
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetFocused(System.Object,System.Object)">
            <summary>
            Sets the focused state for the UI
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetHeight(System.Object)">
            <summary>
            Sets the height on the widget's bounding box element
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetTabIndex(System.Object)">
            <summary>
            Set the tabIndex on the widget's rendered UI
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetVisible(System.Object)">
            <summary>
            Sets the visible state for the UI
            </summary>
        </member>
        <member name="M:Y_.Widget._uiSetWidth(System.Object)">
            <summary>
            Sets the width on the widget's bounding box element
            </summary>
        </member>
        <member name="M:Y_.Widget.ancestor(Y_.DataType_.Number)">
            <summary>
            Returns the Widget instance at the specified depth.
            </summary>
        </member>
        <member name="M:Y_.Widget.bindUI">
            <summary>
            Configures/Sets up listeners to bind Widget State to UI/DOM
            This method is not called by framework and is not chained
            automatically for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Widget.blur">
            <summary>
            Causes the Widget to lose focus by setting the "focused" attribute
            to "false"
            </summary>
        </member>
        <member name="M:Y_.Widget.destroy(System.Object)">
            <summary>
            <p>
            Destroy lifecycle method. Fires the destroy
            event, prior to invoking destructors for the
            class hierarchy.
            Overrides Base's implementation, to support arguments to destroy
            </p>
            <p>
            Subscribers to the destroy
            event can invoke preventDefault on the event object, to prevent destruction
            from proceeding.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.destructor">
            <summary>
            Destructor lifecycle implementation for the Widget class. Purges events attached
            to the bounding box and content box, removes them from the DOM and removes
            the Widget from the list of registered widgets.
            </summary>
        </member>
        <member name="M:Y_.Widget.disable">
            <summary>
            Set the Widget's "disabled" attribute to "true".
            </summary>
        </member>
        <member name="M:Y_.Widget.enable">
            <summary>
            Set the Widget's "disabled" attribute to "false".
            </summary>
        </member>
        <member name="M:Y_.Widget.focus">
            <summary>
            Causes the Widget to receive the focus by setting the "focused"
            attribute to "true".
            </summary>
        </member>
        <member name="M:Y_.Widget.getByNode(System.Object)">
            <summary>
            Returns the widget instance whose bounding box contains, or is, the given node.
            <p>
            In the case of nested widgets, the nearest bounding box ancestor is used to
            return the widget instance.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.getClassName(System.Object)">
            <summary>
            Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined
            by the <code>Y.config.classNamePrefix</code> attribute used by <code>ClassNameManager</code> and
            <code>Widget.NAME.toLowerCase()</code> (e.g. "yui-widget-xxxxx-yyyyy", based on default values for
            the prefix and widget class name).
            <p>
            The instance based version of this method can be used to generate standard prefixed classnames,
            based on the instances NAME, as opposed to Widget.NAME. This method should be used when you
            need to use a constant class name across different types instances.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.getDefaultLocale">
            <summary>
            Returns the default locale for the widget (the locale value defined by the
            widget class, or provided by the user during construction).
            </summary>
        </member>
        <member name="M:Y_.Widget.getSkinName">
            <summary>
            Returns the name of the skin that's currently applied to the widget.
            This is only really useful after the widget's DOM structure is in the
            document, either by render or by progressive enhancement.  Searches up
            the Widget's ancestor axis for a class yui3-skin-(name), and returns the
            (name) portion.  Otherwise, returns null.
            </summary>
        </member>
        <member name="M:Y_.Widget.getString(System.Object)">
            <summary>
            Helper method to get a specific string value
            </summary>
        </member>
        <member name="M:Y_.Widget.getString(System.Object,System.Object)">
            <summary>
            Gets the string for a particular key, for a particular locale, performing locale lookup.
            <p>
            If no values if defined for the key, for the given locale, the value for the
            default locale (in initial locale set for the class) is returned.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.getStrings(System.Object)">
            <summary>
            Gets the entire strings hash for a particular locale, performing locale lookup.
            <p>
            If no values of the key are defined for a particular locale the value for the
            default locale (in initial locale set for the class) is returned.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.hide">
            <summary>
            Hides the Widget by setting the "visible" attribute to "false".
            </summary>
        </member>
        <member name="M:Y_.Widget.initializer(System.Object)">
            <summary>
            Initializer lifecycle implementation for the Widget class. Registers the
            widget instance, and runs through the Widget's HTML_PARSER definition.
            </summary>
        </member>
        <member name="M:Y_.Widget.isRoot">
            <summary>
            Determines if the Widget is the root Widget in the
            object hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Widget.next(System.Object)">
            <summary>
            Returns the Widget's next sibling.
            </summary>
        </member>
        <member name="M:Y_.Widget.previous(System.Object)">
            <summary>
            Returns the Widget's previous sibling.
            </summary>
        </member>
        <member name="M:Y_.Widget.render(System.Object)">
            <summary>
            Establishes the initial DOM for the widget. Invoking this
            method will lead to the creating of all DOM elements for
            the widget (or the manipulation of existing DOM elements
            for the progressive enhancement use case).
            <p>
            This method should only be invoked once for an initialized
            widget.
            </p>
            <p>
            It delegates to the widget specific renderer method to do
            the actual work.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Widget.renderer">
            <summary>
            Creates DOM (or manipulates DOM for progressive enhancement)
            This method is invoked by render() and is not chained
            automatically for the class hierarchy (unlike initializer, destructor)
            so it should be chained manually for subclasses if required.
            </summary>
        </member>
        <member name="M:Y_.Widget.renderUI">
            <summary>
            Adds nodes to the DOM
            This method is not called by framework and is not chained
            automatically for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Widget.show">
            <summary>
            Shows the Widget by setting the "visible" attribute to "true".
            </summary>
        </member>
        <member name="M:Y_.Widget.syncUI">
            <summary>
            Refreshes the rendered UI, based on Widget State
            This method is not called by framework and is not chained
            automatically for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Widget.toString">
            <summary>
            Generic toString implementation for all widgets.
            </summary>
        </member>
        <member name="P:Y_.Widget.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration for the Widget.
            </summary>
        </member>
        <member name="P:Y_.Widget.HTML_PARSER">
            <summary>
            Object hash, defining how attribute values are to be parsed from
            markup contained in the widget's content box. e.g.:
            <pre>
            {
            // Set single Node references using selector syntax
            // (selector is run through node.one)
            titleNode: "span.yui-title",
            // Set NodeList references using selector syntax
            // (array indicates selector is to be run through node.all)
            listNodes: ["li.yui-item"],
            // Set other attribute types, using a parse function.
            // Context is set to the widget instance.
            label: function(contentBox) {
            return contentBox.one("span.title").get("innerHTML");
            }
            }
            </pre>
            </summary>
        </member>
        <member name="P:Y_.Widget.strings">
            <summary>
            Collection of strings used to label elements of the Widget's UI.
            </summary>
        </member>
        <member name="P:Y_.Widget.tabIndex">
            <summary>
            Number (between -32767 to 32767) indicating the widget's
            position in the default tab flow.  The value is used to set the
            "tabIndex" attribute on the widget's bounding box.  Negative values allow
            the widget to receive DOM focus programmatically (by calling the focus
            method), while being removed from the default tab flow.  A value of
            null removes the "tabIndex" attribute from the widget's bounding box.
            </summary>
        </member>
        <member name="P:Y_.Widget.UI_EVENTS">
            <summary>
            Map of DOM events that should be fired as Custom Events by the
            Widget instance.
            </summary>
        </member>
        <member name="M:Y_.ChartLegend._getDefaultStyles">
            <summary>
            Returns the default hash for the `styles` attribute.
            </summary>
        </member>
        <member name="M:Y_.ChartLegend._getPlotDefaults">
            <summary>
            Gets the default values for series that use the utility. This method is used by
            the class' `styles` attribute's getter to get build default values.
            </summary>
        </member>
        <member name="M:Y_.ChartLegend.destructor">
            <summary>
            Destructor implementation ChartLegend class. Removes all items and the Graphic instance from the widget.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.background">
            <summary>
            Background for the legend.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.chart">
            <summary>
            Reference to the `Chart` instance.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.height">
            <summary>
            The height of the legend. Depending on the implementation of the ChartLegend, this value is `readOnly`. By default, the legend is included in the layout of the `Chart` that
            it references. Under this circumstance, `height` is always `readOnly`. When the legend is rendered in its own dom element, the `readOnly` status is determined by the
            direction of the legend. If the `position` is `top` or `bottom` or the `direction` is `horizontal`, height is `readOnly`. If the position is `left` or `right` or the `direction`
            is `vertical`, height can be explicitly set. If height is not explicitly set, the height will be determined by the width of the legend's parent element.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.styles">
            <summary>
            Properties used to display and style the ChartLegend.  This attribute is inherited from `Renderer`. Below are the default values:
            <dl>
            <dt>gap</dt><dd>Distance, in pixels, between the `ChartLegend` instance and the chart's content. When `ChartLegend` is rendered within a `Chart` instance this value is applied.</dd>
            <dt>hAlign</dt><dd>Defines the horizontal alignment of the `items` in a `ChartLegend` rendered in a horizontal direction. This value is applied when the instance's `position` is set to top or bottom. This attribute can be set to left, center or right. The default value is center.</dd>
            <dt>vAlign</dt><dd>Defines the vertical alignment of the `items` in a `ChartLegend` rendered in vertical direction. This value is applied when the instance's `position` is set to left or right. The attribute can be set to top, middle or bottom. The default value is middle.</dd>
            <dt>item</dt><dd>Set of style properties applied to the `items` of the `ChartLegend`.
            <dl>
            <dt>hSpacing</dt><dd>Horizontal distance, in pixels, between legend `items`.</dd>
            <dt>vSpacing</dt><dd>Vertical distance, in pixels, between legend `items`.</dd>
            <dt>label</dt><dd>Properties for the text of an `item`.
            <dl>
            <dt>color</dt><dd>Color of the text. The default values is "#808080".</dd>
            <dt>fontSize</dt><dd>Font size for the text. The default value is "85%".</dd>
            </dl>
            </dd>
            <dt>marker</dt><dd>Properties for the `item` markers.
            <dl>
            <dt>width</dt><dd>Specifies the width of the markers.</dd>
            <dt>height</dt><dd>Specifies the height of the markers.</dd>
            </dl>
            </dd>
            </dl>
            </dd>
            <dt>background</dt><dd>Properties for the `ChartLegend` background.
            <dl>
            <dt>fill</dt><dd>Properties for the background fill.
            <dl>
            <dt>color</dt><dd>Color for the fill. The default value is "#faf9f2".</dd>
            </dl>
            </dd>
            <dt>border</dt><dd>Properties for the background border.
            <dl>
            <dt>color</dt><dd>Color for the border. The default value is "#dad8c9".</dd>
            <dt>weight</dt><dd>Weight of the border. The default values is 1.</dd>
            </dl>
            </dd>
            </dl>
            </dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.width">
            <summary>
            The width of the legend. Depending on the implementation of the ChartLegend, this value is `readOnly`. By default, the legend is included in the layout of the `Chart` that
            it references. Under this circumstance, `width` is always `readOnly`. When the legend is rendered in its own dom element, the `readOnly` status is determined by the
            direction of the legend. If the `position` is `left` or `right` or the `direction` is `vertical`, width is `readOnly`. If the position is `top` or `bottom` or the `direction`
            is `horizontal`, width can be explicitly set. If width is not explicitly set, the width will be determined by the width of the legend's parent element.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.x">
            <summary>
            Indicates the x position of legend.
            </summary>
        </member>
        <member name="P:Y_.ChartLegend.y">
            <summary>
            Indicates the y position of legend.
            </summary>
        </member>
        <member name="T:Y_.CategoryAxis">
            <summary>
            CategoryAxis manages category data on an axis.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.formatLabel(System.Object,System.Object)">
            <summary>
            Formats a label based on the axis type and optionally specified format.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getDataByKey(System.Object)">
            <summary>
            Returns an array of values based on an identifier key.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getEdgeOffset(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Gets the distance that the first and last ticks are offset from there respective
            edges.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getKeyValueAt(System.Object,Y_.DataType_.Number)">
            <summary>
            Returns a value based of a key value and an index.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getLabelByIndex(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Calculates and returns a value based on the number of labels and the index of
            the current label.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getMajorUnitDistance(Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            Returns the distance between major units on an axis.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getMaximumValue">
            <summary>
            Returns a string corresponding to the last label on an
            axis.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getMinimumValue">
            <summary>
            Returns a string corresponding to the first label on an
            axis.
            </summary>
        </member>
        <member name="M:Y_.CategoryAxis.getTotalMajorUnits(System.Object,Y_.DataType_.Number)">
            <summary>
            Returns the total number of majorUnits that will appear on an axis.
            </summary>
        </member>
        <member name="T:Y_.CanvasRect">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Rect.html">`Rect`</a> class.
            `CanvasRect` is not intended to be used directly. Instead, use the <a href="Rect.html">`Rect`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Rect.html">`Rect`</a>
            class will point to the `CanvasRect` class.
            </summary>
        </member>
        <member name="T:Y_.AxisType">
            <summary>
            AxisType is an abstract class that manages the data for an axis.
            </summary>
        </member>
        <member name="M:Y_.AxisType._hasDataOverflow">
            <summary>
            Checks to see if data extends beyond the range of the axis. If so,
            that data will need to be hidden. This method is internal, temporary and subject
            to removal in the future.
            </summary>
        </member>
        <member name="M:Y_.AxisType.addKey(System.Object)">
            <summary>
            Adds an array to the key hash.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getDataByKey(System.Object)">
            <summary>
            Returns an array of values based on an identifier key.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getEdgeOffset(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Gets the distance that the first and last ticks are offset from there respective
            edges.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getKeyValueAt(System.Object,Y_.DataType_.Number)">
            <summary>
            Returns a value based of a key value and an index.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getLabelByIndex(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Calculates and returns a value based on the number of labels and the index of
            the current label.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getMajorUnitDistance(Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            Returns the distance between major units on an axis.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getMaximumValue">
            <summary>
            Returns a string corresponding to the last label on an
            axis.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getMinimumValue">
            <summary>
            Returns a string corresponding to the first label on an
            axis.
            </summary>
        </member>
        <member name="M:Y_.AxisType.getTotalMajorUnits">
            <summary>
            Returns the total number of majorUnits that will appear on an axis.
            </summary>
        </member>
        <member name="M:Y_.AxisType.removeKey(System.Object)">
            <summary>
            Removes an array from the key hash.
            </summary>
        </member>
        <member name="P:Y_.AxisType.data">
            <summary>
            Array of axis data
            </summary>
        </member>
        <member name="P:Y_.AxisType.dataMaximum">
            <summary>
            The maximum value contained in the `data` array. Used for
            `maximum` when `autoMax` is true.
            </summary>
        </member>
        <member name="P:Y_.AxisType.dataMinimum">
            <summary>
            The minimum value contained in the `data` array. Used for
            `minimum` when `autoMin` is true.
            </summary>
        </member>
        <member name="P:Y_.AxisType.dataProvider">
            <summary>
            Instance of `ChartDataProvider` that the class uses
            to build its own data.
            </summary>
        </member>
        <member name="P:Y_.AxisType.keyCollection">
            <summary>
            Array containing all the keys in the axis.
            </summary>
        </member>
        <member name="P:Y_.AxisType.keys">
            <summary>
            Hash of array identifed by a string value.
            </summary>
        </member>
        <member name="P:Y_.AxisType.maximum">
            <summary>
            The maximum value that will appear on an axis.
            </summary>
        </member>
        <member name="P:Y_.AxisType.minimum">
            <summary>
            The minimum value that will appear on an axis.
            </summary>
        </member>
        <member name="T:Y_.YUI">
            <summary>
            The YUI global namespace object.  If YUI is already defined, the
            existing YUI object will not be overwritten so that defined
            namespaces are preserved.  It is the constructor for the object
            the end user interacts with.  As indicated below, each instance
            has full custom event support, but only if the event system
            is available.  This is a self-instantiable factory function.  You
            can invoke it directly like this:
            YUI().use('*', function(Y) {
            // ready
            });
            But it also works like this:
            var Y = YUI();
            Configuring the YUI object:
            YUI({
            debug: true,
            combine: false
            }).use('node', function(Y) {
            //Node is ready to use
            });
            See the API docs for the <a href="config.html">Config</a> class
            for the complete list of supported configuration properties accepted
            by the YUI constuctor.
            </summary>
        </member>
        <member name="P:Y_.YUIContext.Current">
            <summary>
            A predefined global variable named 'Y', serves as a placeholder for Yui global object
            and helps streamlining work with YUI and SharpKit
            </summary>
        </member>
        <member name="M:Y_.YUI.add(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Registers a module with the YUI global.  The easiest way to create a
            first-class YUI module is to use the YUI component build tool.
            http://yuilibrary.com/projects/builder
            The build system will produce the `YUI.add` wrapper for you module, along
            with any configuration info required for the module.
            </summary>
        </member>
        <member name="M:Y_.YUI.after(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Like `on()`, this method creates a subscription to a custom event or to the
            execution of a method on an object.
            For events, `after()` subscribers are executed after the event's
            `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            NOTE: The subscription signature shown is for events, not for function
            injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
            for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.after(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Like `on()`, this method creates a subscription to a custom event or to the
            execution of a method on an object.
            For events, `after()` subscribers are executed after the event's
            `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            NOTE: The subscription signature shown is for events, not for function
            injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
            for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.after(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Like `on()`, this method creates a subscription to a custom event or to the
            execution of a method on an object.
            For events, `after()` subscribers are executed after the event's
            `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            NOTE: The subscription signature shown is for events, not for function
            injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
            for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.aggregate(System.Object,System.Object)">
            <summary>
            Copies object properties from the supplier to the receiver. If the target has
            the property, and the property is an object, the target object will be
            augmented with the supplier's value.
            </summary>
        </member>
        <member name="M:Y_.YUI.aggregate(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties from the supplier to the receiver. If the target has
            the property, and the property is an object, the target object will be
            augmented with the supplier's value.
            </summary>
        </member>
        <member name="M:Y_.YUI.aggregate(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties from the supplier to the receiver. If the target has
            the property, and the property is an object, the target object will be
            augmented with the supplier's value.
            </summary>
        </member>
        <member name="M:Y_.YUI.all(System.Object)">
            <summary>
            Retrieves a NodeList based on the given CSS selector.
            </summary>
        </member>
        <member name="M:Y_.YUI.applyConfig(System.Object)">
            <summary>
            Applies a new configuration object to the YUI instance config.
            This will merge new group/module definitions, and will also
            update the loader cache if necessary.  Updating Y.config directly
            will not update the cache.
            </summary>
        </member>
        <member name="M:Y_.YUI.applyTo(System.Object,System.Object,Y_.Array)">
            <summary>
            Executes a method on a YUI instance with
            the specified id if the specified method is whitelisted.
            </summary>
        </member>
        <member name="M:Y_.YUI.assert(System.Object,System.Object)">
            <summary>
            Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown
            and the test fails.
            </summary>
        </member>
        <member name="M:Y_.YUI.augment(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Augments the _receiver_ with prototype properties from the _supplier_. The
            receiver may be a constructor function or an object. The supplier must be a
            constructor function.
            If the _receiver_ is an object, then the _supplier_ constructor will be called
            immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
            If the _receiver_ is a constructor function, then all prototype methods of
            _supplier_ that are copied to _receiver_ will be sequestered, and the
            _supplier_ constructor will not be called immediately. The first time any
            sequestered method is called on the _receiver_'s prototype, all sequestered
            methods will be immediately copied to the _receiver_'s prototype, the
            _supplier_'s constructor will be executed, and finally the newly unsequestered
            method that was called will be executed.
            This sequestering logic sounds like a bunch of complicated voodoo, but it makes
            it cheap to perform frequent augmentation by ensuring that suppliers'
            constructors are only called if a supplied method is actually used. If none of
            the supplied methods is ever used, then there's no need to take the performance
            hit of calling the _supplier_'s constructor.
            </summary>
        </member>
        <member name="M:Y_.YUI.augment(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Augments the _receiver_ with prototype properties from the _supplier_. The
            receiver may be a constructor function or an object. The supplier must be a
            constructor function.
            If the _receiver_ is an object, then the _supplier_ constructor will be called
            immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
            If the _receiver_ is a constructor function, then all prototype methods of
            _supplier_ that are copied to _receiver_ will be sequestered, and the
            _supplier_ constructor will not be called immediately. The first time any
            sequestered method is called on the _receiver_'s prototype, all sequestered
            methods will be immediately copied to the _receiver_'s prototype, the
            _supplier_'s constructor will be executed, and finally the newly unsequestered
            method that was called will be executed.
            This sequestering logic sounds like a bunch of complicated voodoo, but it makes
            it cheap to perform frequent augmentation by ensuring that suppliers'
            constructors are only called if a supplied method is actually used. If none of
            the supplied methods is ever used, then there's no need to take the performance
            hit of calling the _supplier_'s constructor.
            </summary>
        </member>
        <member name="M:Y_.YUI.augment(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Augments the _receiver_ with prototype properties from the _supplier_. The
            receiver may be a constructor function or an object. The supplier must be a
            constructor function.
            If the _receiver_ is an object, then the _supplier_ constructor will be called
            immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
            If the _receiver_ is a constructor function, then all prototype methods of
            _supplier_ that are copied to _receiver_ will be sequestered, and the
            _supplier_ constructor will not be called immediately. The first time any
            sequestered method is called on the _receiver_'s prototype, all sequestered
            methods will be immediately copied to the _receiver_'s prototype, the
            _supplier_'s constructor will be executed, and finally the newly unsequestered
            method that was called will be executed.
            This sequestering logic sounds like a bunch of complicated voodoo, but it makes
            it cheap to perform frequent augmentation by ensuring that suppliers'
            constructors are only called if a supplied method is actually used. If none of
            the supplied methods is ever used, then there's no need to take the performance
            hit of calling the _supplier_'s constructor.
            </summary>
        </member>
        <member name="M:Y_.YUI.augment(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Augments the _receiver_ with prototype properties from the _supplier_. The
            receiver may be a constructor function or an object. The supplier must be a
            constructor function.
            If the _receiver_ is an object, then the _supplier_ constructor will be called
            immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
            If the _receiver_ is a constructor function, then all prototype methods of
            _supplier_ that are copied to _receiver_ will be sequestered, and the
            _supplier_ constructor will not be called immediately. The first time any
            sequestered method is called on the _receiver_'s prototype, all sequestered
            methods will be immediately copied to the _receiver_'s prototype, the
            _supplier_'s constructor will be executed, and finally the newly unsequestered
            method that was called will be executed.
            This sequestering logic sounds like a bunch of complicated voodoo, but it makes
            it cheap to perform frequent augmentation by ensuring that suppliers'
            constructors are only called if a supplied method is actually used. If none of
            the supplied methods is ever used, then there's no need to take the performance
            hit of calling the _supplier_'s constructor.
            </summary>
        </member>
        <member name="M:Y_.YUI.bind(System.Object,System.Object,System.Object)">
            <summary>
            Returns a function that will execute the supplied function in the
            supplied object's context, optionally adding any additional
            supplied parameters to the beginning of the arguments collection the
            supplied to the function.
            </summary>
        </member>
        <member name="M:Y_.YUI.cached(SharpKit.JavaScript.JsAction)">
            <summary>
            Returns a wrapper for a function which caches the return value of that function,
            keyed off of the combined string representation of the argument values provided
            when the wrapper is called.
            Calling this function again with the same arguments will return the cached value
            rather than executing the wrapped function.
            Note that since the cache is keyed off of the string representation of arguments
            passed to the wrapper function, arguments that aren't strings and don't provide
            a meaningful `toString()` method may result in unexpected caching behavior. For
            example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
            string `[object Object]` when used as a cache key.
            </summary>
        </member>
        <member name="M:Y_.YUI.cached(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns a wrapper for a function which caches the return value of that function,
            keyed off of the combined string representation of the argument values provided
            when the wrapper is called.
            Calling this function again with the same arguments will return the cached value
            rather than executing the wrapped function.
            Note that since the cache is keyed off of the string representation of arguments
            passed to the wrapper function, arguments that aren't strings and don't provide
            a meaningful `toString()` method may result in unexpected caching behavior. For
            example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
            string `[object Object]` when used as a cache key.
            </summary>
        </member>
        <member name="M:Y_.YUI.cached(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Returns a wrapper for a function which caches the return value of that function,
            keyed off of the combined string representation of the argument values provided
            when the wrapper is called.
            Calling this function again with the same arguments will return the cached value
            rather than executing the wrapped function.
            Note that since the cache is keyed off of the string representation of arguments
            passed to the wrapper function, arguments that aren't strings and don't provide
            a meaningful `toString()` method may result in unexpected caching behavior. For
            example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
            string `[object Object]` when used as a cache key.
            </summary>
        </member>
        <member name="M:Y_.YUI.clone(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Deep object/array copy.  Function clones are actually
            wrappers around the original function.
            Array-like objects are treated as arrays.
            Primitives are returned untouched.  Optionally, a
            function can be provided to handle other data types,
            filter keys, validate values, etc.
            </summary>
        </member>
        <member name="M:Y_.YUI.delegate(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets up event delegation on a container element.  The delegated event
            will use a supplied filter to test if the callback should be executed.
            This filter can be either a selector string or a function that returns
            a Node to use as the currentTarget for the event.
            The event object for the delegated event is supplied to the callback
            function.  It is modified slightly in order to support all properties
            that may be needed for event delegation.  'currentTarget' is set to
            the element that matched the selector string filter or the Node returned
            from the filter function.  'container' is set to the element that the
            listener is delegated from (this normally would be the 'currentTarget').
            Filter functions will be called with the arguments that would be passed to
            the callback function, including the event object as the first parameter.
            The function should return false (or a falsey value) if the success criteria
            aren't met, and the Node to use as the event's currentTarget and 'this'
            object if they are.
            </summary>
        </member>
        <member name="M:Y_.YUI.destroy">
            <summary>
            Destroys the YUI instance
            </summary>
        </member>
        <member name="M:Y_.YUI.dump(System.Object,Y_.DataType_.Number)">
            <summary>
            Returns a simple string representation of the object or array.
            Other types of objects will be returned unprocessed.  Arrays
            are expected to be indexed.
            </summary>
        </member>
        <member name="M:Y_.YUI.each(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Executes the supplied function for each item in
            a collection.  Supports arrays, objects, and
            NodeLists
            </summary>
        </member>
        <member name="M:Y_.YUI.error(System.Object,System.Object,System.Object)">
            <summary>
            Report an error.  The reporting mechanism is controlled by
            the `throwFail` configuration attribute.  If throwFail is
            not specified, the message is written to the Logger, otherwise
            a JS error is thrown. If an `errorFn` is specified in the config
            it must return `true` to keep the error from being thrown.
            </summary>
        </member>
        <member name="M:Y_.YUI.extend(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Utility to set up the prototype, constructor and superclass properties to
            support an inheritance strategy that can chain constructors and methods.
            Static members will not be inherited.
            </summary>
        </member>
        <member name="M:Y_.YUI.fail(System.Object)">
            <summary>
            Forces an assertion error to occur. Shortcut for Y.Assert.fail().
            </summary>
        </member>
        <member name="M:Y_.YUI.get(System.Object,System.Object)">
            <summary>
            Returns a single Node instance bound to the node or the
            first element matching the given selector.
            </summary>
        </member>
        <member name="M:Y_.YUI.getLocation">
            <summary>
            Returns the `location` object from the window/frame in which this YUI instance
            operates, or `undefined` when executing in a non-browser environment
            (e.g. Node.js).
            It is _not_ recommended to hold references to the `window.location` object
            outside of the scope of a function in which its properties are being accessed or
            its methods are being called. This is because of a nasty bug/issue that exists
            in both Safari and MobileSafari browsers:
            [WebKit Bug 34679](https://bugs.webkit.org/show_bug.cgi?id=34679).
            </summary>
        </member>
        <member name="M:Y_.YUI.guid(System.Object)">
            <summary>
            Generate an id that is unique among all YUI instances
            </summary>
        </member>
        <member name="M:Y_.YUI.header(System.Object,System.Object)">
            <summary>
            Method for setting and deleting IO HTTP headers to be sent with every
            request.
            Hosted as a property on the `io` function (e.g. `Y.io.header`).
            </summary>
        </member>
        <member name="M:Y_.YUI.instanceOf(System.Object,System.Object)">
            <summary>
            instanceof check for objects that works around
            memory leak in IE when the item tested is
            window/document
            </summary>
        </member>
        <member name="M:Y_.YUI.io(System.Object,System.Object)">
            <summary>
            Method for initiating an ajax call.  The first argument is the url end
            point for the call.  The second argument is an object to configure the
            transaction and attach event subscriptions.  The configuration object
            supports the following properties:
            <dl>
            <dt>method</dt>
            <dd>HTTP method verb (e.g., GET or POST). If this property is not
            not defined, the default value will be GET.</dd>
            <dt>data</dt>
            <dd>This is the name-value string that will be sent as the
            transaction data. If the request is HTTP GET, the data become
            part of querystring. If HTTP POST, the data are sent in the
            message body.</dd>
            <dt>xdr</dt>
            <dd>Defines the transport to be used for cross-domain requests.
            By setting this property, the transaction will use the specified
            transport instead of XMLHttpRequest. The properties of the
            transport object are:
            <dl>
            <dt>use</dt>
            <dd>The transport to be used: 'flash' or 'native'</dd>
            <dt>dataType</dt>
            <dd>Set the value to 'XML' if that is the expected response
            content type.</dd>
            </dl></dd>
            <dt>form</dt>
            <dd>Form serialization configuration object.  Its properties are:
            <dl>
            <dt>id</dt>
            <dd>Node object or id of HTML form</dd>
            <dt>useDisabled</dt>
            <dd>`true` to also serialize disabled form field values
            (defaults to `false`)</dd>
            </dl></dd>
            <dt>on</dt>
            <dd>Assigns transaction event subscriptions. Available events are:
            <dl>
            <dt>start</dt>
            <dd>Fires when a request is sent to a resource.</dd>
            <dt>complete</dt>
            <dd>Fires when the transaction is complete.</dd>
            <dt>success</dt>
            <dd>Fires when the HTTP response status is within the 2xx
            range.</dd>
            <dt>failure</dt>
            <dd>Fires when the HTTP response status is outside the 2xx
            range, if an exception occurs, if the transation is aborted,
            or if the transaction exceeds a configured `timeout`.</dd>
            <dt>end</dt>
            <dd>Fires at the conclusion of the transaction
            lifecycle, after `success` or `failure`.</dd>
            </dl>
            <p>Callback functions for `start` and `end` receive the id of the
            transaction as a first argument. For `complete`, `success`, and
            `failure`, callbacks receive the id and the response object
            (usually the XMLHttpRequest instance).  If the `arguments`
            property was included in the configuration object passed to
            `Y.io()`, the configured data will be passed to all callbacks as
            the last argument.</p>
            </dd>
            <dt>sync</dt>
            <dd>Pass `true` to make a same-domain transaction synchronous.
            <strong>CAVEAT</strong>: This will negatively impact the user
            experience. Have a <em>very</em> good reason if you intend to use
            this.</dd>
            <dt>context</dt>
            <dd>The "`this'" object for all configured event handlers. If a
            specific context is needed for individual callbacks, bind the
            callback to a context using `Y.bind()`.</dd>
            <dt>headers</dt>
            <dd>Object map of transaction headers to send to the server. The
            object keys are the header names and the values are the header
            values.</dd>
            <dt>timeout</dt>
            <dd>Millisecond threshold for the transaction before being
            automatically aborted.</dd>
            <dt>arguments</dt>
            <dd>User-defined data passed to all registered event handlers.
            This value is available as the second argument in the "start" and
            "end" event handlers. It is the third argument in the "complete",
            "success", and "failure" event handlers. <strong>Be sure to quote
            this property name in the transaction configuration as
            "arguments" is a reserved word in JavaScript</strong> (e.g.
            `Y.io({ ..., "arguments": stuff })`).</dd>
            </dl>
            </summary>
        </member>
        <member name="M:Y_.YUI.later(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Executes the supplied function in the context of the supplied
            object 'when' milliseconds later.  Executes the function a
            single time unless periodic is set to true.
            </summary>
        </member>
        <member name="M:Y_.YUI.log(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            If the 'debug' config is true, a 'yui:log' event will be
            dispatched, which the Console widget and anything else
            can consume.  If the 'useBrowserConsole' config is true, it will
            write to the browser console if available.  YUI-specific log
            messages will only be present in the -debug versions of the
            JS files.  The build system is supposed to remove log statements
            from the raw and minified versions of the files.
            </summary>
        </member>
        <member name="M:Y_.YUI.merge(System.Object)">
            <summary>
            Returns a new object containing all of the properties of all the supplied
            objects. The properties from later objects will overwrite those in earlier
            objects.
            Passing in a single object will create a shallow copy of it. For a deep copy,
            use `clone()`.
            </summary>
        </member>
        <member name="M:Y_.YUI.message(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a system message.  This message will be preserved in the
            minified and raw versions of the YUI files, unlike log statements.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,Y_.DataType_.Number)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,Y_.DataType_.Number,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,Y_.DataType_.Number)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,Y_.DataType_.Number,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,System.Object,Y_.DataType_.Number)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,System.Object,Y_.DataType_.Number,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.mix(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mixes _supplier_'s properties into _receiver_.
            Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
            shadowed unless the _overwrite_ parameter is `true`, and will not be merged
            unless the _merge_ parameter is `true`.
            In the default mode (0), only properties the supplier owns are copied (prototype
            properties are not copied). The following copying modes are available:
            * `0`: _Default_. Object to object.
            * `1`: Prototype to prototype.
            * `2`: Prototype to prototype and object to object.
            * `3`: Prototype to object.
            * `4`: Object to prototype.
            </summary>
        </member>
        <member name="M:Y_.YUI.namespace(System.Object)">
            <summary>
            Adds a namespace object onto the YUI global if called statically.
            // creates YUI.your.namespace.here as nested objects
            YUI.namespace("your.namespace.here");
            If called as a method on a YUI <em>instance</em>, it creates the
            namespace on the instance.
            // creates Y.property.package
            Y.namespace("property.package");
            Dots in the input string cause `namespace` to create nested objects for
            each token. If any part of the requested namespace already exists, the
            current object will be left in place.  This allows multiple calls to
            `namespace` to preserve existing namespaced properties.
            If the first token in the namespace string is "YAHOO", the token is
            discarded.
            Be careful with namespace tokens. Reserved words may work in some browsers
            and not others. For instance, the following will fail in some browsers
            because the supported version of JavaScript reserves the word "long":
            Y.namespace("really.long.nested.namespace");
            <em>Note: If you pass multiple arguments to create multiple namespaces, only
            the last one created is returned from this function.</em>
            </summary>
        </member>
        <member name="M:Y_.YUI.on(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            `Y.on()` can do many things:
            <ul>
            <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
            <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
            `fire`d from any object in the YUI instance sandbox</li>
            <li>Subscribe to DOM events</li>
            <li>Subscribe to the execution of a method on any object, effectively
            treating that method as an event</li>
            </ul>
            For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
            Y.on('io:complete', function () {
            Y.MyApp.updateStatus('Transaction complete');
            });
            To subscribe to DOM events, pass the name of a DOM event as the first argument
            and a CSS selector string as the third argument after the callback function.
            Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
            array, or simply omitted (the default is the `window` object).
            Y.on('click', function (e) {
            e.preventDefault();
            // proceed with ajax form submission
            var url = this.get('action');
            ...
            }, '#my-form');
            The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
            selector or other identifier.
            `on()` subscribers for DOM events or custom events `publish`ed with a
            `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
            event object passed as the first parameter to the subscription callback.
            To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
            <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
            NOTE: The formal parameter list below is for events, not for function
            injection.  See `Y.Do.before` for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            `Y.on()` can do many things:
            <ul>
            <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
            <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
            `fire`d from any object in the YUI instance sandbox</li>
            <li>Subscribe to DOM events</li>
            <li>Subscribe to the execution of a method on any object, effectively
            treating that method as an event</li>
            </ul>
            For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
            Y.on('io:complete', function () {
            Y.MyApp.updateStatus('Transaction complete');
            });
            To subscribe to DOM events, pass the name of a DOM event as the first argument
            and a CSS selector string as the third argument after the callback function.
            Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
            array, or simply omitted (the default is the `window` object).
            Y.on('click', function (e) {
            e.preventDefault();
            // proceed with ajax form submission
            var url = this.get('action');
            ...
            }, '#my-form');
            The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
            selector or other identifier.
            `on()` subscribers for DOM events or custom events `publish`ed with a
            `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
            event object passed as the first parameter to the subscription callback.
            To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
            <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
            NOTE: The formal parameter list below is for events, not for function
            injection.  See `Y.Do.before` for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.on(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            `Y.on()` can do many things:
            <ul>
            <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
            <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
            `fire`d from any object in the YUI instance sandbox</li>
            <li>Subscribe to DOM events</li>
            <li>Subscribe to the execution of a method on any object, effectively
            treating that method as an event</li>
            </ul>
            For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
            Y.on('io:complete', function () {
            Y.MyApp.updateStatus('Transaction complete');
            });
            To subscribe to DOM events, pass the name of a DOM event as the first argument
            and a CSS selector string as the third argument after the callback function.
            Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
            array, or simply omitted (the default is the `window` object).
            Y.on('click', function (e) {
            e.preventDefault();
            // proceed with ajax form submission
            var url = this.get('action');
            ...
            }, '#my-form');
            The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
            selector or other identifier.
            `on()` subscribers for DOM events or custom events `publish`ed with a
            `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
            event object passed as the first parameter to the subscription callback.
            To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
            <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
            NOTE: The formal parameter list below is for events, not for function
            injection.  See `Y.Do.before` for that signature.
            </summary>
        </member>
        <member name="M:Y_.YUI.once(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Listen for an event one time.  Equivalent to `on()`, except that
            the listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.once(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listen for an event one time.  Equivalent to `on()`, except that
            the listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.once(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen for an event one time.  Equivalent to `on()`, except that
            the listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.onceAfter(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
            the subscription callback executes after all `on()` subscribers and the event's
            `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
            subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
            subscribers will execute.
            The listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.onceAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
            the subscription callback executes after all `on()` subscribers and the event's
            `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
            subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
            subscribers will execute.
            The listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.onceAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
            the subscription callback executes after all `on()` subscribers and the event's
            `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
            subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
            subscribers will execute.
            The listener is immediately detached when executed.
            See the <a href="#methods_on">`on()` method</a> for additional subscription
            options.
            </summary>
        </member>
        <member name="M:Y_.YUI.one(System.Object)">
            <summary>
            Returns a single Node instance bound to the node or the
            first element matching the given selector. Returns null if no match found.
            <strong>Note:</strong> For chaining purposes you may want to
            use <code>Y.all</code>, which returns a NodeList when no match is found.
            </summary>
        </member>
        <member name="M:Y_.YUI.rbind(System.Object,System.Object,System.Object)">
            <summary>
            Returns a function that will execute the supplied function in the
            supplied object's context, optionally adding any additional
            supplied parameters to the end of the arguments the function
            is executed with.
            </summary>
        </member>
        <member name="M:Y_.YUI.some(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Executes the supplied function for each item in
            a collection.  The operation stops if the function
            returns true. Supports arrays, objects, and
            NodeLists.
            </summary>
        </member>
        <member name="M:Y_.YUI.stamp(System.Object,System.Object)">
            <summary>
            Returns a `guid` associated with an object.  If the object
            does not have one, a new one is created unless `readOnly`
            is specified.
            </summary>
        </member>
        <member name="M:Y_.YUI.throttle(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Throttles a call to a method based on the time between calls.
            </summary>
        </member>
        <member name="M:Y_.YUI.use(System.Object)">
            <summary>
            Attaches one or more modules to the YUI instance.  When this
            is executed, the requirements are analyzed, and one of
            several things can happen:
            * All requirements are available on the page --  The modules
            are attached to the instance.  If supplied, the use callback
            is executed synchronously.
            * Modules are missing, the Get utility is not available OR
            the 'bootstrap' config is false -- A warning is issued about
            the missing modules and all available modules are attached.
            * Modules are missing, the Loader is not available but the Get
            utility is and boostrap is not false -- The loader is bootstrapped
            before doing the following....
            * Modules are missing and the Loader is available -- The loader
            expands the dependency tree and fetches missing modules.  When
            the loader is finshed the callback supplied to use is executed
            asynchronously.
            </summary>
        </member>
        <member name="M:Y_.YUI.use(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Attaches one or more modules to the YUI instance.  When this
            is executed, the requirements are analyzed, and one of
            several things can happen:
            * All requirements are available on the page --  The modules
            are attached to the instance.  If supplied, the use callback
            is executed synchronously.
            * Modules are missing, the Get utility is not available OR
            the 'bootstrap' config is false -- A warning is issued about
            the missing modules and all available modules are attached.
            * Modules are missing, the Loader is not available but the Get
            utility is and boostrap is not false -- The loader is bootstrapped
            before doing the following....
            * Modules are missing and the Loader is available -- The loader
            expands the dependency tree and fetches missing modules.  When
            the loader is finshed the callback supplied to use is executed
            asynchronously.
            </summary>
        </member>
        <member name="P:Y_.YUI.Global">
            <summary>
            Hosts YUI page level events.  This is where events bubble to
            when the broadcast config is set to 2.  This property is
            only available if the custom event module is loaded.
            </summary>
        </member>
        <member name="P:Y_.YUI.meta">
            <summary>
            The component metadata is stored in Y.Env.meta.
            Part of the loader module.
            </summary>
        </member>
        <member name="P:Y_.YUI.version">
            <summary>
            The version number of the YUI instance.
            </summary>
        </member>
        <member name="T:Y_.View">
            <summary>
            Represents a logical piece of an application's user interface, and provides a
            lightweight, overridable API for rendering content and handling delegated DOM
            events on a container element.
            The View class imposes little structure and provides only minimal functionality
            of its own: it's basically just an overridable API interface that helps you
            implement custom views.
            As of YUI 3.5.0, View allows ad-hoc attributes to be specified at instantiation
            time, so you don't need to subclass `Y.View` to add custom attributes. Just pass
            them to the constructor:
            var view = new Y.View({foo: 'bar'});
            view.get('foo'); // => "bar"
            </summary>
        </member>
        <member name="M:Y_.View._afterContainerChange">
            <summary>
            Handles `containerChange` events. Detaches event handlers from the old
            container (if any) and attaches them to the new container.
            Right now the `container` attr is initOnly so this event should only ever
            fire the first time the container is created, but in the future (once Y.App
            can handle it) we may allow runtime container changes.
            </summary>
        </member>
        <member name="M:Y_.View._destroyContainer">
            <summary>
            Removes the `container` from the DOM and purges all its event listeners.
            </summary>
        </member>
        <member name="M:Y_.View._getContainer(System.Object)">
            <summary>
            Getter for the `container` attribute.
            </summary>
        </member>
        <member name="M:Y_.View.attachEvents">
            <summary>
            Attaches delegated event handlers to this view's container element. This
            method is called internally to subscribe to events configured in the
            `events` attribute when the view is initialized.
            You may override this method to customize the event attaching logic.
            </summary>
        </member>
        <member name="M:Y_.View.attachEvents(System.Object)">
            <summary>
            Attaches delegated event handlers to this view's container element. This
            method is called internally to subscribe to events configured in the
            `events` attribute when the view is initialized.
            You may override this method to customize the event attaching logic.
            </summary>
        </member>
        <member name="M:Y_.View.create">
            <summary>
            Creates and returns a container node for this view.
            By default, the container is created from the HTML template specified in the
            `containerTemplate` property, and is _not_ added to the DOM automatically.
            You may override this method to customize how the container node is created
            (such as by rendering it from a custom template format). Your method must
            return a `Y.Node` instance.
            </summary>
        </member>
        <member name="M:Y_.View.create(System.Object)">
            <summary>
            Creates and returns a container node for this view.
            By default, the container is created from the HTML template specified in the
            `containerTemplate` property, and is _not_ added to the DOM automatically.
            You may override this method to customize how the container node is created
            (such as by rendering it from a custom template format). Your method must
            return a `Y.Node` instance.
            </summary>
        </member>
        <member name="M:Y_.View.destroy">
            <summary>
            Destroys this View, detaching any DOM events and optionally also destroying
            its container node.
            By default, the container node will not be destroyed. Pass an _options_
            object with a truthy `remove` property to destroy the container as well.
            </summary>
        </member>
        <member name="M:Y_.View.destroy(System.Object)">
            <summary>
            Destroys this View, detaching any DOM events and optionally also destroying
            its container node.
            By default, the container node will not be destroyed. Pass an _options_
            object with a truthy `remove` property to destroy the container as well.
            </summary>
        </member>
        <member name="M:Y_.View.detachEvents">
            <summary>
            Detaches DOM events that have previously been attached to the container by
            `attachEvents()`.
            </summary>
        </member>
        <member name="M:Y_.View.remove">
            <summary>
            Removes this view's container element from the DOM (if it's in the DOM),
            but doesn't destroy it or any event listeners attached to it.
            </summary>
        </member>
        <member name="M:Y_.View.render">
            <summary>
            Renders this view.
            This method is a noop by default. Override it to provide a custom
            implementation that renders this view's content and appends it to the
            container element. Ideally your `render` method should also return `this` as
            the end to allow chaining, but that's up to you.
            Since there's no default renderer, you're free to render your view however
            you see fit, whether that means manipulating the DOM directly, dumping
            strings into `innerHTML`, or using a template language of some kind.
            For basic templating needs, `Y.Node.create()` and `Y.Lang.sub()` may
            suffice, but there are no restrictions on what tools or techniques you can
            use to render your view. All you need to do is append something to the
            container element at some point, and optionally append the container
            to the DOM if it's not there already.
            </summary>
        </member>
        <member name="P:Y_.View._NON_ATTRS_CFG">
            <summary>
            Properties that shouldn't be turned into ad-hoc attributes when passed to
            View's constructor.
            </summary>
        </member>
        <member name="P:Y_.View.events">
            <summary>
            Hash of CSS selectors mapped to events to delegate to elements matching
            those selectors.
            CSS selectors are relative to the `container` element. Events are attached
            to the container, and delegation is used so that subscribers are only
            notified of events that occur on elements inside the container that match
            the specified selectors. This allows the container's contents to be re-
            rendered as needed without losing event subscriptions.
            Event handlers can be specified either as functions or as strings that map
            to function names on this view instance or its prototype.
            The `this` object in event handlers will refer to this view instance. If
            you'd prefer `this` to be something else, use `Y.bind()` to bind a custom
            `this` object.
            </summary>
        </member>
        <member name="T:Y_.VerticalLegendLayout">
            <summary>
            Contains methods for displaying items vertically in a legend.
            </summary>
        </member>
        <member name="M:Y_.VerticalLegendLayout._getLayoutDimensions">
            <summary>
            Positions the legend in a chart and returns the properties of the legend to be used in the
            chart's layout algorithm.
            </summary>
        </member>
        <member name="M:Y_.VerticalLegendLayout._positionLegendItems(Y_.Array,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,System.Object,System.Object)">
            <summary>
            Displays items vertically in a legend.
            </summary>
        </member>
        <member name="M:Y_.VerticalLegendLayout._setColumnArrays(Y_.Array,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Creates column and total height arrays used for displaying multiple columns of
            legend items based on the items, available height and verticalGap for the legend.
            </summary>
        </member>
        <member name="M:Y_.VerticalLegendLayout.destructor">
            <summary>
            Destructor implementation for the CartesianChart class. Calls destroy on all axes, series, legend (if available) and the Graph instance.
            Removes the tooltip and overlay HTML elements.
            </summary>
        </member>
        <member name="M:Y_.VerticalLegendLayout.getStartPoint(Y_.DataType_.Number,Y_.DataType_.Number,System.Object,System.Object)">
            <summary>
            Returns the starting y-coordinate for a column of legend items.
            </summary>
        </member>
        <member name="T:Y_.Uploader_.Queue">
            <summary>
            This class manages a queue of files to be uploaded to the server.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.addToQueueBottom(System.Object)">
            <summary>
            Add a new file to the bottom of the queue (the upload will be
            launched after all the other queued files are uploaded.)
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.addToQueueTop(System.Object)">
            <summary>
            Add a new file to the top of the queue (the upload will be
            launched as soon as the current number of uploading files
            drops below the maximum permissible value).
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.cancelUpload(System.Object)">
            <summary>
            Cancels a specific file's upload. If no argument is passed,
            all ongoing uploads are cancelled and the upload process is
            stopped.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.forceReupload(System.Object)">
            <summary>
            If a particular file is stuck in an ongoing upload without
            any progress events, this method allows to force its reupload
            by cancelling its upload and immediately relaunching it.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.initializer">
            <summary>
            Construction logic executed during UploaderQueue instantiation.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.pauseUpload">
            <summary>
            Pauses the upload process. The ongoing file uploads
            will complete after this method is called, but no
            new ones will be launched.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.restartUpload">
            <summary>
            Restarts a paused upload process.
            </summary>
        </member>
        <member name="M:Y_.Uploader_.Queue.startUpload">
            <summary>
            Starts uploading the queued up file list.
            </summary>
        </member>
        <member name="P:Y_.Uploader_.Queue.bytesTotal">
            <summary>
            The total number of bytes in the queue.
            </summary>
        </member>
        <member name="P:Y_.Uploader_.Queue.bytesUploaded">
            <summary>
            The total number of bytes that has been uploaded.
            </summary>
        </member>
        <member name="P:Y_.Uploader_.Queue.fileList">
            <summary>
            The queue file list. This file list should only be modified
            before the upload has been started; modifying it after starting
            the upload has no effect, and `addToQueueTop` or `addToQueueBottom` methods
            should be used instead.
            </summary>
        </member>
        <member name="P:Y_.Uploader_.Queue.simUploads">
            <summary>
            Maximum number of simultaneous uploads; must be in the
            range between 1 and 5. The value of `2` is default. It
            is recommended that this value does not exceed 3.
            </summary>
        </member>
        <member name="T:Y_.Transition">
            <summary>
            A class for constructing transition instances.
            Adds the "transition" method to Node.
            </summary>
        </member>
        <member name="T:Y_.Test_.TestNode">
            <summary>
            A node in the test tree structure. May represent a TestSuite, TestCase, or
            test function.
            </summary>
        </member>
        <member name="P:Y_.Test_.TestNode.firstChild">
            <summary>
            Pointer to this node's first child.
            </summary>
        </member>
        <member name="P:Y_.Test_.TestNode.lastChild">
            <summary>
            Pointer to this node's last child.
            </summary>
        </member>
        <member name="P:Y_.Test_.TestNode.next">
            <summary>
            Pointer to this node's next sibling.
            </summary>
        </member>
        <member name="P:Y_.Test_.TestNode.parent">
            <summary>
            Pointer to this node's parent.
            </summary>
        </member>
        <member name="P:Y_.Test_.TestNode.results">
            <summary>
            Test results for this test object.
            </summary>
        </member>
        <member name="T:Y_.Test_.EventTarget">
            <summary>
            Simple custom event implementation.
            </summary>
        </member>
        <member name="M:Y_.Test_.EventTarget.attach(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds a listener for a given event type.
            </summary>
        </member>
        <member name="M:Y_.Test_.EventTarget.detach(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Removes a listener for a given event type.
            </summary>
        </member>
        <member name="M:Y_.Test_.EventTarget.fire(System.Object)">
            <summary>
            Fires an event based on the passed-in object.
            </summary>
        </member>
        <member name="M:Y_.Test_.EventTarget.subscribe(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds a listener for a given event type.
            </summary>
        </member>
        <member name="M:Y_.Test_.EventTarget.unsubscribe(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Removes a listener for a given event type.
            </summary>
        </member>
        <member name="T:Y_.SVGRect">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Rect.html">`Rect`</a> class.
            `SVGRect` is not intended to be used directly. Instead, use the <a href="Rect.html">`Rect`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Rect.html">`Rect`</a>
            class will point to the `SVGRect` class.
            </summary>
        </member>
        <member name="T:Y_.SliderBase">
            <summary>
            Create a slider to represent an input control capable of representing a
            series of intermediate states based on the position of the slider's thumb.
            These states are typically aligned to a value algorithm whereby the thumb
            position corresponds to a given value. Sliders may be oriented vertically or
            horizontally, based on the <code>axis</code> configuration.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._afterDisabledChange(Y_.Event)">
            <summary>
            Locks or unlocks the thumb.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._afterDrag(Y_.Event)">
            <summary>
            Dispatches the <code>thumbMove</code> event.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._afterLengthChange(Y_.Event)">
            <summary>
            Handles changes to the <code>length</code> attribute.  By default, it
            triggers an update to the UI.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._bindThumbDD">
            <summary>
            Makes the thumb draggable and constrains it to the rail.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._bindValueLogic">
            <summary>
            Stub implementation.  Override this (presumably in a class extension) to
            initialize any value logic that depends on the presence of the Drag
            instance.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._decrMajor">
            <summary>
            decrements Slider value by a major increment
            </summary>
        </member>
        <member name="M:Y_.SliderBase._decrMinor">
            <summary>
            decrements Slider value by a minor increment
            </summary>
        </member>
        <member name="M:Y_.SliderBase._incrMajor">
            <summary>
            increments Slider value by a major increment
            </summary>
        </member>
        <member name="M:Y_.SliderBase._incrMinor">
            <summary>
            increments Slider value by a minor increment
            </summary>
        </member>
        <member name="M:Y_.SliderBase._initThumbUrl">
            <summary>
            <p>Defaults the thumbURL attribute according to the current skin, or
            &quot;sam&quot; if none can be determined.  Horizontal Sliders will have
            their <code>thumbUrl</code> attribute set to</p>
            <p><code>&quot;/<em>configured</em>/<em>yu</em>i/<em>builddi</em>r/slider-base/assets/skins/sam/thumb-x.png&quot;</code></p>
            <p>And vertical thumbs will get</p>
            <p><code>&quot;/<em>configured</em>/<em>yui</em>/<em>builddir</em>/slider-base/assets/skins/sam/thumb-y.png&quot;</code></p>
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onDirectionKey(Y_.Event)">
            <summary>
            sets the Slider's value in response to key events.
            Left and right keys are in a separate method
            in case an implementation wants to increment values
            but needs left and right arrow keys for other purposes.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onDragEnd(Y_.Event)">
            <summary>
            Dispatches the <code>slideEnd</code> event.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onDragStart(Y_.Event)">
            <summary>
            Dispatches the <code>slideStart</code> event.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onLeftRightKey(Y_.Event)">
            <summary>
            sets the Slider's value in response to left or right key events
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onLeftRightKeyMeta(Y_.Event)">
            <summary>
            sets the Slider's value in response to left or right key events when a meta (mac command/apple) key is also pressed
            </summary>
        </member>
        <member name="M:Y_.SliderBase._onThumbClick">
            <summary>
            Gives focus to the thumb enabling keyboard access after clicking thumb
            </summary>
        </member>
        <member name="M:Y_.SliderBase._setAxis(System.Object)">
            <summary>
            Validates the axis is &quot;x&quot; or &quot;y&quot; (case insensitive).
            Converts to lower case for storage.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._setLength(System.Object)">
            <summary>
            <p>Ensures the stored length value is a string with a quantity and unit.
            Unit will be defaulted to &quot;px&quot; if not included.  Rejects
            values less than or equal to 0 and those that don't at least start with
            a number.</p>
            <p>Currently only pixel lengths are supported.</p>
            </summary>
        </member>
        <member name="M:Y_.SliderBase._setToMax">
            <summary>
            sets the Slider value to the max value.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._setToMin">
            <summary>
            sets the Slider value to the min value.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._syncThumbPosition">
            <summary>
            Stub implementation.  Override this (presumably in a class extension) to
            ensure the thumb is in the correct position according to the value
            alogorithm.
            instance.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._uiMoveThumb(Y_.DataType_.Number)">
            <summary>
            Moves the thumb to pixel offset position along the rail.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._uiMoveThumb(Y_.DataType_.Number,System.Object)">
            <summary>
            Moves the thumb to pixel offset position along the rail.
            </summary>
        </member>
        <member name="M:Y_.SliderBase._uiSetRailLength(System.Object)">
            <summary>
            Sets the rail length according to the <code>length</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.SliderBase.bindUI">
            <summary>
            Creates the Y.DD.Drag instance used to handle the thumb movement and
            binds Slider interaction to the configured value model.
            </summary>
        </member>
        <member name="M:Y_.SliderBase.initializer">
            <summary>
            Construction logic executed during Slider instantiation.
            </summary>
        </member>
        <member name="M:Y_.SliderBase.renderRail">
            <summary>
            Creates the Slider rail DOM subtree for insertion into the Slider's
            <code>contentBox</code>.  Override this method if you want to provide
            the rail element (presumably from existing markup).
            </summary>
        </member>
        <member name="M:Y_.SliderBase.renderThumb">
            <summary>
            Creates the Slider thumb DOM subtree for insertion into the Slider's
            rail.  Override this method if you want to provide the thumb element
            (presumably from existing markup).
            </summary>
        </member>
        <member name="M:Y_.SliderBase.renderUI">
            <summary>
            Create the DOM structure for the Slider.
            </summary>
        </member>
        <member name="M:Y_.SliderBase.syncUI">
            <summary>
            Synchronizes the DOM state with the attribute settings.
            </summary>
        </member>
        <member name="T:Y_.RecordsetSort">
            <summary>
            Plugin that adds default and custom sorting functionality to the Recordset utility
            </summary>
        </member>
        <member name="M:Y_.RecordsetSort.flip">
            <summary>
            Sorts the recordset based on the last-used sort parameters, but flips the order. (ie: Descending becomes ascending, and vice versa).
            </summary>
        </member>
        <member name="M:Y_.RecordsetSort.initializer">
            <summary>
            Sets up the default function to use when the "sort" event is fired.
            </summary>
        </member>
        <member name="M:Y_.RecordsetSort.resort">
            <summary>
            Resorts the recordset based on the last-used sort parameters (stored in 'lastSortProperties' ATTR)
            </summary>
        </member>
        <member name="M:Y_.RecordsetSort.reverse">
            <summary>
            Reverses the recordset calling the standard array.reverse() method.
            </summary>
        </member>
        <member name="M:Y_.RecordsetSort.sort(System.Object,System.Object)">
            <summary>
            Sorts the recordset.
            </summary>
        </member>
        <member name="P:Y_.RecordsetSort.lastSortProperties">
            <summary>
            The last properties used to sort. Consists of an object literal with the keys "field", "desc", and "sorter"
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Pjax">
            <summary>
            Node plugin that provides seamless, gracefully degrading pjax functionality.
            </summary>
        </member>
        <member name="T:Y_.Pjax">
            <summary>
            Provides seamless, gracefully degrading Pjax (pushState + Ajax) functionality,
            which makes it easy to progressively enhance standard links on the page so that
            they can be loaded normally in old browsers, or via Ajax (with HTML5 history
            support) in newer browsers.
            </summary>
        </member>
        <member name="T:Y_.Router">
            <summary>
            Provides URL-based routing using HTML5 `pushState()` or the location hash.
            This makes it easy to wire up route handlers for different application states
            while providing full back/forward navigation support and bookmarkable, shareable
            URLs.
            </summary>
        </member>
        <member name="M:Y_.Router._afterHistoryChange(Y_.EventFacade)">
            <summary>
            Handles `history:change` and `hashchange` events.
            </summary>
        </member>
        <member name="M:Y_.Router._decode(System.Object)">
            <summary>
            Wrapper around `decodeURIComponent` that also converts `+` chars into
            spaces.
            </summary>
        </member>
        <member name="M:Y_.Router._defReadyFn(Y_.EventFacade)">
            <summary>
            Default handler for the `ready` event.
            </summary>
        </member>
        <member name="M:Y_.Router._dequeue">
            <summary>
            Shifts the topmost `_save()` call off the queue and executes it. Does
            nothing if the queue is empty.
            </summary>
        </member>
        <member name="M:Y_.Router._dispatch(System.Object,System.Object,System.Object)">
            <summary>
            Dispatches to the first route handler that matches the specified _path_.
            If called before the `ready` event has fired, the dispatch will be aborted.
            This ensures normalized behavior between Chrome (which fires a `popstate`
            event on every pageview) and other browsers (which do not).
            </summary>
        </member>
        <member name="M:Y_.Router._getHashPath">
            <summary>
            Gets the current path from the location hash, or an empty string if the
            hash is empty.
            </summary>
        </member>
        <member name="M:Y_.Router._getOrigin">
            <summary>
            Gets the location origin (i.e., protocol, host, and port) as a URL.
            </summary>
        </member>
        <member name="M:Y_.Router._getPath">
            <summary>
            Gets the current route path, relative to the `root` (if any).
            </summary>
        </member>
        <member name="M:Y_.Router._getQuery">
            <summary>
            Gets the current route query string.
            </summary>
        </member>
        <member name="M:Y_.Router._getRegex(System.Object,Y_.Array)">
            <summary>
            Creates a regular expression from the given route specification. If _path_
            is already a regex, it will be returned unmodified.
            </summary>
        </member>
        <member name="M:Y_.Router._getRequest(System.Object,System.Object,System.Object)">
            <summary>
            Gets a request object that can be passed to a route handler.
            </summary>
        </member>
        <member name="M:Y_.Router._getResponse(System.Object)">
            <summary>
            Gets a response object that can be passed to a route handler.
            </summary>
        </member>
        <member name="M:Y_.Router._getRoutes">
            <summary>
            Getter for the `routes` attribute.
            </summary>
        </member>
        <member name="M:Y_.Router._getURL">
            <summary>
            Gets the current full URL.
            </summary>
        </member>
        <member name="M:Y_.Router._hasSameOrigin(System.Object)">
            <summary>
            Returns `true` when the specified `url` is from the same origin as the
            current URL; i.e., the protocol, host, and port of the URLs are the same.
            All host or path relative URLs are of the same origin. A scheme-relative URL
            is first prefixed with the current scheme before being evaluated.
            </summary>
        </member>
        <member name="M:Y_.Router._joinURL(System.Object)">
            <summary>
            Joins the `root` URL to the specified _url_, normalizing leading/trailing
            `/` characters.
            </summary>
        </member>
        <member name="M:Y_.Router._parseQuery(System.Object)">
            <summary>
            Parses a URL query string into a key/value hash. If `Y.QueryString.parse` is
            available, this method will be an alias to that.
            </summary>
        </member>
        <member name="M:Y_.Router._queue">
            <summary>
            Queues up a `_save()` call to run after all previously-queued calls have
            finished.
            This is necessary because if we make multiple `_save()` calls before the
            first call gets dispatched, then both calls will dispatch to the last call's
            URL.
            All arguments passed to `_queue()` will be passed on to `_save()` when the
            queued function is executed.
            </summary>
        </member>
        <member name="M:Y_.Router._save">
            <summary>
            Saves a history entry using either `pushState()` or the location hash.
            This method enforces the same-origin security constraint; attempting to save
            a `url` that is not from the same origin as the current URL will result in
            an error.
            </summary>
        </member>
        <member name="M:Y_.Router._save(System.Object)">
            <summary>
            Saves a history entry using either `pushState()` or the location hash.
            This method enforces the same-origin security constraint; attempting to save
            a `url` that is not from the same origin as the current URL will result in
            an error.
            </summary>
        </member>
        <member name="M:Y_.Router._save(System.Object,System.Object)">
            <summary>
            Saves a history entry using either `pushState()` or the location hash.
            This method enforces the same-origin security constraint; attempting to save
            a `url` that is not from the same origin as the current URL will result in
            an error.
            </summary>
        </member>
        <member name="M:Y_.Router._setRoutes(System.Object)">
            <summary>
            Setter for the `routes` attribute.
            </summary>
        </member>
        <member name="M:Y_.Router.dispatch">
            <summary>
            Dispatches to the first route handler that matches the current URL, if any.
            If `dispatch()` is called before the `ready` event has fired, it will
            automatically wait for the `ready` event before dispatching. Otherwise it
            will dispatch immediately.
            </summary>
        </member>
        <member name="M:Y_.Router.getPath">
            <summary>
            Gets the current route path, relative to the `root` (if any).
            </summary>
        </member>
        <member name="M:Y_.Router.hasRoute(System.Object)">
            <summary>
            Returns `true` if this router has at least one route that matches the
            specified URL, `false` otherwise.
            This method enforces the same-origin security constraint on the specified
            `url`; any URL which is not from the same origin as the current URL will
            always return `false`.
            </summary>
        </member>
        <member name="M:Y_.Router.match(System.Object)">
            <summary>
            Returns an array of route objects that match the specified URL path.
            This method is called internally to determine which routes match the current
            path whenever the URL changes. You may override it if you want to customize
            the route matching logic, although this usually shouldn't be necessary.
            Each returned route object has the following properties:
            * `callback`: A function or a string representing the name of a function
            this router that should be executed when the route is triggered.
            * `keys`: An array of strings representing the named parameters defined in
            the route's path specification, if any.
            * `path`: The route's path specification, which may be either a string or
            a regex.
            * `regex`: A regular expression version of the route's path specification.
            This regex is used to determine whether the route matches a given path.
            </summary>
        </member>
        <member name="M:Y_.Router.removeRoot(System.Object)">
            <summary>
            Removes the `root` URL from the front of _url_ (if it's there) and returns
            the result. The returned path will always have a leading `/`.
            </summary>
        </member>
        <member name="M:Y_.Router.replace">
            <summary>
            Replaces the current browser history entry with a new one, and dispatches to
            the first matching route handler, if any.
            Behind the scenes, this method uses HTML5 `pushState()` in browsers that
            support it (or the location hash in older browsers and IE) to change the
            URL.
            The specified URL must share the same origin (i.e., protocol, host, and
            port) as the current page, or an error will occur.
            </summary>
        </member>
        <member name="M:Y_.Router.replace(System.Object)">
            <summary>
            Replaces the current browser history entry with a new one, and dispatches to
            the first matching route handler, if any.
            Behind the scenes, this method uses HTML5 `pushState()` in browsers that
            support it (or the location hash in older browsers and IE) to change the
            URL.
            The specified URL must share the same origin (i.e., protocol, host, and
            port) as the current page, or an error will occur.
            </summary>
        </member>
        <member name="M:Y_.Router.route(System.Object,System.Object)">
            <summary>
            Adds a route handler for the specified URL _path_.
            The _path_ parameter may be either a string or a regular expression. If it's
            a string, it may contain named parameters: `:param` will match any single
            part of a URL path (not including `/` characters), and `*param` will match
            any number of parts of a URL path (including `/` characters). These named
            parameters will be made available as keys on the `req.params` object that's
            passed to route handlers.
            If the _path_ parameter is a regex, all pattern matches will be made
            available as numbered keys on `req.params`, starting with `0` for the full
            match, then `1` for the first subpattern match, and so on.
            Here's a set of sample routes along with URL paths that they match:
            * Route: `/photos/:tag/:page`
            * URL: `/photos/kittens/1`, params: `{tag: 'kittens', page: '1'}`
            * URL: `/photos/puppies/2`, params: `{tag: 'puppies', page: '2'}`
            * Route: `/file/*path`
            * URL: `/file/foo/bar/baz.txt`, params: `{path: 'foo/bar/baz.txt'}`
            * URL: `/file/foo`, params: `{path: 'foo'}`
            If multiple route handlers match a given URL, they will be executed in the
            order they were added. The first route that was added will be the first to
            be executed.
            </summary>
        </member>
        <member name="M:Y_.Router.save">
            <summary>
            Saves a new browser history entry and dispatches to the first matching route
            handler, if any.
            Behind the scenes, this method uses HTML5 `pushState()` in browsers that
            support it (or the location hash in older browsers and IE) to change the
            URL and create a history entry.
            The specified URL must share the same origin (i.e., protocol, host, and
            port) as the current page, or an error will occur.
            </summary>
        </member>
        <member name="M:Y_.Router.save(System.Object)">
            <summary>
            Saves a new browser history entry and dispatches to the first matching route
            handler, if any.
            Behind the scenes, this method uses HTML5 `pushState()` in browsers that
            support it (or the location hash in older browsers and IE) to change the
            URL and create a history entry.
            The specified URL must share the same origin (i.e., protocol, host, and
            port) as the current page, or an error will occur.
            </summary>
        </member>
        <member name="M:Y_.Router.upgrade">
            <summary>
            Upgrades a hash-based URL to an HTML5 URL if necessary. In non-HTML5
            browsers, this method is a noop.
            </summary>
        </member>
        <member name="M:Y_.Pjax._defaultRoute(System.Object)">
            <summary>
            Default Pjax route handler. Makes an Ajax request for the requested URL.
            </summary>
        </member>
        <member name="M:Y_.Pjax._defCompleteFn(Y_.EventFacade)">
            <summary>
            Default event handler for both the `error` and `load` events. Attempts to
            insert the loaded content into the `container` node and update the page's
            title.
            </summary>
        </member>
        <member name="M:Y_.Pjax._onPjaxIOEnd">
            <summary>
            Handles IO end events.
            </summary>
        </member>
        <member name="M:Y_.Pjax._onPjaxIOFailure">
            <summary>
            Handles IO failure events and fires our own `error` event.
            </summary>
        </member>
        <member name="M:Y_.Pjax._onPjaxIOSuccess">
            <summary>
            Handles IO success events and fires our own 'load' event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Pjax.getContent(System.Object)" -->
        <member name="P:Y_.Pjax.container">
            <summary>
            Node into which content should be inserted when a page is loaded via
            Pjax. This node's existing contents will be removed to make way for the
            new content.
            If not set, loaded content will not be automatically inserted into the
            page.
            </summary>
        </member>
        <member name="P:Y_.Pjax.timeout">
            <summary>
            Time in milliseconds after which an Ajax request should time out. When a
            timeout occurs, the `error` event will be fired.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Flick">
            <summary>
            A plugin class which can be used to animate the motion of a node, in response to a flick gesture.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Flick._flickFrame">
            <summary>
            Executes a single frame in the flick animation
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Flick._onFlick(Y_.EventFacade)">
            <summary>
            The flick event listener. Kicks off the flick animation.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Flick._renderClasses">
            <summary>
            Adds the CSS classes, necessary to set up overflow/position properties on the
            node and boundingBox.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Flick.initializer(System.Object)">
            <summary>
            The initializer lifecycle implementation.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Flick.setBounds">
            <summary>
            Sets the min/max boundaries for the flick animation,
            based on the boundingBox dimensions.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.bounce">
            <summary>
            Drag coefficient for intertial scrolling at the upper
            and lower boundaries of the scrollview. Set to 0 to
            disable "rubber-banding".
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.bounceDistance">
            <summary>
            The bounce distance in pixels
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.boundingBox">
            <summary>
            The constraining box relative to which the flick animation and bounds should be calculated.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.CLASS_NAMES">
            <summary>
            The default CSS class names used by the plugin
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.deceleration">
            <summary>
            Drag coefficent for inertial scrolling. The closer to 1 this
            value is, the less friction during scrolling.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.duration">
            <summary>
            The custom duration to apply to the flick animation. By default,
            the animation duration is controlled by the deceleration factor.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.minVelocity">
            <summary>
            The minimum flick gesture velocity (px/ms) at which to trigger the flick response
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.SNAP_DURATION">
            <summary>
            The duration to use for the bounce snap-back transition
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Flick.VELOCITY_THRESHOLD">
            <summary>
            The threshold used to determine when the decelerated velocity of the node
            is practically 0.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorTab">
            <summary>
            Handles tab and shift-tab indent/outdent support.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorTab.NAME">
            <summary>
            editorTab
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorTab.NS">
            <summary>
            tab
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Drag">
            <summary>
            Simple Drag plugin that can be attached to a Node or Widget via the plug method.
            </summary>
        </member>
        <member name="T:Y_.DD_.Drag">
            <summary>
            Provides the ability to drag a Node.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.addHandle(System.Object)">
            <summary>
            Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.addInvalid(System.Object)">
            <summary>
            Add a selector string to test the handle against. If the test passes the drag operation will not continue.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.addToGroup(System.Object)">
            <summary>
            Add this Drag instance to a group, this should be used for on-the-fly group additions.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.end">
            <summary>
            Ends the drag operation
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.removeFromGroup(System.Object)">
            <summary>
            Remove this Drag instance from a group, this should be used for on-the-fly group removals.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.removeHandle(System.Object)">
            <summary>
            Remove a Selector added by addHandle
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.removeInvalid(System.Object)">
            <summary>
            Remove an invalid handle added by addInvalid
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.start">
            <summary>
            Starts the drag operation
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.stopDrag">
            <summary>
            Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.
            </summary>
        </member>
        <member name="M:Y_.DD_.Drag.validClick(Y_.EventFacade)">
            <summary>
            Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.activeHandle">
            <summary>
            This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.bubbles">
            <summary>
            Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.clickPixelThresh">
            <summary>
            The number of pixels to move to start a drag operation, default is 3.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.clickTimeThresh">
            <summary>
            The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.dragNode">
            <summary>
            Y.Node instance to use as the draggable element, defaults to node
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.groups">
            <summary>
            Array of groups to add this drag into.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.handles">
            <summary>
            Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.node">
            <summary>
            Y.Node instance to use as the element to initiate a drag operation
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.region">
            <summary>
            A region object associated with this drag, used for checking regions while dragging.
            </summary>
        </member>
        <member name="P:Y_.DD_.Drag.START_EVENT">
            <summary>
            This property defaults to "mousedown", but when drag-gestures is loaded, it is changed to "gesturemovestart"
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Drag.initializer">
            <summary>
            Sets up event listeners on drag events if interacting with a widget
            </summary>
        </member>
        <member name="T:Y_.Plugin_.DDConstrained">
            <summary>
            Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DDConstrained.align">
            <summary>
            Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DDConstrained.drag">
            <summary>
            Fires after drag:drag. Handle the tickX and tickX align events.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DDConstrained.getRegion(System.Object)">
            <summary>
            Get the active region: viewport, node, custom region
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DDConstrained.inRegion(Y_.Array)">
            <summary>
            Checks if the XY passed or the dragNode is inside the active region.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DDConstrained.resetCache">
            <summary>
            Reset the internal region cache.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDConstrained.constrain2node">
            <summary>
            Will attempt to constrain the drag node to the boundaries of this node.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDConstrained.constrain2region">
            <summary>
            An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDConstrained.constrain2view">
            <summary>
            Will attempt to constrain the drag node to the boundaries of the viewport region.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDConstrained.tickXArray">
            <summary>
            An array of page coordinates to use as X ticks for drag movement.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDConstrained.tickYArray">
            <summary>
            An array of page coordinates to use as Y ticks for drag movement.
            </summary>
        </member>
        <member name="T:Y_.Path">
            <summary>
            <p>The `Path` class creates a shape through the use of drawing methods. The `Path` class has the following drawing methods available:</p>
            <ul>
            <li><a href="#method_clear">`clear`</a></li>
            <li><a href="#method_curveTo">`curveTo`</a></li>
            <li><a href="#method_drawRect">`drawRect`</a></li>
            <li><a href="#method_drawRoundRect">`drawRoundRect`</a></li>
            <li><a href="#method_end">`end`</a></li>
            <li><a href="#method_lineTo">`lineTo`</a></li>
            <li><a href="#method_moveTo">`moveTo`</a></li>
            <li><a href="#method_quadraticCurveTo">`quadraticCurveTo`</a></li>
            </ul>
            <p>Like other shapes, `Path` elements are created using the <a href="Graphic.html#method_addShape">`addShape`</a> method of the <a href="Graphic.html">`Graphic`</a>
            class. The method's `cfg` argument contains a `type` attribute. Assigning "path" or `Y.Path` to this attribute will create a `Path` instance.
            After instantiation, a series of drawing operations must be performed in order to render a shape. The below code instantiates a path element by defining the `type`
            attribute as "path":</p>
            var myPath = myGraphic.addShape({
            type: "path",
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            Below a `Path` element with the same properties is instantiated by defining the `type` attribute with a class reference:
            var myPath = myGraphic.addShape({
            type: Y.Path,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            After instantiation, a shape or segment needs to be drawn for an element to render. After all draw operations are performed, the <a href="#method_end">`end`</a>
            method will render the shape. The code below will draw a triangle:
            myPath.moveTo(35, 5);
            myPath.lineTo(65, 65);
            myPath.lineTo(5, 65);
            myPath.lineTo(35, 5);
            myPath.end();
            <p>`Path` has the following implementations based on browser capability.
            <ul>
            <li><a href="SVGPath.html">`SVGPath`</a></li>
            <li><a href="VMLPath.html">`VMLPath`</a></li>
            <li><a href="CanvasPath.html">`CanvasPath`</a></li>
            </ul>
            It is not necessary to interact with these classes directly. `Path` will point to the appropriate implemention.</p>
            </summary>
        </member>
        <member name="T:Y_.NodeList">
            <summary>
            The NodeList class provides a wrapper for manipulating DOM NodeLists.
            NodeList properties can be accessed via the set/get methods.
            Use Y.all() to retrieve NodeList instances.
            </summary>
        </member>
        <member name="M:Y_.NodeList.addClass(System.Object)">
            <summary>
            Adds a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.NodeList.after(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Applies an event listener to each Node bound to the NodeList.
            The handler is called only after all on() handlers are called
            and the event is not prevented.
            </summary>
        </member>
        <member name="M:Y_.NodeList.append">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.appendChild">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.destroy(System.Object)">
            <summary>
            Called on each Node instance. Nulls internal node references,
            removes any plugins and event listeners
            </summary>
        </member>
        <member name="M:Y_.NodeList.detach">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Applies the given function to each Node in the NodeList.
            </summary>
        </member>
        <member name="M:Y_.NodeList.empty">
            <summary>
            Called on each Node instance. Removes and destroys all of the nodes
            within the node
            </summary>
        </member>
        <member name="M:Y_.NodeList.even">
            <summary>
            Creates a new NodeList containing all nodes at even indices
            (zero-based index), including zero.
            </summary>
        </member>
        <member name="M:Y_.NodeList.filter(System.Object)">
            <summary>
            Filters the NodeList instance down to only nodes matching the given selector.
            </summary>
        </member>
        <member name="M:Y_.NodeList.generateID">
            <summary>
            Applies a unique ID to each node if none exists
            </summary>
        </member>
        <member name="M:Y_.NodeList.getAttribute(System.Object)">
            <summary>
            Allows getting attributes on DOM nodes, normalizing in some cases.
            This passes through to the DOM node, allowing for custom attributes.
            </summary>
        </member>
        <member name="M:Y_.NodeList.getComputedStyle(System.Object)">
            <summary>
            Returns an array of the computed value for each node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.NodeList.getContent">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.getDOMNodes">
            <summary>
            Returns the DOM node bound to the Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.getDOMNodes(Y_.NodeList)">
            <summary>
            Retrieves the DOM nodes bound to a NodeList instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.getHTML">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.getStyle(System.Object)">
            <summary>
            Returns an array of values for each node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.NodeList.hasClass(System.Object)">
            <summary>
            Determines whether each node has the given className.
            </summary>
        </member>
        <member name="M:Y_.NodeList.hide(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Hides each node.
            If the "transition" module is loaded, hide optionally
            animates the hiding of the node using either the default
            transition effect ('fadeOut'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.indexOf(System.Object)">
            <summary>
            Returns the index of the node in the NodeList instance
            or -1 if the node isn't found.
            </summary>
        </member>
        <member name="M:Y_.NodeList.insert">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.insertBefore">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.isEmpty">
            <summary>
            Determines if the instance is bound to any nodes
            </summary>
        </member>
        <member name="M:Y_.NodeList.item(Y_.DataType_.Number)">
            <summary>
            Retrieves the Node instance at the given index.
            </summary>
        </member>
        <member name="M:Y_.NodeList.modulus(System.Object,System.Object)">
            <summary>
            Creates a new NodeList containing all nodes at every n indices, where
            remainder n % index equals r.
            (zero-based index).
            </summary>
        </member>
        <member name="M:Y_.NodeList.odd">
            <summary>
            Creates a new NodeList containing all nodes at odd indices
            (zero-based index).
            </summary>
        </member>
        <member name="M:Y_.NodeList.on(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribe a callback function for each `Node` in the collection to execute
            in response to a DOM event.
            NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
            favor of using event delegation from a parent Node.  See the Event user
            guide for details.
            Most DOM events are associated with a preventable default behavior, such as
            link clicks navigating to a new page.  Callbacks are passed a
            `DOMEventFacade` object as their first argument (usually called `e`) that
            can be used to prevent this default behavior with `e.preventDefault()`. See
            the `DOMEventFacade` API for all available properties and methods on the
            object.
            By default, the `this` object will be the `NodeList` that the subscription
            came from, <em>not the `Node` that received the event</em>.  Use
            `e.currentTarget` to refer to the `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
            use the event methods.
            </summary>
        </member>
        <member name="M:Y_.NodeList.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Subscribe a callback function for each `Node` in the collection to execute
            in response to a DOM event.
            NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
            favor of using event delegation from a parent Node.  See the Event user
            guide for details.
            Most DOM events are associated with a preventable default behavior, such as
            link clicks navigating to a new page.  Callbacks are passed a
            `DOMEventFacade` object as their first argument (usually called `e`) that
            can be used to prevent this default behavior with `e.preventDefault()`. See
            the `DOMEventFacade` API for all available properties and methods on the
            object.
            By default, the `this` object will be the `NodeList` that the subscription
            came from, <em>not the `Node` that received the event</em>.  Use
            `e.currentTarget` to refer to the `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
            use the event methods.
            </summary>
        </member>
        <member name="M:Y_.NodeList.on(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Subscribe a callback function for each `Node` in the collection to execute
            in response to a DOM event.
            NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
            favor of using event delegation from a parent Node.  See the Event user
            guide for details.
            Most DOM events are associated with a preventable default behavior, such as
            link clicks navigating to a new page.  Callbacks are passed a
            `DOMEventFacade` object as their first argument (usually called `e`) that
            can be used to prevent this default behavior with `e.preventDefault()`. See
            the `DOMEventFacade` API for all available properties and methods on the
            object.
            By default, the `this` object will be the `NodeList` that the subscription
            came from, <em>not the `Node` that received the event</em>.  Use
            `e.currentTarget` to refer to the `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
            use the event methods.
            </summary>
        </member>
        <member name="M:Y_.NodeList.once(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Applies an one-time event listener to each Node bound to the NodeList.
            </summary>
        </member>
        <member name="M:Y_.NodeList.onceAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Applies an one-time event listener to each Node bound to the NodeList
            that will be called only after all on() handlers are called and the
            event is not prevented.
            </summary>
        </member>
        <member name="M:Y_.NodeList.prepend">
            <summary>
            Called on each Node instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.refresh">
            <summary>
            Reruns the initial query, when created using a selector query
            </summary>
        </member>
        <member name="M:Y_.NodeList.remove(System.Object)">
            <summary>
            Called on each Node instance. Removes the node from its parent.
            Shortcut for myNode.get('parentNode').removeChild(myNode);
            </summary>
        </member>
        <member name="M:Y_.NodeList.removeAttribute(System.Object)">
            <summary>
            Allows for removing attributes on DOM nodes.
            This passes through to the DOM node, allowing for custom attributes.
            </summary>
        </member>
        <member name="M:Y_.NodeList.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.NodeList.replaceClass(System.Object,System.Object)">
            <summary>
            Replace a class with another class for each node.
            If no oldClassName is present, the newClassName is simply added.
            </summary>
        </member>
        <member name="M:Y_.NodeList.set(System.Object,System.Object)">
            <summary>
            Called on each Node instance. Sets an attribute on the Node instance.
            Unless pre-configured (via Node.ATTRS), set hands
            off to the underlying DOM node.  Only valid
            attributes/properties for the node will be set.
            To set custom attributes use setAttribute.
            </summary>
        </member>
        <member name="M:Y_.NodeList.setAttribute(System.Object,System.Object)">
            <summary>
            Allows setting attributes on DOM nodes, normalizing in some cases.
            This passes through to the DOM node, allowing for custom attributes.
            </summary>
        </member>
        <member name="M:Y_.NodeList.setContent">
            <summary>
            Called on each Node instance
            Note that this passes to innerHTML and is not escaped.
            Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
            </summary>
        </member>
        <member name="M:Y_.NodeList.setHTML">
            <summary>
            Called on each Node instance
            Note that this passes to innerHTML and is not escaped.
            Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
            </summary>
        </member>
        <member name="M:Y_.NodeList.setStyle(System.Object,System.Object)">
            <summary>
            Sets a style property on each node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.NodeList.setStyles(System.Object)">
            <summary>
            Sets multiple style properties on each node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.NodeList.show(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Makes each node visible.
            If the "transition" module is loaded, show optionally
            animates the showing of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.size">
            <summary>
            Returns the current number of items in the NodeList.
            </summary>
        </member>
        <member name="M:Y_.NodeList.some(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the function once for each node until a true value is returned.
            </summary>
        </member>
        <member name="M:Y_.NodeList.toFrag">
            <summary>
            Creates a documenFragment from the nodes bound to the NodeList instance
            </summary>
        </member>
        <member name="M:Y_.NodeList.toggleClass(System.Object)">
            <summary>
            If the className exists on the node it is removed, if it doesn't exist it is added.
            </summary>
        </member>
        <member name="M:Y_.NodeList.toggleView">
            <summary>
            Displays or hides each node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the nodes using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.toggleView(SharpKit.JavaScript.JsAction)">
            <summary>
            Displays or hides each node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the nodes using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.toggleView(System.Object)">
            <summary>
            Displays or hides each node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the nodes using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.toggleView(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Displays or hides each node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the nodes using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.NodeList.transition(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Animate one or more css properties to a given value. Requires the "transition" module.
            <pre>example usage:
            Y.all('.demo').transition({
            duration: 1, // in seconds, default is 0.5
            easing: 'ease-out', // default is 'ease'
            delay: '1', // delay start for 1 second, default is 0
            height: '10px',
            width: '10px',
            opacity: { // per property
            value: 0,
            duration: 2,
            delay: 2,
            easing: 'ease-in'
            }
            });
            </pre>
            </summary>
        </member>
        <member name="M:Y_.NodeList.unwrap">
            <summary>
            Removes the parent node from node in the list.
            </summary>
        </member>
        <member name="M:Y_.NodeList.wrap(System.Object)">
            <summary>
            Wraps the given HTML around each node.
            </summary>
        </member>
        <member name="T:Y_.IO">
            <summary>
            The IO class is a utility that brokers HTTP requests through a simplified
            interface.  Specifically, it allows JavaScript to make HTTP requests to
            a resource without a page reload.  The underlying transport for making
            same-domain requests is the XMLHttpRequest object.  IO can also use
            Flash, if specified as a transport, for cross-domain requests.
            </summary>
        </member>
        <member name="M:Y_.IO.complete(System.Object,System.Object)">
            <summary>
            Fires event "io:complete" and creates, fires a
            transaction-specific "complete" event, if config.on.complete is
            defined.
            </summary>
        </member>
        <member name="M:Y_.IO.customTransport(System.Object)">
            <summary>
            Create a custom transport of type and return it's object
            </summary>
        </member>
        <member name="M:Y_.IO.end(System.Object,System.Object)">
            <summary>
            Fires event "io:end" and creates, fires a transaction-specific "end"
            event, if config.on.end is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.error(System.Object,System.Object,System.Object)">
            <summary>
            Fires event "io:failure" and creates, fires a transaction-specific
            "failure" event -- for XMLHttpRequest file upload -- if
            config.on.failure is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.failure(System.Object,System.Object)">
            <summary>
            Fires event "io:failure" and creates, fires a transaction-specific
            "failure" event, if config.on.failure is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.load(System.Object,System.Object,System.Object)">
            <summary>
            Fires event "io:complete" and creates, fires a transaction-specific
            "complete" event -- for XMLHttpRequest file upload -- if
            config.on.complete is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.notify(System.Object,System.Object,System.Object)">
            <summary>
            Fired from the notify method of the transport which in turn fires
            the event on the IO object.
            </summary>
        </member>
        <member name="M:Y_.IO.progress(System.Object,System.Object,System.Object)">
            <summary>
            Fires event "io:progress" and creates, fires a transaction-specific
            "progress" event -- for XMLHttpRequest file upload -- if
            config.on.progress is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.promote">
            <summary>
            Method for promoting a transaction to the top of the queue.
            </summary>
        </member>
        <member name="M:Y_.IO.queue">
            <summary>
            Method for queueing a transaction before the request is sent to the
            resource, to ensure sequential processing.
            </summary>
        </member>
        <member name="M:Y_.IO.request">
            <summary>
            Passthru to the NodeJS <a href="https://github.com/mikeal/request">request</a> module.
            This method is return of `require('request')` so you can use it inside NodeJS without
            the IO abstraction.
            </summary>
        </member>
        <member name="M:Y_.IO.send(System.Object,System.Object,Y_.DataType_.Number)">
            <summary>
            Requests a transaction. `send()` is implemented as `Y.io()`.  Each
            transaction may include a configuration object.  Its properties are:
            <dl>
            <dt>method</dt>
            <dd>HTTP method verb (e.g., GET or POST). If this property is not
            not defined, the default value will be GET.</dd>
            <dt>data</dt>
            <dd>This is the name-value string that will be sent as the
            transaction data. If the request is HTTP GET, the data become
            part of querystring. If HTTP POST, the data are sent in the
            message body.</dd>
            <dt>xdr</dt>
            <dd>Defines the transport to be used for cross-domain requests.
            By setting this property, the transaction will use the specified
            transport instead of XMLHttpRequest. The properties of the
            transport object are:
            <dl>
            <dt>use</dt>
            <dd>The transport to be used: 'flash' or 'native'</dd>
            <dt>dataType</dt>
            <dd>Set the value to 'XML' if that is the expected response
            content type.</dd>
            </dl></dd>
            <dt>form</dt>
            <dd>Form serialization configuration object.  Its properties are:
            <dl>
            <dt>id</dt>
            <dd>Node object or id of HTML form</dd>
            <dt>useDisabled</dt>
            <dd>`true` to also serialize disabled form field values
            (defaults to `false`)</dd>
            </dl></dd>
            <dt>on</dt>
            <dd>Assigns transaction event subscriptions. Available events are:
            <dl>
            <dt>start</dt>
            <dd>Fires when a request is sent to a resource.</dd>
            <dt>complete</dt>
            <dd>Fires when the transaction is complete.</dd>
            <dt>success</dt>
            <dd>Fires when the HTTP response status is within the 2xx
            range.</dd>
            <dt>failure</dt>
            <dd>Fires when the HTTP response status is outside the 2xx
            range, if an exception occurs, if the transation is aborted,
            or if the transaction exceeds a configured `timeout`.</dd>
            <dt>end</dt>
            <dd>Fires at the conclusion of the transaction
            lifecycle, after `success` or `failure`.</dd>
            </dl>
            <p>Callback functions for `start` and `end` receive the id of the
            transaction as a first argument. For `complete`, `success`, and
            `failure`, callbacks receive the id and the response object
            (usually the XMLHttpRequest instance).  If the `arguments`
            property was included in the configuration object passed to
            `Y.io()`, the configured data will be passed to all callbacks as
            the last argument.</p>
            </dd>
            <dt>sync</dt>
            <dd>Pass `true` to make a same-domain transaction synchronous.
            <strong>CAVEAT</strong>: This will negatively impact the user
            experience. Have a <em>very</em> good reason if you intend to use
            this.</dd>
            <dt>context</dt>
            <dd>The "`this'" object for all configured event handlers. If a
            specific context is needed for individual callbacks, bind the
            callback to a context using `Y.bind()`.</dd>
            <dt>headers</dt>
            <dd>Object map of transaction headers to send to the server. The
            object keys are the header names and the values are the header
            values.</dd>
            <dt>timeout</dt>
            <dd>Millisecond threshold for the transaction before being
            automatically aborted.</dd>
            <dt>arguments</dt>
            <dd>User-defined data passed to all registered event handlers.
            This value is available as the second argument in the "start" and
            "end" event handlers. It is the third argument in the "complete",
            "success", and "failure" event handlers. <strong>Be sure to quote
            this property name in the transaction configuration as
            "arguments" is a reserved word in JavaScript</strong> (e.g.
            `Y.io({ ..., "arguments": stuff })`).</dd>
            </dl>
            </summary>
        </member>
        <member name="M:Y_.IO.setHeader(System.Object,System.Object)">
            <summary>
            Stores default client headers for all transactions. If a label is
            passed with no value argument, the header will be deleted.
            </summary>
        </member>
        <member name="M:Y_.IO.start(System.Object,System.Object)">
            <summary>
            Fires event "io:start" and creates, fires a transaction-specific
            start event, if `config.on.start` is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.success(System.Object,System.Object)">
            <summary>
            Fires event "io:success" and creates, fires a transaction-specific
            "success" event, if config.on.success is defined.
            </summary>
        </member>
        <member name="M:Y_.IO.transport(System.Object)">
            <summary>
            Initializes the desired transport.
            </summary>
        </member>
        <member name="M:Y_.IO.transports_nodejs">
            <summary>
            NodeJS IO transport, uses the NodeJS <a href="https://github.com/mikeal/request">request</a>
            module under the hood to perform all network IO.
            </summary>
        </member>
        <member name="M:Y_.IO.xdr(System.Object,System.Object,System.Object)">
            <summary>
            Method for accessing the transport's interface for making a
            cross-domain transaction.
            </summary>
        </member>
        <member name="M:Y_.IO.xdrReady(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Fires event "io:xdrReady"
            </summary>
        </member>
        <member name="M:Y_.IO.xdrResponse(System.Object,System.Object,System.Object)">
            <summary>
            Response controller for cross-domain requests when using the
            Flash transport or IE8's XDomainRequest object.
            </summary>
        </member>
        <member name="T:Y_.EventTarget">
            <summary>
            EventTarget provides the implementation for any object to
            publish, subscribe and fire to custom events, and also
            alows other EventTargets to target the object with events
            sourced from the other object.
            EventTarget is designed to be used with Y.augment to wrap
            EventCustom in an interface that allows events to be listened to
            and fired by name.  This makes it possible for implementing code to
            subscribe to an event that either has not been created yet, or will
            not be created at all.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.addTarget(Y_.EventTarget)">
            <summary>
            Registers another EventTarget as a bubble target.  Bubble order
            is determined by the order registered.  Multiple targets can
            be specified.
            Events can only bubble if emitFacade is true.
            Included in the event-custom-complex submodule.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.after(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribe to a custom event hosted by this object.  The
            supplied callback will execute after any listeners add
            via the subscribe method, and after the default function,
            if configured for the event, has executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.after(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Subscribe to a custom event hosted by this object.  The
            supplied callback will execute after any listeners add
            via the subscribe method, and after the default function,
            if configured for the event, has executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.after(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Subscribe to a custom event hosted by this object.  The
            supplied callback will execute after any listeners add
            via the subscribe method, and after the default function,
            if configured for the event, has executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.before">
            <summary>
            Executes the callback before a DOM event, custom event
            or method.  If the first argument is a function, it
            is assumed the target is a method.  For DOM and custom
            events, this is an alias for Y.on.
            For DOM and custom events:
            type, callback, context, 0-n arguments
            For methods:
            callback, object (method host), methodName, context, 0-n arguments
            </summary>
        </member>
        <member name="M:Y_.EventTarget.bubble(Y_.CustomEvent)">
            <summary>
            Propagate an event.  Requires the event-custom-complex module.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.detach(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Detach one or more listeners the from the specified event
            </summary>
        </member>
        <member name="M:Y_.EventTarget.detachAll(System.Object)">
            <summary>
            Removes all listeners from the specified event.  If the event type
            is not specified, all listeners from all hosted custom events will
            be removed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.fire(System.Object,System.Object)">
            <summary>
            Fire a custom event by name.  The callback functions will be executed
            from the context specified when the event was created, and with the
            following parameters.
            If the custom event object hasn't been created, then the event hasn't
            been published and it has no subscribers.  For performance sake, we
            immediate exit in this case.  This means the event won't bubble, so
            if the intention is that a bubble target be notified, the event must
            be published on this object first.
            The first argument is the event type, and any additional arguments are
            passed to the listeners as parameters.  If the first of these is an
            object literal, and the event is configured to emit an event facade,
            that object is mixed into the event facade and the facade is provided
            in place of the original object.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.getEvent(System.Object,System.Object)">
            <summary>
            Returns the custom event of the provided type has been created, a
            falsy value otherwise
            </summary>
        </member>
        <member name="M:Y_.EventTarget.getTargets">
            <summary>
            Returns an array of bubble targets for this object.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.on(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribe a callback function to a custom event fired by this object or
            from an object that bubbles its events to this object.
            Callback functions for events published with `emitFacade = true` will
            receive an `EventFacade` as the first argument (typically named "e").
            These callbacks can then call `e.preventDefault()` to disable the
            behavior published to that event's `defaultFn`.  See the `EventFacade`
            API for all available properties and methods. Subscribers to
            non-`emitFacade` events will receive the arguments passed to `fire()`
            after the event name.
            To subscribe to multiple events at once, pass an object as the first
            argument, where the key:value pairs correspond to the eventName:callback,
            or pass an array of event names as the first argument to subscribe to
            all listed events with the same callback.
            Returning `false` from a callback is supported as an alternative to
            calling `e.preventDefault(); e.stopPropagation();`.  However, it is
            recommended to use the event methods whenever possible.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Subscribe a callback function to a custom event fired by this object or
            from an object that bubbles its events to this object.
            Callback functions for events published with `emitFacade = true` will
            receive an `EventFacade` as the first argument (typically named "e").
            These callbacks can then call `e.preventDefault()` to disable the
            behavior published to that event's `defaultFn`.  See the `EventFacade`
            API for all available properties and methods. Subscribers to
            non-`emitFacade` events will receive the arguments passed to `fire()`
            after the event name.
            To subscribe to multiple events at once, pass an object as the first
            argument, where the key:value pairs correspond to the eventName:callback,
            or pass an array of event names as the first argument to subscribe to
            all listed events with the same callback.
            Returning `false` from a callback is supported as an alternative to
            calling `e.preventDefault(); e.stopPropagation();`.  However, it is
            recommended to use the event methods whenever possible.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.on(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Subscribe a callback function to a custom event fired by this object or
            from an object that bubbles its events to this object.
            Callback functions for events published with `emitFacade = true` will
            receive an `EventFacade` as the first argument (typically named "e").
            These callbacks can then call `e.preventDefault()` to disable the
            behavior published to that event's `defaultFn`.  See the `EventFacade`
            API for all available properties and methods. Subscribers to
            non-`emitFacade` events will receive the arguments passed to `fire()`
            after the event name.
            To subscribe to multiple events at once, pass an object as the first
            argument, where the key:value pairs correspond to the eventName:callback,
            or pass an array of event names as the first argument to subscribe to
            all listed events with the same callback.
            Returning `false` from a callback is supported as an alternative to
            calling `e.preventDefault(); e.stopPropagation();`.  However, it is
            recommended to use the event methods whenever possible.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.once(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>on</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.once(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>on</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.once(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>on</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.onceAfter(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>after</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.onceAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>after</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.onceAfter(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen to a custom event hosted by this object one time.
            This is the equivalent to <code>after</code> except the
            listener is immediatelly detached when it is executed.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.parseType(System.Object)">
            <summary>
            Takes the type parameter passed to 'on' and parses out the
            various pieces that could be included in the type.  If the
            event type is passed without a prefix, it will be expanded
            to include the prefix one is supplied or the event target
            is configured with a default prefix.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.parseType(System.Object,System.Object)">
            <summary>
            Takes the type parameter passed to 'on' and parses out the
            various pieces that could be included in the type.  If the
            event type is passed without a prefix, it will be expanded
            to include the prefix one is supplied or the event target
            is configured with a default prefix.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.publish(System.Object,System.Object)">
            <summary>
            Creates a new custom event of the specified type.  If a custom event
            by that name already exists, it will not be re-created.  In either
            case the custom event is returned.
            </summary>
        </member>
        <member name="M:Y_.EventTarget.removeTarget(Y_.EventTarget)">
            <summary>
            Removes a bubble target
            </summary>
        </member>
        <member name="M:Y_.EventTarget.subscribe">
            <summary>
            subscribe to an event
            </summary>
        </member>
        <member name="M:Y_.EventTarget.unsubscribe">
            <summary>
            detach a listener
            </summary>
        </member>
        <member name="M:Y_.EventTarget.unsubscribeAll(System.Object)">
            <summary>
            Removes all listeners from the specified event.  If the event type
            is not specified, all listeners from all hosted custom events will
            be removed.
            </summary>
        </member>
        <member name="T:Y_.Easing">
            <summary>
            The easing module provides methods for customizing
            how an animation behaves during each run.
            </summary>
        </member>
        <member name="M:Y_.Easing.backBoth(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Backtracks slightly, then reverses direction, overshoots end,
            then reverses and comes back to end.
            </summary>
        </member>
        <member name="M:Y_.Easing.backIn(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Backtracks slightly, then reverses direction and moves to end.
            </summary>
        </member>
        <member name="M:Y_.Easing.backOut(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Overshoots end, then reverses and comes back to end.
            </summary>
        </member>
        <member name="M:Y_.Easing.bounceBoth(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Bounces off start and end.
            </summary>
        </member>
        <member name="M:Y_.Easing.bounceIn(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Bounce off of start.
            </summary>
        </member>
        <member name="M:Y_.Easing.bounceOut(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Bounces off end.
            </summary>
        </member>
        <member name="M:Y_.Easing.easeBoth(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins slowly and decelerates towards end. (quadratic)
            </summary>
        </member>
        <member name="M:Y_.Easing.easeBothStrong(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins slowly and decelerates towards end. (quartic)
            </summary>
        </member>
        <member name="M:Y_.Easing.easeIn(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins slowly and accelerates towards end. (quadratic)
            </summary>
        </member>
        <member name="M:Y_.Easing.easeInStrong(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins slowly and accelerates towards end. (quartic)
            </summary>
        </member>
        <member name="M:Y_.Easing.easeNone(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Uniform speed between points.
            </summary>
        </member>
        <member name="M:Y_.Easing.easeOut(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins quickly and decelerates towards end.  (quadratic)
            </summary>
        </member>
        <member name="M:Y_.Easing.easeOutStrong(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Begins quickly and decelerates towards end.  (quartic)
            </summary>
        </member>
        <member name="M:Y_.Easing.elasticBoth(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Snap both elastic effect.
            </summary>
        </member>
        <member name="M:Y_.Easing.elasticIn(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Snap in elastic effect.
            </summary>
        </member>
        <member name="M:Y_.Easing.elasticOut(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Snap out elastic effect.
            </summary>
        </member>
        <member name="T:Y_.DataSchema_.XML">
            <summary>
            Provides a DataSchema implementation which can be used to work with XML data.
            See the `apply` method for usage.
            </summary>
        </member>
        <member name="T:Y_.DataSchema_.Base">
            <summary>
            Base class for the YUI DataSchema Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Base.apply(System.Object,System.Object)">
            <summary>
            Overridable method returns data as-is.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Base.parse(System.Object,System.Object)">
            <summary>
            Applies field parser, if defined
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._getLocationValue(System.Object,System.Object)">
            <summary>
            Get an XPath-specified value for a given field from an XML node or document.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._getXPathResult(System.Object,System.Object,System.Object)">
            <summary>
            Fetches the XPath-specified result for a given location in an XML node
            or document.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._parseField(System.Object,System.Object,System.Object)">
            <summary>
            Schema-parsed result field.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._parseMeta(System.Object,System.Object)">
            <summary>
            Parses results data according to schema
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._parseResult(Y_.Array,System.Object)">
            <summary>
            Schema-parsed result to add to results list.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML._parseResults(System.Object,System.Object,System.Object)">
            <summary>
            Schema-parsed list of results from full data
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.XML.apply(System.Object,System.Object)">
            <summary>
            Applies a schema to an XML data tree, returning a normalized object with
            results in the `results` property. Additional information can be parsed out
            of the XML for inclusion in the `meta` property of the response object.  If
            an error is encountered during processing, an `error` property will be
            added.
            Field data in the nodes captured by the XPath in _schema.resultListLocator_
            is extracted with the field identifiers described in _schema.resultFields_.
            Field identifiers are objects with the following properties:
            * `key`    : <strong>(required)</strong> The desired property name to use
            store the retrieved value in the result object.  If `locator` is
            not specified, `key` is also used as the XPath locator (String)
            * `locator`: The XPath locator to the node or attribute within each
            result node found by _schema.resultListLocator_ containing the
            desired field data (String)
            * `parser` : A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            * `schema` : Used to retrieve nested field data into an array for
            assignment as the result field value.  This object follows the same
            conventions as _schema_.
            If no value parsing or nested parsing is needed, you can use XPath locators
            (strings) instead of field identifiers (objects) -- see example below.
            `response.results` will contain an array of objects with key:value pairs.
            The keys are the field identifier `key`s, and the values are the data
            values extracted from the nodes or attributes found by the field `locator`
            (or `key` fallback).
            To extract additional information from the XML, include an array of
            XPath locators in _schema.metaFields_.  The collected values will be
            stored in `response.meta` with the XPath locator as keys.
            </summary>
        </member>
        <member name="T:Y_.DataSchema_.Text">
            <summary>
            Provides a DataSchema implementation which can be used to work with
            delimited text data.
            See the `apply` method for usage.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Text._parseResults(Y_.Array,System.Object,System.Object)">
            <summary>
            Schema-parsed list of results from full data
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Text.apply(System.Object,System.Object)">
            <summary>
            Applies a schema to a string of delimited data, returning a normalized
            object with results in the `results` property. The `meta` property of
            the response object is present for consistency, but is assigned an
            empty object.  If the input data is absent or not a string, an `error`
            property will be added.
            Use _schema.resultDelimiter_ and _schema.fieldDelimiter_ to instruct
            `apply` how to split up the string into an array of data arrays for
            processing.
            Use _schema.resultFields_ to specify the keys in the generated result
            objects in `response.results`. The key:value pairs will be assigned
            in the order of the _schema.resultFields_ array, assuming the values
            in the data records are defined in the same order.
            _schema.resultFields_ field identifiers are objects with the following
            properties:
            * `key`   : <strong>(required)</strong> The property name you want
            the data value assigned to in the result object (String)
            * `parser`: A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            If no value parsing is needed, you can use just the desired property
            name string as the field identifier instead of an object (see example
            below).
            </summary>
        </member>
        <member name="T:Y_.Controller">
            <summary>
            The `Controller` class was deprecated in YUI 3.5.0 and is now an alias for the
            `Router` class. Use that class instead. This alias will be removed in a future
            version of YUI.
            </summary>
        </member>
        <member name="T:Y_.AutoCompleteBase">
            <summary>
            Extension that provides core autocomplete logic (but no UI implementation) for a
            text input field or textarea.
            The `AutoCompleteBase` class provides events and attributes that abstract away
            core autocomplete logic and configuration, but does not provide a widget
            implementation or suggestion UI. For a prepackaged autocomplete widget, see
            `AutoCompleteList`.
            This extension cannot be instantiated directly, since it doesn't provide an
            actual implementation. It's intended to be mixed into a `Y.Base`-based class or
            widget.
            `Y.Widget`-based example:
            YUI().use('autocomplete-base', 'widget', function (Y) {
            var MyAC = Y.Base.create('myAC', Y.Widget, [Y.AutoCompleteBase], {
            // Custom prototype methods and properties.
            }, {
            // Custom static methods and properties.
            });
            // Custom implementation code.
            });
            `Y.Base`-based example:
            YUI().use('autocomplete-base', function (Y) {
            var MyAC = Y.Base.create('myAC', Y.Base, [Y.AutoCompleteBase], {
            initializer: function () {
            this._bindUIACBase();
            this._syncUIACBase();
            },
            // Custom prototype methods and properties.
            }, {
            // Custom static methods and properties.
            });
            // Custom implementation code.
            });
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._afterSourceTypeChange(Y_.EventFacade)">
            <summary>
            Updates the current `source` based on the new `sourceType` to ensure that
            the two attributes don't get out of sync when they're changed separately.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._afterValueChange(Y_.EventFacade)">
            <summary>
            Handles change events for the `value` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._beforeCreateObjectSource(System.Object)">
            <summary>
            Runs before AutoCompleteBase's `_createObjectSource()` method and augments
            it to support additional object-based source types.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._bindUIACBase">
            <summary>
            Attaches event listeners and behaviors.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createArraySource(Y_.Array)">
            <summary>
            Creates a DataSource-like object that simply returns the specified array as
            a response. See the `source` attribute for more details.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createFunctionSource(SharpKit.JavaScript.JsAction)">
            <summary>
            Creates a DataSource-like object that passes the query to a custom-defined
            function, which is expected to call the provided callback with an array of
            results. See the `source` attribute for more details.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createIOSource(System.Object)">
            <summary>
            Creates a DataSource-like object that uses `Y.io` as a source. See the
            `source` attribute for more details.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createJSONPSource(System.Object)">
            <summary>
            Creates a DataSource-like object that uses the specified JSONPRequest
            instance as a source. See the `source` attribute for more details.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createObjectSource(System.Object)">
            <summary>
            Creates a DataSource-like object that looks up queries as properties on the
            specified object, and returns the found value (if any) as a response. See
            the `source` attribute for more details.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.AutoCompleteBase._createSelectSource(Y_.Node)" -->
        <member name="M:Y_.AutoCompleteBase._createStringSource(System.Object)">
            <summary>
            Creates a DataSource-like object that calls the specified  URL or executes
            the specified YQL query for results. If the string starts with "select ",
            "use ", or "set " (case-insensitive), it's assumed to be a YQL query;
            otherwise, it's assumed to be a URL (which may be absolute or relative).
            URLs containing a "{callback}" placeholder are assumed to be JSONP URLs; all
            others will use XHR. See the `source` attribute for more details.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._createYQLSource(System.Object)">
            <summary>
            Creates a DataSource-like object that uses the specified YQL query string to
            create a YQL-based source. See the `source` attribute for details. If no
            `resultListLocator` is defined, this method will set a best-guess locator
            that might work for many typical YQL queries.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._defaultYQLLocator(System.Object)">
            <summary>
            Default resultListLocator used when a string-based YQL source is set and the
            implementer hasn't already specified one.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._defClearFn">
            <summary>
            Default `clear` event handler. Sets the `results` attribute to an empty
            array and `query` to null.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._defQueryFn(Y_.EventFacade)">
            <summary>
            Default `query` event handler. Sets the `query` attribute and sends a
            request to the source if one is configured.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._defResultsFn(Y_.EventFacade)">
            <summary>
            Default `results` event handler. Sets the `results` attribute to the latest
            results.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._functionValidator(System.Object)">
            <summary>
            Returns `true` if _value_ is either a function or `null`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._getObjectValue(System.Object,Y_.Array)">
            <summary>
            Faster and safer alternative to `Y.Object.getValue()`. Doesn't bother
            casting the path to an array (since we already know it's an array) and
            doesn't throw an error if a value in the middle of the object hierarchy is
            neither `undefined` nor an object.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._getXHRUrl(System.Object,System.Object)">
            <summary>
            Returns a formatted XHR URL based on the specified base _url_, _query_, and
            the current _requestTemplate_ if any.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._jsonpFormatter(System.Object,System.Object,System.Object)">
            <summary>
            URL formatter passed to `JSONPRequest` instances.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._onInputBlur(Y_.EventFacade)">
            <summary>
            Handles `blur` events on the input node.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._onInputValueChange(Y_.EventFacade)">
            <summary>
            Handles `valueChange` events on the input node and fires a `query` event
            when the input value meets the configured criteria.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._onResponse(Y_.EventFacade)">
            <summary>
            Handles source responses and fires the `results` event.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._parseResponse(System.Object,System.Object,System.Object)">
            <summary>
            Parses result responses, performs filtering and highlighting, and fires the
            `results` event.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._parseValue(System.Object)">
            <summary>
            Returns the query portion of the specified input value, or `null` if there
            is no suitable query within the input value.
            If a query delimiter is defined, the query will be the last delimited part
            of of the string.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setEnableCache(System.Object)">
            <summary>
            Setter for the `enableCache` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setLocator(System.Object)">
            <summary>
            Setter for locator attributes.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setRequestTemplate(System.Object)">
            <summary>
            Setter for the `requestTemplate` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setResultFilters(System.Object)">
            <summary>
            Setter for the `resultFilters` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setResultHighlighter(System.Object)">
            <summary>
            Setter for the `resultHighlighter` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._setSource(System.Object)">
            <summary>
            Setter for the `source` attribute. Returns a DataSource or a DataSource-like
            object depending on the type of _source_ and/or the value of the
            `sourceType` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._sourceSuccess(System.Object,System.Object)">
            <summary>
            Shared success callback for non-DataSource sources.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._syncBrowserAutocomplete">
            <summary>
            Synchronizes the UI state of the `allowBrowserAutocomplete` attribute.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._syncUIACBase">
            <summary>
            Synchronizes the UI state of the `inputNode`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase._updateValue(System.Object)">
            <summary>
            Updates the query portion of the `value` attribute.
            If a query delimiter is defined, the last delimited portion of the input
            value will be replaced with the specified _value_.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase.clearCache">
            <summary>
            Clears the result cache.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase.sendRequest">
            <summary>
            Sends a request to the configured source. If no source is configured, this
            method won't do anything.
            Usually there's no reason to call this method manually; it will be called
            automatically when user input causes a `query` event to be fired. The only
            time you'll need to call this method manually is if you want to force a
            request to be sent when no user input has occurred.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase.sendRequest(SharpKit.JavaScript.JsAction)">
            <summary>
            Sends a request to the configured source. If no source is configured, this
            method won't do anything.
            Usually there's no reason to call this method manually; it will be called
            automatically when user input causes a `query` event to be fired. The only
            time you'll need to call this method manually is if you want to force a
            request to be sent when no user input has occurred.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase.sendRequest(System.Object)">
            <summary>
            Sends a request to the configured source. If no source is configured, this
            method won't do anything.
            Usually there's no reason to call this method manually; it will be called
            automatically when user input causes a `query` event to be fired. The only
            time you'll need to call this method manually is if you want to force a
            request to be sent when no user input has occurred.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteBase.sendRequest(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sends a request to the configured source. If no source is configured, this
            method won't do anything.
            Usually there's no reason to call this method manually; it will be called
            automatically when user input causes a `query` event to be fired. The only
            time you'll need to call this method manually is if you want to force a
            request to be sent when no user input has occurred.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteBase.maxResults">
            <summary>
            Maximum number of results to return. A value of `0` or less will allow an
            unlimited number of results.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteBase.minQueryLength">
            <summary>
            Minimum number of characters that must be entered before a `query` event
            will be fired. A value of `0` allows empty queries; a negative value will
            effectively disable all `query` events.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteBase.queryDelay">
            <summary>
            Number of milliseconds to delay after input before triggering a `query`
            event. If new input occurs before this delay is over, the previous input
            event will be ignored and a new delay will begin.
            This can be useful both to throttle queries to a remote data source and to
            avoid distracting the user by showing them less relevant results before
            they've paused their typing.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteBase.resultFilters">
            <summary>
            Array of local result filter functions. If provided, each filter will be
            called with two arguments when results are received: the query and an array
            of result objects. See the documentation for the `results` event for a list
            of the properties available on each result object.
            Each filter is expected to return a filtered or modified version of the
            results array, which will then be passed on to subsequent filters, then the
            `resultHighlighter` function (if set), then the `resultFormatter` function
            (if set), and finally to subscribers to the `results` event.
            If no `source` is set, result filters will not be called.
            Prepackaged result filters provided by the autocomplete-filters and
            autocomplete-filters-accentfold modules can be used by specifying the filter
            name as a string, such as `'phraseMatch'` (assuming the necessary filters
            module is loaded).
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteBase.results">
            <summary>
            Current results, or an empty array if there are no results.
            </summary>
        </member>
        <member name="T:Y_.Test_.Assert">
            <summary>
            The Assert object provides functions to test JavaScript values against
            known and expected results. Whenever a comparison (assertion) fails,
            an error is thrown.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert._formatMessage(System.Object,System.Object)">
            <summary>
            Formats a message so that it can contain the original assertion message
            in addition to the custom message.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert._getCount">
            <summary>
            Returns the number of assertions that have been performed.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert._increment">
            <summary>
            Increments the number of assertions that have been performed.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert._reset">
            <summary>
            Resets the number of assertions that have been performed to 0.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.areEqual(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a value is equal to another. This uses the double equals sign
            so type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.areNotEqual(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a value is not equal to another. This uses the double equals sign
            so type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.areNotSame(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a value is not the same as another. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.areSame(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a value is the same as another. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.fail(System.Object)">
            <summary>
            Forces an assertion error to occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isArray(System.Object,System.Object)">
            <summary>
            Asserts that a value is an array.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isBoolean(System.Object,System.Object)">
            <summary>
            Asserts that a value is a Boolean.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isFalse(System.Object,System.Object)">
            <summary>
            Asserts that a value is false. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isFunction(System.Object,System.Object)">
            <summary>
            Asserts that a value is a function.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isInstanceOf(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Asserts that a value is an instance of a particular object. This may return
            incorrect results when comparing objects from one frame to constructors in
            another frame. For best results, don't use in a cross-frame manner.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNaN(System.Object,System.Object)">
            <summary>
            Asserts that a value is not a number.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNotNaN(System.Object,System.Object)">
            <summary>
            Asserts that a value is not the special NaN value.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNotNull(System.Object,System.Object)">
            <summary>
            Asserts that a value is not null. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNotUndefined(System.Object,System.Object)">
            <summary>
            Asserts that a value is not undefined. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNull(System.Object,System.Object)">
            <summary>
            Asserts that a value is null. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isNumber(System.Object,System.Object)">
            <summary>
            Asserts that a value is a number.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isObject(System.Object,System.Object)">
            <summary>
            Asserts that a value is an object.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isString(System.Object,System.Object)">
            <summary>
            Asserts that a value is a string.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isTrue(System.Object,System.Object)">
            <summary>
            Asserts that a value is true. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isTypeOf(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a value is of a particular type.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.isUndefined(System.Object,System.Object)">
            <summary>
            Asserts that a value is undefined. This uses the triple equals sign
            so no type cohersion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.pass">
            <summary>
            A marker that the test should pass.
            </summary>
        </member>
        <member name="M:Y_.Test_.Assert.throwsError(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Asserts that executing a particular method should throw an error of
            a specific type. This is a replacement for _should.error.
            </summary>
        </member>
        <member name="T:Y_.Test_.ArrayAssert">
            <summary>
            The ArrayAssert object provides functions to test JavaScript array objects
            for a variety of cases.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.contains(System.Object,Y_.Array,System.Object)">
            <summary>
            Asserts that a value is present in an array. This uses the triple equals
            sign so no type coercion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.containsItems(System.Object,Y_.Array,System.Object)">
            <summary>
            Asserts that a set of values are present in an array. This uses the triple
            equals
            sign so no type coercion may occur. For this assertion to pass, all values must
            be found.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.containsMatch(SharpKit.JavaScript.JsAction,Y_.Array,System.Object)">
            <summary>
            Asserts that a value matching some condition is present in an array. This uses
            a function to determine a match.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.doesNotContain(System.Object,Y_.Array,System.Object)">
            <summary>
            Asserts that a value is not present in an array. This uses the triple equals
            Asserts that a value is not present in an array. This uses the triple equals
            sign so no type coercion may occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.doesNotContainItems(System.Object,Y_.Array,System.Object)">
            <summary>
            Asserts that a set of values are not present in an array. This uses the triple
            equals
            sign so no type coercion may occur. For this assertion to pass, all values must
            not be found.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.doesNotContainMatch(SharpKit.JavaScript.JsAction,Y_.Array,System.Object)">
            <summary>
            Asserts that no values matching a condition are present in an array. This uses
            a function to determine a match.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.indexOf(System.Object,Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that the given value is contained in an array at the specified index.
            This uses the triple equals sign so no type coercion will occur.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.isEmpty(Y_.Array,System.Object)">
            <summary>
            Asserts that an array is empty.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.isNotEmpty(Y_.Array,System.Object)">
            <summary>
            Asserts that an array is not empty.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.itemsAreEqual(Y_.Array,Y_.Array,System.Object)">
            <summary>
            Asserts that the values in an array are equal, and in the same position,
            as values in another array. This uses the double equals sign
            so type coercion may occur. Note that the array objects themselves
            need not be the same for this test to pass.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.itemsAreEquivalent(Y_.Array,Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Asserts that the values in an array are equivalent, and in the same position,
            as values in another array. This uses a function to determine if the values
            are equivalent. Note that the array objects themselves
            need not be the same for this test to pass.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.itemsAreSame(Y_.Array,Y_.Array,System.Object)">
            <summary>
            Asserts that the values in an array are the same, and in the same position,
            as values in another array. This uses the triple equals sign
            so no type coercion will occur. Note that the array objects themselves
            need not be the same for this test to pass.
            </summary>
        </member>
        <member name="M:Y_.Test_.ArrayAssert.lastIndexOf(System.Object,Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that the given value is contained in an array at the specified index,
            starting from the back of the array.
            This uses the triple equals sign so no type coercion will occur.
            </summary>
        </member>
        <member name="T:Y_.SyntheticEvent_.Notifier">
            <summary>
            <p>The triggering mechanism used by SyntheticEvents.</p>
            <p>Implementers should not instantiate these directly.  Use the Notifier
            provided to the event's implemented <code>on(node, sub, notifier)</code> or
            <code>delegate(node, sub, notifier, filter)</code> methods.</p>
            </summary>
        </member>
        <member name="T:Y_.SVGCircle">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Circle.html">`Circle`</a> class.
            `SVGCircle` is not intended to be used directly. Instead, use the <a href="Circle.html">`Circle`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Circle.html">`Circle`</a>
            class will point to the `SVGCircle` class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.StyleSheet" -->
        <member name="M:Y_.StyleSheet.disable">
            <summary>
            Disable all the rules in the sheet.  Rules may be changed while the
            StyleSheet is disabled.
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.enable">
            <summary>
            Enable all the rules in the sheet
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.getCssText(System.Object)">
            <summary>
            Get the current cssText for a rule or the entire sheet.  If the
            selector param is supplied, only the cssText for that rule will be
            returned, if found.  If the selector string targets multiple
            selectors separated by commas, the cssText of the first rule only
            will be returned.  If no selector string, the stylesheet's full
            cssText will be returned.
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.getId">
            <summary>
            Get the unique stamp for this StyleSheet instance
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.isEnabled">
            <summary>
            Returns false if the StyleSheet is disabled.  Otherwise true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.StyleSheet.isValidSelector(System.Object)" -->
        <member name="M:Y_.StyleSheet.register(System.Object,Y_.StyleSheet)">
            <summary>
            Registers a StyleSheet instance in the static registry by the given name
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.set(System.Object,System.Object)">
            <summary>
            <p>Set style properties for a provided selector string.
            If the selector includes commas, it will be split into individual
            selectors and applied accordingly.  If the selector string does not
            have a corresponding rule in the sheet, it will be added.</p>
            <p>The object properties in the second parameter must be the JavaScript
            names of style properties.  E.g. fontSize rather than font-size.</p>
            <p>The float style property will be set by any of &quot;float&quot;,
            &quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.toCssText(System.Object,System.Object)">
            <summary>
            <p>Converts an object literal of style properties and values into a string
            of css text.  This can then be assigned to el.style.cssText.</p>
            <p>The optional second parameter is a cssText string representing the
            starting state of the style prior to alterations.  This is most often
            extracted from the eventual target's current el.style.cssText.</p>
            </summary>
        </member>
        <member name="M:Y_.StyleSheet.unset(System.Object,System.Object)">
            <summary>
            <p>Unset style properties for a provided selector string, removing
            their effect from the style cascade.</p>
            <p>If the selector includes commas, it will be split into individual
            selectors and applied accordingly.  If there are no properties
            remaining in the rule after unsetting, the rule is removed.</p>
            <p>The style property or properties in the second parameter must be the
            JavaScript style property names. E.g. fontSize rather than font-size.</p>
            <p>The float style property will be unset by any of &quot;float&quot;,
            &quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>
            </summary>
        </member>
        <member name="T:Y_.json">
            <summary>
            <p>The JSON module adds support for serializing JavaScript objects into
            JSON strings and parsing JavaScript objects from strings in JSON format.</p>
            <p>The JSON namespace is added to your YUI instance including static methods
            Y.JSON.parse(..) and Y.JSON.stringify(..).</p>
            <p>The functionality and method signatures follow the ECMAScript 5
            specification.  In browsers with native JSON support, the native
            implementation is used.</p>
            <p>The <code>json</code> module is a rollup of <code>json-parse</code> and
            <code>json-stringify</code>.</p>
            <p>As their names suggest, <code>json-parse</code> adds support for parsing
            JSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing
            JavaScript data into JSON strings (Y.JSON.stringify).  You may choose to
            include either of the submodules individually if you don't need the
            complementary functionality, or include the rollup for both.</p>
            </summary>
        </member>
        <member name="T:Y_.DD_.DDM">
            <summary>
            Provides the base Drag Drop Manger required for making a Node draggable.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.clearCache">
            <summary>
            Clears the cache data used for this interaction.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.getBestMatch(Y_.Array,System.Object)">
            <summary>
            This method will gather the area for all potential targets and see which has the hightest covered area and return it.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.getDelegate">
            <summary>
            Get a delegate instance from a container node
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.getDrag(System.Object)">
            <summary>
            Get a valid Drag instance back from a Node or a selector string, false otherwise
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.getDrop(System.Object)">
            <summary>
            Get a valid Drop instance back from a Node or a selector string, false otherwise
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.getNode(System.Object)">
            <summary>
            Return a node instance from the given node, selector string or Y.Base extended object.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.isOverTarget(System.Object)">
            <summary>
            Check to see if the Drag element is over the target, method varies on current mode
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.regDelegate">
            <summary>
            Register a Delegate with the DDM
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.stopDrag">
            <summary>
            Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.swapNode(Y_.Node,Y_.Node)">
            <summary>
            Swap the position of 2 nodes based on their DOM location.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.swapPosition(Y_.Node,Y_.Node)">
            <summary>
            Swap the position of 2 nodes based on their CSS positioning.
            </summary>
        </member>
        <member name="M:Y_.DD_.DDM.syncActiveShims(System.Object)">
            <summary>
            This method will sync the position of the shims on the Drop Targets that are currently active.
            </summary>
        </member>
        <member name="P:Y_.DD_.DDM.clickPixelThresh">
            <summary>
            The number of pixels to move to start a drag operation, default is 3.
            </summary>
        </member>
        <member name="P:Y_.DD_.DDM.clickTimeThresh">
            <summary>
            The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.
            </summary>
        </member>
        <member name="P:Y_.DD_.DDM.throttleTime">
            <summary>
            The number of milliseconds to throttle the mousemove event. Default: 150
            </summary>
        </member>
        <member name="T:Y_.DataType_.Number">
            <summary>
            DataType.Number provides a set of utility functions to operate against Number objects.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Number.format(Y_.DataType_.Number,System.Object)">
            <summary>
            Takes a Number and formats to string for display to user.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Number.parse(System.Object)">
            <summary>
            Converts data to type Number.
            </summary>
        </member>
        <member name="T:Y_.config">
            <summary>
            The config object contains all of the configuration options for
            the `YUI` instance.  This object is supplied by the implementer
            when instantiating a `YUI` instance.  Some properties have default
            values if they are not supplied by the implementer.  This should
            not be updated directly because some values are cached.  Use
            `applyConfig()` to update the config object on a YUI instance that
            has already been configured.
            </summary>
        </member>
        <member name="M:Y_.config.useNativeES5">
            <summary>
            Whether or not YUI should use native ES5 functionality when available for
            features like `Y.Array.each()`, `Y.Object()`, etc. When `false`, YUI will
            always use its own fallback implementations instead of relying on ES5
            functionality, even when it's available.
            </summary>
        </member>
        <member name="P:Y_.config.aliases">
            <summary>
            Aliases are dynamic groups of modules that can be used as
            shortcuts.
            YUI({
            aliases: {
            davglass: [ 'node', 'yql', 'dd' ],
            mine: [ 'davglass', 'autocomplete']
            }
            }).use('mine', function(Y) {
            //Node, YQL, DD &amp; AutoComplete available here..
            });
            </summary>
        </member>
        <member name="P:Y_.config.base">
            <summary>
            Base directory for dynamic loading
            </summary>
        </member>
        <member name="P:Y_.config.comboBase">
            <summary>
            The YUI combo service base dir. Ex: `http://yui.yahooapis.com/combo?`
            For dynamic loading.
            </summary>
        </member>
        <member name="P:Y_.config.core">
            <summary>
            A list of modules that defines the YUI core (overrides the default list).
            </summary>
        </member>
        <member name="P:Y_.config.cssAttributes">
            <summary>
            Object literal containing attributes to add to dynamically loaded link
            nodes.
            </summary>
        </member>
        <member name="P:Y_.config.dateFormat">
            <summary>
            The default date format
            </summary>
        </member>
        <member name="P:Y_.config.errorFn">
            <summary>
            A callback to execute when Y.error is called.  It receives the
            error message and an javascript error object if Y.error was
            executed because a javascript error was caught.  The function
            is executed in the YUI instance context. Returning `true` from this
            function will stop the Error from being thrown.
            </summary>
        </member>
        <member name="P:Y_.config.filters">
            <summary>
            Hash of per-component filter specification.  If specified for a given
            component, this overrides the filter config.
            For dynamic loading.
            </summary>
        </member>
        <member name="P:Y_.config.gallery">
            <summary>
            The default gallery version to build gallery module urls
            </summary>
        </member>
        <member name="P:Y_.config.groups">
            <summary>
            A hash of module group definitions.  It for each group you
            can specify a list of modules and the base path and
            combo spec to use when dynamically loading the modules.
            groups: {
            yui2: {
            // specify whether or not this group has a combo service
            combine: true,
            // The comboSeperator to use with this group's combo handler
            comboSep: ';',
            // The maxURLLength for this server
            maxURLLength: 500,
            // the base path for non-combo paths
            base: 'http://yui.yahooapis.com/2.8.0r4/build/',
            // the path to the combo service
            comboBase: 'http://yui.yahooapis.com/combo?',
            // a fragment to prepend to the path attribute when
            // when building combo urls
            root: '2.8.0r4/build/',
            // the module definitions
            modules:  {
            yui2_yde: {
            path: "yahoo-dom-event/yahoo-dom-event.js"
            },
            yui2_anim: {
            path: "animation/animation.js",
            requires: ['yui2_yde']
            }
            }
            }
            }
            </summary>
        </member>
        <member name="P:Y_.config.insertBefore">
            <summary>
            Node or id for a node that should be used as the insertion point for new
            nodes.  For dynamic loading.
            </summary>
        </member>
        <member name="P:Y_.config.jsAttributes">
            <summary>
            Object literal containing attributes to add to dynamically loaded script
            nodes.
            </summary>
        </member>
        <member name="P:Y_.config.loaderPath">
            <summary>
            The loader 'path' attribute to the loader itself.  This is combined
            with the 'base' attribute to dynamically load the loader component
            when boostrapping with the get utility alone.
            </summary>
        </member>
        <member name="P:Y_.config.loadErrorFn">
            <summary>
            A callback to execute when the loader fails to load one or
            more resource.  This could be because of a script load
            failure.  It can also fail if a javascript module fails
            to register itself, but only when the 'requireRegistration'
            is true.  If this function is defined, the use() callback will
            only be called when the loader succeeds, otherwise it always
            executes unless there was a javascript error when attaching
            a module.
            </summary>
        </member>
        <member name="P:Y_.config.locale">
            <summary>
            The default locale
            </summary>
        </member>
        <member name="P:Y_.config.logExclude">
            <summary>
            A hash of log sources that should be not be logged.  If specified,
            all sources are logged if not on this list.
            </summary>
        </member>
        <member name="P:Y_.config.logFn">
            <summary>
            Alternative console log function for use in environments without
            a supported native console.  The function is executed in the
            YUI instance context.
            </summary>
        </member>
        <member name="P:Y_.config.logInclude">
            <summary>
            A hash of log sources that should be logged.  If specified, only
            log messages from these sources will be logged.
            </summary>
        </member>
        <member name="P:Y_.config.modules">
            <summary>
            A hash of module definitions to add to the list of YUI components.
            These components can then be dynamically loaded side by side with
            YUI via the `use()` method. This is a hash, the key is the module
            name, and the value is an object literal specifying the metdata
            for the module.  See `Loader.addModule` for the supported module
            metadata fields.  Also see groups, which provides a way to
            configure the base and combo spec for a set of modules.
            modules: {
            mymod1: {
            requires: ['node'],
            fullpath: '/mymod1/mymod1.js'
            },
            mymod2: {
            requires: ['mymod1'],
            fullpath: '/mymod2/mymod2.js'
            },
            mymod3: '/js/mymod3.js',
            mycssmod: '/css/mycssmod.css'
            }
            </summary>
        </member>
        <member name="P:Y_.config.pollInterval">
            <summary>
            The default interval when polling in milliseconds.
            </summary>
        </member>
        <member name="P:Y_.config.purgethreshold">
            <summary>
            The number of dynamic nodes to insert by default before
            automatically removing them.  This applies to script nodes
            because removing the node will not make the evaluated script
            unavailable.  Dynamic CSS is not auto purged, because removing
            a linked style sheet will also remove the style definitions.
            </summary>
        </member>
        <member name="P:Y_.config.root">
            <summary>
            The root path to prepend to module path for the combo service.
            Ex: 3.0.0b1/build/
            For dynamic loading.
            </summary>
        </member>
        <member name="P:Y_.config.skin">
            <summary>
            The `skin` config let's you configure application level skin
            customizations.  It contains the following attributes which
            can be specified to override the defaults:
            // The default skin, which is automatically applied if not
            // overriden by a component-specific skin definition.
            // Change this in to apply a different skin globally
            defaultSkin: 'sam',
            // This is combined with the loader base property to get
            // the default root directory for a skin.
            base: 'assets/skins/',
            // Any component-specific overrides can be specified here,
            // making it possible to load different skins for different
            // components.  It is possible to load more than one skin
            // for a given component as well.
            overrides: {
            slider: ['capsule', 'round']
            }
            For dynamic loading.
            </summary>
        </member>
        <member name="P:Y_.config.timeout">
            <summary>
            Number of milliseconds before a timeout occurs when dynamically
            loading nodes. If not set, there is no timeout.
            </summary>
        </member>
        <member name="P:Y_.config.windowResizeDelay">
            <summary>
            The default interval when polling in milliseconds.
            </summary>
        </member>
        <member name="P:Y_.config.yui2">
            <summary>
            The default YUI 2 version to build yui2 module urls.  This is for
            intrinsic YUI 2 support via the 2in3 project.  Also see the '2in3'
            config for pulling different revisions of the wrapped YUI 2
            modules.
            </summary>
        </member>
        <member name="T:Y_.BarSeries">
            <summary>
            The BarSeries class renders bars positioned vertically along a category or time axis. The bars'
            lengths are proportional to the values they represent along a horizontal axis.
            and the relevant data points.
            </summary>
        </member>
        <member name="M:Y_.BarSeries.updateMarkerState(System.Object,Y_.DataType_.Number)">
            <summary>
            Resizes and positions markers based on a mouse interaction.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.BarSeries.styles" -->
        <member name="T:Y_.AutoCompleteList">
            <summary>
            Traditional autocomplete dropdown list widget, just like Mom used to make.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._activateNextItem">
            <summary>
            Activates the next item after the currently active item. If there is no next
            item and the `circular` attribute is `true`, focus will wrap back to the
            input node.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._activatePrevItem">
            <summary>
            Activates the item previous to the currently active item. If there is no
            previous item and the `circular` attribute is `true`, focus will wrap back
            to the input node.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._add(System.Object)">
            <summary>
            Appends the specified result _items_ to the list inside a new item node.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterActiveItemChange(Y_.EventFacade)">
            <summary>
            Handles `activeItemChange` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterAlwaysShowListChange(Y_.EventFacade)">
            <summary>
            Handles `alwaysShowListChange` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterDocClick(Y_.EventFacade)">
            <summary>
            Handles click events on the document. If the click is outside both the
            input node and the bounding box, the list will be hidden.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterHoveredItemChange(Y_.EventFacade)">
            <summary>
            Handles `hoveredItemChange` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterListInputBlur">
            <summary>
            Handles `inputNode` blur events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterListInputFocus">
            <summary>
            Handles `inputNode` focus events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterMouseOut(Y_.EventFacade)">
            <summary>
            Handles `mouseout` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterMouseOver(Y_.EventFacade)">
            <summary>
            Handles `mouseover` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterResultsChange(Y_.EventFacade)">
            <summary>
            Handles `resultsChange` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._afterVisibleChange(Y_.EventFacade)">
            <summary>
            Handles `visibleChange` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._ariaSay(System.Object)">
            <summary>
            Updates the ARIA live region with the specified message.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._ariaSay(System.Object,System.Object)">
            <summary>
            Updates the ARIA live region with the specified message.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._bindInput">
            <summary>
            Binds `inputNode` events and behavior.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._bindKeys">
            <summary>
            Binds keyboard events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._bindList">
            <summary>
            Binds list events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._clear">
            <summary>
            Clears the contents of the tray.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._createAriaNode">
            <summary>
            Creates and returns an ARIA live region node.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._createItemNode(System.Object)">
            <summary>
            Creates and returns an item node with the specified _content_.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._createListNode">
            <summary>
            Creates and returns a list node. If the `listNode` attribute is already set
            to an existing node, that node will be used.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._defSelectFn(Y_.EventFacade)">
            <summary>
            Default `select` event handler.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._getFirstItemNode">
            <summary>
            Gets the first item node in the list, or `null` if the list is empty.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._getLastItemNode">
            <summary>
            Gets the last item node in the list, or `null` if the list is empty.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._initKeys">
            <summary>
            Initializes keyboard command mappings.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._keyDown">
            <summary>
            Called when the down arrow key is pressed.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._keyEnter">
            <summary>
            Called when the enter key is pressed.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._keyEsc">
            <summary>
            Called when the escape key is pressed.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._keyTab">
            <summary>
            Called when the tab key is pressed.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._keyUp">
            <summary>
            Called when the up arrow key is pressed.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._onInputKey(Y_.EventTarget)">
            <summary>
            Handles `inputNode` key events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._onItemClick(Y_.EventFacade)">
            <summary>
            Delegated event handler for item `click` events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncPosition">
            <summary>
            Synchronizes the result list's position and alignment.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncResults">
            <summary>
            Synchronizes the results displayed in the list with those in the _results_
            argument, or with the `results` attribute if an argument is not provided.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncResults(Y_.Array)">
            <summary>
            Synchronizes the results displayed in the list with those in the _results_
            argument, or with the `results` attribute if an argument is not provided.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncShim">
            <summary>
            Synchronizes the size of the iframe shim used for IE6 and lower. In other
            browsers, this method is a noop.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncVisibility">
            <summary>
            Synchronizes the visibility of the tray with the _visible_ argument, or with
            the `visible` attribute if an argument is not provided.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._syncVisibility(System.Object)">
            <summary>
            Synchronizes the visibility of the tray with the _visible_ argument, or with
            the `visible` attribute if an argument is not provided.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList._unbindKeys">
            <summary>
            Unbinds keyboard events.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList.hide">
            <summary>
            Hides the list, unless the `alwaysShowList` attribute is `true`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList.selectItem">
            <summary>
            Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
            is not specified.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList.selectItem(Y_.EventFacade)">
            <summary>
            Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
            is not specified.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList.selectItem(Y_.Node)">
            <summary>
            Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
            is not specified.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteList.selectItem(Y_.Node,Y_.EventFacade)">
            <summary>
            Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
            is not specified.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteList.activeItem">
            <summary>
            Item that's currently active, if any. When the user presses enter, this
            is the item that will be selected.
            </summary>
        </member>
        <member name="P:Y_.AutoCompleteList.strings">
            <summary>
            Translatable strings used by the AutoCompleteList widget.
            </summary>
        </member>
        <member name="T:Y_.WidgetPositionAlign">
            <summary>
            Widget extension, which can be used to add extended XY positioning support to
            the base Widget class, through the `Base.create` method.
            **Note:** This extension requires that the `WidgetPosition` extension be added
            to the Widget (before `WidgetPositionAlign`, if part of the same extension list
            passed to `Base.build`).
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._afterAlignChange(Y_.EventFacade)">
            <summary>
            Handles `alignChange` events by updating the UI in response to `align`
            Attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._afterAlignOnChange(Y_.EventFacade)">
            <summary>
            Handles `alignOnChange` events by updating the alignment-syncing event
            handlers.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._attachPosAlignUIHandles">
            <summary>
            Attaches the alignment-syncing event handlers.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._bindUIPosAlign">
            <summary>
            Bind event listeners responsible for updating the UI state in response to
            the widget's position-align related state changes.
            This method is invoked after `bindUI` has been invoked for the `Widget`
            class using the AOP infrastructure.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._detachPosAlignUIHandles">
            <summary>
            Detaches the alignment-syncing event handlers.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._setAlignCenter(System.Object)">
            <summary>
            Default setter for `center` Attribute changes. Sets up the appropriate
            value, and passes it through the to the align attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._syncUIPosAlign">
            <summary>
            Synchronizes the current `align` Attribute value to the DOM.
            This method is invoked after `syncUI` has been invoked for the `Widget`
            class using the AOP infrastructure.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._uiSetAlign(Y_.Array)">
            <summary>
            Updates the UI to reflect the `align` value passed in.
            **Note:** See the `align` Attribute documentation, for the Object structure
            expected.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._uiSetAlign(System.Object,Y_.Array)">
            <summary>
            Updates the UI to reflect the `align` value passed in.
            **Note:** See the `align` Attribute documentation, for the Object structure
            expected.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign._uiSetVisiblePosAlign(System.Object)">
            <summary>
            Attaches or detaches alignment-syncing event handlers based on the widget's
            `visible` Attribute state.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign.centered">
            <summary>
            Centers the widget in the viewport, or if a `Node` is passed in, it will
            be centered to that `Node`.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionAlign.centered(System.Object)">
            <summary>
            Centers the widget in the viewport, or if a `Node` is passed in, it will
            be centered to that `Node`.
            </summary>
        </member>
        <member name="P:Y_.WidgetPositionAlign._posAlignUIHandles">
            <summary>
            Holds the alignment-syncing event handles.
            </summary>
        </member>
        <member name="P:Y_.WidgetPositionAlign.align">
            <summary>
            The alignment configuration for this widget.
            The `align` attribute is used to align a reference point on the widget, with
            the reference point on another `Node`, or the viewport. The object which
            `align` expects has the following properties:
            * __`node`__: The `Node` to which the widget is to be aligned. If set to
            `null`, or not provided, the widget is aligned to the viewport.
            * __`points`__: A two element Array, defining the two points on the widget
            and `Node`/viewport which are to be aligned. The first element is the
            point on the widget, and the second element is the point on the
            `Node`/viewport. Supported alignment points are defined as static
            properties on `WidgetPositionAlign`.
            </summary>
        </member>
        <member name="P:Y_.WidgetPositionAlign.alignOn">
            <summary>
            An Array of Objects corresponding to the `Node`s and events that will cause
            the alignment of this widget to be synced to the DOM.
            The `alignOn` Attribute is expected to be an Array of Objects with the
            following properties:
            * __`eventName`__: The String event name to listen for.
            * __`node`__: The optional `Node` that will fire the event, it can be a
            `Node` reference or a selector String. This will default to the widget's
            `boundingBox`.
            </summary>
        </member>
        <member name="T:Y_.Uploader">
            <summary>
            `Y.Uploader` serves as an alias for either <a href="UploaderFlash.html">`Y.UploaderFlash`</a>
            or <a href="UploaderHTML5.html">`Y.UploaderHTML5`</a>, depending on the feature set available
            in a specific browser. If neither HTML5 nor Flash transport layers are available, `Y.Uploader.TYPE`
            static property is set to `"none"`.
            </summary>
        </member>
        <member name="T:Y_.ToggleButton">
            <summary>
            Creates a ToggleButton
            </summary>
        </member>
        <member name="T:Y_.Button">
            <summary>
            Creates a Button
            </summary>
        </member>
        <member name="M:Y_.Button.bindUI">
            <summary>
            Hooks up events for the widget
            </summary>
        </member>
        <member name="M:Y_.Button.syncUI">
            <summary>
            Updates button attributes
            </summary>
        </member>
        <member name="P:Y_.Button.CLASS_NAMES">
            <summary>
            List of class names used in the ButtonGroup's DOM
            </summary>
        </member>
        <member name="M:Y_.ToggleButton.bindUI">
            <summary>
            Hooks up events for the widget
            </summary>
        </member>
        <member name="M:Y_.ToggleButton.syncUI">
            <summary>
            Syncs the UI for the widget
            </summary>
        </member>
        <member name="M:Y_.ToggleButton.toggle">
            <summary>
            Toggles the selected/pressed/checked state of a ToggleButton
            </summary>
        </member>
        <member name="P:Y_.ToggleButton.CLASS_NAMES">
            <summary>
            Array of static constants used to identify the classnames applied to DOM nodes
            </summary>
        </member>
        <member name="T:Y_.StackedComboSplineSeries">
            <summary>
            The StackedComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Series
            are stacked along the value axis to indicate each series contribution to a cumulative total. Each
            series type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are
            rendered.
            </summary>
        </member>
        <member name="T:Y_.StackedColumnSeries">
            <summary>
            The StackedColumnSeries renders column chart in which series are stacked vertically to show
            their contribution to the cumulative total.
            </summary>
        </member>
        <member name="M:Y_.StackedColumnSeries._getPlotDefaults">
            <summary>
            Gets the default values for the markers.
            </summary>
        </member>
        <member name="M:Y_.StackedColumnSeries.drawSeries">
            <summary>
            Draws the series.
            </summary>
        </member>
        <member name="M:Y_.StackedColumnSeries.updateMarkerState(System.Object,Y_.DataType_.Number)">
            <summary>
            Resizes and positions markers based on a mouse interaction.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.StackedColumnSeries.styles" -->
        <member name="T:Y_.Recordset">
            <summary>
            The Recordset utility provides a standard way for dealing with
            a collection of similar objects.
            Provides the base Recordset implementation, which can be extended to add
            additional functionality, such as custom indexing. sorting, and filtering.
            </summary>
        </member>
        <member name="M:Y_.Recordset._setRecords(System.Object)">
            <summary>
            Ensures the value being set is an array of Record instances. If array items
            are raw object data, they are turned into Records.
            </summary>
        </member>
        <member name="M:Y_.Recordset.add(System.Object)">
            <summary>
            Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.
            </summary>
        </member>
        <member name="M:Y_.Recordset.add(System.Object,Y_.DataType_.Number)">
            <summary>
            Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.
            </summary>
        </member>
        <member name="M:Y_.Recordset.empty">
            <summary>
            Empties the recordset
            </summary>
        </member>
        <member name="M:Y_.Recordset.getLength">
            <summary>
            Returns the length of the recordset
            </summary>
        </member>
        <member name="M:Y_.Recordset.getRecord(System.Object)">
            <summary>
            Returns the record with particular ID or index
            </summary>
        </member>
        <member name="M:Y_.Recordset.getRecordByIndex(Y_.DataType_.Number)">
            <summary>
            Returns the record at a particular index
            </summary>
        </member>
        <member name="M:Y_.Recordset.getRecordsByIndex(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Returns a range of records beginning at particular index
            </summary>
        </member>
        <member name="M:Y_.Recordset.getValuesByKey">
            <summary>
            Gets an array of values for a data _key_ in the set's records.  If no _key_
            is supplied, the returned array will contain the full data object for each
            record.
            </summary>
        </member>
        <member name="M:Y_.Recordset.getValuesByKey(System.Object)">
            <summary>
            Gets an array of values for a data _key_ in the set's records.  If no _key_
            is supplied, the returned array will contain the full data object for each
            record.
            </summary>
        </member>
        <member name="M:Y_.Recordset.initializer">
            <summary>
            Publish default functions for events. Create the initial hash table.
            </summary>
        </member>
        <member name="M:Y_.Recordset.remove">
            <summary>
            Removes one or more Records to the RecordSet at the given index. If index
            is null, then removes a single Record from the end of the RecordSet.
            </summary>
        </member>
        <member name="M:Y_.Recordset.remove(Y_.DataType_.Number)">
            <summary>
            Removes one or more Records to the RecordSet at the given index. If index
            is null, then removes a single Record from the end of the RecordSet.
            </summary>
        </member>
        <member name="M:Y_.Recordset.remove(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Removes one or more Records to the RecordSet at the given index. If index
            is null, then removes a single Record from the end of the RecordSet.
            </summary>
        </member>
        <member name="M:Y_.Recordset.update(System.Object)">
            <summary>
            Updates the recordset with the new records passed in. Overwrites existing
            records when updating the index with the new records.
            </summary>
        </member>
        <member name="M:Y_.Recordset.update(System.Object,Y_.DataType_.Number)">
            <summary>
            Updates the recordset with the new records passed in. Overwrites existing
            records when updating the index with the new records.
            </summary>
        </member>
        <member name="P:Y_.Recordset.key">
            <summary>
            The ID to use as the key in the hash table.
            </summary>
        </member>
        <member name="P:Y_.Recordset.table">
            <summary>
            A hash table where the ID of the record is the key, and the record
            instance is the value.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorParaIE">
            <summary>
            Extends EditorParaBase with IE support
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorParaBase">
            <summary>
            Base Plugin for Editor to paragraph auto wrapping and correction.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorParaBase.NAME">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorParaBase.NS">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorParaIE.NAME">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorParaIE.NS">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="T:Y_.EditorSelection">
            <summary>
            Wraps some common Selection/Range functionality into a simple object
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.cleanCursor">
            <summary>
            Called from Editor keydown to remove the "extra" space before the cursor.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.createRange">
            <summary>
            Wrapper for the different range creation methods.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.filter">
            <summary>
            Performs a prefilter on all nodes in the editor. Looks for nodes with a style: fontFamily or font face
            It then creates a dynamic class assigns it and removed the property. This is so that we don't lose
            the fontFamily when selecting nodes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.EditorSelection.filterBlocks" -->
        <member name="M:Y_.EditorSelection.focusCursor">
            <summary>
            Gets a stored cursor and focuses it for editing, must be called sometime after setCursor
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.getCursor">
            <summary>
            Get the placeholder in the DOM at the current cursor position.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.getSelected">
            <summary>
            Get all the nodes in the current selection. This method will actually perform a filter first.
            Then it calls doc.execCommand('fontname', null, 'yui-tmp') to touch all nodes in the selection.
            The it compiles a list of all nodes affected by the execCommand and builds a NodeList to return.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.getText(Y_.Node)">
            <summary>
            Returns the innerHTML of a node with all HTML tags removed.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.insertAtCursor(System.Object,Y_.Node,Y_.DataType_.Number,System.Object)">
            <summary>
            Insert HTML at the current cursor position, this method gives you control over the text node to insert into and the offset where to put it.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.insertContent(System.Object)">
            <summary>
            Insert HTML at the current cursor position and return a Node instance of the newly inserted element.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.remove">
            <summary>
            Destroy the range.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.removeCursor(System.Object)">
            <summary>
            Remove the cursor placeholder from the DOM.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.removeFontFamily">
            <summary>
            Utility method to remove dead font-family styles from an element.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.replace(System.Object,System.Object)">
            <summary>
            Find and replace a string inside a text node and replace it with HTML focusing the node after
            to allow you to continue to type.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.resolve(System.Object)">
            <summary>
            Resolve a node from the selection object and return a Node instance
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.selectNode(Y_.Node,System.Object)">
            <summary>
            Select a Node (hilighting it).
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.setCursor">
            <summary>
            Put a placeholder in the DOM at the current cursor position.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.toString">
            <summary>
            Generic toString for logging.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.unfilter">
            <summary>
            Undoes what filter does enough to return the HTML from the Editor, then re-applies the filter.
            </summary>
        </member>
        <member name="M:Y_.EditorSelection.wrapContent(System.Object)">
            <summary>
            Get all elements inside a selection and wrap them with a new element and return a NodeList of all elements touched.
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.ALL">
            <summary>
            The selector to use when looking for Nodes to cache the value of: [style],font[face]
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.anchorNode">
            <summary>
            A Node instance of the parentNode of the anchorNode of the range
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.anchorOffset">
            <summary>
            The offset from the range object
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.anchorTextNode">
            <summary>
            A Node instance of the actual textNode of the range.
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.BLOCKS">
            <summary>
            The selector to use when looking for block level items.
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.CUR_WRAPID">
            <summary>
            The id used to wrap the inner space of the cursor position
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.CURSOR">
            <summary>
            The default HTML used to focus the cursor..
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.DEFAULT_TAG">
            <summary>
            The default tag to use when creating elements: span
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.focusNode">
            <summary>
            A Node instance of the parentNode of the focusNode of the range
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.focusOffset">
            <summary>
            The offset from the range object
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.focusTextNode">
            <summary>
            A Node instance of the actual textNode of the range.
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.REG_CHAR">
            <summary>
            Regular Expression to determine if a string has a character in it
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.REG_FONTFAMILY">
            <summary>
            Regular Expression used to find dead font-family styles
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.REG_NOHTML">
            <summary>
            Regular Expression to remove all HTML from a string
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.REG_NON">
            <summary>
            Regular Expression to determine if a string has a non-character in it
            </summary>
        </member>
        <member name="P:Y_.EditorSelection.TMP">
            <summary>
            The temporary fontname applied to a selection to retrieve their values: yui-tmp
            </summary>
        </member>
        <member name="T:Y_.Do_.AlterReturn">
            <summary>
            Return an AlterReturn object when you want to change the result returned
            from the core method to the caller.  Useful for Do.after subscribers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataTable_.Sortable" -->
        <member name="T:Y_.Console">
            <summary>
            Console creates a visualization for messages logged through calls to a YUI
            instance's <code>Y.log( message, category, source )</code> method.  The
            debug versions of YUI modules will include logging statements to offer some
            insight into the steps executed during that module's operation.  Including
            log statements in your code will cause those messages to also appear in the
            Console.  Use Console to aid in developing your page or application.
            Entry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;
            are also referred to as the log level, and entries are filtered against the
            configured logLevel.
            </summary>
        </member>
        <member name="M:Y_.Console._afterCollapsedChange(Y_.Event)">
            <summary>
            Updates the className of the contentBox, which should trigger CSS to
            hide or show the body and footer sections depending on the new value.
            </summary>
        </member>
        <member name="M:Y_.Console._afterConsoleLimitChange(Y_.Event)">
            <summary>
            Calls this._trimOldEntries() in response to changes in the configured
            consoleLimit attribute.
            </summary>
        </member>
        <member name="M:Y_.Console._afterPausedChange(Y_.Event)">
            <summary>
            Updates the UI and schedules or cancels the print loop.
            </summary>
        </member>
        <member name="M:Y_.Console._afterStringsChange(Y_.Event)">
            <summary>
            Updates the UI if changes are made to any of the strings in the strings
            attribute.
            </summary>
        </member>
        <member name="M:Y_.Console._afterVisibleChange(Y_.Event)">
            <summary>
            Makes adjustments to the UI if needed when the Console is hidden or shown
            </summary>
        </member>
        <member name="M:Y_.Console._cancelPrintLoop">
            <summary>
            Clears the timeout for printing buffered messages.
            </summary>
        </member>
        <member name="M:Y_.Console._createEntryHTML(System.Object)">
            <summary>
            Translates message meta into the markup for a console entry.
            </summary>
        </member>
        <member name="M:Y_.Console._defEntryFn(Y_.Event)">
            <summary>
            Buffers incoming message objects and schedules the printing.
            </summary>
        </member>
        <member name="M:Y_.Console._defResetFn">
            <summary>
            Clears the console, resets the startTime attribute, enables and
            unpauses the widget.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Console._encodeHTML(System.Object)" -->
        <member name="M:Y_.Console._getUseBrowserConsole">
            <summary>
            Getter method for useBrowserConsole attribute.  Just a pass through to
            the YUI instance configuration setting.
            </summary>
        </member>
        <member name="M:Y_.Console._htmlEscapeMessage(System.Object)">
            <summary>
            Performs HTML escaping on strings in the message object.
            </summary>
        </member>
        <member name="M:Y_.Console._initBody">
            <summary>
            Create the DOM structure for the console body&#8212;where messages are
            rendered.
            </summary>
        </member>
        <member name="M:Y_.Console._initFoot">
            <summary>
            Create the DOM structure for the footer elements.
            </summary>
        </member>
        <member name="M:Y_.Console._initHead">
            <summary>
            Create the DOM structure for the header elements.
            </summary>
        </member>
        <member name="M:Y_.Console._isInLogLevel">
            <summary>
            Determine if incoming log messages are within the configured logLevel
            to be buffered for printing.
            </summary>
        </member>
        <member name="M:Y_.Console._normalizeMessage(Y_.Event)">
            <summary>
            Create a log entry message from the inputs including the following keys:
            <ul>
            <li>time - this moment</li>
            <li>message - leg message</li>
            <li>category - logLevel or custom category for the message</li>
            <li>source - when provided, the widget or util calling Y.log</li>
            <li>sourceAndDetail - same as source but can include instance info</li>
            <li>localTime - readable version of time</li>
            <li>elapsedTime - ms since last entry</li>
            <li>totalTime - ms since Console was instantiated or reset</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.Console._onClearClick(Y_.Event)">
            <summary>
            Event handler for clicking on the Clear button.  Pass-through to
            <code>this.clearConsole()</code>.
            </summary>
        </member>
        <member name="M:Y_.Console._onCollapseClick(Y_.Event)">
            <summary>
            Event handler for clicking on the Collapse/Expand button. Sets the
            &quot;collapsed&quot; attribute accordingly.
            </summary>
        </member>
        <member name="M:Y_.Console._onLogEvent(System.Object,System.Object,System.Object)">
            <summary>
            Responds to log events by normalizing qualifying messages and passing
            them along through the entry event for buffering etc.
            </summary>
        </member>
        <member name="M:Y_.Console._onPauseClick(Y_.Event)">
            <summary>
            Event handler for clicking on the Pause checkbox to update the paused
            attribute.
            </summary>
        </member>
        <member name="M:Y_.Console._schedulePrint">
            <summary>
            Sets an interval for buffered messages to be output to the console.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Console._setLogLevel(System.Object)" -->
        <member name="M:Y_.Console._setUseBrowserConsole(System.Object)">
            <summary>
            Setter method for useBrowserConsole attributes.  Only functional if the
            logSource attribute points to a YUI instance.  Passes the value down to
            the YUI instance.  NOTE: multiple Console instances cannot maintain
            independent useBrowserConsole values, since it is just a pass through to
            the YUI instance configuration.
            </summary>
        </member>
        <member name="M:Y_.Console._trimOldEntries">
            <summary>
            Removes the oldest message entries from the UI to maintain the limit
            specified in the consoleLimit configuration.
            </summary>
        </member>
        <member name="M:Y_.Console._uiSetHeight(System.Object)">
            <summary>
            Set the height of the Console container.  Set the body height to the
            difference between the configured height and the calculated heights of
            the header and footer.
            Overrides Widget.prototype._uiSetHeight.
            </summary>
        </member>
        <member name="M:Y_.Console._uiSizeCB">
            <summary>
            Over-ride default content box sizing to do nothing, since we're sizing
            the body section to fill out height ourselves.
            </summary>
        </member>
        <member name="M:Y_.Console._uiUpdateCollapsed(System.Object)">
            <summary>
            Updates the UI to reflect the new Collapsed state
            </summary>
        </member>
        <member name="M:Y_.Console._uiUpdateFromHideShow(System.Object)">
            <summary>
            Recalculates dimensions and updates appropriately when shown
            </summary>
        </member>
        <member name="M:Y_.Console._uiUpdatePaused(System.Object)">
            <summary>
            Checks or unchecks the paused checkbox
            </summary>
        </member>
        <member name="M:Y_.Console._validateLogSource(System.Object)">
            <summary>
            Validator for logSource attribute.
            </summary>
        </member>
        <member name="M:Y_.Console._validateStyle(System.Object)">
            <summary>
            Validates input value for style attribute.  Accepts only values 'inline',
            'block', and 'separate'.
            </summary>
        </member>
        <member name="M:Y_.Console.bindUI">
            <summary>
            Set up event listeners to wire up the UI to the internal state.
            </summary>
        </member>
        <member name="M:Y_.Console.clearConsole">
            <summary>
            Clear the console of messages and flush the buffer of pending messages.
            </summary>
        </member>
        <member name="M:Y_.Console.collapse">
            <summary>
            Collapses the body and footer.
            </summary>
        </member>
        <member name="M:Y_.Console.destructor">
            <summary>
            Tears down the instance, flushing event subscriptions and purging the UI.
            </summary>
        </member>
        <member name="M:Y_.Console.expand">
            <summary>
            Expands the body and footer if collapsed.
            </summary>
        </member>
        <member name="M:Y_.Console.initializer">
            <summary>
            Constructor code.  Set up the buffer and entry template, publish
            internal events, and subscribe to the configured logEvent.
            </summary>
        </member>
        <member name="M:Y_.Console.log(System.Object)">
            <summary>
            Wrapper for <code>Y.log</code>.
            </summary>
        </member>
        <member name="M:Y_.Console.printBuffer(Y_.DataType_.Number)">
            <summary>
            Outputs buffered messages to the console UI.  This is typically called
            from a scheduled interval until the buffer is empty (referred to as the
            print loop).  The number of buffered messages output to the Console is
            limited to the number provided as an argument.  If no limit is passed,
            all buffered messages are rendered.
            </summary>
        </member>
        <member name="M:Y_.Console.renderUI">
            <summary>
            Generate the Console UI.
            </summary>
        </member>
        <member name="M:Y_.Console.reset">
            <summary>
            Clears the console and resets internal timers.
            </summary>
        </member>
        <member name="M:Y_.Console.scrollToLatest">
            <summary>
            Scrolls to the most recent entry
            </summary>
        </member>
        <member name="M:Y_.Console.syncUI">
            <summary>
            Sync the UI state to the current attribute state.
            </summary>
        </member>
        <member name="P:Y_.Console._body">
            <summary>
            Reference to the Node instance that will house the console messages.
            </summary>
        </member>
        <member name="P:Y_.Console._evtCat">
            <summary>
            Category to prefix all event subscriptions to allow for ease of detach
            during destroy.
            </summary>
        </member>
        <member name="P:Y_.Console._foot">
            <summary>
            Reference to the Node instance containing the footer contents.
            </summary>
        </member>
        <member name="P:Y_.Console._head">
            <summary>
            Reference to the Node instance containing the header contents.
            </summary>
        </member>
        <member name="P:Y_.Console._printLoop">
            <summary>
            Holds the object API returned from <code>Y.later</code> for the print
            loop interval.
            </summary>
        </member>
        <member name="P:Y_.Console.ATTRS">
            <summary>
            Static property used to define the default attribute configuration of
            the Widget.
            </summary>
        </member>
        <member name="P:Y_.Console.buffer">
            <summary>
            Array of normalized message objects awaiting printing.
            </summary>
        </member>
        <member name="P:Y_.Console.CHROME_CLASSES">
            <summary>
            Map (object) of classNames used to populate the placeholders in the
            Console.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and
            Console.FOOTER_TEMPLATE markup when rendering the Console UI.
            <p>By default, the keys contained in the object are:</p>
            <ul>
            <li>console_hd_class</li>
            <li>console_bd_class</li>
            <li>console_ft_class</li>
            <li>console_controls_class</li>
            <li>console_checkbox_class</li>
            <li>console_pause_class</li>
            <li>console_pause_label_class</li>
            <li>console_button_class</li>
            <li>console_clear_class</li>
            <li>console_collapse_class</li>
            <li>console_title_class</li>
            </ul>
            </summary>
        </member>
        <member name="P:Y_.Console.consoleLimit">
            <summary>
            Maximum number of Console entries allowed in the Console body at one
            time.  This is used to keep acquired messages from exploding the
            DOM tree and impacting page performance.
            </summary>
        </member>
        <member name="P:Y_.Console.ENTRY_CLASSES">
            <summary>
            Map (object) of classNames used to populate the placeholders in the
            Console.ENTRY_TEMPLATE markup when rendering a new Console entry.
            <p>By default, the keys contained in the object are:</p>
            <ul>
            <li>entry_class</li>
            <li>entry_meta_class</li>
            <li>entry_cat_class</li>
            <li>entry_src_class</li>
            <li>entry_time_class</li>
            <li>entry_content_class</li>
            </ul>
            </summary>
        </member>
        <member name="P:Y_.Console.lastTime">
            <summary>
            The precise time the last entry was logged.  Used to measure elapsed
            time between log messages.
            </summary>
        </member>
        <member name="P:Y_.Console.logSource">
            <summary>
            Object that will emit the log events.  By default the YUI instance.
            To have a single Console capture events from all YUI instances, set
            this to the Y.Global object.
            </summary>
        </member>
        <member name="P:Y_.Console.printLimit">
            <summary>
            Maximum number of entries printed in each iteration of the print
            loop. This is used to prevent excessive logging locking the page UI.
            </summary>
        </member>
        <member name="P:Y_.Console.printTimeout">
            <summary>
            Millisecond timeout between iterations of the print loop, moving
            entries from the buffer to the UI.
            </summary>
        </member>
        <member name="P:Y_.Console.startTime">
            <summary>
            The baseline time for this Console instance, used to measure elapsed
            time from the moment the console module is <code>use</code>d to the
            moment each new entry is logged (not rendered).
            This value is reset by the instance method myConsole.reset().
            </summary>
        </member>
        <member name="P:Y_.Console.strings">
            <summary>
            Collection of strings used to label elements in the Console UI.
            Default collection contains the following name:value pairs:
            <ul>
            <li>title : &quot;Log Console&quot;</li>
            <li>pause : &quot;Pause&quot;</li>
            <li>clear : &quot;Clear&quot;</li>
            <li>collapse : &quot;Collapse&quot;</li>
            <li>expand : &quot;Expand&quot;</li>
            </ul>
            </summary>
        </member>
        <member name="T:Y_.ClassNameManager">
            <summary>
            A singleton class providing:
            <ul>
            <li>Easy creation of prefixed class names</li>
            <li>Caching of previously created class names for improved performance.</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.ClassNameManager.getClassName(System.Object,System.Object)">
            <summary>
            Returns a class name prefixed with the the value of the
            <code>Y.config.classNamePrefix</code> attribute + the provided strings.
            Uses the <code>Y.config.classNameDelimiter</code> attribute to delimit the
            provided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar
            </summary>
        </member>
        <member name="T:Y_.ChartBase">
            <summary>
            The ChartBase class is an abstract class used to create charts.
            </summary>
        </member>
        <member name="M:Y_.ChartBase.getAxisByKey(System.Object)">
            <summary>
            Returns an `Axis` instance by key reference. If the axis was explicitly set through the `axes` attribute,
            the key will be the same as the key used in the `axes` object. For default axes, the key for
            the category axis is the value of the `categoryKey` (`category`). For the value axis, the default
            key is `values`.
            </summary>
        </member>
        <member name="M:Y_.ChartBase.getCategoryAxis">
            <summary>
            Returns the category axis for the chart.
            </summary>
        </member>
        <member name="M:Y_.ChartBase.getSeries(System.Object)">
            <summary>
            Returns a series instance by index or key value.
            </summary>
        </member>
        <member name="M:Y_.ChartBase.hideTooltip">
            <summary>
            Hides the default tooltip
            </summary>
        </member>
        <member name="M:Y_.ChartBase.toggleTooltip(System.Object)">
            <summary>
            Event listener for toggling the tooltip. If a tooltip is visible, hide it. If not, it
            will create and show a tooltip based on the event object.
            </summary>
        </member>
        <member name="P:Y_.ChartBase.axesCollection">
            <summary>
            Reference to all the axes in the chart.
            </summary>
        </member>
        <member name="P:Y_.ChartBase.dataProvider">
            <summary>
            Data used to generate the chart.
            </summary>
        </member>
        <member name="P:Y_.ChartBase.graph">
            <summary>
            Reference to graph instance.
            </summary>
        </member>
        <member name="P:Y_.ChartBase.seriesKeys">
            <summary>
            A collection of keys that map to the series axes. If no keys are set,
            they will be generated automatically depending on the data structure passed into
            the chart.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.ChartBase.tooltip" -->
        <member name="T:Y_.CanvasCircle">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Circle.html">`Circle`</a> class.
            `CanvasCircle` is not intended to be used directly. Instead, use the <a href="Circle.html">`Circle`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Circle.html">`Circle`</a>
            class will point to the `CanvasCircle` class.
            </summary>
        </member>
        <member name="T:Y_.Attribute">
            <summary>
            <p>
            Attribute provides configurable attribute support along with attribute change events. It is designed to be
            augmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state,
            along with attribute change events.
            </p>
            <p>For example, attributes added to the host can be configured:</p>
            <ul>
            <li>As read only.</li>
            <li>As write once.</li>
            <li>With a setter function, which can be used to manipulate
            values passed to Attribute's <a href="#method_set">set</a> method, before they are stored.</li>
            <li>With a getter function, which can be used to manipulate stored values,
            before they are returned by Attribute's <a href="#method_get">get</a> method.</li>
            <li>With a validator function, to validate values before they are stored.</li>
            </ul>
            <p>See the <a href="#method_addAttr">addAttr</a> method, for the complete set of configuration
            options available for attributes.</p>
            <p><strong>NOTE:</strong> Most implementations will be better off extending the <a href="Base.html">Base</a> class,
            instead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration
            of attributes for derived classes, accounting for values passed into the constructor.</p>
            </summary>
        </member>
        <member name="P:Y_.Attribute._ATTR_CFG">
            <summary>
            The list of properties which can be configured for
            each attribute (e.g. setter, getter, writeOnce etc.).
            This property is used internally as a whitelist for faster
            Y.mix operations.
            </summary>
        </member>
        <member name="P:Y_.Attribute.INVALID_VALUE">
            <summary>
            <p>The value to return from an attribute setter in order to prevent the set from going through.</p>
            <p>You can return this value from your setter if you wish to combine validator and setter
            functionality into a single setter function, which either returns the massaged value to be stored or
            AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>
            </summary>
        </member>
        <member name="T:Y_.AreaSeries">
            <summary>
            The AreaSeries class renders quantitative data on a graph by creating a fill between 0
            and the relevant data points.
            </summary>
        </member>
        <member name="P:Y_.AreaSeries.styles">
            <summary>
            Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:
            <dl>
            <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be
            retrieved from the following array:
            `["#66007f", "#a86f41", "#295454", "#996ab2", "#e8cdb7", "#90bdbd","#000000","#c3b8ca", "#968373", "#678585"]`
            </dd>
            <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.VMLShape">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Shape.html">`Shape`</a> class.
            `VMLShape` is not intended to be used directly. Instead, use the <a href="Shape.html">`Shape`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Shape.html">`Shape`</a> class will point to the `VMLShape` class.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.addClass(System.Object)">
            <summary>
            Add a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.compareTo(System.Object)">
            <summary>
            Compares nodes to determine if they match.
            Node instances can be compared to each other and/or HTMLElements.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.contains(System.Object)">
            <summary>
            Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.destroy">
            <summary>
            Destroys shape
            </summary>
        </member>
        <member name="M:Y_.VMLShape.getBounds">
            <summary>
            Returns the bounds for a shape.
            Calculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.
            The calculated bounding box is used by the graphic instance to calculate its viewBox.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.getBounds(Y_.Matrix)">
            <summary>
            Returns the bounds for a shape.
            Calculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.
            The calculated bounding box is used by the graphic instance to calculate its viewBox.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.getXY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.init">
            <summary>
            Init method, invoked during construction.
            Calls `initializer` method.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.rotate(Y_.DataType_.Number)">
            <summary>
            Rotates the shape clockwise around it transformOrigin.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.scale(Y_.DataType_.Number)">
            <summary>
            Specifies a 2d scaling operation.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.setXY(Y_.Array)">
            <summary>
            Set the position of the shape in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.skew(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis and y-axis.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.skewX(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.skewY(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the y-axis.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.test(System.Object)">
            <summary>
            Test if the supplied node matches the supplied selector.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.translate(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Specifies a 2d translation.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.translateX(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the x-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="M:Y_.VMLShape.translateY(Y_.DataType_.Number)">
            <summary>
            Performs a translate on the y-coordinate. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="T:Y_.VMLGraphic">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Graphic.html">`Graphic`</a> class.
            `VMLGraphic` is not intended to be used directly. Instead, use the <a href="Graphic.html">`Graphic`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Graphic.html">`Graphic`</a> class will point to the `VMLGraphic` class.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.addShape(System.Object)">
            <summary>
            Generates a shape instance by type.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.addToRedrawQueue(Y_.VMLShape)">
            <summary>
            Adds a shape to the redraw queue and calculates the contentBounds.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.batch(SharpKit.JavaScript.JsAction)">
            <summary>
            Allows for creating multiple shapes in order to batch appending and redraw operations.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.clear">
            <summary>
            Clears the graphics object.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.destroy">
            <summary>
            Removes all nodes.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.getShapeById(System.Object)">
            <summary>
            Returns a shape based on the id of its dom node.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.getXY">
            <summary>
            Gets the current position of the graphic instance in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.removeAllShapes">
            <summary>
            Removes all shape instances from the dom.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.removeShape(System.Object)">
            <summary>
            Removes a shape instance from from the graphic instance.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.render(System.Object)">
            <summary>
            Adds the graphics node to the dom.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.setPosition(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Sets the positon of the graphics object.
            </summary>
        </member>
        <member name="M:Y_.VMLGraphic.setSize(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Sets the size of the graphics object.
            </summary>
        </member>
        <member name="T:Y_.UploaderHTML5">
            <summary>
            This module provides a UI for file selection and multiple file upload capability using
            HTML5 XMLHTTPRequest Level 2 as a transport engine.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._bindDropArea">
            <summary>
            Binds the specified drop area's drag and drop events to the
            uploader's custom handler.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._bindSelectButton">
            <summary>
            Binds the instantiation of the file select dialog to the current file select
            control.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._ddEventHandler">
            <summary>
            Handles the drag and drop events from the uploader's specified drop
            area.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._setButtonClass(System.Object,System.Object)">
            <summary>
            Adds or removes a specified state CSS class to the underlying uploader button.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._setMultipleFiles">
            <summary>
            Syncs the state of the `multipleFiles` attribute between this class
            and the file input field.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._updateFileList(Y_.Event)">
            <summary>
            Adjusts the content of the `fileList` based on the results of file selection
            and the `appendNewFiles` attribute. If the `appendNewFiles` attribute is true,
            then selected files are appended to the existing list; otherwise, the list is
            cleared and populated with the newly selected files.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5._uploadEventHandler(System.Object)">
            <summary>
            Handles and retransmits events fired by `Y.File` and `Y.Uploader.Queue`.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.angle2rad(System.Object)">
            <summary>
            Converts an angle to a radian
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.bindUI">
            <summary>
            Binds to the UploaderHTML5 UI and subscribes to the necessary events.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.compareTransformSequence(Y_.Array,Y_.Array)">
            <summary>
            Compares to arrays or transform functions to ensure both contain the same functions in the same
            order.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.decompose(Y_.Array)">
            <summary>
            Breaks up a 2d transform matrix into a series of transform operations.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.deg2rad(Y_.DataType_.Number)">
            <summary>
            Converts a degree value to a radian.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.getDeterminant(Y_.Array)">
            <summary>
            Returns the determinant of a given matrix.
            /                                             \
            | matrix[0][0]   matrix[1][0]    matrix[2][0] |
            | matrix[0][1]   matrix[1][1]    matrix[2][1] |
            | matrix[0][2]   matrix[1][2]    matrix[2][2] |
            | matrix[0][3]   matrix[1][3]    matrix[2][3] |
            \                                             /
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.getMinors(Y_.Array,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Returns a matrix of minors based on a matrix, column index and row index.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.getnxn">
            <summary>
            Converts a transform object to an array of column vectors.
            /                                             \
            | matrix[0][0]   matrix[1][0]    matrix[2][0] |
            | matrix[0][1]   matrix[1][1]    matrix[2][1] |
            | matrix[0][2]   matrix[1][2]    matrix[2][2] |
            \                                             /
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.getTransformArray(System.Object)">
            <summary>
            Parses a transform string and returns an array of transform arrays.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.getTransformFunctionArray">
            <summary>
            Returns an array of transform arrays representing transform functions and arguments.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.initializer">
            <summary>
            Construction logic executed during UploaderHTML5 instantiation.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.inverse(System.Object)">
            <summary>
            Returns the inverse of a matrix
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.openFileSelectDialog">
            <summary>
            Opens the File Selection dialog by simulating a click on the file input field.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.rad2deg(Y_.DataType_.Number)">
            <summary>
            Converts a radian value to a degree.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.renderUI">
            <summary>
            Create the DOM structure for the UploaderHTML5.
            UploaderHTML5's DOM structure consists of a "Select Files" button that can
            be replaced by the developer's widget of choice; and a hidden file input field
            that is used to instantiate the File Select dialog.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.scalarMultiply(Y_.Array,Y_.DataType_.Number)">
            <summary>
            Multiplies a matrix by a numeric value.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.sign(Y_.DataType_.Number)">
            <summary>
            Returns the sign of value
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.transpose(System.Object)">
            <summary>
            Returns the transpose for an nxn matrix.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.upload(System.Object,System.Object,System.Object)">
            <summary>
            Starts the upload of a specific file.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.uploadAll(System.Object,System.Object)">
            <summary>
            Starts the upload of all files on the file list, using an automated queue.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.uploadThese(Y_.Array,System.Object,System.Object)">
            <summary>
            Starts the upload of the files specified in the first argument, using an automated queue.
            </summary>
        </member>
        <member name="M:Y_.UploaderHTML5.vectorMatrixProduct(Y_.Array,Y_.Array)">
            <summary>
            Multiplies a vector and a matrix
            </summary>
        </member>
        <member name="P:Y_.UploaderHTML5.transformMethods">
            <summary>
            Mapping of possible transform method names.
            </summary>
        </member>
        <member name="T:Y_.Text_.AccentFold">
            <summary>
            <p>
            Provides a basic accent folding implementation that converts common accented
            letters (like "á") to their non-accented forms (like "a").
            </p>
            <p>
            This implementation is not comprehensive, and should only be used as a last
            resort when accent folding can't be done on the server. A comprehensive
            accent folding implementation would require much more character data to be
            sent to the browser, resulting in a significant performance penalty. This
            implementation strives for a compromise between usefulness and performance.
            </p>
            <p>
            Accent folding is a destructive operation that can't be reversed, and may
            change or destroy the actual meaning of the text depending on the language.
            It should not be used on strings that will later be displayed to a user,
            unless this is done with the understanding that linguistic meaning may be
            lost and that you may in fact confuse or insult the user by doing so.
            </p>
            <p>
            When used for matching, accent folding is likely to produce erroneous matches
            for languages in which characters with diacritics are considered different
            from their base characters, or where correct folding would map to other
            character sequences than just stripped characters. For example, in German
            "ü" is a character that's clearly different from "u" and should match "ue"
            instead. The word "betrügen" means "to defraud", while "betrugen" is the past
            tense of "to behave". The name "Müller" is expected to match "Mueller", but
            not "Muller". On the other hand, accent folding falls short for languages
            where different base characters are expected to match. In Japanese, for
            example, hiragana and katakana characters with the same pronunciation ("あ"
            and "ア") are commonly treated as equivalent for lookups, but accent folding
            treats them as different.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Text_.AccentFold.canFold(System.Object)">
            <summary>
            Returns <code>true</code> if the specified string contains one or more
            characters that can be folded, <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:Y_.Text_.AccentFold.compare(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Compares the accent-folded versions of two strings and returns
            <code>true</code> if they're the same, <code>false</code> otherwise. If
            a custom comparison function is supplied, the accent-folded strings will
            be passed to that function for comparison.
            </summary>
        </member>
        <member name="M:Y_.Text_.AccentFold.filter(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            <p>
            Returns a copy of <em>haystack</em> containing only the strings for which
            the supplied function returns <code>true</code>.
            </p>
            <p>
            While comparisons will be made using accent-folded strings, the returned
            array of matches will contain the original strings that were passed in.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Text_.AccentFold.fold(System.Object)">
            <summary>
            Accent-folds the specified string or array of strings and returns a copy
            in which common accented letters have been converted to their closest
            non-accented, lowercase forms.
            </summary>
        </member>
        <member name="T:Y_.Test">
            <summary>
            The root namespace for YUI Test.
            </summary>
        </member>
        <member name="T:Y_.SVGPieSlice">
            <summary>
            Draws pie slices
            </summary>
        </member>
        <member name="T:Y_.StackedBarSeries">
            <summary>
            The StackedBarSeries renders bar chart in which series are stacked horizontally to show
            their contribution to the cumulative total.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.StackedBarSeries.styles" -->
        <member name="T:Y_.Rect">
            <summary>
            <p>Creates an rectangle shape with editable attributes.</p>
            <p>`Rect` instances can be created using the <a href="Graphic.html#method_addShape">`addShape`</a> method of the <a href="Graphic.html">`Graphic`</a>
            class. The method's `cfg` argument contains a `type` attribute. Assigning "rect" or `Y.Rect` to this attribute will create a `Rect` instance.
            Required attributes for instantiating a `Rect` are `type`, `width` and `height`. Optional attributes include:
            <ul>
            <li><a href="#attr_fill">fill</a></li>
            <li><a href="#attr_id">id</a></li>
            <li><a href="#attr_stroke">stroke</a></li>
            <li><a href="#attr_transform">transform</a></li>
            <li><a href="#attr_transformOrigin">transformOrigin</a></li>
            <li><a href="#attr_visible">visible</a></li>
            <li><a href="#attr_x">x</a></li>
            <li><a href="#attr_y">y</a></li>
            </ul>
            The below code creates a rectangle by defining the `type` attribute as "rect":</p>
            var myRect = myGraphic.addShape({
            type: "rect",
            width: 20,
            height: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            Below, the same rectangle is created by defining the `type` attribute with a class reference:
            var myRect = myGraphic.addShape({
            type: Y.Rect,
            width: 20,
            height: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            <p>`Rect` has the following implementations based on browser capability.
            <ul>
            <li><a href="SVGRect.html">`SVGRect`</a></li>
            <li><a href="VMLRect.html">`VMLRect`</a></li>
            <li><a href="CanvasRect.html">`CanvasRect`</a></li>
            </ul>
            It is not necessary to interact with these classes directly. `Rect` will point to the appropriate implemention.</p>
            </summary>
        </member>
        <member name="T:Y_.Record">
            <summary>
            Provides a wrapper around a standard javascript object. Can be inserted into a Recordset instance.
            </summary>
        </member>
        <member name="M:Y_.Record.getValue(System.Object)">
            <summary>
            Retrieve a particular (or all) values from the object
            </summary>
        </member>
        <member name="P:Y_.Record.data">
            <summary>
            The object stored within the record instance
            </summary>
        </member>
        <member name="P:Y_.Record.id">
            <summary>
            Unique ID of the record instance
            </summary>
        </member>
        <member name="T:Y_.NumericAxis">
            <summary>
            NumericAxis manages numeric data on an axis.
            </summary>
        </member>
        <member name="M:Y_.NumericAxis._hasDataOverflow">
            <summary>
            Checks to see if data extends beyond the range of the axis. If so,
            that data will need to be hidden. This method is internal, temporary and subject
            to removal in the future.
            </summary>
        </member>
        <member name="M:Y_.NumericAxis.formatLabel(System.Object,System.Object)">
            <summary>
            Formats a label based on the axis type and optionally specified format.
            </summary>
        </member>
        <member name="M:Y_.NumericAxis.getLabelByIndex(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Calculates and returns a value based on the number of labels and the index of
            the current label.
            </summary>
        </member>
        <member name="M:Y_.NumericAxis.getTotalByKey(System.Object)">
            <summary>
            Returns the sum of all values per key.
            </summary>
        </member>
        <member name="P:Y_.NumericAxis.labelFormat">
            <summary>
            Object containing properties used by the `labelFunction` to format a
            label.
            </summary>
        </member>
        <member name="P:Y_.NumericAxis.labelFunction">
            <summary>
            Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need
            to implement the arguments below and return a `String` or an `HTMLElement`. The default implementation of the method returns a `String`. The output of this method
            will be rendered to the DOM using `appendChild`. If you override the `labelFunction` method and return an html string, you will also need to override the Axis'
            `appendLabelFunction` to accept html as a `String`.
            <dl>
            <dt>val</dt><dd>Label to be formatted. (`String`)</dd>
            <dt>format</dt><dd>Object containing properties used to format the label. (optional)</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.Gridlines">
            <summary>
            Gridlines draws gridlines on a Graph.
            </summary>
        </member>
        <member name="M:Y_.Gridlines._getDefaultStyles">
            <summary>
            Gets the default value for the `styles` attribute. Overrides
            base implementation.
            </summary>
        </member>
        <member name="M:Y_.Gridlines.draw">
            <summary>
            Draws the gridlines
            </summary>
        </member>
        <member name="P:Y_.Gridlines.axis">
            <summary>
            Indicate the `Axis` in which to bind
            the gridlines.
            </summary>
        </member>
        <member name="P:Y_.Gridlines.graph">
            <summary>
            Indicates the `Graph` in which the gridlines
            are drawn.
            </summary>
        </member>
        <member name="M:Y_.ExecCommand.COMMANDS_createlink(System.Object)">
            <summary>
            Override for the createlink method from the <a href="Plugin.CreateLinkBase.html">CreateLinkBase</a> plugin.
            </summary>
        </member>
        <member name="T:Y_.DD_.Delegate">
            <summary>
            Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate.
            </summary>
        </member>
        <member name="M:Y_.DD_.Delegate.createDrop(Y_.Node,Y_.Array)">
            <summary>
            Apply the Drop plugin to this node
            </summary>
        </member>
        <member name="M:Y_.DD_.Delegate.syncTargets">
            <summary>
            Applies the Y.Plugin.Drop to all nodes matching the cont + nodes selector query.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.currentNode">
            <summary>
            Y.Node instance of the dd node.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.dd">
            <summary>
            A reference to the temporary dd instance used under the hood.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.dragConfig">
            <summary>
            The default config to be used when creating the DD instance.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.dragNode">
            <summary>
            Y.Node instance of the dd dragNode.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.handles">
            <summary>
            The handles config option added to the temp DD instance.
            </summary>
        </member>
        <member name="P:Y_.DD_.Delegate.lastNode">
            <summary>
            Y.Node instance of the last item dragged.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataTable" -->
        <member name="T:Y_.DataTable_.Base">
            <summary>
            The baseline implementation of a DataTable.  This class should be used
            primarily as a superclass for a custom DataTable with a specific set of
            features.  Because features can be composed onto `Y.DataTable`, custom
            subclasses of DataTable.Base will remain unmodified when new feature modules
            are loaded.
            Example usage might look like this:
            <pre><code>
            // Custom subclass with only sorting and mutability added.  If other datatable
            // feature modules are loaded, this class will not be affected.
            var MyTableClass = Y.Base.create('table', Y.DataTable.Base,
            [ Y.DataTable.Sort, Y.DataTable.Mutable ]);
            var table = new MyTableClass({
            columns: ['firstName', 'lastName', 'age'],
            data: [
            { firstName: 'Frank', lastName: 'Zappa', age: 71 },
            { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },
            { firstName: 'Albert', lastName: 'Einstein', age: 132 },
            ...
            ]
            });
            table.render('#over-there');
            // DataTable.Base can be instantiated if a featureless table is needed.
            var table = new Y.DataTable.Base({
            columns: ['firstName', 'lastName', 'age'],
            data: [
            { firstName: 'Frank', lastName: 'Zappa', age: 71 },
            { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },
            { firstName: 'Albert', lastName: 'Einstein', age: 132 },
            ...
            ]
            });
            table.render('#in-here');
            </code></pre>
            DataTable.Base is built from DataTable.Core, and sets the default `headerView`
            to `Y.DataTable.HeaderView` and default `bodyView` to `Y.DataTable.BodyView`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._addScrollbarPadding">
            <summary>
            Adds padding to the last cells in the fixed header for vertically scrolling
            tables.  This padding is equal in width to the scrollbar, so can't be
            relegated to a stylesheet.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterColumnsChange(Y_.EventFacade)">
            <summary>
            Updates the `_columnMap` property in response to changes in the `columns`
            attribute.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterDataChange(Y_.EventFacade)">
            <summary>
            Updates the `modelList` attributes of the rendered views in response to the
            `data` attribute being assigned a new ModelList.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._afterMessageColumnsChange(Y_.EventFacade)" -->
        <member name="M:Y_.DataTable._afterMessageDataChange(Y_.EventFacade)">
            <summary>
            Relays to `_uiSetMessage` to hide or show the message node.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterScrollableChange(Y_.EventFacade)">
            <summary>
            Reacts to changes in the `scrollable` attribute by updating the `_xScroll`
            and `_yScroll` properties and syncing the scrolling structure accordingly.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterScrollCaptionChange(Y_.EventFacade)">
            <summary>
            Reacts to changes in the `caption` attribute by adding, removing, or
            syncing the caption table when the table is set to scroll.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterScrollColumnsChange(Y_.EventFacade)">
            <summary>
            Reacts to changes in the `columns` attribute of vertically scrolling tables
            by refreshing the fixed headers, scroll container, and virtual scrollbar
            position.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterScrollDataChange(Y_.EventFacade)">
            <summary>
            Reacts to changes in vertically scrolling table's `data` ModelList by
            synchronizing the fixed column header widths and virtual scrollbar height.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._afterScrollHeightChange(Y_.EventFacade)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._afterScrollWidthChange(Y_.EventFacade)" -->
        <member name="M:Y_.DataTable._afterShowMessagesChange(Y_.EventFacade)">
            <summary>
            Removes the message node if `showMessages` is `false`, or relays to
            `_uiSetMessage` if `true`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterSortByChange(Y_.EventFacade)">
            <summary>
            Sorts the `data` ModelList based on the new `sortBy` configuration.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterSortDataChange(Y_.EventFacade)">
            <summary>
            Applies the sorting logic to the new ModelList if the `newVal` is a new
            ModelList.
            </summary>
        </member>
        <member name="M:Y_.DataTable._afterSortRecordChange(Y_.EventFacade)">
            <summary>
            Checks if any of the fields in the modified record are fields that are
            currently being sorted by, and if so, resorts the `data` ModelList.
            </summary>
        </member>
        <member name="M:Y_.DataTable._bindMessageUI">
            <summary>
            Binds the events necessary to keep the message node in sync with the current
            table and configuration state.
            </summary>
        </member>
        <member name="M:Y_.DataTable._bindScrollbar">
            <summary>
            Binds virtual scrollbar interaction to the `_yScrollNode`'s `scrollTop` and
            vice versa.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._bindScrollResize" -->
        <member name="M:Y_.DataTable._bindScrollUI">
            <summary>
            Attaches internal subscriptions to keep the scrolling structure up to date
            with changes in the table's `data`, `columns`, `caption`, or `height`.  The
            `width` is taken care of already.
            This executes after the table's native `bindUI` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable._bindSortUI">
            <summary>
            Subscribes to state changes that warrant updating the UI, and adds the
            click handler for triggering the sort operation from the UI.
            </summary>
        </member>
        <member name="M:Y_.DataTable._clearScrollLock">
            <summary>
            Clears the lock and timer used to manage synchronizing the scroll position
            between the vertical scroll container and the virtual scrollbar.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createColumnGroup" -->
        <member name="M:Y_.DataTable._createRecordClass(System.Object)">
            <summary>
            Creates a Model subclass from an array of attribute names or an object of
            attribute definitions.  This is used to generate a class suitable to
            represent the data passed to the `data` attribute if no `recordType` is
            set.
            </summary>
        </member>
        <member name="M:Y_.DataTable._createScrollbar">
            <summary>
            Creates a virtual scrollbar from the `_SCROLLBAR_TEMPLATE`, assigning it to
            the `_scrollbarNode` property.
            </summary>
        </member>
        <member name="M:Y_.DataTable._createScrollCaptionTable">
            <summary>
            Creates a separate table to contain the caption when the table is
            configured to scroll vertically or horizontally.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createTable" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createTBody" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createTFoot" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createTHead" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createXScrollNode" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createYScrollHeader" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._createYScrollNode" -->
        <member name="M:Y_.DataTable._defAddColumnFn(Y_.EventFacade)">
            <summary>
            Default function for the `addColumn` event.
            Inserts the specified column at the provided index.
            </summary>
        </member>
        <member name="M:Y_.DataTable._defModifyColumnFn(Y_.EventFacade)">
            <summary>
            Default function for the `modifyColumn` event.
            Mixes the new column properties into the specified column definition.
            </summary>
        </member>
        <member name="M:Y_.DataTable._defMoveColumnFn(Y_.EventFacade)">
            <summary>
            Default function for the `moveColumn` event.
            Removes the specified column from its current location and inserts it at the
            specified array index (may be an array of indexes for nested headers).
            </summary>
        </member>
        <member name="M:Y_.DataTable._defRemoveColumnFn(Y_.EventFacade)">
            <summary>
            Default function for the `removeColumn` event.
            Splices the specified column from its containing columns array.
            </summary>
        </member>
        <member name="M:Y_.DataTable._defRenderBodyFn(Y_.EventFacade)">
            <summary>
            Calls `render()` on the `bodyView` class instance.
            </summary>
        </member>
        <member name="M:Y_.DataTable._defRenderFooterFn(Y_.EventFacade)">
            <summary>
            Calls `render()` on the `footerView` class instance.
            </summary>
        </member>
        <member name="M:Y_.DataTable._defRenderHeaderFn(Y_.EventFacade)">
            <summary>
            Calls `render()` on the `headerView` class instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._defRenderTableFn(Y_.EventFacade)" -->
        <member name="M:Y_.DataTable._defSortFn(Y_.EventFacade)">
            <summary>
            Sets the `sortBy` attribute from the `sort` event's `e.sortBy` value.
            </summary>
        </member>
        <member name="M:Y_.DataTable._disableScrolling">
            <summary>
            Removes the nodes used to create horizontal and vertical scrolling and
            rejoins the caption to the main table if needed.
            </summary>
        </member>
        <member name="M:Y_.DataTable._disableXScrolling">
            <summary>
            Removes the nodes used to allow horizontal scrolling.
            </summary>
        </member>
        <member name="M:Y_.DataTable._disableYScrolling">
            <summary>
            Removes the nodes used to allow vertical scrolling.
            </summary>
        </member>
        <member name="M:Y_.DataTable._getColumns(System.Object,System.Object)">
            <summary>
            The getter for the `columns` attribute.  Returns the array of column
            configuration objects if `instance.get('columns')` is called, or the
            specific column object if `instance.get('columns.columnKey')` is called.
            </summary>
        </member>
        <member name="M:Y_.DataTable._getColumnset(System.Object,System.Object)">
            <summary>
            Relays the `get()` request for the deprecated `columnset` attribute to the
            `columns` attribute.
            THIS BREAKS BACKWARD COMPATIBILITY.  3.4.1 and prior implementations will
            expect a Columnset instance returned from `get('columnset')`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._getData(System.Object)">
            <summary>
            The getter for the `data` attribute.  Returns the ModelList stored in the
            `data` property.  If the ModelList is not yet set, it returns the current
            raw data (presumably an empty array or `undefined`).
            </summary>
        </member>
        <member name="M:Y_.DataTable._getSortBy(System.Object,System.Object)">
            <summary>
            Getter for the `sortBy` attribute.
            Supports the special subattribute "sortBy.state" to get a normalized JSON
            version of the current sort state.  Otherwise, returns the last assigned
            value.
            For example:
            <pre><code>var table = new Y.DataTable({
            columns: [ ... ],
            data: [ ... ],
            sortBy: 'username'
            });
            table.get('sortBy'); // 'username'
            table.get('sortBy.state'); // { key: 'username', dir: 1 }
            table.sort(['lastName', { firstName: "desc" }]);
            table.get('sortBy'); // ['lastName', { firstName: "desc" }]
            table.get('sortBy.state'); // [{ key: "lastName", dir: 1 }, { key: "firstName", dir: -1 }]
            </code></pre>
            </summary>
        </member>
        <member name="M:Y_.DataTable._initColumns">
            <summary>
            Initializes the `_columnMap` property from the configured `columns`
            attribute.  If `columns` is not set, but `recordType` is, it uses the
            `ATTRS` of that class.  If neither are set, it temporarily falls back to an
            empty array. `_initRecordType` will call back into this method if it finds
            the `columnMap` empty.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initData">
            <summary>
            Initializes the instance's `data` property from the value of the `data`
            attribute.  If the attribute value is a ModelList, it is assigned directly
            to `this.data`.  If it is an array, a ModelList is created, its `model`
            property is set to the configured `recordType` class, and it is seeded with
            the array data.  This ModelList is then assigned to `this.data`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initEvents">
            <summary>
            Publishes core events.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._initMessageNode" -->
        <member name="M:Y_.DataTable._initMessageStrings">
            <summary>
            Add the messaging related strings to the `strings` map.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initRecordType">
            <summary>
            If the `recordType` attribute is not set, this method attempts to set a
            default value.
            It tries the following methods to determine a default:
            1. If the `data` attribute is set with a ModelList with a `model` property,
            that class is used.
            2. If the `data` attribute is set with a non-empty ModelList, the
            `constructor` of the first item is used.
            3. If the `data` attribute is set with a non-empty array and the first item
            is a Base subclass, its constructor is used.
            4. If the `data` attribute is set with a non-empty array a custom Model
            subclass is generated using the keys of the first item as its `ATTRS`.
            5. If the `_columnMap` property has keys, a custom Model subclass is
            generated using those keys as its `ATTRS`.
            Of none of those are successful, it subscribes to the change events for
            `columns`, `recordType`, and `data` to try again.
            If defaulting the `recordType` and the current `_columnMap` property is
            empty, it will call `_initColumns`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initSortFn">
            <summary>
            Creates a `_compare` function for the `data` ModelList to allow custom
            sorting by multiple fields.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initSortStrings">
            <summary>
            Add the sort related strings to the `strings` map.
            </summary>
        </member>
        <member name="M:Y_.DataTable._initViewConfig">
            <summary>
            Initializes the `_viewConfig`, `_headerConfig`, `_bodyConfig`, and
            `_footerConfig` properties with the configuration objects that will be
            passed to the constructors of the `headerView`, `bodyView`, and
            `footerView`.
            Extensions can add to the config objects to deliver custom parameters at
            view instantiation.  `_viewConfig` is used as the prototype of the other
            three config objects, so properties added here will be inherited by all
            configs.
            </summary>
        </member>
        <member name="M:Y_.DataTable._onUITriggerSort(Y_.DOMEventFacade)">
            <summary>
            Fires the `sort` event in response to user clicks on sortable column
            headers.
            </summary>
        </member>
        <member name="M:Y_.DataTable._parseColumns(System.Object)">
            <summary>
            Iterates the array of column configurations to capture all columns with a
            `key` property.  Columns that are represented as strings will be replaced
            with objects with the string assigned as the `key` property.  If a column
            has a `children` property, it will be iterated, adding any nested column
            keys to the returned map. There is no limit to the levels of nesting.
            All columns are assigned a `_yuid` stamp and `_id` property corresponding
            to the column's configured `name` or `key` property with any spaces
            replaced with dashes.  If the same `name` or `key` appears in multiple
            columns, subsequent appearances will have their `_id` appended with an
            incrementing number (e.g. if column "foo" is included in the `columns`
            attribute twice, the first will get `_id` of "foo", and the second an `_id`
            of "foo1").  Columns that are children of other columns will have the
            `_parent` property added, assigned the column object to which they belong.
            The result is an object map with column keys as the property name and the
            corresponding column object as the associated value.
            </summary>
        </member>
        <member name="M:Y_.DataTable._parseSortable">
            <summary>
            Normalizes the possible input values for the `sortable` attribute, storing
            the results in the `_sortable` property.
            </summary>
        </member>
        <member name="M:Y_.DataTable._removeScrollbar">
            <summary>
            Removes the virtual scrollbar used by scrolling tables.
            </summary>
        </member>
        <member name="M:Y_.DataTable._removeScrollCaptionTable">
            <summary>
            Removes the table used to house the caption when the table is scrolling.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._removeXScrollNode" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._removeYScrollContainer" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._removeYScrollHeader" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._removeYScrollNode" -->
        <member name="M:Y_.DataTable._renderSortable">
            <summary>
            Initial application of the sortable UI.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setColumnMap(System.Object)">
            <summary>
            Assigns the `_columnMap` property with the parsed results of the array of
            column definitions passed.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setColumnset(System.Object)">
            <summary>
            Relays attribute assignments of the deprecated `columnset` attribute to the
            `columns` attribute.  If a Columnset is object is passed, its basic object
            structure is mined.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._setColumnWidth(Y_.DataType_.Number,System.Object)" -->
        <member name="M:Y_.DataTable._setData">
            <summary>
            Accepts an object with `each` and `getAttrs` (preferably a ModelList or
            subclass) or an array of data objects.  If an array is passes, it will
            create a ModelList to wrap the data.  In doing so, it will set the created
            ModelList's `model` property to the class in the `recordType` attribute,
            which will be defaulted if not yet set.
            If the `data` property is already set with a ModelList, passing an array as
            the value will call the ModelList's `reset()` method with that array rather
            than replacing the stored ModelList wholesale.
            Any non-ModelList-ish and non-array value is invalid.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setDisplayColumns(System.Object)">
            <summary>
            Stores an array of columns intended for display in the `_displayColumns`
            property.  This method assumes that if a column configuration object does
            not have children, it is a display column.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setRecordset(System.Object)">
            <summary>
            Relays the value assigned to the deprecated `recordset` attribute to the
            `data` attribute.  If a Recordset instance is passed, the raw object data
            will be culled from it.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setRecordType(System.Object)">
            <summary>
            Accepts a Base subclass (preferably a Model subclass). Alternately, it will
            generate a custom Model subclass from an array of attribute names or an
            object defining attributes and their respective configurations (it is
            assigned as the `ATTRS` of the new class).
            Any other value is invalid.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setScrollable(System.Object)">
            <summary>
            Accepts (case insensitive) values "x", "y", "xy", `true`, and `false`.
            `true` is translated to "xy" and upper case values are converted to lower
            case.  All other values are invalid.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setScrollProperties">
            <summary>
            Assigns the `_xScroll` and `_yScroll` properties to true if an
            appropriate value is set in the `scrollable` attribute and the `height`
            and/or `width` is set.
            </summary>
        </member>
        <member name="M:Y_.DataTable._setSortBy">
            <summary>
            Parses the current `sortBy` attribute into a normalized structure for the
            `data` ModelList's `_compare` method.  Also updates the column
            configurations' `sortDir` properties.
            </summary>
        </member>
        <member name="M:Y_.DataTable._sortComparator(Y_.Model)">
            <summary>
            Replacement `comparator` for the `data` ModelList that defers sorting logic
            to the `_compare` method.  The deferral is accomplished by returning `this`.
            </summary>
        </member>
        <member name="M:Y_.DataTable._syncMessageUI">
            <summary>
            Synchronizes the message UI with the table state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._syncScrollCaptionUI" -->
        <member name="M:Y_.DataTable._syncScrollColumnWidths">
            <summary>
            Assigns widths to the fixed header columns to match the columns in the data
            table.
            </summary>
        </member>
        <member name="M:Y_.DataTable._syncScrollHeaders">
            <summary>
            Creates matching headers in the fixed header table for vertically scrolling
            tables and synchronizes the column widths.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._syncScrollPosition(Y_.DOMEventFacade)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._syncScrollPosition(Y_.DOMEventFacade,System.Object)" -->
        <member name="M:Y_.DataTable._syncScrollUI">
            <summary>
            Wraps the table for X and Y scrolling, if necessary, if the `scrollable`
            attribute is set.  Synchronizes dimensions and DOM placement of all
            scrolling related nodes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._syncXScrollUI(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._syncYScrollUI(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._uiSetCaption(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._uiSetColumns" -->
        <member name="M:Y_.DataTable._uiSetMessage(Y_.EventFacade)">
            <summary>
            Calls `hideMessage` or `showMessage` as appropriate based on the presence of
            records in the `data` ModelList.
            This is called when `data` is reset or records are added or removed.  Also,
            if the `showMessages` attribute is updated.  In either case, if the
            triggering event has a `message` property on the EventFacade, it will be
            passed to `showMessage` (if appropriate).  If no such property is on the
            facade, the `emptyMessage` will be used (see the strings).
            </summary>
        </member>
        <member name="M:Y_.DataTable._uiSetScrollable">
            <summary>
            Assigns the appropriate class to the `boundingBox` to identify the DataTable
            as horizontally scrolling, vertically scrolling, or both (adds both classes).
            Classes added are "yui3-datatable-scrollable-x" or "...-y"
            </summary>
        </member>
        <member name="M:Y_.DataTable._uiSetScrollbarHeight">
            <summary>
            Updates the virtual scrollbar's height to avoid overlapping with the fixed
            headers.
            </summary>
        </member>
        <member name="M:Y_.DataTable._uiSetScrollbarPosition(Y_.Node)">
            <summary>
            Updates the virtual scrollbar's placement to avoid overlapping the fixed
            headers or the data table.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._uiSetSortable" -->
        <member name="M:Y_.DataTable._uiSetSummary">
            <summary>
            Updates the table's `summary` attribute with the input value.
            </summary>
        </member>
        <member name="M:Y_.DataTable._uiSetWidth(System.Object)">
            <summary>
            Sets the `boundingBox` and table width per the input value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._uiSetYScrollWidth(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable._unbindScrollbar" -->
        <member name="M:Y_.DataTable._unbindScrollResize">
            <summary>
            Detaches the resize event subscription used to maintain column parity for
            vertically scrolling tables with percentage widths.
            </summary>
        </member>
        <member name="M:Y_.DataTable._validateSortable(System.Object)">
            <summary>
            Allows values `true`, `false`, "auto", or arrays of column names through.
            </summary>
        </member>
        <member name="M:Y_.DataTable._validateSortBy(System.Object)">
            <summary>
            Allows strings, arrays of strings, objects, or arrays of objects.
            </summary>
        </member>
        <member name="M:Y_.DataTable._validateView">
            <summary>
            Verifies the input value is a function with a `render` method on its
            prototype.  `null` is also accepted to remove the default View.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addColumn(System.Object)">
            <summary>
            Adds the column configuration to the DataTable's `columns` configuration.
            If the `index` parameter is supplied, it is injected at that index.  If the
            table has nested headers, inject a subcolumn by passing an array of indexes
            to identify the new column's final location.
            The `index` parameter is required if adding a nested column.
            This method is a convienience method for fetching the DataTable's `columns`
            attribute, updating it, and calling
            `table.set('columns', _updatedColumnsDefs_)`
            For example:
            <pre><code>// Becomes last column
            table.addColumn('name');
            // Inserted after the current second column, moving the current third column
            // to index 4
            table.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );
            // Insert a new column in a set of headers three rows deep.  The index array
            // translates to
            // [ 2, --  in the third column's children
            //   1, --  in the second child's children
            //   3 ] -- as the fourth child column
            table.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);
            </code></pre>
            </summary>
        </member>
        <member name="M:Y_.DataTable.addColumn(System.Object,System.Object)">
            <summary>
            Adds the column configuration to the DataTable's `columns` configuration.
            If the `index` parameter is supplied, it is injected at that index.  If the
            table has nested headers, inject a subcolumn by passing an array of indexes
            to identify the new column's final location.
            The `index` parameter is required if adding a nested column.
            This method is a convienience method for fetching the DataTable's `columns`
            attribute, updating it, and calling
            `table.set('columns', _updatedColumnsDefs_)`
            For example:
            <pre><code>// Becomes last column
            table.addColumn('name');
            // Inserted after the current second column, moving the current third column
            // to index 4
            table.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );
            // Insert a new column in a set of headers three rows deep.  The index array
            // translates to
            // [ 2, --  in the third column's children
            //   1, --  in the second child's children
            //   3 ] -- as the fourth child column
            table.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);
            </code></pre>
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRow(System.Object)">
            <summary>
            Adds a new record to the DataTable's `data` ModelList.  Record data can be
            an object of field values or an instance of the DataTable's configured
            `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRow(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds a new record to the DataTable's `data` ModelList.  Record data can be
            an object of field values or an instance of the DataTable's configured
            `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRow(System.Object,System.Object)">
            <summary>
            Adds a new record to the DataTable's `data` ModelList.  Record data can be
            an object of field values or an instance of the DataTable's configured
            `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRow(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds a new record to the DataTable's `data` ModelList.  Record data can be
            an object of field values or an instance of the DataTable's configured
            `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRows(System.Object)">
            <summary>
            Adds an array of new records to the DataTable's `data` ModelList.  Record data
            can be an array of objects containing field values or an array of instance of
            the DataTable's configured `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            Technically, this is an alias to `addRow`, but please use the appropriately
            named method for readability.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Models will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to each Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRows(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds an array of new records to the DataTable's `data` ModelList.  Record data
            can be an array of objects containing field values or an array of instance of
            the DataTable's configured `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            Technically, this is an alias to `addRow`, but please use the appropriately
            named method for readability.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Models will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to each Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRows(System.Object,System.Object)">
            <summary>
            Adds an array of new records to the DataTable's `data` ModelList.  Record data
            can be an array of objects containing field values or an array of instance of
            the DataTable's configured `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            Technically, this is an alias to `addRow`, but please use the appropriately
            named method for readability.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Models will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to each Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.addRows(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Adds an array of new records to the DataTable's `data` ModelList.  Record data
            can be an array of objects containing field values or an array of instance of
            the DataTable's configured `recordType` class.
            This relays all parameters to the `data` ModelList's `add` method.
            Technically, this is an alias to `addRow`, but please use the appropriately
            named method for readability.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Models will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to each Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.bindUI">
            <summary>
            Subscribes to attribute change events to update the UI.
            </summary>
        </member>
        <member name="M:Y_.DataTable.delegate(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Pass through to `delegate()` called from the `contentBox`.
            </summary>
        </member>
        <member name="M:Y_.DataTable.destructor">
            <summary>
            Cleans up external event subscriptions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable.getCell(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable.getCell(System.Object,System.Object)" -->
        <member name="M:Y_.DataTable.getColumn(System.Object)">
            <summary>
            Gets the column configuration object for the given key, name, or index.  For
            nested columns, `name` can be an array of indexes, each identifying the index
            of that column in the respective parent's "children" array.
            If you pass a column object, it will be returned.
            For columns with keys, you can also fetch the column with
            `instance.get('columns.foo')`.
            </summary>
        </member>
        <member name="M:Y_.DataTable.getRecord(System.Object)">
            <summary>
            Returns the Model associated to the record `id`, `clientId`, or index (not
            row index).  If none of those yield a Model from the `data` ModelList, the
            arguments will be passed to the `bodyView` instance's `getRecord` method
            if it has one.
            If no Model can be found, `null` is returned.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable.getRow(System.Object)" -->
        <member name="M:Y_.DataTable.hideMessage">
            <summary>
            Hides the message node.
            </summary>
        </member>
        <member name="M:Y_.DataTable.initializer">
            <summary>
            Publishes the events used by the mutation methods:
            * addColumn
            * removeColumn
            * modifyColumn
            * moveColumn
            </summary>
        </member>
        <member name="M:Y_.DataTable.initializer(System.Object)">
            <summary>
            Sets up event handlers and AOP advice methods to bind the DataTable's natural
            behaviors with the scrolling APIs and state.
            </summary>
        </member>
        <member name="M:Y_.DataTable.modifyColumn(System.Object,System.Object)">
            <summary>
            Updates an existing column definition. Fires the `modifyColumn` event.
            For example:
            <pre><code>// Add a formatter to the existing 'price' column definition
            table.modifyColumn('price', { formatter: currencyFormatter });
            // Change the label on a header cell in a set of nested headers three rows
            // deep.  The index array translates to
            // [ 2,  -- in the third column's children
            //   1,  -- the second child
            //   3 ] -- the fourth child column
            table.modifyColumn([2, 1, 3], { label: 'Experience' });
            </code></pre>
            </summary>
        </member>
        <member name="M:Y_.DataTable.modifyRow(System.Object,System.Object)">
            <summary>
            Updates an existing record in the DataTable's `data` ModelList.  The record
            can be provided explicitly or targeted by it's `id` (see ModelList's
            `getById` method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the all other passed
            arguments to the Model's `setAttrs` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.modifyRow(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Updates an existing record in the DataTable's `data` ModelList.  The record
            can be provided explicitly or targeted by it's `id` (see ModelList's
            `getById` method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the all other passed
            arguments to the Model's `setAttrs` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.modifyRow(System.Object,System.Object,System.Object)">
            <summary>
            Updates an existing record in the DataTable's `data` ModelList.  The record
            can be provided explicitly or targeted by it's `id` (see ModelList's
            `getById` method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the all other passed
            arguments to the Model's `setAttrs` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.modifyRow(System.Object,System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Updates an existing record in the DataTable's `data` ModelList.  The record
            can be provided explicitly or targeted by it's `id` (see ModelList's
            `getById` method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the all other passed
            arguments to the Model's `setAttrs` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be `save()`d.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `save()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.moveColumn(System.Object,System.Object)">
            <summary>
            Moves an existing column to a new location. Fires the `moveColumn` event.
            The destination index can be a number or array of numbers to place a column
            header in a nested header row.
            </summary>
        </member>
        <member name="M:Y_.DataTable.removeColumn(System.Object)">
            <summary>
            Removes an existing column. Fires the `removeColumn` event.
            </summary>
        </member>
        <member name="M:Y_.DataTable.removeRow(System.Object)">
            <summary>
            Removes a record from the DataTable's `data` ModelList.  The record can be
            provided explicitly or targeted by it's `id` (see ModelList's `getById`
            method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the Model and all other passed
            arguments to the `data` ModelList's `remove` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be destroyed, passing
            `{ delete: true }` to trigger calling the Model's sync layer.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `destroy()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.removeRow(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Removes a record from the DataTable's `data` ModelList.  The record can be
            provided explicitly or targeted by it's `id` (see ModelList's `getById`
            method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the Model and all other passed
            arguments to the `data` ModelList's `remove` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be destroyed, passing
            `{ delete: true }` to trigger calling the Model's sync layer.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `destroy()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.removeRow(System.Object,System.Object)">
            <summary>
            Removes a record from the DataTable's `data` ModelList.  The record can be
            provided explicitly or targeted by it's `id` (see ModelList's `getById`
            method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the Model and all other passed
            arguments to the `data` ModelList's `remove` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be destroyed, passing
            `{ delete: true }` to trigger calling the Model's sync layer.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `destroy()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.removeRow(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Removes a record from the DataTable's `data` ModelList.  The record can be
            provided explicitly or targeted by it's `id` (see ModelList's `getById`
            method), `clientId`, or index in the ModelList.
            After locating the target Model, this relays the Model and all other passed
            arguments to the `data` ModelList's `remove` method.
            If a configuration object is passed as a second argument, and that object
            has `sync: true` set, the underlying Model will be destroyed, passing
            `{ delete: true }` to trigger calling the Model's sync layer.
            If the DataTable's `autoSync` attribute is set to `true`, the additional
            argument is not needed.
            If syncing and the last argument is a function, that function will be used
            as a callback to the Model's `destroy()` method.
            </summary>
        </member>
        <member name="M:Y_.DataTable.renderUI">
            <summary>
            Builds the table and attaches it to the DOM.  This requires the host class
            to provide a `contentBox` attribute.  This is typically provided by Widget.
            </summary>
        </member>
        <member name="M:Y_.DataTable.scrollTo(System.Object)">
            <summary>
            Scrolls a given row or cell into view if the table is scrolling.  Pass the
            `clientId` of a Model from the DataTable's `data` ModelList or its row
            index to scroll to a row or a [row index, column index] array to scroll to
            a cell.  Alternately, to scroll to any element contained within the table's
            scrolling areas, pass its ID, or the Node itself (though you could just as
            well call `node.scrollIntoView()` yourself, but hey, whatever).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable.setColumnWidth(System.Object,System.Object)" -->
        <member name="M:Y_.DataTable.showMessage(System.Object)">
            <summary>
            Display the message node and set its content to `message`.  If there is a
            localized `strings` entry for the value of `message`, that string will be
            used.
            </summary>
        </member>
        <member name="M:Y_.DataTable.sort(System.Object)">
            <summary>
            Sort the data in the `data` ModelList and refresh the table with the new
            order.
            Acceptable values for `fields` are `key` strings or objects with a single
            property, the column `key`, with a value of 1, -1, "asc", or "desc".  E.g.
            `{ username: 'asc' }`.  String values are assumed to be ascending.
            Example values would be:
            * `"username"` - sort by the data's `username` field or the `key`
            associated to a column with that `name`.
            * `{ username: "desc" }` - sort by `username` in descending order.
            Alternately, use values "asc", 1 (same as "asc"), or -1 (same as "desc").
            * `["lastName", "firstName"]` - ascending sort by `lastName`, but for
            records with the same `lastName`, ascending subsort by `firstName`.
            Array can have as many items as you want.
            * `[{ lastName: -1 }, "firstName"]` - descending sort by `lastName`,
            ascending subsort by `firstName`. Mixed types are ok.
            </summary>
        </member>
        <member name="M:Y_.DataTable.sort(System.Object,System.Object)">
            <summary>
            Sort the data in the `data` ModelList and refresh the table with the new
            order.
            Acceptable values for `fields` are `key` strings or objects with a single
            property, the column `key`, with a value of 1, -1, "asc", or "desc".  E.g.
            `{ username: 'asc' }`.  String values are assumed to be ascending.
            Example values would be:
            * `"username"` - sort by the data's `username` field or the `key`
            associated to a column with that `name`.
            * `{ username: "desc" }` - sort by `username` in descending order.
            Alternately, use values "asc", 1 (same as "asc"), or -1 (same as "desc").
            * `["lastName", "firstName"]` - ascending sort by `lastName`, but for
            records with the same `lastName`, ascending subsort by `firstName`.
            Array can have as many items as you want.
            * `[{ lastName: -1 }, "firstName"]` - descending sort by `lastName`,
            ascending subsort by `firstName`. Mixed types are ok.
            </summary>
        </member>
        <member name="M:Y_.DataTable.syncUI">
            <summary>
            Updates the UI with the current attribute state.  Fires the `renderHeader`,
            `renderBody`, and `renderFooter` events;
            </summary>
        </member>
        <member name="M:Y_.DataTable.toggleSort(System.Object)">
            <summary>
            Reverse the current sort direction of one or more fields currently being
            sorted by.
            Pass the `key` of the column or columns you want the sort order reversed
            for.
            </summary>
        </member>
        <member name="M:Y_.DataTable.toggleSort(System.Object,System.Object)">
            <summary>
            Reverse the current sort direction of one or more fields currently being
            sorted by.
            Pass the `key` of the column or columns you want the sort order reversed
            for.
            </summary>
        </member>
        <member name="T:Y_.ColumnSeries">
            <summary>
            The ColumnSeries class renders columns positioned horizontally along a category or time axis. The columns'
            lengths are proportional to the values they represent along a vertical axis.
            and the relevant data points.
            </summary>
        </member>
        <member name="M:Y_.ColumnSeries.updateMarkerState(System.Object,Y_.DataType_.Number)">
            <summary>
            Resizes and positions markers based on a mouse interaction.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.ColumnSeries.styles" -->
        <member name="T:Y_.ClickableRail">
            <summary>
            Slider extension that allows clicking on the Slider's rail element,
            triggering the thumb to align with the location of the click.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._bindClickableRail">
            <summary>
            Attaches DOM event subscribers to support rail interaction.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._defRailMouseDownFn(Y_.Event)">
            <summary>
            Default behavior for the railMouseDown event.  Centers the thumb at
            the click location and passes control to the DDM to behave as though
            the thumb itself were clicked in preparation for a drag operation.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._getThumbDestination(System.Object,Y_.Node)">
            <summary>
            Calculates the top left position the thumb should be moved to to
            align the click XY with the center of the specified node.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._initClickableRail">
            <summary>
            Initializes the internal state and sets up events.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._onRailMouseDown(System.Object)">
            <summary>
            Dispatches the railMouseDown event.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._resolveThumb(System.Object)">
            <summary>
            Resolves which thumb to actuate if any.  Override this if you want to
            support multiple thumbs.  By default, returns the Drag instance for
            the thumb stored by the Slider.
            </summary>
        </member>
        <member name="M:Y_.ClickableRail._unbindClickableRail">
            <summary>
            Detaches DOM event subscribers for cleanup/destruction cycle.
            </summary>
        </member>
        <member name="T:Y_.WidgetPositionConstrain">
            <summary>
            A widget extension, which can be used to add constrained xy positioning support to the base Widget class,
            through the <a href="Base.html#method_build">Base.build</a> method. This extension requires that
            the WidgetPosition extension be added to the Widget (before WidgetPositionConstrain, if part of the same
            extension list passed to Base.build).
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._afterConstrainChange(Y_.EventFacade)">
            <summary>
            After change listener for the "constrain" attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._bindUIPosConstrained">
            <summary>
            Binds event listeners responsible for updating the UI state in response to
            Widget constrained positioning related state changes.
            <p>
            This method is invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._constrain(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            The method which performs the actual constrain calculations for a given axis ("x" or "y") based
            on the regions provided.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._constrainOnXYChange(Y_.EventFacade)">
            <summary>
            The on change listener for the "xy" attribute. Modifies the event facade's
            newVal property with the constrained XY value.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._preventOverlap(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            The method which performs the preventOverlap calculations for a given axis ("x" or "y") based
            on the value and regions provided.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain._setConstrain(System.Object)">
            <summary>
            The setter implementation for the "constrain" attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain.constrain(Y_.Array,System.Object)">
            <summary>
            Constrains the widget's bounding box to a node (or the viewport). If xy or node are not
            passed in, the current position and the value of "constrain" will be used respectively.
            The widget's position will be changed to the constrained position.
            </summary>
        </member>
        <member name="M:Y_.WidgetPositionConstrain.getConstrainedXY(Y_.Array,System.Object)">
            <summary>
            Calculates the constrained positions for the XY positions provided, using
            the provided node argument is passed in. If no node value is passed in, the value of
            the "constrain" attribute is used.
            </summary>
        </member>
        <member name="P:Y_.WidgetPositionConstrain._PREVENT_OVERLAP">
            <summary>
            The set of positions for which to prevent
            overlap.
            </summary>
        </member>
        <member name="P:Y_.WidgetPositionConstrain.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetPositionConstrain.
            </summary>
        </member>
        <member name="T:Y_.WidgetButtons">
            <summary>
            Provides header/body/footer button support for Widgets that use the
            `WidgetStdMod` extension.
            This Widget extension makes it easy to declaratively configure a widget's
            buttons. It adds a `buttons` attribute along with button- accessor and mutator
            methods. All button nodes have the `Y.Plugin.Button` plugin applied.
            This extension also includes `HTML_PARSER` support to seed a widget's `buttons`
            from those which already exist in its DOM.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._afterButtonsChange(Y_.EventFacade)">
            <summary>
            Handles this widget's `buttonsChange` event which fires anytime the
            `buttons` attribute is modified.
            **Note:** This method special-cases the `buttons` modifications caused by
            `addButton()` and `removeButton()`, both of which set the `src` property on
            the event facade to "add" and "remove" respectively.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._afterContentChangeButtons(Y_.EventFacade)">
            <summary>
            Handles this widget's `headerContentChange`, `bodyContentChange`,
            `footerContentChange` events by making sure the `buttons` remain rendered
            after changes to the content areas.
            These events are very chatty, so extra caution is taken to avoid doing extra
            work or getting into an infinite loop.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._afterDefaultButtonChange(Y_.EventFacade)">
            <summary>
            Handles this widget's `defaultButtonChange` event by adding the
            "yui3-button-primary" CSS class to the new `defaultButton` and removing it
            from the old default button.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._afterVisibleChangeButtons(Y_.EventFacade)">
            <summary>
            Handles this widget's `visibleChange` event by focusing the `defaultButton`
            if there is one.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._bindUIButtons">
            <summary>
            Binds UI event listeners. This method is inserted via AOP, and will execute
            after `bindUI()`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._createButton(System.Object)">
            <summary>
            Returns a button node based on the specified `button` node or configuration.
            The button node will either be created via `Y.Plugin.Button.createNode()`,
            or when `button` is specified as a node already, it will by `plug()`ed with
            `Y.Plugin.Button`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._getButtonContainer(System.Object,System.Object)">
            <summary>
            Returns the buttons container for the specified `section`, passing a truthy
            value for `create` will create the node if it does not already exist.
            **Note:** It is up to the caller to properly insert the returned container
            node into the content section.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._getButtonDefault(System.Object)">
            <summary>
            Returns whether or not the specified `button` is configured to be the
            default button.
            When a button node is specified, the button's `getData()` method will be
            used to determine if the button is configured to be the default. When a
            button config object is specified, the `isDefault` prop will determine
            whether the button is the default.
            **Note:** `<button data-default="true"></button>` is supported via the
            `button.getData('default')` API call.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._getButtonName(System.Object)">
            <summary>
            Returns the name of the specified `button`.
            When a button node is specified, the button's `getData('name')` method is
            preferred, but will fallback to `get('name')`, and the result will determine
            the button's name. When a button config object is specified, the `name` prop
            will determine the button's name.
            **Note:** `<button data-name="foo"></button>` is supported via the
            `button.getData('name')` API call.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._getButtons(System.Object)">
            <summary>
            Getter for the `buttons` attribute. A copy of the `buttons` object is
            returned so the stored state cannot be modified by the callers of
            `get('buttons')`.
            This will recreate a copy of the `buttons` object, and each section array
            (the button nodes are *not* copied/cloned.)
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._mapButton(Y_.Node,System.Object)">
            <summary>
            Adds the specified `button` to the buttons map (both name -> button and
            section:name -> button), and sets the button as the default if it is
            configured as the default button.
            **Note:** If two or more buttons are configured with the same `name` and/or
            configured to be the default button, the last one wins.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._mapButtons(System.Object)">
            <summary>
            Adds the specified `buttons` to the buttons map (both name -> button and
            section:name -> button), and set the a button as the default if one is
            configured as the default button.
            **Note:** This will clear all previous button mappings and null-out any
            previous default button! If two or more buttons are configured with the same
            `name` and/or configured to be the default button, the last one wins.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._mergeButtonConfig(System.Object)">
            <summary>
            Returns a copy of the specified `config` object merged with any defaults
            provided by a `srcNode` and/or a predefined configuration for a button
            with the same `name` on the `BUTTONS` property.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._parseButtons(Y_.Node)">
            <summary>
            `HTML_PARSER` implementation for the `buttons` attribute.
            **Note:** To determine a button node's name its `data-name` and `name`
            attributes are examined. Whether the button should be the default is
            determined by its `data-default` attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._setButtons(System.Object)">
            <summary>
            Setter for the `buttons` attribute. This processes the specified `config`
            and returns a new `buttons` object which is stored as the new state; leaving
            the original, specified `config` unmodified.
            The button nodes will either be created via `Y.Plugin.Button.createNode()`,
            or when a button is already a Node already, it will by `plug()`ed with
            `Y.Plugin.Button`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._syncUIButtons">
            <summary>
            Syncs this widget's current button-related state to its DOM. This method is
            inserted via AOP, and will execute after `syncUI()`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiInsertButton(Y_.Node,System.Object,Y_.DataType_.Number)">
            <summary>
            Inserts the specified `button` node into this widget's DOM at the specified
            `section` and `index` and updates the section content.
            The section and button container nodes will be created if they do not
            already exist.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiRemoveButton(Y_.Node,System.Object)">
            <summary>
            Removes the button node from this widget's DOM and detaches any event
            subscriptions on the button that were created by this widget. The section
            content will be updated unless `{preserveContent: true}` is passed in the
            `options`.
            By default the button container node will be removed when this removes the
            last button of the specified `section`; and if no other content remains in
            the section node, it will also be removed.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiRemoveButton(Y_.Node,System.Object,System.Object)">
            <summary>
            Removes the button node from this widget's DOM and detaches any event
            subscriptions on the button that were created by this widget. The section
            content will be updated unless `{preserveContent: true}` is passed in the
            `options`.
            By default the button container node will be removed when this removes the
            last button of the specified `section`; and if no other content remains in
            the section node, it will also be removed.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiSetButtons(System.Object)">
            <summary>
            Sets the current `buttons` state to this widget's DOM by rendering the
            specified collection of `buttons` and updates the contents of each section
            as needed.
            Button nodes which already exist in the DOM will remain intact, or will be
            moved if they should be in a new position. Old button nodes which are no
            longer represented in the specified `buttons` collection will be removed,
            and any event subscriptions on the button which were created by this widget
            will be detached.
            If the button nodes in this widget's DOM actually change, then each content
            section will be updated (or removed) appropriately.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiSetDefaultButton(Y_.Node,Y_.Node)">
            <summary>
            Adds the "yui3-button-primary" CSS class to the new `defaultButton` and
            removes it from the old default button.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._uiSetVisibleButtons(System.Object)">
            <summary>
            Focuses this widget's `defaultButton` if there is one and this widget is
            visible.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._unMapButton(Y_.Node)">
            <summary>
            Removes the specified `button` to the buttons map, and nulls-out the
            `defaultButton` if it is currently the default button.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._updateContentButtons(System.Object)">
            <summary>
            Updates the content attribute which corresponds to the specified `section`.
            The method updates the section's content to its current `childNodes`
            (text and/or HTMLElement), or will null-out its contents if the section is
            empty. It also specifies a `src` of `buttons` on the change event facade.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons._updateDefaultButton">
            <summary>
            Updates the `defaultButton` attribute if it needs to be updated by comparing
            its current value with the protected `_defaultButton` property.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.addButton(System.Object)">
            <summary>
            Adds a button to this widget.
            The new button node will have the `Y.Plugin.Button` plugin applied, be added
            to this widget's `buttons`, and rendered in the specified `section` at the
            specified `index` (or end of the section). If the section does not exist, it
            will be created.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node or config object to add.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be added.
            * `index`: The index at which to add the button to the section.
            * `src`: "add"
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.addButton(System.Object,Y_.DataType_.Number)">
            <summary>
            Adds a button to this widget.
            The new button node will have the `Y.Plugin.Button` plugin applied, be added
            to this widget's `buttons`, and rendered in the specified `section` at the
            specified `index` (or end of the section). If the section does not exist, it
            will be created.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node or config object to add.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be added.
            * `index`: The index at which to add the button to the section.
            * `src`: "add"
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.addButton(System.Object,System.Object)">
            <summary>
            Adds a button to this widget.
            The new button node will have the `Y.Plugin.Button` plugin applied, be added
            to this widget's `buttons`, and rendered in the specified `section` at the
            specified `index` (or end of the section). If the section does not exist, it
            will be created.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node or config object to add.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be added.
            * `index`: The index at which to add the button to the section.
            * `src`: "add"
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.addButton(System.Object,System.Object,Y_.DataType_.Number)">
            <summary>
            Adds a button to this widget.
            The new button node will have the `Y.Plugin.Button` plugin applied, be added
            to this widget's `buttons`, and rendered in the specified `section` at the
            specified `index` (or end of the section). If the section does not exist, it
            will be created.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node or config object to add.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be added.
            * `index`: The index at which to add the button to the section.
            * `src`: "add"
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.getButton(System.Object)">
            <summary>
            Returns a button node from this widget's `buttons`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.getButton(System.Object,System.Object)">
            <summary>
            Returns a button node from this widget's `buttons`.
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.removeButton(System.Object)">
            <summary>
            Removes a button from this widget.
            The button will be removed from this widget's `buttons` and its DOM. Any
            event subscriptions on the button which were created by this widget will be
            detached. If the content section becomes empty after removing the button
            node, then the section will also be removed.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node to remove.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be removed from.
            * `index`: The index at which at which the button exists in the section.
            * `src`: "remove"
            </summary>
        </member>
        <member name="M:Y_.WidgetButtons.removeButton(System.Object,System.Object)">
            <summary>
            Removes a button from this widget.
            The button will be removed from this widget's `buttons` and its DOM. Any
            event subscriptions on the button which were created by this widget will be
            detached. If the content section becomes empty after removing the button
            node, then the section will also be removed.
            This fires the `buttonsChange` event and adds the following properties to
            the event facade:
            * `button`: The button node to remove.
            * `section`: The `WidgetStdMod` section (header/body/footer) where the
            button should be removed from.
            * `index`: The index at which at which the button exists in the section.
            * `src`: "remove"
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons._buttonsHandles">
            <summary>
            A map of button node `_yuid` -> event-handle for all button nodes which were
            created by this widget.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons._buttonsMap">
            <summary>
            A map of this widget's `buttons`, both name -> button and
            section:name -> button.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons._defaultButton">
            <summary>
            Internal reference to this widget's default button.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons.buttons">
            <summary>
            Collection containing a widget's buttons.
            The collection is an Object which contains an Array of `Y.Node`s for every
            `WidgetStdMod` section (header, body, footer) which has one or more buttons.
            All button nodes have the `Y.Plugin.Button` plugin applied.
            This attribute is very flexible in the values it will accept. `buttons` can
            be specified as a single Array, or an Object of Arrays keyed to a particular
            section.
            All specified values will be normalized to this type of structure:
            {
            header: [...],
            footer: [...]
            }
            A button can be specified as a `Y.Node`, config Object, or String name for a
            predefined button on the `BUTTONS` prototype property. When a config Object
            is provided, it will be merged with any defaults provided by a button with
            the same `name` defined on the `BUTTONS` property.
            See `addButton()` for the detailed list of configuration properties.
            For convenience, a widget's buttons will always persist and remain rendered
            after header/body/footer content updates. Buttons should be removed by
            updating this attribute or using the `removeButton()` method.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons.BUTTONS">
            <summary>
            Collection of predefined buttons mapped by name -> config.
            These button configurations will serve as defaults for any button added to a
            widget's buttons which have the same `name`.
            See `addButton()` for a list of possible configuration values.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons.CLASS_NAMES">
            <summary>
            CSS classes used by `WidgetButtons`.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons.defaultButton">
            <summary>
            The current default button as configured through this widget's `buttons`.
            A button can be configured as the default button in the following ways:
            * As a config Object with an `isDefault` property:
            `{label: 'Okay', isDefault: true}`.
            * As a Node with a `data-default` attribute:
            `<button data-default="true">Okay</button>`.
            This attribute is **read-only**; anytime there are changes to this widget's
            `buttons`, the `defaultButton` will be updated if needed.
            **Note:** If two or more buttons are configured to be the default button,
            the last one wins.
            </summary>
        </member>
        <member name="P:Y_.WidgetButtons.NON_BUTTON_NODE_CFG">
            <summary>
            The list of button configuration properties which are specific to
            `WidgetButtons` and should not be passed to `Y.Plugin.Button.createNode()`.
            </summary>
        </member>
        <member name="T:Y_.UploaderFlash">
            <summary>
            This module provides a UI for file selection and multiple file upload capability
            using Flash as a transport engine.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash._attachTabElements(Y_.Event)">
            <summary>
            Attaches keyboard bindings to enabling tabbing to and from the instance of the Flash
            player in the Uploader widget. If the previous and next elements are specified, the
            keyboard bindings enable the user to tab from the `tabElements["from"]` node to the
            Flash-powered "Select Files" button, and to the `tabElements["to"]` node.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash._setButtonClass(System.Object,System.Object)">
            <summary>
            Adds or removes a specified state CSS class to the underlying uploader button.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.bindUI">
            <summary>
            Binds handlers to the UploaderFlash UI events and propagates attribute
            values to the Flash player.
            The propagation of initial values is set to occur once the Flash player
            instance is ready (as indicated by the `swfReady` event.)
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.initializer">
            <summary>
            Construction logic executed during UploaderFlash instantiation.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.renderUI">
            <summary>
            Creates the DOM structure for the UploaderFlash.
            UploaderFlash's DOM structure consists of two layers: the base "Select Files"
            button that can be replaced by the developer's widget of choice; and a transparent
            Flash overlay positoned above the button that captures all input events.
            The `position` style attribute of the `boundingBox` of the `Uploader` widget
            is forced to be `relative`, in order to accommodate the Flash player overlay
            (which is `position`ed `absolute`ly).
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.upload(System.Object,System.Object,System.Object)">
            <summary>
            Starts the upload of a specific file.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.uploadAll(System.Object,System.Object)">
            <summary>
            Starts the upload of all files on the file list, using an automated queue.
            </summary>
        </member>
        <member name="M:Y_.UploaderFlash.uploadThese(Y_.Array,System.Object,System.Object)">
            <summary>
            Starts the upload of the files specified in the first argument, using an automated queue.
            </summary>
        </member>
        <member name="T:Y_.StackedLineSeries">
            <summary>
            StackedLineSeries creates line graphs in which the different series are stacked along a value axis
            to indicate their contribution to a cumulative total.
            </summary>
        </member>
        <member name="T:Y_.StackedComboSeries">
            <summary>
            The StackedComboSeries class renders a combination of lines, plots and area fills in a single series. Series
            are stacked along the value axis to indicate each series contribution to a cumulative total. Each
            series type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are
            rendered.
            </summary>
        </member>
        <member name="T:Y_.RecordsetFilter">
            <summary>
            Plugin that provides the ability to filter through a recordset.
            Uses the filter methods available on Y.Array (see arrayextras submodule) to filter the recordset.
            </summary>
        </member>
        <member name="M:Y_.RecordsetFilter.filter(System.Object)">
            <summary>
            Filter through the recordset with a custom filter function, or a key-value
            pair.
            </summary>
        </member>
        <member name="M:Y_.RecordsetFilter.filter(System.Object,System.Object)">
            <summary>
            Filter through the recordset with a custom filter function, or a key-value
            pair.
            </summary>
        </member>
        <member name="M:Y_.RecordsetFilter.grep(System.Object)">
            <summary>
            Iterates over the Recordset, returning a new Recordset of all the elements
            that match the supplied regular expression
            </summary>
        </member>
        <member name="M:Y_.RecordsetFilter.reject(SharpKit.JavaScript.JsAction)">
            <summary>
            The inverse of filter. Executes the supplied function on each item. Returns
            a new Recordset containing the items that the supplied function returned
            `false` for.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Plugin_.ScrollViewList" -->
        <member name="M:Y_.Plugin_.ScrollViewList.initializer">
            <summary>
            Designated initializer
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ScrollViewList.ATTRS">
            <summary>
            The default attribute configuration for the plugin
            </summary>
        </member>
        <member name="T:Y_.plugin_.NodeFocusManager">
            <summary>
            The NodeFocusManager class is a plugin for a Node instance.  The class is used
            via the <a href="Node.html#method_plug"><code>plug</code></a> method of Node
            and should not be instantiated directly.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._afterActiveDescendantChange(System.Object)">
            <summary>
            afterChange event handler for the
            "activeDescendant" attribute.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._attachKeyHandler">
            <summary>
            Attaches the "key" event handlers used to support the "keys"
            attribute.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._detachEventHandlers">
            <summary>
            Detaches all event handlers used by the Focus Manager.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._detachKeyHandler">
            <summary>
            Detaches the "key" event handlers used to support the "keys"
            attribute.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._fireClick">
            <summary>
            Fires the click event if the enter key is pressed while
            focused on an HTML element that is not natively clickable.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._focusNext(System.Object,Y_.DataType_.Number)">
            <summary>
            Keydown event handler that moves focus to the next
            enabled descendant.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._focusPrevious(System.Object,Y_.DataType_.Number)">
            <summary>
            Keydown event handler that moves focus to the previous
            enabled descendant.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._initDescendants">
            <summary>
            Sets the <code>tabIndex</code> attribute of all of the
            descendants to -1, except the active descendant, whose
            <code>tabIndex</code> attribute is set to 0.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._isDescendant(Y_.Node)">
            <summary>
            Determines if the specified Node instance is a descendant
            managed by the Focus Manager.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._onDocFocus(System.Object)">
            <summary>
            "focus" event handler for the owner document of the
            Focus Manager's Node.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._onDocMouseDown(System.Object)">
            <summary>
            "mousedown" event handler for the owner document of the
            Focus Manager's Node.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._preventScroll">
            <summary>
            Prevents the viewport from scolling when the user presses
            the up, down, left, or right key.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager._removeFocusClass">
            <summary>
            Removes the class name representing focus (as specified by
            the "focusClass" attribute) from the Node instance to which it is
            currently applied.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager.blur">
            <summary>
            Blurs the current active descendant and sets the
            <code>focused</code> attribute to false.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager.focus(Y_.DataType_.Number,Y_.Node)">
            <summary>
            Focuses the active descendant and sets the
            <code>focused</code> attribute to true.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager.refresh">
            <summary>
            Refreshes the Focus Manager's descendants by re-executing the
            CSS selector query specified by the <code>descendants</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager.start">
            <summary>
            Enables the Focus Manager.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeFocusManager.stop">
            <summary>
            Disables the Focus Manager by detaching all event handlers.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeFocusManager.activeDescendant">
            <summary>
            <p>Node, or index of the Node, representing the descendant that is either
            focused or is focusable (<code>tabIndex</code> attribute is set to 0).
            The value cannot represent a disabled descendant Node.  Use a value of -1
            to remove all descendant Nodes from the default tab flow.
            If no value is specified, the active descendant will be inferred using
            the following criteria:</p>
            <ol>
            <li>Examining the <code>tabIndex</code> attribute of each descendant and
            using the first descendant whose <code>tabIndex</code> attribute is set
            to 0</li>
            <li>If no default can be inferred then the value is set to either 0 or
            the index of the first enabled descendant.</li>
            </ol>
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeFocusManager.keys">
            <summary>
            Object literal representing the keys to be used to navigate between the
            next/previous descendant.  The format for the attribute's value is
            <code>{ next: "down:40", previous: "down:38" }</code>.  The value for the
            "next" and "previous" properties are used to attach
            <a href="event/#keylistener"><code>key</code></a> event listeners. See
            the <a href="event/#keylistener">Using the key Event</a> section of
            the Event documentation for more information on "key" event listeners.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorBidi">
            <summary>
            Plugin for Editor to support BiDirectional (bidi) text operations.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.EditorBidi.addParents">
            <summary>
            Generates a list of all the block parents of the current NodeList
            </summary>
        </member>
        <member name="M:Y_.Plugin_.EditorBidi.blockParent">
            <summary>
            Returns a block parent for a given element
            </summary>
        </member>
        <member name="M:Y_.Plugin_.EditorBidi.removeTextAlign">
            <summary>
            Method to test a node's style attribute for text-align and removing it.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi._NODE_SELECTED">
            <summary>
            The data key to store on the node.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.BLOCKS">
            <summary>
            More elements may be needed. BODY *must* be in the list to take care of the special case.
            blockParent could be changed to use inst.EditorSelection.BLOCKS
            instead, but that would make Y.Plugin.EditorBidi.blockParent
            unusable in non-RTE contexts (it being usable is a nice
            side-effect).
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.DIV_WRAPPER">
            <summary>
            Template for creating a block element
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.EVENTS">
            <summary>
            The events to check for a direction change on
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.NAME">
            <summary>
            editorBidi
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.NS">
            <summary>
            editorBidi
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBidi.RE_TEXT_ALIGN">
            <summary>
            Regex for testing/removing text-align style from an element
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Align">
            <summary>
            Node plugin which can be used to align a node with another node,
            region, or the viewport.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Align.center(System.Object)">
            <summary>
            Aligns the center of a node to the center of another node or region.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Align.destroy">
            <summary>
            Removes the resize handler, if any. This is called automatically
            when unplugged from the host node.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Align.to(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Aligns node with a point on another node or region.
            Possible alignment points are:
            <dl>
            <dt>tl</dt>
            <dd>top left</dd>
            <dt>tr</dt>
            <dd>top right</dd>
            <dt>bl</dt>
            <dd>bottom left</dd>
            <dt>br</dt>
            <dd>bottom right</dd>
            <dt>tc</dt>
            <dd>top center</dd>
            <dt>bc</dt>
            <dd>bottom center</dd>
            <dt>rc</dt>
            <dd>right center</dd>
            <dt>lc</dt>
            <dd>left center</dd>
            <dt>cc</dt>
            <dd>center center</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.PjaxBase">
            <summary>
            `Y.Router` extension that provides the core plumbing for enhanced navigation
            implemented using the pjax technique (HTML5 `pushState` + Ajax).
            This makes it easy to enhance the navigation between the URLs of an application
            in HTML5 history capable browsers by delegating to the router to fulfill the
            "request" and seamlessly falling-back to using standard full-page reloads in
            older, less-capable browsers.
            The `PjaxBase` class isn't useful on its own, but can be mixed into a
            `Router`-based class to add Pjax functionality to that Router. For a pre-made
            standalone Pjax router, see the `Pjax` class.
            var MyRouter = Y.Base.create('myRouter', Y.Router, [Y.PjaxBase], {
            // ...
            });
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._defNavigateFn(Y_.EventFacade)">
            <summary>
            Default handler for the `navigate` event.
            Adds a new history entry or replaces the current entry for the specified URL
            and will scroll the page to the top if configured to do so.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._getRoot">
            <summary>
            Returns the current path root after popping off the last path segment,
            making it useful for resolving other URL paths against.
            The path root will always begin and end with a '/'.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._navigate(System.Object)">
            <summary>
            Underlying implementation for `navigate()`.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._navigate(System.Object,System.Object)">
            <summary>
            Underlying implementation for `navigate()`.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._normalizePath(System.Object)">
            <summary>
            Returns a normalized path, ridding it of any '..' segments and properly
            handling leading and trailing slashes.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._onLinkClick(Y_.EventFacade)">
            <summary>
            Handler for delegated link-click events which match the `linkSelector`.
            This will attempt to enhance the navigation to the link element's `href` by
            passing the URL to the `_navigate()` method. When the navigation is being
            enhanced, the default action is prevented.
            If the user clicks a link with the middle/right mouse buttons, or is holding
            down the Ctrl or Command keys, this method's behavior is not applied and
            allows the native behavior to occur. Similarly, if the router is not capable
            or handling the URL because no route-handlers match, the link click will
            behave natively.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._pjaxBindUI">
            <summary>
            Binds the delegation of link-click events that match the `linkSelector` to
            the `_onLinkClick()` handler.
            By default this method will only be called if the browser is capable of
            using HTML5 history.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._resolvePath(System.Object)">
            <summary>
            Returns the normalized result of resolving the `path` against the current
            path. Falsy values for `path` will return just the current path.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase._resolveURL(System.Object)">
            <summary>
            Resolves the specified URL against the current URL.
            This method resolves URLs like a browser does and will always return an
            absolute URL. When the specified URL is already absolute, it is assumed to
            be fully resolved and is simply returned as is. Scheme-relative URLs are
            prefixed with the current protocol. Relative URLs are giving the current
            URL's origin and are resolved and normalized against the current path root.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase.navigate(System.Object)">
            <summary>
            Navigates to the specified URL if there is a route handler that matches. In
            browsers capable of using HTML5 history, the navigation will be enhanced by
            firing the `navigate` event and having the router handle the "request".
            Non-HTML5 browsers will navigate to the new URL via manipulation of
            `window.location`.
            When there is a route handler for the specified URL and it is being
            navigated to, this method will return `true`, otherwise it will return
            `false`.
            **Note:** The specified URL _must_ be of the same origin as the current URL,
            otherwise an error will be logged and navigation will not occur. This is
            intended as both a security constraint and a purposely imposed limitation as
            it does not make sense to tell the router to navigate to a URL on a
            different scheme, host, or port.
            </summary>
        </member>
        <member name="M:Y_.PjaxBase.navigate(System.Object,System.Object)">
            <summary>
            Navigates to the specified URL if there is a route handler that matches. In
            browsers capable of using HTML5 history, the navigation will be enhanced by
            firing the `navigate` event and having the router handle the "request".
            Non-HTML5 browsers will navigate to the new URL via manipulation of
            `window.location`.
            When there is a route handler for the specified URL and it is being
            navigated to, this method will return `true`, otherwise it will return
            `false`.
            **Note:** The specified URL _must_ be of the same origin as the current URL,
            otherwise an error will be logged and navigation will not occur. This is
            intended as both a security constraint and a purposely imposed limitation as
            it does not make sense to tell the router to navigate to a URL on a
            different scheme, host, or port.
            </summary>
        </member>
        <member name="P:Y_.PjaxBase._pjaxEvents">
            <summary>
            Holds the delegated pjax-link click handler.
            </summary>
        </member>
        <member name="T:Y_.Lines">
            <summary>
            Utility class used for drawing lines.
            </summary>
        </member>
        <member name="M:Y_.Lines._getLineDefaults">
            <summary>
            Default values for `styles` attribute.
            </summary>
        </member>
        <member name="M:Y_.Lines.drawLines">
            <summary>
            Draws lines for the series.
            </summary>
        </member>
        <member name="M:Y_.Lines.drawSpline">
            <summary>
            Connects data points with a consistent curve for a series.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Graphic" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.Graphic.addShape(System.Object)" -->
        <member name="M:Y_.Graphic.batch(SharpKit.JavaScript.JsAction)">
            <summary>
            Allows for creating multiple shapes in order to batch appending and redraw operations.
            </summary>
        </member>
        <member name="M:Y_.Graphic.destroy">
            <summary>
            Removes all nodes.
            </summary>
        </member>
        <member name="M:Y_.Graphic.getShapeById(System.Object)">
            <summary>
            Returns a shape based on the id of its dom node.
            </summary>
        </member>
        <member name="M:Y_.Graphic.getXY">
            <summary>
            Gets the current position of the graphic instance in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.Graphic.removeAllShapes">
            <summary>
            Removes all shape instances from the dom.
            </summary>
        </member>
        <member name="M:Y_.Graphic.removeShape(System.Object)">
            <summary>
            Removes a shape instance from from the graphic instance.
            </summary>
        </member>
        <member name="M:Y_.Graphic.render(System.Object)">
            <summary>
            Adds the graphics node to the dom.
            </summary>
        </member>
        <member name="T:Y_.Do_.Prevent">
            <summary>
            Return a Prevent object when you want to prevent the wrapped function
            from executing, but want the remaining listeners to execute.  Useful
            for Do.before subscribers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataTable_.BodyView" -->
        <member name="M:Y_.DataTable_.BodyView._afterColumnsChange(Y_.EventFacade)">
            <summary>
            Handles changes in the source's columns attribute.  Redraws the table data.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView._afterDataChange(Y_.EventFacade)">
            <summary>
            Handles modelList changes, including additions, deletions, and updates.
            Modifies the existing table DOM accordingly.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView._afterModelListChange(Y_.EventFacade)">
            <summary>
            Reacts to a change in the instance's `modelList` attribute by breaking
            down the bubbling relationship with the previous `modelList` and setting up
            that relationship with the new one.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView._applyNodeFormatters(Y_.Node,System.Object)">
            <summary>
            Iterates the `modelList`, and calls any `nodeFormatter`s found in the
            `columns` param on the appropriate cell Nodes in the `tbody`.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView._createDataHTML(System.Object)">
            <summary>
            Iterates the `modelList` and applies each Model to the `_rowTemplate`,
            allowing any column `formatter` or `emptyCellValue` to override cell
            content for the appropriate column.  The aggregated HTML string is
            returned.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView._createRowHTML(Y_.Model,Y_.DataType_.Number)" -->
        <member name="M:Y_.DataTable_.BodyView._createRowTemplate(System.Object)">
            <summary>
            Creates a custom HTML template string for use in generating the markup for
            individual table rows with {placeholder}s to capture data from the Models
            in the `modelList` attribute or from column `formatter`s.
            Assigns the `_rowTemplate` property.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView._getRowId(System.Object)">
            <summary>
            Returns the row ID associated with a Model's clientId.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView._parseColumns(System.Object,System.Object)" -->
        <member name="M:Y_.DataTable_.BodyView.bindUI">
            <summary>
            Binds event subscriptions from the UI and the source (if assigned).
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView.destructor">
            <summary>
            Destroys the instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView.getCell(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView.getCell(System.Object,System.Object)" -->
        <member name="M:Y_.DataTable_.BodyView.getClassName(System.Object)">
            <summary>
            Builds a CSS class name from the provided tokens.  If the instance is
            created with `cssPrefix` or `source` in the configuration, it will use this
            prefix (the `_cssPrefix` of the `source` object) as the base token.  This
            allows class instances to generate markup with class names that correspond
            to the parent class that is consuming them.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.BodyView.getRecord(System.Object)">
            <summary>
            Returns the Model associated to the row Node or id provided. Passing the
            Node or id for a descendant of the row also works.
            If no Model can be found, `null` is returned.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView.getRow(System.Object)" -->
        <member name="M:Y_.DataTable_.BodyView.initializer(System.Object)">
            <summary>
            Initializes the instance. Reads the following configuration properties in
            addition to the instance attributes:
            * `columns` - (REQUIRED) The initial column information
            * `cssPrefix` - The base string for classes generated by `getClassName`
            * `source` - The object to serve as source of truth for column info
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.BodyView.render" -->
        <member name="T:Y_.WidgetStack">
            <summary>
            Widget extension, which can be used to add stackable (z-index) support to the
            base Widget class along with a shimming solution, through the
            <a href="Base.html#method_build">Base.build</a> method.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._afterShimChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the shim attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._afterZIndexChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the zIndex attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._bindUIStack">
            <summary>
            Binds event listeners responsible for updating the UI state in response to
            Widget stack related state changes.
            <p>
            This method is invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._parseZIndex(Y_.Node)">
            <summary>
            Parses a `zIndex` attribute value from this widget's `srcNode`.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._renderUIStack">
            <summary>
            Creates/Initializes the DOM to support stackability.
            <p>
            This method in invoked after renderUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._setZIndex(System.Object)">
            <summary>
            Default setter for zIndex attribute changes. Normalizes zIndex values to
            numbers, converting non-numerical values to 0.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._syncUIStack">
            <summary>
            Synchronizes the UI to match the Widgets stack state. This method in
            invoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._uiSetShim(System.Object)">
            <summary>
            Updates the UI to enable/disable the shim. If the widget is not currently visible,
            creation of the shim is deferred until it is made visible, for performance reasons.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack._uiSetZIndex(Y_.DataType_.Number)">
            <summary>
            Updates the UI to reflect the zIndex value passed in.
            </summary>
        </member>
        <member name="M:Y_.WidgetStack.sizeShim">
            <summary>
            For IE6, synchronizes the size and position of iframe shim to that of
            Widget bounding box which it is protecting. For all other browsers,
            this method does not do anything.
            </summary>
        </member>
        <member name="P:Y_.WidgetStack.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetStack.
            </summary>
        </member>
        <member name="P:Y_.WidgetStack.HTML_PARSER">
            <summary>
            The HTML parsing rules for the WidgetStack class.
            </summary>
        </member>
        <member name="T:Y_.WidgetModality">
            <summary>
            Widget extension, which can be used to add modality support to the base Widget class,
            through the Base.create method.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._afterFocusOnChange">
            <summary>
            Default function called when focusOn Attribute is changed. Remove existing listeners and create new listeners.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._afterHostVisibleChangeModal(Y_.EventFacade)">
            <summary>
            Default function that is called when visibility is changed on the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._afterHostZIndexChangeModal(Y_.EventFacade)">
            <summary>
            Default function that is called when z-index is changed on the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._attachUIHandlesModal">
            <summary>
            Attaches UI Listeners for "clickoutside" and "focusoutside" on the widget. When these events occur, and the widget is modal, focus is shifted back onto the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._bindUIModal">
            <summary>
            Hooks up methods to be executed when the widget's visibility or z-index changes
            <p>
            This method in invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._blur">
            <summary>
            Blurs the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._detachUIHandlesModal">
            <summary>
            Detaches all UI Listeners that were set in _attachUIHandlesModal from the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._focus">
            <summary>
            Provides mouse and tab focus to the widget's bounding box.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._GET_MASK">
            <summary>
            Returns the mask if it exists on the page - otherwise creates a mask. There's only
            one mask on a page at a given time.
            <p>
            This method in invoked internally by the getter of the maskNode ATTR.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._getMaskNode">
            <summary>
            Returns the Y.Node instance of the maskNode
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._renderUIModal">
            <summary>
            Adds modal class to the bounding box of the widget
            <p>
            This method in invoked after renderUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._repositionMask(Y_.Widget)">
            <summary>
            Repositions the mask in the DOM for nested modality cases.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._syncUIModal">
            <summary>
            Syncs the mask with the widget's current state, namely the visibility and z-index of the widget
            <p>
            This method in invoked after syncUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._uiSetHostVisibleModal(System.Object)">
            <summary>
            Performs events attaching/detaching, stack shifting and mask repositioning based on the visibility of the widget
            </summary>
        </member>
        <member name="M:Y_.WidgetModality._uiSetHostZIndexModal(Y_.DataType_.Number)">
            <summary>
            Sets the z-index of the mask node.
            </summary>
        </member>
        <member name="M:Y_.WidgetModality.isNested">
            <summary>
            Returns a boolean representing whether the current widget is in a "nested modality" state.
            This is done by checking the number of widgets currently on the stack.
            </summary>
        </member>
        <member name="P:Y_.WidgetModality.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetModality.
            </summary>
        </member>
        <member name="P:Y_.WidgetModality.STACK">
            <summary>
            A stack of Y.Widget objects representing the current hierarchy of modal widgets presently displayed on the screen
            </summary>
        </member>
        <member name="T:Y_.VMLCircle">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Circle.html">`Circle`</a> class.
            `VMLCircle` is not intended to be used directly. Instead, use the <a href="Circle.html">`Circle`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Circle.html">`Circle`</a> class will point to the `VMLCircle` class.
            </summary>
        </member>
        <member name="T:Y_.Test_.TestCase">
            <summary>
            Test case containing various tests to run.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.assert(System.Object,System.Object)">
            <summary>
            Asserts that a given condition is true. If not, then a YUITest.AssertionError object is thrown
            and the test fails.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.callback">
            <summary>
            Method to call from an async init method to
            restart the test case. When called, returns a function
            that should be called when tests are ready to continue.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.fail(System.Object)">
            <summary>
            Forces an assertion error to occur. Shortcut for YUITest.Assert.fail().
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.resume(SharpKit.JavaScript.JsAction)">
            <summary>
            Resumes a paused test and runs the given function.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.setUp">
            <summary>
            Function to run before each test is executed.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.tearDown">
            <summary>
            Function to run after each test is executed.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestCase.wait(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Causes the test case to wait a specified amount of time and then
            continue executing the given code.
            </summary>
        </member>
        <member name="T:Y_.Subscriber">
            <summary>
            Stores the subscriber information to be used when the event fires.
            </summary>
        </member>
        <member name="M:Y_.Subscriber.contains(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns true if the fn and obj match this objects properties.
            Used by the unsubscribe method to match the right subscriber.
            </summary>
        </member>
        <member name="M:Y_.Subscriber.notify(Y_.Array,Y_.CustomEvent)">
            <summary>
            Executes the subscriber.
            </summary>
        </member>
        <member name="P:Y_.Subscriber.args">
            <summary>
            Additional arguments to propagate to the subscriber
            </summary>
        </member>
        <member name="P:Y_.Subscriber.context">
            <summary>
            Optional 'this' keyword for the listener
            </summary>
        </member>
        <member name="P:Y_.Subscriber.fn">
            <summary>
            The callback that will be execute when the event fires
            This is wrapped by Y.rbind if obj was supplied.
            </summary>
        </member>
        <member name="P:Y_.Subscriber.once">
            <summary>
            This listener only reacts to the event once
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Sortable" -->
        <member name="M:Y_.Sortable._test(Y_.Node,System.Object)">
            <summary>
            Test a Node or a selector for the container
            </summary>
        </member>
        <member name="M:Y_.Sortable.getOrdering(System.Object)">
            <summary>
            A custom callback to allow a user to extract some sort of id or any other data from the node to use in the "ordering list" and then that data should be returned from the callback.
            </summary>
        </member>
        <member name="M:Y_.Sortable.getSortable(System.Object)">
            <summary>
            Get a Sortable instance back from a node reference or a selector string.
            </summary>
        </member>
        <member name="M:Y_.Sortable.join(System.Object,System.Object)">
            <summary>
            Join this Sortable with another Sortable instance.
            <ul>
            <li>full: Exchange nodes with both lists.</li>
            <li>inner: Items can go into this list from the joined list.</li>
            <li>outer: Items can go out of the joined list into this list.</li>
            <li>none: Removes the join.</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.Sortable.plug(System.Object,System.Object)">
            <summary>
            Passthrough to the DD.Delegate.ddplug method
            </summary>
        </member>
        <member name="M:Y_.Sortable.reg(System.Object)">
            <summary>
            Register a Sortable instance with the singleton to allow lookups later.
            </summary>
        </member>
        <member name="M:Y_.Sortable.sync">
            <summary>
            Passthrough to the DD.Delegate syncTargets method.
            </summary>
        </member>
        <member name="M:Y_.Sortable.unreg(System.Object)">
            <summary>
            Unregister a Sortable instance with the singleton.
            </summary>
        </member>
        <member name="P:Y_.Sortable.delegate">
            <summary>
            A reference to the DD.Delegate instance.
            </summary>
        </member>
        <member name="P:Y_.Sortable.handles">
            <summary>
            Drag handles to pass on to the internal DD.Delegate instance.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Drop">
            <summary>
            Simple Drop plugin that can be attached to a Node via the plug method.
            </summary>
        </member>
        <member name="T:Y_.Overlay">
            <summary>
            A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).
            It also provides alignment and centering support and uses a standard module format for it's content, with header,
            body and footer section support.
            </summary>
        </member>
        <member name="T:Y_.JSONPRequest">
            <summary>
            <p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience
            method Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>
            <p>Both the constructor as well as the convenience function take two
            parameters: a url string and a callback.</p>
            <p>The url provided must include the placeholder string
            &quot;{callback}&quot; which will be replaced by a dynamically
            generated routing function to pass the data to your callback function.
            An example url might look like
            &quot;http://example.com/service?callback={callback}&quot;.</p>
            <p>The second parameter can be a callback function that accepts the JSON
            payload as its argument, or a configuration object supporting the keys:</p>
            <ul>
            <li>on - map of callback subscribers
            <ul>
            <li>success - function handler for successful transmission</li>
            <li>failure - function handler for failed transmission</li>
            <li>timeout - function handler for transactions that timeout</li>
            </ul>
            </li>
            <li>format  - override function for inserting the proxy name in the url</li>
            <li>timeout - the number of milliseconds to wait before giving up</li>
            <li>context - becomes <code>this</code> in the callbacks</li>
            <li>args    - array of subsequent parameters to pass to the callbacks</li>
            <li>allowCache - use the same proxy name for all requests? (boolean)</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest._defaultCallback(System.Object)">
            <summary>
            <p>Parses the url for a callback named explicitly in the string.
            Override this if the target JSONP service uses a different query
            parameter or url format.</p>
            <p>If the callback is declared inline, the corresponding function will
            be returned.  Otherwise null.</p>
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest._defaultCallback(System.Object,System.Object)">
            <summary>
            Override this method to provide logic to default the success callback if
            it is not provided at construction.  This is overridden by jsonp-url to
            parse the callback from the url string.
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest._format(System.Object,System.Object)">
            <summary>
            URL formatter that looks for callback= in the url and appends it
            if not present.  The supplied proxy name will be assigned to the query
            param.  Override this method by passing a function as the
            &quot;format&quot; property in the config object to the constructor.
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest._format(System.Object,System.Object,System.Object)">
            <summary>
            Default url formatter.  Looks for callback= in the url and appends it
            if not present.  The supplied proxy name will be assigned to the query
            param.  Override this method by passing a function as the
            &quot;format&quot; property in the config object to the constructor.
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest._init(System.Object,System.Object)">
            <summary>
            Set up the success and failure handlers and the regex pattern used
            to insert the temporary callback name in the url.
            </summary>
        </member>
        <member name="M:Y_.JSONPRequest.send(System.Object)">
            <summary>
            Issues the JSONP request.
            </summary>
        </member>
        <member name="T:Y_.GetNodeJS">
            <summary>
            NodeJS specific Get module used to load remote resources. It contains the same signature as the default Get module so there is no code change needed.
            </summary>
        </member>
        <member name="M:Y_.GetNodeJS.escapeWinPath(System.Object)">
            <summary>
            Escape the path for Windows, they need to be double encoded when used as `__dirname` or `__filename`
            </summary>
        </member>
        <member name="M:Y_.GetNodeJS.js(System.Object,System.Object)">
            <summary>
            Override for Get.script for loading local or remote YUI modules.
            </summary>
        </member>
        <member name="M:Y_.GetNodeJS.script">
            <summary>
            Alias for `Y.Get.js`
            </summary>
        </member>
        <member name="T:Y_.Event">
            <summary>
            The event utility provides functions to add and remove event listeners,
            event cleansing.  It also tries to automatically remove listeners it
            registers during the unload event.
            </summary>
        </member>
        <member name="M:Y_.Event._applyFilter(SharpKit.JavaScript.JsAction,Y_.Array,Y_.CustomEvent)">
            <summary>
            Walks up the parent axis of an event's target, and tests each element
            against a supplied filter function.  If any Nodes, including the container,
            satisfy the filter, the delegated callback will be triggered for each.
            Hosted as a protected property of the `delegate` method (e.g.
            `Y.delegate._applyFilter`).
            </summary>
        </member>
        <member name="M:Y_.Event.attach(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Adds an event listener
            </summary>
        </member>
        <member name="M:Y_.Event.compileFilter(System.Object)">
            <summary>
            Compiles a selector string into a filter function to identify whether
            Nodes along the parent axis of an event's target should trigger event
            notification.
            This function is memoized, so previously compiled filter functions are
            returned if the same selector string is provided.
            This function may be useful when defining synthetic events for delegate
            handling.
            Hosted as a property of the `delegate` method (e.g. `Y.delegate.compileFilter`).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Event.define(System.Object,System.Object,System.Object)" -->
        <member name="M:Y_.Event.defineOutside(System.Object,System.Object)">
            <summary>
            Defines a new outside event to correspond with the given DOM event.
            By default, the created synthetic event name will be the name of the event
            with "outside" appended (e.g. "click" becomes "clickoutside"). If you want
            a different name for the created Event, pass it as a second argument like so:
            <code>Y.Event.defineOutside(eventType, "yonderclick")</code>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Event.delegate(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:Y_.Event.detach(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Removes an event listener.  Supports the signature the event was bound
            with, but the preferred way to remove listeners is using the handle
            that is returned when using Y.on
            </summary>
        </member>
        <member name="M:Y_.Event.generateId(System.Object)">
            <summary>
            Generates an unique ID for the element if it does not already
            have one.
            </summary>
        </member>
        <member name="M:Y_.Event.getEvent(Y_.Event,System.Object)">
            <summary>
            Finds the event in the window object, the caller's arguments, or
            in the arguments of another method in the callstack.  This is
            executed automatically for events registered through the event
            manager, so the implementer should not normally need to execute
            this function at all.
            </summary>
        </member>
        <member name="M:Y_.Event.getListeners(System.Object,System.Object)">
            <summary>
            Returns all listeners attached to the given element via addListener.
            Optionally, you can specify a specific type of event to return.
            </summary>
        </member>
        <member name="M:Y_.Event.onAvailable(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)">
            <summary>
            Executes the supplied callback when the item with the supplied
            id is found.  This is meant to be used to execute behavior as
            soon as possible as the page loads.  If you use this after the
            initial page load it will poll for a fixed time for the element.
            The number of times it will poll and the frequency are
            configurable.  By default it will poll for 10 seconds.
            <p>The callback is executed with a single parameter:
            the custom object parameter, if provided.</p>
            </summary>
        </member>
        <member name="M:Y_.Event.onContentReady(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Works the same way as onAvailable, but additionally checks the
            state of sibling elements to determine if the content of the
            available element is safe to modify.
            <p>The callback is executed with a single parameter:
            the custom object parameter, if provided.</p>
            </summary>
        </member>
        <member name="M:Y_.Event.purgeElement(System.Object,System.Object,System.Object)">
            <summary>
            Removes all listeners attached to the given element via addListener.
            Optionally, the node's children can also be purged.
            Optionally, you can specify a specific type of event to remove.
            </summary>
        </member>
        <member name="M:Y_.Event.simulate(System.Object,System.Object,System.Object)">
            <summary>
            Simulates the event with the given name on a target.
            </summary>
        </member>
        <member name="P:Y_.Event.lastError">
            <summary>
            addListener/removeListener can throw errors in unexpected scenarios.
            These errors are suppressed, the method returns false, and this property
            is set
            </summary>
        </member>
        <member name="P:Y_.Event.POLL_INTERVAL">
            <summary>
            The poll interval in milliseconds
            </summary>
        </member>
        <member name="P:Y_.Event.POLL_RETRYS">
            <summary>
            The number of times we should look for elements that are not
            in the DOM at the time the event is requested after the document
            has been loaded.  The default is 1000@amp;40 ms, so it will poll
            for 40 seconds or until all outstanding handlers are bound
            (whichever comes first).
            </summary>
        </member>
        <member name="T:Y_.Do_.Error">
            <summary>
            Return an Error object when you want to terminate the execution
            of all subsequent method calls.
            </summary>
        </member>
        <member name="T:Y_.DataTable_.Message">
            <summary>
            _API docs for this extension are included in the DataTable class._
            Adds support for a message container to appear in the table.  This can be used
            to indicate loading progress, lack of records, or any other communication
            needed.
            Features added to `Y.DataTable`, and made available for custom classes at
            `Y.DataTable.Message`.
            </summary>
        </member>
        <member name="T:Y_.Calendar">
            <summary>
            month range of dates, rendered as a grid with date and
            weekday labels.
            </summary>
        </member>
        <member name="T:Y_.CalendarBase">
            <summary>
            month range of dates, rendered as a grid with date and
            weekday labels.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._bindCalendarEvents">
            <summary>
            A placeholder method, called from bindUI, to bind the Calendar events.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._dateToNode(Y_.DataType_.Date)">
            <summary>
            A utility method that converts a date to the node wrapping the calendar cell
            the date corresponds to..
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._getSelectedDatesInMonth(Y_.DataType_.Date)">
            <summary>
            A utility method that returns all dates selected in a specific month.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._getSelectedDatesList">
            <summary>
            An internal utility method that generates a list of selected dates
            from the hash storage.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._nodeToDate(Y_.Node)">
            <summary>
            A utility method that converts a node corresponding to the DOM element of
            the cell for a particular date to that date.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._normalizeDate(Y_.DataType_.Date)">
            <summary>
            A utility method that normalizes a given date by converting it to the 1st
            day of the month the date is in, with the time set to noon.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._turnNextMonthOff(Y_.Node)">
            <summary>
            A render assist method that turns off the view of the next month's dates
            in a given calendar pane.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._turnNextMonthOn(Y_.Node)">
            <summary>
            A render assist method that turns on the view of the next month's dates
            in a given calendar pane.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._turnPrevMonthOff(Y_.Node)">
            <summary>
            A render assist method that turns off the view of the previous month's dates
            in a given calendar pane.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase._turnPrevMonthOn(Y_.Node)">
            <summary>
            A render assist method that turns on the view of the previous month's dates
            in a given calendar pane.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.bindUI">
            <summary>
            bindUI implementation
            Assigns listeners to relevant events that change the state
            of the calendar.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.deselectDates">
            <summary>
            Deselects a given date or array of dates, or deselects
            all dates if no argument is specified.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.deselectDates(System.Object)">
            <summary>
            Deselects a given date or array of dates, or deselects
            all dates if no argument is specified.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.initializer">
            <summary>
            Designated initializer
            Initializes instance-level properties of
            calendar.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.renderUI">
            <summary>
            renderUI implementation
            Creates a visual representation of the calendar based on existing parameters.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.selectDates(System.Object)">
            <summary>
            Selects a given date or array of dates.
            </summary>
        </member>
        <member name="M:Y_.CalendarBase.syncUI">
            <summary>
            syncUI implementation
            Update the scroll position, based on the current value of scrollY
            </summary>
        </member>
        <member name="P:Y_.CalendarBase.CALENDAR_STRINGS">
            <summary>
            The CSS classnames for the calendar templates.
            </summary>
        </member>
        <member name="P:Y_.CalendarBase.customRenderer">
            <summary>
            An object of the form {rules:Object, filterFunction:Function},
            providing  set of rules and a custom rendering function for
            customizing specific calendar cells.
            </summary>
        </member>
        <member name="P:Y_.CalendarBase.date">
            <summary>
            The date corresponding to the current calendar view. Always
            normalized to the first of the month that contains the date
            at assignment time. Used as the first date visible in the
            calendar.
            </summary>
        </member>
        <member name="P:Y_.CalendarBase.selectedDates">
            <summary>
            A read-only attribute providing a list of currently selected dates.
            </summary>
        </member>
        <member name="P:Y_.CalendarBase.strings">
            <summary>
            Strings and properties derived from the internationalization packages
            for the calendar.
            </summary>
        </member>
        <member name="M:Y_.Calendar._bindCalendarEvents">
            <summary>
            Overrides the _bindCalendarEvents placeholder in CalendarBase
            and binds calendar events during bindUI stage.
            </summary>
        </member>
        <member name="M:Y_.Calendar._blurCalendarGrid">
            <summary>
            Handler for loss of focus of calendar grid
            </summary>
        </member>
        <member name="M:Y_.Calendar._focusCalendarCell">
            <summary>
            Handler for gain of focus of calendar cell
            </summary>
        </member>
        <member name="M:Y_.Calendar._focusCalendarGrid">
            <summary>
            Handler for gain of focus of calendar grid
            </summary>
        </member>
        <member name="M:Y_.Calendar._getGridNumber(Y_.Node)">
            <summary>
            Returns the grid number for a specific calendar grid (for multi-grid templates)
            </summary>
        </member>
        <member name="M:Y_.Calendar._highlightDateNode(Y_.DataType_.Date)">
            <summary>
            Highlights a specific date node with keyboard highlight class
            </summary>
        </member>
        <member name="M:Y_.Calendar._keydownCalendar">
            <summary>
            Handler for keyboard press on a calendar grid
            </summary>
        </member>
        <member name="M:Y_.Calendar._unhighlightCurrentDateNode">
            <summary>
            Unhighlights a specific date node currently highlighted with keyboard highlight class
            </summary>
        </member>
        <member name="M:Y_.Calendar.addMonth">
            <summary>
            Adds one month to the current calendar view.
            </summary>
        </member>
        <member name="M:Y_.Calendar.addYear">
            <summary>
            Adds one year to the current calendar view.
            </summary>
        </member>
        <member name="M:Y_.Calendar.initializer">
            <summary>
            Designated initializer. Activates the navigation plugin for the calendar.
            </summary>
        </member>
        <member name="M:Y_.Calendar.subtractMonth">
            <summary>
            Subtracts one month from the current calendar view.
            </summary>
        </member>
        <member name="M:Y_.Calendar.subtractYear">
            <summary>
            Subtracts one year from the current calendar view.
            </summary>
        </member>
        <member name="M:Y_.Calendar.syncUI">
            <summary>
            syncUI implementation
            Update the scroll position, based on the current value of scrollY
            </summary>
        </member>
        <member name="P:Y_.Calendar.date">
            <summary>
            The date corresponding to the current calendar view. Always
            normalized to the first of the month that contains the date
            at assignment time. Used as the first date visible in the
            calendar.
            </summary>
        </member>
        <member name="P:Y_.Calendar.maximumDate">
            <summary>
            The maximum date that can be displayed by the calendar. The calendar will not
            allow dates later than this one to be set, and will reset any later date to
            this date. Should be `null` if no maximum date is needed.
            </summary>
        </member>
        <member name="P:Y_.Calendar.minimumDate">
            <summary>
            The minimum date that can be displayed by the calendar. The calendar will not
            allow dates earlier than this one to be set, and will reset any earlier date to
            this date. Should be `null` if no minimum date is needed.
            </summary>
        </member>
        <member name="T:Y_.App_.Transitions">
            <summary>
            Provides view transitions for `Y.App` in browsers which support native CSS3
            transitions.
            View transitions provide an nice way to move from one "page" to the next that is
            both pleasant to the user and helps to communicate a hierarchy between sections
            of an application.
            When this module is used, it will automatically mix itself in to `Y.App` and
            transition between `activeView` changes using the following effects:
            * **`fade`**: Cross-fades between the old an new active views.
            * **`slideLeft`**: The old and new active views are positioned next to each
            other and both slide to the left.
            * **`slideRight`**: The old and new active views are positioned next to each
            other and both slide to the right.
            **Note:** Transitions are an opt-in feature and are enabled via an app's
            `transitions` attribute.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions._setTransitions(System.Object)">
            <summary>
            Setter for `transitions` attribute.
            When specified as `true`, the defaults will be use as specified by the
            `transitions` prototype property.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object,System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object,System.Object,System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Transitions.showView(System.Object,System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="P:Y_.App_.Transitions.CLASS_NAMES">
            <summary>
            CSS classes used by `App.Transitions`.
            When an app is transitioning between `activeView`s, its `container` node will
            have the "yui3-app-transitioning" CSS class added.
            </summary>
        </member>
        <member name="P:Y_.App_.Transitions.FX">
            <summary>
            Collect of transitions -> fx.
            A transition (e.g. "fade") is a simple name given to a configuration of fx to
            apply, consisting of `viewIn` and `viewOut` properties who's values are names of
            fx registered on `Y.Transition.fx`.
            By default transitions: `fade`, `slideLeft`, and `slideRight` have fx defined.
            </summary>
        </member>
        <member name="P:Y_.App_.Transitions.transitions">
            <summary>
            Default transitions to use when the `activeView` changes.
            The following are types of changes for which transitions can be defined that
            correspond to the relationship between the new and previous `activeView`:
            * `navigate`: The default transition to use when changing the `activeView`
            of the application.
            * `toChild`: The transition to use when the new `activeView` is configured
            as a child of the previously active view via its `parent` property as
            defined in this app's `views`.
            * `toParent`: The transition to use when the new `activeView` is
            configured as the `parent` of the previously active view as defined in
            this app's `views`.
            **Note:** Transitions are an opt-in feature and will only be used in
            browsers which support native CSS3 transitions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.WidgetParent" -->
        <member name="M:Y_.WidgetParent._add(System.Object,Y_.Array,Y_.DataType_.Number)">
            <summary>
            Adds a Widget as a child.  If the specified Widget already
            has a parent it will be removed from its current parent before
            being added as a child.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._afterActiveDescendantChange(Y_.EventFacade)">
            <summary>
            Attribute change listener for the <code>activeDescendant</code>
            attribute, responsible for setting the value of the
            parent's <code>activeDescendant</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._afterDestroyChild(Y_.EventFacade)">
            <summary>
            Destroy event listener for each child Widget, responsible for removing
            the destroyed child Widget from the parent's internal array of children
            (_items property).
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._afterParentSelectedChange(Y_.EventFacade)">
            <summary>
            Attribute change listener for the <code>selected</code>
            attribute, responsible for syncing the selected state of all children to
            match that of their parent Widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._afterSelectionChange(Y_.EventFacade)">
            <summary>
            Attribute change listener for the <code>selection</code>
            attribute, responsible for setting the value of the
            parent's <code>selected</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._bindUIParent">
            <summary>
            Sets up DOM and CustomEvent listeners for the parent widget.
            <p>
            This method in invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._createChild(System.Object)">
            <summary>
            Creates an instance of a child Widget using the specified configuration.
            By default Widget instances will be created of the type specified
            by the <code>defaultChildType</code> attribute.  Types can be explicitly
            defined via the <code>childType</code> property of the configuration object
            literal. The use of the <code>type</code> property has been deprecated, but
            will still be used as a fallback, if <code>childType</code> is not defined,
            for backwards compatibility.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._defAddChildFn(Y_.EventFacade,Y_.Widget,Y_.DataType_.Number)">
            <summary>
            Default addChild handler
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._defRemoveChildFn(Y_.EventFacade,Y_.Widget,Y_.DataType_.Number)">
            <summary>
            Default removeChild handler
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._destroyChildren">
            <summary>
            Destroys all child Widgets for the parent.
            <p>
            This method is invoked before the destructor is invoked for the Widget
            class using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._renderChildren">
            <summary>
            Renders all child Widgets for the parent.
            <p>
            This method in invoked after renderUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._setSelection(System.Object)">
            <summary>
            Default setter for <code>selection</code> attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._uiAddChild(Y_.Widget,System.Object)">
            <summary>
            Updates the UI in response to a child being added.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._uiRemoveChild(Y_.Widget)">
            <summary>
            Updates the UI in response to a child being removed.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._updateActiveDescendant(Y_.EventFacade)">
            <summary>
            Attribute change listener for the <code>focused</code>
            attribute of child Widgets, responsible for setting the value of the
            parent's <code>activeDescendant</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent._updateSelection(Y_.EventFacade)">
            <summary>
            Attribute change listener for the <code>selected</code>
            attribute of child Widgets, responsible for setting the value of the
            parent's <code>selection</code> attribute.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.add(System.Object,Y_.Array,Y_.DataType_.Number)">
            <summary>
            Adds a Widget as a child.  If the specified Widget already
            has a parent it will be removed from its current parent before
            being added as a child.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.deselectAll">
            <summary>
            Deselects all children.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.destructor">
            <summary>
            The destructor implementation for Parent widgets. Destroys all children.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.remove(Y_.DataType_.Number)">
            <summary>
            Removes the Widget from its parent.  Optionally, can remove
            a child by specifying its index.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.removeAll">
            <summary>
            Removes all of the children from the Widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.selectAll">
            <summary>
            Selects all children.
            </summary>
        </member>
        <member name="M:Y_.WidgetParent.selectChild(Y_.DataType_.Number)">
            <summary>
            Selects the child at the given index (zero-based).
            </summary>
        </member>
        <member name="P:Y_.WidgetParent._childrenContainer">
            <summary>
            <p>By default WidgetParent will render it's children to the parent's content box.</p>
            <p>If the children need to be rendered somewhere else, the _childrenContainer property
            can be set to the Node which the children should be rendered to. This property should be
            set before the _renderChildren method is invoked, ideally in your renderUI method,
            as soon as you create the element to be rendered to.</p>
            </summary>
        </member>
        <member name="P:Y_.WidgetParent.activeDescendant">
            <summary>
            Returns the Widget's currently focused descendant Widget.
            </summary>
        </member>
        <member name="T:Y_.VMLPath">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Path.html">`Path`</a> class.
            `VMLPath` is not intended to be used directly. Instead, use the <a href="Path.html">`Path`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Path.html">`Path`</a> class will point to the `VMLPath` class.
            </summary>
        </member>
        <member name="T:Y_.SWFDetect">
            <summary>
            month range of dates, rendered as a grid with date and
            weekday labels.
            </summary>
        </member>
        <member name="M:Y_.SWFDetect.getFlashVersion">
            <summary>
            Returns the version of either the Flash Player plugin (in Mozilla/WebKit/Opera browsers),
            or the Flash Player ActiveX control (in IE), as a String of the form "MM.mm.rr", where
            MM is the major version, mm is the minor version, and rr is the revision.
            </summary>
        </member>
        <member name="M:Y_.SWFDetect.isFlashVersionAtLeast(System.Object,System.Object,System.Object)">
            <summary>
            Checks whether the version of the Flash player installed on the user's machine is greater
            than or equal to the one specified. If it is, this method returns true; it is false otherwise.
            </summary>
        </member>
        <member name="T:Y_.SVGGraphic">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Graphic.html">`Graphic`</a> class.
            `SVGGraphic` is not intended to be used directly. Instead, use the <a href="Graphic.html">`Graphic`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Graphic.html">`Graphic`</a>
            class will point to the `SVGGraphic` class.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.addShape(System.Object)">
            <summary>
            Generates a shape instance by type.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.addToRedrawQueue(Y_.SVGShape)">
            <summary>
            Adds a shape to the redraw queue and calculates the contentBounds. Used internally
            by `Shape` instances.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.batch(SharpKit.JavaScript.JsAction)">
            <summary>
            Allows for creating multiple shapes in order to batch appending and redraw operations.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.clear">
            <summary>
            Clears the graphics object.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.destroy">
            <summary>
            Removes all nodes.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.getGradientNode(System.Object,System.Object)">
            <summary>
            Returns a reference to a gradient definition based on an id and type.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.getShapeById(System.Object)">
            <summary>
            Returns a shape based on the id of its dom node.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.getXY">
            <summary>
            Gets the current position of the graphic instance in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.removeAllShapes">
            <summary>
            Removes all shape instances from the dom.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.removeShape(System.Object)">
            <summary>
            Removes a shape instance from from the graphic instance.
            </summary>
        </member>
        <member name="M:Y_.SVGGraphic.render(System.Object)">
            <summary>
            Adds the graphics node to the dom.
            </summary>
        </member>
        <member name="T:Y_.StackedMarkerSeries">
            <summary>
            StackedMarkerSeries plots markers with different series stacked along the value axis to indicate each
            series' contribution to a cumulative total.
            </summary>
        </member>
        <member name="T:Y_.ShapeGroup">
            <summary>
            Abstract class for creating groups of shapes with the same styles and dimensions.
            </summary>
        </member>
        <member name="T:Y_.RecordsetIndexer">
            <summary>
            Plugin that provides the ability to store multiple custom hash tables referencing records in the recordset.
            This utility does not support any collision handling. New hash table entries with a used key overwrite older ones.
            </summary>
        </member>
        <member name="M:Y_.RecordsetIndexer.createTable(System.Object)">
            <summary>
            Creates a new hash table.
            </summary>
        </member>
        <member name="M:Y_.RecordsetIndexer.getTable(System.Object)">
            <summary>
            Get a hash table that hashes records by a given key.
            </summary>
        </member>
        <member name="P:Y_.RecordsetIndexer.hashTables">
            <summary>
            Collection of all the hashTables created by the plugin.
            The individual tables can be accessed by the key they are hashing against.
            </summary>
        </member>
        <member name="T:Y_.Profiler">
            <summary>
            Profiles functions in JavaScript.
            </summary>
        </member>
        <member name="M:Y_.Profiler.clear(System.Object)">
            <summary>
            Removes all report data from the profiler.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getAverage(System.Object)">
            <summary>
            Returns the average amount of time (in milliseconds) that the function
            with the given name takes to execute.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getCallCount(System.Object)">
            <summary>
            Returns the number of times that the given function has been called.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getFullReport">
            <summary>
            Returns an object containing profiling data for all of the functions
            that were profiled. The object has an entry for each function and
            returns all information (min, max, average, calls, etc.) for each
            function.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getFunctionReport">
            <summary>
            Returns an object containing profiling data for a single function.
            The object has an entry for min, max, avg, calls, and points).
            </summary>
        </member>
        <member name="M:Y_.Profiler.getMax(System.Object)">
            <summary>
            Returns the maximum amount of time (in milliseconds) that the function
            with the given name takes to execute.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getMin(System.Object)">
            <summary>
            Returns the minimum amount of time (in milliseconds) that the function
            with the given name takes to execute.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getOriginal(System.Object)">
            <summary>
            Returns the uninstrumented version of a function/object.
            </summary>
        </member>
        <member name="M:Y_.Profiler.getReport">
            <summary>
            Returns an object containing profiling data for a single function.
            The object has an entry for min, max, avg, calls, and points).
            </summary>
        </member>
        <member name="M:Y_.Profiler.instrument(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Instruments a method to have profiling calls.
            </summary>
        </member>
        <member name="M:Y_.Profiler.pause(System.Object)">
            <summary>
            Pauses profiling information for a given name.
            </summary>
        </member>
        <member name="M:Y_.Profiler.registerConstructor(System.Object,System.Object)">
            <summary>
            Sets up a constructor for profiling, including all properties and methods on the prototype.
            </summary>
        </member>
        <member name="M:Y_.Profiler.registerFunction(System.Object,System.Object,System.Object)">
            <summary>
            Sets up a function for profiling. It essentially overwrites the function with one
            that has instrumentation data. This method also creates an entry for the function
            in the profile report. The original function is stored on the container object.
            </summary>
        </member>
        <member name="M:Y_.Profiler.registerObject(System.Object,System.Object,System.Object)">
            <summary>
            Sets up an object for profiling. It takes the object and looks for functions.
            When a function is found, registerMethod() is called on it. If set to recrusive
            mode, it will also setup objects found inside of this object for profiling,
            using the same methodology.
            </summary>
        </member>
        <member name="M:Y_.Profiler.start(System.Object)">
            <summary>
            Start profiling information for a given name. The name cannot be the name
            of a registered function or object. This is used to start timing for a
            particular block of code rather than instrumenting the entire function.
            </summary>
        </member>
        <member name="M:Y_.Profiler.stop(System.Object)">
            <summary>
            Stops profiling information for a given name.
            </summary>
        </member>
        <member name="M:Y_.Profiler.unregisterFunction(System.Object)">
            <summary>
            Removes a constructor function from profiling. Reverses the registerConstructor() method.
            </summary>
        </member>
        <member name="M:Y_.Profiler.unregisterObject(System.Object,System.Object)">
            <summary>
            Unregisters an object for profiling. It takes the object and looks for functions.
            When a function is found, unregisterMethod() is called on it. If set to recrusive
            mode, it will also unregister objects found inside of this object,
            using the same methodology.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Shim">
            <summary>
            Node plugin which can be used to add shim support.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Shim.destroy">
            <summary>
            Removes the shim and destroys the plugin
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Shim.sync">
            <summary>
            Updates the size of the shim to fill its container
            </summary>
        </member>
        <member name="T:Y_.plugin_.NodeMenuNav">
            <summary>
            The NodeMenuNav class is a plugin for a Node instance.  The class is used via
            the <a href="Node.html#method_plug"><code>plug</code></a> method of Node and
            should not be instantiated directly.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._afterActiveDescendantChange(System.Object,Y_.plugin_.NodeMenuNav)">
            <summary>
            "activeDescendantChange" event handler for menu's
            Focus Manager.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._cancelHideSubmenuTimer">
            <summary>
            Cancels the timer used to hide a submenu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._cancelShowSubmenuTimer">
            <summary>
            Cancels the timer used to show a submenu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._clearActiveItem">
            <summary>
            Clears the menu's active descendent.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._focusItem(Y_.Node)">
            <summary>
            Focuses the specified menuitem or menu label.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._getTopmostSubmenu(Y_.Node)">
            <summary>
            Returns the topmost submenu of a submenu hierarchy.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._hideAllSubmenus(Y_.Node)">
            <summary>
            Hides all submenus of the specified menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._hideAndFocusLabel">
            <summary>
            Hides all of the submenus of the root menu and focuses the
            label of the topmost submenu
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._hideMenu(Y_.Node,System.Object)">
            <summary>
            Hides the specified menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._initFocusManager">
            <summary>
            Initializes and updates the Focus Manager so that is is
            always managing descendants of the active menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._isRoot(Y_.Node)">
            <summary>
            Returns a boolean indicating if the specified menu is the
            root menu in the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onActiveDescendantChange(System.Object,Y_.plugin_.NodeMenuNav)">
            <summary>
            "activeDescendantChange" event handler for menu's
            Focus Manager.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onDocFocus(System.Object)">
            <summary>
            "focus" event handler for the owner document of the MenuNav.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onDocMouseDown(System.Object)">
            <summary>
            "mousedown" event handler for the owner document of
            the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onHorizontalMenuKeyDown(System.Object)">
            <summary>
            "keydown" event handler for horizontal menus.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onKeyDown(System.Object)">
            <summary>
            "keydown" event handler for the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onKeyPress(System.Object)">
            <summary>
            "keypress" event handler for the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuItemMouseOut(Y_.Node,System.Object)">
            <summary>
            "mouseout" event handler for a menuitem.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuItemMouseOver(Y_.Node,System.Object)">
            <summary>
            "mouseover" event handler for a menuitem.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuLabelMouseOut(Y_.Node,System.Object)">
            <summary>
            "mouseout" event handler for a menu label.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuLabelMouseOver(Y_.Node,System.Object)">
            <summary>
            "mouseover" event handler for a menu label.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuMouseOut(Y_.Node,System.Object)">
            <summary>
            "mouseout" event handler for a menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMenuMouseOver(Y_.Node,System.Object)">
            <summary>
            "mouseover" event handler for a menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMouseMove(System.Object)">
            <summary>
            "mousemove" event handler for the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMouseOut(System.Object)">
            <summary>
            "mouseout" event handler for the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onMouseOver(System.Object)">
            <summary>
            "mouseover" event handler for the menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._onVerticalMenuKeyDown(System.Object)">
            <summary>
            "keydown" event handler for vertical menus.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._setActiveItem(Y_.Node)">
            <summary>
            Sets the specified menuitem or menu label as the menu's
            active descendent.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._showMenu(Y_.Node)">
            <summary>
            Shows the specified menu.
            </summary>
        </member>
        <member name="M:Y_.plugin_.NodeMenuNav._toggleSubmenuDisplay(System.Object)">
            <summary>
            "mousedown," "keydown," and "click" event handler for the
            menu used to toggle the display of a submenu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._activeItem">
            <summary>
            Node instance representing the menu's active descendent:
            the menuitem or menu label the user is currently interacting with.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._activeMenu">
            <summary>
            Node instance representing the menu that is the parent of
            the menu's active descendent.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._currentMouseX">
            <summary>
            Number representing the current x coordinate of the mouse
            inside the menu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._firstItem">
            <summary>
            Node instance representing the first item (menuitem or menu
            label) in the root menu of a menu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._hideAllSubmenusTimer">
            <summary>
            Timer used to hide a all submenus.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._hideSubmenuTimer">
            <summary>
            Timer used to hide a submenu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._rootMenu">
            <summary>
            Node instance representing the root menu in the menu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav._showSubmenuTimer">
            <summary>
            Timer used to show a submenu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav.mouseOutHideDelay">
            <summary>
            Number indicating the time (in milliseconds) that should expire before a
            submenu is hidden when the user mouses out of it.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav.submenuHideDelay">
            <summary>
            Number indicating the time (in milliseconds) that should expire before a
            submenu is hidden when the user mouses out of a menu label heading in the
            direction of a submenu.
            </summary>
        </member>
        <member name="P:Y_.plugin_.NodeMenuNav.submenuShowDelay">
            <summary>
            Number indicating the time (in milliseconds) that should expire before a
            submenu is made visible when the user mouses over the menu's label.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.AutoComplete">
            <summary>
            Binds an AutoCompleteList instance to a Node instance.
            </summary>
        </member>
        <member name="T:Y_.Node">
            <summary>
            The Node class provides a wrapper for manipulating DOM Nodes.
            Node properties can be accessed via the set/get methods.
            Use `Y.one()` to retrieve Node instances.
            <strong>NOTE:</strong> Node properties are accessed using
            the <code>set</code> and <code>get</code> methods.
            </summary>
        </member>
        <member name="M:Y_.Node._hide">
            <summary>
            The implementation for hiding nodes.
            Default is to toggle the style.display property.
            </summary>
        </member>
        <member name="M:Y_.Node._ioComplete(System.Object,System.Object,Y_.Array)">
            <summary>
            The default IO complete handler.
            </summary>
        </member>
        <member name="M:Y_.Node._show">
            <summary>
            The implementation for showing nodes.
            Default is to toggle the style.display property.
            </summary>
        </member>
        <member name="M:Y_.Node.addClass(System.Object)">
            <summary>
            Adds a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.Node.addMethod(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Adds methods to the Y.Node prototype, routing through scrubVal.
            </summary>
        </member>
        <member name="M:Y_.Node.all(System.Object)">
            <summary>
            Retrieves a NodeList based on the given CSS selector.
            </summary>
        </member>
        <member name="M:Y_.Node.ancestor(System.Object,System.Object,System.Object)">
            <summary>
            Returns the nearest ancestor that passes the test applied by supplied boolean method.
            </summary>
        </member>
        <member name="M:Y_.Node.ancestors(System.Object,System.Object)">
            <summary>
            Returns the ancestors that pass the test applied by supplied boolean method.
            </summary>
        </member>
        <member name="M:Y_.Node.append(System.Object)">
            <summary>
            Inserts the content as the lastChild of the node.
            </summary>
        </member>
        <member name="M:Y_.Node.appendTo(System.Object)">
            <summary>
            Appends the node to the given node.
            </summary>
        </member>
        <member name="M:Y_.Node.blur">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.clearData(System.Object)">
            <summary>
            Clears internally stored data.
            </summary>
        </member>
        <member name="M:Y_.Node.cloneNode(System.Object)">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.compareTo(System.Object)">
            <summary>
            Compares nodes to determine if they match.
            Node instances can be compared to each other and/or HTMLElements.
            </summary>
        </member>
        <member name="M:Y_.Node.contains(System.Object)">
            <summary>
            Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Node.create(System.Object,System.Object)">
            <summary>
            Returns a new dom node using the provided markup string.
            </summary>
        </member>
        <member name="M:Y_.Node.createCaption">
            <summary>
            Passes through to DOM method.
            Only valid on TABLE elements
            </summary>
        </member>
        <member name="M:Y_.Node.DEFAULT_GETTER(System.Object)">
            <summary>
            The default getter for DOM properties
            Called with instance context (this === the Node instance)
            </summary>
        </member>
        <member name="M:Y_.Node.DEFAULT_SETTER(System.Object,System.Object)">
            <summary>
            The default setter for DOM properties
            Called with instance context (this === the Node instance)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Node.delegate(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object)" -->
        <member name="M:Y_.Node.destroy(System.Object)">
            <summary>
            Nulls internal node references, removes any plugins and event listeners
            </summary>
        </member>
        <member name="M:Y_.Node.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Applies the given function to each Node in the NodeList.
            </summary>
        </member>
        <member name="M:Y_.Node.empty">
            <summary>
            Removes and destroys all of the nodes within the node.
            </summary>
        </member>
        <member name="M:Y_.Node.focus">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.generateID">
            <summary>
            Applies a unique ID to the node if none exists
            </summary>
        </member>
        <member name="M:Y_.Node.get(System.Object)">
            <summary>
            Returns an attribute value on the Node instance.
            Unless pre-configured (via `Node.ATTRS`), get hands
            off to the underlying DOM node.  Only valid
            attributes/properties for the node will be queried.
            </summary>
        </member>
        <member name="M:Y_.Node.get(System.Object,System.Object)">
            <summary>
            Returns a single Node instance bound to the node or the
            first element matching the given selector.
            </summary>
        </member>
        <member name="M:Y_.Node.getAttribute(System.Object)">
            <summary>
            Allows getting attributes on DOM nodes, normalizing in some cases.
            This passes through to the DOM node, allowing for custom attributes.
            </summary>
        </member>
        <member name="M:Y_.Node.getAttrs(Y_.Array)">
            <summary>
            Returns an object containing the values for the requested attributes.
            </summary>
        </member>
        <member name="M:Y_.Node.getComputedStyle(System.Object)">
            <summary>
            Returns the computed value for the given style property.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.Node.getContent">
            <summary>
            Returns the node's current content (e.g. innerHTML)
            </summary>
        </member>
        <member name="M:Y_.Node.getData(System.Object)">
            <summary>
            Retrieves arbitrary data stored on a Node instance.
            If no data is associated with the Node, it will attempt to retrieve
            a value from the corresponding HTML data attribute. (e.g. node.getData('foo')
            will check node.getAttribute('data-foo')).
            </summary>
        </member>
        <member name="M:Y_.Node.getDOMNode">
            <summary>
            Returns the DOM node bound to the Node instance
            </summary>
        </member>
        <member name="M:Y_.Node.getDOMNode(System.Object)">
            <summary>
            Retrieves the DOM node bound to a Node instance
            </summary>
        </member>
        <member name="M:Y_.Node.getElementsByTagName(System.Object)">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.getHTML">
            <summary>
            Returns the node's current html content (e.g. innerHTML)
            </summary>
        </member>
        <member name="M:Y_.Node.getStyle(System.Object)">
            <summary>
            Returns the style's current value.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.Node.getX">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.Node.getXY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.Node.getY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.Node.hasAttribute(System.Object)">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.hasChildNodes">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.hasClass(System.Object)">
            <summary>
            Determines whether each node has the given className.
            </summary>
        </member>
        <member name="M:Y_.Node.hide(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Hides the node.
            If the "transition" module is loaded, hide optionally
            animates the hiding of the node using either the default
            transition effect ('fadeOut'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.importMethod(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Imports utility methods to be added as Y.Node methods.
            </summary>
        </member>
        <member name="M:Y_.Node.inDoc(System.Object)">
            <summary>
            Determines whether the node is appended to the document.
            </summary>
        </member>
        <member name="M:Y_.Node.inRegion(System.Object,System.Object,System.Object)">
            <summary>
            Determines whether or not the node is within the giving region.
            </summary>
        </member>
        <member name="M:Y_.Node.insert(System.Object,System.Object)">
            <summary>
            Inserts the content before the reference node.
            </summary>
        </member>
        <member name="M:Y_.Node.intersect(System.Object,System.Object)">
            <summary>
            Compares the intersection of the node with another node or region
            </summary>
        </member>
        <member name="M:Y_.Node.invoke(System.Object,System.Object)">
            <summary>
            Invokes a method on the Node instance
            </summary>
        </member>
        <member name="M:Y_.Node.item(Y_.DataType_.Number)">
            <summary>
            Retrieves the Node instance at the given index.
            </summary>
        </member>
        <member name="M:Y_.Node.load(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads content from the given url and replaces the Node's
            existing content with the remote content.
            </summary>
        </member>
        <member name="M:Y_.Node.next(System.Object)">
            <summary>
            Returns the next matching sibling.
            Returns the nearest element node sibling if no method provided.
            </summary>
        </member>
        <member name="M:Y_.Node.on(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribe a callback function to execute in response to a DOM event or custom
            event.
            Most DOM events are associated with a preventable default behavior such as
            link clicks navigating to a new page.  Callbacks are passed a `DOMEventFacade`
            object as their first argument (usually called `e`) that can be used to
            prevent this default behavior with `e.preventDefault()`. See the
            `DOMEventFacade` API for all available properties and methods on the object.
            If the event name passed as the first parameter is not a whitelisted DOM event,
            it will be treated as a custom event subscriptions, allowing
            `node.fire('customEventName')` later in the code.  Refer to the Event user guide
            for the full DOM event whitelist.
            By default, the `this` object in the callback will refer to the subscribed
            `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to use
            the event methods.
            </summary>
        </member>
        <member name="M:Y_.Node.on(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Subscribe a callback function to execute in response to a DOM event or custom
            event.
            Most DOM events are associated with a preventable default behavior such as
            link clicks navigating to a new page.  Callbacks are passed a `DOMEventFacade`
            object as their first argument (usually called `e`) that can be used to
            prevent this default behavior with `e.preventDefault()`. See the
            `DOMEventFacade` API for all available properties and methods on the object.
            If the event name passed as the first parameter is not a whitelisted DOM event,
            it will be treated as a custom event subscriptions, allowing
            `node.fire('customEventName')` later in the code.  Refer to the Event user guide
            for the full DOM event whitelist.
            By default, the `this` object in the callback will refer to the subscribed
            `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to use
            the event methods.
            </summary>
        </member>
        <member name="M:Y_.Node.on(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Subscribe a callback function to execute in response to a DOM event or custom
            event.
            Most DOM events are associated with a preventable default behavior such as
            link clicks navigating to a new page.  Callbacks are passed a `DOMEventFacade`
            object as their first argument (usually called `e`) that can be used to
            prevent this default behavior with `e.preventDefault()`. See the
            `DOMEventFacade` API for all available properties and methods on the object.
            If the event name passed as the first parameter is not a whitelisted DOM event,
            it will be treated as a custom event subscriptions, allowing
            `node.fire('customEventName')` later in the code.  Refer to the Event user guide
            for the full DOM event whitelist.
            By default, the `this` object in the callback will refer to the subscribed
            `Node`.
            Returning `false` from a callback is supported as an alternative to calling
            `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to use
            the event methods.
            </summary>
        </member>
        <member name="M:Y_.Node.one(System.Object)">
            <summary>
            Returns a single Node instance bound to the node or the
            first element matching the given selector. Returns null if no match found.
            <strong>Note:</strong> For chaining purposes you may want to
            use <code>Y.all</code>, which returns a NodeList when no match is found.
            </summary>
        </member>
        <member name="M:Y_.Node.plug(System.Object,System.Object)">
            <summary>
            Registers plugins to be instantiated at the class level (plugins
            which should be plugged into every instance of Node by default).
            </summary>
        </member>
        <member name="M:Y_.Node.prepend(System.Object)">
            <summary>
            Inserts the content as the firstChild of the node.
            </summary>
        </member>
        <member name="M:Y_.Node.previous(System.Object)">
            <summary>
            Returns the previous matching sibling.
            Returns the nearest element node sibling if no method provided.
            </summary>
        </member>
        <member name="M:Y_.Node.purge(System.Object,System.Object)">
            <summary>
            Removes event listeners from the node and (optionally) its subtree
            </summary>
        </member>
        <member name="M:Y_.Node.query(System.Object)">
            <summary>
            Retrieves a Node instance of nodes based on the given CSS selector.
            </summary>
        </member>
        <member name="M:Y_.Node.queryAll(System.Object)">
            <summary>
            Retrieves a nodeList based on the given CSS selector.
            </summary>
        </member>
        <member name="M:Y_.Node.remove(System.Object)">
            <summary>
            Removes the node from its parent.
            Shortcut for myNode.get('parentNode').removeChild(myNode);
            </summary>
        </member>
        <member name="M:Y_.Node.removeAttribute(System.Object)">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.removeChild(System.Object)">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.Node.replace(System.Object)">
            <summary>
            Replace the node with the other node. This is a DOM update only
            and does not change the node bound to the Node instance.
            Shortcut for myNode.get('parentNode').replaceChild(newNode, myNode);
            </summary>
        </member>
        <member name="M:Y_.Node.replaceClass(System.Object,System.Object)">
            <summary>
            Replace a class with another class for each node.
            If no oldClassName is present, the newClassName is simply added.
            </summary>
        </member>
        <member name="M:Y_.Node.reset">
            <summary>
            Passes through to DOM method.
            Only valid on FORM elements
            </summary>
        </member>
        <member name="M:Y_.Node.scrollIntoView">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.scrubVal(System.Object)">
            <summary>
            Checks Node return values and wraps DOM Nodes as Y.Node instances
            and DOM Collections / Arrays as Y.NodeList instances.
            Other return values just pass thru.  If undefined is returned (e.g. no return)
            then the Node instance is returned for chainability.
            </summary>
        </member>
        <member name="M:Y_.Node.select">
            <summary>
            Passes through to DOM method.
            </summary>
        </member>
        <member name="M:Y_.Node.set(System.Object,System.Object)">
            <summary>
            Sets an attribute on the Node instance.
            Unless pre-configured (via Node.ATTRS), set hands
            off to the underlying DOM node.  Only valid
            attributes/properties for the node will be set.
            To set custom attributes use setAttribute.
            </summary>
        </member>
        <member name="M:Y_.Node.setAttribute(System.Object,System.Object)">
            <summary>
            Allows setting attributes on DOM nodes, normalizing in some cases.
            This passes through to the DOM node, allowing for custom attributes.
            </summary>
        </member>
        <member name="M:Y_.Node.setAttrs(System.Object)">
            <summary>
            Sets multiple attributes.
            </summary>
        </member>
        <member name="M:Y_.Node.setContent(System.Object)">
            <summary>
            Replaces the node's current content with the content.
            Note that this passes to innerHTML and is not escaped.
            Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
            </summary>
        </member>
        <member name="M:Y_.Node.setData(System.Object,System.Object)">
            <summary>
            Stores arbitrary data on a Node instance.
            This is not stored with the DOM node.
            </summary>
        </member>
        <member name="M:Y_.Node.setHTML(System.Object)">
            <summary>
            Replaces the node's current html content with the content provided.
            Note that this passes to innerHTML and is not escaped.
            Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
            </summary>
        </member>
        <member name="M:Y_.Node.setStyle(System.Object,System.Object)">
            <summary>
            Sets a style property of the node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.Node.setStyles(System.Object)">
            <summary>
            Sets multiple style properties on the node.
            Use camelCase (e.g. 'backgroundColor') for multi-word properties.
            </summary>
        </member>
        <member name="M:Y_.Node.setX(System.Object)">
            <summary>
            Set the position of the node in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.Node.setXY(Y_.Array)">
            <summary>
            Set the position of the node in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.Node.setY(System.Object)">
            <summary>
            Set the position of the node in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.Node.show(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Makes the node visible.
            If the "transition" module is loaded, show optionally
            animates the showing of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.siblings(System.Object)">
            <summary>
            Returns all matching siblings.
            Returns all siblings if no method provided.
            </summary>
        </member>
        <member name="M:Y_.Node.simulate(System.Object,System.Object)">
            <summary>
            Simulates an event on the node.
            </summary>
        </member>
        <member name="M:Y_.Node.size">
            <summary>
            Returns the current number of items in the Node.
            </summary>
        </member>
        <member name="M:Y_.Node.submit">
            <summary>
            Passes through to DOM method.
            Only valid on FORM elements
            </summary>
        </member>
        <member name="M:Y_.Node.swap(Y_.Node)">
            <summary>
            Swap DOM locations with the given node.
            This does not change which DOM node each Node instance refers to.
            </summary>
        </member>
        <member name="M:Y_.Node.swapXY(System.Object)">
            <summary>
            Swaps the XY position of this node with another node.
            </summary>
        </member>
        <member name="M:Y_.Node.test(System.Object)">
            <summary>
            Test if the supplied node matches the supplied selector.
            </summary>
        </member>
        <member name="M:Y_.Node.toggleClass(System.Object,System.Object)">
            <summary>
            If the className exists on the node it is removed, if it doesn't exist it is added.
            </summary>
        </member>
        <member name="M:Y_.Node.toggleView">
            <summary>
            Displays or hides the node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.toggleView(SharpKit.JavaScript.JsAction)">
            <summary>
            Displays or hides the node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.toggleView(System.Object)">
            <summary>
            Displays or hides the node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.toggleView(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Displays or hides the node.
            If the "transition" module is loaded, toggleView optionally
            animates the toggling of the node using either the default
            transition effect ('fadeIn'), or the given named effect.
            </summary>
        </member>
        <member name="M:Y_.Node.toString">
            <summary>
            The method called when outputting Node instances as strings
            </summary>
        </member>
        <member name="M:Y_.Node.transition(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Animate one or more css properties to a given value. Requires the "transition" module.
            <pre>example usage:
            Y.one('#demo').transition({
            duration: 1, // in seconds, default is 0.5
            easing: 'ease-out', // default is 'ease'
            delay: '1', // delay start for 1 second, default is 0
            height: '10px',
            width: '10px',
            opacity: { // per property
            value: 0,
            duration: 2,
            delay: 2,
            easing: 'ease-in'
            }
            });
            </pre>
            </summary>
        </member>
        <member name="M:Y_.Node.unplug(System.Object)">
            <summary>
            Unregisters any class level plugins which have been registered by the Node
            </summary>
        </member>
        <member name="M:Y_.Node.unwrap">
            <summary>
            Removes the node's parent node.
            </summary>
        </member>
        <member name="M:Y_.Node.wrap(System.Object)">
            <summary>
            Wraps the given HTML around the node.
            </summary>
        </member>
        <member name="P:Y_.Node.ATTRS">
            <summary>
            Static collection of configuration attributes for special handling
            </summary>
        </member>
        <member name="P:Y_.Node.DOM_EVENTS">
            <summary>
            List of events that route to DOM events
            </summary>
        </member>
        <member name="P:Y_.Node.NAME">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="T:Y_.ModelList">
            <summary>
            Provides an API for managing an ordered list of Model instances.
            In addition to providing convenient `add`, `create`, `reset`, and `remove`
            methods for managing the models in the list, ModelLists are also bubble targets
            for events on the model instances they contain. This means, for example, that
            you can add several models to a list, and then subscribe to the `*:change` event
            on the list to be notified whenever any model in the list changes.
            ModelLists also maintain sort order efficiently as models are added and removed,
            based on a custom `comparator` function you may define (if no comparator is
            defined, models are sorted in insertion order).
            </summary>
        </member>
        <member name="M:Y_.ModelList._add(System.Object)">
            <summary>
            Adds the specified _model_ if it isn't already in this list.
            If the model's `clientId` or `id` matches that of a model that's already in
            the list, an `error` event will be fired and the model will not be added.
            </summary>
        </member>
        <member name="M:Y_.ModelList._add(System.Object,System.Object)">
            <summary>
            Adds the specified _model_ if it isn't already in this list.
            If the model's `clientId` or `id` matches that of a model that's already in
            the list, an `error` event will be fired and the model will not be added.
            </summary>
        </member>
        <member name="M:Y_.ModelList._afterIdChange(Y_.EventFacade)">
            <summary>
            Updates the model maps when a model's `id` attribute changes.
            </summary>
        </member>
        <member name="M:Y_.ModelList._attachList(Y_.Model)">
            <summary>
            Adds this list as a bubble target for the specified model's events.
            </summary>
        </member>
        <member name="M:Y_.ModelList._clear">
            <summary>
            Clears all internal state and the internal list of models, returning this
            list to an empty state. Automatically detaches all models in the list.
            </summary>
        </member>
        <member name="M:Y_.ModelList._compare(System.Object,System.Object)">
            <summary>
            Compares the value _a_ to the value _b_ for sorting purposes. Values are
            assumed to be the result of calling a model's `comparator()` method. You can
            override this method to implement custom sorting logic, such as a descending
            sort or multi-field sorting.
            </summary>
        </member>
        <member name="M:Y_.ModelList._defAddFn(Y_.EventFacade)">
            <summary>
            Default event handler for `add` events.
            </summary>
        </member>
        <member name="M:Y_.ModelList._defRemoveFn(Y_.EventFacade)">
            <summary>
            Default event handler for `remove` events.
            </summary>
        </member>
        <member name="M:Y_.ModelList._defResetFn(Y_.EventFacade)">
            <summary>
            Default event handler for `reset` events.
            </summary>
        </member>
        <member name="M:Y_.ModelList._detachList(Y_.Model)">
            <summary>
            Removes this list as a bubble target for the specified model's events.
            </summary>
        </member>
        <member name="M:Y_.ModelList._findIndex(Y_.Model)">
            <summary>
            Returns the index at which the given _model_ should be inserted to maintain
            the sort order of the list.
            </summary>
        </member>
        <member name="M:Y_.ModelList._remove(Y_.Model)">
            <summary>
            Removes the specified _model_ if it's in this list.
            </summary>
        </member>
        <member name="M:Y_.ModelList._remove(Y_.Model,System.Object)">
            <summary>
            Removes the specified _model_ if it's in this list.
            </summary>
        </member>
        <member name="M:Y_.ModelList._sort(Y_.Model,Y_.Model)">
            <summary>
            Array sort function used by `sort()` to re-sort the models in the list.
            </summary>
        </member>
        <member name="M:Y_.ModelList.add(System.Object)">
            <summary>
            Adds the specified model or array of models to this list. You may also pass
            another ModelList instance, in which case all the models in that list will
            be added to this one as well.
            </summary>
        </member>
        <member name="M:Y_.ModelList.add(System.Object,System.Object)">
            <summary>
            Adds the specified model or array of models to this list. You may also pass
            another ModelList instance, in which case all the models in that list will
            be added to this one as well.
            </summary>
        </member>
        <member name="M:Y_.ModelList.comparator(Y_.Model)">
            <summary>
            Define this method to provide a function that takes a model as a parameter
            and returns a value by which that model should be sorted relative to other
            models in this list.
            By default, no comparator is defined, meaning that models will not be sorted
            (they'll be stored in the order they're added).
            </summary>
        </member>
        <member name="M:Y_.ModelList.create(System.Object)">
            <summary>
            Creates or updates the specified model on the server, then adds it to this
            list if the server indicates success.
            </summary>
        </member>
        <member name="M:Y_.ModelList.create(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Creates or updates the specified model on the server, then adds it to this
            list if the server indicates success.
            </summary>
        </member>
        <member name="M:Y_.ModelList.create(System.Object,System.Object)">
            <summary>
            Creates or updates the specified model on the server, then adds it to this
            list if the server indicates success.
            </summary>
        </member>
        <member name="M:Y_.ModelList.create(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Creates or updates the specified model on the server, then adds it to this
            list if the server indicates success.
            </summary>
        </member>
        <member name="M:Y_.ModelList.filter(SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each model in this list. Returns an array
            containing the models for which the supplied function returned a truthy
            value.
            The callback function's `this` object will refer to this ModelList. Use
            `Y.bind()` to bind the `this` object to another object if desired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.filter(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each model in this list. Returns an array
            containing the models for which the supplied function returned a truthy
            value.
            The callback function's `this` object will refer to this ModelList. Use
            `Y.bind()` to bind the `this` object to another object if desired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.get(System.Object)">
            <summary>
            If _name_ refers to an attribute on this ModelList instance, returns the
            value of that attribute. Otherwise, returns an array containing the values
            of the specified attribute from each model in this list.
            </summary>
        </member>
        <member name="M:Y_.ModelList.getAsHTML(System.Object)">
            <summary>
            If _name_ refers to an attribute on this ModelList instance, returns the
            HTML-escaped value of that attribute. Otherwise, returns an array containing
            the HTML-escaped values of the specified attribute from each model in this
            list.
            The values are escaped using `Escape.html()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.getAsURL(System.Object)">
            <summary>
            If _name_ refers to an attribute on this ModelList instance, returns the
            URL-encoded value of that attribute. Otherwise, returns an array containing
            the URL-encoded values of the specified attribute from each model in this
            list.
            The values are encoded using the native `encodeURIComponent()` function.
            </summary>
        </member>
        <member name="M:Y_.ModelList.getByClientId(System.Object)">
            <summary>
            Returns the model with the specified _clientId_, or `null` if not found.
            </summary>
        </member>
        <member name="M:Y_.ModelList.getById(System.Object)">
            <summary>
            Returns the model with the specified _id_, or `null` if not found.
            Note that models aren't expected to have an id until they're saved, so if
            you're working with unsaved models, it may be safer to call
            `getByClientId()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.invoke(System.Object)">
            <summary>
            Calls the named method on every model in the list. Any arguments provided
            after _name_ will be passed on to the invoked method.
            </summary>
        </member>
        <member name="M:Y_.ModelList.invoke(System.Object,System.Object)">
            <summary>
            Calls the named method on every model in the list. Any arguments provided
            after _name_ will be passed on to the invoked method.
            </summary>
        </member>
        <member name="M:Y_.ModelList.item(Y_.DataType_.Number)">
            <summary>
            Returns the model at the specified _index_.
            </summary>
        </member>
        <member name="M:Y_.ModelList.load">
            <summary>
            Loads this list of models from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            If the load operation succeeds, a `reset` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.load(SharpKit.JavaScript.JsAction)">
            <summary>
            Loads this list of models from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            If the load operation succeeds, a `reset` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.load(System.Object)">
            <summary>
            Loads this list of models from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            If the load operation succeeds, a `reset` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.load(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads this list of models from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            If the load operation succeeds, a `reset` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.ModelList.map(SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the specified function on each model in this list and returns an
            array of the function's collected return values.
            </summary>
        </member>
        <member name="M:Y_.ModelList.map(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the specified function on each model in this list and returns an
            array of the function's collected return values.
            </summary>
        </member>
        <member name="M:Y_.ModelList.parse(System.Object)">
            <summary>
            Called to parse the _response_ when the list is loaded from the server.
            This method receives a server _response_ and is expected to return an array
            of model attribute hashes.
            The default implementation assumes that _response_ is either an array of
            attribute hashes or a JSON string that can be parsed into an array of
            attribute hashes. If _response_ is a JSON string and either `Y.JSON` or the
            native `JSON` object are available, it will be parsed automatically. If a
            parse error occurs, an `error` event will be fired and the model will not be
            updated.
            You may override this method to implement custom parsing logic if necessary.
            </summary>
        </member>
        <member name="M:Y_.ModelList.remove(System.Object)">
            <summary>
            Removes the specified model or array of models from this list. You may also
            pass another ModelList instance to remove all the models that are in both
            that instance and this instance.
            </summary>
        </member>
        <member name="M:Y_.ModelList.remove(System.Object,System.Object)">
            <summary>
            Removes the specified model or array of models from this list. You may also
            pass another ModelList instance to remove all the models that are in both
            that instance and this instance.
            </summary>
        </member>
        <member name="M:Y_.ModelList.reset">
            <summary>
            Completely replaces all models in the list with those specified, and fires a
            single `reset` event.
            Use `reset` when you want to add or remove a large number of items at once
            with less overhead, and without firing `add` or `remove` events for each
            one.
            </summary>
        </member>
        <member name="M:Y_.ModelList.reset(System.Object)">
            <summary>
            Completely replaces all models in the list with those specified, and fires a
            single `reset` event.
            Use `reset` when you want to add or remove a large number of items at once
            with less overhead, and without firing `add` or `remove` events for each
            one.
            </summary>
        </member>
        <member name="M:Y_.ModelList.reset(System.Object,System.Object)">
            <summary>
            Completely replaces all models in the list with those specified, and fires a
            single `reset` event.
            Use `reset` when you want to add or remove a large number of items at once
            with less overhead, and without firing `add` or `remove` events for each
            one.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sort">
            <summary>
            Forcibly re-sorts the list.
            Usually it shouldn't be necessary to call this method since the list
            maintains its sort order when items are added and removed, but if you change
            the `comparator` function after items are already in the list, you'll need
            to re-sort.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sort(System.Object)">
            <summary>
            Forcibly re-sorts the list.
            Usually it shouldn't be necessary to call this method since the list
            maintains its sort order when items are added and removed, but if you change
            the `comparator` function after items are already in the list, you'll need
            to re-sort.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sync(System.Object)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            list. The default method just calls the callback without actually doing
            anything.
            This method is called internally by `load()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sync(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            list. The default method just calls the callback without actually doing
            anything.
            This method is called internally by `load()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sync(System.Object,System.Object)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            list. The default method just calls the callback without actually doing
            anything.
            This method is called internally by `load()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.sync(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            list. The default method just calls the callback without actually doing
            anything.
            This method is called internally by `load()`.
            </summary>
        </member>
        <member name="M:Y_.ModelList.toArray">
            <summary>
            Returns an array containing the models in this list.
            </summary>
        </member>
        <member name="M:Y_.ModelList.toJSON">
            <summary>
            Returns an array containing attribute hashes for each model in this list,
            suitable for being passed to `Y.JSON.stringify()`.
            Under the hood, this method calls `toJSON()` on each model in the list and
            pushes the results into an array.
            </summary>
        </member>
        <member name="T:Y_.DataType_.Date">
            <summary>
            DataType.Date provides a set of utility functions to operate against Date objects.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.addDays(Y_.DataType_.Date,Y_.DataType_.Number)">
            <summary>
            Adds a specified number of days to the given date.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.addMonths(Y_.DataType_.Date,Y_.DataType_.Number)">
            <summary>
            Adds a specified number of months to the given date.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.addYears(Y_.DataType_.Date,Y_.DataType_.Number)">
            <summary>
            Adds a specified number of years to the given date.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.areEqual(Y_.DataType_.Date,Y_.DataType_.Date)">
            <summary>
            Checks whether two dates correspond to the same date and time.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.daysInMonth(Y_.DataType_.Date)">
            <summary>
            Takes a native JavaScript Date and returns the number of days
            in the month that the given date belongs to.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.format(Y_.DataType_.Date,System.Object)">
            <summary>
            Takes a native JavaScript Date and formats it as a string for display to user.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.isGreater(Y_.DataType_.Date,Y_.DataType_.Date)">
            <summary>
            Checks whether the first date comes later than the second.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.isGreaterOrEqual(Y_.DataType_.Date,Y_.DataType_.Date)">
            <summary>
            Checks whether the first date comes later than or is the same as
            the second.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.isInRange(Y_.DataType_.Date,Y_.DataType_.Date,Y_.DataType_.Date)">
            <summary>
            Checks whether the date is between two other given dates.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.isValidDate(Y_.DataType_.Date)">
            <summary>
            Checks whether a native JavaScript Date contains a valid value.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.listOfDatesInMonth(Y_.DataType_.Date)">
            <summary>
            Lists all dates in a given month.
            </summary>
        </member>
        <member name="M:Y_.DataType_.Date.parse(System.Object)">
            <summary>
            Converts data to type Date.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataTable_.ColumnWidths" -->
        <member name="T:Y_.DataSourceJSONSchema">
            <summary>
            Adds schema-parsing to the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSourceJSONSchema._beforeDefDataFn(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            Parses raw data into a normalized response. To accommodate XHR responses,
            will first look for data in data.responseText. Otherwise will just work
            with data.
            </summary>
        </member>
        <member name="T:Y_.CurveUtil">
            <summary>
            Utility class used for calculating curve points.
            </summary>
        </member>
        <member name="M:Y_.CurveUtil.getCurveControlPoints(Y_.Array,Y_.Array)">
            <summary>
            Creates an array of start, end and control points for splines.
            </summary>
        </member>
        <member name="T:Y_.CanvasShape">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Shape.html">`Shape`</a> class.
            `CanvasShape` is not intended to be used directly. Instead, use the <a href="Shape.html">`Shape`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Shape.html">`Shape`</a>
            class will point to the `CanvasShape` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.addClass(System.Object)">
            <summary>
            Add a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.compareTo(System.Object)">
            <summary>
            Compares nodes to determine if they match.
            Node instances can be compared to each other and/or HTMLElements.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.contains(System.Object)">
            <summary>
            Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.destroy">
            <summary>
            Destroys the shape instance.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.getBounds">
            <summary>
            Returns the bounds for a shape.
            Calculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.
            The calculated bounding box is used by the graphic instance to calculate its viewBox.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.getXY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.init">
            <summary>
            Init method, invoked during construction.
            Calls `initializer` method.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.rotate(Y_.DataType_.Number)">
            <summary>
            Rotates the shape clockwise around it transformOrigin.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.scale(Y_.DataType_.Number)">
            <summary>
            Specifies a 2d scaling operation.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.setXY(Y_.Array)">
            <summary>
            Set the position of the shape in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.skew(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis and y-axis.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.skewX(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.skewY(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the y-axis.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.test(System.Object)">
            <summary>
            Test if the supplied node matches the supplied selector.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.translate(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Specifies a 2d translation.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.translateX(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the x-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="M:Y_.CanvasShape.translateY(Y_.DataType_.Number)">
            <summary>
            Performs a translate on the y-coordinate. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="T:Y_.Cache">
            <summary>
            Base class for the YUI Cache utility.
            </summary>
        </member>
        <member name="M:Y_.Cache._defAddFn(System.Object)">
            <summary>
            Adds entry to cache.
            </summary>
        </member>
        <member name="M:Y_.Cache._defFlushFn(System.Object)">
            <summary>
            Flushes cache.
            </summary>
        </member>
        <member name="M:Y_.Cache._getEntries">
            <summary>
            Gets all entries.
            </summary>
        </member>
        <member name="M:Y_.Cache._getSize">
            <summary>
            Gets size.
            </summary>
        </member>
        <member name="M:Y_.Cache._isMatch(System.Object,System.Object)">
            <summary>
            Default overridable method compares current request with given cache entry.
            Returns true if current request matches the cached request, otherwise
            false. Implementers should override this method to customize the
            cache-matching algorithm.
            </summary>
        </member>
        <member name="M:Y_.Cache._position(System.Object)">
            <summary>
            Returns position of a request in the entries array, otherwise null.
            </summary>
        </member>
        <member name="M:Y_.Cache._setMax">
            <summary>
            Sets max.
            </summary>
        </member>
        <member name="M:Y_.Cache.add(System.Object,System.Object)">
            <summary>
            Adds a new entry to the cache of the format
            {request:request, response:response, cached:cached, expires:expires}.
            If cache is full, evicts the stalest entry before adding the new one.
            </summary>
        </member>
        <member name="M:Y_.Cache.flush">
            <summary>
            Flushes cache.
            </summary>
        </member>
        <member name="M:Y_.Cache.retrieve(System.Object)">
            <summary>
            Retrieves cached object for given request, if available, and refreshes
            entry in the cache. Returns null if there is no cache match.
            </summary>
        </member>
        <member name="P:Y_.Cache.entries">
            <summary>
            Cached entries.
            </summary>
        </member>
        <member name="P:Y_.Cache.max">
            <summary>
            Maximum number of entries the Cache can hold.
            Set to 0 to turn off caching.
            </summary>
        </member>
        <member name="P:Y_.Cache.size">
            <summary>
            Number of entries currently cached.
            </summary>
        </member>
        <member name="T:Y_.View_.NodeMap">
            <summary>
            View extension that adds a static `getByNode()` method that returns the nearest
            View instance associated with the given Node (similar to Widget's `getByNode()`
            method).
            Note that it's important to call `destroy()` on a View instance using this
            extension when you plan to stop using it. This ensures that all internal
            references to that View are cleared to prevent memory leaks.
            </summary>
        </member>
        <member name="M:Y_.View_.NodeMap.getByNode(System.Object)">
            <summary>
            Returns the nearest View instance associated with the given Node. The Node may
            be a View container or any child of a View container.
            Note that only instances of Views that have the Y.View.NodeMap extension mixed
            in will be returned. The base View class doesn't provide this functionality by
            default due to the additional memory management overhead involved in maintaining
            a mapping of Nodes to View instances.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ResizeConstrained">
            <summary>
            A Resize plugin that will attempt to constrain the resize node to the boundaries.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._checkConstrain(System.Object,System.Object,System.Object)">
            <summary>
            Helper method to update the current values on
            <a href="Resize.html#property_info">info</a> to respect the
            constrain node.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._checkHeight">
            <summary>
            Update the current values on <a href="Resize.html#property_info">info</a>
            to respect the maxHeight and minHeight.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._checkRatio">
            <summary>
            Update the current values on <a href="Resize.html#property_info">info</a>
            calculating the correct ratio for the other values.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._checkRegion">
            <summary>
            Check whether the resizable node is inside the constrain region.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._checkWidth">
            <summary>
            Update the current values on <a href="Resize.html#property_info">info</a>
            to respect the maxWidth and minWidth.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeConstrained._getConstrainRegion">
            <summary>
            Get the constrain region based on the <code>constrain</code>
            attribute.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ResizeConstrained.constrainSurrounding">
            <summary>
            Stores the <code>constrain</code>
            surrounding information retrieved from
            <a href="Resize.html#method__getBoxSurroundingInfo">_getBoxSurroundingInfo</a>.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ResizeConstrained.maxHeight">
            <summary>
            The maximum height of the element
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ResizeConstrained.maxWidth">
            <summary>
            The maximum width of the element
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ResizeConstrained.minHeight">
            <summary>
            The minimum height of the element
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ResizeConstrained.minWidth">
            <summary>
            The minimum width of the element
            </summary>
        </member>
        <member name="T:Y_.Plugin_.NodeFX">
            <summary>
            Binds an Anim instance to a Node instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Parallel" -->
        <member name="M:Y_.Parallel.add(SharpKit.JavaScript.JsAction)">
            <summary>
            Add a callback to the stack
            </summary>
        </member>
        <member name="M:Y_.Parallel.done(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            The method to call when all the items in the stack are complete.
            </summary>
        </member>
        <member name="M:Y_.Parallel.test">
            <summary>
            Test to see if all registered items in the stack have completed, if so call the callback to `done`
            </summary>
        </member>
        <member name="P:Y_.Parallel.finished">
            <summary>
            The number of stacked callbacks executed
            </summary>
        </member>
        <member name="P:Y_.Parallel.results">
            <summary>
            An Array of results from all the callbacks in the stack
            </summary>
        </member>
        <member name="P:Y_.Parallel.total">
            <summary>
            The total items in the stack
            </summary>
        </member>
        <member name="T:Y_.MarkerSeries">
            <summary>
            The MarkerSeries class renders quantitative data by plotting relevant data points
            on a graph.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.MarkerSeries.styles" -->
        <member name="T:Y_.EventFacade">
            <summary>
            Wraps and protects a custom event for use when emitFacade is set to true.
            Requires the event-custom-complex module
            </summary>
        </member>
        <member name="M:Y_.EventFacade.halt(System.Object)">
            <summary>
            Stops the event propagation and prevents the default
            event behavior.
            </summary>
        </member>
        <member name="M:Y_.EventFacade.preventDefault">
            <summary>
            Prevents the event's default behavior
            </summary>
        </member>
        <member name="M:Y_.EventFacade.stopImmediatePropagation">
            <summary>
            Stops the propagation to the next bubble target and
            prevents any additional listeners from being exectued
            on the current target.
            </summary>
        </member>
        <member name="M:Y_.EventFacade.stopPropagation">
            <summary>
            Stops the propagation to the next bubble target
            </summary>
        </member>
        <member name="P:Y_.EventFacade.currentTarget">
            <summary>
            Node reference for the element that the listener was attached to.
            </summary>
        </member>
        <member name="P:Y_.EventFacade.details">
            <summary>
            The arguments passed to fire
            </summary>
        </member>
        <member name="P:Y_.EventFacade.relatedTarget">
            <summary>
            Node reference to the relatedTarget
            </summary>
        </member>
        <member name="P:Y_.EventFacade.target">
            <summary>
            Node reference for the targeted eventtarget
            </summary>
        </member>
        <member name="P:Y_.EventFacade.type">
            <summary>
            The event type, this can be overridden by the fire() payload
            </summary>
        </member>
        <member name="T:Y_.DD_.Scroll">
            <summary>
            Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.
            This class should not be called on it's own, it's designed to be a plugin.
            </summary>
        </member>
        <member name="M:Y_.DD_.Scroll.align">
            <summary>
            Called from the drag:align event to determine if we need to scroll.
            </summary>
        </member>
        <member name="M:Y_.DD_.Scroll.end">
            <summary>
            Called from the drag:end event
            </summary>
        </member>
        <member name="M:Y_.DD_.Scroll.start">
            <summary>
            Called from the drag:start event
            </summary>
        </member>
        <member name="P:Y_.DD_.Scroll.buffer">
            <summary>
            The number of pixels from the edge of the screen to turn on scrolling. Default: 30
            </summary>
        </member>
        <member name="P:Y_.DD_.Scroll.host">
            <summary>
            The host we are plugged into.
            </summary>
        </member>
        <member name="P:Y_.DD_.Scroll.parentScroll">
            <summary>
            Internal config option to hold the node that we are scrolling. Should not be set by the developer.
            </summary>
        </member>
        <member name="P:Y_.DD_.Scroll.scrollDelay">
            <summary>
            The number of milliseconds delay to pass to the auto scroller. Default: 235
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataTable_.HeaderView" -->
        <member name="M:Y_.DataTable_.HeaderView._afterColumnsChange(Y_.EventFacade)">
            <summary>
            Handles changes in the source's columns attribute.  Redraws the headers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.HeaderView._parseColumns(System.Object)" -->
        <member name="M:Y_.DataTable_.HeaderView.bindUI">
            <summary>
            Binds event subscriptions from the UI and the source (if assigned).
            </summary>
        </member>
        <member name="M:Y_.DataTable_.HeaderView.destructor">
            <summary>
            Destroys the instance.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.HeaderView.getClassName(System.Object)">
            <summary>
            Builds a CSS class name from the provided tokens.  If the instance is
            created with `cssPrefix` or `source` in the configuration, it will use this
            prefix (the `_cssPrefix` of the `source` object) as the base token.  This
            allows class instances to generate markup with class names that correspond
            to the parent class that is consuming them.
            </summary>
        </member>
        <member name="M:Y_.DataTable_.HeaderView.initializer(System.Object)">
            <summary>
            Initializes the instance. Reads the following configuration properties:
            * `columns` - (REQUIRED) The initial column information
            * `cssPrefix` - The base string for classes generated by `getClassName`
            * `source` - The object to serve as source of truth for column info
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.DataTable_.HeaderView.render" -->
        <member name="T:Y_.ButtonGroup">
            <summary>
            Creates a ButtonGroup
            </summary>
        </member>
        <member name="M:Y_.ButtonGroup.bindUI">
            <summary>
            Hooks up events for the widget
            </summary>
        </member>
        <member name="M:Y_.ButtonGroup.getButtons">
            <summary>
            Returns all buttons inside this this button group
            </summary>
        </member>
        <member name="M:Y_.ButtonGroup.getSelectedButtons">
            <summary>
            Returns all Y.Buttons instances that are selected
            </summary>
        </member>
        <member name="M:Y_.ButtonGroup.getSelectedValues">
            <summary>
            Returns the values of all Y.Button instances that are selected
            </summary>
        </member>
        <member name="M:Y_.ButtonGroup.renderUI">
            <summary>
            Creates a visual representation of the widget based on existing parameters.
            </summary>
        </member>
        <member name="T:Y_.AutoCompleteHighlighters">
            <summary>
            Provides pre-built result highlighters for AutoComplete.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.charMatch(System.Object,Y_.Array)">
            <summary>
            Highlights any individual query character that occurs anywhere in a result.
            Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.charMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `charMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.charMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent-folding version of `charMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.phraseMatch(System.Object,Y_.Array)">
            <summary>
            Highlights the complete query as a phrase anywhere within a result. Case-
            insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.phraseMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `phraseMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.phraseMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent-folding version of `phraseMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.startsWith(System.Object,Y_.Array)">
            <summary>
            Highlights the complete query as a phrase at the beginning of a result.
            Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.startsWithCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `startsWith()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.startsWithFold(System.Object,Y_.Array)">
            <summary>
            Accent-folding version of `startsWith()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.subWordMatch(System.Object,Y_.Array)">
            <summary>
            Highlights portions of results in which words from the query match either
            whole words or parts of words in the result. Non-word characters like
            whitespace and certain punctuation are ignored. Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.subWordMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `subWordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.subWordMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent-folding version of `subWordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.wordMatch(System.Object,Y_.Array)">
            <summary>
            Highlights individual words in results that are also in the query. Non-word
            characters like punctuation are ignored. Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.wordMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `wordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteHighlighters.wordMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent-folding version of `wordMatch()`.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.AsyncQueue" -->
        <member name="M:Y_.AsyncQueue._defAddFn(Y_.Event)">
            <summary>
            Default functionality for the &quot;add&quot; event.  Adds the callbacks
            in the event facade to the queue. Callbacks successfully added to the
            queue are present in the event's <code>added</code> property in the
            after phase.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._defExecFn(Y_.Event)">
            <summary>
            Default functionality for the &quot;execute&quot; event.  Executes the
            callback function
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._defPromoteFn(Y_.Event)">
            <summary>
            <p>Default functionality for the &quot;promote&quot; event.  Promotes the
            named callback to the head of the queue.</p>
            <p>The event object will contain a property &quot;callback&quot;, which
            holds the id of a callback or the callback object itself.</p>
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._defRemoveFn(Y_.Event)">
            <summary>
            <p>Default functionality for the &quot;remove&quot; event.  Removes the
            callback from the queue.</p>
            <p>The event object will contain a property &quot;callback&quot;, which
            holds the id of a callback or the callback object itself.</p>
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._defShiftFn(Y_.Event)">
            <summary>
            Default functionality for the &quot;shift&quot; event.  Shifts the
            callback stored in the event object's <em>callback</em> property from
            the queue if it is the first item.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._execute(System.Object)">
            <summary>
            Handles the execution of callbacks. Returns a boolean indicating
            whether it is appropriate to continue running.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._init">
            <summary>
            Initializes the AsyncQueue instance properties and events.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._initEvents">
            <summary>
            Initializes the instance events.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._prepare(System.Object)">
            <summary>
            Creates a wrapper function to execute the callback using the aggregated
            configuration generated by combining the static AsyncQueue.defaults, the
            instance defaults, and the specified callback settings.
            The wrapper function is decorated with the callback configuration as
            properties for runtime modification.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue._schedule(System.Object)">
            <summary>
            Schedules the execution of asynchronous callbacks.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.add(System.Object)">
            <summary>
            Add any number of callbacks to the end of the queue. Callbacks may be
            provided as functions or objects.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.getCallback(System.Object)">
            <summary>
            Retrieve a callback by its id.  Useful to modify the configuration
            while the queue is running.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.indexOf(System.Object)">
            <summary>
            Returns the current index of a callback.  Pass in either the id or
            callback function from getCallback.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.isRunning">
            <summary>
            Determines if the queue is waiting for a callback to complete execution.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.next">
            <summary>
            Returns the next callback needing execution.  If a callback is
            configured to repeat via iterations or until, it will be returned until
            the completion criteria is met.
            When the queue is empty, null is returned.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.pause">
            <summary>
            Pause the execution of the queue after the execution of the current
            callback completes.  If called from code outside of a queued callback,
            clears the timeout for the pending callback. Paused queue can be
            restarted with q.run()
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.promote(System.Object)">
            <summary>
            Promotes the named callback to the top of the queue. If a callback is
            currently executing or looping (via until or iterations), the promotion
            is scheduled to occur after the current callback has completed.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.remove(System.Object)">
            <summary>
            Removes the callback from the queue.  If the queue is active, the
            removal is scheduled to occur after the current callback has completed.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.run">
            <summary>
            Sets the queue in motion.  All queued callbacks will be executed in
            order unless pause() or stop() is called or if one of the callbacks is
            configured with autoContinue: false.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.size">
            <summary>
            Returns the number of callbacks in the queue.
            </summary>
        </member>
        <member name="M:Y_.AsyncQueue.stop">
            <summary>
            Stop and clear the queue after the current execution of the
            current callback completes.
            </summary>
        </member>
        <member name="T:Y_.ArraySort">
            <summary>
            Provides a case-insenstive comparator which can be used for array sorting.
            </summary>
        </member>
        <member name="M:Y_.ArraySort.compare(System.Object,System.Object,System.Object)">
            <summary>
            Comparator function for simple case-insensitive sorting of an array of
            strings.
            </summary>
        </member>
        <member name="T:Y_.WidgetStdMod">
            <summary>
            Widget extension, which can be used to add Standard Module support to the
            base Widget class, through the <a href="Base.html#method_build">Base.build</a>
            method.
            <p>
            The extension adds header, body and footer sections to the Widget's content box and
            provides the corresponding methods and attributes to modify the contents of these sections.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._afterBodyChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the bodyContent attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._afterFillHeightChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the fillHeight attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._afterFooterChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the footerContent attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._afterHeaderChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the headerContent attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._bindUIStdMod">
            <summary>
            Binds event listeners responsible for updating the UI state in response to
            Widget standard module related state changes.
            <p>
            This method is invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._eraseStdMod(System.Object)">
            <summary>
            Removes the DOM node for the given section.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._getStdModTemplate(System.Object)">
            <summary>
            Gets a new Node reference for the given standard module section, by cloning
            the stored template node.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._renderStdMod(System.Object)">
            <summary>
            Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._renderUIStdMod">
            <summary>
            Creates/Initializes the DOM for standard module support.
            <p>
            This method is invoked after renderUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._syncUIStdMod">
            <summary>
            Synchronizes the UI to match the Widgets standard module state.
            <p>
            This method is invoked after syncUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._uiSetFillHeight(System.Object)">
            <summary>
            Updates the rendered UI, to resize the provided section so that the standard module fills out
            the specified widget height. Note: This method does not check whether or not a height is set
            on the Widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._uiSetStdMod(System.Object,System.Object,System.Object)">
            <summary>
            Updates the rendered UI, adding the provided content (either an HTML string, or node reference),
            to the specified section. The content is either added before, after or replaces existing content
            in the section, based on the value of the <code>where</code> argument.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod._validateFillHeight(System.Object)">
            <summary>
            Default validator for the fillHeight attribute. Verifies that the
            value set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,
            or a falsey value if fillHeight is to be disabled.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod.fillHeight(Y_.Node)">
            <summary>
            Sets the height on the provided header, body or footer element to
            fill out the height of the Widget. It determines the height of the
            widgets bounding box, based on it's configured height value, and
            sets the height of the provided section to fill out any
            space remaining after the other standard module section heights
            have been accounted for.
            <p><strong>NOTE:</strong> This method is not designed to work if an explicit
            height has not been set on the Widget, since for an "auto" height Widget,
            the heights of the header/body/footer will drive the height of the Widget.</p>
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod.getStdModNode(System.Object,System.Object)">
            <summary>
            Returns the node reference for the specified `section`.
            **Note:** The DOM is not queried for the node reference. The reference
            stored by the widget instance is returned if it was set. Passing a
            truthy for `forceCreate` will create the section node if it does not
            already exist.
            </summary>
        </member>
        <member name="M:Y_.WidgetStdMod.setStdModContent(System.Object,System.Object,System.Object)">
            <summary>
            Updates the body section of the standard module with the content provided (either an HTML string, or node reference).
            <p>
            This method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,
            and insert content before or after it, by specifying the <code>where</code> argument.
            </p>
            </summary>
        </member>
        <member name="P:Y_.WidgetStdMod.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetStdMod.
            </summary>
        </member>
        <member name="P:Y_.WidgetStdMod.HTML_PARSER">
            <summary>
            The HTML parsing rules for the WidgetStdMod class.
            </summary>
        </member>
        <member name="P:Y_.WidgetStdMod.SECTION_CLASS_NAMES">
            <summary>
            Static hash of default class names used for the header,
            body and footer sections of the standard module, keyed by
            the section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)
            </summary>
        </member>
        <member name="P:Y_.WidgetStdMod.TEMPLATES">
            <summary>
            The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,
            WidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.
            e.g.
            <pre>
            {
            header : '&lt;div class="yui-widget-hd"&gt;&lt;/div&gt;',
            body : '&lt;div class="yui-widget-bd"&gt;&lt;/div&gt;',
            footer : '&lt;div class="yui-widget-ft"&gt;&lt;/div&gt;'
            }
            </pre>
            </summary>
        </member>
        <member name="T:Y_.VMLEllipse">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Ellipse.html">`Ellipse`</a> class.
            `VMLEllipse` is not intended to be used directly. Instead, use the <a href="Ellipse.html">`Ellipse`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Ellipse.html">`Ellipse`</a> class will point to the `VMLEllipse` class.
            </summary>
        </member>
        <member name="T:Y_.Test_.ObjectAssert">
            <summary>
            The ObjectAssert object provides functions to test JavaScript objects
            for a variety of cases.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.areEqual(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that an object has all of the same properties
            and property values as the other.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.hasKey(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that an object has a property with the given name.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.hasKeys(Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that an object has all properties of a reference object.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.inheritsKey(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a property with the given name exists on an object's prototype.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.inheritsKeys(Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that all properties exist on an object prototype.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.ownsKey(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that a property with the given name exists on an object instance (not on its prototype).
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.ownsKeys(Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that all properties exist on an object instance (not on its prototype).
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.ownsNoKeys(System.Object,System.Object)">
            <summary>
            Asserts that an object owns no properties.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.ownsOrInheritsKey(System.Object,System.Object,System.Object)">
            <summary>
            Asserts that an object has a property with the given name.
            </summary>
        </member>
        <member name="M:Y_.Test_.ObjectAssert.ownsOrInheritsKeys(Y_.Array,System.Object,System.Object)">
            <summary>
            Asserts that an object has all properties of a reference object.
            </summary>
        </member>
        <member name="T:Y_.StackedAxis">
            <summary>
            StackedAxis manages stacked numeric data on an axis.
            </summary>
        </member>
        <member name="T:Y_.StackedAreaSplineSeries">
            <summary>
            StackedAreaSplineSeries creates a stacked area chart with points data points connected by a curve.
            </summary>
        </member>
        <member name="T:Y_.SliderValueRange">
            <summary>
            One class of value algorithm that can be built onto SliderBase.  By default,
            values range between 0 and 100, but you can configure these on the
            built Slider class by setting the <code>min</code> and <code>max</code>
            configurations.  Set the initial value (will cause the thumb to move to the
            appropriate location on the rail) in configuration as well if appropriate.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._afterMaxChange(Y_.EventFacade)">
            <summary>
            Update position according to new max value.  If the new max results
            in the current value being out of range, the value is set to the
            closer of min or max.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._afterMinChange(Y_.EventFacade)">
            <summary>
            Update position according to new min value.  If the new min results
            in the current value being out of range, the value is set to the
            closer of min or max.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._afterValueChange(Y_.EventFacade)">
            <summary>
            Propagate change to the thumb position unless the change originated
            from the thumbMove event.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._bindValueLogic">
            <summary>
            Override of stub method in SliderBase that is called at the end of
            its bindUI stage of render().  Subscribes to internal events to
            trigger UI and related state updates.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._calculateFactor">
            <summary>
            Calculates and caches
            (range between max and min) / (rail length)
            for fast runtime calculation of position -&gt; value.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._defThumbMoveFn(Y_.EventFacade)">
            <summary>
            Dispatch the new position of the thumb into the value setting
            operations.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._initSliderValueRange">
            <summary>
            Stub for construction logic.  Override if extending this class and
            you need to set something up during the initializer phase.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._nearestValue(System.Object)">
            <summary>
            Returns the nearest valid value to the value input.  If the provided
            value is outside the min - max range, accounting for min > max
            scenarios, the nearest of either min or max is returned.  Otherwise,
            the provided value is returned.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._offsetToValue(Y_.DataType_.Number)">
            <summary>
            <p>Converts a pixel position into a value.  Calculates current
            thumb offset from the leading edge of the rail multiplied by the
            ratio of <code>(max - min) / (constraining dim)</code>.</p>
            <p>Override this if you want to use a different value mapping
            algorithm.</p>
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._setNewValue(Y_.DataType_.Number)">
            <summary>
            Restricts new values assigned to <code>value</code> attribute to be
            between the configured <code>min</code> and <code>max</code>.
            Rounds to nearest integer value.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._setPosition(Y_.DataType_.Number)">
            <summary>
            Positions the thumb in accordance with the translated value.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._setPosition(Y_.DataType_.Number,System.Object)">
            <summary>
            Positions the thumb in accordance with the translated value.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._syncThumbPosition">
            <summary>
            Move the thumb to appropriate position if necessary.  Also resets
            the cached offsets and recalculates the conversion factor to
            translate position to value.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._validateNewMax(System.Object)">
            <summary>
            Validates new values assigned to <code>max</code> attribute.  Numbers
            are acceptable.  Override this to enforce different rules.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._validateNewMin(System.Object)">
            <summary>
            Validates new values assigned to <code>min</code> attribute.  Numbers
            are acceptable.  Override this to enforce different rules.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._valueToOffset(Y_.DataType_.Number)">
            <summary>
            Converts a value into a pixel offset for use in positioning
            the thumb according to the reverse of the
            <code>_offsetToValue( xy )</code> operation.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange._verifyValue">
            <summary>
            Verifies that the current value is within the min - max range.  If
            not, value is set to either min or max, depending on which is
            closer.
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange.getValue">
            <summary>
            Returns the current value.  Override this if you want to introduce
            output formatting. Otherwise equivalent to slider.get( "value" );
            </summary>
        </member>
        <member name="M:Y_.SliderValueRange.setValue(Y_.DataType_.Number)">
            <summary>
            Updates the current value.  Override this if you want to introduce
            input value parsing or preprocessing.  Otherwise equivalent to
            slider.set( "value", v );
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorBR">
            <summary>
            Plugin for Editor to normalize BR's.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBR.NAME">
            <summary>
            editorBR
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorBR.NS">
            <summary>
            editorBR
            </summary>
        </member>
        <member name="T:Y_.Plugin_.DDProxy">
            <summary>
            Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Cache">
            <summary>
            Plugin.Cache adds pluginizability to Cache.
            </summary>
        </member>
        <member name="T:Y_.Get_.Transaction">
            <summary>
            Represents a Get transaction, which may contain requests for one or more JS or
            CSS files.
            This class should not be instantiated manually. Instances will be created and
            returned as needed by Y.Get's `css()`, `js()`, and `load()` methods.
            </summary>
        </member>
        <member name="M:Y_.Get_.Transaction.abort">
            <summary>
            Aborts this transaction.
            This will cause the transaction's `onFailure` callback to be called and
            will prevent any new script and link nodes from being added to the document,
            but any resources that have already been requested will continue loading
            (there's no safe way to prevent this, unfortunately).
            </summary>
        </member>
        <member name="M:Y_.Get_.Transaction.abort(System.Object)">
            <summary>
            Aborts this transaction.
            This will cause the transaction's `onFailure` callback to be called and
            will prevent any new script and link nodes from being added to the document,
            but any resources that have already been requested will continue loading
            (there's no safe way to prevent this, unfortunately).
            </summary>
        </member>
        <member name="M:Y_.Get_.Transaction.execute(SharpKit.JavaScript.JsAction)">
            <summary>
            Begins execting the transaction.
            There's usually no reason to call this manually, since Get will call it
            automatically when other pending transactions have finished. If you really
            want to execute your transaction before Get does, you can, but be aware that
            this transaction's scripts may end up executing before the scripts in other
            pending transactions.
            If the transaction is already executing, the specified callback (if any)
            will be queued and called after execution finishes. If the transaction has
            already finished, the callback will be called immediately (the transaction
            will not be executed again).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Get_.Transaction.purge" -->
        <member name="P:Y_.Get_.Transaction._lastId">
            <summary>
            Id of the most recent transaction.
            </summary>
        </member>
        <member name="P:Y_.Get_.Transaction.data">
            <summary>
            Arbitrary data object associated with this transaction.
            This object comes from the options passed to `Get.css()`, `Get.js()`, or
            `Get.load()`, and will be `undefined` if no data object was specified.
            </summary>
        </member>
        <member name="P:Y_.Get_.Transaction.id">
            <summary>
            Numeric id for this transaction, unique among all transactions within the same
            YUI sandbox in the current pageview.
            </summary>
        </member>
        <member name="P:Y_.Get_.Transaction.options">
            <summary>
            Options associated with this transaction.
            See `Get.options` for the full list of available options.
            </summary>
        </member>
        <member name="P:Y_.Get_.Transaction.requests">
            <summary>
            Request objects contained in this transaction. Each request object represents
            one CSS or JS URL that will be (or has been) requested and loaded into the page.
            </summary>
        </member>
        <member name="T:Y_.Get">
            <summary>
            Provides dynamic loading of remote JavaScript and CSS resources.
            </summary>
        </member>
        <member name="M:Y_.Get._autoPurge(Y_.DataType_.Number)">
            <summary>
            Triggers an automatic purge if the purge threshold has been reached.
            </summary>
        </member>
        <member name="M:Y_.Get._getEnv">
            <summary>
            Populates the `_env` property with information about the current
            environment.
            </summary>
        </member>
        <member name="M:Y_.Get.abort(Y_.Get_.Transaction)">
            <summary>
            Aborts the specified transaction.
            This will cause the transaction's `onFailure` callback to be called and
            will prevent any new script and link nodes from being added to the document,
            but any resources that have already been requested will continue loading
            (there's no safe way to prevent this, unfortunately).
            *Note:* This method is deprecated as of 3.5.0, and will be removed in a
            future version of YUI. Use the transaction-level `abort()` method instead.
            </summary>
        </member>
        <member name="M:Y_.Get.css(System.Object)">
            <summary>
            Loads one or more CSS files.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            </summary>
        </member>
        <member name="M:Y_.Get.css(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads one or more CSS files.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            </summary>
        </member>
        <member name="M:Y_.Get.css(System.Object,System.Object)">
            <summary>
            Loads one or more CSS files.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            </summary>
        </member>
        <member name="M:Y_.Get.css(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads one or more CSS files.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            </summary>
        </member>
        <member name="M:Y_.Get.js(System.Object)">
            <summary>
            Loads one or more JavaScript resources.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            Scripts will be executed in the order they're specified unless the `async`
            option is `true`, in which case they'll be loaded in parallel and executed
            in whatever order they finish loading.
            </summary>
        </member>
        <member name="M:Y_.Get.js(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads one or more JavaScript resources.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            Scripts will be executed in the order they're specified unless the `async`
            option is `true`, in which case they'll be loaded in parallel and executed
            in whatever order they finish loading.
            </summary>
        </member>
        <member name="M:Y_.Get.js(System.Object,System.Object)">
            <summary>
            Loads one or more JavaScript resources.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            Scripts will be executed in the order they're specified unless the `async`
            option is `true`, in which case they'll be loaded in parallel and executed
            in whatever order they finish loading.
            </summary>
        </member>
        <member name="M:Y_.Get.js(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Loads one or more JavaScript resources.
            The _urls_ parameter may be provided as a URL string, a request object,
            or an array of URL strings and/or request objects.
            A request object is just an object that contains a `url` property and zero
            or more options that should apply specifically to that request.
            Request-specific options take priority over transaction-level options and
            default options.
            URLs may be relative or absolute, and do not have to have the same origin
            as the current page.
            The `options` parameter may be omitted completely and a callback passed in
            its place, if desired.
            Scripts will be executed in the order they're specified unless the `async`
            option is `true`, in which case they'll be loaded in parallel and executed
            in whatever order they finish loading.
            </summary>
        </member>
        <member name="M:Y_.Get.load(System.Object,SharpKit.JavaScript.JsAction,System.Object,Y_.Get_.Transaction)">
            <summary>
            Loads one or more CSS and/or JavaScript resources in the same transaction.
            Use this method when you want to load both CSS and JavaScript in a single
            transaction and be notified when all requested URLs have finished loading,
            regardless of type.
            Behavior and options are the same as for the `css()` and `js()` methods. If
            a resource type isn't specified in per-request options or transaction-level
            options, Get will guess the file type based on the URL's extension (`.css`
            or `.js`, with or without a following query string). If the file type can't
            be guessed from the URL, a warning will be logged and Get will assume the
            URL is a JavaScript resource.
            </summary>
        </member>
        <member name="M:Y_.Get.load(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object,Y_.Get_.Transaction)">
            <summary>
            Loads one or more CSS and/or JavaScript resources in the same transaction.
            Use this method when you want to load both CSS and JavaScript in a single
            transaction and be notified when all requested URLs have finished loading,
            regardless of type.
            Behavior and options are the same as for the `css()` and `js()` methods. If
            a resource type isn't specified in per-request options or transaction-level
            options, Get will guess the file type based on the URL's extension (`.css`
            or `.js`, with or without a following query string). If the file type can't
            be guessed from the URL, a warning will be logged and Get will assume the
            URL is a JavaScript resource.
            </summary>
        </member>
        <member name="M:Y_.Get.load(System.Object,System.Object,System.Object,Y_.Get_.Transaction)">
            <summary>
            Loads one or more CSS and/or JavaScript resources in the same transaction.
            Use this method when you want to load both CSS and JavaScript in a single
            transaction and be notified when all requested URLs have finished loading,
            regardless of type.
            Behavior and options are the same as for the `css()` and `js()` methods. If
            a resource type isn't specified in per-request options or transaction-level
            options, Get will guess the file type based on the URL's extension (`.css`
            or `.js`, with or without a following query string). If the file type can't
            be guessed from the URL, a warning will be logged and Get will assume the
            URL is a JavaScript resource.
            </summary>
        </member>
        <member name="M:Y_.Get.load(System.Object,System.Object,Y_.Get_.Transaction)">
            <summary>
            Loads one or more CSS and/or JavaScript resources in the same transaction.
            Use this method when you want to load both CSS and JavaScript in a single
            transaction and be notified when all requested URLs have finished loading,
            regardless of type.
            Behavior and options are the same as for the `css()` and `js()` methods. If
            a resource type isn't specified in per-request options or transaction-level
            options, Get will guess the file type based on the URL's extension (`.css`
            or `.js`, with or without a following query string). If the file type can't
            be guessed from the URL, a warning will be logged and Get will assume the
            URL is a JavaScript resource.
            </summary>
        </member>
        <member name="M:Y_.Get.script">
            <summary>
            Alias for `js()`.
            </summary>
        </member>
        <member name="P:Y_.Get._env">
            <summary>
            Contains information about the current environment, such as what script and
            link injection features it supports.
            This object is created and populated the first time the `_getEnv()` method
            is called.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.Get._insertCache" -->
        <member name="P:Y_.Get._pending">
            <summary>
            Information about the currently pending transaction, if any.
            This is actually an object with two properties: `callback`, containing the
            optional callback passed to `css()`, `load()`, or `js()`; and `transaction`,
            containing the actual transaction instance.
            </summary>
        </member>
        <member name="P:Y_.Get.cssOptions">
            <summary>
            Default options for CSS requests. Options specified here will override
            global defaults for CSS requests.
            See the `options` property for all available options.
            </summary>
        </member>
        <member name="P:Y_.Get.jsOptions">
            <summary>
            Default options for JS requests. Options specified here will override global
            defaults for JS requests.
            See the `options` property for all available options.
            </summary>
        </member>
        <member name="P:Y_.Get.options">
            <summary>
            Default options to use for all requests.
            Note that while all available options are documented here for ease of
            discovery, some options (like callback functions) only make sense at the
            transaction level.
            Callback functions specified via the options object or the `options`
            parameter of the `css()`, `js()`, or `load()` methods will receive the
            transaction object as a parameter. See `Y.Get.Transaction` for details on
            the properties and methods available on transactions.
            </summary>
        </member>
        <member name="T:Y_.Escape">
            <summary>
            Provides utility methods for escaping strings.
            </summary>
        </member>
        <member name="M:Y_.Escape._htmlReplacer(System.Object)">
            <summary>
            Regex replacer for HTML escaping.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Escape.html(System.Object)" -->
        <member name="M:Y_.Escape.regex(System.Object)">
            <summary>
            Returns a copy of the specified string with special regular expression
            characters escaped, allowing the string to be used safely inside a regex.
            The following characters, and all whitespace characters, are escaped:
            - $ ^ * ( ) + [ ] { } | \ , . ?
            If _string_ is not already a string, it will be coerced to a string.
            </summary>
        </member>
        <member name="T:Y_.EllipseGroup">
            <summary>
            Abstract class for creating groups of diamonds with the same styles and dimensions.
            </summary>
        </member>
        <member name="T:Y_.Chart">
            <summary>
            The Chart class is the basic application used to create a chart.
            </summary>
        </member>
        <member name="T:Y_.CanvasGraphic">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the `Graphic` class.
            `CanvasGraphic` is not intended to be used directly. Instead, use the <a href="Graphic.html">`Graphic`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Graphic.html">`Graphic`</a>
            class will point to the `CanvasGraphic` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.addShape(System.Object)">
            <summary>
            Generates a shape instance by type.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.addToRedrawQueue(System.Object)">
            <summary>
            Adds a shape to the redraw queue and calculates the contentBounds. Used internally
            by `Shape` instances.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.batch(SharpKit.JavaScript.JsAction)">
            <summary>
            Allows for creating multiple shapes in order to batch appending and redraw operations.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.destroy">
            <summary>
            Removes all nodes.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.getShapeById(System.Object)">
            <summary>
            Returns a shape based on the id of its dom node.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.getXY">
            <summary>
            Gets the current position of the graphic instance in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.removeAllShapes">
            <summary>
            Removes all shape instances from the dom.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.removeShape(System.Object)">
            <summary>
            Removes a shape instance from from the graphic instance.
            </summary>
        </member>
        <member name="M:Y_.CanvasGraphic.render(System.Object)">
            <summary>
            Adds the graphics node to the dom.
            </summary>
        </member>
        <member name="T:Y_.VMLRect">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Rect.html">`Rect`</a> class.
            `VMLRect` is not intended to be used directly. Instead, use the <a href="Rect.html">`Rect`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Rect.html">`Rect`</a> class will point to the `VMLRect` class.
            </summary>
        </member>
        <member name="T:Y_.UA">
            <summary>
            YUI user agent detection.
            Do not fork for a browser if it can be avoided.  Use feature detection when
            you can.  Use the user agent as a last resort.  For all fields listed
            as @type float, UA stores a version number for the browser engine,
            0 otherwise.  This value may or may not map to the version number of
            the browser using the engine.  The value is presented as a float so
            that it can easily be used for boolean evaluation as well as for
            looking for a particular range of versions.  Because of this,
            some of the granularity of the version info may be lost.  The fields that
            are @type string default to null.  The API docs list the values that
            these fields can have.
            </summary>
        </member>
        <member name="M:Y_.UA.parseUA">
            <summary>
            Static method on `YUI.Env` for parsing a UA string.  Called at instantiation
            to populate `Y.UA`.
            </summary>
        </member>
        <member name="M:Y_.UA.parseUA(System.Object)">
            <summary>
            Static method on `YUI.Env` for parsing a UA string.  Called at instantiation
            to populate `Y.UA`.
            </summary>
        </member>
        <member name="P:Y_.UA.mobile">
            <summary>
            The mobile property will be set to a string containing any relevant
            user agent information when a modern mobile browser is detected.
            Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
            devices with the WebKit-based browser, and Opera Mini.
            </summary>
        </member>
        <member name="P:Y_.UA.os">
            <summary>
            The operating system.  Currently only detecting windows or macintosh
            </summary>
        </member>
        <member name="T:Y_.TopAxisLayout">
            <summary>
            Contains algorithms for rendering a top axis.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout._getTransformOrigin(Y_.DataType_.Number)">
            <summary>
            Returns the transformOrigin to use for an axis label based on the position of the axis
            and the rotation of the label.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout._setRotationCoords(System.Object)">
            <summary>
            Adjusts the coordinates of an axis label based on the rotation.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.drawTick(Y_.Path,System.Object,System.Object)">
            <summary>
            Draws a tick
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.getExplicitlySized">
            <summary>
            Determines the available label height when the axis width has been explicitly set.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.getLabelPoint(System.Object)">
            <summary>
            Calculates the point for a label.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.getLineStart">
            <summary>
            Calculates the coordinates for the first point on an axis.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.offsetNodeForTick(Y_.Node)">
            <summary>
            Adjusts position for inner ticks.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.positionLabel(System.Object,System.Object)">
            <summary>
            Rotate and position labels.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.positionTitle(System.Object)">
            <summary>
            Rotate and position title.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.setCalculatedSize">
            <summary>
            Assigns a height based on the size of the contents.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.setTickOffsets">
            <summary>
            Sets the length of the tick on either side of the axis line.
            </summary>
        </member>
        <member name="M:Y_.TopAxisLayout.updateMaxLabelSize(System.Object)">
            <summary>
            Updates the value for the `maxLabelSize` for use in calculating total size.
            </summary>
        </member>
        <member name="T:Y_.Test_.Wait">
            <summary>
            Represents a stoppage in test execution to wait for an amount of time before
            continuing.
            </summary>
        </member>
        <member name="P:Y_.Test_.Wait.delay">
            <summary>
            The delay before running the segment of code.
            </summary>
        </member>
        <member name="P:Y_.Test_.Wait.segment">
            <summary>
            The segment of code to run when the wait is over.
            </summary>
        </member>
        <member name="T:Y_.Test_.Mock_.Value">
            <summary>
            Creates a new value matcher.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.Any">
            <summary>
            Predefined matcher to match any value.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.Boolean">
            <summary>
            Predefined matcher to match boolean values.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.Function">
            <summary>
            Predefined matcher to match function values.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.Number">
            <summary>
            Predefined matcher to match number values.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.Object">
            <summary>
            Predefined matcher to match object values.
            </summary>
        </member>
        <member name="P:Y_.Test_.Mock_.Value.String">
            <summary>
            Predefined matcher to match string values.
            </summary>
        </member>
        <member name="T:Y_.Test_.DateAssert">
            <summary>
            The DateAssert object provides functions to test JavaScript Date objects
            for a variety of cases.
            </summary>
        </member>
        <member name="M:Y_.Test_.DateAssert.datesAreEqual(Y_.DataType_.Date,Y_.DataType_.Date,System.Object)">
            <summary>
            Asserts that a date's month, day, and year are equal to another date's.
            </summary>
        </member>
        <member name="M:Y_.Test_.DateAssert.timesAreEqual(Y_.DataType_.Date,Y_.DataType_.Date,System.Object)">
            <summary>
            Asserts that a date's hour, minutes, and seconds are equal to another date's.
            </summary>
        </member>
        <member name="T:Y_.Tab">
            <summary>
            Provides Tab instances for use with TabView
            </summary>
        </member>
        <member name="T:Y_.StackingUtil">
            <summary>
            Utility class used for creating stacked series.
            </summary>
        </member>
        <member name="T:Y_.QueryString">
            <summary>
            The QueryString module adds support for serializing JavaScript objects into
            query strings and parsing JavaScript objects from query strings format.
            </summary>
        </member>
        <member name="M:Y_.QueryString.stringify(System.Object,System.Object,System.Object)">
            <summary>
            <p>Converts an arbitrary value to a Query String representation.</p>
            <p>Objects with cyclical references will trigger an exception.</p>
            </summary>
        </member>
        <member name="T:Y_.Plugin_.SortScroll">
            <summary>
            Plugin for sortable to handle scrolling lists.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorLists">
            <summary>
            Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href="Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist">insertorderedlist</a> and <a href="Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist">insertunorderedlist</a> execCommands.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorLists.NAME">
            <summary>
            editorLists
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorLists.NONSEL">
            <summary>
            The selector query to get all non elements
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorLists.NS">
            <summary>
            lists
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorLists.REMOVE">
            <summary>
            The non element placeholder, used for positioning the cursor and filling empty items
            </summary>
        </member>
        <member name="T:Y_.LineSeries">
            <summary>
            The LineSeries class renders quantitative data on a graph by connecting relevant data points.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.LineSeries.styles" -->
        <!-- Badly formed XML comment ignored for member "T:Y_.Highlight" -->
        <member name="M:Y_.Highlight.all(System.Object,System.Object)">
            <summary>
            Highlights all occurrences in the _haystack_ string of the items in the
            _needles_ array, regardless of where they occur. The returned string will
            have all HTML characters escaped except for the highlighting markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.all(System.Object,System.Object,System.Object)">
            <summary>
            Highlights all occurrences in the _haystack_ string of the items in the
            _needles_ array, regardless of where they occur. The returned string will
            have all HTML characters escaped except for the highlighting markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.allCase(System.Object,System.Object)">
            <summary>
            Same as `all()`, but case-sensitive by default.
            </summary>
        </member>
        <member name="M:Y_.Highlight.allCase(System.Object,System.Object,System.Object)">
            <summary>
            Same as `all()`, but case-sensitive by default.
            </summary>
        </member>
        <member name="M:Y_.Highlight.allFold(System.Object,System.Object)">
            <summary>
            Accent-folding version of `all()`.
            </summary>
        </member>
        <member name="M:Y_.Highlight.allFold(System.Object,System.Object,System.Object)">
            <summary>
            Accent-folding version of `all()`.
            </summary>
        </member>
        <member name="M:Y_.Highlight.start(System.Object,System.Object)">
            <summary>
            Highlights _needles_ that occur at the start of _haystack_. The returned
            string will have all HTML characters escaped except for the highlighting
            markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.start(System.Object,System.Object,System.Object)">
            <summary>
            Highlights _needles_ that occur at the start of _haystack_. The returned
            string will have all HTML characters escaped except for the highlighting
            markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.startCase(System.Object,System.Object)">
            <summary>
            Same as `start()`, but case-sensitive by default.
            </summary>
        </member>
        <member name="M:Y_.Highlight.startFold(System.Object,System.Object)">
            <summary>
            Accent-folding version of `start()`.
            </summary>
        </member>
        <member name="M:Y_.Highlight.words(System.Object,System.Object)">
            <summary>
            Highlights complete words in the _haystack_ string that are also in the
            _needles_ array. The returned string will have all HTML characters escaped
            except for the highlighting markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.words(System.Object,System.Object,System.Object)">
            <summary>
            Highlights complete words in the _haystack_ string that are also in the
            _needles_ array. The returned string will have all HTML characters escaped
            except for the highlighting markup.
            </summary>
        </member>
        <member name="M:Y_.Highlight.wordsCase(System.Object,System.Object)">
            <summary>
            Same as `words()`, but case-sensitive by default.
            </summary>
        </member>
        <member name="M:Y_.Highlight.wordsFold(System.Object,System.Object)">
            <summary>
            Accent-folding version of `words()`.
            </summary>
        </member>
        <member name="T:Y_.Frame">
            <summary>
            Creates a wrapper around an iframe. It loads the content either from a local
            file or from script and creates a local YUI instance bound to that new window and document.
            </summary>
        </member>
        <member name="M:Y_.Frame.delegate(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            A delegate method passed to the instance's delegate method
            </summary>
        </member>
        <member name="M:Y_.Frame.focus(SharpKit.JavaScript.JsAction)">
            <summary>
            Set the focus to the iframe
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Frame.getDocType" -->
        <member name="M:Y_.Frame.getInstance">
            <summary>
            Get a reference to the internal YUI instance.
            </summary>
        </member>
        <member name="M:Y_.Frame.hide">
            <summary>
            Hide the iframe instance
            </summary>
        </member>
        <member name="M:Y_.Frame.render(System.Object)">
            <summary>
            Render the iframe into the container config option or open the window.
            </summary>
        </member>
        <member name="M:Y_.Frame.show">
            <summary>
            Show the iframe instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Frame.use" -->
        <member name="P:Y_.Frame.DOM_EVENTS">
            <summary>
            The DomEvents that the frame automatically attaches and bubbles
            </summary>
        </member>
        <member name="P:Y_.Frame.host">
            <summary>
            A reference to the Editor instance
            </summary>
        </member>
        <member name="P:Y_.Frame.node">
            <summary>
            The Node instance of the iframe.
            </summary>
        </member>
        <member name="P:Y_.Frame.THROTTLE_TIME">
            <summary>
            The throttle time for key events in IE
            </summary>
        </member>
        <member name="T:Y_.Ellipse">
            <summary>
            <p>Creates an ellipse shape with editable attributes.</p>
            <p>`Ellipse` instances can be created using the <a href="Graphic.html#method_addShape">`addShape`</a> method of the <a href="Graphic.html">`Graphic`</a> class.
            The method's `cfg` argument contains a `type` attribute. Assigning "ellipse" or `Y.Ellipse` to this attribute will create a `Ellipse` instance. Required attributes
            for instantiating a `Ellipse` are `type`, `width` and `height`. Optional attributes include:
            <ul>
            <li><a href="#attr_fill">fill</a></li>
            <li><a href="#attr_id">id</a></li>
            <li><a href="#attr_stroke">stroke</a></li>
            <li><a href="#attr_transform">transform</a></li>
            <li><a href="#attr_transformOrigin">transformOrigin</a></li>
            <li><a href="#attr_visible">visible</a></li>
            <li><a href="#attr_x">x</a></li>
            <li><a href="#attr_y">y</a></li>
            </ul>
            The below code creates an ellipse by defining the `type` attribute as "ellipse":</p>
            var myEllipse = myGraphic.addShape({
            type: "ellipse",
            width: 20,
            height: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            Below, the same ellipse is created by defining the `type` attribute with a class reference:
            var myEllipse = myGraphic.addShape({
            type: Y.Ellipse,
            width: 20,
            height: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            <p>`Ellipse` has the following implementations based on browser capability.
            <ul>
            <li><a href="SVGEllipse.html">`SVGEllipse`</a></li>
            <li><a href="VMLEllipse.html">`VMLEllipse`</a></li>
            <li><a href="CanvasEllipse.html">`CanvasEllipse`</a></li>
            </ul>
            It is not necessary to interact with these classes directly. `Ellipse` will point to the appropriate implemention.</p>
            </summary>
        </member>
        <member name="T:Y_.DataSourceCacheExtension">
            <summary>
            DataSourceCache extension binds Cache to DataSource.
            </summary>
        </member>
        <member name="M:Y_.DataSourceCacheExtension._beforeDefRequestFn(System.Object)">
            <summary>
            First look for cached response, then send request to live data.
            </summary>
        </member>
        <member name="M:Y_.DataSourceCacheExtension._beforeDefResponseFn(System.Object)">
            <summary>
            Adds data to cache before returning data.
            </summary>
        </member>
        <member name="T:Y_.CartesianChart">
            <summary>
            The CartesianChart class creates a chart with horizontal and vertical axes.
            </summary>
        </member>
        <member name="M:Y_.CartesianChart._addToAxesCollection(System.Object,Y_.Axis)">
            <summary>
            Adds axis instance to the appropriate array based on position
            </summary>
        </member>
        <member name="M:Y_.CartesianChart._getAllKeys(Y_.Array)">
            <summary>
            Returns all the keys contained in a  `dataProvider`.
            </summary>
        </member>
        <member name="M:Y_.CartesianChart._getAriaMessage(Y_.DataType_.Number)">
            <summary>
            Returns the appropriate message based on the key press.
            </summary>
        </member>
        <member name="M:Y_.CartesianChart.destructor">
            <summary>
            Destructor implementation for the CartesianChart class. Calls destroy on all axes, series and the Graph instance.
            Removes the tooltip and overlay HTML elements.
            </summary>
        </member>
        <member name="M:Y_.CartesianChart.getSeriesItems(Y_.CartesianSeries,Y_.DataType_.Number)">
            <summary>
            Returns an object literal containing a categoryItem and a valueItem for a given series index. Below is the structure of each:
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.axes">
            <summary>
            Axes to appear in the chart. This can be a key indexed hash of axis instances or object literals
            used to construct the appropriate axes.
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.categoryAxis">
            <summary>
            Reference to the category axis used by the chart.
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.horizontalGridlines">
            <summary>
            Reference to the horizontalGridlines for the chart.
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.seriesCollection">
            <summary>
            Collection of series to appear on the chart. This can be an array of Series instances or object literals
            used to construct the appropriate series.
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.styles">
            <summary>
            Style properties for the chart. Contains a key indexed hash of the following:
            <dl>
            <dt>series</dt><dd>A key indexed hash containing references to the `styles` attribute for each series in the chart.
            Specific style attributes vary depending on the series:
            <ul>
            <li><a href="AreaSeries.html#attr_styles">AreaSeries</a></li>
            <li><a href="BarSeries.html#attr_styles">BarSeries</a></li>
            <li><a href="ColumnSeries.html#attr_styles">ColumnSeries</a></li>
            <li><a href="ComboSeries.html#attr_styles">ComboSeries</a></li>
            <li><a href="LineSeries.html#attr_styles">LineSeries</a></li>
            <li><a href="MarkerSeries.html#attr_styles">MarkerSeries</a></li>
            <li><a href="SplineSeries.html#attr_styles">SplineSeries</a></li>
            </ul>
            </dd>
            <dt>axes</dt><dd>A key indexed hash containing references to the `styles` attribute for each axes in the chart. Specific
            style attributes can be found in the <a href="Axis.html#attr_styles">Axis</a> class.</dd>
            <dt>graph</dt><dd>A reference to the `styles` attribute in the chart. Specific style attributes can be found in the
            <a href="Graph.html#attr_styles">Graph</a> class.</dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.CartesianChart.verticalGridlines">
            <summary>
            Reference to the verticalGridlines for the chart.
            </summary>
        </member>
        <member name="T:Y_.AttributeLite">
            <summary>
            AttributeLite provides Attribute-like getters and setters for shape classes in the Graphics module. It provides a get/set API without the event infastructure.
            This class is temporary and a work in progress.
            </summary>
        </member>
        <member name="M:Y_.AttributeLite._set(System.Object,System.Object)">
            <summary>
            Provides setter logic. Used by `set`.
            </summary>
        </member>
        <member name="M:Y_.AttributeLite.addAttrs(System.Object)">
            <summary>
            Initializes the attributes for a shape. If an attribute config is passed into the constructor of the host,
            the initial values will be overwritten.
            </summary>
        </member>
        <member name="M:Y_.AttributeLite.get(System.Object)">
            <summary>
            For a given item, returns the value of the property requested, or undefined if not found.
            </summary>
        </member>
        <member name="M:Y_.AttributeLite.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="T:Y_.YQL">
            <summary>
            This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/).
            </summary>
        </member>
        <member name="T:Y_.WidgetChild">
            <summary>
            Widget extension providing functionality enabling a Widget to be a
            child of another Widget.
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.depth">
            <summary>
            Number representing the depth of this Widget relative to
            the root Widget in the object heirarchy.
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.index">
            <summary>
            Number representing the Widget's ordinal position in its
            parent Widget.
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.parent">
            <summary>
            Retrieves the parent of the Widget in the object hierarchy.
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.root">
            <summary>
            Returns the root Widget in the object hierarchy.  If the
            ROOT_TYPE property is set, the search for the root Widget will be
            constrained to parent Widgets of the specified type.
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.ROOT_TYPE">
            <summary>
            Constructor reference used to determine the root of a Widget-based
            object tree.
            <p>
            Currently used to control the behavior of the <code>root</code>
            attribute so that recursing up the object heirarchy can be constrained
            to a specific type of Widget.  Widget authors should set this property
            to the constructor function for a given Widget implementation.
            </p>
            </summary>
        </member>
        <member name="P:Y_.WidgetChild.selected">
            <summary>
            Number indicating if the Widget is selected.  Possible
            values are:
            <dl>
            <dt>0</dt> <dd>(Default) Not selected</dd>
            <dt>1</dt> <dd>Fully selected</dd>
            <dt>2</dt> <dd>Partially selected</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.VMLDrawing">
            <summary>
            <a href="http://www.w3.org/TR/NOTE-VML">VML</a> implementation of the <a href="Drawing.html">`Drawing`</a> class.
            `VMLDrawing` is not intended to be used directly. Instead, use the <a href="Drawing.html">`Drawing`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> and <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a>
            capabilities, the <a href="Drawing.html">`Drawing`</a> class will point to the `VMLDrawing` class.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.clear">
            <summary>
            Clears the path.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.closePath">
            <summary>
            Ends a fill and stroke
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.curveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a bezier curve.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.drawCircle(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a circle. Used internally by `CanvasCircle` class.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.drawDiamond(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a diamond.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.drawEllipse(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.end">
            <summary>
            Completes a drawing operation.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.lineTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.moveTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Moves the current drawing position to specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.VMLDrawing.quadraticCurveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a quadratic bezier curve.
            </summary>
        </member>
        <member name="T:Y_.TimeAxis">
            <summary>
            TimeAxis manages time data on an axis.
            </summary>
        </member>
        <member name="M:Y_.TimeAxis.formatLabel(System.Object,System.Object)">
            <summary>
            Formats a label based on the axis type and optionally specified format.
            </summary>
        </member>
        <member name="M:Y_.TimeAxis.getLabelByIndex(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Calculates and returns a value based on the number of labels and the index of
            the current label.
            </summary>
        </member>
        <member name="P:Y_.TimeAxis.labelFunction">
            <summary>
            Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need
            to implement the arguments below and return a `String` or an `HTMLElement`. The default implementation of the method returns a `String`. The output of this method
            will be rendered to the DOM using `appendChild`. If you override the `labelFunction` method and return an html string, you will also need to override the Axis'
            `appendLabelFunction` to accept html as a `String`.
            <dl>
            <dt>val</dt><dd>Label to be formatted. (`String`)</dd>
            <dt>format</dt><dd>STRFTime string used to format the label. (optional)</dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.TimeAxis.maximum">
            <summary>
            The maximum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.
            </summary>
        </member>
        <member name="P:Y_.TimeAxis.minimum">
            <summary>
            The minimum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.
            </summary>
        </member>
        <member name="T:Y_.Test_.TestSuite">
            <summary>
            A test suite that can contain a collection of TestCase and TestSuite objects.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestSuite.add(System.Object)">
            <summary>
            Adds a test suite or test case to the test suite.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestSuite.setUp">
            <summary>
            Function to run before each test is executed.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestSuite.tearDown">
            <summary>
            Function to run after each test is executed.
            </summary>
        </member>
        <member name="T:Y_.Test_.TestRunner">
            <summary>
            Runs test suites and test cases, providing events to allowing for the
            interpretation of test results.
            </summary>
        </member>
        <member name="T:Y_.SVGEllipse">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Ellipse.html">`Ellipse`</a> class.
            `SVGEllipse` is not intended to be used directly. Instead, use the <a href="Ellipse.html">`Ellipse`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Ellipse.html">`Ellipse`</a>
            class will point to the `SVGEllipse` class.
            </summary>
        </member>
        <member name="T:Y_.Resize">
            <summary>
            A base class for Resize, providing:
            * Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)
            * Applies drag handles to an element to make it resizable
            * Here is the list of valid resize handles:
            `[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]`. You can
            read this list as top, top-right, right, bottom-right, bottom,
            bottom-left, left, top-left.
            * The drag handles are inserted into the element and positioned
            absolute. Some elements, such as a textarea or image, don't support
            children. To overcome that, set wrap:true in your config and the
            element willbe wrapped for you automatically.
            Quick Example:
            var instance = new Y.Resize({
            node: '#resize1',
            preserveRatio: true,
            wrap: true,
            maxHeight: 170,
            maxWidth: 400,
            handles: 't, tr, r, br, b, bl, l, tl'
            });
            Check the list of <a href="Resize.html#configattributes">Configuration Attributes</a> available for
            Resize.
            </summary>
        </member>
        <member name="M:Y_.Resize._buildHandle(System.Object)">
            <summary>
            Creates the handle element based on the handle name and initialize the
            DragDrop on it.
            </summary>
        </member>
        <member name="M:Y_.Resize._calcResize">
            <summary>
            Basic resize calculations.
            </summary>
        </member>
        <member name="M:Y_.Resize._checkSize(System.Object,Y_.DataType_.Number)">
            <summary>
            Helper method to update the current size value on
            <a href="Resize.html#property_info">info</a> to respect the
            min/max values and fix the top/left calculations.
            </summary>
        </member>
        <member name="M:Y_.Resize._copyStyles(Y_.Node,Y_.Node)">
            <summary>
            Copy relevant styles of the <a href="Resize.html#attr_node">node</a>
            to the <a href="Resize.html#attr_wrapper">wrapper</a>.
            </summary>
        </member>
        <member name="M:Y_.Resize._defMouseUpFn(Y_.EventFacade)">
            <summary>
            Default resize:mouseUp handler
            </summary>
        </member>
        <member name="M:Y_.Resize._defResizeAlignFn(Y_.EventFacade)">
            <summary>
            Default resize:align handler
            </summary>
        </member>
        <member name="M:Y_.Resize._defResizeEndFn(Y_.EventFacade)">
            <summary>
            Default resize:end handler
            </summary>
        </member>
        <member name="M:Y_.Resize._defResizeFn(Y_.EventFacade)">
            <summary>
            Default resize:resize handler
            </summary>
        </member>
        <member name="M:Y_.Resize._defResizeStartFn(Y_.EventFacade)">
            <summary>
            Default resize:start handler
            </summary>
        </member>
        <member name="M:Y_.Resize._handleMouseUpEvent(Y_.EventFacade)">
            <summary>
            Fires the resize:mouseUp event.
            </summary>
        </member>
        <member name="M:Y_.Resize._handleResizeAlignEvent(Y_.EventFacade)">
            <summary>
            Fires the resize:align event.
            </summary>
        </member>
        <member name="M:Y_.Resize._handleResizeEndEvent(Y_.EventFacade)">
            <summary>
            Fires the resize:end event.
            </summary>
        </member>
        <member name="M:Y_.Resize._handleResizeEvent(Y_.EventFacade)">
            <summary>
            Fires the resize:resize event.
            </summary>
        </member>
        <member name="M:Y_.Resize._handleResizeStartEvent(Y_.EventFacade)">
            <summary>
            Fires the resize:start event.
            </summary>
        </member>
        <member name="M:Y_.Resize._onHandleMouseEnter(Y_.EventFacade)">
            <summary>
            Mouseenter event handler for the handles.
            </summary>
        </member>
        <member name="M:Y_.Resize._onHandleMouseLeave(Y_.EventFacade)">
            <summary>
            Mouseout event handler for the handles.
            </summary>
        </member>
        <member name="M:Y_.Resize._onWrapperMouseEnter(Y_.EventFacade)">
            <summary>
            Mouseenter event handler for the <a href="Resize.html#attr_wrapper">wrapper</a>.
            </summary>
        </member>
        <member name="M:Y_.Resize._onWrapperMouseLeave(Y_.EventFacade)">
            <summary>
            Mouseleave event handler for the <a href="Resize.html#attr_wrapper">wrapper</a>.
            </summary>
        </member>
        <member name="M:Y_.Resize._renderHandles">
            <summary>
            Responsible for loop each handle element and append to the wrapper.
            </summary>
        </member>
        <member name="M:Y_.Resize._resize(Y_.EventFacade)">
            <summary>
            Logic method for _defResizeFn. Allow AOP.
            </summary>
        </member>
        <member name="M:Y_.Resize._resizeAlign(Y_.EventFacade)">
            <summary>
            Logic method for _defResizeAlignFn. Allow AOP.
            </summary>
        </member>
        <member name="M:Y_.Resize._resizeEnd(Y_.EventFacade)">
            <summary>
            Logic method for _defResizeEndFn. Allow AOP.
            </summary>
        </member>
        <member name="M:Y_.Resize._resizeStart(Y_.EventFacade)">
            <summary>
            Logic method for _defResizeStartFn. Allow AOP.
            </summary>
        </member>
        <member name="M:Y_.Resize._setActiveHandlesUI(System.Object)">
            <summary>
            Set the active state of the handles.
            </summary>
        </member>
        <member name="M:Y_.Resize._setHandleFromNode(Y_.Node)">
            <summary>
            Handles setting the activeHandle from a node, used from startDrag (for touch) and mouseenter (for mouse).
            </summary>
        </member>
        <member name="M:Y_.Resize._setHandles(System.Object)">
            <summary>
            Setter for the handles attribute
            </summary>
        </member>
        <member name="M:Y_.Resize._setHideHandlesUI(System.Object)">
            <summary>
            Set the visibility of the handles.
            </summary>
        </member>
        <member name="M:Y_.Resize._setWrap(System.Object)">
            <summary>
            Setter for the wrap attribute
            </summary>
        </member>
        <member name="M:Y_.Resize._syncUI">
            <summary>
            Sync the Resize UI with internal values from
            <a href="Resize.html#property_info">info</a>.
            </summary>
        </member>
        <member name="M:Y_.Resize._valueHandlesWrapper">
            <summary>
            Default value for the wrapper handles node attribute
            </summary>
        </member>
        <member name="M:Y_.Resize._valueWrapper">
            <summary>
            Default value for the wrapper attribute
            </summary>
        </member>
        <member name="M:Y_.Resize.bindUI">
            <summary>
            Bind the events on the Resize UI. Lifecycle.
            </summary>
        </member>
        <member name="M:Y_.Resize.destructor">
            <summary>
            Descructor lifecycle implementation for the Resize class. Purges events attached
            to the node (and all child nodes) and removes the Resize handles.
            </summary>
        </member>
        <member name="M:Y_.Resize.eachHandle(SharpKit.JavaScript.JsAction)">
            <summary>
            <p>Loop through each handle which is being used and executes a callback.</p>
            <p>Example:</p>
            <pre><code>instance.eachHandle(
            function(handleName, index) { ... }
            );</code></pre>
            </summary>
        </member>
        <member name="M:Y_.Resize.initializer">
            <summary>
            Construction logic executed during Resize instantiation. Lifecycle.
            </summary>
        </member>
        <member name="M:Y_.Resize.renderer">
            <summary>
            Creates DOM (or manipulates DOM for progressive enhancement)
            This method is invoked by initializer(). It's chained automatically for
            subclasses if required.
            </summary>
        </member>
        <member name="M:Y_.Resize.renderUI">
            <summary>
            Create the DOM structure for the Resize. Lifecycle.
            </summary>
        </member>
        <member name="M:Y_.Resize.syncUI">
            <summary>
            Sync the Resize UI.
            </summary>
        </member>
        <member name="P:Y_.Resize.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration for the Resize.
            </summary>
        </member>
        <member name="P:Y_.Resize.defMinHeight">
            <summary>
            The default minimum height of the element. Only used when
            ResizeConstrained is not plugged.
            </summary>
        </member>
        <member name="P:Y_.Resize.defMinWidth">
            <summary>
            The default minimum width of the element. Only used when
            ResizeConstrained is not plugged.
            </summary>
        </member>
        <member name="P:Y_.Resize.delegate">
            <summary>
            Store DD.Delegate reference for the respective Resize instance.
            </summary>
        </member>
        <member name="P:Y_.Resize.handlesWrapper">
            <summary>
            Node to wrap the resize handles.
            </summary>
        </member>
        <member name="P:Y_.Resize.info">
            <summary>
            Stores the current values for the height, width, top and left. You are
            able to manipulate these values on resize in order to change the resize
            behavior.
            </summary>
        </member>
        <member name="P:Y_.Resize.lastInfo">
            <summary>
            Stores the last values for the height, width, top and left.
            </summary>
        </member>
        <member name="P:Y_.Resize.node">
            <summary>
            The selector or element to resize. Required.
            </summary>
        </member>
        <member name="P:Y_.Resize.nodeSurrounding">
            <summary>
            Stores the <a href="Resize.html#attr_node">node</a>
            surrounding information retrieved from
            <a href="Resize.html#method__getBoxSurroundingInfo">_getBoxSurroundingInfo</a>.
            </summary>
        </member>
        <member name="P:Y_.Resize.originalInfo">
            <summary>
            Stores the original values for the height, width, top and left, stored
            on resize start.
            </summary>
        </member>
        <member name="P:Y_.Resize.wrapperSurrounding">
            <summary>
            Stores the <a href="Resize.html#attr_wrapper">wrapper</a>
            surrounding information retrieved from
            <a href="Resize.html#method__getBoxSurroundingInfo">_getBoxSurroundingInfo</a>.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.EditorPara">
            <summary>
            Plugin for Editor to paragraph auto wrapping and correction.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorPara.NAME">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="P:Y_.Plugin_.EditorPara.NS">
            <summary>
            editorPara
            </summary>
        </member>
        <member name="T:Y_.Plugin_.DataTableDataSource">
            <summary>
            Adds DataSource integration to DataTable.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DataTableDataSource.load(System.Object)">
            <summary>
            Load data by calling DataSource's sendRequest() method under the hood.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.DataTableDataSource.onDataReturnInitializeTable(System.Object)">
            <summary>
            Callback function passed to DataSource's sendRequest() method populates
            an entire DataTable with new data, clearing previous data, if any.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DataTableDataSource.initialRequest">
            <summary>
            Request sent to DataSource immediately upon initialization.
            </summary>
        </member>
        <member name="T:Y_.Plots">
            <summary>
            Utility class used for drawing markers.
            </summary>
        </member>
        <member name="M:Y_.Plots._createGroupMarkers(System.Object)">
            <summary>
            Draws a series of markers in a single shape instance.
            </summary>
        </member>
        <member name="M:Y_.Plots._getGroupShape(System.Object)">
            <summary>
            Returns the correct group shape class.
            </summary>
        </member>
        <member name="M:Y_.Plots._getItemColor(Y_.Array,Y_.DataType_.Number)">
            <summary>
            Parses a color from an array.
            </summary>
        </member>
        <member name="M:Y_.Plots._getPlotDefaults">
            <summary>
            Gets the default values for series that use the utility. This method is used by
            the class' `styles` attribute's getter to get build default values.
            </summary>
        </member>
        <member name="M:Y_.Plots._getState(System.Object)">
            <summary>
            Returns marker state based on event type
            </summary>
        </member>
        <member name="M:Y_.Plots._setStyles(System.Object)">
            <summary>
            Method used by `styles` setter. Overrides base implementation.
            </summary>
        </member>
        <member name="M:Y_.Plots.drawPlots">
            <summary>
            Draws the markers
            </summary>
        </member>
        <member name="M:Y_.Plots.getMarker(System.Object,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Gets and styles a marker. If there is a marker in cache, it will use it. Otherwise
            it will create one.
            </summary>
        </member>
        <member name="M:Y_.Plots.updateMarkerState(System.Object,Y_.DataType_.Number)">
            <summary>
            Resizes and positions markers based on a mouse interaction.
            </summary>
        </member>
        <member name="T:Y_.PieSeries">
            <summary>
            PieSeries visualizes data as a circular chart divided into wedges which represent data as a
            percentage of a whole.
            </summary>
        </member>
        <member name="M:Y_.PieSeries._getDefaultColor(Y_.DataType_.Number,System.Object)">
            <summary>
            Colors used if style colors are not specified
            </summary>
        </member>
        <member name="M:Y_.PieSeries.draw">
            <summary>
            Draws the series. Overrides the base implementation.
            </summary>
        </member>
        <member name="M:Y_.PieSeries.drawPlots">
            <summary>
            Draws the markers
            </summary>
        </member>
        <member name="M:Y_.PieSeries.updateMarkerState(System.Object,Y_.DataType_.Number)">
            <summary>
            Resizes and positions markers based on a mouse interaction.
            </summary>
        </member>
        <member name="P:Y_.PieSeries._defaultBorderColors">
            <summary>
            Collection of default colors used for marker borders in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.PieSeries._defaultFillColors">
            <summary>
            Collection of default colors used for marker fills in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.PieSeries._defaultLineColors">
            <summary>
            Collection of default colors used for lines in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.PieSeries._defaultSliceColors">
            <summary>
            Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.PieSeries.categoryAxis">
            <summary>
            Reference to the `Axis` instance used for assigning
            category values to the graph.
            </summary>
        </member>
        <member name="P:Y_.PieSeries.graph">
            <summary>
            Reference to the `Graph` in which the series is drawn into.
            </summary>
        </member>
        <member name="P:Y_.PieSeries.order">
            <summary>
            Order of this instance of this `type`.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.PieSeries.styles" -->
        <member name="T:Y_.Matrix">
            <summary>
            Matrix is a class that allows for the manipulation of a transform matrix.
            This class is a work in progress.
            </summary>
        </member>
        <member name="M:Y_.Matrix.applyCSSText(System.Object)">
            <summary>
            Parses a string and updates the matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.decompose">
            <summary>
            Returns an array of transform commands that represent the matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.deg2rad(Y_.DataType_.Number)">
            <summary>
            Converts a degree value to a radian.
            </summary>
        </member>
        <member name="M:Y_.Matrix.getContentRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Returns the left, top, right and bottom coordinates for a transformed
            item.
            </summary>
        </member>
        <member name="M:Y_.Matrix.getDeterminant">
            <summary>
            Returns the determinant of the matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.getMatrixArray">
            <summary>
            Returns a 3x3 Matrix array
            /                                             \
            | matrix[0][0]   matrix[1][0]    matrix[2][0] |
            | matrix[0][1]   matrix[1][1]    matrix[2][1] |
            | matrix[0][2]   matrix[1][2]    matrix[2][2] |
            \                                             /
            </summary>
        </member>
        <member name="M:Y_.Matrix.getTransformArray(System.Object)">
            <summary>
            Parses a string and returns an array of transform arrays.
            </summary>
        </member>
        <member name="M:Y_.Matrix.identity">
            <summary>
            Returns an identity matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.init(System.Object)">
            <summary>
            Initializes a matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.inverse">
            <summary>
            Returns the inverse (in array form) of the matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.multiple(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Updates the matrix.
            </summary>
        </member>
        <member name="M:Y_.Matrix.rad2deg(Y_.DataType_.Number)">
            <summary>
            Converts a radian value to a degree.
            </summary>
        </member>
        <member name="M:Y_.Matrix.rotate(Y_.DataType_.Number)">
            <summary>
            Applies a rotate transform.
            </summary>
        </member>
        <member name="M:Y_.Matrix.scale(Y_.DataType_.Number)">
            <summary>
            Applies a scale transform
            </summary>
        </member>
        <member name="M:Y_.Matrix.skew(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Applies a skew transformation.
            </summary>
        </member>
        <member name="M:Y_.Matrix.skewX(Y_.DataType_.Number)">
            <summary>
            Applies a skew to the x-coordinate
            </summary>
        </member>
        <member name="M:Y_.Matrix.skewY(Y_.DataType_.Number)">
            <summary>
            Applies a skew to the y-coordinate
            </summary>
        </member>
        <member name="M:Y_.Matrix.toCSSText">
            <summary>
            Returns a string of text that can be used to populate a the css transform property of an element.
            </summary>
        </member>
        <member name="M:Y_.Matrix.toFilterText">
            <summary>
            Returns a string that can be used to populate the css filter property of an element.
            </summary>
        </member>
        <member name="M:Y_.Matrix.translate(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Applies translate transformation.
            </summary>
        </member>
        <member name="M:Y_.Matrix.transpose">
            <summary>
            Returns the transpose of the matrix
            </summary>
        </member>
        <member name="T:Y_.Lang">
            <summary>
            Provides core language utilites and extensions used throughout YUI.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Lang._isNative(SharpKit.JavaScript.JsAction)" -->
        <member name="M:Y_.Lang.isArray(System.Object)">
            <summary>
            Determines whether or not the provided item is an array.
            Returns `false` for array-like collections such as the function `arguments`
            collection or `HTMLElement` collections. Use `Y.Array.test()` if you want to
            test for an array-like collection.
            </summary>
        </member>
        <member name="M:Y_.Lang.isBoolean(System.Object)">
            <summary>
            Determines whether or not the provided item is a boolean.
            </summary>
        </member>
        <member name="M:Y_.Lang.isDate(System.Object)">
            <summary>
            Determines whether or not the supplied item is a date instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Lang.isFunction(System.Object)" -->
        <member name="M:Y_.Lang.isNull(System.Object)">
            <summary>
            Determines whether or not the provided item is null.
            </summary>
        </member>
        <member name="M:Y_.Lang.isNumber(System.Object)">
            <summary>
            Determines whether or not the provided item is a legal number.
            </summary>
        </member>
        <member name="M:Y_.Lang.isObject(System.Object,System.Object)">
            <summary>
            Determines whether or not the provided item is of type object
            or function. Note that arrays are also objects, so
            <code>Y.Lang.isObject([]) === true</code>.
            </summary>
        </member>
        <member name="M:Y_.Lang.isString(System.Object)">
            <summary>
            Determines whether or not the provided item is a string.
            </summary>
        </member>
        <member name="M:Y_.Lang.isUndefined(System.Object)">
            <summary>
            Determines whether or not the provided item is undefined.
            </summary>
        </member>
        <member name="M:Y_.Lang.isValue(System.Object)">
            <summary>
            A convenience method for detecting a legitimate non-null value.
            Returns false for null/undefined/NaN, true for other values,
            including 0/false/''
            </summary>
        </member>
        <member name="M:Y_.Lang.now">
            <summary>
            Returns the current time in milliseconds.
            </summary>
        </member>
        <member name="M:Y_.Lang.sub(System.Object,System.Object)">
            <summary>
            Lightweight version of <code>Y.substitute</code>. Uses the same template
            structure as <code>Y.substitute</code>, but doesn't support recursion,
            auto-object coersion, or formats.
            </summary>
        </member>
        <member name="M:Y_.Lang.trim(System.Object)">
            <summary>
            Returns a string without any leading or trailing whitespace.  If
            the input is not a string, the input will be returned untouched.
            </summary>
        </member>
        <member name="M:Y_.Lang.trimLeft(System.Object)">
            <summary>
            Returns a string without any leading whitespace.
            </summary>
        </member>
        <member name="M:Y_.Lang.trimRight(System.Object)">
            <summary>
            Returns a string without any trailing whitespace.
            </summary>
        </member>
        <member name="M:Y_.Lang.type(System.Object)">
            <summary>
            Returns one of the following strings, representing the type of the item passed
            in:
            * "array"
            * "boolean"
            * "date"
            * "error"
            * "function"
            * "null"
            * "number"
            * "object"
            * "regexp"
            * "string"
            * "undefined"
            Known issues:
            * `typeof HTMLElementCollection` returns function in Safari, but
            `Y.Lang.type()` reports "object", which could be a good thing --
            but it actually caused the logic in <code>Y.Lang.isObject</code> to fail.
            </summary>
        </member>
        <member name="T:Y_.ImgLoadImgObj">
            <summary>
            Image objects to be registered with the groups
            </summary>
        </member>
        <member name="M:Y_.ImgLoadImgObj.fetch(System.Object)">
            <summary>
            Displays the image; puts the URL into the DOM.
            This method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.
            </summary>
        </member>
        <member name="T:Y_.HorizontalLegendLayout">
            <summary>
            Contains methods for displaying items horizontally in a legend.
            </summary>
        </member>
        <member name="M:Y_.HorizontalLegendLayout._positionLegendItems(Y_.Array,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,System.Object,System.Object)">
            <summary>
            Displays items horizontally in a legend.
            </summary>
        </member>
        <member name="M:Y_.HorizontalLegendLayout._setRowArrays(Y_.Array,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Creates row and total width arrays used for displaying multiple rows of
            legend items based on the items, available width and horizontalGap for the legend.
            </summary>
        </member>
        <member name="M:Y_.HorizontalLegendLayout.getStartPoint(Y_.DataType_.Number,Y_.DataType_.Number,System.Object,System.Object)">
            <summary>
            Returns the starting x-coordinate for a row of legend items.
            </summary>
        </member>
        <member name="T:Y_.Fills">
            <summary>
            Utility class used for drawing area fills.
            </summary>
        </member>
        <member name="M:Y_.Fills._getClosingPoints">
            <summary>
            Concatenates coordinate array with correct coordinates for closing an area fill.
            </summary>
        </member>
        <member name="M:Y_.Fills._getStackedClosingPoints">
            <summary>
            Concatenates coordinate array with the correct coordinates for closing an area stack.
            </summary>
        </member>
        <member name="M:Y_.Fills.drawAreaSpline">
            <summary>
            Draws a fill for a spline
            </summary>
        </member>
        <member name="M:Y_.Fills.drawFill(Y_.Array,Y_.Array)">
            <summary>
            Draws fill
            </summary>
        </member>
        <member name="M:Y_.Fills.drawStackedAreaSpline">
            <summary>
            Draws a a stacked area spline
            </summary>
        </member>
        <member name="T:Y_.Do_.Method">
            <summary>
            Wrapper for a displaced method with aop enabled
            </summary>
        </member>
        <member name="M:Y_.Do_.Method.delete(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Unregister a aop subscriber
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Do_.Method.exec(System.Object)" -->
        <member name="M:Y_.Do_.Method.register(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Register a aop subscriber
            </summary>
        </member>
        <member name="T:Y_.DataSourceTextSchema">
            <summary>
            Adds schema-parsing to the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSourceTextSchema._beforeDefDataFn(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            Parses raw data into a normalized response.
            </summary>
        </member>
        <member name="T:Y_.DataSchema_.JSON">
            <summary>
            Provides a DataSchema implementation which can be used to work with JSON data.
            See the `apply` method for usage.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON._getFieldValues(Y_.Array,Y_.Array,System.Object)">
            <summary>
            Get field data values out of list of full results
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON._parseMeta(System.Object,System.Object,System.Object)">
            <summary>
            Parses results data according to schema
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON._parseResults(System.Object,System.Object,System.Object)">
            <summary>
            Schema-parsed list of results from full data
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.apply(System.Object)">
            <summary>
            Applies a schema to an array of data located in a JSON structure, returning
            a normalized object with results in the `results` property. Additional
            information can be parsed out of the JSON for inclusion in the `meta`
            property of the response object.  If an error is encountered during
            processing, an `error` property will be added.
            The input _data_ is expected to be an object or array.  If it is a string,
            it will be passed through `Y.JSON.parse()`.
            If _data_ contains an array of data records to normalize, specify the
            _schema.resultListLocator_ as a dot separated path string just as you would
            reference it in JavaScript.  So if your _data_ object has a record array at
            _data.response.results_, use _schema.resultListLocator_ =
            "response.results". Bracket notation can also be used for array indices or
            object properties (e.g. "response['results']");  This is called a "path
            locator"
            Field data in the result list is extracted with field identifiers in
            _schema.resultFields_.  Field identifiers are objects with the following
            properties:
            * `key`   : <strong>(required)</strong> The path locator (String)
            * `parser`: A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            If no value parsing is needed, you can use path locators (strings)
            instead of field identifiers (objects) -- see example below.
            If no processing of the result list array is needed, _schema.resultFields_
            can be omitted; the `response.results` will point directly to the array.
            If the result list contains arrays, `response.results` will contain an
            array of objects with key:value pairs assuming the fields in
            _schema.resultFields_ are ordered in accordance with the data array
            values.
            If the result list contains objects, the identified _schema.resultFields_
            will be used to extract a value from those objects for the output result.
            To extract additional information from the JSON, include an array of
            path locators in _schema.metaFields_.  The collected values will be
            stored in `response.meta`.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.apply(System.Object,System.Object)">
            <summary>
            Applies a schema to an array of data located in a JSON structure, returning
            a normalized object with results in the `results` property. Additional
            information can be parsed out of the JSON for inclusion in the `meta`
            property of the response object.  If an error is encountered during
            processing, an `error` property will be added.
            The input _data_ is expected to be an object or array.  If it is a string,
            it will be passed through `Y.JSON.parse()`.
            If _data_ contains an array of data records to normalize, specify the
            _schema.resultListLocator_ as a dot separated path string just as you would
            reference it in JavaScript.  So if your _data_ object has a record array at
            _data.response.results_, use _schema.resultListLocator_ =
            "response.results". Bracket notation can also be used for array indices or
            object properties (e.g. "response['results']");  This is called a "path
            locator"
            Field data in the result list is extracted with field identifiers in
            _schema.resultFields_.  Field identifiers are objects with the following
            properties:
            * `key`   : <strong>(required)</strong> The path locator (String)
            * `parser`: A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            If no value parsing is needed, you can use path locators (strings)
            instead of field identifiers (objects) -- see example below.
            If no processing of the result list array is needed, _schema.resultFields_
            can be omitted; the `response.results` will point directly to the array.
            If the result list contains arrays, `response.results` will contain an
            array of objects with key:value pairs assuming the fields in
            _schema.resultFields_ are ordered in accordance with the data array
            values.
            If the result list contains objects, the identified _schema.resultFields_
            will be used to extract a value from those objects for the output result.
            To extract additional information from the JSON, include an array of
            path locators in _schema.metaFields_.  The collected values will be
            stored in `response.meta`.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.dateToString(Y_.DataType_.Date)">
            <summary>
            Serializes a Date instance as a UTC date string.  Used internally by
            stringify.  Override this method if you need Dates serialized in a
            different format.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.getLocationValue(System.Object,System.Object)">
            <summary>
            Utility function to walk a path and return the value located there.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.getPath(System.Object)">
            <summary>
            Utility function converts JSON locator strings into walkable paths
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.parse(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Parse a JSON string, returning the native JavaScript representation.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.JSON.stringify(System.Object,System.Object,System.Object)">
            <summary>
            <p>Converts an arbitrary value to a JSON string representation.</p>
            <p>Objects with cyclical references will trigger an exception.</p>
            <p>If a whitelist is provided, only matching object keys will be
            included.  Alternately, a replacer function may be passed as the
            second parameter.  This function is executed on every value in the
            input, and its return value will be used in place of the original value.
            This is useful to serialize specialized objects or class instances.</p>
            <p>If a positive integer or non-empty string is passed as the third
            parameter, the output will be formatted with carriage returns and
            indentation for readability.  If a String is passed (such as "\t") it
            will be used once for each indentation level.  If a number is passed,
            that number of spaces will be used.</p>
            </summary>
        </member>
        <member name="T:Y_.DataSchema_.Array">
            <summary>
            Provides a DataSchema implementation which can be used to work with data
            stored in arrays.
            See the `apply` method below for usage.
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Array._parseResults(Y_.Array,Y_.Array,System.Object)">
            <summary>
            Schema-parsed list of results from full data
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Array.apply(Y_.Array)">
            <summary>
            Applies a schema to an array of data, returning a normalized object
            with results in the `results` property. The `meta` property of the
            response object is present for consistency, but is assigned an empty
            object.  If the input data is absent or not an array, an `error`
            property will be added.
            The input array is expected to contain objects, arrays, or strings.
            If _schema_ is not specified or _schema.resultFields_ is not an array,
            `response.results` will be assigned the input array unchanged.
            When a _schema_ is specified, the following will occur:
            If the input array contains strings, they will be copied as-is into the
            `response.results` array.
            If the input array contains arrays, `response.results` will contain an
            array of objects with key:value pairs assuming the fields in
            _schema.resultFields_ are ordered in accordance with the data array
            values.
            If the input array contains objects, the identified
            _schema.resultFields_ will be used to extract a value from those
            objects for the output result.
            _schema.resultFields_ field identifiers are objects with the following properties:
            * `key`   : <strong>(required)</strong> The locator name (String)
            * `parser`: A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            If no value parsing is needed, you can use strings as identifiers
            instead of objects (see example below).
            </summary>
        </member>
        <member name="M:Y_.DataSchema_.Array.apply(System.Object,Y_.Array)">
            <summary>
            Applies a schema to an array of data, returning a normalized object
            with results in the `results` property. The `meta` property of the
            response object is present for consistency, but is assigned an empty
            object.  If the input data is absent or not an array, an `error`
            property will be added.
            The input array is expected to contain objects, arrays, or strings.
            If _schema_ is not specified or _schema.resultFields_ is not an array,
            `response.results` will be assigned the input array unchanged.
            When a _schema_ is specified, the following will occur:
            If the input array contains strings, they will be copied as-is into the
            `response.results` array.
            If the input array contains arrays, `response.results` will contain an
            array of objects with key:value pairs assuming the fields in
            _schema.resultFields_ are ordered in accordance with the data array
            values.
            If the input array contains objects, the identified
            _schema.resultFields_ will be used to extract a value from those
            objects for the output result.
            _schema.resultFields_ field identifiers are objects with the following properties:
            * `key`   : <strong>(required)</strong> The locator name (String)
            * `parser`: A function or the name of a function on `Y.Parsers` used
            to convert the input value into a normalized type.  Parser
            functions are passed the value as input and are expected to
            return a value.
            If no value parsing is needed, you can use strings as identifiers
            instead of objects (see example below).
            </summary>
        </member>
        <member name="T:Y_.Circle">
            <summary>
            <p>Creates circle shape with editable attributes.</p>
            <p>`Circle` instances can be created using the <a href="Graphic.html#method_addShape">`addShape`</a> method of the <a href="Graphic.html">`Graphic`</a> class.
            The method's `cfg` argument contains a `type` attribute. Assigning "circle" or `Y.Circle` to this attribute will create a `Circle` instance. Required attributes
            for instantiating a `Circle` are `type` and `radius`. Optional attributes include:
            <ul>
            <li><a href="#attr_fill">fill</a></li>
            <li><a href="#attr_id">id</a></li>
            <li><a href="#attr_stroke">stroke</a></li>
            <li><a href="#attr_transform">transform</a></li>
            <li><a href="#attr_transformOrigin">transformOrigin</a></li>
            <li><a href="#attr_visible">visible</a></li>
            <li><a href="#attr_x">x</a></li>
            <li><a href="#attr_y">y</a></li>
            </ul>
            The below code creates a circle by defining the `type` attribute as "circle":</p>
            var myCircle = myGraphic.addShape({
            type: "circle",
            radius: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            Below, this same circle is created by defining the `type` attribute with a class reference:
            var myCircle = myGraphic.addShape({
            type: Y.Circle,
            radius: 10,
            fill: {
            color: "#9aa"
            },
            stroke: {
            weight: 1,
            color: "#000"
            }
            });
            <p>`Circle` has the following implementations based on browser capability.
            <ul>
            <li><a href="SVGCircle.html">`SVGCircle`</a></li>
            <li><a href="VMLCircle.html">`VMLCircle`</a></li>
            <li><a href="CanvasCircle.html">`CanvasCircle`</a></li>
            </ul>
            It is not necessary to interact with these classes directly. `Circle` will point to the appropriate implemention.</p>
            </summary>
        </member>
        <member name="M:Y_.ButtonPlugin.createNode(System.Object,System.Object)">
            <summary>
            A factory that plugs a Y.Node instance with Y.Plugin.Button
            </summary>
        </member>
        <member name="T:Y_.AutoCompleteFilters">
            <summary>
            Provides pre-built result matching filters for AutoComplete.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.charMatch(System.Object,Y_.Array)">
            <summary>
            Returns an array of results that contain all of the characters in the query,
            in any order (not necessarily consecutive). Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.charMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `charMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.charMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent folding version of `charMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.phraseMatch(System.Object,Y_.Array)">
            <summary>
            Returns an array of results that contain the complete query as a phrase.
            Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.phraseMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `phraseMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.phraseMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent folding version of `phraseMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.startsWith(System.Object,Y_.Array)">
            <summary>
            Returns an array of results that start with the complete query as a phrase.
            Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.startsWithCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `startsWith()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.startsWithFold(System.Object,Y_.Array)">
            <summary>
            Accent folding version of `startsWith()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.subWordMatch(System.Object,Y_.Array)">
            <summary>
            Returns an array of results in which all the words of the query match either
            whole words or parts of words in the result. Non-word characters like
            whitespace and certain punctuation are ignored. Case-insensitive.
            This is basically a combination of `wordMatch()` (by ignoring whitespace and
            word order) and `phraseMatch()` (by allowing partial matching instead of
            requiring the entire word to match).
            Example use case: Trying to find personal names independently of name order
            (Western or Eastern order) and supporting immediate feedback by allowing
            partial occurences. So queries like "J. Doe", "Doe, John", and "J. D." would
            all match "John Doe".
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.subWordMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `subWordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.subWordMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent folding version of `subWordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.wordMatch(System.Object,Y_.Array)">
            <summary>
            Returns an array of results that contain all of the words in the query, in
            any order. Non-word characters like whitespace and certain punctuation are
            ignored. Case-insensitive.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.wordMatchCase(System.Object,Y_.Array)">
            <summary>
            Case-sensitive version of `wordMatch()`.
            </summary>
        </member>
        <member name="M:Y_.AutoCompleteFilters.wordMatchFold(System.Object,Y_.Array)">
            <summary>
            Accent folding version of `wordMatch()`.
            </summary>
        </member>
        <member name="T:Y_.AttributeExtras">
            <summary>
            A augmentable implementation for AttributeCore, providing less frequently used
            methods for Attribute management such as modifyAttrs(), removeAttr and reset()
            </summary>
        </member>
        <member name="M:Y_.AttributeExtras._getAttrCfg(System.Object)">
            <summary>
            Returns an object with the configuration properties (and value)
            for the given attribute. If attrName is not provided, returns the
            configuration properties for all attributes.
            </summary>
        </member>
        <member name="M:Y_.AttributeExtras.modifyAttr(System.Object,System.Object)">
            <summary>
            Updates the configuration of an attribute which has already been added.
            <p>
            The properties which can be modified through this interface are limited
            to the following subset of attributes, which can be safely modified
            after a value has already been set on the attribute: readOnly, writeOnce,
            broadcast and getter.
            </p>
            </summary>
        </member>
        <member name="M:Y_.AttributeExtras.removeAttr(System.Object)">
            <summary>
            Removes an attribute from the host object
            </summary>
        </member>
        <member name="M:Y_.AttributeExtras.reset(System.Object)">
            <summary>
            Resets the attribute (or all attributes) to its initial value, as long as
            the attribute is not readOnly, or writeOnce.
            </summary>
        </member>
        <member name="T:Y_.ArrayList">
            <summary>
            Generic ArrayList class for managing lists of items and iterating operations
            over them.  The targeted use for this class is for augmentation onto a
            class that is responsible for managing multiple instances of another class
            (e.g. NodeList for Nodes).  The recommended use is to augment your class with
            ArrayList, then use ArrayList.addMethod to mirror the API of the constituent
            items on the list's API.
            The default implementation creates immutable lists, but mutability can be
            provided via the arraylist-add submodule or by implementing mutation methods
            directly on the augmented class's prototype.
            </summary>
        </member>
        <member name="M:Y_.ArrayList._item(System.Object)">
            <summary>
            Protected method for optimizations that may be appropriate for API
            mirroring. Similar in functionality to <code>item</code>, but is used by
            methods added with <code>ArrayList.addMethod()</code>.
            </summary>
        </member>
        <member name="M:Y_.ArrayList.add(System.Object,Y_.DataType_.Number)">
            <summary>
            Add a single item to the ArrayList.  Does not prevent duplicates.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.ArrayList.addMethod(System.Object,System.Object)" -->
        <member name="M:Y_.ArrayList.each(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            <p>Execute a function on each item of the list, optionally providing a
            custom execution context.  Default context is the item.</p>
            <p>The callback signature is <code>callback( item, index )</code>.</p>
            </summary>
        </member>
        <member name="M:Y_.ArrayList.filter(SharpKit.JavaScript.JsAction)">
            <summary>
            <p>Create a new ArrayList (or augmenting class instance) from a subset
            of items as determined by the boolean function passed as the
            argument.  The original ArrayList is unchanged.</p>
            <p>The validator signature is <code>validator( item )</code>.</p>
            </summary>
        </member>
        <member name="M:Y_.ArrayList.indexOf(System.Object)">
            <summary>
            Finds the first index of the needle in the managed array of items.
            </summary>
        </member>
        <member name="M:Y_.ArrayList.isEmpty">
            <summary>
            Is this instance managing any items?
            </summary>
        </member>
        <member name="M:Y_.ArrayList.item(System.Object)">
            <summary>
            Get an item by index from the list.  Override this method if managing a
            list of objects that have a different public representation (e.g. Node
            instances vs DOM nodes).  The iteration methods that accept a user
            function will use this method for access list items for operation.
            </summary>
        </member>
        <member name="M:Y_.ArrayList.itemsAreEqual(System.Object,System.Object)">
            <summary>
            Default comparator for items stored in this list.  Used by remove().
            </summary>
        </member>
        <member name="M:Y_.ArrayList.remove(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Removes first or all occurrences of an item to the ArrayList.  If a
            comparator is not provided, uses itemsAreEqual method to determine
            matches.
            </summary>
        </member>
        <member name="M:Y_.ArrayList.size">
            <summary>
            How many items are in this list?
            </summary>
        </member>
        <member name="M:Y_.ArrayList.some(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            <p>Execute a function on each item of the list, optionally providing a
            custom execution context.  Default context is the item.</p>
            <p>The callback signature is <code>callback( item, index )</code>.</p>
            <p>Unlike <code>each</code>, if the callback returns true, the
            iteratation will stop.</p>
            </summary>
        </member>
        <member name="M:Y_.ArrayList.toJSON">
            <summary>
            Provides an array-like representation for JSON.stringify.
            </summary>
        </member>
        <member name="T:Y_.App_.Base">
            <summary>
            Provides a top-level application component which manages navigation and views.
            This gives you a foundation and structure on which to build your application; it
            combines robust URL navigation with powerful routing and flexible view
            management.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._afterActiveViewChange(Y_.EventFacade)">
            <summary>
            Handles the application's `activeViewChange` event (which is fired when the
            `activeView` attribute changes) by detaching the old view, attaching the new
            view.
            The `activeView` attribute is read-only, so the public API to change its
            value is through the `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._attachView(Y_.View,System.Object)">
            <summary>
            Helper method to attach the view instance to the application by making the
            app a bubble target of the view, append the view to the `viewContainer`, and
            assign it to the `instance` property of the associated view info metadata.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.App_.Base._destroyContainer" -->
        <member name="M:Y_.App_.Base._detachView(Y_.View)">
            <summary>
            Helper method to detach the view instance from the application by removing
            the application as a bubble target of the view, and either just removing the
            view if it is intended to be preserved, or destroying the instance
            completely.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._getURL">
            <summary>
            Gets the current full URL. When `html5` is false, the URL will first be
            upgraded before it's returned.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._getViewContainer(System.Object)">
            <summary>
            Getter for the `viewContainer` attribute.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._initHtml5">
            <summary>
            Provides the default value for the `html5` attribute.
            The value returned is dependent on the value of the `serverRouting`
            attribute. When `serverRouting` is explicit set to `false` (not just falsy),
            the default value for `html5` will be set to `false` for *all* browsers.
            When `serverRouting` is `true` or `undefined` the returned value will be
            dependent on the browser's capability of using HTML5 history.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._isChildView(System.Object,System.Object)">
            <summary>
            Determines if the specified `view` is configured as a child of the specified
            `parent` view. This requires both views to be either named-views, or view
            instances created using configuration data that exists in the `views`
            object, e.g. created by the `createView()` or `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._isParentView(System.Object,System.Object)">
            <summary>
            Determines if the specified `view` is configured as the parent of the
            specified `child` view. This requires both views to be either named-views,
            or view instances created using configuration data that exists in the
            `views` object, e.g. created by the `createView()` or `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._navigate(System.Object)">
            <summary>
            Underlying implementation for `navigate()`.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._navigate(System.Object,System.Object)">
            <summary>
            Underlying implementation for `navigate()`.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._save">
            <summary>
            Will either save a history entry using `pushState()` or the location hash,
            or gracefully-degrade to sending a request to the server causing a full-page
            reload.
            Overrides Router's `_save()` method to preform graceful-degradation when the
            app's `serverRouting` is `true` and `html5` is `false` by updating the full
            URL via standard assignment to `window.location` or by calling
            `window.location.replace()`; both of which will cause a request to the
            server resulting in a full-page reload.
            Otherwise this will just delegate off to Router's `_save()` method allowing
            the client-side enhanced routing to occur.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._save(System.Object)">
            <summary>
            Will either save a history entry using `pushState()` or the location hash,
            or gracefully-degrade to sending a request to the server causing a full-page
            reload.
            Overrides Router's `_save()` method to preform graceful-degradation when the
            app's `serverRouting` is `true` and `html5` is `false` by updating the full
            URL via standard assignment to `window.location` or by calling
            `window.location.replace()`; both of which will cause a request to the
            server resulting in a full-page reload.
            Otherwise this will just delegate off to Router's `_save()` method allowing
            the client-side enhanced routing to occur.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._save(System.Object,System.Object)">
            <summary>
            Will either save a history entry using `pushState()` or the location hash,
            or gracefully-degrade to sending a request to the server causing a full-page
            reload.
            Overrides Router's `_save()` method to preform graceful-degradation when the
            app's `serverRouting` is `true` and `html5` is `false` by updating the full
            URL via standard assignment to `window.location` or by calling
            `window.location.replace()`; both of which will cause a request to the
            server resulting in a full-page reload.
            Otherwise this will just delegate off to Router's `_save()` method allowing
            the client-side enhanced routing to occur.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._uiSetActiveView(Y_.View)">
            <summary>
            Performs the actual change of this app's `activeView` by attaching the
            `newView` to this app, and detaching the `oldView` from this app using any
            specified `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** The `activeView` attribute is read-only and can be changed by
            calling the `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._uiSetActiveView(Y_.View,System.Object)">
            <summary>
            Performs the actual change of this app's `activeView` by attaching the
            `newView` to this app, and detaching the `oldView` from this app using any
            specified `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** The `activeView` attribute is read-only and can be changed by
            calling the `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._uiSetActiveView(Y_.View,Y_.View)">
            <summary>
            Performs the actual change of this app's `activeView` by attaching the
            `newView` to this app, and detaching the `oldView` from this app using any
            specified `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** The `activeView` attribute is read-only and can be changed by
            calling the `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._uiSetActiveView(Y_.View,Y_.View,System.Object)">
            <summary>
            Performs the actual change of this app's `activeView` by attaching the
            `newView` to this app, and detaching the `oldView` from this app using any
            specified `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** The `activeView` attribute is read-only and can be changed by
            calling the `showView()` method.
            </summary>
        </member>
        <member name="M:Y_.App_.Base._upgradeURL(System.Object)">
            <summary>
            Upgrades a hash-based URL to a full-path URL, if necessary.
            The specified `url` will be upgraded if its of the same origin as the
            current URL and has a path-like hash. URLs that don't need upgrading will be
            returned as-is.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.createView(System.Object)">
            <summary>
            Creates and returns a new view instance using the provided `name` to look up
            the view info metadata defined in the `views` object. The passed-in `config`
            object is passed to the view constructor function.
            This function also maps a view instance back to its view info metadata.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.createView(System.Object,System.Object)">
            <summary>
            Creates and returns a new view instance using the provided `name` to look up
            the view info metadata defined in the `views` object. The passed-in `config`
            object is passed to the view constructor function.
            This function also maps a view instance back to its view info metadata.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.getViewInfo(System.Object)">
            <summary>
            Returns the metadata associated with a view instance or view name defined on
            the `views` object.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.navigate(System.Object)">
            <summary>
            Navigates to the specified URL if there is a route handler that matches. In
            browsers capable of using HTML5 history or when `serverRouting` is falsy,
            the navigation will be enhanced by firing the `navigate` event and having
            the app handle the "request". When `serverRouting` is `true`, non-HTML5
            browsers will navigate to the new URL via a full page reload.
            When there is a route handler for the specified URL and it is being
            navigated to, this method will return `true`, otherwise it will return
            `false`.
            **Note:** The specified URL _must_ be of the same origin as the current URL,
            otherwise an error will be logged and navigation will not occur. This is
            intended as both a security constraint and a purposely imposed limitation as
            it does not make sense to tell the app to navigate to a URL on a
            different scheme, host, or port.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.navigate(System.Object,System.Object)">
            <summary>
            Navigates to the specified URL if there is a route handler that matches. In
            browsers capable of using HTML5 history or when `serverRouting` is falsy,
            the navigation will be enhanced by firing the `navigate` event and having
            the app handle the "request". When `serverRouting` is `true`, non-HTML5
            browsers will navigate to the new URL via a full page reload.
            When there is a route handler for the specified URL and it is being
            navigated to, this method will return `true`, otherwise it will return
            `false`.
            **Note:** The specified URL _must_ be of the same origin as the current URL,
            otherwise an error will be logged and navigation will not occur. This is
            intended as both a security constraint and a purposely imposed limitation as
            it does not make sense to tell the app to navigate to a URL on a
            different scheme, host, or port.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.render">
            <summary>
            Renders this application by appending the `viewContainer` node to the
            `container` node if it isn't already a child of the container, and the
            `activeView` will be appended the view container, if it isn't already.
            You should call this method at least once, usually after the initialization
            of your app instance so the proper DOM structure is setup and optionally
            append the container to the DOM if it's not there already.
            You may override this method to customize the app's rendering, but you
            should expect that the `viewContainer`'s contents will be modified by the
            app for the purpose of rendering the `activeView` when it changes.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object,System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object,System.Object,System.Object)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="M:Y_.App_.Base.showView(System.Object,System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Sets which view is active/visible for the application. This will set the
            app's `activeView` attribute to the specified `view`.
            When a string-name is provided for a view which has been registered on this
            app's `views` object, the referenced metadata will be used and the
            `activeView` will be set to either a preserved view instance, or a new
            instance of the registered view will be created using the specified `config`
            object passed-into this method.
            A callback function can be specified as either the third or fourth argument,
            and this function will be called after the new `view` becomes the
            `activeView`, is rendered to the `viewContainer`, and is ready to use.
            </summary>
        </member>
        <member name="P:Y_.App_.Base._NON_ATTRS_CFG">
            <summary>
            Properties that shouldn't be turned into ad-hoc attributes when passed to
            App's constructor.
            </summary>
        </member>
        <member name="P:Y_.App_.Base._viewInfoMap">
            <summary>
            Map of view instance id (via `Y.stamp()`) to view-info object in `views`.
            This mapping is used to tie a specific view instance back to its metadata by
            adding a reference to the the related view info on the `views` object.
            </summary>
        </member>
        <member name="P:Y_.App_.Base.activeView">
            <summary>
            The application's active/visible view.
            This attribute is read-only, to set the `activeView` use the
            `showView()` method.
            </summary>
        </member>
        <member name="P:Y_.App_.Base.views">
            <summary>
            Hash of view-name to metadata used to declaratively describe an
            application's views and their relationship with the app and its other views.
            The view metadata is composed of Objects keyed to a view-name that can have
            any or all of the following properties:
            * `type`: Function or a string representing the view constructor to use to
            create view instances. If a string is used, the constructor function is
            assumed to be on the `Y` object; e.g. `"SomeView"` -> `Y.SomeView`.
            * `preserve`: Boolean for whether the view instance should be retained. By
            default, the view instance will be destroyed when it is no longer the
            `activeView`. If `true` the view instance will simply be `removed()`
            from the DOM when it is no longer active. This is useful when the view
            is frequently used and may be expensive to re-create.
            * `parent`: String to another named view in this hash that represents the
            parent view within the application's view hierarchy; e.g. a `"photo"`
            view could have `"album"` has its `parent` view. This parent/child
            relationship is a useful cue for things like transitions.
            * `instance`: Used internally to manage the current instance of this named
            view. This can be used if your view instance is created up-front, or if
            you would rather manage the View lifecycle, but you probably should just
            let this be handled for you.
            If `views` are specified at instantiation time, the metadata in the `views`
            Object here will be used as defaults when creating the instance's `views`.
            Every `Y.App` instance gets its own copy of a `views` object so this Object
            on the prototype will not be polluted.
            </summary>
        </member>
        <member name="T:Y_.YUI_substitute">
            <summary>
            The following methods are added to the YUI instance
            </summary>
        </member>
        <member name="M:Y_.YUI_substitute.substitute(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Does {placeholder} substitution on a string.  The object passed as the
            second parameter provides values to replace the {placeholder}s.
            {placeholder} token names must match property names of the object.  For
            example
            `var greeting = Y.substitute("Hello, {who}!", { who: "World" });`
            {placeholder} tokens that are undefined on the object map will be left in
            tact (leaving unsightly "{placeholder}"s in the output string).  If your
            replacement strings *should* include curly braces, use `{LBRACE}` and
            `{RBRACE}` in your object map string value.
            If a function is passed as a third argument, it will be called for each
            {placeholder} found.  The {placeholder} name is passed as the first value
            and the value from the object map is passed as the second.  If the
            {placeholder} contains a space, the first token will be used to identify
            the object map property and the remainder will be passed as a third
            argument to the function.  See below for an example.
            If the value in the object map for a given {placeholder} is an object and
            the `dump` module is loaded, the replacement value will be the string
            result of calling `Y.dump(...)` with the object as input.  Include a
            numeric second token in the {placeholder} to configure the depth of the call
            to `Y.dump(...)`, e.g. "{someObject 2}".  See the
            <a href="../classes/YUI.html#method_dump">`dump`</a> method for details.
            </summary>
        </member>
        <member name="T:Y_.Test_.UnexpectedValue">
            <summary>
            UnexpectedValue is subclass of Error that is thrown whenever
            a value was unexpected in its scope. This typically means that a test
            was performed to determine that a value was *not* equal to a certain
            value.
            </summary>
        </member>
        <member name="M:Y_.Test_.UnexpectedValue.getMessage">
            <summary>
            Returns a fully formatted error for an assertion failure. This message
            provides information about the expected and actual values.
            </summary>
        </member>
        <member name="P:Y_.Test_.UnexpectedValue.unexpected">
            <summary>
            The unexpected value.
            </summary>
        </member>
        <member name="T:Y_.Test_.Reporter">
            <summary>
            An object capable of sending test results to a server.
            </summary>
        </member>
        <member name="M:Y_.Test_.Reporter.addField">
            <summary>
            Removes all previous defined fields.
            </summary>
        </member>
        <member name="M:Y_.Test_.Reporter.addField(System.Object,System.Object)">
            <summary>
            Adds a field to the form that submits the results.
            </summary>
        </member>
        <member name="M:Y_.Test_.Reporter.destroy">
            <summary>
            Cleans up the memory associated with the TestReporter, removing DOM elements
            that were created.
            </summary>
        </member>
        <member name="M:Y_.Test_.Reporter.report(System.Object)">
            <summary>
            Sends the report to the server.
            </summary>
        </member>
        <member name="P:Y_.Test_.Reporter.format">
            <summary>
            The formatting function to call when submitting the data.
            </summary>
        </member>
        <member name="T:Y_.Test_.CoverageFormat_.CoverageFormat">
            <summary>
            An object object containing coverage result formatting methods.
            </summary>
        </member>
        <member name="M:Y_.Test_.CoverageFormat_.CoverageFormat.JSON(System.Object)">
            <summary>
            Returns the coverage report in JSON format. This is the straight
            JSON representation of the native coverage report.
            </summary>
        </member>
        <member name="M:Y_.Test_.CoverageFormat_.CoverageFormat.XdebugJSON(System.Object)">
            <summary>
            Returns the coverage report in a JSON format compatible with
            Xdebug. See <a href="http://www.xdebug.com/docs/code_coverage">Xdebug Documentation</a>
            for more information. Note: function coverage is not available
            in this format.
            </summary>
        </member>
        <member name="T:Y_.TabView">
            <summary>
            Provides a tabbed widget interface
            </summary>
        </member>
        <member name="T:Y_.SWF">
            <summary>
            Creates the SWF instance and keeps the configuration data
            </summary>
        </member>
        <member name="M:Y_.SWF.callSWF(System.Object,Y_.Array)">
            <summary>
            Calls a specific function exposed by the SWF's
            ExternalInterface.
            </summary>
        </member>
        <member name="M:Y_.SWF.toString">
            <summary>
            Public accessor to the unique name of the SWF instance.
            </summary>
        </member>
        <member name="T:Y_.State">
            <summary>
            The State class maintains state for a collection of named items, with
            a varying number of properties defined.
            It avoids the need to create a separate class for the item, and separate instances
            of these classes for each item, by storing the state in a 2 level hash table,
            improving performance when the number of items is likely to be large.
            </summary>
        </member>
        <member name="M:Y_.State.add(System.Object,System.Object,System.Object)">
            <summary>
            Adds a property to an item.
            </summary>
        </member>
        <member name="M:Y_.State.addAll(System.Object,System.Object)">
            <summary>
            Adds multiple properties to an item.
            </summary>
        </member>
        <member name="M:Y_.State.get(System.Object,System.Object)">
            <summary>
            For a given item, returns the value of the property requested, or undefined if not found.
            </summary>
        </member>
        <member name="M:Y_.State.getAll(System.Object,System.Object)">
            <summary>
            For the given item, returns an object with all of the
            item's property/value pairs. By default the object returned
            is a shallow copy of the stored data, but passing in true
            as the second parameter will return a reference to the stored
            data.
            </summary>
        </member>
        <member name="M:Y_.State.remove(System.Object,System.Object)">
            <summary>
            Removes a property from an item.
            </summary>
        </member>
        <member name="M:Y_.State.removeAll(System.Object,System.Object)">
            <summary>
            Removes multiple properties from an item, or remove the item completely.
            </summary>
        </member>
        <member name="P:Y_.State.data">
            <summary>
            Hash of attributes
            </summary>
        </member>
        <member name="T:Y_.Selector">
            <summary>
            Provides support for using CSS selectors to query the DOM
            </summary>
        </member>
        <member name="M:Y_.Selector.ancestor(System.Object,System.Object,System.Object)">
            <summary>
            A convenience function to emulate Y.Node's aNode.ancestor(selector).
            </summary>
        </member>
        <member name="M:Y_.Selector.query(System.Object,System.Object,System.Object)">
            <summary>
            Retrieves a set of nodes based on a given CSS selector.
            </summary>
        </member>
        <member name="M:Y_.Selector.setHeight(System.Object,System.Object)">
            <summary>
            Sets the height of the element to the given size, regardless
            of box model, border, padding, etc.
            </summary>
        </member>
        <member name="M:Y_.Selector.setWidth(System.Object,System.Object)">
            <summary>
            Sets the width of the element to the given size, regardless
            of box model, border, padding, etc.
            </summary>
        </member>
        <member name="P:Y_.Selector.operators">
            <summary>
            List of operators and corresponding boolean functions.
            These functions are passed the attribute and the current node's value of the attribute.
            </summary>
        </member>
        <member name="P:Y_.Selector.shorthand">
            <summary>
            Mapping of shorthand tokens to corresponding attribute selector
            </summary>
        </member>
        <member name="T:Y_.ScrollView">
            <summary>
            ScrollView provides a scrollable widget, supporting flick gestures, across both touch and mouse based devices.
            </summary>
        </member>
        <member name="M:Y_.ScrollView._afterDimChange(System.Object)">
            <summary>
            After listener for the height or width attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._afterDisabledChange(System.Object)">
            <summary>
            After listener for changes to the disabled attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._afterDragChange(System.Object)">
            <summary>
            After listener for changes to the drag attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._afterFlickChange(System.Object)">
            <summary>
            After listener for changes to the flick attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._afterScrollChange(System.Object)">
            <summary>
            After listener for changes to the scrollX or scrollY attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._flick(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Execute a flick at the end of a scroll action
            </summary>
        </member>
        <member name="M:Y_.ScrollView._flickFrame">
            <summary>
            Execute a single frame in the flick animation
            </summary>
        </member>
        <member name="M:Y_.ScrollView._killTimer(System.Object)">
            <summary>
            Stop the animation timer
            </summary>
        </member>
        <member name="M:Y_.ScrollView._setScrollX(Y_.DataType_.Number)">
            <summary>
            Setter for the scrollX attribute
            </summary>
        </member>
        <member name="M:Y_.ScrollView._setScrollY(Y_.DataType_.Number)">
            <summary>
            Setter for the scrollY ATTR
            </summary>
        </member>
        <member name="M:Y_.ScrollView._uiDimensionsChange">
            <summary>
            This method gets invoked whenever the height or width attributes change,
            allowing us to determine which scrolling axes need to be enabled.
            </summary>
        </member>
        <member name="M:Y_.ScrollView._uiScrollTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            Used to move the ScrollView content
            </summary>
        </member>
        <member name="M:Y_.ScrollView._uiSizeCB">
            <summary>
            Override the contentBox sizing method, since the contentBox height
            should not be that of the boundingBox.
            </summary>
        </member>
        <member name="M:Y_.ScrollView.bindUI">
            <summary>
            bindUI implementation
            Hooks up events for the widget
            </summary>
        </member>
        <member name="M:Y_.ScrollView.initializer">
            <summary>
            Designated initializer
            </summary>
        </member>
        <member name="M:Y_.ScrollView.scrollTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            Scroll the element to a given xy coordinate
            </summary>
        </member>
        <member name="M:Y_.ScrollView.syncUI">
            <summary>
            syncUI implementation.
            Update the scroll position, based on the current value of scrollX/scrollY.
            </summary>
        </member>
        <member name="P:Y_.ScrollView._prevent">
            <summary>
            <p>Used to control whether or not ScrollView's internal
            gesturemovestart, gesturemove and gesturemoveend
            event listeners should preventDefault. The value is an
            object, with "start", "move" and "end" properties used to
            specify which events should preventDefault and which shouldn't:</p>
            <pre>
            {
            start : false,
            move : true,
            end : false
            }
            </pre>
            <p>The default values are set up in order to prevent panning,
            on touch devices, while allowing click listeners on elements inside
            the ScrollView to be notified as expected.</p>
            </summary>
        </member>
        <member name="P:Y_.ScrollView.bounce">
            <summary>
            Drag coefficient for intertial scrolling at the upper
            and lower boundaries of the scrollview. Set to 0 to
            disable "rubber-banding".
            </summary>
        </member>
        <member name="P:Y_.ScrollView.BOUNCE_RANGE">
            <summary>
            The default bounce distance in pixels
            </summary>
        </member>
        <member name="P:Y_.ScrollView.CLASS_NAMES">
            <summary>
            List of class names used in the scrollview's DOM
            </summary>
        </member>
        <member name="P:Y_.ScrollView.deceleration">
            <summary>
            Drag coefficent for inertial scrolling. The closer to 1 this
            value is, the less friction during scrolling.
            </summary>
        </member>
        <member name="P:Y_.ScrollView.flick">
            <summary>
            The minimum distance and/or velocity which define a flick. Can be set to false,
            to disable flick support (note: drag support is enabled/disabled separately)
            </summary>
        </member>
        <member name="P:Y_.ScrollView.FRAME_STEP">
            <summary>
            The interval used when animating the flick
            </summary>
        </member>
        <member name="P:Y_.ScrollView.lastScrolledAmt">
            <summary>
            Contains the distance (postive or negative) in pixels by which the scrollview was last scrolled. This is useful when
            setting up click listeners on the scrollview content, which on mouse based devices are always fired, even after a
            drag/flick.
            <p>Touch based devices don't currently fire a click event, if the finger has been moved (beyond a threshold) so this check isn't required,
            if working in a purely touch based environment</p>
            </summary>
        </member>
        <member name="P:Y_.ScrollView.scrollX">
            <summary>
            The scroll position in the x-axis
            </summary>
        </member>
        <member name="P:Y_.ScrollView.scrollY">
            <summary>
            The scroll position in the y-axis
            </summary>
        </member>
        <member name="T:Y_.Pollable">
            <summary>
            Adds polling to the DataSource Utility.
            </summary>
        </member>
        <member name="T:Y_.DataSource_.Local">
            <summary>
            Base class for the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Local._defDataFn(System.Object)">
            <summary>
            Normalizes raw data into a response that includes results and meta properties.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Local._defRequestFn(System.Object)">
            <summary>
            Manages request/response transaction. Must fire <code>response</code>
            event when response is received. This method should be implemented by
            subclasses to achieve more complex behavior such as accessing remote data.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Local._defResponseFn(System.Object)">
            <summary>
            Sends data as a normalized response to callback.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Local.issueCallback(Y_.EventFacade,System.Object)">
            <summary>
            Returns data to callback.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Local.sendRequest(System.Object)">
            <summary>
            Generates a unique transaction ID and fires <code>request</code> event.
            <strong>Note</strong>: the property <code>callback</code> is a
            deprecated alias for the <code>on</code> transaction configuration
            property described below.
            </summary>
        </member>
        <member name="P:Y_.DataSource_.Local.transactions">
            <summary>
            Global in-progress transaction objects.
            </summary>
        </member>
        <member name="M:Y_.Pollable.clearAllIntervals">
            <summary>
            Clears all intervals.
            </summary>
        </member>
        <member name="M:Y_.Pollable.clearInterval(Y_.DataType_.Number)">
            <summary>
            Disables polling mechanism associated with the given interval ID.
            </summary>
        </member>
        <member name="M:Y_.Pollable.setInterval(Y_.DataType_.Number,System.Object)">
            <summary>
            Sets up a polling mechanism to send requests at set intervals and
            forward responses to given callback.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ResizeProxy">
            <summary>
            Adds a `proxyNode` attribute and resizes it instead of the actual node. __very similar to DDProxy__
            var resize = new Y.Resize({
            //Selector of the node to resize
            node: '#demo'
            });
            resize.plug(Y.Plugin.ResizeProxy);
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeProxy._renderProxy">
            <summary>
            Render the <a href="ResizeProxy.html#attr_proxyNode">proxyNode</a> element and
            make it sibling of the <a href="Resize.html#attr_node">node</a>.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ResizeProxy._syncProxyUI">
            <summary>
            Sync the proxy UI with internal values from
            <a href="ResizeProxy.html#property_info">info</a>.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Resize">
            <summary>
            The Resize Plugin allows you to make a Node or a Widget resizable. It supports all the functionality of
            the standalone Resize utility. Additionally, resizing a widget updates the widget's height,width and x,y
            attributes, if they exist.
            var overlay = new Y.Overlay({
            width: "200px",
            srcNode: "#overlay",
            visible: false,
            align: {node:".example", points:["tc", "bc"]}
            });
            overlay.plug(Y.Plugin.Resize);
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Resize.initializer">
            <summary>
            Stores the values for node and widget, and sets up an event-listener
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Resize.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration for the Resize plugin.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Resize.node">
            <summary>
            Stores the node that is being resized
            </summary>
        </member>
        <member name="P:Y_.Plugin_.Resize.widget">
            <summary>
            Stores the widget that the node belongs to, if one exists
            </summary>
        </member>
        <member name="T:Y_.Plugin_.Host">
            <summary>
            <p>
            An augmentable class, which provides the augmented class with the ability to host plugins.
            It adds <a href="#method_plug">plug</a> and <a href="#method_unplug">unplug</a> methods to the augmented class, which can
            be used to add or remove plugins from instances of the class.
            </p>
            <p>Plugins can also be added through the constructor configuration object passed to the host class' constructor using
            the "plugins" property. Supported values for the "plugins" property are those defined by the <a href="#method_plug">plug</a> method.
            For example the following code would add the AnimPlugin and IOPlugin to Overlay (the plugin host):
            <xmp>
            var o = new Overlay({plugins: [ AnimPlugin, {fn:IOPlugin, cfg:{section:"header"}}]});
            </xmp>
            </p>
            <p>
            Plug.Host's protected <a href="#method_initPlugins">_initPlugins</a> and <a href="#method_destroyPlugins">_destroyPlugins</a>
            methods should be invoked by the host class at the appropriate point in the host's lifecyle.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host._initConfigPlugins(System.Object)">
            <summary>
            A protected initialization method, used by the host class to initialize
            plugin configurations passed the constructor, through the config object.
            Host objects should invoke this method at the appropriate time in their
            construction lifecycle.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host.hasPlugin(System.Object)">
            <summary>
            Determines if a plugin has plugged into this host.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host.plug(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Registers plugins to be instantiated at the class level (plugins
            which should be plugged into every instance of the class by default).
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host.plug(System.Object,System.Object)">
            <summary>
            Adds a plugin to the host object. This will instantiate the
            plugin and attach it to the configured namespace on the host object.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host.unplug(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Unregisters any class level plugins which have been registered by the host class, or any
            other class in the hierarchy.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.Host.unplug(System.Object)">
            <summary>
            Removes a plugin from the host object. This will destroy the
            plugin instance and delete the namepsace from the host object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Handlebars" -->
        <member name="M:Y_.Handlebars.compile(System.Object)">
            <summary>
            Compiles a Handlebars template string into a function. To render the template,
            call the function and pass in a context object.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.compile(System.Object,System.Object)">
            <summary>
            Compiles a Handlebars template string into a function. To render the template,
            call the function and pass in a context object.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.log(System.Object,System.Object)">
            <summary>
            Logs a debugging message. Note that messages will only be logged when the
            handlebars module is loaded in "debug" mode.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.precompile(System.Object)">
            <summary>
            Precompiles a Handlebars template string into a string of JavaScript code. This
            can be used to precompile a template at build time or on the server, and the
            resulting template can then be rendered at runtime or on the client without
            needing to go through a compile step.
            To render a precompiled template, evaluate the code and then pass the resulting
            function to `Y.Handlebars.template()` to get back an executable template
            function.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.precompile(System.Object,System.Object)">
            <summary>
            Precompiles a Handlebars template string into a string of JavaScript code. This
            can be used to precompile a template at build time or on the server, and the
            resulting template can then be rendered at runtime or on the client without
            needing to go through a compile step.
            To render a precompiled template, evaluate the code and then pass the resulting
            function to `Y.Handlebars.template()` to get back an executable template
            function.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.registerHelper(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Registers a helper function that will be made available to all templates.
            Helper functions receive the current template context as the `this` object, and
            can also receive arguments passed by the template.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.registerHelper(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Registers a helper function that will be made available to all templates.
            Helper functions receive the current template context as the `this` object, and
            can also receive arguments passed by the template.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.registerPartial(System.Object,System.Object)">
            <summary>
            Registers a partial that will be made available to all templates.
            A partial is another template that can be used to render part of a larger
            template. For example, a website with a common header and footer across all its
            pages might use a template for each page, which would call shared partials to
            render the headers and footers.
            Partials may be specified as uncompiled template strings or as compiled template
            functions.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.render(System.Object,System.Object)">
            <summary>
            Compiles and renders a Handlebars template string in a single step.
            If you'll be using a template more than once, it's more efficient to compile it
            into a function once using `compile()`, and then render it whenever you need to
            by simply executing the compiled function. However, if you only need to compile
            and render a template once, `render()` is a handy shortcut for doing both in a
            single step.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.render(System.Object,System.Object,System.Object)">
            <summary>
            Compiles and renders a Handlebars template string in a single step.
            If you'll be using a template more than once, it's more efficient to compile it
            into a function once using `compile()`, and then render it whenever you need to
            by simply executing the compiled function. However, if you only need to compile
            and render a template once, `render()` is a handy shortcut for doing both in a
            single step.
            </summary>
        </member>
        <member name="M:Y_.Handlebars.template(SharpKit.JavaScript.JsAction)">
            <summary>
            Converts a precompiled template into a renderable template function.
            </summary>
        </member>
        <member name="T:Y_.GroupRect">
            <summary>
            Abstract class for creating groups of rects with the same styles and dimensions.
            </summary>
        </member>
        <member name="T:Y_.FileHTML5">
            <summary>
            The class provides a wrapper for a file pointer.
            </summary>
        </member>
        <member name="M:Y_.FileHTML5._uplodEventHandler(Y_.Event)">
            <summary>
            Handler of events dispatched by the XMLHTTPRequest.
            </summary>
        </member>
        <member name="M:Y_.FileHTML5.cancelUpload">
            <summary>
            Cancels the upload of a specific file, if currently in progress.
            </summary>
        </member>
        <member name="M:Y_.FileHTML5.canUpload">
            <summary>
            Checks whether the browser has a native upload capability
            via XMLHttpRequest Level 2.
            </summary>
        </member>
        <member name="M:Y_.FileHTML5.initializer">
            <summary>
            Construction logic executed during FileHTML5 instantiation.
            </summary>
        </member>
        <member name="M:Y_.FileHTML5.isValidFile(Y_.File)">
            <summary>
            Checks whether a specific native file instance is valid
            </summary>
        </member>
        <member name="M:Y_.FileHTML5.startUpload(System.Object,System.Object,System.Object)">
            <summary>
            Starts the upload of a specific file.
            </summary>
        </member>
        <member name="T:Y_.Drawing">
            <summary>
            `Drawing` provides a set of drawing methods used by `Path` and custom shape classes.
            `Drawing` has the following implementations based on browser capability.
            <ul>
            <li><a href="SVGDrawing.html">`SVGDrawing`</a></li>
            <li><a href="VMLDrawing.html">`VMLDrawing`</a></li>
            <li><a href="CanvasDrawing.html">`CanvasDrawing`</a></li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.Drawing.clear">
            <summary>
            Clears the path.
            </summary>
        </member>
        <member name="M:Y_.Drawing.curveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a bezier curve.
            </summary>
        </member>
        <member name="M:Y_.Drawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Y_.Drawing.drawRoundRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:Y_.Drawing.end">
            <summary>
            Completes a drawing operation.
            </summary>
        </member>
        <member name="M:Y_.Drawing.lineTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.Drawing.moveTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Moves the current drawing position to specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.Drawing.quadraticCurveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a quadratic bezier curve.
            </summary>
        </member>
        <member name="T:Y_.DOM">
            <summary>
            Provides DOM helper methods.
            </summary>
        </member>
        <member name="M:Y_.DOM.addClass(System.Object,System.Object)">
            <summary>
            Adds a class name to a given DOM element.
            </summary>
        </member>
        <member name="M:Y_.DOM.addHTML(System.Object,System.Object,System.Object)">
            <summary>
            Inserts content in a node at the given location
            </summary>
        </member>
        <member name="M:Y_.DOM.byId(System.Object,System.Object)">
            <summary>
            Returns the HTMLElement with the given ID (Wrapper for document.getElementById).
            </summary>
        </member>
        <member name="M:Y_.DOM.contains(System.Object,System.Object)">
            <summary>
            Determines whether or not one HTMLElement is or contains another HTMLElement.
            </summary>
        </member>
        <member name="M:Y_.DOM.create(System.Object,System.Object)">
            <summary>
            Creates a new dom node using the provided markup string.
            </summary>
        </member>
        <member name="M:Y_.DOM.docHeight">
            <summary>
            Document height
            </summary>
        </member>
        <member name="M:Y_.DOM.docScrollX">
            <summary>
            Amount page has been scroll horizontally
            </summary>
        </member>
        <member name="M:Y_.DOM.docScrollY">
            <summary>
            Amount page has been scroll vertically
            </summary>
        </member>
        <member name="M:Y_.DOM.docWidth">
            <summary>
            Document width
            </summary>
        </member>
        <member name="M:Y_.DOM.elementByAxis(System.Object,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Searches the element by the given axis for the first matching element.
            </summary>
        </member>
        <member name="M:Y_.DOM.getAttribute(System.Object,System.Object)">
            <summary>
            Provides a normalized attribute interface.
            </summary>
        </member>
        <member name="M:Y_.DOM.getComputedStyle(System.Object,System.Object)">
            <summary>
            Returns the computed style for the given node.
            </summary>
        </member>
        <member name="M:Y_.DOM.getScrollbarWidth">
            <summary>
            Gets the width of vertical scrollbars on overflowed containers in the body
            content.
            </summary>
        </member>
        <member name="M:Y_.DOM.getStyle(System.Object,System.Object)">
            <summary>
            Returns the current style value for the given property.
            </summary>
        </member>
        <member name="M:Y_.DOM.getText(System.Object)">
            <summary>
            Returns the text content of the HTMLElement.
            </summary>
        </member>
        <member name="M:Y_.DOM.getX(System.Object)">
            <summary>
            Gets the current X position of an element based on page coordinates.
            Element must be part of the DOM tree to have page coordinates
            (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.getXY(System.Object)">
            <summary>
            Gets the current position of an element based on page coordinates.
            Element must be part of the DOM tree to have page coordinates
            (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.getY(System.Object)">
            <summary>
            Gets the current Y position of an element based on page coordinates.
            Element must be part of the DOM tree to have page coordinates
            (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.hasClass(System.Object,System.Object)">
            <summary>
            Determines whether a DOM element has the given className.
            </summary>
        </member>
        <member name="M:Y_.DOM.inDoc(System.Object,System.Object)">
            <summary>
            Determines whether or not the HTMLElement is part of the document.
            </summary>
        </member>
        <member name="M:Y_.DOM.inRegion(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Check if any part of this node is in the passed region
            </summary>
        </member>
        <member name="M:Y_.DOM.intersect(System.Object,System.Object,System.Object)">
            <summary>
            Find the intersect information for the passed nodes.
            </summary>
        </member>
        <member name="M:Y_.DOM.inViewportRegion(System.Object,System.Object,System.Object)">
            <summary>
            Check if any part of this element is in the viewport
            </summary>
        </member>
        <member name="M:Y_.DOM.region(System.Object)">
            <summary>
            Returns an Object literal containing the following about this element: (top, right, bottom, left)
            </summary>
        </member>
        <member name="M:Y_.DOM.removeClass(System.Object,System.Object)">
            <summary>
            Removes a class name from a given element.
            </summary>
        </member>
        <member name="M:Y_.DOM.replaceClass(System.Object,System.Object,System.Object)">
            <summary>
            Replace a class with another class for a given element.
            If no oldClassName is present, the newClassName is simply added.
            </summary>
        </member>
        <member name="M:Y_.DOM.setAttribute(System.Object,System.Object,System.Object)">
            <summary>
            Provides a normalized attribute interface.
            </summary>
        </member>
        <member name="M:Y_.DOM.setStyle(System.Object,System.Object,System.Object)">
            <summary>
            Sets a style property for a given element.
            </summary>
        </member>
        <member name="M:Y_.DOM.setStyles(System.Object,System.Object)">
            <summary>
            Sets multiple style properties.
            </summary>
        </member>
        <member name="M:Y_.DOM.setText(System.Object,System.Object)">
            <summary>
            Sets the text content of the HTMLElement.
            </summary>
        </member>
        <member name="M:Y_.DOM.setX(System.Object,Y_.DataType_.Number)">
            <summary>
            Set the X position of an html element in page coordinates, regardless of how the element is positioned.
            The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.setXY(System.Object,Y_.Array,System.Object)">
            <summary>
            Set the position of an html element in page coordinates.
            The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.setY(System.Object,Y_.DataType_.Number)">
            <summary>
            Set the Y position of an html element in page coordinates, regardless of how the element is positioned.
            The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
        </member>
        <member name="M:Y_.DOM.swapXY(Y_.Node,Y_.Node)">
            <summary>
            Swap the xy position with another node
            </summary>
        </member>
        <member name="M:Y_.DOM.toggleClass(System.Object,System.Object,System.Object)">
            <summary>
            If the className exists on the node it is removed, if it doesn't exist it is added.
            </summary>
        </member>
        <member name="M:Y_.DOM.viewportRegion">
            <summary>
            Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)
            </summary>
        </member>
        <member name="M:Y_.DOM.winHeight">
            <summary>
            Returns the inner height of the viewport (exludes scrollbar).
            </summary>
        </member>
        <member name="M:Y_.DOM.winWidth">
            <summary>
            Returns the inner width of the viewport (exludes scrollbar).
            </summary>
        </member>
        <member name="T:Y_.DD_.Plugin_.DDWindowScroll">
            <summary>
            Extends the Scroll class to make the window scroll while dragging.
            </summary>
        </member>
        <member name="T:Y_.DataSource_.IO">
            <summary>
            IO subclass for the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.IO._defRequestFn(System.Object)">
            <summary>
            Passes query string to IO. Fires <code>response</code> event when
            response is received asynchronously.
            </summary>
        </member>
        <member name="P:Y_.DataSource_.IO.ioConfig">
            <summary>
            Default IO Config.
            </summary>
        </member>
        <member name="T:Y_.CanvasPieSlice">
            <summary>
            Draws pie slices
            </summary>
        </member>
        <member name="T:Y_.ButtonCore">
            <summary>
            Creates a button
            </summary>
        </member>
        <member name="M:Y_.ButtonCore.disable">
            <summary>
            Sets the button's `disabled` DOM attribute to true
            </summary>
        </member>
        <member name="M:Y_.ButtonCore.enable">
            <summary>
            Sets the button's `disabled` DOM attribute to false
            </summary>
        </member>
        <member name="M:Y_.ButtonCore.getNode">
            <summary>
            Gets the host node for this button instance
            </summary>
        </member>
        <member name="T:Y_.AttributeEvents">
            <summary>
            Provides an augmentable implementation of attribute change events for
            AttributeCore.
            </summary>
        </member>
        <member name="M:Y_.AttributeEvents._set(System.Object,System.Object,System.Object)">
            <summary>
            Allows setting of readOnly/writeOnce attributes. See <a href="#method_set">set</a> for argument details.
            </summary>
        </member>
        <member name="M:Y_.AttributeEvents.set(System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.AttributeEvents.setAttrs(System.Object)">
            <summary>
            Sets multiple attribute values.
            </summary>
        </member>
        <member name="T:Y_.VMLPieSlice">
            <summary>
            Draws pie slices
            </summary>
        </member>
        <member name="T:Y_.Test_.Console">
            <summary>
            Provides a specialized log console widget that's pre-configured to display YUI
            Test output with no extra configuration.
            </summary>
        </member>
        <member name="T:Y_.StackedSplineSeries">
            <summary>
            StackedSplineSeries creates spline graphs in which the different series are stacked along a value axis
            to indicate their contribution to a cumulative total.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.DDNodeScroll">
            <summary>
            Extends the Scroll class to make a parent node scroll while dragging.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.DDNodeScroll.node">
            <summary>
            The node we want to scroll. Used to set the internal parentScroll attribute.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.CreateLinkBase">
            <summary>
            Adds prompt style link creation. Adds an override for the <a href="Plugin.ExecCommand.html#method_COMMANDS.createlink">createlink execCommand</a>.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CreateLinkBase.DEFAULT">
            <summary>
            String used as the default value of the Prompt
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CreateLinkBase.PROMPT">
            <summary>
            String used for the Prompt
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CreateLinkBase.STRINGS">
            <summary>
            Strings used by the plugin
            </summary>
        </member>
        <member name="T:Y_.LeftAxisLayout">
            <summary>
            Algorithmic strategy for rendering a left axis.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout._getTransformOrigin(Y_.DataType_.Number)">
            <summary>
            Returns the transformOrigin to use for an axis label based on the position of the axis
            and the rotation of the label.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout._setRotationCoords(System.Object)">
            <summary>
            Adjusts the coordinates of an axis label based on the rotation.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.drawTick(Y_.Path,System.Object,System.Object)">
            <summary>
            Draws a tick
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.getExplicitlySized">
            <summary>
            Determines the available label width when the axis width has been explicitly set.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.getLabelPoint(System.Object)">
            <summary>
            Calculates the point for a label.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.getLineStart">
            <summary>
            Calculates the coordinates for the first point on an axis.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.offsetNodeForTick(Y_.Node)">
            <summary>
            Adjust the position of the Axis widget's content box for internal axes.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.positionLabel(System.Object,System.Object)">
            <summary>
            Rotate and position labels.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.positionTitle(System.Object)">
            <summary>
            Rotate and position title.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.setCalculatedSize">
            <summary>
            Sets the width of the axis based on its contents.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.setTickOffset">
            <summary>
            Sets the length of the tick on either side of the axis line.
            </summary>
        </member>
        <member name="M:Y_.LeftAxisLayout.updateMaxLabelSize(System.Object)">
            <summary>
            Updates the value for the `maxLabelSize` for use in calculating total size.
            </summary>
        </member>
        <member name="T:Y_.Intl">
            <summary>
            The Intl utility provides a central location for managing sets of
            localized resources (strings and formatting patterns).
            </summary>
        </member>
        <member name="M:Y_.Intl.add(System.Object,System.Object,System.Object)">
            <summary>
            Register a hash of localized resources for the given module and language
            </summary>
        </member>
        <member name="M:Y_.Intl.get(System.Object,System.Object,System.Object)">
            <summary>
            Gets the module's localized resources for the currently active language (as provided by the <a href="#method_getLang">getLang</a> method).
            <p>
            Optionally, the localized resources for alternate languages which have been added to Intl (see the <a href="#method_add">add</a> method) can
            be retrieved by providing the BCP 47 language tag as the lang parameter.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Intl.getAvailableLangs(System.Object)">
            <summary>
            Gets the list of languages for which localized resources are available for a given module, based on the module
            meta-data (part of loader). If loader is not on the page, returns an empty array.
            </summary>
        </member>
        <member name="M:Y_.Intl.getLang(System.Object)">
            <summary>
            Get the currently active language for the given module.
            </summary>
        </member>
        <member name="M:Y_.Intl.lookupBestLang(System.Object,System.Object)">
            <summary>
            Returns the language among those available that
            best matches the preferred language list, using the Lookup
            algorithm of BCP 47.
            If none of the available languages meets the user's preferences,
            then "" is returned.
            Extended language ranges are not supported.
            </summary>
        </member>
        <member name="M:Y_.Intl.setLang(System.Object,System.Object)">
            <summary>
            Sets the active language for the given module.
            Returns false on failure, which would happen if the language had not been registered through the <a href="#method_add">add()</a> method.
            </summary>
        </member>
        <member name="T:Y_.HistoryHTML5">
            <summary>
            <p>
            Provides browser history management using the HTML5 history API.
            </p>
            <p>
            When calling the <code>add()</code>, <code>addValue()</code>,
            <code>replace()</code>, or <code>replaceValue()</code> methods on
            <code>HistoryHTML5</code>, the following additional options are supported:
            </p>
            <dl>
            <dt><strong>title (String)</strong></dt>
            <dd>
            Title to use for the new history entry. Browsers will typically display
            this title to the user in the detailed history window or in a dropdown
            menu attached to the back/forward buttons. If not specified, the title
            of the current document will be used.
            </dd>
            <dt><strong>url (String)</strong></dt>
            <dd>
            URL to display to the user for the new history entry. This URL will be
            visible in the browser's address bar and will be the bookmarked URL if
            the user bookmarks the page. It may be a relative path ("foo/bar"), an
            absolute path ("/foo/bar"), or a full URL ("http://example.com/foo/bar").
            If you specify a full URL, the origin <i>must</i> be the same as the
            origin of the current page, or an error will occur. If no URL is
            specified, the current URL will not be changed.
            </dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.HistoryBase">
            <summary>
            Provides global state management backed by an object, but with no browser
            history integration. For actual browser history integration and back/forward
            support, use the history-html5 or history-hash modules.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._change(System.Object,System.Object,System.Object)">
            <summary>
            Changes the state. This method provides a common implementation shared by
            the public methods for changing state.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._defChangeFn(Y_.EventFacade)">
            <summary>
            Default <code>history:change</code> event handler.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._fireChangeEvent(System.Object,System.Object,System.Object)">
            <summary>
            Fires a dynamic "[key]Change" event.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._fireEvents(System.Object,System.Object,System.Object)">
            <summary>
            Called by _resolveChanges() when the state has changed. This method takes
            care of actually firing the necessary events.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._fireRemoveEvent(System.Object,System.Object,System.Object)">
            <summary>
            Fires a dynamic "[key]Remove" event.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._init(System.Object)">
            <summary>
            Initializes this HistoryBase instance. This method is called by the
            constructor.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._resolveChanges(System.Object,System.Object,System.Object)">
            <summary>
            Resolves the changes (if any) between <i>newState</i> and the current
            state and fires appropriate events if things have changed.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase._storeState(System.Object,System.Object,System.Object)">
            <summary>
            Stores the specified state. Don't call this method directly; go through
            _resolveChanges() to ensure that changes are resolved and all events are
            fired properly.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase.add(System.Object,System.Object)">
            <summary>
            Adds a state entry with new values for the specified keys. By default,
            the new state will be merged into the existing state, and new values will
            override existing values. Specifying a <code>null</code> or
            <code>undefined</code> value will cause that key to be removed from the
            new state entry.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase.addValue(System.Object,System.Object,System.Object)">
            <summary>
            Adds a state entry with a new value for a single key. By default, the new
            value will be merged into the existing state values, and will override an
            existing value with the same key if there is one. Specifying a
            <code>null</code> or <code>undefined</code> value will cause the key to
            be removed from the new state entry.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase.get(System.Object)">
            <summary>
            Returns the current value of the state parameter specified by <i>key</i>,
            or an object hash of key/value pairs for all current state parameters if
            no key is specified.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase.replace(System.Object,System.Object)">
            <summary>
            Same as <code>add()</code> except that a new browser history entry will
            not be created. Instead, the current history entry will be replaced with
            the new state.
            </summary>
        </member>
        <member name="M:Y_.HistoryBase.replaceValue(System.Object,System.Object,System.Object)">
            <summary>
            Same as <code>addValue()</code> except that a new browser history entry
            will not be created. Instead, the current history entry will be replaced
            with the new state.
            </summary>
        </member>
        <member name="P:Y_.HistoryBase._config">
            <summary>
            Configuration object provided by the user on instantiation, or an
            empty object if one wasn't provided.
            </summary>
        </member>
        <member name="M:Y_.HistoryHTML5._onPopState(Y_.Event)">
            <summary>
            Handler for popstate events.
            </summary>
        </member>
        <member name="M:Y_.HistoryHTML5._storeState(System.Object,System.Object,System.Object)">
            <summary>
            Overrides HistoryBase's <code>_storeState()</code> and pushes or replaces
            a history entry using the HTML5 history API when necessary.
            </summary>
        </member>
        <member name="T:Y_.FileFlash">
            <summary>
            The class provides a wrapper for a file pointer in Flash.
            </summary>
        </member>
        <member name="M:Y_.FileFlash._swfEventHandler(Y_.Event)">
            <summary>
            Handler of events dispatched by the Flash player.
            </summary>
        </member>
        <member name="M:Y_.FileFlash.cancelUpload">
            <summary>
            Cancels the upload of a specific file, if currently in progress.
            </summary>
        </member>
        <member name="M:Y_.FileFlash.initializer">
            <summary>
            Construction logic executed during FileFlash instantiation.
            </summary>
        </member>
        <member name="M:Y_.FileFlash.startUpload(System.Object,System.Object,System.Object)">
            <summary>
            Starts the upload of a specific file.
            </summary>
        </member>
        <member name="T:Y_.Features">
            <summary>
            Feature detection
            </summary>
        </member>
        <member name="M:Y_.Features.add(System.Object,System.Object,System.Object)">
            <summary>
            Add a test to the system
            ```
            Y.Features.add("load", "1", {});
            ```
            </summary>
        </member>
        <member name="M:Y_.Features.all(System.Object,Y_.Array)">
            <summary>
            Execute all tests of a given category and return the serialized results
            ```
            caps=1:1;2:1;3:0
            ```
            </summary>
        </member>
        <member name="M:Y_.Features.test(System.Object,System.Object,Y_.Array)">
            <summary>
            Run a sepecific test and return a Boolean response.
            ```
            Y.Features.test("load", "1");
            ```
            </summary>
        </member>
        <member name="P:Y_.Features.tests">
            <summary>
            Object hash of all registered feature tests
            </summary>
        </member>
        <member name="T:Y_.EventHandle">
            <summary>
            Return value from all subscribe operations
            </summary>
        </member>
        <member name="M:Y_.EventHandle.detach">
            <summary>
            Detaches this subscriber
            </summary>
        </member>
        <member name="M:Y_.EventHandle.monitor(System.Object)">
            <summary>
            Monitor the event state for the subscribed event.  The first parameter
            is what should be monitored, the rest are the normal parameters when
            subscribing to an event.
            </summary>
        </member>
        <member name="P:Y_.EventHandle.evt">
            <summary>
            The custom event
            </summary>
        </member>
        <member name="P:Y_.EventHandle.sub">
            <summary>
            The subscriber object
            </summary>
        </member>
        <member name="T:Y_.EditorBase">
            <summary>
            Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events.
            var editor = new Y.EditorBase({
            content: 'Foo'
            });
            editor.render('#demo');
            </summary>
        </member>
        <member name="M:Y_.EditorBase.copyStyles(Y_.Node,Y_.Node)">
            <summary>
            Copy certain styles from one node instance to another (used for new paragraph creation mainly)
            </summary>
        </member>
        <member name="M:Y_.EditorBase.execCommand(System.Object,System.Object)">
            <summary>
            Pass through to the frame.execCommand method
            </summary>
        </member>
        <member name="M:Y_.EditorBase.FILTER_RGB(System.Object)">
            <summary>
            Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00
            </summary>
        </member>
        <member name="M:Y_.EditorBase.focus(SharpKit.JavaScript.JsAction)">
            <summary>
            Focus the contentWindow of the iframe
            </summary>
        </member>
        <member name="M:Y_.EditorBase.getContent">
            <summary>
            (Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering
            </summary>
        </member>
        <member name="M:Y_.EditorBase.getDomPath(Y_.Node)">
            <summary>
            Walk the dom tree from this node up to body, returning a reversed array of parents.
            </summary>
        </member>
        <member name="M:Y_.EditorBase.getInstance">
            <summary>
            Get the YUI instance of the frame
            </summary>
        </member>
        <member name="M:Y_.EditorBase.hide">
            <summary>
            Handles the hiding of the Editor instance. Currently only handles the iframe
            </summary>
        </member>
        <member name="M:Y_.EditorBase.NORMALIZE_FONTSIZE">
            <summary>
            Pulls the fontSize from a node, then checks for string values (x-large, x-small)
            and converts them to pixel sizes. If the parsed size is different from the original, it calls
            node.setStyle to update the node with a pixel size for normalization.
            </summary>
        </member>
        <member name="M:Y_.EditorBase.render(System.Object)">
            <summary>
            Renders the Y.Frame to the passed node.
            </summary>
        </member>
        <member name="M:Y_.EditorBase.show">
            <summary>
            Handles the showing of the Editor instance. Currently only handles the iframe
            </summary>
        </member>
        <member name="P:Y_.EditorBase.content">
            <summary>
            The content to load into the Editor Frame
            </summary>
        </member>
        <member name="P:Y_.EditorBase.dir">
            <summary>
            The value of the dir attribute on the HTML element of the frame. Default: ltr
            </summary>
        </member>
        <member name="P:Y_.EditorBase.frame">
            <summary>
            Internal reference to the Y.Frame instance
            </summary>
        </member>
        <member name="P:Y_.EditorBase.NAME">
            <summary>
            The Class Name: editorBase
            </summary>
        </member>
        <member name="P:Y_.EditorBase.NC_KEYS">
            <summary>
            Hash table of keys to fire a nodeChange event for.
            </summary>
        </member>
        <member name="P:Y_.EditorBase.STRINGS">
            <summary>
            Editor Strings.  By default contains only the `title` property for the
            Title of frame document (default "Rich Text Editor").
            </summary>
        </member>
        <member name="P:Y_.EditorBase.TABKEY">
            <summary>
            The HTML markup to use for the tabkey
            </summary>
        </member>
        <member name="P:Y_.EditorBase.TAG2CMD">
            <summary>
            A hash table of tags to their execcomand's
            </summary>
        </member>
        <member name="P:Y_.EditorBase.USE">
            <summary>
            The default modules to use inside the Frame
            </summary>
        </member>
        <member name="T:Y_.Do">
            <summary>
            Allows for the insertion of methods that are executed before or after
            a specified method
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Do.after(SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Y_.Do.before(SharpKit.JavaScript.JsAction,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:Y_.Do.detach(System.Object)">
            <summary>
            Detach a before or after subscription.
            </summary>
        </member>
        <member name="P:Y_.Do.currentRetVal">
            <summary>
            Contains the current state of the return value, consumable by
            'after' event listeners, and updated if an after subscriber
            changes the return value generated by the wrapped function.
            </summary>
        </member>
        <member name="P:Y_.Do.objs">
            <summary>
            Cache of objects touched by the utility
            </summary>
        </member>
        <member name="P:Y_.Do.originalRetVal">
            <summary>
            Contains the return value from the wrapped method, accessible
            by 'after' event listeners.
            </summary>
        </member>
        <member name="T:Y_.Dial">
            <summary>
            Create a dial to represent an input control capable of representing a
            series of intermediate states based on the position of the Dial's handle.
            These states are typically aligned to a value algorithm whereby the angle of the handle's
            position corresponds to a given value.
            </summary>
        </member>
        <member name="M:Y_.Dial._afterValueChange(Y_.Event)">
            <summary>
            calls the method to update the UI whenever the Dial value changes
            </summary>
        </member>
        <member name="M:Y_.Dial._calculateDialCenter">
            <summary>
            calculates the XY of the center of the dial relative to the ring node.
            This is needed for calculating the angle of the handle
            </summary>
        </member>
        <member name="M:Y_.Dial._decrMajor">
            <summary>
            decrements Dial value by a major increment
            </summary>
        </member>
        <member name="M:Y_.Dial._decrMinor">
            <summary>
            decrements Dial value by a minor increment
            </summary>
        </member>
        <member name="M:Y_.Dial._getAngleFromHandleCenter(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            gets the angle of the line from the center of the Dial to the center of the handle
            </summary>
        </member>
        <member name="M:Y_.Dial._getAngleFromValue(Y_.DataType_.Number)">
            <summary>
            returns the handle angle associated with the current value of the Dial.
            Returns a number between 0 and 360.
            </summary>
        </member>
        <member name="M:Y_.Dial._getValueFromAngle(Y_.DataType_.Number)">
            <summary>
            returns the value of the Dial calculated from the current handle angle
            </summary>
        </member>
        <member name="M:Y_.Dial._handleCenterButtonEnter">
            <summary>
            Handles the mouseenter on the centerButton
            </summary>
        </member>
        <member name="M:Y_.Dial._handleCenterButtonLeave">
            <summary>
            Handles the mouseleave on the centerButton
            </summary>
        </member>
        <member name="M:Y_.Dial._handleCenterButtonMouseup">
            <summary>
            Handles the mouseup on the centerButton
            </summary>
        </member>
        <member name="M:Y_.Dial._handleDrag(System.Object)">
            <summary>
            handles the user dragging the handle around the Dial, gets the angle,
            checks for wrapping around top center.
            Sets the new value of the Dial
            </summary>
        </member>
        <member name="M:Y_.Dial._handleDragEnd">
            <summary>
            handles the end of a user dragging the handle, animates the handle returning to
            resting position.
            </summary>
        </member>
        <member name="M:Y_.Dial._handleDragStart(System.Object)">
            <summary>
            handles the user starting to drag the handle around the Dial
            </summary>
        </member>
        <member name="M:Y_.Dial._handleHandleMousedown">
            <summary>
            Handles the mousedown on the handle
            </summary>
        </member>
        <member name="M:Y_.Dial._handleRingMouseup">
            <summary>
            Handles the mouseup on the ring
            </summary>
        </member>
        <member name="M:Y_.Dial._handleValuesBeyondMinMax(System.Object,Y_.DataType_.Number)">
            <summary>
            handles the case where the value is less than min or greater than max
            </summary>
        </member>
        <member name="M:Y_.Dial._incrMajor">
            <summary>
            increments Dial value by a major increment
            </summary>
        </member>
        <member name="M:Y_.Dial._incrMinor">
            <summary>
            increments Dial value by a minor increment
            </summary>
        </member>
        <member name="M:Y_.Dial._onDirectionKey(Y_.Event)">
            <summary>
            sets the Dial's value in response to key events.
            Left and right keys are in a separate method
            in case an implementation wants to increment values
            but needs left and right arrow keys for other purposes.
            </summary>
        </member>
        <member name="M:Y_.Dial._onLeftRightKey(Y_.Event)">
            <summary>
            sets the Dial's value in response to left or right key events
            </summary>
        </member>
        <member name="M:Y_.Dial._onLeftRightKeyMeta(Y_.Event)">
            <summary>
            sets the Dial's value in response to left or right key events when a meta (mac command/apple) key is also pressed
            </summary>
        </member>
        <member name="M:Y_.Dial._renderCenterButton">
            <summary>
            renders the DOM object for the Dial's center
            </summary>
        </member>
        <member name="M:Y_.Dial._renderHandle">
            <summary>
            renders the DOM object for the Dial's user draggable handle
            </summary>
        </member>
        <member name="M:Y_.Dial._renderLabel">
            <summary>
            renders the DOM object for the Dial's label
            </summary>
        </member>
        <member name="M:Y_.Dial._renderMarker">
            <summary>
            renders the DOM object for the Dial's background marker which
            tracks the angle of the user dragging the handle
            </summary>
        </member>
        <member name="M:Y_.Dial._renderRing">
            <summary>
            renders the DOM object for the Dial's background ring
            </summary>
        </member>
        <member name="M:Y_.Dial._resetDial">
            <summary>
            resets Dial value to the orignal initial value.
            </summary>
        </member>
        <member name="M:Y_.Dial._setLabelString(System.Object)">
            <summary>
            sets the visible UI label HTML string
            </summary>
        </member>
        <member name="M:Y_.Dial._setNodeToFixedRadius(Y_.Node,System.Object)">
            <summary>
            returns the XY of the fixed position, handleDistance, from the center of the Dial (resting position).
            The XY also represents the angle related to the current value.
            If typeArray is true, [X,Y] is returned.
            If typeArray is false, the XY of the obj node passed in is set.
            </summary>
        </member>
        <member name="M:Y_.Dial._setResetString(System.Object)">
            <summary>
            sets the visible UI label HTML string
            </summary>
        </member>
        <member name="M:Y_.Dial._setSizes">
            <summary>
            sets the sizes of ring, center-button, marker, handle, and VML ovals in pixels.
            Needed only because some IE versions
            ignore CSS percent sizes/offsets.
            so these must be set in pixels.
            Normally these are set in % of the ring.
            </summary>
        </member>
        <member name="M:Y_.Dial._setToMax">
            <summary>
            sets Dial value to dial's max attr
            </summary>
        </member>
        <member name="M:Y_.Dial._setToMin">
            <summary>
            sets Dial value to dial's min attr
            </summary>
        </member>
        <member name="M:Y_.Dial._setTooltipString(System.Object)">
            <summary>
            sets the tooltip HTML string in the Dial's handle
            </summary>
        </member>
        <member name="M:Y_.Dial._uiSetValue(Y_.DataType_.Number)">
            <summary>
            Updates the UI display value of the Dial to reflect
            the value passed in.
            Makes all other needed UI display changes
            </summary>
        </member>
        <member name="M:Y_.Dial._validateValue(Y_.DataType_.Number)">
            <summary>
            value attribute default validator. Verifies that
            the value being set lies between the min/max value
            </summary>
        </member>
        <member name="M:Y_.Dial._valueToDecimalPlaces(Y_.DataType_.Number)">
            <summary>
            Changes a value to have the correct decimal places per the attribute decimalPlaces
            </summary>
        </member>
        <member name="M:Y_.Dial.bindUI">
            <summary>
            Creates the Y.DD.Drag instance used for the handle movement and
            binds Dial interaction to the configured value model.
            </summary>
        </member>
        <member name="M:Y_.Dial.renderUI">
            <summary>
            creates the DOM structure for the Dial.
            </summary>
        </member>
        <member name="M:Y_.Dial.syncUI">
            <summary>
            Synchronizes the DOM state with the attribute settings.
            </summary>
        </member>
        <member name="T:Y_.DataTable_.Scrollable">
            <summary>
            _API docs for this extension are included in the DataTable class._
            Adds the ability to make the table rows scrollable while preserving the header
            placement.
            There are two types of scrolling, horizontal (x) and vertical (y).  Horizontal
            scrolling is achieved by wrapping the entire table in a scrollable container.
            Vertical scrolling is achieved by splitting the table headers and data into two
            separate tables, the latter of which is wrapped in a vertically scrolling
            container.  In this case, column widths of header cells and data cells are kept
            in sync programmatically.
            Since the split table synchronization can be costly at runtime, the split is only done if the data in the table stretches beyond the configured `height` value.
            To activate or deactivate scrolling, set the `scrollable` attribute to one of
            the following values:
            * `false` - (default) Scrolling is disabled.
            * `true` or 'xy' - If `height` is set, vertical scrolling will be activated, if
            `width` is set, horizontal scrolling will be activated.
            * 'x' - Activate horizontal scrolling only. Requires the `width` attribute is
            also set.
            * 'y' - Activate vertical scrolling only. Requires the `height` attribute is
            also set.
            </summary>
        </member>
        <member name="T:Y_.DataSourceCache">
            <summary>
            DataSource plugin adds cache functionality.
            </summary>
        </member>
        <member name="T:Y_.ComboSplineSeries">
            <summary>
            The ComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Each
            series type has a corresponding boolean attribute indicating if it is rendered. By default, splines and plots
            are rendered and areaspline is not.
            </summary>
        </member>
        <member name="T:Y_.CartesianSeries">
            <summary>
            The CartesianSeries class creates a chart with horizontal and vertical axes.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries._getDefaultColor(Y_.DataType_.Number,System.Object)">
            <summary>
            Parses a color based on a series order and type.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries._getDefaultStyles">
            <summary>
            Gets the default value for the `styles` attribute. Overrides
            base implementation.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries._handleVisibleChange(System.Object)">
            <summary>
            Shows/hides contents of the series.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries._setCanvas">
            <summary>
            Creates a `Graphic` instance.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries.destructor">
            <summary>
            Destructor implementation for the CartesianSeries class. Calls destroy on all Graphic instances.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries.draw">
            <summary>
            Draws the series.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries.getTotalValues">
            <summary>
            Returns the sum of all values for the series.
            </summary>
        </member>
        <member name="M:Y_.CartesianSeries.setAreaData">
            <summary>
            Calculates the coordinates for the series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries._defaultBorderColors">
            <summary>
            Collection of default colors used for marker borders in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries._defaultFillColors">
            <summary>
            Collection of default colors used for marker fills in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries._defaultLineColors">
            <summary>
            Collection of default colors used for lines in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries._defaultSliceColors">
            <summary>
            Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.chart">
            <summary>
            Reference to the `Chart` application.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.graph">
            <summary>
            Reference to the `Graph` in which the series is drawn into.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.graphOrder">
            <summary>
            Order of the instance
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.height">
            <summary>
            Returns the height of the parent graph
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.order">
            <summary>
            Order of this instance of this `type`.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.xAxis">
            <summary>
            Reference to the `Axis` instance used for assigning
            x-values to the graph.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.xcoords">
            <summary>
            x coordinates for the series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.xData">
            <summary>
            Array of x values for the series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.xMarkerPlane">
            <summary>
            Collection of area maps along the xAxis. Used to determine mouseover for multiple
            series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.xMarkerPlaneOffset">
            <summary>
            Distance from a data coordinate to the left/right for setting a hotspot.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.yAxis">
            <summary>
            Reference to the `Axis` instance used for assigning
            y-values to the graph.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.ycoords">
            <summary>
            y coordinates for the series
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.yData">
            <summary>
            Array of y values for the series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.yMarkerPlane">
            <summary>
            Collection of area maps along the yAxis. Used to determine mouseover for multiple
            series.
            </summary>
        </member>
        <member name="P:Y_.CartesianSeries.yMarkerPlaneOffset">
            <summary>
            Distance from a data coordinate to the top/bottom for setting a hotspot.
            </summary>
        </member>
        <member name="T:Y_.BottomAxisLayout">
            <summary>
            Contains algorithms for rendering a bottom axis.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout._getTransformOrigin(Y_.DataType_.Number)">
            <summary>
            Returns the transformOrigin to use for an axis label based on the position of the axis
            and the rotation of the label.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout._setRotationCoords(System.Object)">
            <summary>
            Adjusts the coordinates of an axis label based on the rotation.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.drawTick(Y_.Path,System.Object,System.Object)">
            <summary>
            Draws a tick
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.getExplicitlySized">
            <summary>
            Determines the available label height when the axis width has been explicitly set.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.getLabelPoint(System.Object)">
            <summary>
            Calculates the point for a label.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.getLineStart">
            <summary>
            Calculates the coordinates for the first point on an axis.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.offsetNodeForTick(Y_.Node)">
            <summary>
            Adjusts position for inner ticks.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.positionLabel(System.Object,System.Object)">
            <summary>
            Rotate and position labels.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.positionTitle(System.Object)">
            <summary>
            Rotate and position title.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.setCalculatedSize">
            <summary>
            Assigns a height based on the size of the contents.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.setTickOffsets">
            <summary>
            Sets the length of the tick on either side of the axis line.
            </summary>
        </member>
        <member name="M:Y_.BottomAxisLayout.updateMaxLabelSize(System.Object)">
            <summary>
            Updates the value for the `maxLabelSize` for use in calculating total size.
            </summary>
        </member>
        <member name="T:Y_.AttributeCore">
            <summary>
            <p>
            AttributeCore provides the lightest level of configurable attribute support. It is designed to be
            augmented on to a host class, and provides the host with the ability to configure
            attributes to store and retrieve state, <strong>but without support for attribute change events</strong>.
            </p>
            <p>For example, attributes added to the host can be configured:</p>
            <ul>
            <li>As read only.</li>
            <li>As write once.</li>
            <li>With a setter function, which can be used to manipulate
            values passed to Attribute's <a href="#method_set">set</a> method, before they are stored.</li>
            <li>With a getter function, which can be used to manipulate stored values,
            before they are returned by Attribute's <a href="#method_get">get</a> method.</li>
            <li>With a validator function, to validate values before they are stored.</li>
            </ul>
            <p>See the <a href="#method_addAttr">addAttr</a> method, for the complete set of configuration
            options available for attributes.</p>
            <p>Object/Classes based on AttributeCore can augment <a href="AttributeEvents.html">AttributeEvents</a>
            (with true for overwrite) and <a href="AttributeExtras.html">AttributeExtras</a> to add attribute event and
            additional, less commonly used attribute methods, such as `modifyAttr`, `removeAttr` and `reset`.</p>
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._getAttr(System.Object)">
            <summary>
            Provides the common implementation for the public get method,
            allowing Attribute hosts to over-ride either method.
            See <a href="#method_get">get</a> for argument details.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._getAttrs(System.Object)">
            <summary>
            Implementation behind the public getAttrs method, to get multiple attribute values.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._initAttrs(System.Object,System.Object,System.Object)">
            <summary>
            Utility method to set up initial attributes defined during construction, either through the constructor.ATTRS property, or explicitly passed in.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._protectAttrs(System.Object)">
            <summary>
            Utility method to protect an attribute configuration
            hash, by merging the entire object and the individual
            attr config objects.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._set(System.Object,System.Object)">
            <summary>
            Allows setting of readOnly/writeOnce attributes. See <a href="#method_set">set</a> for argument details.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._setAttr(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Provides the common implementation for the public set and protected _set methods.
            See <a href="#method_set">set</a> for argument details.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore._setAttrs(System.Object)">
            <summary>
            Implementation behind the public setAttrs method, to set multiple attribute values.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.addAttr(System.Object,System.Object,System.Object)">
            <summary>
            <p>
            Adds an attribute with the provided configuration to the host object.
            </p>
            <p>
            The config argument object supports the following properties:
            </p>
            <dl>
            <dt>value &#60;Any&#62;</dt>
            <dd>The initial value to set on the attribute</dd>
            <dt>valueFn &#60;Function | String&#62;</dt>
            <dd>
            <p>A function, which will return the initial value to set on the attribute. This is useful
            for cases where the attribute configuration is defined statically, but needs to
            reference the host instance ("this") to obtain an initial value. If both the value and valueFn properties are defined,
            the value returned by the valueFn has precedence over the value property, unless it returns undefined, in which
            case the value property is used.</p>
            <p>valueFn can also be set to a string, representing the name of the instance method to be used to retrieve the value.</p>
            </dd>
            <dt>readOnly &#60;boolean&#62;</dt>
            <dd>Whether or not the attribute is read only. Attributes having readOnly set to true
            cannot be modified by invoking the set method.</dd>
            <dt>writeOnce &#60;boolean&#62; or &#60;string&#62;</dt>
            <dd>
            Whether or not the attribute is "write once". Attributes having writeOnce set to true,
            can only have their values set once, be it through the default configuration,
            constructor configuration arguments, or by invoking set.
            <p>The writeOnce attribute can also be set to the string "initOnly", in which case the attribute can only be set during initialization
            (when used with Base, this means it can only be set during construction)</p>
            </dd>
            <dt>setter &#60;Function | String&#62;</dt>
            <dd>
            <p>The setter function used to massage or normalize the value passed to the set method for the attribute.
            The value returned by the setter will be the final stored value. Returning
            <a href="#property_Attribute.INVALID_VALUE">Attribute.INVALID_VALUE</a>, from the setter will prevent
            the value from being stored.
            </p>
            <p>setter can also be set to a string, representing the name of the instance method to be used as the setter function.</p>
            </dd>
            <dt>getter &#60;Function | String&#62;</dt>
            <dd>
            <p>
            The getter function used to massage or normalize the value returned by the get method for the attribute.
            The value returned by the getter function is the value which will be returned to the user when they
            invoke get.
            </p>
            <p>getter can also be set to a string, representing the name of the instance method to be used as the getter function.</p>
            </dd>
            <dt>validator &#60;Function | String&#62;</dt>
            <dd>
            <p>
            The validator function invoked prior to setting the stored value. Returning
            false from the validator function will prevent the value from being stored.
            </p>
            <p>validator can also be set to a string, representing the name of the instance method to be used as the validator function.</p>
            </dd>
            <dt>lazyAdd &#60;boolean&#62;</dt>
            <dd>Whether or not to delay initialization of the attribute until the first call to get/set it.
            This flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through
            the <a href="#method_addAttrs">addAttrs</a> method.</dd>
            </dl>
            <p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with
            the context ("this") set to the host object.</p>
            <p>Configuration properties outside of the list mentioned above are considered private properties used internally by attribute,
            and are not intended for public use.</p>
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.addAttrs(System.Object,System.Object,System.Object)">
            <summary>
            Configures a group of attributes, and sets initial values.
            <p>
            <strong>NOTE:</strong> This method does not isolate the configuration object by merging/cloning.
            The caller is responsible for merging/cloning the configuration object if required.
            </p>
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.attrAdded(System.Object)">
            <summary>
            Checks if the given attribute has been added to the host
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.get(System.Object)">
            <summary>
            Returns the current value of the attribute. If the attribute
            has been configured with a 'getter' function, this method will delegate
            to the 'getter' to obtain the value of the attribute.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.getAttrs(System.Object)">
            <summary>
            Gets multiple attribute values.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.AttributeCore.setAttrs(System.Object)">
            <summary>
            Sets multiple attribute values.
            </summary>
        </member>
        <member name="P:Y_.AttributeCore._ATTR_CFG">
            <summary>
            The list of properties which can be configured for
            each attribute (e.g. setter, getter, writeOnce etc.).
            This property is used internally as a whitelist for faster
            Y.mix operations.
            </summary>
        </member>
        <member name="P:Y_.AttributeCore.INVALID_VALUE">
            <summary>
            <p>The value to return from an attribute setter in order to prevent the set from going through.</p>
            <p>You can return this value from your setter if you wish to combine validator and setter
            functionality into a single setter function, which either returns the massaged value to be stored or
            AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>
            </summary>
        </member>
        <member name="T:Y_.App">
            <summary>
            Provides a top-level application component which manages navigation and views.
            This gives you a foundation and structure on which to build your application; it
            combines robust URL navigation with powerful routing and flexible view
            management.
            `Y.App` is both a namespace and constructor function. The `Y.App` class is
            special in that any `Y.App` class extensions that are included in the YUI
            instance will be **auto-mixed** on to the `Y.App` class. Consider this example:
            YUI().use('app-base', 'app-transitions', function (Y) {
            // This will create two YUI Apps, `basicApp` will not have transitions,
            // but `fancyApp` will have transitions support included and turn it on.
            var basicApp = new Y.App.Base(),
            fancyApp = new Y.App({transitions: true});
            });
            </summary>
        </member>
        <member name="T:Y_.Anim">
            <summary>
            A class for constructing animation instances.
            </summary>
        </member>
        <member name="M:Y_.Anim.getBezier(Y_.Array,Y_.DataType_.Number)">
            <summary>
            Get the current position of the animated element based on t.
            Each point is an array of "x" and "y" values (0 = x, 1 = y)
            At least 2 points are required (start and end).
            First point is start. Last point is end.
            Additional control points are optional.
            </summary>
        </member>
        <member name="M:Y_.Anim.pause">
            <summary>
            Pauses all animation instances.
            </summary>
        </member>
        <member name="M:Y_.Anim.run">
            <summary>
            Runs all animation instances.
            </summary>
        </member>
        <member name="M:Y_.Anim.stop">
            <summary>
            Stops all animation instances.
            </summary>
        </member>
        <member name="M:Y_.Anim.stop(System.Object)">
            <summary>
            Stops the animation and resets its time.
            </summary>
        </member>
        <member name="P:Y_.Anim.behaviors">
            <summary>
            Bucket for custom getters and setters
            </summary>
        </member>
        <member name="P:Y_.Anim.DEFAULT_GETTER">
            <summary>
            The default getter to use when getting object properties.
            </summary>
        </member>
        <member name="P:Y_.Anim.DEFAULT_SETTER">
            <summary>
            The default setter to use when setting object properties.
            </summary>
        </member>
        <member name="P:Y_.Anim.DEFAULT_UNIT">
            <summary>
            The default unit to use with properties that pass the RE_DEFAULT_UNIT test.
            </summary>
        </member>
        <member name="P:Y_.Anim.easing">
            <summary>
            The method that will provide values to the attribute(s) during the animation.
            Defaults to "Easing.easeNone".
            </summary>
        </member>
        <member name="P:Y_.Anim.from">
            <summary>
            The starting values for the animated properties.
            Fields may be strings, numbers, or functions.
            If a function is used, the return value becomes the from value.
            If no from value is specified, the DEFAULT_GETTER will be used.
            Supports any unit, provided it matches the "to" (or default)
            unit (e.g. `{width: '10em', color: 'rgb(0, 0 0)', borderColor: '#ccc'}`).
            If using the default ('px' for length-based units), the unit may be omitted
            (e.g. `{width: 100}, borderColor: 'ccc'}`, which defaults to pixels
            and hex, respectively).
            </summary>
        </member>
        <member name="P:Y_.Anim.intervalTime">
            <summary>
            Time in milliseconds passed to setInterval for frame processing
            </summary>
        </member>
        <member name="P:Y_.Anim.node">
            <summary>
            The object to be animated.
            </summary>
        </member>
        <member name="P:Y_.Anim.RE_DEFAULT_UNIT">
            <summary>
            Regex of properties that should use the default unit.
            </summary>
        </member>
        <member name="P:Y_.Anim.to">
            <summary>
            The ending values for the animated properties.
            Fields may be strings, numbers, or functions.
            Supports any unit, provided it matches the "from" (or default)
            unit (e.g. `{width: '50%', color: 'red', borderColor: '#ccc'}`).
            If using the default ('px' for length-based units), the unit may be omitted
            (e.g. `{width: 100, borderColor: 'ccc'}`, which defaults to pixels
            and hex, respectively).
            </summary>
        </member>
        <member name="T:Y_.WidgetAutohide">
            <summary>
            The WidgetAutohide class provides the hideOn attribute which can
            be used to hide the widget when certain events occur.
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._afterHideOnChange">
            <summary>
            Default function called when hideOn Attribute is changed. Remove existing listeners and create new listeners.
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._afterHostVisibleChangeAutohide">
            <summary>
            Default function called when the visibility of the widget changes. Determines
            whether to attach or detach event listeners based on the visibility of the widget.
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._attachUIHandlesAutohide">
            <summary>
            Iterates through all objects in the hideOn attribute and creates event listeners.
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._bindUIAutohide">
            <summary>
            Binds event listeners to the widget.
            <p>
            This method in invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._detachUIHandlesAutohide">
            <summary>
            Detaches all event listeners created by this extension
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._syncUIAutohide">
            <summary>
            Syncs up the widget based on its current state. In particular, removes event listeners if
            widget is not visible, and attaches them otherwise.
            <p>
            This method in invoked after syncUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetAutohide._uiSetHostVisibleAutohide">
            <summary>
            Removes event listeners if widget is not visible, and attaches them otherwise.
            </summary>
        </member>
        <member name="P:Y_.WidgetAutohide.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetAutohide.
            </summary>
        </member>
        <member name="T:Y_.Test_.UnexpectedError">
            <summary>
            UnexpectedError is subclass of AssertionError that is thrown whenever
            an error occurs within the course of a test and the test was not expected
            to throw an error.
            </summary>
        </member>
        <member name="P:Y_.Test_.UnexpectedError.cause">
            <summary>
            The unexpected error that occurred.
            </summary>
        </member>
        <member name="T:Y_.Test_.TestFormat">
            <summary>
            An object object containing test result formatting methods.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestFormat.JSON(System.Object)">
            <summary>
            Returns test results formatted as a JSON string. Requires JSON utility.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestFormat.JUnitXML(System.Object)">
            <summary>
            Returns test results formatted in JUnit XML format.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestFormat.TAP(System.Object)">
            <summary>
            Returns test results formatted in TAP format.
            For more information, see <a href="http://testanything.org/">Test Anything Protocol</a>.
            </summary>
        </member>
        <member name="M:Y_.Test_.TestFormat.XML(System.Object)">
            <summary>
            Returns test results formatted as an XML string.
            </summary>
        </member>
        <member name="T:Y_.Test_.Mock_.Mock">
            <summary>
            Creates a new mock object.
            </summary>
        </member>
        <member name="T:Y_.SyntheticEvent">
            <summary>
            <p>Wrapper class for the integration of new events into the YUI event
            infrastructure.  Don't instantiate this object directly, use
            <code>Y.Event.define(type, config)</code>.  See that method for details.</p>
            <p>Properties that MAY or SHOULD be specified in the configuration are noted
            below and in the description of <code>Y.Event.define</code>.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent._init">
            <summary>
            Construction logic for the event.
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.applyArgExtras(System.Object,System.Object)">
            <summary>
            <p>Implementers MAY provide this method definition.</p>
            <p>Implement this function if you want extra data extracted during
            processArgs to be propagated to subscriptions on a per-node basis.
            That is to say, if you call <code>Y.on('xyz', fn, xtra, 'div')</code>
            the data returned from processArgs will be shared
            across the subscription objects for all the divs.  If you want each
            subscription to receive unique information, do that processing
            here.</p>
            <p>The default implementation adds the data extracted by processArgs
            to the subscription object as <code>sub._extra</code>.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.delegate(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier,System.Object)">
            <summary>
            <p>Implementers SHOULD provide this method definition.</p>
            <p>Implementation logic for subscriptions done via
            <code>node.delegate(type, fn, filter)</code> or
            <code>Y.delegate(type, fn, container, filter)</code>.  Like with
            <code>on()</code> above, this function should monitor the environment
            for the event being fired, and trigger subscription execution by
            calling <code>notifier.fire(e)</code>.</p>
            <p>This function receives a fourth argument, which is the filter
            used to identify which Node's are of interest to the subscription.
            The filter will be either a boolean function that accepts a target
            Node for each hierarchy level as the event bubbles, or a selector
            string.  To translate selector strings into filter functions, use
            <code>Y.delegate.compileFilter(filter)</code>.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.detach(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier)">
            <summary>
            <p>Implementers SHOULD provide this method definition.</p>
            <p>Implementation logic for detaching subscriptions done via
            <code>node.on(type, fn)</code>.  This function should clean up any
            subscriptions made in the <code>on()</code> phase.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.detachDelegate(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier,System.Object)">
            <summary>
            <p>Implementers SHOULD provide this method definition.</p>
            <p>Implementation logic for detaching subscriptions done via
            <code>node.delegate(type, fn, filter)</code> or
            <code>Y.delegate(type, fn, container, filter)</code>.  This function
            should clean up any subscriptions made in the
            <code>delegate()</code> phase.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.getRegistry(Y_.Node,System.Object,System.Object)">
            <summary>
            Returns the array of subscription handles for a node for the given event
            type.  Passing true as the third argument will create a registry entry
            in the event system's DOM map to host the array if one doesn't yet exist.
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.getSubs(Y_.Node,Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Returns the detach handles of subscriptions on a node that satisfy a
            search/filter function.  By default, the filter used is the
            <code>subMatch</code> method.
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.on(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier)">
            <summary>
            <p>Implementers SHOULD provide this method definition.</p>
            Implementation logic for subscriptions done via <code>node.on(type,
            fn)</code> or <code>Y.on(type, fn, target)</code>.  This
            function should set up the monitor(s) that will eventually fire the
            event.  Typically this involves subscribing to at least one DOM
            event.  It is recommended to store detach handles from any DOM
            subscriptions to make for easy cleanup in the <code>detach</code>
            method.  Typically these handles are added to the <code>sub</code>
            object.  Also for SyntheticEvents that leverage a single DOM
            subscription under the hood, it is recommended to pass the DOM event
            object to <code>notifier.fire(e)</code>.  (The event name on the
            object will be updated).
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.processArgs(Y_.Array,System.Object)">
            <summary>
            <p>Implementers MAY provide this method definition.</p>
            <p>Implement this function if the event supports a different
            subscription signature.  This function is used by both
            <code>on()</code> and <code>delegate()</code>.  The second parameter
            indicates that the event is being subscribed via
            <code>delegate()</code>.</p>
            <p>Implementations must remove extra arguments from the args list
            before returning.  The required args for <code>on()</code>
            subscriptions are</p>
            <pre><code>[type, callback, target, context, argN...]</code></pre>
            <p>The required args for <code>delegate()</code>
            subscriptions are</p>
            <pre><code>[type, callback, target, filter, context, argN...]</code></pre>
            <p>The return value from this function will be stored on the
            subscription in the '_extra' property for reference elsewhere.</p>
            </summary>
        </member>
        <member name="M:Y_.SyntheticEvent.subMatch(System.Object,Y_.Array)">
            <summary>
            <p>Implementers MAY override this to define what constitutes a
            &quot;same&quot; subscription.  Override implementations should
            consider the lack of a comparator as a match, so calling
            <code>getSubs()</code> with no arguments will return all subs.</p>
            <p>Compares a set of subscription arguments against a Subscription
            object to determine if they match.  The default implementation
            compares the callback function against the second argument passed to
            <code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>
            </summary>
        </member>
        <member name="T:Y_.SVGDrawing">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Drawing.html">`Drawing`</a> class.
            `SVGDrawing` is not intended to be used directly. Instead, use the <a href="Drawing.html">`Drawing`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Drawing.html">`Drawing`</a>
            class will point to the `SVGDrawing` class.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.clear">
            <summary>
            Clears the path.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.closePath">
            <summary>
            Ends a fill and stroke
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.curveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a bezier curve.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.drawCircle(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a circle.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.drawDiamond(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a diamond.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.drawEllipse(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.end">
            <summary>
            Completes a drawing operation.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.lineTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.moveTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Moves the current drawing position to specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.SVGDrawing.quadraticCurveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a quadratic bezier curve.
            </summary>
        </member>
        <member name="T:Y_.SplineSeries">
            <summary>
            SplineSeries renders a graph with data points connected by a curve.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.SplineSeries.styles" -->
        <member name="T:Y_.Slider">
            <summary>
            Create a slider to represent an integer value between a given minimum and
            maximum.  Sliders may be aligned vertically or horizontally, based on the
            <code>axis</code> configuration.
            </summary>
        </member>
        <member name="T:Y_.Panel">
            <summary>
            A basic Panel Widget, which can be positioned based on Page XY co-ordinates and
            is stackable (z-index support). It also provides alignment and centering support
            and uses a standard module format for it's content, with header, body and footer
            section support. It can be made modal, and has functionality to hide and focus
            on different events. The header and footer sections can be modified to allow for
            button support.
            </summary>
        </member>
        <member name="P:Y_.Panel.BUTTONS">
            <summary>
            Collection of predefined buttons mapped from name => config.
            Panel includes a "close" button which can be use by name. When the close
            button is in the header (which is the default), it will look like: [x].
            See `addButton()` for a list of possible configuration values.
            </summary>
        </member>
        <member name="T:Y_.HistoryHash">
            <summary>
            Provides browser history management backed by
            <code>window.location.hash</code>, as well as convenience methods for working
            with the location hash and a synthetic <code>hashchange</code> event that
            normalizes differences across browsers.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash._afterHashChange(Y_.Event)">
            <summary>
            Handler for hashchange events.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash._updateIframe(System.Object,System.Object)">
            <summary>
            Updates the history iframe with the specified hash.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.createHash(System.Object)">
            <summary>
            Creates a location hash string from the specified object of key/value
            pairs.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.decode(System.Object)">
            <summary>
            Wrapper around <code>decodeURIComponent()</code> that also converts +
            chars into spaces.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.encode(System.Object)">
            <summary>
            Wrapper around <code>encodeURIComponent()</code> that converts spaces to
            + chars.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.getHash">
            <summary>
            Gets the raw (not decoded) current location hash, minus the preceding '#'
            character and the hashPrefix (if one is set).
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.getIframeHash">
            <summary>
            Gets the raw (not decoded) current location hash from the IE iframe,
            minus the preceding '#' character and the hashPrefix (if one is set).
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.getUrl">
            <summary>
            Gets the current bookmarkable URL.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.parseHash(System.Object)">
            <summary>
            Parses a location hash string into an object of key/value parameter
            pairs. If <i>hash</i> is not specified, the current location hash will
            be used.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.replaceHash(System.Object)">
            <summary>
            Replaces the browser's current location hash with the specified hash
            and removes all forward navigation states, without creating a new browser
            history entry. Automatically prepends the <code>hashPrefix</code> if one
            is set.
            </summary>
        </member>
        <member name="M:Y_.HistoryHash.setHash(System.Object)">
            <summary>
            Sets the browser's location hash to the specified string. Automatically
            prepends the <code>hashPrefix</code> if one is set.
            </summary>
        </member>
        <member name="T:Y_.GraphicBase">
            <summary>
            GraphicBase serves as the base class for the graphic layer. It serves the same purpose as
            Base but uses a lightweight getter/setter class instead of Attribute.
            This class is temporary and a work in progress.
            </summary>
        </member>
        <member name="M:Y_.GraphicBase.init">
            <summary>
            Init method, invoked during construction.
            Fires an init event after calling `initializer` on implementers.
            </summary>
        </member>
        <member name="T:Y_.Do_.AlterArgs">
            <summary>
            Return an AlterArgs object when you want to change the arguments that
            were passed into the function.  Useful for Do.before subscribers.  An
            example would be a service that scrubs out illegal characters prior to
            executing the core business logic.
            </summary>
        </member>
        <member name="T:Y_.DOMEventFacade">
            <summary>
            Wraps a DOM event, properties requiring browser abstraction are
            fixed here.  Provids a security layer when required.
            </summary>
        </member>
        <member name="M:Y_.DOMEventFacade.halt(System.Object)">
            <summary>
            Stops the event propagation and prevents the default
            event behavior.
            </summary>
        </member>
        <member name="M:Y_.DOMEventFacade.preventDefault(System.Object)">
            <summary>
            Prevents the event's default behavior
            </summary>
        </member>
        <member name="M:Y_.DOMEventFacade.stopImmediatePropagation">
            <summary>
            Stops the propagation to the next bubble target and
            prevents any additional listeners from being exectued
            on the current target.
            </summary>
        </member>
        <member name="M:Y_.DOMEventFacade.stopPropagation">
            <summary>
            Stops the propagation to the next bubble target
            </summary>
        </member>
        <member name="T:Y_.DataSource_.Get">
            <summary>
            Get Utility subclass for the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Get._defRequestFn(System.Object)">
            <summary>
            Passes query string to Get Utility. Fires <code>response</code> event when
            response is received asynchronously.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Get._generateRequest(System.Object)">
            <summary>
            Default method for adding callback param to url.  See
            generateRequestCallback attribute.
            </summary>
        </member>
        <member name="P:Y_.DataSource_.Get.generateRequestCallback">
            <summary>
            Accepts the DataSource instance and a callback ID, and returns a callback
            param/value string that gets appended to the script URI. Implementers
            can customize this string to match their server's query syntax.
            </summary>
        </member>
        <member name="T:Y_.DataSource_.Function">
            <summary>
            Function subclass for the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSource_.Function._defRequestFn(System.Object)">
            <summary>
            Passes query string to IO. Fires <code>response</code> event when
            response is received asynchronously.
            </summary>
        </member>
        <member name="T:Y_.DataSourceXMLSchema">
            <summary>
            Adds schema-parsing to the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSourceXMLSchema._beforeDefDataFn(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            Parses raw data into a normalized response.
            </summary>
        </member>
        <member name="T:Y_.DataSourceArraySchema">
            <summary>
            Adds schema-parsing to the DataSource Utility.
            </summary>
        </member>
        <member name="M:Y_.DataSourceArraySchema._beforeDefDataFn(Y_.DataType_.Number,System.Object,System.Object,System.Object)">
            <summary>
            Parses raw data into a normalized response.
            </summary>
        </member>
        <member name="T:Y_.CustomEvent">
            <summary>
            The CustomEvent class lets you define events for your application
            that can be subscribed to by one or more independent component.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._notify(Y_.Subscriber,Y_.Array)">
            <summary>
            Notify a single subscriber
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,Y_.Array)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,Y_.Array,System.Object)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,System.Object,Y_.Array)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,System.Object,Y_.Array,System.Object)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent._on(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Create the Subscription for subscribing function, context, and bound
            arguments.  If this is a fireOnce event, the subscriber is immediately
            notified.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.after(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen for this event after the normal subscribers have been notified and
            the default behavior has been applied.  If a normal subscriber prevents the
            default behavior, it also prevents after listeners from firing.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.applyConfig(System.Object,System.Object)">
            <summary>
            Apply configuration properties.  Only applies the CONFIG whitelist
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.detach(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Detach listeners.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.detachAll">
            <summary>
            Removes all listeners
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.fire(System.Object)">
            <summary>
            Notifies the subscribers.  The callback functions will be executed
            from the context specified when the event was created, and with the
            following parameters:
            <ul>
            <li>The type of event</li>
            <li>All of the arguments fire() was executed with as an array</li>
            <li>The custom object (if any) that was passed into the subscribe()
            method</li>
            </ul>
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.fireSimple(Y_.Array)">
            <summary>
            Set up for notifying subscribers of non-emitFacade events.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.getSubs">
            <summary>
            Get all of the subscribers to this event and any sibling event
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.halt(System.Object)">
            <summary>
            Stops the event propagation and prevents the default
            event behavior.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.hasSubs">
            <summary>
            Returns the number of subscribers for this event as the sum of the on()
            subscribers and after() subscribers.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.log(System.Object,System.Object)">
            <summary>
            Logger abstraction to centralize the application of the silent flag
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.monitor(System.Object)">
            <summary>
            Monitor the event state for the subscribed event.  The first parameter
            is what should be monitored, the rest are the normal parameters when
            subscribing to an event.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.on(SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Listen for this event
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.preventDefault">
            <summary>
            Prevents the execution of this event's defaultFn
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.stopImmediatePropagation">
            <summary>
            Stops propagation to bubble targets, and prevents any remaining
            subscribers on the current target from executing.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.stopPropagation">
            <summary>
            Stop propagation to bubble targets
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.subscribe(SharpKit.JavaScript.JsAction)">
            <summary>
            Listen for this event
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.unsubscribe(SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Detach listeners.
            </summary>
        </member>
        <member name="M:Y_.CustomEvent.unsubscribeAll">
            <summary>
            Removes all listeners
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.broadcast">
            <summary>
            If 0, this event does not broadcast.  If 1, the YUI instance is notified
            every time this event fires.  If 2, the YUI instance and the YUI global
            (if event is enabled on the global) are notified every time this event
            fires.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.context">
            <summary>
            The context the the event will fire from by default.  Defaults to the YUI
            instance.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.defaultFn">
            <summary>
            The default function to execute after event listeners
            have fire, but only if the default action was not
            prevented.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.firedWith">
            <summary>
            An array containing the arguments the custom event
            was last fired with.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.host">
            <summary>
            Specifies the host for this custom event.  This is used
            to enable event bubbling
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.prevented">
            <summary>
            Flag for preventDefault that is modified during fire().
            if it is not 0, the default behavior for this event
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.preventedFn">
            <summary>
            The function to execute if a subscriber calls
            preventDefault
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.signature">
            <summary>
            Supports multiple options for listener signatures in order to
            port YUI 2 apps.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.stopped">
            <summary>
            Flag for stopPropagation that is modified during fire()
            1 means to stop propagation to bubble targets.  2 means
            to also stop additional subscribers on this target.
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.stoppedFn">
            <summary>
            The function to execute if a subscriber calls
            stopPropagation or stopImmediatePropagation
            </summary>
        </member>
        <member name="P:Y_.CustomEvent.type">
            <summary>
            The type of event, returned to subscribers when the event fires
            </summary>
        </member>
        <member name="T:Y_.CanvasEllipse">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Ellipse.html">`Ellipse`</a> class.
            `CanvasEllipse` is not intended to be used directly. Instead, use the <a href="Ellipse.html">`Ellipse`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Ellipse.html">`Ellipse`</a>
            class will point to the `CanvasEllipse` class.
            </summary>
        </member>
        <member name="T:Y_.Axis">
            <summary>
            The Axis class. Generates axes for a chart.
            </summary>
        </member>
        <member name="M:Y_.Axis._getDefaultStyles">
            <summary>
            Gets the default value for the `styles` attribute. Overrides
            base implementation.
            </summary>
        </member>
        <member name="M:Y_.Axis.destructor">
            <summary>
            Destructor implementation Axis class. Removes all labels and the Graphic instance from the widget.
            </summary>
        </member>
        <member name="M:Y_.Axis.getMaxLabelBounds">
            <summary>
            Returns the coordinates (top, right, bottom, left) for the bounding box of the last label.
            </summary>
        </member>
        <member name="M:Y_.Axis.getMinLabelBounds">
            <summary>
            Returns the coordinates (top, right, bottom, left) for the bounding box of the first label.
            </summary>
        </member>
        <member name="P:Y_.Axis.appendLabelFunction">
            <summary>
            Function used to append an axis value to an axis label. This function has the following signature:
            <dl>
            <dt>textField</dt><dd>The axis label to be appended. (`HTMLElement`)</dd>
            <dt>val</dt><dd>The value to attach to the text field. This method will accept an `HTMLELement`
            or a `String`. This method does not use (`HTMLElement` | `String`)</dd>
            </dl>
            The default method appends a value to the `HTMLElement` using the `appendChild` method. If the given
            value is a `String`, the method will convert the the value to a `textNode` before appending to the
            `HTMLElement`. This method will not convert an `HTMLString` to an `HTMLElement`.
            </summary>
        </member>
        <member name="P:Y_.Axis.appendTitleFunction">
            <summary>
            Function used to append a title value to the title object. This function has the following signature:
            <dl>
            <dt>textField</dt><dd>The title text field to be appended. (`HTMLElement`)</dd>
            <dt>val</dt><dd>The value to attach to the text field. This method will accept an `HTMLELement`
            or a `String`. This method does not use (`HTMLElement` | `String`)</dd>
            </dl>
            The default method appends a value to the `HTMLElement` using the `appendChild` method. If the given
            value is a `String`, the method will convert the the value to a `textNode` before appending to the
            `HTMLElement` element. This method will not convert an `HTMLString` to an `HTMLElement`.
            </summary>
        </member>
        <member name="P:Y_.Axis.bottomTickOffset">
            <summary>
            Distance determined by the tick styles used to calculate the distance between the axis
            line in relation to the bottom of the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.edgeOffset">
            <summary>
            Difference betweend the first/last tick and edge of axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.graphic">
            <summary>
            The graphic in which the axis line and ticks will be rendered.
            </summary>
        </member>
        <member name="P:Y_.Axis.height">
            <summary>
            When set, defines the height of a horizontal axis instance. By default, horizontal axes automatically size based on their contents. When the
            height attribute is set, the axis will not calculate its height. When the height attribute is explicitly set, axis labels will postion themselves off of the
            the inner edge of the axis and the title, if present, will position itself off of the outer edge. If a specified height is less than the sum of
            the axis' contents, excess content will overflow.
            </summary>
        </member>
        <member name="P:Y_.Axis.labelFunction">
            <summary>
            Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need
            to implement the arguments below and return a `String` or `HTMLElement`.
            <dl>
            <dt>val</dt><dd>Label to be formatted. (`String`)</dd>
            <dt>format</dt><dd>Template for formatting label. (optional)</dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.Axis.labelFunctionScope">
            <summary>
            Object which should have by the labelFunction
            </summary>
        </member>
        <member name="P:Y_.Axis.labels">
            <summary>
            Collection of labels used to render the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.leftTickOffset">
            <summary>
            Distance determined by the tick styles used to calculate the distance between the axis
            line in relation to the left of the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.maxLabelSize">
            <summary>
            Length in pixels of largest text bounding box. Used to calculate the height of the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.rightTickOffset">
            <summary>
            Distance determined by the tick styles used to calculate the distance between the axis
            line in relation to the right side of the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.styles">
            <summary>
            Style properties used for drawing an axis. This attribute is inherited from `Renderer`. Below are the default values:
            <dl>
            <dt>majorTicks</dt><dd>Properties used for drawing ticks.
            <dl>
            <dt>display</dt><dd>Position of the tick. Possible values are `inside`, `outside`, `cross` and `none`. The
            default value is `inside`.</dd>
            <dt>length</dt><dd>The length (in pixels) of the tick. The default value is 4.</dd>
            <dt>color</dt><dd>The color of the tick. The default value is `#dad8c9`</dd>
            <dt>weight</dt><dd>Number indicating the width of the tick. The default value is 1.</dd>
            <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>
            </dl>
            </dd>
            <dt>line</dt><dd>Properties used for drawing the axis line.
            <dl>
            <dt>weight</dt><dd>Number indicating the width of the axis line. The default value is 1.</dd>
            <dt>color</dt><dd>The color of the axis line. The default value is `#dad8c9`.</dd>
            <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>
            </dl>
            </dd>
            <dt>majorUnit</dt><dd>Properties used to calculate the `majorUnit` for the axis.
            <dl>
            <dt>determinant</dt><dd>The algorithm used for calculating distance between ticks. The possible options are `count` and `distance`. If
            the `determinant` is `count`, the axis ticks will spaced so that a specified number of ticks appear on the axis. If the `determinant`
            is `distance`, the axis ticks will spaced out according to the specified distance. The default value is `count`.</dd>
            <dt>count</dt><dd>Number of ticks to appear on the axis when the `determinant` is `count`. The default value is 11.</dd>
            <dt>distance</dt><dd>The distance (in pixels) between ticks when the `determinant` is `distance`. The default value is 75.</dd>
            </dl>
            </dd>
            <dt>label</dt><dd>Properties and styles applied to the axis labels.
            <dl>
            <dt>color</dt><dd>The color of the labels. The default value is `#808080`.</dd>
            <dt>alpha</dt><dd>Number between 0 and 1 indicating the opacity of the labels. The default value is 1.</dd>
            <dt>fontSize</dt><dd>The font-size of the labels. The default value is 85%</dd>
            <dt>rotation</dt><dd>The rotation, in degrees (between -90 and 90) of the labels. The default value is 0.</dd>
            <dt>margin</dt><dd>The distance between the label and the axis/tick. Depending on the position of the `Axis`, only one of the properties used.
            <dl>
            <dt>top</dt><dd>Pixel value used for an axis with a `position` of `bottom`. The default value is 4.</dd>
            <dt>right</dt><dd>Pixel value used for an axis with a `position` of `left`. The default value is 4.</dd>
            <dt>bottom</dt><dd>Pixel value used for an axis with a `position` of `top`. The default value is 4.</dd>
            <dt>left</dt><dd>Pixel value used for an axis with a `position` of `right`. The default value is 4.</dd>
            </dl>
            </dd>
            </dl>
            </dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.Axis.tickPoints">
            <summary>
            Collection of points used for placement of labels and ticks along the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.topTickOffset">
            <summary>
            Distance determined by the tick styles used to calculate the distance between the axis
            line in relation to the top of the axis.
            </summary>
        </member>
        <member name="P:Y_.Axis.width">
            <summary>
            When set, defines the width of a vertical axis instance. By default, vertical axes automatically size based on their contents. When the
            width attribute is set, the axis will not calculate its width. When the width attribute is explicitly set, axis labels will postion themselves off of the
            the inner edge of the axis and the title, if present, will position itself off of the outer edge. If a specified width is less than the sum of
            the axis' contents, excess content will overflow.
            </summary>
        </member>
        <member name="T:Y_.WidgetPosition">
            <summary>
            Widget extension, which can be used to add positioning support to the base Widget class,
            through the <a href="Base.html#method_build">Base.build</a> method.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._afterXYChange(Y_.EventFacade)">
            <summary>
            Default attribute change listener for the xy attribute, responsible
            for updating the UI, in response to attribute changes.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._bindUIPosition">
            <summary>
            Binds event listeners responsible for updating the UI state in response to
            Widget position related state changes.
            <p>
            This method in invoked after bindUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._getX">
            <summary>
            Default getter for the X attribute. The value is retrieved from
            the XY attribute, which is the sole store for the XY state.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._getY">
            <summary>
            Default getter for the Y attribute. The value is retrieved from
            the XY attribute, which is the sole store for the XY state.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._renderUIPosition">
            <summary>
            Creates/Initializes the DOM to support xy page positioning.
            <p>
            This method in invoked after renderUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._setX(Y_.DataType_.Number)">
            <summary>
            Default setter for the X attribute. The setter passes the X value through
            to the XY attribute, which is the sole store for the XY state.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._setY(Y_.DataType_.Number)">
            <summary>
            Default setter for the Y attribute. The setter passes the Y value through
            to the XY attribute, which is the sole store for the XY state.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._syncUIPosition">
            <summary>
            Synchronizes the UI to match the Widgets xy page position state.
            <p>
            This method in invoked after syncUI is invoked for the Widget class
            using YUI's aop infrastructure.
            </p>
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._uiSetXY(System.Object)">
            <summary>
            Updates the UI to reflect the XY page co-ordinates passed in.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition._validateXY(Y_.Array)">
            <summary>
            Default validator for the XY attribute
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition.move(Y_.DataType_.Number,Y_.DataType_.Number,Y_.Array)">
            <summary>
            Moves the Widget to the specified page xy co-ordinate position.
            </summary>
        </member>
        <member name="M:Y_.WidgetPosition.syncXY">
            <summary>
            Synchronizes the Panel's "xy", "x", and "y" properties with the
            Widget's position in the DOM.
            </summary>
        </member>
        <member name="P:Y_.WidgetPosition.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration introduced by WidgetPosition.
            </summary>
        </member>
        <member name="P:Y_.WidgetPosition.xy">
            <summary>
            Page XY co-ordinate pair for the widget.
            </summary>
        </member>
        <member name="T:Y_.SynthRegistry">
            <summary>
            Manager object for synthetic event subscriptions to aggregate multiple synths on the same node without colliding with actual DOM subscription entries in the global map of DOM subscriptions.  Also facilitates proper cleanup on page unload.
            </summary>
        </member>
        <member name="M:Y_.SynthRegistry._unregisterSub(System.Object)">
            <summary>
            Removes the subscription from the Notifier registry.
            </summary>
        </member>
        <member name="M:Y_.SynthRegistry.register(Y_.EventHandle)">
            <summary>
            Adds a subscription from the Notifier registry.
            </summary>
        </member>
        <member name="T:Y_.SVGShape">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Shape.html">`Shape`</a> class.
            `SVGShape` is not intended to be used directly. Instead, use the <a href="Shape.html">`Shape`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Shape.html">`Shape`</a>
            class will point to the `SVGShape` class.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.addClass(System.Object)">
            <summary>
            Add a class name to each node.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.compareTo(System.Object)">
            <summary>
            Compares nodes to determine if they match.
            Node instances can be compared to each other and/or HTMLElements.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.contains(System.Object)">
            <summary>
            Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.destroy">
            <summary>
            Destroys the shape instance.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.getBounds">
            <summary>
            Returns the bounds for a shape.
            Calculates the a new bounding box from the original corner coordinates (base on size and position) and the transform matrix.
            The calculated bounding box is used by the graphic instance to calculate its viewBox.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.getXY">
            <summary>
            Gets the current position of the node in page coordinates.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.init">
            <summary>
            Init method, invoked during construction.
            Calls `initializer` method.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.removeClass(System.Object)">
            <summary>
            Removes a class name from each node.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.rotate(Y_.DataType_.Number)">
            <summary>
            Rotates the shape clockwise around it transformOrigin.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.scale(Y_.DataType_.Number)">
            <summary>
            Specifies a 2d scaling operation.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.set(System.Object,System.Object)">
            <summary>
            Sets the value of an attribute.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.setXY(Y_.Array)">
            <summary>
            Set the position of the shape in page coordinates, regardless of how the node is positioned.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.skew(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis and y-axis.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.skewX(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the x-axis.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.skewY(Y_.DataType_.Number)">
            <summary>
            Skews the shape around the y-axis.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.test(System.Object)">
            <summary>
            Test if the supplied node matches the supplied selector.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.translate(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Specifies a 2d translation.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.translateX(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the x-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="M:Y_.SVGShape.translateY(Y_.DataType_.Number)">
            <summary>
            Translates the shape along the y-axis. When translating x and y coordinates,
            use the `translate` method.
            </summary>
        </member>
        <member name="T:Y_.StackedAreaSeries">
            <summary>
            StackedAreaSeries area fills to display data showing its contribution to a whole.
            </summary>
        </member>
        <member name="T:Y_.Renderer">
            <summary>
            The Renderer class is a base class for chart components that use the `styles`
            attribute.
            </summary>
        </member>
        <member name="M:Y_.Renderer._getDefaultStyles">
            <summary>
            Gets the default value for the `styles` attribute.
            </summary>
        </member>
        <member name="M:Y_.Renderer._mergeStyles(System.Object,System.Object)">
            <summary>
            Merges to object literals so that only specified properties are
            overwritten.
            </summary>
        </member>
        <member name="M:Y_.Renderer._setStyles(System.Object)">
            <summary>
            Method used by `styles` setter.
            </summary>
        </member>
        <member name="P:Y_.Renderer.graphic">
            <summary>
            The graphic in which drawings will be rendered.
            </summary>
        </member>
        <member name="P:Y_.Renderer.styles">
            <summary>
            Style properties for class
            </summary>
        </member>
        <member name="T:Y_.Queue">
            <summary>
            A simple FIFO queue.  Items are added to the Queue with add(1..n items) and
            removed using next().
            </summary>
        </member>
        <member name="M:Y_.Queue._init">
            <summary>
            Initialize the queue
            </summary>
        </member>
        <member name="M:Y_.Queue.add(System.Object)">
            <summary>
            Add 0..n items to the end of the queue.
            </summary>
        </member>
        <member name="M:Y_.Queue.indexOf(System.Object)">
            <summary>
            Returns the current index in the queue of the specified item
            </summary>
        </member>
        <member name="M:Y_.Queue.last">
            <summary>
            Get the last in the queue. LIFO support.
            </summary>
        </member>
        <member name="M:Y_.Queue.next">
            <summary>
            Get the next item in the queue. FIFO support
            </summary>
        </member>
        <member name="M:Y_.Queue.promote(System.Object)">
            <summary>
            Moves the referenced item to the head of the queue
            </summary>
        </member>
        <member name="M:Y_.Queue.remove(System.Object)">
            <summary>
            Removes the referenced item from the queue
            </summary>
        </member>
        <member name="M:Y_.Queue.size">
            <summary>
            Returns the current number of queued items.
            </summary>
        </member>
        <member name="P:Y_.Queue._q">
            <summary>
            The collection of enqueued items
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ScrollViewPaginator">
            <summary>
            Scrollview plugin that adds support for paging
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._afterIndexChange(System.Object)">
            <summary>
            index attr change handler
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._afterRender(System.Object)">
            <summary>
            After host render handler
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._calcOffsets">
            <summary>
            Calculate the page boundary offsets
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._flickFrame">
            <summary>
            Executed to respond to the flick event, by over-riding the default flickFrame animation.
            This is needed to determine if the next or prev page should be activated.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._getTargetOffset(Y_.DataType_.Number)">
            <summary>
            Return the offset value where scrollview should scroll to.
            Neccesary because index # doesn't nessecarily map up to location in the DOM because of this._manageDOM()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Plugin_.ScrollViewPaginator._manageDOM" -->
        <member name="M:Y_.Plugin_.ScrollViewPaginator._scrollEnded(System.Object)">
            <summary>
            scrollEnd handler detects if a page needs to change
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator._uiIndex(Y_.DataType_.Number)">
            <summary>
            Update the UI based on the current page index
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator.initializer">
            <summary>
            Designated initializer
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator.next">
            <summary>
            Scroll to the next page in the scrollview, with animation
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator.prev">
            <summary>
            Scroll to the previous page in the scrollview, with animation
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator.scrollTo(Y_.DataType_.Number,Y_.DataType_.Number,System.Object)">
            <summary>
            Scroll to a given page in the scrollview, with animation.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ScrollViewPaginator.snapToCurrent(Y_.DataType_.Number,System.Object)">
            <summary>
            Snaps the scrollview to the currently selected page
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ScrollViewPaginator.ATTRS">
            <summary>
            The default attribute configuration for the plugin
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ScrollViewPaginator.SNAP_TO_CURRENT">
            <summary>
            The default snap to current duration and easing values used on scroll end.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.ExecCommand">
            <summary>
            Plugin for the frame module to handle execCommands for Editor
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.command(System.Object,System.Object)">
            <summary>
            Execute a command on the frame's document.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_addclass(System.Object,System.Object)">
            <summary>
            Add a class to all of the elements in the selection
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_backcolor(System.Object,System.Object)">
            <summary>
            Adds a background color to the current selection, or creates a new element and applies it
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_fontname2(System.Object,System.Object)">
            <summary>
            Adds a font name to the current selection, or creates a new element and applies it
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_fontsize2(System.Object,System.Object)">
            <summary>
            Adds a fontsize to the current selection, or creates a new element and applies it
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_forecolor(System.Object,System.Object)">
            <summary>
            Adds a forecolor to the current selection, or creates a new element and applies it
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_hilitecolor(System.Object,System.Object)">
            <summary>
            Sugar method, calles backcolor
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_insertandfocus(System.Object,System.Object)">
            <summary>
            Inserts the provided HTML at the cursor, and focuses the cursor afterwards.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_insertbr(System.Object)">
            <summary>
            Inserts a BR at the current cursor position
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_inserthtml(System.Object,System.Object)">
            <summary>
            Inserts the provided HTML at the cursor, should be a single element.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_insertimage(System.Object,System.Object)">
            <summary>
            Inserts an image at the cursor position
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_insertorderedlist(System.Object)">
            <summary>
            Overload for COMMANDS.list
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_insertunorderedlist(System.Object)">
            <summary>
            Overload for COMMANDS.list
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_justify(System.Object,System.Object)">
            <summary>
            Noramlizes alignment for Webkit Browsers
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_justifycenter">
            <summary>
            Override method for COMMANDS.justify
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_justifyfull">
            <summary>
            Override method for COMMANDS.justify
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_justifyleft">
            <summary>
            Override method for COMMANDS.justify
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_justifyright">
            <summary>
            Override method for COMMANDS.justify
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_list(System.Object,System.Object)">
            <summary>
            Noramlizes lists creation/destruction for IE. All others pass through to native calls
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_removeclass(System.Object,System.Object)">
            <summary>
            Remove a class from all of the elements in the selection
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.COMMANDS_wrap(System.Object,System.Object)">
            <summary>
            Wraps the content with a new element of type (tag)
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.fixIETags(System.Object,System.Object,System.Object)">
            <summary>
            This method is meant to normalize IE's in ability to exec the proper command on elements with CSS styling.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.ExecCommand.getInstance">
            <summary>
            Get's the instance of YUI bound to the parent frame
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ExecCommand.bidi">
            <summary>
            bidi execCommand override for setting the text direction of a node.
            This property is added to the `Y.Plugin.ExecCommands.COMMANDS`
            collection.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ExecCommand.COMMANDS">
            <summary>
            Static object literal of execCommand overrides
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ExecCommand.NAME">
            <summary>
            execCommand
            </summary>
        </member>
        <member name="P:Y_.Plugin_.ExecCommand.NS">
            <summary>
            exec
            </summary>
        </member>
        <member name="T:Y_.Model">
            <summary>
            Attribute-based data model with APIs for getting, setting, validating, and
            syncing attribute values, as well as events for being notified of model changes.
            In most cases, you'll want to create your own subclass of `Y.Model` and
            customize it to meet your needs. In particular, the `sync()` and `validate()`
            methods are meant to be overridden by custom implementations. You may also want
            to override the `parse()` method to parse non-generic server responses.
            </summary>
        </member>
        <member name="M:Y_.Model._defAttrChangeFn(Y_.EventFacade)">
            <summary>
            Duckpunches the `_defAttrChangeFn()` provided by `Y.Attribute` so we can
            have a single global notification when a change event occurs.
            </summary>
        </member>
        <member name="M:Y_.Model._validate(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Calls the public, overridable `validate()` method and fires an `error` event
            if validation fails.
            </summary>
        </member>
        <member name="M:Y_.Model.addAttr(System.Object,System.Object,System.Object)">
            <summary>
            Duckpunches the `addAttr` method provided by `Y.Attribute` to keep the
            `id` attribute’s value and a custom id attribute’s (if provided) value
            in sync when adding the attributes to the model instance object.
            Marked as protected to hide it from Model's public API docs, even though
            this is a public method in Attribute.
            </summary>
        </member>
        <member name="M:Y_.Model.destroy">
            <summary>
            Destroys this model instance and removes it from its containing lists, if
            any.
            The _callback_, if one is provided, will be called after the model is
            destroyed.
            If `options.remove` is `true`, then this method delegates to the `sync()`
            method to delete the model from the persistence layer, which is an
            asynchronous action. In this case, the _callback_ (if provided) will be
            called after the sync layer indicates success or failure of the delete
            operation.
            </summary>
        </member>
        <member name="M:Y_.Model.destroy(System.Object)">
            <summary>
            Destroys this model instance and removes it from its containing lists, if
            any.
            The _callback_, if one is provided, will be called after the model is
            destroyed.
            If `options.remove` is `true`, then this method delegates to the `sync()`
            method to delete the model from the persistence layer, which is an
            asynchronous action. In this case, the _callback_ (if provided) will be
            called after the sync layer indicates success or failure of the delete
            operation.
            </summary>
        </member>
        <member name="M:Y_.Model.destroy(System.Object,System.Object)">
            <summary>
            Destroys this model instance and removes it from its containing lists, if
            any.
            The _callback_, if one is provided, will be called after the model is
            destroyed.
            If `options.remove` is `true`, then this method delegates to the `sync()`
            method to delete the model from the persistence layer, which is an
            asynchronous action. In this case, the _callback_ (if provided) will be
            called after the sync layer indicates success or failure of the delete
            operation.
            </summary>
        </member>
        <member name="M:Y_.Model.generateClientId">
            <summary>
            Returns a clientId string that's unique among all models on the current page
            (even models in other YUI instances). Uniqueness across pageviews is
            unlikely.
            </summary>
        </member>
        <member name="M:Y_.Model.get(System.Object)">
            <summary>
            Returns the value of the specified attribute.
            If the attribute's value is an object, _name_ may use dot notation to
            specify the path to a specific property within the object, and the value of
            that property will be returned.
            </summary>
        </member>
        <member name="M:Y_.Model.getAsHTML(System.Object)">
            <summary>
            Returns an HTML-escaped version of the value of the specified string
            attribute. The value is escaped using `Y.Escape.html()`.
            </summary>
        </member>
        <member name="M:Y_.Model.getAsURL(System.Object)">
            <summary>
            Returns a URL-encoded version of the value of the specified string
            attribute. The value is encoded using the native `encodeURIComponent()`
            function.
            </summary>
        </member>
        <member name="M:Y_.Model.isModified">
            <summary>
            Returns `true` if any attribute of this model has been changed since the
            model was last saved.
            New models (models for which `isNew()` returns `true`) are implicitly
            considered to be "modified" until the first time they're saved.
            </summary>
        </member>
        <member name="M:Y_.Model.isNew">
            <summary>
            Returns `true` if this model is "new", meaning it hasn't been saved since it
            was created.
            Newness is determined by checking whether the model's `id` attribute has
            been set. An empty id is assumed to indicate a new model, whereas a
            non-empty id indicates a model that was either loaded or has been saved
            since it was created.
            </summary>
        </member>
        <member name="M:Y_.Model.load">
            <summary>
            Loads this model from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful load operation will fire a `load` event, while an unsuccessful
            load operation will fire an `error` event with the `src` value "load".
            If the load operation succeeds and one or more of the loaded attributes
            differ from this model's current attributes, a `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.load(System.Object)">
            <summary>
            Loads this model from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful load operation will fire a `load` event, while an unsuccessful
            load operation will fire an `error` event with the `src` value "load".
            If the load operation succeeds and one or more of the loaded attributes
            differ from this model's current attributes, a `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.load(System.Object,System.Object)">
            <summary>
            Loads this model from the server.
            This method delegates to the `sync()` method to perform the actual load
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful load operation will fire a `load` event, while an unsuccessful
            load operation will fire an `error` event with the `src` value "load".
            If the load operation succeeds and one or more of the loaded attributes
            differ from this model's current attributes, a `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.parse(System.Object)">
            <summary>
            Called to parse the _response_ when the model is loaded from the server.
            This method receives a server _response_ and is expected to return an
            attribute hash.
            The default implementation assumes that _response_ is either an attribute
            hash or a JSON string that can be parsed into an attribute hash. If
            _response_ is a JSON string and either `Y.JSON` or the native `JSON` object
            are available, it will be parsed automatically. If a parse error occurs, an
            `error` event will be fired and the model will not be updated.
            You may override this method to implement custom parsing logic if necessary.
            </summary>
        </member>
        <member name="M:Y_.Model.save">
            <summary>
            Saves this model to the server.
            This method delegates to the `sync()` method to perform the actual save
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful save operation will fire a `save` event, while an unsuccessful
            save operation will fire an `error` event with the `src` value "save".
            If the save operation succeeds and one or more of the attributes returned in
            the server's response differ from this model's current attributes, a
            `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.save(SharpKit.JavaScript.JsAction)">
            <summary>
            Saves this model to the server.
            This method delegates to the `sync()` method to perform the actual save
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful save operation will fire a `save` event, while an unsuccessful
            save operation will fire an `error` event with the `src` value "save".
            If the save operation succeeds and one or more of the attributes returned in
            the server's response differ from this model's current attributes, a
            `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.save(System.Object)">
            <summary>
            Saves this model to the server.
            This method delegates to the `sync()` method to perform the actual save
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful save operation will fire a `save` event, while an unsuccessful
            save operation will fire an `error` event with the `src` value "save".
            If the save operation succeeds and one or more of the attributes returned in
            the server's response differ from this model's current attributes, a
            `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.save(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Saves this model to the server.
            This method delegates to the `sync()` method to perform the actual save
            operation, which is an asynchronous action. Specify a _callback_ function to
            be notified of success or failure.
            A successful save operation will fire a `save` event, while an unsuccessful
            save operation will fire an `error` event with the `src` value "save".
            If the save operation succeeds and one or more of the attributes returned in
            the server's response differ from this model's current attributes, a
            `change` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.set(System.Object,System.Object)">
            <summary>
            Sets the value of a single attribute. If model validation fails, the
            attribute will not be set and an `error` event will be fired.
            Use `setAttrs()` to set multiple attributes at once.
            </summary>
        </member>
        <member name="M:Y_.Model.set(System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of a single attribute. If model validation fails, the
            attribute will not be set and an `error` event will be fired.
            Use `setAttrs()` to set multiple attributes at once.
            </summary>
        </member>
        <member name="M:Y_.Model.setAttrs(System.Object)">
            <summary>
            Sets the values of multiple attributes at once. If model validation fails,
            the attributes will not be set and an `error` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.setAttrs(System.Object,System.Object)">
            <summary>
            Sets the values of multiple attributes at once. If model validation fails,
            the attributes will not be set and an `error` event will be fired.
            </summary>
        </member>
        <member name="M:Y_.Model.sync(System.Object)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            model. The default just calls the callback without actually doing anything.
            This method is called internally by `load()`, `save()`, and `destroy()`.
            </summary>
        </member>
        <member name="M:Y_.Model.sync(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            model. The default just calls the callback without actually doing anything.
            This method is called internally by `load()`, `save()`, and `destroy()`.
            </summary>
        </member>
        <member name="M:Y_.Model.sync(System.Object,System.Object)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            model. The default just calls the callback without actually doing anything.
            This method is called internally by `load()`, `save()`, and `destroy()`.
            </summary>
        </member>
        <member name="M:Y_.Model.sync(System.Object,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Override this method to provide a custom persistence implementation for this
            model. The default just calls the callback without actually doing anything.
            This method is called internally by `load()`, `save()`, and `destroy()`.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Model.toJSON" -->
        <member name="M:Y_.Model.undo">
            <summary>
            Reverts the last change to the model.
            If an _attrNames_ array is provided, then only the named attributes will be
            reverted (and only if they were modified in the previous change). If no
            _attrNames_ array is provided, then all changed attributes will be reverted
            to their previous values.
            Note that only one level of undo is available: from the current state to the
            previous state. If `undo()` is called when no previous state is available,
            it will simply do nothing.
            </summary>
        </member>
        <member name="M:Y_.Model.undo(Y_.Array)">
            <summary>
            Reverts the last change to the model.
            If an _attrNames_ array is provided, then only the named attributes will be
            reverted (and only if they were modified in the previous change). If no
            _attrNames_ array is provided, then all changed attributes will be reverted
            to their previous values.
            Note that only one level of undo is available: from the current state to the
            previous state. If `undo()` is called when no previous state is available,
            it will simply do nothing.
            </summary>
        </member>
        <member name="M:Y_.Model.undo(Y_.Array,System.Object)">
            <summary>
            Reverts the last change to the model.
            If an _attrNames_ array is provided, then only the named attributes will be
            reverted (and only if they were modified in the previous change). If no
            _attrNames_ array is provided, then all changed attributes will be reverted
            to their previous values.
            Note that only one level of undo is available: from the current state to the
            previous state. If `undo()` is called when no previous state is available,
            it will simply do nothing.
            </summary>
        </member>
        <member name="M:Y_.Model.undo(System.Object)">
            <summary>
            Reverts the last change to the model.
            If an _attrNames_ array is provided, then only the named attributes will be
            reverted (and only if they were modified in the previous change). If no
            _attrNames_ array is provided, then all changed attributes will be reverted
            to their previous values.
            Note that only one level of undo is available: from the current state to the
            previous state. If `undo()` is called when no previous state is available,
            it will simply do nothing.
            </summary>
        </member>
        <member name="M:Y_.Model.validate(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Override this method to provide custom validation logic for this model.
            While attribute-specific validators can be used to validate individual
            attributes, this method gives you a hook to validate a hash of all
            attributes before the model is saved. This method is called automatically
            before `save()` takes any action. If validation fails, the `save()` call
            will be aborted.
            In your validation method, call the provided `callback` function with no
            arguments to indicate success. To indicate failure, pass a single argument,
            which may contain an error message, an array of error messages, or any other
            value. This value will be passed along to the `error` event.
            </summary>
        </member>
        <member name="P:Y_.Model.changed">
            <summary>
            Hash of attributes that have changed since the last time this model was
            saved.
            </summary>
        </member>
        <member name="P:Y_.Model.lastChange">
            <summary>
            Hash of attributes that were changed in the last `change` event. Each item
            in this hash is an object with the following properties:
            * `newVal`: The new value of the attribute after it changed.
            * `prevVal`: The old value of the attribute before it changed.
            * `src`: The source of the change, or `null` if no source was specified.
            </summary>
        </member>
        <member name="T:Y_.GroupDiamond">
            <summary>
            Abstract class for creating groups of diamonds with the same styles and dimensions.
            </summary>
        </member>
        <member name="T:Y_.File">
            <summary>
            `Y.File` serves as an alias for either <a href="FileFlash.html">`Y.FileFlash`</a>
            or <a href="FileHTML5.html">`Y.FileHTML5`</a>, depending on the feature set available
            in a specific browser.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.DataType_.Date_.Locale" -->
        <member name="T:Y_.ComboSeries">
            <summary>
            The ComboSeries class renders a combination of lines, plots and area fills in a single series. Each
            series type has a corresponding boolean attribute indicating if it is rendered. By default, lines and plots
            are rendered and area is not.
            </summary>
        </member>
        <member name="P:Y_.ComboSeries.area">
            <summary>
            Reference to the styles of the area fills. These styles can also be accessed through the `styles` attribute.
            Below are the default values:
            <dl>
            <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be
            retrieved from the following array:
            `["#66007f", "#a86f41", "#295454", "#996ab2", "#e8cdb7", "#90bdbd","#000000","#c3b8ca", "#968373", "#678585"]`
            </dd>
            <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>
            </dl>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Y_.ComboSeries.line" -->
        <!-- Badly formed XML comment ignored for member "P:Y_.ComboSeries.marker" -->
        <member name="P:Y_.ComboSeries.styles">
            <summary>
            Style properties for the series. Contains a key indexed hash of the following:
            <dl>
            <dt>marker</dt><dd>Style properties for the markers in the series. Specific style attributes are listed
            <a href="#attr_marker">here</a>.</dd>
            <dt>line</dt><dd>Style properties for the lines in the series. Specific
            style attributes are listed <a href="#attr_line">here</a>.</dd>
            <dt>area</dt><dd>Style properties for the area fills in the series. Specific style attributes are listed
            <a href="#attr_area">here</a>.</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.CanvasPath">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Path.html">`Path`</a> class.
            `CanvasPath` is not intended to be used directly. Instead, use the <a href="Path.html">`Path`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Path.html">`Path`</a>
            class will point to the `CanvasPath` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasPath.end">
            <summary>
            Completes a drawing operation.
            </summary>
        </member>
        <member name="T:Y_.BaseCore">
            <summary>
            The BaseCore class, is the lightest version of Base, and provides Base's
            basic lifecycle management and ATTRS construction support, but doesn't
            fire init/destroy or attribute change events.
            BaseCore also handles the chaining of initializer and destructor methods across
            the hierarchy as part of object construction and destruction. Additionally, attributes
            configured through the static <a href="#property_BaseCore.ATTRS">ATTRS</a>
            property for each class in the hierarchy will be initialized by BaseCore.
            Classes which require attribute support, but don't intend to use/expose attribute
            change events can extend BaseCore instead of Base for optimal kweight and
            runtime performance.
            </summary>
        </member>
        <member name="M:Y_.BaseCore._getAttrCfgs">
            <summary>
            Returns an aggregated set of attribute configurations, by traversing
            the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.BaseCore._getClasses">
            <summary>
            Returns the class hierarchy for this object, with BaseCore being the last class in the array.
            </summary>
        </member>
        <member name="M:Y_.BaseCore.destroy">
            <summary>
            Destroy lifecycle method. Invokes destructors for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.BaseCore.init(System.Object)">
            <summary>
            Init lifecycle method, invoked during construction. Sets up attributes
            and invokes initializers for the class hierarchy.
            </summary>
        </member>
        <member name="M:Y_.BaseCore.toString">
            <summary>
            Default toString implementation. Provides the constructor NAME
            and the instance guid, if set.
            </summary>
        </member>
        <member name="P:Y_.BaseCore.ATTRS">
            <summary>
            The default set of attributes which will be available for instances of this class, and
            their configuration. In addition to the configuration properties listed by
            AttributeCore's <a href="AttributeCore.html#method_addAttr">addAttr</a> method,
            the attribute can also be configured with a "cloneDefaultValue" property, which
            defines how the statically defined value field should be protected
            ("shallow", "deep" and false are supported values).
            By default if the value is an object literal or an array it will be "shallow"
            cloned, to protect the default value.
            </summary>
        </member>
        <member name="T:Y_.AutoComplete">
            <summary>
            Alias for <a href="AutoCompleteList.html">`AutoCompleteList`</a>. See that class
            for API docs.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Y_.Array" -->
        <member name="M:Y_.Array.dedupe(System.Object)">
            <summary>
            Dedupes an array of strings, returning an array that's guaranteed to contain
            only one copy of a given string.
            This method differs from `Array.unique()` in that it's optimized for use only
            with strings, whereas `unique` may be used with other types (but is slower).
            Using `dedupe()` with non-string values may result in unexpected behavior.
            </summary>
        </member>
        <member name="M:Y_.Array.each(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array. This method wraps
            the native ES5 `Array.forEach()` method if available.
            </summary>
        </member>
        <member name="M:Y_.Array.each(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array. This method wraps
            the native ES5 `Array.forEach()` method if available.
            </summary>
        </member>
        <member name="M:Y_.Array.every(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array. Iteration stops if the
            supplied function does not return a truthy value.
            </summary>
        </member>
        <member name="M:Y_.Array.every(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array. Iteration stops if the
            supplied function does not return a truthy value.
            </summary>
        </member>
        <member name="M:Y_.Array.filter(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array. Returns a new array
            containing the items for which the supplied function returned a truthy value.
            </summary>
        </member>
        <member name="M:Y_.Array.filter(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array. Returns a new array
            containing the items for which the supplied function returned a truthy value.
            </summary>
        </member>
        <member name="M:Y_.Array.find(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array, searching for the
            first item that matches the supplied function.
            </summary>
        </member>
        <member name="M:Y_.Array.find(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array, searching for the
            first item that matches the supplied function.
            </summary>
        </member>
        <member name="M:Y_.Array.forEach">
            <summary>
            Alias for `each()`.
            </summary>
        </member>
        <member name="M:Y_.Array.grep(Y_.Array,System.Object)">
            <summary>
            Iterates over an array, returning a new array of all the elements that match the
            supplied regular expression.
            </summary>
        </member>
        <member name="M:Y_.Array.hash(System.Object)">
            <summary>
            Returns an object using the first array as keys and the second as values. If
            the second array is not provided, or if it doesn't contain the same number of
            values as the first array, then `true` will be used in place of the missing
            values.
            </summary>
        </member>
        <member name="M:Y_.Array.hash(System.Object,Y_.Array)">
            <summary>
            Returns an object using the first array as keys and the second as values. If
            the second array is not provided, or if it doesn't contain the same number of
            values as the first array, then `true` will be used in place of the missing
            values.
            </summary>
        </member>
        <member name="M:Y_.Array.indexOf(Y_.Array,System.Object)">
            <summary>
            Returns the index of the first item in the array that's equal (using a strict
            equality check) to the specified _value_, or `-1` if the value isn't found.
            This method wraps the native ES5 `Array.indexOf()` method if available.
            </summary>
        </member>
        <member name="M:Y_.Array.indexOf(Y_.Array,System.Object,Y_.DataType_.Number)">
            <summary>
            Returns the index of the first item in the array that's equal (using a strict
            equality check) to the specified _value_, or `-1` if the value isn't found.
            This method wraps the native ES5 `Array.indexOf()` method if available.
            </summary>
        </member>
        <member name="M:Y_.Array.invoke(Y_.Array,System.Object)">
            <summary>
            Executes a named method on each item in an array of objects. Items in the array
            that do not have a function by that name will be skipped.
            </summary>
        </member>
        <member name="M:Y_.Array.invoke(Y_.Array,System.Object,System.Object)">
            <summary>
            Executes a named method on each item in an array of objects. Items in the array
            that do not have a function by that name will be skipped.
            </summary>
        </member>
        <member name="M:Y_.Array.lastIndexOf(Y_.Array,System.Object)">
            <summary>
            Returns the index of the last item in the array that contains the specified
            value, or `-1` if the value isn't found.
            </summary>
        </member>
        <member name="M:Y_.Array.lastIndexOf(Y_.Array,System.Object,Y_.DataType_.Number)">
            <summary>
            Returns the index of the last item in the array that contains the specified
            value, or `-1` if the value isn't found.
            </summary>
        </member>
        <member name="M:Y_.Array.map(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array and returns a new array
            containing all the values returned by the supplied function.
            </summary>
        </member>
        <member name="M:Y_.Array.map(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array and returns a new array
            containing all the values returned by the supplied function.
            </summary>
        </member>
        <member name="M:Y_.Array.numericSort(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Numeric sort convenience function.
            The native `Array.prototype.sort()` function converts values to strings and
            sorts them in lexicographic order, which is unsuitable for sorting numeric
            values. Provide `Array.numericSort` as a custom sort function when you want
            to sort values in numeric order.
            </summary>
        </member>
        <member name="M:Y_.Array.partition(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Partitions an array into two new arrays, one with the items for which the
            supplied function returns `true`, and one with the items for which the function
            returns `false`.
            </summary>
        </member>
        <member name="M:Y_.Array.partition(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Partitions an array into two new arrays, one with the items for which the
            supplied function returns `true`, and one with the items for which the function
            returns `false`.
            </summary>
        </member>
        <member name="M:Y_.Array.reduce(Y_.Array,System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array, "folding" the array
            into a single value.
            </summary>
        </member>
        <member name="M:Y_.Array.reduce(Y_.Array,System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array, "folding" the array
            into a single value.
            </summary>
        </member>
        <member name="M:Y_.Array.reject(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            The inverse of `Array.filter()`. Executes the supplied function on each item.
            Returns a new array containing the items for which the supplied function
            returned `false`.
            </summary>
        </member>
        <member name="M:Y_.Array.reject(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            The inverse of `Array.filter()`. Executes the supplied function on each item.
            Returns a new array containing the items for which the supplied function
            returned `false`.
            </summary>
        </member>
        <member name="M:Y_.Array.some(Y_.Array,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes the supplied function on each item in the array. Returning a truthy
            value from the function will stop the processing of remaining items.
            </summary>
        </member>
        <member name="M:Y_.Array.some(Y_.Array,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes the supplied function on each item in the array. Returning a truthy
            value from the function will stop the processing of remaining items.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Y_.Array.test(System.Object)" -->
        <member name="M:Y_.Array.unique(Y_.Array)">
            <summary>
            Returns a copy of the specified array with duplicate items removed.
            </summary>
        </member>
        <member name="M:Y_.Array.zip(Y_.Array,Y_.Array)">
            <summary>
            Creates an array of arrays by pairing the corresponding elements of two arrays
            together into a new array.
            </summary>
        </member>
        <member name="T:Y_.AreaSplineSeries">
            <summary>
            AreaSplineSeries renders an area graph with data points connected by a curve.
            </summary>
        </member>
        <member name="P:Y_.AreaSplineSeries.styles">
            <summary>
            Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:
            <dl>
            <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be
            retrieved from the following array:
            `["#66007f", "#a86f41", "#295454", "#996ab2", "#e8cdb7", "#90bdbd","#000000","#c3b8ca", "#968373", "#678585"]`
            </dd>
            <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>
            </dl>
            </summary>
        </member>
        <member name="T:Y_.App_.TransitionsNative">
            <summary>
            Provides the implementation of view transitions for `Y.App.Transitions` in
            browsers which support native CSS3 transitions.
            When this module is used, `Y.App.TransitionsNative` will automatically mix
            itself in to `Y.App`.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._dequeueActiveView">
            <summary>
            Dequeues any pending calls to `_uiTransitionActiveView()`.
            **Note:** When there is more than one queued transition, only the most
            recent `activeView` change will be visually transitioned, while the others
            will have their `transition` option overridden to `false`.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._getFx(Y_.View,Y_.View)">
            <summary>
            Returns an object containing a named fx for both `viewIn` and `viewOut`
            based on the relationship between the specified `newView` and `oldView`.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._getFx(Y_.View,Y_.View,System.Object)">
            <summary>
            Returns an object containing a named fx for both `viewIn` and `viewOut`
            based on the relationship between the specified `newView` and `oldView`.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._queueActiveView">
            <summary>
            Queues calls to `_uiTransitionActiveView()` to make sure a currently running
            transition isn't interrupted.
            **Note:** This method prevents the default `_uiSetActiveView()` method from
            running.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._uiTransitionActiveView(Y_.View)">
            <summary>
            Performs the actual change of this app's `activeView` by visually
            transitioning between the `newView` and `oldView` using any specified
            `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** This method overrides `_uiSetActiveView()` and provides all of its
            functionality plus supports visual transitions. Also, the `activeView`
            attribute is read-only and can be changed by calling the `showView()`
            method.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._uiTransitionActiveView(Y_.View,System.Object)">
            <summary>
            Performs the actual change of this app's `activeView` by visually
            transitioning between the `newView` and `oldView` using any specified
            `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** This method overrides `_uiSetActiveView()` and provides all of its
            functionality plus supports visual transitions. Also, the `activeView`
            attribute is read-only and can be changed by calling the `showView()`
            method.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._uiTransitionActiveView(Y_.View,Y_.View)">
            <summary>
            Performs the actual change of this app's `activeView` by visually
            transitioning between the `newView` and `oldView` using any specified
            `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** This method overrides `_uiSetActiveView()` and provides all of its
            functionality plus supports visual transitions. Also, the `activeView`
            attribute is read-only and can be changed by calling the `showView()`
            method.
            </summary>
        </member>
        <member name="M:Y_.App_.TransitionsNative._uiTransitionActiveView(Y_.View,Y_.View,System.Object)">
            <summary>
            Performs the actual change of this app's `activeView` by visually
            transitioning between the `newView` and `oldView` using any specified
            `options`.
            The `newView` is attached to the app by rendering it to the `viewContainer`,
            and making this app a bubble target of its events.
            The `oldView` is detached from the app by removing it from the
            `viewContainer`, and removing this app as a bubble target for its events.
            The `oldView` will either be preserved or properly destroyed.
            **Note:** This method overrides `_uiSetActiveView()` and provides all of its
            functionality plus supports visual transitions. Also, the `activeView`
            attribute is read-only and can be changed by calling the `showView()`
            method.
            </summary>
        </member>
        <member name="P:Y_.App_.TransitionsNative._viewTransitionQueue">
            <summary>
            A queue that holds pending calls to this app's `_uiTransitionActiveView()`
            method.
            </summary>
        </member>
        <member name="T:Y_.YuiObject">
            <summary>
            Adds utilities to the YUI instance for working with objects.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.__(System.Object)">
            <summary>
            Returns a new object that uses _obj_ as its prototype. This method wraps the
            native ES5 `Object.create()` method if available, but doesn't currently
            pass through `Object.create()`'s second argument (properties) in order to
            ensure compatibility with older browsers.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.each(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes a function on each enumerable property in _obj_. The function
            receives the value, the key, and the object itself as parameters (in that
            order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.each(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes a function on each enumerable property in _obj_. The function
            receives the value, the key, and the object itself as parameters (in that
            order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.each(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Executes a function on each enumerable property in _obj_. The function
            receives the value, the key, and the object itself as parameters (in that
            order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.getValue(System.Object,Y_.Array)">
            <summary>
            Retrieves the sub value at the provided path,
            from the value object provided.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.hasKey(System.Object,System.Object)">
            <summary>
            Alias for `owns()`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.hasValue(System.Object,System.Object)">
            <summary>
            Returns `true` if the object owns an enumerable property with the specified
            value.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.isEmpty(System.Object)">
            <summary>
            Returns `true` if the object has no enumerable properties of its own.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.keys(System.Object)">
            <summary>
            Returns an array containing the object's enumerable keys. Does not include
            prototype keys or non-enumerable keys.
            Note that keys are returned in enumeration order (that is, in the same order
            that they would be enumerated by a `for-in` loop), which may not be the same
            as the order in which they were defined.
            This method is an alias for the native ES5 `Object.keys()` method if
            available.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.owns(System.Object,System.Object)">
            <summary>
            Returns `true` if _key_ exists on _obj_, `false` if _key_ doesn't exist or
            exists only on _obj_'s prototype. This is essentially a safer version of
            `obj.hasOwnProperty()`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.setValue(System.Object,Y_.Array,System.Object)">
            <summary>
            Sets the sub-attribute value at the provided path on the
            value object.  Returns the modified value object, or
            undefined if the path is invalid.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.size(System.Object)">
            <summary>
            Returns the number of enumerable keys owned by an object.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.some(System.Object,SharpKit.JavaScript.JsAction)">
            <summary>
            Executes a function on each enumerable property in _obj_, but halts if the
            function returns a truthy value. The function receives the value, the key,
            and the object itself as paramters (in that order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.some(System.Object,SharpKit.JavaScript.JsAction,System.Object)">
            <summary>
            Executes a function on each enumerable property in _obj_, but halts if the
            function returns a truthy value. The function receives the value, the key,
            and the object itself as paramters (in that order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.some(System.Object,SharpKit.JavaScript.JsAction,System.Object,System.Object)">
            <summary>
            Executes a function on each enumerable property in _obj_, but halts if the
            function returns a truthy value. The function receives the value, the key,
            and the object itself as paramters (in that order).
            By default, only properties owned by _obj_ are enumerated. To include
            prototype properties, set the _proto_ parameter to `true`.
            </summary>
        </member>
        <member name="M:Y_.YuiObject.values(System.Object)">
            <summary>
            Returns an array containing the values of the object's enumerable keys.
            Note that values are returned in enumeration order (that is, in the same
            order that they would be enumerated by a `for-in` loop), which may not be the
            same as the order in which they were defined.
            </summary>
        </member>
        <member name="T:Y_.YQLRequest">
            <summary>
            Utility Class used under the hood my the YQL class
            </summary>
        </member>
        <member name="M:Y_.YQLRequest.send">
            <summary>
            The method that executes the YQL Request.
            </summary>
        </member>
        <member name="P:Y_.YQLRequest.BASE_URL">
            <summary>
            The base URL to query: query.yahooapis.com/v1/public/yql?
            </summary>
        </member>
        <member name="P:Y_.YQLRequest.ENV">
            <summary>
            The environment file to load: http://datatables.org/alltables.env
            </summary>
        </member>
        <member name="P:Y_.YQLRequest.FORMAT">
            <summary>
            Default format to use: json
            </summary>
        </member>
        <member name="P:Y_.YQLRequest.PROTO">
            <summary>
            Default protocol to use: http
            </summary>
        </member>
        <member name="T:Y_.ValueChange">
            <summary>
            Provides the implementation for the synthetic `valueChange` event. This class
            isn't meant to be used directly, but is public to make monkeypatching possible.
            Usage:
            YUI().use('event-valuechange', function (Y) {
            Y.one('#my-input').on('valueChange', function (e) {
            Y.log('previous value: ' + e.prevVal);
            Y.log('new value: ' + e.newVal);
            });
            });
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onBlur(Y_.EventFacade,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Stops polling when a node's blur event fires.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onFocus(Y_.EventFacade,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Resets a node's history and starts polling when a focus event occurs.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onKeyDown(Y_.EventFacade,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Starts polling when a node receives a keyDown event.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onKeyUp(Y_.EventFacade,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Starts polling when an IME-related keyUp event occurs on a node.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onMouseDown(Y_.EventFacade,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Starts polling when a node receives a mouseDown event.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onSubscribe(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Called when the `valuechange` event receives a new subscriber.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onSubscribe(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier,System.Object)">
            <summary>
            Called when the `valuechange` event receives a new subscriber.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._onUnsubscribe(Y_.Node,System.Object,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Called when the `valuechange` event loses a subscriber.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._poll(Y_.Node,System.Object)">
            <summary>
            Called at an interval to poll for changes to the value of the specified
            node.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._refreshTimeout(Y_.Node,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Restarts the inactivity timeout for the specified node.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._startPolling(Y_.Node,Y_.SyntheticEvent_.Notifier,System.Object)">
            <summary>
            Begins polling for changes to the `value` property of the specified node. If
            polling is already underway for the specified node, it will not be restarted
            unless the `force` option is `true`
            </summary>
        </member>
        <member name="M:Y_.ValueChange._stopPolling(Y_.Node)">
            <summary>
            Stops polling for changes to the specified node's `value` attribute.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._stopPolling(Y_.Node,Y_.SyntheticEvent_.Notifier)">
            <summary>
            Stops polling for changes to the specified node's `value` attribute.
            </summary>
        </member>
        <member name="M:Y_.ValueChange._stopTimeout(Y_.Node)">
            <summary>
            Clears the inactivity timeout for the specified node, if any.
            </summary>
        </member>
        <member name="P:Y_.ValueChange.POLL_INTERVAL">
            <summary>
            Interval (in milliseconds) at which to poll for changes to the value of an
            element with one or more `valueChange` subscribers when the user is likely
            to be interacting with it.
            </summary>
        </member>
        <member name="P:Y_.ValueChange.TIMEOUT">
            <summary>
            Timeout (in milliseconds) after which to stop polling when there hasn't been
            any new activity (keypresses, mouse clicks, etc.) on an element.
            </summary>
        </member>
        <member name="T:Y_.Text_.WordBreak">
            <summary>
            <p>
            Provides utility methods for splitting strings on word breaks and determining
            whether a character index represents a word boundary, using the generic word
            breaking algorithm defined in the Unicode Text Segmentation guidelines
            (<a href="http://unicode.org/reports/tr29/#Word_Boundaries">Unicode Standard
            Annex #29</a>).
            </p>
            <p>
            This algorithm provides a reasonable default for many languages. However, it
            does not cover language or context specific requirements, and it does not
            provide meaningful results at all for languages that don't use spaces between
            words, such as Chinese, Japanese, Thai, Lao, Khmer, and others. Server-based
            word breaking services usually provide significantly better results with
            better performance.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Text_.WordBreak._classify(System.Object)">
            <summary>
            Returns a character classification map for the specified string.
            </summary>
        </member>
        <member name="M:Y_.Text_.WordBreak._isWordBoundary(Y_.Array,Y_.DataType_.Number)">
            <summary>
            <p>
            Returns <code>true</code> if there is a word boundary between the
            specified character index and the next character index (or the end of the
            string).
            </p>
            <p>
            Note that there are always word breaks at the beginning and end of a
            string, so <code>_isWordBoundary('', 0)</code> and
            <code>_isWordBoundary('a', 0)</code> will both return <code>true</code>.
            </p>
            </summary>
        </member>
        <member name="M:Y_.Text_.WordBreak.getUniqueWords(System.Object,System.Object)">
            <summary>
            Returns an array containing only unique words from the specified string.
            For example, the string <code>'foo bar baz foo'</code> would result in
            the array <code>['foo', 'bar', 'baz']</code>.
            </summary>
        </member>
        <member name="M:Y_.Text_.WordBreak.getWords(System.Object,System.Object)">
            <summary>
            Splits the specified string into an array of individual words.
            </summary>
        </member>
        <member name="M:Y_.Text_.WordBreak.isWordBoundary(System.Object,Y_.DataType_.Number)">
            <summary>
            <p>
            Returns <code>true</code> if there is a word boundary between the
            specified character index and the next character index (or the end of the
            string).
            </p>
            <p>
            Note that there are always word breaks at the beginning and end of a
            string, so <code>isWordBoundary('', 0)</code> and
            <code>isWordBoundary('a', 0)</code> will both return <code>true</code>.
            </p>
            </summary>
        </member>
        <member name="T:Y_.Test_.ShouldFail">
            <summary>
            ShouldFail is subclass of AssertionError that is thrown whenever
            a test was expected to fail but did not.
            </summary>
        </member>
        <member name="T:Y_.Test_.Results">
            <summary>
            Convenience type for storing and aggregating
            test result information.
            </summary>
        </member>
        <member name="M:Y_.Test_.Results.include(Y_.Test_.Results)">
            <summary>
            Includes results from another results object into this one.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.duration">
            <summary>
            Amount of time (ms) it took to complete testing.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.errors">
            <summary>
            Number of errors that occur in non-test methods.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.failed">
            <summary>
            Number of failed tests.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.ignored">
            <summary>
            Number of ignored tests.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.passed">
            <summary>
            Number of passed tests.
            </summary>
        </member>
        <member name="P:Y_.Test_.Results.total">
            <summary>
            Number of total tests.
            </summary>
        </member>
        <member name="T:Y_.SVGPath">
            <summary>
            <a href="http://www.w3.org/TR/SVG/">SVG</a> implementation of the <a href="Path.html">`Path`</a> class.
            `SVGPath` is not intended to be used directly. Instead, use the <a href="Path.html">`Path`</a> class.
            If the browser has <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities, the <a href="Path.html">`Path`</a>
            class will point to the `SVGPath` class.
            </summary>
        </member>
        <member name="T:Y_.RightAxisLayout">
            <summary>
            RightAxisLayout contains algorithms for rendering a right axis.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout._getTransformOrigin(Y_.DataType_.Number)">
            <summary>
            Returns the transformOrigin to use for an axis label based on the position of the axis
            and the rotation of the label.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout._setRotationCoords(System.Object)">
            <summary>
            Adjusts the coordinates of an axis label based on the rotation.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.drawTick(Y_.Path,System.Object,System.Object)">
            <summary>
            Draws a tick
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.getExplicitlySized">
            <summary>
            Determines the available label width when the axis width has been explicitly set.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.getLabelPoint(System.Object)">
            <summary>
            Calculates the point for a label.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.getLineStart">
            <summary>
            Calculates the coordinates for the first point on an axis.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.offsetNodeForTick(Y_.Node)">
            <summary>
            Adjusts position for inner ticks.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.positionLabel(System.Object,System.Object)">
            <summary>
            Rotate and position labels.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.positionTitle(System.Object)">
            <summary>
            Rotate and position title.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.setCalculatedSize">
            <summary>
            Assigns a height based on the size of the contents.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.setTickOffset">
            <summary>
            Sets the length of the tick on either side of the axis line.
            </summary>
        </member>
        <member name="M:Y_.RightAxisLayout.updateMaxLabelSize(System.Object)">
            <summary>
            Updates the value for the `maxLabelSize` for use in calculating total size.
            </summary>
        </member>
        <member name="T:Y_.Plugin_.CalendarNavigator">
            <summary>
            A plugin class which adds navigation controls to Calendar.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.CalendarNavigator._addMonths(Y_.Event)">
            <summary>
            Private utility method that adds months to the host calendar date
            based on the control click and the shiftByMonths property.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.CalendarNavigator._initNavigationControls">
            <summary>
            Protected render assist method that initialized and renders the navigation controls.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.CalendarNavigator._subtractMonths(Y_.Event)">
            <summary>
            Private utility method that subtracts months from the host calendar date
            based on the control click and the shiftByMonths property.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.CalendarNavigator.destructor">
            <summary>
            The initializer destructor implementation. Responsible for destroying the initialized
            control mechanisms.
            </summary>
        </member>
        <member name="M:Y_.Plugin_.CalendarNavigator.initializer(System.Object)">
            <summary>
            The initializer lifecycle implementation. Modifies the host widget's
            render to add navigation controls.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CalendarNavigator.ATTRS">
            <summary>
            Static property used to define the default attribute
            configuration for the plugin.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CalendarNavigator.CALENDARNAV_STRINGS">
            <summary>
            The CSS classnames for the calendar navigator controls.
            </summary>
        </member>
        <member name="P:Y_.Plugin_.CalendarNavigator.shiftByMonths">
            <summary>
            The number of months to shift by when the control arrows are clicked.
            </summary>
        </member>
        <member name="T:Y_.ImgLoadGroup">
            <summary>
            A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.
            </summary>
        </member>
        <member name="M:Y_.ImgLoadGroup.addCustomTrigger(System.Object,System.Object)">
            <summary>
            Adds a custom event trigger to the group.
            </summary>
        </member>
        <member name="M:Y_.ImgLoadGroup.addTrigger(System.Object,System.Object)">
            <summary>
            Adds a trigger to the group. Arguments are passed to <code>Y.on</code>.
            </summary>
        </member>
        <member name="M:Y_.ImgLoadGroup.fetch">
            <summary>
            Displays the images in the group.
            This method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.
            </summary>
        </member>
        <member name="M:Y_.ImgLoadGroup.registerImage(System.Object)">
            <summary>
            Registers an image with the group.
            Arguments are passed through to a <code>Y.ImgLoadImgObj</code> constructor; see that class' attribute documentation for detailed information. "<code>domId</code>" is a required attribute.
            </summary>
        </member>
        <member name="P:Y_.ImgLoadGroup.foldDistance">
            <summary>
            Distance below the fold for which images are loaded. Images are not loaded until they are at most this distance away from (or above) the fold.
            This check is performed at page load (domready) and after any window scroll or window resize event (until all images are loaded).
            </summary>
        </member>
        <member name="P:Y_.ImgLoadGroup.timeLimit">
            <summary>
            Time limit, in seconds, after which images are fetched regardless of trigger events.
            </summary>
        </member>
        <member name="T:Y_.Graph">
            <summary>
            Graph manages and contains series instances for a `CartesianChart`
            instance.
            </summary>
        </member>
        <member name="M:Y_.Graph._getDefaultStyles">
            <summary>
            Gets the default value for the `styles` attribute. Overrides
            base implementation.
            </summary>
        </member>
        <member name="M:Y_.Graph.addDispatcher(Y_.CartesianSeries)">
            <summary>
            Adds dispatcher to a `_dispatcher` used to
            to ensure all series have redrawn before for firing event.
            </summary>
        </member>
        <member name="M:Y_.Graph.destructor">
            <summary>
            Destructor implementation Graph class. Removes all Graphic instances from the widget.
            </summary>
        </member>
        <member name="M:Y_.Graph.getSeriesByIndex(Y_.DataType_.Number)">
            <summary>
            Returns a series instance based on an index.
            </summary>
        </member>
        <member name="M:Y_.Graph.getSeriesByKey(System.Object)">
            <summary>
            Returns a series instance based on a key value.
            </summary>
        </member>
        <member name="P:Y_.Graph.background">
            <summary>
            Reference to graphic instance used for the background.
            </summary>
        </member>
        <member name="P:Y_.Graph.chart">
            <summary>
            Reference to the chart instance using the graph.
            </summary>
        </member>
        <member name="P:Y_.Graph.graphic">
            <summary>
            Reference to graphic instance used for series.
            </summary>
        </member>
        <member name="P:Y_.Graph.gridlines">
            <summary>
            Reference to graphic instance used for gridlines.
            </summary>
        </member>
        <member name="P:Y_.Graph.horizontalGridlines">
            <summary>
            Reference to the horizontal `Gridlines` instance.
            </summary>
        </member>
        <member name="P:Y_.Graph.seriesCollection">
            <summary>
            Collection of series. When setting the `seriesCollection` the array can contain a combination of either
            `CartesianSeries` instances or object literals with properties that will define a series.
            </summary>
        </member>
        <member name="P:Y_.Graph.seriesDictionary">
            <summary>
            Read-only hash lookup for all series on in the `Graph`.
            </summary>
        </member>
        <member name="P:Y_.Graph.styles">
            <summary>
            Style properties used for drawing a background. Below are the default values:
            <dl>
            <dt>background</dt><dd>An object containing the following values:
            <dl>
            <dt>fill</dt><dd>Defines the style properties for the fill. Contains the following values:
            <dl>
            <dt>color</dt><dd>Color of the fill. The default value is #faf9f2.</dd>
            <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background fill. The default value is 1.</dd>
            </dl>
            </dd>
            <dt>border</dt><dd>Defines the style properties for the border. Contains the following values:
            <dl>
            <dt>color</dt><dd>Color of the border. The default value is #dad8c9.</dd>
            <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background border. The default value is 1.</dd>
            <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>
            </dl>
            </dd>
            </dl>
            </dd>
            </dl>
            </summary>
        </member>
        <member name="P:Y_.Graph.verticalGridlines">
            <summary>
            Reference to the vertical `Gridlines` instance.
            </summary>
        </member>
        <member name="P:Y_.Graph.x">
            <summary>
            The x-coordinate for the graph.
            </summary>
        </member>
        <member name="P:Y_.Graph.y">
            <summary>
            The y-coordinate for the graph.
            </summary>
        </member>
        <member name="T:Y_.DataType_.XML">
            <summary>
            DataType.XML provides a set of utility functions to operate against XML documents.
            </summary>
        </member>
        <member name="M:Y_.DataType_.XML.format(System.Object)">
            <summary>
            Converts data to type XMLDocument.
            </summary>
        </member>
        <member name="M:Y_.DataType_.XML.parse(System.Object)">
            <summary>
            Converts data to type XMLDocument.
            </summary>
        </member>
        <member name="T:Y_.DataTable_.Mutable">
            <summary>
            _API docs for this extension are included in the DataTable class._
            Class extension to add mutation convenience methods to `Y.DataTable` (or other
            built class).
            Column mutation methods are paired with new custom events:
            * addColumn
            * removeColumn
            * modifyColumn
            * moveColumn
            Row mutation events are bubbled from the DataTable's `data` ModelList through
            the DataTable instance.
            </summary>
        </member>
        <member name="T:Y_.DataTable_.Core">
            <summary>
            _API docs for this extension are included in the DataTable class._
            Class extension providing the core API and structure for the DataTable Widget.
            Use this class extension with Widget or another Base-based superclass to create
            the basic DataTable API and composing class structure.
            Notable about this architecture is that rendering and UI event management for
            the header, body, and footer of the table are deferred to configurable classes
            in the `headerView`, `bodyView`, and `footerView` attributes.  In this extension
            they have no default values, requiring implementers to supply their own classes
            to render the table content.
            </summary>
        </member>
        <member name="T:Y_.CanvasDrawing">
            <summary>
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> implementation of the <a href="Drawing.html">`Drawing`</a> class.
            `CanvasDrawing` is not intended to be used directly. Instead, use the <a href="Drawing.html">`Drawing`</a> class.
            If the browser lacks <a href="http://www.w3.org/TR/SVG/">SVG</a> capabilities but has
            <a href="http://www.w3.org/TR/html5/the-canvas-element.html">Canvas</a> capabilities, the <a href="Drawing.html">`Drawing`</a>
            class will point to the `CanvasDrawing` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.clear">
            <summary>
            Clears the graphics object.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.closePath">
            <summary>
            Ends a fill and stroke
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.curveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a bezier curve.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.drawCircle(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a circle. Used internally by `CanvasCircle` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.drawDiamond(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a diamond.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.drawEllipse(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws an ellipse. Used internally by `CanvasEllipse` class.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.drawRect(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.end">
            <summary>
            Completes a drawing operation.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.lineTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a line segment using the current line style from the current drawing position to the specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.moveTo(Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Moves the current drawing position to specified x and y coordinates.
            </summary>
        </member>
        <member name="M:Y_.CanvasDrawing.quadraticCurveTo(Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number,Y_.DataType_.Number)">
            <summary>
            Draws a quadratic bezier curve.
            </summary>
        </member>
        <member name="T:Y_.CacheOffline">
            <summary>
            Extends Cache utility with offline functionality.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline._defAddFn(System.Object)">
            <summary>
            Adds entry to cache.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline._defFlushFn(System.Object)">
            <summary>
            Flushes cache.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline._getEntries">
            <summary>
            Gets all entries.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline._getSize">
            <summary>
            Gets size.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline._setMax">
            <summary>
            Always return null.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline.add(System.Object,System.Object)">
            <summary>
            Adds a new entry to the cache of the format
            {request:request, response:response, cached:cached, expires: expires}.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline.flushAll">
            <summary>
            Removes all items from all sandboxes. Useful if localStorage has
            exceeded quota. Only supported on browsers that implement HTML 5
            localStorage.
            </summary>
        </member>
        <member name="M:Y_.CacheOffline.retrieve(System.Object)">
            <summary>
            Retrieves cached object for given request, if available.
            Returns null if there is no cache match.
            </summary>
        </member>
        <member name="P:Y_.CacheOffline.max">
            <summary>
            Disabled.
            </summary>
        </member>
        <member name="P:Y_.CacheOffline.uniqueKeys">
            <summary>
            Always true for CacheOffline.
            </summary>
        </member>
    </members>
</doc>
