<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.SignalR</name>
    </assembly>
    <members>
        <member name="M:SharpKit.SignalR.Connection.#ctor">
            <summary>
            Creates a new connection.
            </summary>
        </member>
        <member name="M:SharpKit.SignalR.Connection.#ctor(SharpKit.JavaScript.JsString)">
            <summary>
            Creates a new connection.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:SharpKit.SignalR.Connection.received(SharpKit.JavaScript.JsAction{System.Object})">
             <summary>
             A function to execute each time data is received.
             </summary>
             <param name="handler"></param>
             <returns>Returns a connection.</returns>
            <example>
            usage
            <code>
            connection.received(function(data) {
                 console.log(data);
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.error(SharpKit.JavaScript.JsAction{System.Object})">
             <summary>
              A function to execute each time an error occurs.
             </summary>
             <param name="handler"></param>
             <returns>Returns a connection.</returns>
            <example>
            usage
            <code>
            connection.error(function(error) {
                 console.warn(error);
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.stateChanged(SharpKit.JavaScript.JsAction{System.Object})">
             <summary>
              A function to execute each time the connection state changes.
             </summary>
             <param name="handler"></param>
             <returns>Returns a connection.</returns>
            <example>
            usage
            <code>
            connection.stateChanged(function (change) {
                 if (change.newState === $.signalR.connectionState.reconnecting) {
                     console.log('Re-connecting');
                 }
                 else if (change.newState === $.signalR.connectionState.connected) {
                     console.log('The server is online');
                 } 
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.reconnected(SharpKit.JavaScript.JsAction)">
             <summary>
              A function to execute each time the connection has successfully reconnected.
             </summary>
             <param name="handler"></param>
             <returns>Returns a connection.</returns>
            <example>
            usage
            <code>
            connection.reconnected(function() {
                 console.log('Reconnected');
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.sending(SharpKit.JavaScript.JsAction)">
            <summary>
             A function to execute before the transport establishes a connection to the server.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:SharpKit.SignalR.Connection.start">
             <summary>
             Starts the connection using the default settings.
             NOTE: A connection cannot send or receive messages until the start method has been called and the connection successfully established.
             </summary>
             <returns>Returns a deferred.</returns>
            <example>
            usage
            <code>
            connection.start();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.start(SharpKit.JavaScript.JsAction)">
             <summary>
             Starts the connection using the default settings and executes the passed callback once the connection has been established.
             NOTE: This callback attaches an event handler that will be raised every time the connection is started.
             This means that subsequent calls to start raise the callback. To avoid this, see below.
             </summary>
             <param name="callback">- A callback function to invoke when the connection has been successfully established.**</param>
             <returns></returns>
            <example>
            usage
            <code>
             // This callback will only run once
             connection.start().done(function() {
                 console.log("connection started!");
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.start(SharpKit.SignalR.ConnectionStartSettings)">
            <summary>
            Starts the connection using the passed settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:SharpKit.SignalR.Connection.start(SharpKit.SignalR.ConnectionStartSettings,SharpKit.JavaScript.JsAction)">
             <summary>
             Starts the connection using the passed settings, and executes the passed callback once the connection has been established.
             </summary>
             <param name="settings">A set of key value pairs that configure the connection. All settings are optional.</param>
             <param name="callback"> A callback function to invoke when the connection has been successfully established.</param>
            <example>
            usage
            <code>
            connection.start({ transport: 'longPolling' }, function() {
                 console.log('connection started!');
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.SignalR.Connection.send(System.Object)">
             <summary>
             
             </summary>
             <param name="data"> data to send over the connection.</param>
            <example>
            usage
            <code>
            connection.send("Hello World");
            </code>
            </example>
        </member>
        <member name="P:SharpKit.SignalR.Connection.id">
            <summary>
            Gets or sets the client id for the current connection.
            </summary>
        </member>
        <member name="P:SharpKit.SignalR.Connection.messageId">
            <summary>
            Gets or sets the message id for the current connection.
            </summary>
        </member>
        <member name="P:SharpKit.SignalR.ConnectionStartSettings.transport">
            <summary>
            Details of the transport to use. Can be a known transport name (that maps to a member on signalR.transports), a transport object, or an array of each. If an array, each transport will be tried until one succeeds or all fail.
            Defaults to "auto", which will try all transports on signalR.transports until one succeeds or all fail.
            </summary>
        </member>
        <member name="P:SharpKit.SignalR.ConnectionStartSettings.callback">
            <summary>
             A callback function to invoke when the connection has been successfully established. Defaults to undefined (no callback).
            </summary>
        </member>
        <member name="P:SharpKit.SignalR.Hub.id">
            <summary>
            The client id for the hub connection.
            </summary>
        </member>
        <member name="P:SharpKit.SignalR.Hub.logging">
            <summary>
            Set to true to enable logging. Default is false
            </summary>
        </member>
    </members>
</doc>
