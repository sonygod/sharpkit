<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.W3C.jQuery</name>
    </assembly>
    <members>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(System.Object)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.Html.HtmlElement)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsArray)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.jQuery.jQuery)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlDocument)">
            <summary>
            Creates DOM elements on the fly from the provided string of raw HTML.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject)">
            <summary>
            Creates DOM elements on the fly from the provided string of raw HTML.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsAction)">
            <summary>
            Binds a function to be executed when the DOM has finished loading.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlElement)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsString,SharpKit.jQuery.jQuery)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.#ctor(SharpKit.JavaScript.JsString)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.createElement(System.String)">
            <summary>
            Creates a jQuery element by tagName
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add``1">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add(SharpKit.JavaScript.JsString)">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add(SharpKit.JavaScript.JsArray{SharpKit.Html.HtmlElement})">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add(SharpKit.Html.HtmlElement[])">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add(System.String)">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.add(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlElement)">
            <summary>
            Add elements to the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.addClass(SharpKit.JavaScript.JsString)">
            <summary>
            Adds the specified class(es) to each of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.addClass(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Adds the specified class(es) to each of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.after(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.after(SharpKit.JavaScript.JsString)">
            <summary>
            Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.after(SharpKit.Html.HtmlElement)">
            <summary>
            Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.after(SharpKit.jQuery.jQuery)">
            <summary>
            Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxComplete(SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Register a handler to be called when Ajax requests complete. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxError(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event,SharpKit.Html.XMLHttpRequest,System.Object,SharpKit.JavaScript.JsError})">
            <summary>
            Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxSend(SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxStart(SharpKit.JavaScript.JsAction)">
            <summary>
            Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxStop(SharpKit.JavaScript.JsAction)">
            <summary>
            Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxSuccess(SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxPrefilter(SharpKit.JavaScript.JsAction{System.Object,System.Object,System.Object})">
            <summary>
            Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
            </summary>
            <param name="handler">
            handler(options, originalOptions, jqXHR)A handler to set default values for future Ajax requests.
            </param>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxPrefilter(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.Object,System.Object})">
            <summary>
            Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
            </summary>
            <param name="dataTypes">
            dataTypesAn optional string containing one or more space-separated dataTypes
            </param>
            <param name="handler">
            handler(options, originalOptions, jqXHR)A handler to set default values for future Ajax requests.
            </param>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.andSelf">
            <summary>
            Add the previous set of elements on the stack to the current set.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.jQuery.Map)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsAction)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsString)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsNumber)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.animate(SharpKit.jQuery.Map,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.JavaScript.JsString)">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.Html.HtmlElement)">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.jQuery.jQuery)">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.JavaScript.JsNumber)">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.JavaScript.JsFunc{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString})">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.append(SharpKit.JavaScript.JsFunc{SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString})">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.appendTo(SharpKit.JavaScript.JsString)">
            <summary>
            Insert every element in the set of matched elements to the end of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.appendTo(SharpKit.Html.HtmlElement)">
            <summary>
            Insert every element in the set of matched elements to the end of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.appendTo(SharpKit.jQuery.jQuery)">
            <summary>
            Insert every element in the set of matched elements to the end of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.JavaScript.JsString)">
            <summary>
            Get the value of an attribute for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.jQuery.AttrMap)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.attr(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.before(SharpKit.JavaScript.JsAction)">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.before(SharpKit.JavaScript.JsString)">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.before(SharpKit.Html.HtmlElement)">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.before(SharpKit.jQuery.jQuery)">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.bind(SharpKit.JavaScript.JsObject)">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.bind(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.bind(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.bind(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.bind(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject,System.Boolean)">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.blur">
            <summary>
            Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.blur(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.blur(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.change">
            <summary>
            Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.change(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.change(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.children">
            <summary>
            Get the children of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.children(SharpKit.JavaScript.JsString)">
            <summary>
            Get the children of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.clearQueue">
            <summary>
            Remove from the queue all items that have not yet been run.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.clearQueue(SharpKit.JavaScript.JsString)">
            <summary>
            Remove from the queue all items that have not yet been run.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.click">
            <summary>
            Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.click(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.click(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.clone">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.clone(System.Boolean)">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(SharpKit.JavaScript.JsString)">
            <summary>
            Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(SharpKit.JavaScript.JsArray)">
            <summary>
            Gets an array of all the elements and selectors matched against the current element up through the DOM tree.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlElement)">
            <summary>
            Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(SharpKit.JavaScript.JsArray,SharpKit.Html.HtmlElement)">
            <summary>
            Gets an array of all the elements and selectors matched against the current element up through the DOM tree.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(SharpKit.jQuery.jQuery)">
            <summary>
            Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
            </summary>
            <param name="jqueryObject">
            A jQuery object to match elements against.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.closest(System.Object)">
            <summary>
            Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
            </summary>
            <param name="element">
            An element to match elements against.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.contents">
            <summary>
            Get the children of each element in the set of matched elements, including text and comment nodes.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.css(SharpKit.JavaScript.JsString)">
            <summary>
            Get the value of a style property for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.css(SharpKit.jQuery.Map)">
            <summary>
            Set one or more CSS properties for the  set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.css(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set one or more CSS properties for the  set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.css(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Set one or more CSS properties for the  set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.css(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Set one or more CSS properties for the  set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data">
            <summary>
            Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.JavaScript.JsObject)">
            <summary>
            Store arbitrary data associated with the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.JavaScript.JsString)">
            <summary>
            Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject)">
            <summary>
            Store arbitrary data associated with the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Store arbitrary data associated with the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dblclick">
            <summary>
            Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dblclick(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dblclick(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.delay(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set a timer to delay execution of subsequent items in the queue.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.delay(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Set a timer to delay execution of subsequent items in the queue.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.delegate(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.delegate(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.when(SharpKit.jQuery.Deferred[])">
            <summary>
            Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.
            <list type="bullet">
            If a single Deferred is passed to jQuery.when, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as deferred.then. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called.
            <example>
            the jqXHR object returned by jQuery.ajax is a Deferred and can be used this way:
            <code>
            $.when( $.ajax("test.aspx") ).then(function(ajaxArgs){ 
                 alert(ajaxArgs[1]); /* ajaxArgs is [ "success", statusText, jqXHR ] */
            });        
            </code>
            </example>
            </list>
            <list type="bullet">
            If a single argument is passed to jQuery.when and it is not a Deferred, it will be treated as a resolved Deferred and any doneCallbacks attached will be executed immediately. The doneCallbacks are passed the original argument. In this case any failCallbacks you might set are never called since the Deferred is never rejected.
            <example>
            <code>
            $.when( { testing: 123 } ).done(
              function(x){ alert(x.testing); } /* alerts "123" */
            );
            </code>
            </example>
            In the case where multiple Deferred objects are passed to jQuery.when, the method returns the Promise from a new "master" Deferred object that tracks the aggregate state of all the Deferreds it has been passed. The method will resolve its master Deferred as soon as all the Deferreds resolve, or reject the master Deferred as soon as one of the Deferreds is rejected. If the master Deferred is resolved, it is passed the resolved values of all the Deferreds that were passed to jQuery.when. For example, when the Deferreds are jQuery.ajax() requests, the arguments will be the jqXHR objects for the requests, in the order they were given in the argument list.
            In the multiple-Deferreds case where one of the Deferreds is rejected, jQuery.when immediately fires the failCallbacks for its master Deferred. Note that some of the Deferreds may still be unresolved at that point. If you need to perform additional processing for this case, such as canceling any unfinished ajax requests, you can keep references to the underlying jqXHR objects in a closure and inspect/cancel them in the failCallback.
            </list>
            </summary>
            <param name="defferds">
            deferreds One or more Deferred objects, or plain JavaScript objects.
            </param>
            <returns>
            Returns: Promise
            </returns>
            <example>
             Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
            <code>
            $.when($.ajax("/page1.php"), $.ajax("/page2.php")).done(function(a1,  a2){
               /* a1 and a2 are arguments resolved for the 
                   page1 and page2 ajax requests, respectively */
              var jqXHR = a1[2]; /* arguments are [ "success", statusText, jqXHR ] */
              if ( /Whip It/.test(jqXHR.responseText) ) {
                 alert("First page has 'Whip It' somewhere.");
              }
            });
            </code>
             Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
             <code>
            $.when($.ajax("/page1.php"), $.ajax("/page2.php"))
             .then(myFunc, myFailure);
             </code>
            </example>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dequeue">
            <summary>
            Execute the next function on the queue for the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dequeue(SharpKit.JavaScript.JsString)">
            <summary>
            Execute the next function on the queue for the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.detach">
            <summary>
            Remove the set of matched elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.detach(SharpKit.JavaScript.JsString)">
            <summary>
            Remove the set of matched elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.die">
            <summary>
            Remove all event handlers previously attached using .live() from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.die(SharpKit.JavaScript.JsString)">
            <summary>
            Remove an event handler previously attached using .live() from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.die(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Remove an event handler previously attached using .live() from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.each(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Iterate over a jQuery object, executing a function for each matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.empty">
            <summary>
            Remove all child nodes of the set of matched elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.end">
            <summary>
            End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.eq(SharpKit.JavaScript.JsNumber)">
            <summary>
            Reduce the set of matched elements to the one at the specified index.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.error(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "error" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.error(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "error" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeIn(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements by fading them to opaque.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsNumber)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeOut(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements by fading them to transparent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeTo(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Adjust the opacity of the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.fadeToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements by animating their opacity.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.filter(SharpKit.JavaScript.JsString)">
            <summary>
            Reduce the set of matched elements to those that match the selector or pass the function's test.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.filter(SharpKit.JavaScript.JsFunc{System.Int32,System.Boolean})">
            <summary>
            Reduce the set of matched elements to those that match the selector or pass the function's test.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.filter(SharpKit.Html.HtmlElement)">
            <summary>
            Reduce the set of matched elements to those that match the selector or pass the function's test.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.filter(SharpKit.JavaScript.JsObject)">
            <summary>
            Reduce the set of matched elements to those that match the selector or pass the function's test.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.find(SharpKit.JavaScript.JsString)">
            <summary>
            Get the descendants of each element in the current set of matched elements, filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.find(SharpKit.jQuery.jQuery)">
            <summary>
            Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
            </summary>
            <param name="jqueryObject">
            A jQuery object to match elements against.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.find(System.Object)">
            <summary>
            Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
            </summary>
            <param name="element">
            An element to match elements against.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.first">
            <summary>
            Reduce the set of matched elements to the first in the set.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focus">
            <summary>
            Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focus(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focus(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focusin(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focusin" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focusin(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focusin" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focusout(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focusout" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.focusout(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "focusout" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get">
            <summary>
            Retrieve the DOM elements matched by the jQuery object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsNumber)">
            <summary>
            Retrieve the DOM elements matched by the jQuery object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.has(SharpKit.JavaScript.JsString)">
            <summary>
            Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.has(SharpKit.Html.HtmlElement)">
            <summary>
            Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hasClass(SharpKit.JavaScript.JsString)">
            <summary>
            Determine whether any of the matched elements are assigned the given class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpKit.jQuery.jQuery.hasData(SharpKit.Html.HtmlElement)" -->
        <member name="M:SharpKit.jQuery.jQuery.height">
            <summary>
            Get the current computed height for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.height(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the CSS height of every matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.height(SharpKit.JavaScript.JsString)">
            <summary>
            Set the CSS height of every matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.height(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set the CSS height of every matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsNumber)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hide(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hover(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.hover(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event},SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.html">
            <summary>
            Get the HTML contents of the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.html(SharpKit.JavaScript.JsString)">
            <summary>
            Set the HTML contents of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.html(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the HTML contents of each element in the set of matched elements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpKit.jQuery.jQuery.holdReady(SharpKit.JavaScript.JsAction)" -->
        <member name="M:SharpKit.jQuery.jQuery.index">
            <summary>
            Search for a given element from among the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.index(SharpKit.JavaScript.JsString)">
            <summary>
            Search for a given element from among the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.index(SharpKit.Html.HtmlElement)">
            <summary>
            Search for a given element from among the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.index(SharpKit.jQuery.jQuery)">
            <summary>
            Search for a given element from among the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.innerHeight">
            <summary>
            Get the current computed height for the first element in the set of matched elements, including padding but not border.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.innerWidth">
            <summary>
            Get the current computed width for the first element in the set of matched elements, including padding but not border.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertAfter(SharpKit.JavaScript.JsString)">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertAfter(SharpKit.Html.HtmlElement)">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertAfter(SharpKit.jQuery.jQuery)">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertBefore(SharpKit.JavaScript.JsString)">
            <summary>
            Insert every element in the set of matched elements before the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertBefore(SharpKit.Html.HtmlElement)">
            <summary>
            Insert every element in the set of matched elements before the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.insertBefore(SharpKit.jQuery.jQuery)">
            <summary>
            Insert every element in the set of matched elements before the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.is(SharpKit.JavaScript.JsString)">
            <summary>
            Check the current matched set of elements against a selector and return true if at least one of these elements matches the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keydown">
            <summary>
            Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keydown(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keydown(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keypress">
            <summary>
            Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keypress(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keypress(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keyup">
            <summary>
            Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keyup(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.keyup(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.last">
            <summary>
            Reduce the set of matched elements to the final one in the set.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.live(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to the event for all elements which match the current selector, now and in the future.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.live(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to the event for all elements which match the current selector, now and in the future.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "load" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "load" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.load(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server and place the returned HTML into the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.map(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousedown">
            <summary>
            Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousedown(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousedown(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseenter">
            <summary>
            Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseenter(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseenter(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseleave">
            <summary>
            Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseleave(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseleave(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousemove">
            <summary>
            Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousemove(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mousemove(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseout">
            <summary>
            Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseout(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseout(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseover">
            <summary>
            Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseover(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseover(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseup">
            <summary>
            Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseup(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.mouseup(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.next">
            <summary>
            Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.next(SharpKit.JavaScript.JsString)">
            <summary>
            Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.nextAll">
            <summary>
            Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.nextAll(SharpKit.JavaScript.JsString)">
            <summary>
            Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.nextUntil">
            <summary>
            Get all following siblings of each element up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.nextUntil(SharpKit.JavaScript.JsString)">
            <summary>
            Get all following siblings of each element up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.not(SharpKit.JavaScript.JsString)">
            <summary>
            Remove elements from the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.not(SharpKit.JavaScript.JsArray{SharpKit.Html.HtmlElement})">
            <summary>
            Remove elements from the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.not(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Remove elements from the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.offset">
            <summary>
            Get the current coordinates of the first element in the set of matched elements, relative to the document.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.offset(SharpKit.JavaScript.JsObject)">
            <summary>
            Set the current coordinates of every element in the set of matched elements, relative to the document.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.offset(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the current coordinates of every element in the set of matched elements, relative to the document.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.offsetParent">
            <summary>
            Get the closest ancestor element that is positioned.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.one(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to an event for the elements. The handler is executed at most once per element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.one(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Attach a handler to an event for the elements. The handler is executed at most once per element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.outerHeight">
            <summary>
            Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.outerHeight(System.Boolean)">
            <summary>
            Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.outerWidth">
            <summary>
            Get the current computed width for the first element in the set of matched elements, including padding and border.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.outerWidth(System.Boolean)">
            <summary>
            Get the current computed width for the first element in the set of matched elements, including padding and border.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parent">
            <summary>
            Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parent(SharpKit.JavaScript.JsString)">
            <summary>
            Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parents">
            <summary>
            Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parents(SharpKit.JavaScript.JsString)">
            <summary>
            Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parentsUntil">
            <summary>
            Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parentsUntil(SharpKit.JavaScript.JsString)">
            <summary>
            Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.position">
            <summary>
            Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prepend(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prepend(SharpKit.JavaScript.JsString)">
            <summary>
            Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prepend(SharpKit.Html.HtmlElement)">
            <summary>
            Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prepend(SharpKit.jQuery.jQuery)">
            <summary>
            Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prependTo(SharpKit.JavaScript.JsString)">
            <summary>
            Insert every element in the set of matched elements to the beginning of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prependTo(SharpKit.Html.HtmlElement)">
            <summary>
            Insert every element in the set of matched elements to the beginning of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prependTo(SharpKit.jQuery.jQuery)">
            <summary>
            Insert every element in the set of matched elements to the beginning of the target.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prev">
            <summary>
            Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prev(SharpKit.JavaScript.JsString)">
            <summary>
            Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prevAll">
            <summary>
            Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prevAll(SharpKit.JavaScript.JsString)">
            <summary>
            Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prevUntil">
            <summary>
            Get all preceding siblings of each element up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.prevUntil(SharpKit.JavaScript.JsString)">
            <summary>
            Get all preceding siblings of each element up to but not including the element matched by the selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.pushStack(SharpKit.JavaScript.JsArray)">
            <summary>
            Add a collection of DOM elements onto the jQuery stack.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.pushStack(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Add a collection of DOM elements onto the jQuery stack.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue">
            <summary>
            Show the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.JavaScript.JsString)">
            <summary>
            Show the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.JavaScript.JsArray)">
            <summary>
            Manipulate the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Manipulate the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Manipulate the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Manipulate the queue of functions to be executed on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ready(SharpKit.JavaScript.JsAction)">
            <summary>
            Specify a function to execute when the DOM is fully loaded.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.remove">
            <summary>
            Remove the set of matched elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.remove(SharpKit.JavaScript.JsString)">
            <summary>
            Remove the set of matched elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeAttr(SharpKit.JavaScript.JsString)">
            <summary>
            Remove an attribute from each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeClass">
            <summary>
            Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeClass(SharpKit.JavaScript.JsString)">
            <summary>
            Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeClass(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeData">
            <summary>
            Remove a previously-stored piece of data.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeData(SharpKit.JavaScript.JsString)">
            <summary>
            Remove a previously-stored piece of data.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.replaceAll(SharpKit.JavaScript.JsString)">
            <summary>
            Replace each target element with the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.replaceWith(SharpKit.JavaScript.JsAction)">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.replaceWith(SharpKit.JavaScript.JsString)">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.replaceWith(SharpKit.Html.HtmlElement)">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.replaceWith(SharpKit.jQuery.jQuery)">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.resize">
            <summary>
            Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.resize(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.resize(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scroll">
            <summary>
            Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scroll(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scroll(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scrollLeft">
            <summary>
            Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scrollLeft(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set the current horizontal position of the scroll bar for each of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scrollTop">
            <summary>
            Get the current vertical position of the scroll bar for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.scrollTop(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set the current vertical position of the scroll bar for each of the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.select">
            <summary>
            Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.select(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.select(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.serialize">
            <summary>
            Encode a set of form elements as a string for submission.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.serializeArray">
            <summary>
            Encode a set of form elements as an array of names and values.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.show(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.siblings">
            <summary>
            Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.siblings(SharpKit.JavaScript.JsString)">
            <summary>
            Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.size">
            <summary>
            Return the number of DOM elements matched by the jQuery object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slice(SharpKit.JavaScript.JsNumber)">
            <summary>
            Reduce the set of matched elements to a subset specified by a range of indices.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slice(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsNumber)">
            <summary>
            Reduce the set of matched elements to a subset specified by a range of indices.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideDown(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideToggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsNumber)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.slideUp(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Hide the matched elements with a sliding motion.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.stop">
            <summary>
            Stop the currently-running animation on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.stop(System.Boolean)">
            <summary>
            Stop the currently-running animation on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.stop(System.Boolean,System.Boolean)">
            <summary>
            Stop the currently-running animation on the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.submit">
            <summary>
            Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.submit(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.submit(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.text">
            <summary>
            Get the combined text contents of each element in the set of matched elements, including their descendants.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.text(SharpKit.JavaScript.JsString)">
            <summary>
            Set the content of each element in the set of matched elements to the specified text.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.text(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the content of each element in the set of matched elements to the specified text.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toArray">
            <summary>
            Retrieve all the DOM elements contained in the jQuery set, as an array.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(System.Boolean)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsNumber)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event},SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind two or more handlers to the matched elements, to be executed on alternate clicks.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event},SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event},SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind two or more handlers to the matched elements, to be executed on alternate clicks.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggle(SharpKit.JavaScript.JsNumber,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Display or hide the matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggleClass(SharpKit.JavaScript.JsString)">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggleClass(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggleClass(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.toggleClass(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement},System.Boolean)">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.trigger(SharpKit.jQuery.Event)">
            <summary>
            Execute all handlers and behaviors attached to the matched elements for the given event type.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.trigger(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Execute all handlers and behaviors attached to the matched elements for the given event type.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.triggerHandler(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Execute all handlers attached to an element for an event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind(SharpKit.JavaScript.JsObject)">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind(SharpKit.JavaScript.JsString)">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unbind(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Remove a previously-attached event handler from the elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.undelegate">
            <summary>
            Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.undelegate(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.undelegate(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unload(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "unload" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unload(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsAction{SharpKit.jQuery.Event})">
            <summary>
            Bind an event handler to the "unload" JavaScript event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unwrap">
            <summary>
            Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.val">
            <summary>
            Get the current value of the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.val(SharpKit.JavaScript.JsString)">
            <summary>
            Set the value of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.val(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the value of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.width">
            <summary>
            Get the current computed width for the first element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.width(SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Set the CSS width of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.width(SharpKit.JavaScript.JsString)">
            <summary>
            Set the CSS width of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.width(SharpKit.JavaScript.JsNumber)">
            <summary>
            Set the CSS width of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrap(SharpKit.JavaScript.JsAction)">
            <summary>
            Wrap an HTML structure around each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrap(SharpKit.JavaScript.JsString)">
            <summary>
            Wrap an HTML structure around each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrap(SharpKit.Html.HtmlElement)">
            <summary>
            Wrap an HTML structure around each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrap(SharpKit.jQuery.jQuery)">
            <summary>
            Wrap an HTML structure around each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrapAll(SharpKit.JavaScript.JsString)">
            <summary>
            Wrap an HTML structure around all elements in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrapAll(SharpKit.Html.HtmlElement)">
            <summary>
            Wrap an HTML structure around all elements in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrapAll(SharpKit.jQuery.jQuery)">
            <summary>
            Wrap an HTML structure around all elements in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrapInner(SharpKit.JavaScript.JsString)">
            <summary>
            Wrap an HTML structure around the content of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.wrapInner(SharpKit.JavaScript.JsAction)">
            <summary>
            Wrap an HTML structure around the content of each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajax(SharpKit.jQuery.AjaxSettings)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.ajaxSetup(SharpKit.jQuery.AjaxSettings)">
            <summary>
            Set default values for future Ajax requests.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.contains(SharpKit.Html.HtmlElement,SharpKit.Html.HtmlElement)">
            <summary>
            Check to see if a DOM node is within another DOM node.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.Html.HtmlElement)">
            <summary>
            Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString)">
            <summary>
            Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject)">
            <summary>
            Store arbitrary data associated with the specified element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.data(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Store arbitrary data associated with the specified element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dequeue(SharpKit.Html.HtmlElement)">
            <summary>
            Execute the next function on the queue for the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.dequeue(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString)">
            <summary>
            Execute the next function on the queue for the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.each(System.Object,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,System.Object})">
            <summary>
            A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.error(SharpKit.JavaScript.JsString)">
            <summary>
            Takes a string and throws an exception containing it.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.extend(SharpKit.JavaScript.JsObject)">
            <summary>
            Merge the contents of two or more objects together into the first object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.extend(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject)">
            <summary>
            Merge the contents of two or more objects together into the first object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.extend(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject)">
            <summary>
            Merge the contents of two or more objects together into the first object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.extend(System.Boolean,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject)">
            <summary>
            Merge the contents of two or more objects together into the first object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.extend(System.Boolean,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsObject)">
            <summary>
            Merge the contents of two or more objects together into the first object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.get(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP GET request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getJSON(SharpKit.JavaScript.JsString)">
            <summary>
            Load JSON-encoded data from the server using a GET HTTP request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getJSON(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load JSON-encoded data from the server using a GET HTTP request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getJSON(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Load JSON-encoded data from the server using a GET HTTP request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getJSON(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load JSON-encoded data from the server using a GET HTTP request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getScript(SharpKit.JavaScript.JsString)">
            <summary>
            Load a JavaScript file from the server using a GET HTTP request, then execute it.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.getScript(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Load a JavaScript file from the server using a GET HTTP request, then execute it.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.globalEval(SharpKit.JavaScript.JsString)">
            <summary>
            Execute some JavaScript code globally.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.grep(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Finds the elements of an array which satisfy a filter function. The original array is not affected.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.grep(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement},System.Boolean)">
            <summary>
            Finds the elements of an array which satisfy a filter function. The original array is not affected.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.inArray(System.Object,SharpKit.JavaScript.JsArray)">
            <summary>
            Search for a specified value within an array and return its index (or -1 if not found).
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isArray(System.Object)">
            <summary>
            Determine whether the argument is an array.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isEmptyObject(SharpKit.JavaScript.JsObject)">
            <summary>
            Check to see if an object is empty (contains no properties).
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isFunction(System.Object)">
            <summary>
            Determine if the argument passed is a Javascript function object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isPlainObject(SharpKit.JavaScript.JsObject)">
            <summary>
            Check to see if an object is a plain object (created using "{}" or "new Object").
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isWindow(SharpKit.JavaScript.JsObject)">
            <summary>
            Determine whether the argument is a window.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.isXMLDoc(SharpKit.Html.HtmlElement)">
            <summary>
            Check to see if a DOM node is within an XML document (or is an XML document).
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.makeArray(SharpKit.JavaScript.JsObject)">
            <summary>
            Convert an array-like object into a true JavaScript array.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.map(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsNumber,SharpKit.Html.HtmlElement})">
            <summary>
            Translate all items in an array or array-like object to another array of items.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.merge(SharpKit.JavaScript.JsArray,SharpKit.JavaScript.JsArray)">
            <summary>
            Merge the contents of two arrays together into the first array.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.noConflict">
            <summary>
            Relinquish jQuery's control of the $ variable.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.noConflict(System.Boolean)">
            <summary>
            Relinquish jQuery's control of the $ variable.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.noop">
            <summary>
            An empty function.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.param(SharpKit.JavaScript.JsArray)">
            <summary>
            Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.param(SharpKit.JavaScript.JsObject)">
            <summary>
            Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.param(SharpKit.JavaScript.JsArray,System.Boolean)">
            <summary>
            Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.param(SharpKit.JavaScript.JsObject,System.Boolean)">
            <summary>
            Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.parseJSON(SharpKit.JavaScript.JsString)">
            <summary>
            Takes a well-formed JSON string and returns the resulting JavaScript object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,System.Object)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest})">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,System.Object,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.post(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction{System.Object,System.String,SharpKit.Html.XMLHttpRequest},SharpKit.JavaScript.JsString)">
            <summary>
            Load data from the server using a HTTP POST request.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.proxy(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsObject)">
            <summary>
            Takes a function and returns a new one that will always have a particular context.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.proxy(SharpKit.JavaScript.JsObject,SharpKit.JavaScript.JsString)">
            <summary>
            Takes a function and returns a new one that will always have a particular context.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.Html.HtmlElement)">
            <summary>
            Show the queue of functions to be executed on the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString)">
            <summary>
            Show the queue of functions to be executed on the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
            <summary>
            Manipulate the queue of functions to be executed on the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.queue(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsAction)">
            <summary>
            Manipulate the queue of functions to be executed on the matched element.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeData(SharpKit.Html.HtmlElement)">
            <summary>
            Remove a previously-stored piece of data.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.removeData(SharpKit.Html.HtmlElement,SharpKit.JavaScript.JsString)">
            <summary>
            Remove a previously-stored piece of data.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.trim(SharpKit.JavaScript.JsString)">
            <summary>
            Remove the whitespace from the beginning and end of a string.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.type(SharpKit.JavaScript.JsObject)">
            <summary>
            Determine the internal JavaScript [[Class]] of an object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.unique(SharpKit.JavaScript.JsArray)">
            <summary>
            Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.Event(SharpKit.JavaScript.JsString)">
            <summary>
            The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
            Check trigger‘s documentation to see how to combine it with your own event object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.Event(SharpKit.JavaScript.JsString,SharpKit.jQuery.Event)">
            <summary>
            The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
            Check trigger‘s documentation to see how to combine it with your own event object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.Deferred">
            <summary>
            The jQuery.Deferred() constructor creates a new Deferred object. The new operator is optional.
            jQuery.Deferred can be passed an optional function, which is called just before the constructor returns and is passed the constructed deferred object as both the this object and as the first argument to the function. The called function can attach callbacks using deferred.then() for example.
            A Deferred object starts in the pending state. Any callbacks added to the object with deferred.then(), deferred.done(), or deferred.fail() are queued to be executed later. Calling deferred.resolve() or deferred.resolveWith() transitions the Deferred into the resolved state and immediately executes any doneCallbacks that are set. Calling deferred.reject() or deferred.rejectWith() transitions the Deferred into the rejected state and immediately executes any failCallbacks that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred — they will execute immediately.
            The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.jQuery.jQuery.Deferred(SharpKit.JavaScript.JsAction{SharpKit.jQuery.Deferred})">
            <summary>
            The jQuery.Deferred() constructor creates a new Deferred object. The new operator is optional.
            jQuery.Deferred can be passed an optional function, which is called just before the constructor returns and is passed the constructed deferred object as both the this object and as the first argument to the function. The called function can attach callbacks using deferred.then() for example.
            A Deferred object starts in the pending state. Any callbacks added to the object with deferred.then(), deferred.done(), or deferred.fail() are queued to be executed later. Calling deferred.resolve() or deferred.resolveWith() transitions the Deferred into the resolved state and immediately executes any doneCallbacks that are set. Calling deferred.reject() or deferred.rejectWith() transitions the Deferred into the rejected state and immediately executes any failCallbacks that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred — they will execute immediately.
            The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.browser">
            <summary>
            We recommend against using this property, 
            please try to use feature detection instead (see jQuery.support). 
            Contains flags for the useragent, read from navigator.userAgent. 
            While jQuery.browser will not be removed from future versions of jQuery, 
            every effort to use jQuery.support and proper feature detection should be made.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.length">
            <summary>
            The number of elements in the jQuery object.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.Item(SharpKit.JavaScript.JsNumber)">
            <summary>
            Get the selected elements by index
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.selector">
            <summary>
            A selector representing selector originally passed to jQuery().
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.context">
            <summary>
            The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.boxModel">
            <summary>
            Deprecated in jQuery 1.3 (see jQuery.support)
            . States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQuery.support">
            <summary>
            A collection of properties that represent the presence of different browser features or bugs.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.jQuery.jQuery.sub" -->
        <member name="M:SharpKit.jQuery.jQueryContext.J(System.Object)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.Html.HtmlElement)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsArray)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.jQuery.jQuery)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlDocument)">
            <summary>
            Creates DOM elements on the fly from the provided string of raw HTML.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsObject)">
            <summary>
            Creates DOM elements on the fly from the provided string of raw HTML.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsAction)">
            <summary>
            Binds a function to be executed when the DOM has finished loading.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsString,SharpKit.Html.HtmlElement)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsString,SharpKit.jQuery.jQuery)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryContext.J(SharpKit.JavaScript.JsString)">
            <summary>
            Accepts a string containing a CSS selector which is then used to match a set of elements.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.isImmediatePropagationStopped">
            <summary>
            Returns whether event.stopImmediatePropagation() was ever called on this event object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.stopImmediatePropagation">
            <summary>
            Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.isPropagationStopped">
            <summary>
            Returns whether event.stopPropagation() was ever called on this event object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.stopPropagation">
            <summary>
            Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.isDefaultPrevented">
            <summary>
            Returns whether event.preventDefault() was ever called on this event object.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Event.preventDefault">
            <summary>
            If this method is called, the default action of the event will not be triggered.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.namespace">
            <summary>
            The namespace specified when the event was triggered.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.timeStamp">
            <summary>
            The difference in milliseconds between the time an event is triggered and January 1, 1970.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.result">
            <summary>
            The last value returned by an event handler that was triggered by this event, unless the value was undefined.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.which">
            <summary>
            For key or button events, this attribute indicates the specific button or key that was pressed.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.pageY">
            <summary>
            The mouse position relative to the top edge of the document.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.pageX">
            <summary>
            The mouse position relative to the left edge of the document.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.currentTarget">
            <summary>
            The current DOM element within the event bubbling phase.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.relatedTarget">
            <summary>
            The other DOM element involved in the event, if any.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.data">
            <summary>
            The optional data passed to jQuery.fn.bind when the current executing handler was bound.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.target">
            <summary>
            The DOM element that initiated the event.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.type">
            <summary>
            Describes the nature of the event.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Event.originalEvent">
            <summary>
            Certain native events may have special properties that can be accessed as properties of the event.originalEvent object. To make special properties available in all event objects, we can add them to the jQuery.event.props array.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQueryFx.interval">
            <summary>
            The rate (in milliseconds) at which animations fire.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.jQueryFx.off">
            <summary>
            Globally disable all animations.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.Map.opacity">
            <summary>
            Opacity (supported by Mozilla Gecko and Apple WebKit)
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.accepts">
             <summary>
             Default: depends on DataType
            The content type sent in the request header that tells the server what kind of response it will accept in return. If the accepts setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
             </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.async">
            <summary>
            Default: true
            By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.data">
            <summary>
            Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.beforeSend">
            <summary>
            A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings maps are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.cache">
            <summary>
            Default: true, false for dataType 'script' and 'jsonp'
            If set to false, it will force requested pages not to be cached by the browser. Setting cache to false also appends a query string parameter, "_=[TIMESTAMP]", to the URL.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.complete">
            <summary>
            A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.contents">
            <summary>
            A map of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.contentType">
            <summary>
            Default: 'application/x-www-form-urlencoded'
            When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent). Data will always be transmitted to the server using UTF-8 charset; you must decode this appropriately on the server side.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.context">
            <summary>
            This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so:
            <code>
            $.ajax({url: "test.html",context: document.body,success: function(){$(this).addClass("done");}});
            </code>
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.converters">
            <summary>
            Default: {"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML}
            A map of dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.crossDomain">
             <summary>
             Default: false for same-domain requests, true for cross-domain requests
            If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain
             </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.dataFilter">
            <summary>
            A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.dataType">
            <summary>
            Default: Intelligent Guess (xml, json, script, or html)
            The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
            "xml": Returns a XML document that can be processed via jQuery.
            "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
            "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.
            "json": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)
            "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.
            "text": A plain text string.
            multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml." Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.error">
            <summary>
            A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and JSONP requests. This is an Ajax Event.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.global">
            <summary>
            Default: true
            Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.headers">
             <summary>
             Default: {}
            A map of additional header key/value pairs to send along with the request. This setting is set before the beforeSend function is called; therefore, any values in the headers setting can be overwritten from within the beforeSend function.
             </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.ifModified">
            <summary>
            Default: false
            Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.isLocal">
             <summary>
             Default: depends on current location protocol
            Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
             </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.jsonp">
            <summary>
            Override the callback function name in a jsonp request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.jsonpCallback">
            <summary>
            Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.mimeType">
            <summary>
            A mime type to override the XHR mime type.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.password">
            <summary>
            A password to be used in response to an HTTP access authentication request.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.processData">
            <summary>
            Default: true
            By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.scriptCharset">
            <summary>
            Only for requests with "jsonp" or "script" dataType and "GET" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.statusCode">
             <summary>
             Default: {}
            A map of numeric HTTP codes and functions to be called when the response has the corresponding code. 
             </summary>
             <example>
             the following will alert when the response status is a 404:
             <code>
             $.ajax({statusCode: {404: function() {alert('page not found');}}});
             </code>
             <list type="note">
             If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error, they take the same parameters as the error callback.
             </list>
             </example>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.success">
            <summary>
            A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.timeout">
            <summary>
            Set a local timeout (in milliseconds) for the request. This will override the global timeout, if one is set with $.ajaxSetup(). For example, you could use this property to give a single request a longer timeout than all other requests that you've set to time out in one second. See $.ajaxSetup() for global timeouts. In jQuery 1.4.x and below, please note that the XMLHttpRequest object will be in an invalid state should the request time out. Where this is the case, accessing any object members may result in an exception being thrown. In jQuery 1.5.2 and above,$.ajax() does not handle JSONP requests as expected should the request fail due to a timeout in Firefox 3.0+. This is a browser-based issue due to FF currently not providing a way to abort cross-domain requests once the script tag has been appended. This issue does not currently affect other browsers.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.traditional">
            <summary>
            Set this to true if you wish to use the traditional style of param serialization.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.type">
            <summary>
            Default: 'GET'
            The type of request to make ("POST" or "GET"), default is "GET". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.url">
            <summary>
            Default: The current page
            A string containing the URL to which the request is sent.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.username">
            <summary>
            A username to be used in response to an HTTP access authentication request.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.xhr">
            <summary>
            Default: ActiveXObject when available (IE), the XMLHttpRequest otherwise
            Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.
            </summary>
        </member>
        <member name="P:SharpKit.jQuery.AjaxSettings.xhrFields">
            <summary>
            A map of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.
            </summary>
            <example>
            <code>
            $.ajax({url: a_cross_domain_url,xhrFields: {withCredentials: true}});
            </code>
            <list type=">bullet">
            In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.
            </list>
            </example>
        </member>
        <member name="T:SharpKit.jQuery.Deferred">
            <summary>
            jQuery.Deferred(), introduced in version 1.5, is a chainable utility object that can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
            </summary>
        </member>
        <member name="T:SharpKit.jQuery.jQueryPromise">
            <summary>
            This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe. isResolved, and isRejected) to prevent users from changing the state of the Deferred
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.done(SharpKit.JavaScript.JsAction)">
             <summary>
             Add handlers to be called when the Deferred object is resolved.
             </summary>
             <param name="callback">
             doneCallbacks A function, or array of functions, that are called when the Deferred is resolved.
            doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
             </param>
             <returns>
             returns the deferred object
             </returns>
             <example>
             Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
            <code>
            $.get("test.php").done(function() { alert("$.get succeeded"); });
            </code>
            Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.fail(SharpKit.JavaScript.JsAction)">
            <summary>
            Add handlers to be called when the Deferred object is rejected.
            </summary>
            <param name="callback">
            failCallbacks A function, or array of functions, that are called when the Deferred is rejected.
            failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
            </param>
            <returns>
            returns the deferred object.
            </returns>
            <example>
            Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
            <code>
            $.get("test.php").done(function(){ alert("$.get succeeded"); }).fail(function(){ alert("$.get failed!"); });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.always(SharpKit.JavaScript.JsAction)">
             <summary>
             Add handlers to be called when the Deferred object is either resolved or rejected.
             </summary>
             <param name="callback">
             The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the alwaysCallbacks are called
             </param>
             <returns>
             returns the Deferred object.
             </returns>
             <example>
             Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
            <code>
             $.get("test.php").always( function() { 
               alert("$.get completed with success or error callback arguments");
                 } );
            </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.isRejected">
            <summary>
            Determine whether a Deferred object has been rejected.
            </summary>
            <returns>
            Returns true if the Deferred object is in the rejected state, meaning that either deferred.reject() or deferred.rejectWith() has been called for the object and the failCallbacks have been called (or are in the process of being called).
            </returns>
            <note>
            Note that a Deferred object can be in one of three states: unresolved, resolved, or rejected; use deferred.isResolved() to determine whether the Deferred object is in the resolved state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.
            </note>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.isResolved">
             <summary>
             Determine whether a Deferred object has been resolved.
             </summary>
             <returns>
             Returns true if the Deferred object is in the resolved state, meaning that either deferred.resolve() or deferred.resolveWith() has been called for the object and the doneCallbacks have been called (or are in the process of being called).
             </returns>
            <note>
            Note that a Deferred object can be in one of three states: unresolved, resolved, or rejected; use deferred.isRejected() to determine whether the Deferred object is in the rejected state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.
            </note>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.pipe">
             <summary>
             Utility method to filter and/or chain Deferreds.
             </summary>
             <param name="doneFilter">
             doneFilter An optional function that is called when the Deferred is resolved.
             </param>
             <param name="failFilter">
             failFilter An optional function that is called when the Deferred is rejected.
             </param>
             <returns>
             The deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function. The doneFilter and failFilter functions filter the original deferred's resolved / rejected status and values. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.
             </returns>
             <example>
             Filter resolve value:
             <code>
             var defer = $.Deferred(),
                 filtered = defer.pipe(function( value ) {
                   return value * 2;
                 });
            
             defer.resolve( 5 );
             filtered.done(function( value ) {
               alert( "Value is ( 2*5 = ) 10: " + value );
             });        
             </code>
             Filter reject value:
             <code>
             var defer = $.Deferred(),
                filtered = defer.pipe( null, function( value ) {
                  return value * 3;
                 });
            
             defer.reject( 6 );
             filtered.fail(function( value ) {
               alert( "Value is ( 3*6 = ) 18: " + value );
             });        
             </code>
             Chain tasks:
             <code>
             var request = $.ajax( url, { dataType: "json" } ),
                 chained = request.pipe(function( data ) {
                   return $.ajax( url2, { data: { user: data.userId } } );
                 });
            
             chained.done(function( data ) {
               // data retrieved from url2 as provided by the first request
             });        
             </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.pipe(SharpKit.JavaScript.JsAction)">
             <summary>
             Utility method to filter and/or chain Deferreds.
             </summary>
             <param name="doneFilter">
             doneFilter An optional function that is called when the Deferred is resolved.
             </param>
             <param name="failFilter">
             failFilter An optional function that is called when the Deferred is rejected.
             </param>
             <returns>
             The deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function. The doneFilter and failFilter functions filter the original deferred's resolved / rejected status and values. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.
             </returns>
             <example>
             Filter resolve value:
             <code>
             var defer = $.Deferred(),
                 filtered = defer.pipe(function( value ) {
                   return value * 2;
                 });
            
             defer.resolve( 5 );
             filtered.done(function( value ) {
               alert( "Value is ( 2*5 = ) 10: " + value );
             });        
             </code>
             Filter reject value:
             <code>
             var defer = $.Deferred(),
                filtered = defer.pipe( null, function( value ) {
                  return value * 3;
                 });
            
             defer.reject( 6 );
             filtered.fail(function( value ) {
               alert( "Value is ( 3*6 = ) 18: " + value );
             });        
             </code>
             Chain tasks:
             <code>
             var request = $.ajax( url, { dataType: "json" } ),
                 chained = request.pipe(function( data ) {
                   return $.ajax( url2, { data: { user: data.userId } } );
                 });
            
             chained.done(function( data ) {
               // data retrieved from url2 as provided by the first request
             });        
             </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.pipe(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction)">
             <summary>
             Utility method to filter and/or chain Deferreds.
             </summary>
             <param name="doneFilter">
             doneFilter An optional function that is called when the Deferred is resolved.
             </param>
             <param name="failFilter">
             failFilter An optional function that is called when the Deferred is rejected.
             </param>
             <returns>
             The deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function. The doneFilter and failFilter functions filter the original deferred's resolved / rejected status and values. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.
             </returns>
             <example>
             Filter resolve value:
             <code>
             var defer = $.Deferred(),
                 filtered = defer.pipe(function( value ) {
                   return value * 2;
                 });
            
             defer.resolve( 5 );
             filtered.done(function( value ) {
               alert( "Value is ( 2*5 = ) 10: " + value );
             });        
             </code>
             Filter reject value:
             <code>
             var defer = $.Deferred(),
                filtered = defer.pipe( null, function( value ) {
                  return value * 3;
                 });
            
             defer.reject( 6 );
             filtered.fail(function( value ) {
               alert( "Value is ( 3*6 = ) 18: " + value );
             });        
             </code>
             Chain tasks:
             <code>
             var request = $.ajax( url, { dataType: "json" } ),
                 chained = request.pipe(function( data ) {
                   return $.ajax( url2, { data: { user: data.userId } } );
                 });
            
             chained.done(function( data ) {
               // data retrieved from url2 as provided by the first request
             });        
             </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.pipe(SharpKit.JavaScript.JsFunc{System.Object})">
             <summary>
             Utility method to filter and/or chain Deferreds.
             </summary>
             <param name="doneFilter">
             doneFilter An optional function that is called when the Deferred is resolved.
             </param>
             <param name="failFilter">
             failFilter An optional function that is called when the Deferred is rejected.
             </param>
             <returns>
             The deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function. The doneFilter and failFilter functions filter the original deferred's resolved / rejected status and values. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.
             </returns>
             <example>
             Filter resolve value:
             <code>
             var defer = $.Deferred(),
                 filtered = defer.pipe(function( value ) {
                   return value * 2;
                 });
            
             defer.resolve( 5 );
             filtered.done(function( value ) {
               alert( "Value is ( 2*5 = ) 10: " + value );
             });        
             </code>
             Filter reject value:
             <code>
             var defer = $.Deferred(),
                filtered = defer.pipe( null, function( value ) {
                  return value * 3;
                 });
            
             defer.reject( 6 );
             filtered.fail(function( value ) {
               alert( "Value is ( 3*6 = ) 18: " + value );
             });        
             </code>
             Chain tasks:
             <code>
             var request = $.ajax( url, { dataType: "json" } ),
                 chained = request.pipe(function( data ) {
                   return $.ajax( url2, { data: { user: data.userId } } );
                 });
            
             chained.done(function( data ) {
               // data retrieved from url2 as provided by the first request
             });        
             </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.pipe(SharpKit.JavaScript.JsFunc{System.Object},SharpKit.JavaScript.JsFunc{System.Object})">
             <summary>
             Utility method to filter and/or chain Deferreds.
             </summary>
             <param name="doneFilter">
             doneFilter An optional function that is called when the Deferred is resolved.
             </param>
             <param name="failFilter">
             failFilter An optional function that is called when the Deferred is rejected.
             </param>
             <returns>
             The deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function. The doneFilter and failFilter functions filter the original deferred's resolved / rejected status and values. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.
             </returns>
             <example>
             Filter resolve value:
             <code>
             var defer = $.Deferred(),
                 filtered = defer.pipe(function( value ) {
                   return value * 2;
                 });
            
             defer.resolve( 5 );
             filtered.done(function( value ) {
               alert( "Value is ( 2*5 = ) 10: " + value );
             });        
             </code>
             Filter reject value:
             <code>
             var defer = $.Deferred(),
                filtered = defer.pipe( null, function( value ) {
                  return value * 3;
                 });
            
             defer.reject( 6 );
             filtered.fail(function( value ) {
               alert( "Value is ( 3*6 = ) 18: " + value );
             });        
             </code>
             Chain tasks:
             <code>
             var request = $.ajax( url, { dataType: "json" } ),
                 chained = request.pipe(function( data ) {
                   return $.ajax( url2, { data: { user: data.userId } } );
                 });
            
             chained.done(function( data ) {
               // data retrieved from url2 as provided by the first request
             });        
             </code>
             </example>
        </member>
        <member name="M:SharpKit.jQuery.jQueryPromise.then(SharpKit.JavaScript.JsAction,SharpKit.JavaScript.JsAction)">
            <summary>
            Add handlers to be called when the Deferred object is resolved or rejected.
            <list type="bullet">
            Both arguments can be either a single function or an array of functions. Either argument can also be null if no callback of that type is desired. Alternatively, use .done() or .fail() to set only doneCallbacks or failCallbacks. When the Deferred is resolved, the doneCallbacks are called. If the Deferred is instead rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since deferred.then returns the deferred object, other methods of the deferred object can be chained to this one, including additional .then() methods. For more information, see the documentation for Deferred object.
            </list>
            </summary>
            <param name="doneCallbacks">
            doneCallbacks A function, or array of functions, called when the Deferred is resolved.
            </param>
            <param name="failCallbacks">
            failCallbacks A function, or array of functions, called when the Deferred is rejected.
            </param>
            <returns>
            Returns: Deferred
            </returns>
            <example>
            Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
            <code>
            $.get("test.php").then(function(){ alert("$.get succeeded"); },function(){ alert("$.get failed!"); });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.#ctor">
            <summary>
            The jQuery.Deferred() constructor creates a new Deferred object. The new operator is optional.
            jQuery.Deferred can be passed an optional function, which is called just before the constructor returns and is passed the constructed deferred object as both the this object and as the first argument to the function. The called function can attach callbacks using deferred.then() for example.
            A Deferred object starts in the pending state. Any callbacks added to the object with deferred.then(), deferred.done(), or deferred.fail() are queued to be executed later. Calling deferred.resolve() or deferred.resolveWith() transitions the Deferred into the resolved state and immediately executes any doneCallbacks that are set. Calling deferred.reject() or deferred.rejectWith() transitions the Deferred into the rejected state and immediately executes any failCallbacks that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred — they will execute immediately.
            The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.
            </summary>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.promise(System.Object)">
            <summary>
            Return a Deferred's Promise object.
            </summary>
            <param name="target">
            targetObject onto which the promise methods have to be attached
            </param>
            <returns>
            Returns: Promise
            </returns>
            <note>
            The deferred.promise() method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (then, done, fail, isResolved, and isRejected), but not ones that change the state (resolve, reject, resolveWith, and rejectWith). As of jQuery 1.6, the Promise also exposes the always and pipe Deferred methods.
            If target is provided, deferred.promise() will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.
            If you are creating a Deferred, keep a reference to the Deferred so that it can be resolved or rejected at some point. Return only the Promise object via deferred.promise() so other code can register callbacks or inspect the current state.
            </note>
            <example>
            Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first "wins" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action.
            <code>
            //Create a Deferred and return its Promise
            function asyncEvent(){var dfd = new jQuery.Deferred();setTimeout(function(){dfd.resolve("hurray");}, Math.floor(Math.random()*1500));setTimeout(function(){dfd.reject("sorry");}, Math.floor(Math.random()*1500));return dfd.promise();}
            // Attach a done and fail handler for the asyncEvent
            $.when( asyncEvent() ).then(function(status){alert( status+', things are going well' );},function(status){alert( status+', you fail this time' );});
            </code>
            Use the target argument to promote an existing object to a Promise:
            <code>
            //Existing object
            var obj = {hello: function( name ) {alert( "Hello " + name );}},
            //Create a Deferred
            defer = $.Deferred();
            //Set object as a promise
            defer.promise( obj );
            // Resolve the deferred
            defer.resolve( "John" );
            // Use the object as a Promise
            obj.done(function( name ) {obj.hello( name ); // will alert "Hello John"}).hello( "Karl" ); // will alert "Hello Karl"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.reject(System.Object[])">
            <summary>
            Reject a Deferred object and call any failCallbacks with the given args.
            <list type="bullet">
            Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().
            </list>
            <list type="bullet">
            When the Deferred is rejected, any failCallbacks added by deferred.then or deferred.fail are called. Callbacks are executed in the order they were added. Each callback is passed the args from the deferred.reject() call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the .reject() call. For more information, see the documentation for Deferred object.
            </list>
            </summary>
            <param name="args">
            args Optional arguments that are passed to the failCallbacks.
            </param>
            <returns>
            Returns: Deferred
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.rejectWith(System.Object,System.Object[])">
            <summary>
             Reject a Deferred object and call any failCallbacks with the given context and args.
             <list type="bullet">
             Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().
             </list>
             <list type="bullet">
             When the Deferred is rejected, any failCallbacks added by deferred.then or deferred.fail are called. Callbacks are executed in the order they were added. Each callback is passed the args from the deferred.reject() call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the .reject() call. For more information, see the documentation for Deferred object.
             </list>
            </summary>
            <param name="context">
            context Context passed to the failCallbacks as the this object.
            </param>
            <param name="args">
            args An optional array of arguments that are passed to the failCallbacks.
            </param>
            <returns>
            Returns: Deferred
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.resolve(System.Object[])">
            <summary>
            Resolve a Deferred object and call any doneCallbacks with the given args.
            <list type="bullet">
            When the Deferred is resolved, any doneCallbacks added by deferred.then or deferred.done are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .resolve(). Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the .resolve() call. For more information, see the documentation for Deferred object.
            </list>
            </summary>
            <param name="args">
            args Optional arguments that are passed to the doneCallbacks.
            </param>
            <returns>
            Returns: Deferred
            </returns>
        </member>
        <member name="M:SharpKit.jQuery.Deferred.resolveWith(System.Object,System.Object[])">
            <summary>
            Resolve a Deferred object and call any doneCallbacks with the given context and args.
            <list type="bullet">
            Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().
            </list>
            <list type="bullet">
            When the Deferred is resolved, any doneCallbacks added by deferred.then or deferred.done are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .resolve(). Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the .resolve() call. For more information, see the documentation for Deferred object.
            </list>
            </summary>
            <param name="context">
            context Context passed to the doneCallbacks as the this object.
            </param>
            <param name="args">
            args An optional array of arguments that are passed to the doneCallbacks.
            </param>
            <returns>
            Returns: Deferred
            </returns>
        </member>
        <member name="T:SharpKit.jQuery.NamespaceDoc">
            <summary>
            SharpKit.jQuery namespace contains all jQuery core framework APIs
            </summary>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            SharpKit interface for jQuery.
            jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development. jQuery is designed to change the way that you write JavaScript.
            </summary>
        </member>
    </members>
</doc>
