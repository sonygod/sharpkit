<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.RxJS</name>
    </assembly>
    <members>
        <member name="T:SharpKit.Rx.Observable">
            <summary>
            Provides a set of static methods for query operations over observable sequences.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Observable.interval(System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
            <param name="period">Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).</param>
            <param name="scheduler">Scheduler to run the timer on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence that produces a value after each period.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timer(SharpKit.JavaScript.JsDate,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Absolute (specified as a Date object) at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values (specified as an integer denoting milliseconds). If not specified, the resulting timer is not recurring.</param>
            <param name="scheduler">Scheduler to run the timer on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timer(SharpKit.JavaScript.JsDate,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Absolute (specified as a Date object) at which to produce the first value.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timer(System.Int64,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Relative time (specified as an integer denoting milliseconds) at which to produce the first value.</param>
            <param name="period">Period to produce subsequent values (specified as an integer denoting milliseconds). If not specified, the resulting timer is not recurring.</param>
            <param name="scheduler">Scheduler to run the timer on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timer(System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
            <param name="dueTime">Relative time (specified as an integer denoting milliseconds) at which to produce the first value.</param>
            <param name="scheduler">Scheduler to run the timer on.</param>
            <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delay``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsDate,SharpKit.Rx.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="dueTime">Absolute (specified as a Date object) time by which to shift the observable sequence.</param>
            <param name="scheduler">Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delay``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="dueTime">Relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.</param>
            <param name="scheduler">Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.throttle``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="dueTime">Duration of the throttle period for each value (specified as an integer denoting milliseconds).</param>
            <param name="scheduler">Scheduler to run the throttle timers on. If not specified, the timeout scheduler is used.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.windowWithTime``1(SharpKit.Rx.IObservable{``0},System.Int64,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            <para>res = xs.windowWithTime(1000, 500 /*, scheduler */); // segments of 1 second with time shift 0.5 seconds</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Length of each window (specified as an integer denoting milliseconds).</param>
            <param name="timeShift">Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.</param>
            <param name="scheduler">Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.windowWithTime``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            <para>res = xs.windowWithTime(1000, scheduler); // non-overlapping segments of 1 second</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Length of each window (specified as an integer denoting milliseconds).</param>
            <param name="scheduler">[Optional] Scheduler to run windowing timers on.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.windowWithTimeOrCount``1(SharpKit.Rx.IObservable{``0},System.Int64,System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Maximum time length (specified as an integer denoting milliseconds) of a window.</param>
            <param name="count">Maximum element count of a window.</param>
            <param name="scheduler">Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.bufferWithTime``1(SharpKit.Rx.IObservable{``0},System.Int64,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            <para>res = xs.bufferWithTime(1000, 500 /*, scheduler */); // segments of 1 second with time shift 0.5 seconds</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Length of each buffer (specified as an integer denoting milliseconds).</param>
            <param name="timeShift">Interval between creation of consecutive buffers (specified as an integer denoting milliseconds). If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.</param>
            <param name="scheduler">Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.bufferWithTime``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            <para>res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Length of each buffer (specified as an integer denoting milliseconds).</param>
            <param name="scheduler">Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.bufferWithTimeOrCount``1(SharpKit.Rx.IObservable{``0},System.Int64,System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="timeSpan">Maximum time length of a buffer.</param>
            <param name="count">Maximum element count of a buffer.</param>
            <param name="scheduler">Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeInterval``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Records the time interval between consecutive values in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence with time interval information on values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timestamp``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Records the timestamp for each value in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.</param>
            <returns>An observable sequence with timestamp information on values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sample``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="interval">Interval at which to sample (specified as an integer denoting milliseconds).</param>
            <param name="scheduler">Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sample``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TSample">The type of sample.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="sampler">The sampling tick sequence.</param>
            <returns>Sampled observable sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeout``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Relative time (specified as an integer denoting milliseconds) when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.</param>
            <param name="scheduler">Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeout``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsDate,SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Absolute (specified as a Date object) time when a timeout occurs.</param>
            <param name="other">Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.</param>
            <param name="scheduler">Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeout``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Relative time (specified as an integer denoting milliseconds) when a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeout``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsDate,SharpKit.Rx.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Absolute (specified as a Date object) time when a timeout occurs.</param>
            <param name="scheduler">Scheduler to run the timeout timers on.</param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.generateWithAbsoluteTime``2(``0,SharpKit.JavaScript.JsFunc{``0,System.Boolean},SharpKit.JavaScript.JsFunc{``0,``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,SharpKit.JavaScript.JsDate},SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <typeparam name="TState">The type of state.</typeparam>
            <typeparam name="TResult">he type of result.</typeparam>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration, returning Date values.</param>
            <param name="scheduler">Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.generateWithRelativeTime``2(``0,SharpKit.JavaScript.JsFunc{``0,System.Boolean},SharpKit.JavaScript.JsFunc{``0,``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,System.Int64},SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <typeparam name="TState">The type of state.</typeparam>
            <typeparam name="TResult">he type of result.</typeparam>
            <param name="initialState">Initial state.</param>
            <param name="condition">Condition to terminate generation (upon returning false).</param>
            <param name="iterate">Iteration step function.</param>
            <param name="resultSelector">Selector function for results produced in the sequence.</param>
            <param name="timeSelector">Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.</param>
            <param name="scheduler">Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delaySubscription``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsDate,SharpKit.Rx.IScheduler)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Absolute time to perform the subscription at.</param>
            <param name="scheduler">Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delaySubscription``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Time shifts the observable sequence by delaying the subscription.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="dueTime">Relative time to perform the subscription at.</param>
            <param name="scheduler">Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delayWithSelector``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}})">
            <summary>
            Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TDelay">The type of delay.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="subscriptionDelay">Sequence indicating the delay for the subscription to the source.</param>
            <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.delayWithSelector``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}})">
            <summary>
            Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TDelay">The type of delay.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
            <returns>Time-shifted sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.throttleWithSelector``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}})">
            <summary>
            Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TThrottle">The type of throttle.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="throttleDurationSelector">Selector function to retrieve a sequence indicating the throttle duration for each given element.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeoutWithSelector``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}},SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TTimeout">The type of timeout.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="firstTimeout">Observable sequence that represents the timeout for the first element.</param>
            <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
            <param name="other">Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException(). </param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.timeoutWithSelector``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}},SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TTimeout">The type of timeout.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
            <param name="other">Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException(). </param>
            <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.aggregate``2(SharpKit.Rx.IObservable{``0},``1,SharpKit.JavaScript.JsFunc{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence. The specified seed value is used as the initial accumulator value.
            </summary>  
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TAccumulate">The type of accumulator.</typeparam>
            <param name="source">Source sequence to sample.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing a single element with the final accumulator value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.aggregate``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence.
            </summary>  
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to aggregate.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing a single element with the final accumulator value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.any``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to test.</param>
            <param name="predicate">A function to test each element for a condition. If not specified, the operator tests for the sequence being non-empty.</param>
            <returns>An observable sequence containing a single Boolean value determining whether any elements in the source sequence pass the test in the specified predicate, or (when no predicate is specified) whether the sequence is non-empty.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.all``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Determines whether all element of an observable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to test.</param>
            <param name="predicate">A function to test each element for a condition. If not specified, the operator tests for the sequence being non-empty.</param>
            <returns>An observable sequence containing a single Boolean value determining whether all elements in the source sequence pass the test in the specified predicate, or (when no predicate is specified) whether the sequence is non-empty.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.contains``1(SharpKit.Rx.IObservable{``0},``0,SharpKit.JavaScript.JsFunc{``0,``0,System.Int32})">
            <summary>
            Determines whether an observable sequence contains a specified element.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to test.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare elements. If not specified, this defaults to object comparison using ===.</param>
            <returns>An observable sequence containing a single Boolean value determining whether the source sequence contains an element that has the specified value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.count``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns an observable sequence containing an integer value that represents the total number of elements in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to count.</param>
            <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.isEmpty``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Determines whether an observable sequence is empty.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence to test.</param>
            <returns>An observable sequence containing a single element determining whether the source sequence is empty.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{SharpKit.JavaScript.JsNumber})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{System.Int32})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{System.Int64})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{System.Single})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.sum(SharpKit.Rx.IObservable{System.Double})">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source">Source sequence to sum.</param>
            <returns>An observable sequence containing a single element with the sum of the values in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.minBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``1,``1,System.Int32})">
            <summary>
            Returns the elements in an observable sequence with the minimum key value.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Key selector function.</param>
            <param name="comparer">Comparer used to compare key values. If not specified, this defaults to comparison of two objects by subtraction using -.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.maxBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``1,``1,System.Int32})">
            <summary>
            Returns the elements in an observable sequence with the maximum key value.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Key selector function.</param>
            <param name="comparer">Comparer used to compare key values. If not specified, this defaults to comparison of two objects by subtraction using -.</param>
            <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.min``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,System.Int32})">
            <summary>
            Returns the minimum element in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="comparer">Comparer used to compare elements. If not specified, this defaults to comparison of two objects by subtraction using -.</param>
            <returns>An observable sequence containing a single element with the minimum element in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.max``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,System.Int32})">
            <summary>
            Returns the maximum element in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="comparer">Comparer used to compare elements. If not specified, this defaults to comparison of two objects by subtraction using -.</param>
            <returns>An observable sequence containing a single element with the maximum element in the sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{System.Int32})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{SharpKit.JavaScript.JsNumber})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{System.Int64})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{System.Decimal})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{System.Single})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.average(SharpKit.Rx.IObservable{System.Double})">
            <summary>
            Computes the average of an observable sequence of numeric values.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.qequenceEqual``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,System.Int32})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="first">First observable sequence to compare.</param>
            <param name="second">Second observable sequence to compare.</param>
            <param name="comparer">Comparer used to compare elements of both sequences. If not specified, this defaults to object comparison using ===.</param>
            <returns>An observable sequence that contains a single element which indicates whether both sequences are equal.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.ifThen``1(SharpKit.JavaScript.JsFunc{System.Boolean},SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0})">
            <summary>
            Determines whether an observable collection contains values.
            </summary>
            <param name="condition">The condition which determines if the thenSource or elseSource will be run.</param>
            <param name="thenSource">The observable sequence that will be run if the condition function returns true.</param>
            <param name="elseSource">The observable sequence that will be run if the condition function returns false.</param>     
            <returns>An observable sequence which is either the thenSource or elseSource.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.ifThen``1(SharpKit.JavaScript.JsFunc{System.Boolean},SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Determines whether an observable collection contains values.
            </summary>
            <param name="condition">The condition which determines if the thenSource or elseSource will be run.</param>
            <param name="thenSource">The observable sequence that will be run if the condition function returns true.</param>
            <param name="scheduler">The scheduler used to create empty sequence that will be run if the condition function returns false.</param>
            <returns>An observable sequence which is either the thenSource or an empty sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.whileDo``1(SharpKit.JavaScript.JsFunc{System.Boolean},SharpKit.Rx.IObservable{``0})">
            <summary>
            Repeats source as long as condition holds emulating a while loop.
            </summary>
            <param name="condition">The condition which determines if the source will be repeated.</param>
            <param name="source">The observable sequence that will be run if the condition function returns true.</param>
            <returns>An observable sequence which is repeated as long as the condition holds.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.doWhile``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{System.Boolean})">
            <summary>
            Repeats source as long as condition holds emulating a do while loop.
            </summary>
            <param name="source">The observable sequence that will be run if the condition function returns true.</param>
            <param name="condition">The condition which determines if the source will be repeated.</param>
            <returns>An observable sequence which is repeated as long as the condition holds.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.switchCase``2(SharpKit.JavaScript.JsFunc{``0},SharpKit.JavaScript.JsObject{``0,SharpKit.Rx.IObservable{``1}},SharpKit.Rx.IObservable{``1})">
            <summary>
            Uses selector to determine which source in sources to use.
            </summary>
            <param name="selector">The function which extracts the value for to test in a case statement.</param>
            <param name="sources">A object which has keys which correspond to the case statement labels.</param>
            <param name="defaultSource">The observable sequence that will be run if the sources are not matched.</param>
            <returns>An observable sequence which is determined by a case statement.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.switchCase``2(SharpKit.JavaScript.JsFunc{``0},SharpKit.JavaScript.JsObject{``0,SharpKit.Rx.IObservable{``1}},SharpKit.Rx.IScheduler)">
            <summary>
            Uses selector to determine which source in sources to use. An empty sequence will be provided in no matching case.
            </summary>
            <param name="selector">The function which extracts the value for to test in a case statement.</param>
            <param name="sources">A object which has keys which correspond to the case statement labels.</param>
            <param name="scheduler">The scheduler will be used for create an empty sequence as default case.</param>
            <returns>An observable sequence which is determined by a case statement.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.forIn``2(``0[],SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}})">
            <summary>
            Concatenates the observable sequences obtained by running the specified result selector for each element in source.
            </summary>
            <param name="sources">An array of values to turn into an observable sequence.</param>
            <param name="resultSelector">A function to apply to each item in the sources array to turn it into an observable sequence.</param>
            <returns>An observable sequence from the concatenated observable sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.expand``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``0}},SharpKit.Rx.IScheduler)">
            <summary>
            Expands an observable sequence by recursively invoking selector.
            </summary>
            <param name="source">The source observable sequence.</param>
            <param name="selector">Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <param name="scheduler">Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.</param>
            <returns>An observable sequence containing all the elements produced by the recursive expansion.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.forkJoin``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Runs all observable sequences in parallel and collect their last elements.
            </summary>
            <param name="sources">The array with the source observable sequences.</param>
            <returns>An observable sequence with an array collecting the last elements of all the input sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.forkJoin``3(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,``1,``2})">
            <summary>
            Runs two observable sequences in parallel and combines their last elemenets.
            </summary>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <param name="resultSelector">Result selector function to invoke with the last elements of both sequences.</param>
            <returns>An observable sequence with the result of calling the selector function with the last elements of both input sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.letBind``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}})">
            <summary>
            Bind the source to the parameter without sharing subscription side-effects.
            </summary>
            <param name="source">The source observable sequence.</param>
            <param name="function">The function to produce other sequence using source sequence as parameter.</param>
            <returns>Produced sequence by the function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.subscribe``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsError},SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribes to the observable sequence by specifying a set of callback functions.
            </summary>
            <param name="observable">Observable instance</param>
            <param name="onNext">Observer object to receive notifications on, or an onNext handler function.</param>
            <param name="onError">An onError handler function. This parameter shouldn't be supplied when the first parameter is an Observer. If not specified, the default behavior is to keep the error unhandled.</param>
            <param name="onCompleted">An onCompleted handler function.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.subscribe``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction)">
            <summary>
            Subscribes to the observable sequence by specifying a set of callback functions.
            </summary>
            <param name="observable">Observable instance</param>
            <param name="onNext">Observer object to receive notifications on, or an onNext handler function.</param>
            <param name="onCompleted">An onCompleted handler function.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.refCount``1(SharpKit.Rx.IConnectableObservable{``0})">
            <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>An observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.start(SharpKit.JavaScript.JsAction,SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.start(SharpKit.JavaScript.JsAction,System.Object,SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="instance">Object instance to invoke the function on.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.start(SharpKit.JavaScript.JsAction,System.Object,SharpKit.JavaScript.JsArray,SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="instance">Object instance to invoke the function on.</param>
            <param name="arguments">Arguments to pass to the function.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.start``1(SharpKit.JavaScript.JsFunc{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="func">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.start``1(SharpKit.JavaScript.JsFunc{``0},System.Object,SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="func">Function to run asynchronously.</param>
            <param name="instance">Object instance to invoke the function on.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.start``1(SharpKit.JavaScript.JsFunc{``0},System.Object,SharpKit.JavaScript.JsArray,SharpKit.Rx.IScheduler)">
            <summary>
            Invokes a function on the given instance and with the given arguments on the specified scheduler, producing the result through an observable sequence.
            </summary>
            <param name="func">Function to run asynchronously.</param>
            <param name="instance">Object instance to invoke the function on.</param>
            <param name="arguments">Arguments to pass to the function.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return type="Observable">Observable sequence that will produce the result of calling the function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync(SharpKit.JavaScript.JsAction,SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``1(SharpKit.JavaScript.JsAction{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``2(SharpKit.JavaScript.JsAction{``0,``1},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``3(SharpKit.JavaScript.JsAction{``0,``1,``2},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``4(SharpKit.JavaScript.JsAction{``0,``1,``2,``3},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``1(SharpKit.JavaScript.JsFunc{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``2(SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``3(SharpKit.JavaScript.JsFunc{``0,``1,``2},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``4(SharpKit.JavaScript.JsFunc{``0,``1,``2,``3},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.toAsync``5(SharpKit.JavaScript.JsFunc{``0,``1,``2,``3,``4},SharpKit.Rx.IScheduler)">
            <summary>
            Converts a function to an asynchronous function that returns an observable sequence with the function's result.
            </summary>
            <param name="action">Function to run asynchronously.</param>
            <param name="scheduler">Scheduler to run the function on. If not specified, the timeout scheduler is used.</param>
            <return>Function returning an observable sequence that will produce the result of calling the original function, or an error object if an error occurred.</return>
        </member>
        <member name="M:SharpKit.Rx.Observable.multicast``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.ISubject{``0,``1})">
            <summary>
            Returns an observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function or specified subject.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be pushed into the specified subject.</param>
            <param name="subject">The subject to push source elements into or the factory function to create an intermediate subject through which the source sequence’s elements will be multicast to the selector function.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function or specified subject.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.multicast``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.ISubject{``0,``1}},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2}})">
            <summary>
            Returns an observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function or specified subject.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TIntermediate">The type of intermediate.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence which will be multicast in the specified selector function.</param>
            <param name="subjectSelector">The factory function to create an intermediate subject through which the source sequence’s elements will be multicast to the selector function.</param>
            <param name="selector">The selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publish``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence.
            &#10;
            &#10; xs_ = xs.publish(); res = xs_.zip(xs_, function (x, y) { return x + y; }); }); xs_.connect();
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publish``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
            &#10;
            &#10; res = xs.publish(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publishValue``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}},``0)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            &#10;
            &#10;res = xs.publishValue(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); }, 42);
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <param name="initialValue">The initial value received by observers upon subscription.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publishValue``1(SharpKit.Rx.IObservable{``0},``0)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            &#10;
            &#10;xs_ = xs.publishValue(42); res = xs_.zip(xs_, function (x, y) { return x + y; }); }); xs_.connect();
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="initialValue">The initial value received by observers upon subscription.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publishLast``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; xs_ = xs.publish(); res = xs_.zip(xs_, function (x, y) { return x + y; }); }); xs_.connect();
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.publishLast``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; res = xs.publish(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasted through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            &#10;
            &#10; xs_ = xs.replay(); res = xs_.zip(xs_, function (x, y) { return x + y; }); }); xs_.connect();
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``1(SharpKit.Rx.IObservable{``0},System.Int32,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="window">Maximum time length of the replay buffer. If not specified, the window length is infinite.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``1(SharpKit.Rx.IObservable{``0},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}},System.Int32,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; res = xs.replay(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <param name="bufferSize">Maximum element count of the replay buffer. If not specified, the buffer size is infinite.</param>
            <param name="window">Maximum time length of the replay buffer. If not specified, the window length is infinite.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}},System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; res = xs.replay(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <param name="bufferSize">Maximum element count of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}},System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; res = xs.replay(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <param name="window">Maximum time length of the replay buffer.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.replay``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1}},SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            &#10;
            &#10; res = xs.replay(function (xs_) { return xs_.zip(xs_, function (x, y) { return x + y; }); });
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence whose elements will be multicasting through a single shared subscription.</param>
            <param name="selector">The selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.never``1">
            <summary>
            Returns a non-terminating observable sequence.
            </summary>
            <returns>A non-terminating observable sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.empty``1(SharpKit.Rx.IScheduler)">
            <summary>
            Returns an empty observable sequence with the specified scheduler.
            </summary>
            <param name="scheduler">The scheduler to send the termination call. If not specified, the immediate scheduler is used.</param>
            <returns>The observable sequence with no elements.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.returnValue``1(``0,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that contains a single value with a specified value and optional scheduler.
            </summary>
            <param name="value">The single element in the resulting observable sequence.</param>
            <param name="scheduler">The scheduler to send the single element on. If not specified, the immediate scheduler is used.</param>
            <returns>Observable sequence containing the single specified element.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.throwException``1(SharpKit.JavaScript.JsError,SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
            <param name="exception">Exception object used for the sequence's termination.</param>
            <param name="scheduler">The scheduler to send the exceptional termination call on. If not specified, the immediate scheduler is used.</param>
            <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.generate``2(``0,SharpKit.JavaScript.JsFunc{``0,System.Boolean},SharpKit.JavaScript.JsFunc{``0,``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until the condition fails.
            </summary>
            <param name="initialState">The initial state.</param>
            <param name="condition">The condition to terminate generation.</param>
            <param name="iterate">The iteration step function.</param>
            <param name="resultSelector">The selector function for results produced in the sequence.</param>
            <param name="scheduler">The scheduler on which to run the generator loop. If not specified, the current thread scheduler is used.</param>
            <returns>The generated sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.defer``1(SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``0}})">
            <summary>
            Returns an observable sequence that invokes the observable factory whenever a new observer subscribes, allowing defered creation of the sequence. This is useful to allow an observer to easily obtain an updated or refreshed version of the sequence.
            </summary>
            <param name="observableFactory">The observable factory function to invoke for each observer that subscribes to the resulting sequence.</param>
            <returns>The observable sequence whose observers trigger an invocation of the given observable factory function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.using``2(SharpKit.JavaScript.JsFunc{``1},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``0}})">
            <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
            </summary>
            <param name="resourceFactory">Factory function to obtain a resource object.</param>
            <param name="observableFactory">Factory function to obtain an observable sequence that depends on the obtained resource.</param>
            <returns>Observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.fromArray``1(SharpKit.JavaScript.JsArray{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Converts an array to an observable sequence.
            </summary>
            <param name="source">Array to convert to an observable sequence.</param>
            <param name="scheduler">The scheduler on which to run the loop iterating over the array. If not specified, the current thread scheduler is used.</param>
            <returns>The observable sequence whose elements are pulled from the given array.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.fromArray(SharpKit.JavaScript.JsArray,SharpKit.Rx.IScheduler)">
            <summary>
            Converts an array to an observable sequence.
            </summary>
            <param name="source">Array to convert to an observable sequence.</param>
            <param name="scheduler">The scheduler on which to run the loop iterating over the array. If not specified, the current thread scheduler is used.</param>
            <returns>The observable sequence whose elements are pulled from the given array.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.toObservable``1(SharpKit.JavaScript.JsArray{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Converts an array to an observable sequence.
            </summary>
            <param name="source">Array to convert to an observable sequence.</param>
            <param name="scheduler">The scheduler on which to run the loop iterating over the array. If not specified, the current thread scheduler is used.</param>
            <returns>The observable sequence whose elements are pulled from the given array.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.toObservable``1(``0[],SharpKit.Rx.IScheduler)">
            <summary>
            Converts an array to an observable sequence.
            </summary>
            <param name="source">Array to convert to an observable sequence.</param>
            <param name="scheduler">The scheduler on which to run the loop iterating over the array. If not specified, the current thread scheduler is used.</param>
            <returns>The observable sequence whose elements are pulled from the given array.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.toObservable(SharpKit.JavaScript.JsArray,SharpKit.Rx.IScheduler)">
            <summary>
            Converts an array to an observable sequence.
            </summary>
            <param name="source">Array to convert to an observable sequence.</param>
            <param name="scheduler">The scheduler on which to run the loop iterating over the array. If not specified, the current thread scheduler is used.</param>
            <returns>The observable sequence whose elements are pulled from the given array.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.createWithDisposable``1(SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObserver{``0},SharpKit.Rx.IDisposable})">
            <summary>
            Creates an observable sequence from a specified subscribe method implementation.
            </summary>
            <param name="subscribe">The implementation of the resulting observable sequence's subscribe method, returning a Disposable object used to unsubscribe.</param>
            <returns>The observable sequence with the specified implementation for the subscribe method.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.create``1(SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObserver{``0},SharpKit.JavaScript.JsAction})">
            <summary>
            Creates an observable sequence from a specified subscribe method implementation.
            </summary>
            <param name="subscribe">The implementation of the resulting observable sequence's subscribe method, returning a function used to unsubscribe.</param>
            <returns>The observable sequence with the specified implementation for the subscribe method.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.range(System.Int32,System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <param name="scheduler">The scheduler to run the generator loop on. If not specified, the current thread scheduler is used.</param>
            <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.repeat``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Repeats the observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to repeat.</param>
            <param name="repeatCount">The number of times to repeat the sequence. If not specified, the sequence is repeated indefinitely.</param>
            <returns>The observable sequence producing the elements of the given sequence repeatedly.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.repeat``1(``0,System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence that repeats the given element the specified number of times.
            </summary>
            <param name="value">The element to repeat.</param>
            <param name="repeatCount">The number of times to repeat the element. If not specified, the sequence is repeated indefinitely.</param>
            <param name="scheduler">The scheduler to run the producer loop on. If not specified, the current thread scheduler is used.</param>
            <returns>An observable sequence that repeats the given element the specified number of times.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.repeat``1(``0,SharpKit.Rx.IScheduler)">
            <summary>
            Generates an observable sequence that repeats the given element infinitely.
            </summary>
            <param name="value">The element to repeat.</param>
            <param name="scheduler">The scheduler to run the producer loop on.</param>
            <returns>An observable sequence that repeats the given element infinitely.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.retry``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to retry.</param>
            <param name="retryCount">Number of times to repeat the sequence. If not specified, the sequence is repeated indefinitely as long as errors occur.</param>
            <returns>The observable sequence producing the elements of the given sequence repeatedly as long as errors occur.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.select``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})">
            <summary>
            Projects each element of an observable sequence into a new form by incorporating specified source and selector.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">A transform function to apply to each source element.</param>
            <returns>An observable sequence into a new form.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.Select``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})">
            <summary>
            Projects each element of an observable sequence into a new form by incorporating specified source and selector.
            </summary>
            <remarks>
            Alias of <see cref="M:SharpKit.Rx.Observable.select``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})"/> for use with query expressions.
            </remarks>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">A transform function to apply to each source element.</param>
            <returns>An observable sequence into a new form.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.select``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Int32,``1})">
            <summary>
            Projects each element of an observable sequence into a new form by incorporating the element’s index with the specified source and selector.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence into a new form.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.where``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="predicate">A function to test each source element for a condition.</param>
            <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.Where``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
            <remarks>
            Alias of <see cref="M:SharpKit.Rx.Observable.where``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})"/> for use with query expressions.
            </remarks>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="predicate">A function to test each source element for a condition.</param>
            <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.where``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Int32,System.Boolean})">
            <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupByUntil``4(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,``2},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IGroupedObservable{``1,``2},SharpKit.Rx.IObservable{``3}},SharpKit.JavaScript.JsFunc{``1,System.Object})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function. A duration selector function is used to control the lifetime of groups.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TElement">The type of element.</typeparam>
            <typeparam name="TDuration">The type of duration.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <param name="keySerializer">A function to serialize the key to a string for comparison purposes. If not specified, this defaults to the .toString() method implementation.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value. If not specified, this defaults to the .toString() method implementation.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupByUntil``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IGroupedObservable{``1,``0},SharpKit.Rx.IObservable{``2}},SharpKit.JavaScript.JsFunc{``1,System.Object})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer. A duration selector function is used to control the lifetime of groups.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TDuration">The type of duration.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="durationSelector">A function to signal the expiration of a group.</param>
            <param name="keySerializer">A function to serialize the key to a string for comparison purposes. If not specified, this defaults to the .toString() method implementation.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value. If not specified, this defaults to the .toString() method implementation.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupBy``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,``2},SharpKit.JavaScript.JsFunc{``1,System.Object})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <param name="keySerializer">A function to serialize the key to a string for comparison purposes. If not specified, this defaults to the .toString() method implementation.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``1,System.Object})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="keySerializer">A function to serialize the key to a string for comparison purposes.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.GroupBy``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,``2})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function
            </summary>
            <remarks>
            Alias of <see cref="M:SharpKit.Rx.Observable.groupBy``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``0,``2},SharpKit.JavaScript.JsFunc{``1,System.Object})"/> for using in query expressions.
            </remarks>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.GroupBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
            <remarks>
            Alias of <see cref="M:SharpKit.Rx.Observable.groupBy``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})"/> for using in query expressions.
            </remarks>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.take``1(SharpKit.Rx.IObservable{``0},System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="scheduler">Scheduler used to produce an onCompleted message in case the count parameter is set to 0.</param>
            <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.skip``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of values in an observable sequence and then returns the remaining values.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The sequence to skip elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An observable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.takeWhile``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Int32,System.Boolean})">
            <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.takeWhile``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.skipWhile``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.skipWhile``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Boolean})">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.selectMany``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}},SharpKit.JavaScript.JsFunc{``0,``1,``2})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            <para>
            xs.selectMany(/* collection selector */ function (x) { return ys(x); }, /* result selector */ function (x, y) { return x + y; })
            </para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TCollection">The type of collection.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="resultSelector">[Optional] A transform function to apply to each element of the intermediate sequence.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.SelectMany``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}},SharpKit.JavaScript.JsFunc{``0,``1,``2})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            <para>
            xs.selectMany(/* collection selector */ function (x) { return ys(x); }, /* result selector */ function (x, y) { return x + y; })
            </para>
            </summary>
            <remarks>
            Alias of <see cref="M:SharpKit.Rx.Observable.selectMany``3(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}},SharpKit.JavaScript.JsFunc{``0,``1,``2})"/> for using in query expressions.
            </remarks>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TCollection">The type of collection.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="resultSelector">[Optional] A transform function to apply to each element of the intermediate sequence.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.selectMany``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            <para>xs.SelectMany(/* collection selector */ function (x) { return ys(x); })</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.selectMany``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Projects each element of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            <para>xs.SelectMany(/* inner sequence */ zs)</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TOther">The other type.</typeparam>
            <param name="source">An observable sequence of elements to project.</param>
            <param name="other">An observable sequence to project each element from the source sequence onto.</param>
            <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.toArray``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Creates an array from an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source observable sequence to get an array of elements for.</param>
            <returns>An observable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.materialize``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">An observable sequence to get notification values for.</param>
            <returns>An observable sequence containing the materialized notification values from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.Dematerialize``1(SharpKit.Rx.IObservable{SharpKit.Rx.Notification{``0}})">
            <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">An observable sequence containing explicit notification values which have to be turned into implicit notifications.</param>
            <returns>An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.asObservable``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Hides the identity of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">An observable sequence whose identity to hide.</param>
            <returns>An observable sequence that hides the identity of the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.windowWithCount``1(SharpKit.Rx.IObservable{``0},System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to produce windows over.</param>
            <param name="count">Length of each window.</param>
            <param name="skip">Number of elements to skip between creation of consecutive windows. If not specified, the skip count corresponds to the count parameter value, resulting in non-overlapping adjacent windows.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.buffer``1(SharpKit.Rx.IObservable{``0},System.Int32,System.Int32)">
            <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to produce buffers over.</param>
            <param name="count">Length of each buffer.</param>
            <param name="skip">Number of elements to skip between creation of consecutive buffers. If not specified, the skip count corresponds to the count parameter value, resulting in non-overlapping adjacent buffers.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.startWith``1(SharpKit.Rx.IObservable{``0},``0[])">
            <summary>
            Prepends a sequence of values to an observable sequence.
            <para>E.g. res = xs.startWith(1, 2, 3);</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to prepend values to.</param>
            <param name="values">Values to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.scan``2(SharpKit.Rx.IObservable{``0},``1,SharpKit.JavaScript.JsFunc{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result with the specified source, optional seed and accumulator.
            <para>scanned = xs.scan(0, accumulator);</para>
            </summary>    
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TAccumulate">The type of accumulator.</typeparam>
            <param name="source">An observable sequence to accumulate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing the accumulated values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.scan``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result with the specified source, optional seed and accumulator.
            <para>scanned = xs.scan(accumulator);</para>
            </summary>    
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">An observable sequence to accumulate over.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <returns>An observable sequence containing the accumulated values.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.distinctUntilChanged``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``1,``1,System.Int32})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
            <param name="keySelector">A function to compute the comparison key for each element.</param>
            <param name="comparer">The equality comparer for computed key values. If not specified, this defaults to object comparison using ===.</param>
            <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.distinctUntilChanged``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``0,System.Int32})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
            <param name="comparer">The equality comparer for computed key values. If not specified, this defaults to object comparison using ===.</param>
            <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.finallyAction``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsAction)">
            <summary>
            Invokes a specified action after source observable sequence terminates normally or by an exception.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="finallyAction">Action to invoke after the source observable sequence terminates.</param>
            <returns>Source sequence with the action-invoking termination behavior applied.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.doAction``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObserver{``0})">
            <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon exceptional termination of the observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="observer">The observer whose methods to invoke as part of the source sequence's observation.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.doAction``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsError},SharpKit.JavaScript.JsAction)">
            <summary>
            Invokes an action for each element in the observable sequence, and invokes an action upon graceful or exceptional termination of the observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNext">The observer whose methods to invoke as part of the source sequence's observation or the action to invoke for each element in the observable sequence.</param>
            <param name="onError">The action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompleted">The action to invoke upon graceful termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.doAction``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction)">
            <summary>
            Invokes an action for each element in the observable sequence, and invokes an action upon graceful or exceptional termination of the observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNext">The observer whose methods to invoke as part of the source sequence's observation or the action to invoke for each element in the observable sequence.</param>
            <param name="onCompleted">The action to invoke upon graceful termination of the observable sequence.</param>
            <returns>The source sequence with the side-effecting behavior applied.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.skipLast``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Bypasses a specified number of elements at the end of an observable sequence.</param>
            <returns>An observable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.takeLast``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of elements to take from the end of the source sequence.</param>
            <returns>An observable sequence containing the specified number of elements from the of the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.ignoreElements``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Ignores all values in an observable sequence leaving only the termination messages.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>An empty observable sequence that signals termination, successful or exceptional of the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.elementAt``1(SharpKit.Rx.IObservable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.elementAtOrDefault``1(SharpKit.Rx.IObservable{``0},System.Int32,``0)">
            <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="defaultValue">The default value if the index is out of range. If not specified, the default value used is null.</param>
            <returns>An observable sequence that produces the element at the specified position in the source sequence or a default value if the index is outside the bounds of the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.defaultIfEmpty``1(SharpKit.Rx.IObservable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="defaultValue">The value to return if the sequence is empty. If not specified, the default value used is null.</param>
            <returns>An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.distinct``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1},SharpKit.JavaScript.JsFunc{``1,System.Object})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to compute the comparison key for each element. If not specified, this defaults to the identity function.</param>
            <param name="keySerializer">A function to compute the key used for comparison. If not specified, this defaults to the .toString() method implementation.</param>
            <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.distinct``1(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,System.Object})">
            <summary>
            Returns an observable sequence that contains only distinct elements according to the comparer.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySerializer">A function to compute the key used for comparison.</param>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.distinct``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Returns an observable sequence that contains only distinct elements with a specified source.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.mergeObservable``1(SharpKit.Rx.IObservable{SharpKit.Rx.IObservable{``0}})">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.merge``1(SharpKit.Rx.IObservable{SharpKit.Rx.IObservable{``0}},System.Int32)">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <param name="maxConcurrent">Maximum number of inner observable sequences being subscribed to concurrently.</param>
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.merge``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0})">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="other">Second observable sequence.</param>    
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.merge``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
            <param name="sources">Observable sequences to merge.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.merge``1(SharpKit.Rx.IScheduler,SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
            <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
            <param name="sources">Observable sequences to merge.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.switchLatest``1(SharpKit.Rx.IObservable{SharpKit.Rx.IObservable{``0}})">
            <summary>
            Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.concat``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Concatenates all the observable sequences.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.concat``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Concatenates all the observable sequences.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.concatObservable``1(SharpKit.Rx.IObservable{SharpKit.Rx.IObservable{``0}})">
            <summary>
            Concatenates an observable sequence of observable sequences.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">An observable sequence that contains the elements of each observed inner sequence, in sequential order.</param>
            <returns>An observable sequence that contains the elements of each observed inner sequence, in sequential order.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.catchException``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="first">First observable sequence whose exception (if any) is caught.</param>
            <param name="second">A second observable sequence used to produce results when an error occurred in the first sequence.</param>
            <returns>An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.catchException``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="handler">Exception handler function that returns an observable sequence given the error that occurred in the first sequence.</param>
            <returns>An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.catchException``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">Observable sequences to catch exceptions for.</param>
            <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.onErrorResumeNext``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="first">The first observable sequence whose exception (if any) is caught.</param>
            <param name="second">Second observable sequence used to produce results after the first sequence terminates.</param>
            <returns>An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.onErrorResumeNext``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
            <param name="sources">Observable sequences to concatenate.</param>
            <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.zip``3(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,``1,``2})">
            <summary>
            Merges two observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.zip``4(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3})">
            <summary>
            Merges three observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.zip``5(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.Rx.IObservable{``3},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3,``4})">
            <summary>
            Merges four observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TFourth">The fourth type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="forth">The fourth observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.zip``6(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.Rx.IObservable{``3},SharpKit.Rx.IObservable{``4},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            Merges four observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TFourth">The fourth type.</typeparam>
            <typeparam name="TFifth">The fifth type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="forth">The fourth observable source.</param>
            <param name="fifth">The fifth observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.combineLatest``3(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,``1,``2})">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.combineLatest``4(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3})">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.combineLatest``5(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.Rx.IObservable{``3},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3,``4})">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TFourth">The fourth type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="forth">The fourth observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.combineLatest``6(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.Rx.IObservable{``2},SharpKit.Rx.IObservable{``3},SharpKit.Rx.IObservable{``4},SharpKit.JavaScript.JsFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TThird">The third type.</typeparam>
            <typeparam name="TFourth">The fourth type.</typeparam>
            <typeparam name="TFifth">The fifth type.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second observable source.</param>
            <param name="third">The fird observable source.</param>
            <param name="forth">The fourth observable source.</param>
            <param name="fifth">The fifth observable source.</param>
            <param name="resultSelector">The function to invoke for each consecutive set of elements from the sources.</param>
            <returns>An observable sequence containing the result of combining the elements of the sources using the specified result selector function.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.takeUntil``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence until the other observable sequence produces a value.
            </summary>
            <typeparam name="TOther">The other type.</typeparam>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to propagate elements for.</param>
            <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.skipUntil``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence only after the other observable sequence produces a value.
            </summary>
            <typeparam name="TOther">The other type.</typeparam>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence to propagate elements for.</param>
            <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
            <returns>An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.amb``1(SharpKit.Rx.IObservable{``0}[])">
            <summary>
            Propagates the observable sequence that reacts first.
            <para>E.g. winner = Rx.Observable.amb(xs, ys, zs);</para>
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="sources">Observable sources competing to react first.</param>
            <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.amb``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``0})">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>An observable sequence that surfaces either of the given sequences, whichever reacted first.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.observerOn``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Asynchronously notify observers on the specified scheduler.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">Scheduler to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified scheduler.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.subscribeOn``1(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified scheduler.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.and``2(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Creates a pattern that matches when both observable sequences have an available value.
            </summary>
            <param name="left">Observable sequence to match with the right sequence.</param>
            <param name="right">Observable sequence to match with the current sequence.</param>
            <returns>Pattern object that matches when both observable sequences have an available value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.then``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{``0,``1})">
            <summary>
            Matches when the observable sequence has an available value and projects the value.
            </summary>
            <param name="source">Observable sequence to apply the selector on.</param>
            <param name="selector">Selector that will be invoked for values in the source sequence.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.when``1(SharpKit.Rx.Plan{``0}[])">
            <summary>
            Joins together the results from several patterns.
            </summary>
            <param name="plans">A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.</param>
            <returns>Observable sequence with the results form matching several patterns.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.join``5(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``2}},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``3}},SharpKit.JavaScript.JsFunc{``0,``1,``4})">
            <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
            <param name="left">The left observable sequence to join elements for.</param>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector">A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector">A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector">A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.</param>
            <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.groupJoin``5(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``2}},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``3}},SharpKit.JavaScript.JsFunc{``0,SharpKit.Rx.IObservable{``1},``4})">
            <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
            <param name="left">The left observable sequence to join elements for.</param>
            <param name="right">The right observable sequence to join elements for.</param>
            <param name="leftDurationSelector">A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.</param>
            <param name="rightDurationSelector">A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.</param>
            <param name="resultSelector">A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.</param>
            <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.buffer``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="bufferClosingSelector">A function invoked to define the closing of each produced window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.buffer``3(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``2}})">
            <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="bufferOpenings">Observable sequence whose elements denote the creation of new windows.</param>
            <param name="bufferClosingSelector">A function invoked to define the closing of each produced window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.window``2(SharpKit.Rx.IObservable{``0},SharpKit.JavaScript.JsFunc{SharpKit.Rx.IObservable{``1}})">
            <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="windowClosingSelector">A function invoked to define the closing of each produced window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observable.window``3(SharpKit.Rx.IObservable{``0},SharpKit.Rx.IObservable{``1},SharpKit.JavaScript.JsFunc{``1,SharpKit.Rx.IObservable{``2}})">
            <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
            <param name="source">Source sequence to produce windows over.</param>
            <param name="windowOpenings">Observable sequence whose elements denote the creation of new windows.</param>
            <param name="windowClosingSelector">A function invoked to define the closing of each produced window.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="T:SharpKit.Rx.IDisposable">
            <summary>
            Defines a method to release allocated resources.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.IDisposable.dispose">
            <summary>
            Disposes the disposable resource.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.IObserver`1">
            <summary>
            Provides observer functionality, used as the callback mechanism for observable sequences.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.IObserver`1.onNext(`0)">
            <summary>
            Notifies the observer by supplying a new sequence element.
            </summary>
            <param name="value">New sequence element.</param>
        </member>
        <member name="M:SharpKit.Rx.IObserver`1.onError(SharpKit.JavaScript.JsError)">
            <summary>
            Notifies the observer about an error that occurred in the sequence.
            </summary>
            <param name="exception">The error object.</param>
        </member>
        <member name="M:SharpKit.Rx.IObserver`1.onCompleted">
            <summary>
            Notifies the observer of the termination of the sequence.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.IObservable`1">
            <summary>
            Represents a push-style collection.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.IObservable`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="T:SharpKit.Rx.IScheduler">
            <summary>
            Represents an object that schedules units of work.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.IScheduler.scheduleRecursiveWithState``1(``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0}})">
            <summary>
            Schedules the specified action recursively, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(0, function (i, self) { alert('Hello ' + i + '!'); self(i + 1); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.IScheduler.scheduleRecursiveWithRelativeAndState``1(``0,System.Int64,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule(0, 1000 /* 1s */, function (i, self) { alert('Hello ' + i + '!'); self(i + 1, 1000 /* 1s */); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.IScheduler.scheduleRecursiveWithAbsoluteAndState``1(``0,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule("Bart", new DateTime(2011, 2, 11), function (name, self) { alert('Hello ' + name + '!'); self(name, new Date(new Date().getFullYear() + 1, 2, 11)); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="T:SharpKit.Rx.IScheduledItem`1">
            <summary>
            Represents a work item that has been scheduled.
            </summary>
            <typeparam name="TAbsolute">The absolute time argument type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.IScheduledItem`1.invoke">
            <summary>
            Invokes the work item.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.IScheduledItem`1.dueTime">
            <summary>
            Get the absolute time at which the item executes.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.IConnectableObservable`1">
            <summary>
            Represents an observable that can be connected and disconnected.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.IConnectableObservable`1.connect">
            <summary>
            Connects the observable to its source.
            </summary>
            <returns>Disposable used to disconnect the observable sequence from its source.</returns>
        </member>
        <member name="T:SharpKit.Rx.IGroupedObservable`2">
            <summary>
            Represents an observable sequence of values that have a common key.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TElement">The type of element.</typeparam>
        </member>
        <member name="P:SharpKit.Rx.IGroupedObservable`2.key">
            <summary>
            Gets the common key.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.ISubject`2">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <typeparam name="TSource">The type of source.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="T:SharpKit.Rx.ISubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <typeparam name="T">The type of the subject.</typeparam>
        </member>
        <member name="T:SharpKit.Rx.Disposable">
            <summary>
            Disposable object that runs the given function upon disposal.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Disposable.#ctor(SharpKit.JavaScript.JsAction)">
            <summary>
            Creates a disposable object that invokes the specified function when disposed.
            </summary>
            <param name="action">Function to run during a call to dispose.</param>
        </member>
        <member name="M:SharpKit.Rx.Disposable.dispose">
            <summary>
            Disposes the disposable resource.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Unit">
            <summary>
            Represents void.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Notification">
            <summary>
            Provides a set of static methods for constructing notifications.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Notification.createOnNext``1(``0)">
            <summary>
            Creates an object that represents an OnNext notification to an observer.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="value">The value contained in the notification.</param>
            <returns>The OnNext notification containing the value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Notification.createOnError``1(SharpKit.JavaScript.JsError)">
            <summary>
            Creates an object that represents an OnError notification to an observer.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="error">The exception contained in the notification.</param>
            <returns>The OnError notification containing the exception.</returns>
        </member>
        <member name="M:SharpKit.Rx.Notification.createOnCompleted``1">
            <summary>
            Creates an object that represents an OnCompleted notification to an observer.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <returns>The OnCompleted notification.</returns>
        </member>
        <member name="T:SharpKit.Rx.NotificationKind">
            <summary>
            Indicates the type of a notification.
            </summary>
        </member>
        <member name="F:SharpKit.Rx.NotificationKind.OnNext">
            <summary>
            Represents an OnNext notification.
            </summary>
        </member>
        <member name="F:SharpKit.Rx.NotificationKind.OnError">
            <summary>
            Represents an OnError notification.
            </summary>
        </member>
        <member name="F:SharpKit.Rx.NotificationKind.OnCompleted">
            <summary>
            Represents an OnCompleted notification.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Notification`1">
            <summary>
            Represents a notification to an observer.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.accept(SharpKit.Rx.IObserver{`0})">
            <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
            <param name="observer">The observer whose methods to invoke based on the notification kind.</param>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.accept(SharpKit.JavaScript.JsAction{`0},SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsError},SharpKit.JavaScript.JsAction)">
            <summary>
            Invokes the function corresponding to the notification.
            </summary>
            <param name="onNext">The function to invoke for an OnNext notification.</param>
            <param name="onError">The function to invoke for an OnError notification.</param>
            <param name="onCompleted">The function to invoke for an OnCompleted notification.</param>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.accept``1(SharpKit.JavaScript.JsFunc{`0,``0},SharpKit.JavaScript.JsFunc{SharpKit.JavaScript.JsError,``0},SharpKit.JavaScript.JsFunc{``0})">
            <summary>
            Invokes the function corresponding to the notification and returns the produced result.
            </summary>
            <param name="onNext">The function to invoke for an OnNext notification.</param>
            <param name="onError">The function to invoke for an OnError notification.</param>
            <param name="onCompleted">The function to invoke for an OnCompleted notification.</param>
            <returns>The result of calling the function or observer for the corresponding notification kind.</returns>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.equals(SharpKit.Rx.Notification{`0})">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if both objects are the same; false otherwise.</returns>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>true if both objects are the same; false otherwise.</returns>
        </member>
        <member name="M:SharpKit.Rx.Notification`1.toObservable(SharpKit.Rx.IScheduler)">
            <summary>
            Returns an observable sequence that exposes the notification's behavior.
            </summary>
            <param name="scheduler">Scheduler to send the notification on. If not specified, the immediate scheduler is used.</param>
            <returns>Observable sequence exposing the notification's behavior.</returns>
        </member>
        <member name="P:SharpKit.Rx.Notification`1.kind">
            <summary>
            Gets the kind of notification that is represented.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.Notification`1.hasValue">
            <summary>
            Returns a value that indicates whether the notification has a value.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.Notification`1.value">
            <summary>
            Returns the value of an OnNext notification.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.Notification`1.exception">
            <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Observer">
            <summary>
            Provides a set of static methods for creating observers.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Observer.create``1(SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsError},SharpKit.JavaScript.JsAction)">
            <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <param name="onError">Observer's OnError action implementation. If not specified, the error is rethrown.</param>
            <param name="onCompleted">Observer's OnCompleted action implementation. If not specified, the completion message is ignored.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observer.create``1(SharpKit.JavaScript.JsAction{``0},SharpKit.JavaScript.JsAction)">
            <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
            <param name="onNext">Observer's OnNext action implementation.</param>
            <param name="onCompleted">Observer's OnCompleted action implementation.</param>
            <returns>The observer object implemented using the given actions.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observer.toNotifier``1(SharpKit.Rx.IObserver{``0})">
            <summary>
            Creates a notification callback from an observer.
            </summary>
            <param name="observer">Observer instance.</param>
            <returns>The action that forwards its input notification to the underlying observer.</returns>
        </member>
        <member name="M:SharpKit.Rx.Observer.asObserver``1(SharpKit.Rx.IObserver{``0})">
            <summary>
            Hides the identity of an observer.
            </summary>
            <param name="observer">Observer instance.</param>
            <returns>An observer that hides the identity of the specified observer.</returns>
        </member>
        <member name="T:SharpKit.Rx.Scheduler">
            <summary>
            Provides a set of static methods for creating Schedulers.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.normalize(System.Int64)">
            <summary>
            Normalizes the given relative time span, i.e. negative time is rounded up to 0.
            </summary>
            <returns>Normalized relative time span.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.schedule(SharpKit.Rx.IScheduler,SharpKit.JavaScript.JsAction)">
            <summary>
            Schedules the specified action immediately.
            <para>E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(function () { alert('Hello!'); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="action">Action to be scheduled.</param>
            <returns>A disposable object that can be used to cancel the scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleWithState``1(SharpKit.Rx.IScheduler,``0,SharpKit.JavaScript.JsAction{``0})">
            <summary>
            Schedules the specified action immediately, supplying it the given state object.
            <para>E.g. var cancel = Rx.Scheduler.CurrentThread.schedule("Bart", function (name) { alert('Hello ' + name + '!'); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="state">State to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object.</param>
            <returns>A disposable object that can be used to cancel the scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleWithRelative(SharpKit.Rx.IScheduler,System.Int64,SharpKit.JavaScript.JsAction)">
            <summary>
            Schedules the specified action at the given relative due time.
            <para>E.g. var cancel = Rx.Scheduler.Timeout.schedule(1000 /* 1s */, function () { alert('Hello!'); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action.</param>
            <param name="action">Action to be scheduled.</param>
            <returns>A disposable object that can be used to cancel the scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleWithAbsolute(SharpKit.Rx.IScheduler,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction)">
            <summary>
            Schedules the specified action at the given absolute due time.
            <para>E.g. var cancel = Rx.Scheduler.Timeout.schedule(new Date(2012, 2, 11), function () { alert('Hello!'); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action.</param>
            <param name="action">Action to be scheduled.</param>
            <returns>A disposable object that can be used to cancel the scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleRecursive(SharpKit.Rx.IScheduler,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsAction})">
            <summary>
            Schedules the specified action recursively.
            <para>E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(function (self) { alert('Hello!'); self(); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleRecursiveWithRelative(SharpKit.Rx.IScheduler,System.Int64,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsAction{System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times.
            <para>E.g. var cancel = Rx.Scheduler.Timeout.schedule(1000 /* 1s */, function (self) { alert('Hello!'); self(1000 /* 1s */); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.Scheduler.scheduleRecursiveWithAbsolute(SharpKit.Rx.IScheduler,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsAction{SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times.
            <para>E.g. var cancel = Rx.Scheduler.Timeout.schedule(new DateTime(2011, 2, 11), function (self) { alert('Hello!'); self(new Date(new Date().getFullYear() + 1, 2, 11)); });</para>
            </summary>
            <param name="scheduler">Scheduler instance.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="P:SharpKit.Rx.Scheduler.now">
            <summary>
            Gets the current time.
            </summary>
            <returns>Current time.</returns>
        </member>
        <member name="P:SharpKit.Rx.Scheduler.Immediate">
            <summary>
            Scheduler that runs actions synchronously on the current thread. When using time-based operations, script execution may block, which is often undesirable.
            In such scenarios, use Rx.Scheduler.Timeout instead.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.Scheduler.CurrentThread">
            <summary>
            Scheduler that runs actions on the current thread using a trampoline. When using time-based operations, script execution may block, which is often undesirable.
            In such scenarios, use Rx.Schedule.Timeout instead.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.Scheduler.Timeout">
            <summary>
            Scheduler that runs actions using the setTimeout JavaScript function.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.ImmediateScheduler">
            <summary>
            Scheduler that runs actions synchronously on the current thread. When using time-based operations, script execution may block, which is often undesirable.
            In such scenarios, use Rx.Schedule.Timeout instead.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.ImmediateScheduler.scheduleRecursiveWithState``1(``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0}})">
            <summary>
            Schedules the specified action recursively, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(0, function (i, self) { alert('Hello ' + i + '!'); self(i + 1); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.ImmediateScheduler.scheduleRecursiveWithRelativeAndState``1(``0,System.Int64,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule(0, 1000 /* 1s */, function (i, self) { alert('Hello ' + i + '!'); self(i + 1, 1000 /* 1s */); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.ImmediateScheduler.scheduleRecursiveWithAbsoluteAndState``1(``0,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule("Bart", new DateTime(2011, 2, 11), function (name, self) { alert('Hello ' + name + '!'); self(name, new Date(new Date().getFullYear() + 1, 2, 11)); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="T:SharpKit.Rx.CurrentThreadScheduler">
            <summary>
            Scheduler that runs actions on the current thread using a trampoline. When using time-based operations, script execution may block, which is often undesirable.
            In such scenarios, use Rx.Schedule.Timeout instead.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.CurrentThreadScheduler.scheduleRecursiveWithState``1(``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0}})">
            <summary>
            Schedules the specified action recursively, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(0, function (i, self) { alert('Hello ' + i + '!'); self(i + 1); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.CurrentThreadScheduler.scheduleRecursiveWithRelativeAndState``1(``0,System.Int64,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule(0, 1000 /* 1s */, function (i, self) { alert('Hello ' + i + '!'); self(i + 1, 1000 /* 1s */); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.CurrentThreadScheduler.scheduleRecursiveWithAbsoluteAndState``1(``0,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule("Bart", new DateTime(2011, 2, 11), function (name, self) { alert('Hello ' + name + '!'); self(name, new Date(new Date().getFullYear() + 1, 2, 11)); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.CurrentThreadScheduler.ensureTrampoline(SharpKit.JavaScript.JsAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:SharpKit.Rx.CurrentThreadScheduler.ensureTrampoline(SharpKit.JavaScript.JsFunc{System.Object})">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:SharpKit.Rx.CurrentThreadScheduler.scheduleRequired">
            <summary>
            Gets a value indicating whether the caller must call a schedule method.
            </summary>
        </member>
        <member name="P:SharpKit.Rx.CurrentThreadScheduler.queue">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpKit.Rx.TimeoutScheduler">
            <summary>
            Scheduler that runs actions using the setTimeout JavaScript function.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.TimeoutScheduler.scheduleRecursiveWithState``1(``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0}})">
            <summary>
            Schedules the specified action recursively, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(0, function (i, self) { alert('Hello ' + i + '!'); self(i + 1); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.TimeoutScheduler.scheduleRecursiveWithRelativeAndState``1(``0,System.Int64,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule(0, 1000 /* 1s */, function (i, self) { alert('Hello ' + i + '!'); self(i + 1, 1000 /* 1s */); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.TimeoutScheduler.scheduleRecursiveWithAbsoluteAndState``1(``0,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule("Bart", new DateTime(2011, 2, 11), function (name, self) { alert('Hello ' + name + '!'); self(name, new Date(new Date().getFullYear() + 1, 2, 11)); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="T:SharpKit.Rx.VirtualTimeScheduler`2">
            <summary>
            Represents the base class for virtual time schedulers using a priority queue for scheduled items.
            </summary>
            <typeparam name="TAbsolute">The absolute time argument type.</typeparam>
            <typeparam name="TRelative">The relative time argument type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.scheduleRecursiveWithState``1(``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0}})">
            <summary>
            Schedules the specified action recursively, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.CurrentThread.schedule(0, function (i, self) { alert('Hello ' + i + '!'); self(i + 1); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.scheduleRecursiveWithRelativeAndState``1(``0,System.Int64,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,System.Int64}})">
            <summary>
            Schedules the specified action recursively using relative due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule(0, 1000 /* 1s */, function (i, self) { alert('Hello ' + i + '!'); self(i + 1, 1000 /* 1s */); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Relative time (specified in milliseconds) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.scheduleRecursiveWithAbsoluteAndState``1(``0,SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsAction{``0,SharpKit.JavaScript.JsDate}})">
            <summary>
            Schedules the specified action recursively using absolute due times, supplying it the given initial state object.
            &#10;
            &#10;E.g. var cancel = Rx.Scheduler.Timeout.schedule("Bart", new DateTime(2011, 2, 11), function (name, self) { alert('Hello ' + name + '!'); self(name, new Date(new Date().getFullYear() + 1, 2, 11)); });
            </summary>
            <param name="state">Initial state to pass to the action.</param>
            <param name="dueTime">Absolute time (specified as a Date object) at which to schedule the given action the first time.</param>
            <param name="action">Action to be scheduled. The first parameter passed to the action corresponds to the given state object. The second parameter passed to the action is a function that can be invoked to make a recursive call.</param>
            <returns>A disposable object that can be used to cancel the recursive scheduled action.</returns>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.#ctor(`0,SharpKit.JavaScript.JsFunc{`0,`0,System.Int32})">
            <summary>
            Creates a new virtual time scheduler.
            </summary>
            <param name="initialClock">Initial value for the clock.</param>
            <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.scheduleRelative``1(``0,`1,SharpKit.JavaScript.JsAction{``0})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.scheduleAbsolute``1(``0,`0,SharpKit.JavaScript.JsAction{``0})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.start">
            <summary>
            Starts the virtual time scheduler.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.stop">
            <summary>
            Stops the virtual time scheduler.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.advanceTo(`0)">
            <summary>
            Advances the scheduler's clock to the specified time, running all work till that point.
            </summary>
            <param name="time">Absolute time to advance the scheduler's clock to.</param>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.advanceBy(`1)">
            <summary>
            Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
            </summary>
            <param name="time">Relative time to advance the scheduler's clock by.</param>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler`2.getNext">
            <summary>
            Gets the next scheduled item to be executed.
            </summary>
            <returns>The next scheduled item.</returns>
        </member>
        <member name="T:SharpKit.Rx.VirtualTimeScheduler">
            <summary>
            Represents virtual time schedulers using a priority queue for scheduled items.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.VirtualTimeScheduler.#ctor(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsFunc{SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsDate,System.Int32})">
            <summary>
            Creates a new virtual time scheduler.
            </summary>
            <param name="initialClock">Initial value for the clock.</param>
            <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
        </member>
        <member name="T:SharpKit.Rx.ConnectableObservable`1">
            <summary>
            Implementation of the <see cref="T:IConnectableObservable[T]"/>
            </summary>
            <typeparam name="T">The type of element.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.ConnectableObservable`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.ConnectableObservable`1.connect">
            <summary>
            Connects the observable to its source.
            </summary>
            <returns>Disposable used to disconnect the observable sequence from its source.</returns>
        </member>
        <member name="T:SharpKit.Rx.Subject">
            <summary>
            Provides a set of static methods for creating observers.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Subject.create``2(SharpKit.Rx.IObserver{``0},SharpKit.Rx.IObservable{``1})">
            <summary>
            Creates a subject from the specified observer and observable.
            </summary>
            <param name="observer">The observer used to publish messages to the subject.</param>
            <param name="observable">The observable used to subscribe to messages sent from the subject.</param>
            <returns>Subject implemented using the given observer and observable.</returns>
        </member>
        <member name="T:SharpKit.Rx.Subject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.Subject`1.onNext(`0)">
            <summary>
            Notifies the observer by supplying a new sequence element.
            </summary>
            <param name="value">New sequence element.</param>
        </member>
        <member name="M:SharpKit.Rx.Subject`1.onError(SharpKit.JavaScript.JsError)">
            <summary>
            Notifies the observer about an error that occurred in the sequence.
            </summary>
            <param name="exception">The error object.</param>
        </member>
        <member name="M:SharpKit.Rx.Subject`1.onCompleted">
            <summary>
            Notifies the observer of the termination of the sequence.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Subject`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.Subject`1.dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.AsyncSubject`1">
            <summary>
            Represents a subject that can only receive one value and that value is cached for all future observations.
            Represents the result of an asynchronous operation.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.AsyncSubject`1.onNext(`0)">
            <summary>
            Notifies the observer by supplying a new sequence element.
            </summary>
            <param name="value">New sequence element.</param>
        </member>
        <member name="M:SharpKit.Rx.AsyncSubject`1.onError(SharpKit.JavaScript.JsError)">
            <summary>
            Notifies the observer about an error that occurred in the sequence.
            </summary>
            <param name="exception">The error object.</param>
        </member>
        <member name="M:SharpKit.Rx.AsyncSubject`1.onCompleted">
            <summary>
            Notifies the observer of the termination of the sequence.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.AsyncSubject`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.AsyncSubject`1.dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.BehaviorSubject`1">
            <summary>
            Represents a value that changes over time.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.#ctor(`0)">
            <summary>
            Creates a subject that caches its last value and starts with the specified value.
            </summary>
            <param name="value">Initial value sent to observers when no other value has been received by the subject yet.</param>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.onNext(`0)">
            <summary>
            Notifies the observer by supplying a new sequence element.
            </summary>
            <param name="value">New sequence element.</param>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.onError(SharpKit.JavaScript.JsError)">
            <summary>
            Notifies the observer about an error that occurred in the sequence.
            </summary>
            <param name="exception">The error object.</param>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.onCompleted">
            <summary>
            Notifies the observer of the termination of the sequence.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.BehaviorSubject`1.dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.ReplaySubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.#ctor(System.Int32,System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Creates a new replay subject with the specified buffer size, window and scheduler.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer. If not specified, the buffer size is infinite.</param>
            <param name="window">Maximum time length of the replay buffer. If not specified, the window length is infinite.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.#ctor(System.Int32,SharpKit.Rx.IScheduler)">
            <summary>
            Creates a new replay subject with the specified buffer size and scheduler. Window length is infinite.
            </summary>
            <param name="bufferSize">Maximum element count of the replay buffer. If not specified, the buffer size is infinite.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.#ctor(System.Int64,SharpKit.Rx.IScheduler)">
            <summary>
            Creates a new replay subject with the infinite buffer size, window and scheduler.
            </summary>
            <param name="window">Maximum time length of the replay buffer. If not specified, the window length is infinite.</param>
            <param name="scheduler">Scheduler where connected observers will be invoked on. If not specified, the current thread scheduler is used.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.#ctor(SharpKit.Rx.IScheduler)">
            <summary>
            Creates a new replay subject with the specified scheduler. The buffer size and window is infinite.
            </summary>
            <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.onNext(`0)">
            <summary>
            Notifies the observer by supplying a new sequence element.
            </summary>
            <param name="value">New sequence element.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.onError(SharpKit.JavaScript.JsError)">
            <summary>
            Notifies the observer about an error that occurred in the sequence.
            </summary>
            <param name="exception">The error object.</param>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.onCompleted">
            <summary>
            Notifies the observer of the termination of the sequence.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.subscribe(SharpKit.Rx.IObserver{`0})">
            <summary>
            Subscribes to the observable sequence by specifying an observer.
            </summary>
            <param name="observer">Observer object to receive notifications on.</param>
            <return>Disposable object used to unsubscribe from the observable sequence.</return>
        </member>
        <member name="M:SharpKit.Rx.ReplaySubject`1.dispose">
            <summary>
            Unsubscribe all observers and release resources.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Pattern">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="T:SharpKit.Rx.Pattern`2">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Pattern`2.and``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
            </summary>
            <param name="other">Observable sequence to match in addition to the current pattern.</param>
            <returns>Pattern object that matches when all observable sequences in the pattern have an available value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Pattern`2.then``1(SharpKit.JavaScript.JsFunc{`0,`1,``0})">
            <summary>
            Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
            </summary>
            <param name="selector">Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="T:SharpKit.Rx.Pattern`3">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Pattern`3.and``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
            </summary>
            <param name="other">Observable sequence to match in addition to the current pattern.</param>
            <returns>Pattern object that matches when all observable sequences in the pattern have an available value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Pattern`3.then``1(SharpKit.JavaScript.JsFunc{`0,`1,`2,``0})">
            <summary>
            Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
            </summary>
            <param name="selector">Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="T:SharpKit.Rx.Pattern`4">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Pattern`4.and``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
            </summary>
            <param name="other">Observable sequence to match in addition to the current pattern.</param>
            <returns>Pattern object that matches when all observable sequences in the pattern have an available value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Pattern`4.then``1(SharpKit.JavaScript.JsFunc{`0,`1,`2,`3,``0})">
            <summary>
            Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
            </summary>
            <param name="selector">Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="T:SharpKit.Rx.Pattern`5">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Pattern`5.and``1(SharpKit.Rx.IObservable{``0})">
            <summary>
            Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
            </summary>
            <param name="other">Observable sequence to match in addition to the current pattern.</param>
            <returns>Pattern object that matches when all observable sequences in the pattern have an available value.</returns>
        </member>
        <member name="M:SharpKit.Rx.Pattern`5.then``1(SharpKit.JavaScript.JsFunc{`0,`1,`2,`3,`4,``0})">
            <summary>
            Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
            </summary>
            <param name="selector">Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="T:SharpKit.Rx.Pattern`6">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:SharpKit.Rx.Pattern`6.then``1(SharpKit.JavaScript.JsFunc{`0,`1,`2,`3,`4,`5,``0})">
            <summary>
            Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
            </summary>
            <param name="selector">Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.</param>
            <returns>Plan that produces the projected values, to be fed (with other plans) to the when operator.</returns>
        </member>
        <member name="T:SharpKit.Rx.Plan`1">
            <summary>
            Represents an execution plan for join patterns.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            Microsoft's Reactive Extensions for JavaScript
            </summary>
        </member>
    </members>
</doc>
