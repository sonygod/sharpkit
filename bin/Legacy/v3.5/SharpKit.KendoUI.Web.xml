<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.KendoUI.Web</name>
    </assembly>
    <members>
        <member name="M:SharpKit.KendoUI.Web.Ui.plugin(SharpKit.KendoUI.Web.Widget,System.Object,SharpKit.JavaScript.JsString)">
            <summary>
            Helper method for writing new widgets.
            Exposes a jQuery plug-in that will handle the widget creation and attach its client-side object in the appropriate data-* attribute.
            </summary>
            <param name="widget">The widget function.</param>
            <param name="register">The object where the reference to the widget is recorded.</param>
            <param name="prefix">The plugin function prefix, e.g. "Mobile" will register "kendoMobileFoo".</param>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Ui.progress(SharpKit.jQuery.jQuery,System.Boolean)">
            <summary>
            Shows an overlay with a loading message, indicating that an action is in progress.
            </summary>
            <param name="container">The container that will hold the overlay</param>
            <param name="toggle">Whether the overlay should be shown or hidden</param>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.close">
             <summary>
             Closes the drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
            autocomplete.close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.dataItem(SharpKit.JavaScript.JsNumber)">
             <summary>
             Returns the raw data record at the specified index
             </summary>
             <param name="index">The zero-based index of the data record</param>
             <returns>Object The raw data record. Returns undefined if no data.</returns>
            <example>
            usage
            <code>
            var autocomplete = $("#autocomplete").data("kendoAutoComplete");
             // get the dataItem corresponding to the passed index.
            var dataItem = autocomplete.dataItem(1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.enable(System.Boolean)">
             <summary>
             Enable/Disable the autocomplete widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // disables the autocomplete
            autocomplete.enable(false);
             // enables the autocomplete
            autocomplete.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.refresh">
             <summary>
             Re-render the items in drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a referenence to the Kendo UI AutoComplete
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // re-render the items in drop-down list.
            autocomplete.refresh();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.search(SharpKit.JavaScript.JsString)">
             <summary>
             Filters dataSource using the provided parameter and rebinds drop-down list.
             </summary>
             <param name="word">The filter value.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // Searches for item which has "Inception" in the name.
            autocomplete.search("Inception");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.select(SharpKit.jQuery.jQuery)">
             <summary>
             Selects drop-down list item and sets the text of the autocomplete.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // selects by jQuery object
            autocomplete.select(autocomplete.ul.children().eq(0));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.suggest(SharpKit.JavaScript.JsString)">
             <summary>
             Forces a suggestion onto the text of the AutoComplete.
             </summary>
             <param name="value">Characters to force a suggestion.</param>
            <example>
            usage
            <code>
             // note that this suggest is not the same as the configuration method
             // suggest which enables/disables auto suggesting for the AutoComplete
             //
             // get a referenence to the Kendo UI AutoComplete
            var autoComplete = $("#autoComplete").data("kendoAutoComplete");
             // force a suggestion to the item with the name "Inception"
            autoComplete.suggest("Inception");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.AutoComplete.value(SharpKit.JavaScript.JsString)">
            <summary>
            Gets/Sets the value of the autocomplete.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The value of the autocomplete.</returns>
        </member>
        <member name="E:SharpKit.KendoUI.Web.AutoComplete.change">
             <summary>
             Fires when the value has been changed.
             </summary>
            <example>
            usage
            <code>
            var autoComplete = $("#autoComplete").data("kendoAutoComplete");
            $("#autoComplete").data("kendoAutoComplete").bind("change", function(e) {
                // handle event
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.AutoComplete.closeEvent">
             <summary>
             Fires when the drop-down list is closed
             </summary>
            <example>
            usage
            <code>
            $("#autoComplete").kendoAutoComplete({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.AutoComplete.open">
             <summary>
             Fires when the drop-down list is opened
             </summary>
            <example>
            usage
            <code>
            $("#autoComplete").kendoAutoComplete({
                open: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.AutoComplete.selectEvent">
             <summary>
             Triggered when a Li element is selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
            var onSelect = function(e) {
                // access the selected item via e.item (jQuery object)
            };
            
             // attach select event handler during initialization
            var autocomplete = $("#autocomplete").kendoAutoComplete({
                select: onSelect
            });
            
             // detach select event handler via unbind()
            autocomplete.data("kendoAutoComplete").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.animation">
            <summary>
            Animations to be used for opening/closing the popup. Setting to false will turn of the animation.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.dataSource">
             <summary>
             The set of data that the AutoComplete will be bound to. Either a local JavaScript object, or an instance of the Kendo UI DataSource.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.dataSourceObject">
             <summary>
             The set of data that the AutoComplete will be bound to. Either a local JavaScript object, or an instance of the Kendo UI DataSource.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.dataTextField">
             <summary>
             (default: null) Sets the field of the data item that provides the text content of the list items.
             </summary>
            <example>
            usage
            <code>
            var items = [ { ID: 1, Name: "Item 1" }, { ID: 2, Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({
                dataSource: items,
                dataTextField: "Name"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.delay">
             <summary>
            (default: 200) Specifies the delay in ms after which the AutoComplete will start filtering the dataSource.
             </summary>
            <example>
            usage
            <code>
             // set the delay to 500 milliseconds
            $("#autoComplete").kendoAutoComplete({
                delay: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.enable">
             <summary>
             (default: true) Controls whether the AutoComplete should be initially enabled.
             </summary>
            <example>
            usage
            <code>
             // disable the autocomplete when it is created (enabled by default)
            $("#autoComplete").kendoAutoComplete({
                enable: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.filter">
             <summary>
             (default: "startswith") Defines the type of filtration. This value is handled by the remote data source.
             </summary>
            <example>
            usage
            <code>
             // send a filter value of 'contains' to the server
            $("#autoComplete").kendoAutoComplete({
                filter: 'contains'
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.height">
             <summary>
             (default: 200) Sets the height of the drop-down list in pixels.
             </summary>
            <example>
            usage
            <code>
             // set the height of the drop-down list that appears when the autocomplete is activated to 500px
            $("#autoComplete").kendoAutoComplete({
                height: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.highlightFirst">
             <summary>
             (default: true) Controls whether the first item will be automatically highlighted.
             </summary>
            <example>
            usage
            <code>
            $("#autocomplete").kendoAutoComplete({
                highlightFirst: false //no of the suggested items will be highlighted
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.ignoreCase">
             <summary>
             (default: true) Defines whether the filtration should be case sensitive.
             </summary>
            <example>
            usage
            <code>
            $("#autoComplete").kendoAutoComplete({
                filter: 'contains',
                ignoreCase: false //now filtration will be case sensitive
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.minLength">
             <summary>
             (default: 1) Specifies the minimum number of characters that should be typed before the AutoComplete queries the dataSource.
             </summary>
            <example>
            usage
            <code>
             // wait until the user types 3 characters before querying the server
            $("#autoComplete").kendoAutoComplete({
                minLength: 3
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.placeholder">
             <summary>
             (default: "")A string that appears in the textbox when it has no value.
             </summary>
            <example>
            usage
            <code>
             //autocomplete initialization
            &lt;script>
                $("#autocomplete").kendoAutoComplete({
                    dataSource: dataSource,
                    placeholder: "Enter value..."
                });
            &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.separator">
             <summary>
             (default: "")Sets the separator for completion. Empty by default, allowing for only one completion.
             </summary>
            <example>
            usage
            <code>
             // set completion separator to ,
            $("#autoComplete").kendoAutoComplete({
                separator: ", "
            });
            </code>
            </example> 
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.suggest">
             <summary>
             (default: false)Controls whether the AutoComplete should automatically auto-type the rest of text.
             </summary>
            <example>
            usage
            <code>
             // turn on auto-typing (off by default)
            $("#autoComplete").kendoAutoComplete({
                suggest: true
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.template">
             <summary>
             Template to be used for rendering the items in the list.
             </summary>
            <example>
            usage
            <code>
             //template
            &lt;script id="template" type="text/x-kendo-tmpl">
                  # if (data.BoxArt.SmallUrl) { #
                      &lt;img src="${ data.BoxArt.SmallUrl }" alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } else { #
                      &lt;img alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } #
             &lt;/script>
             //autocomplete initialization
             &lt;script>
                 $("#autocomplete").kendoAutoComplete({
                     dataSource: dataSource,
                     dataTextField: "Name",
                     template: kendo.template($("#template").html())
                 });
            &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.change">
            <summary>
            Fires when the value has been changed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.select">
            <summary>
            Triggered when a Li element is selected.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.close">
            <summary>
            Fires when the drop-down list is closed
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AutoCompleteConfiguration.open">
            <summary>
            Fires when the drop-down list is opened
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.max(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the max value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.max(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the max value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.max">
             <summary>
             Gets the max value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.min(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the min value of the calendar.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            calendar.min(new Date(1900, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.min(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the min value of the calendar.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.min">
             <summary>
             Gets the min value of the calendar.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.navigate(SharpKit.JavaScript.JsDate,SharpKit.JavaScript.JsString)">
             <summary>
             Navigates to view
             </summary>
             <param name="value">Desired date</param>
             <param name="view">Desired view</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // navigate to the desired date
            calendar.navigate(value, view);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.navigateDown(SharpKit.JavaScript.JsDate)">
             <summary>
             Navigates to the lower view
             </summary>
             <param name="value">Desired date</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // navigate down
            calendar.navigateDown(value);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.navigateToFuture">
             <summary>
             Navigates to the future
             </summary>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // navigate to future
            calendar.navigateToFuture();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.navigateToPast">
             <summary>
             Navigates to the past
             </summary>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // navigate to past
            calendar.navigateToPast();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.navigateUp">
             <summary>
             Navigates to the upper view
             </summary>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // navigate up
            calendar.navigateUp();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.value(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Calendar.value">
             <summary>
             Gets the value of the calendar.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the value of the calendar.
            var value = calendar.value();
             // set the value of the calendar.
            calendar.value(new Date());
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Calendar.change">
             <summary>
             Fires when the selected date is changed
             </summary>
            <example>
            usage
            <code>
             // get a reference to the Kendo UI calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // bind to the change event
            calendar.bind("change", function(e) {
                 // handle event
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Calendar.navigateEvent">
             <summary>
             Fires when navigate
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                navigate: function(e) {
                     // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.culture">
             <summary>
             (default: en-US) Specifies the culture info used by the widget.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.dates">
             <summary>
             Specifies a list of dates, which will be passed to the month template.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                dates: [new Date(2000, 10, 10, 10, 0, 0), new Date(2000, 10, 10, 30, 0)] //can manipulate month template depending on this array.
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.depth">
             <summary>
             Specifies the navigation depth.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                depth: "year"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.footer">
             <summary>
             Can be boolean or string. Specifies the content of the footer. If false, the footer will not be rendered.
             </summary>
            <example>
            usage
            <code>
             // change the footer text from the default current date
            $("#calendar").kendoCalendar({
                footer = "My Custom Footer"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.format">
             <summary>
             (default: MM/dd/yyyy) Specifies the format, which is used to parse value set with value() method.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                format: "yyyy/MM/dd"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.max">
             <summary>
             (default: Date(2099, 11, 31)) Specifies the maximum date, which the calendar can show.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                max = new Date(2013, 0, 1);
            });
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.CalendarConfiguration.min" -->
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.month">
            <summary>
            Templates for the cells rendered in the "month" view.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.start">
             <summary>
             (default: month) Specifies the start view.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                start: "year"
            });
            </code>
            </example>\
        </member>
        <member name="P:SharpKit.KendoUI.Web.CalendarConfiguration.value">
             <summary>
             (default: null) Specifies the selected date.
             </summary>
            <example>
            usage
            <code>
             // set the selected date to Jan 1st. 2012
            $("#calendar").kendoCalendar({
                value: new Date(2012, 0, 1)
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MonthConfiguration.content">
            <summary>
            Template to be used for rendering the cells in the "month" view, which are in range.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MonthConfiguration.empty">
            <summary>
            Template to be used for rendering the cells in the "month" view, which are not in the min/max range.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.close">
             <summary>
             Closes the drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
            combobox.close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.dataItem(SharpKit.JavaScript.JsNumber)">
             <summary>
             Returns the raw data record at the specified index. If the index is not specified, the selected index will be used.
             </summary>
             <param name="index">The zero-based index of the data record</param>
             <returns>Object The raw data record. Returns undefined if no data.</returns>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the dataItem corresponding to the selectedIndex.
             var dataItem = combobox.dataItem();
             // get the dataItem corresponding to the passed index.
             var dataItem = combobox.dataItem(1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.enable(System.Boolean)">
             <summary>
             Enables/disables the combobox widget
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.enable">
             <summary>
             Enables/disables the combobox widget
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.open">
             <summary>
             Opens the drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
            combobox.open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.refresh">
             <summary>
             Re-render the items in drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a referenence to the Kendo UI ComboBox
            var combobox = $("#combobox").data("kendoComboBox");
             // re-render the items of the drop-down list.
            combobox.refresh();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.search(SharpKit.JavaScript.JsString)">
             <summary>
             Filters dataSource using the provided parameter and rebinds drop-down list.
             </summary>
             <param name="word">The filter value.</param>
            <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // Searches for item which has "In" in the name.
             combobox.search("In");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.select(SharpKit.jQuery.jQuery)">
             <summary>
             Selects drop-down list item and sets the value and the text of the combobox.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
            <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.select(SharpKit.JavaScript.JsNumber)">
             <summary>
             Selects drop-down list item and sets the value and the text of the combobox.
             </summary>
             <param name="li">The LI element.</param>
            <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.select(SharpKit.JavaScript.JsString)">
             <summary>
             Selects drop-down list item and sets the value and the text of the combobox.
             </summary>
             <param name="li">The LI element.</param>
            <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.suggest(SharpKit.JavaScript.JsString)">
             <summary>
             Forces a suggestion onto the text of the ComboBox.
             </summary>
             <param name="value">Characters to force a suggestion.</param>
            <example>
            usage
            <code>
             // note that this suggest is not the same as the configuration method
             // suggest which enables/disables auto suggesting for the ComboBox
             //
             // get a referenence to the Kendo UI ComboBox
             var combobox = $("#combobox").data("kendoComboBox");
             // force a suggestion to the item with the name "Inception"
             combobox.suggest("Inception");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.text(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the text of the ComboBox.
             </summary>
             <param name="text">The text to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the text of the combobox.
             var text = combobox.text();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.text">
             <summary>
             Gets the text of the ComboBox.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the text of the combobox.
             var text = combobox.text();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.toggle(System.Boolean)">
             <summary>
             Toggles the drop-down list between opened and closed state.
             </summary>
             <param name="toggle">Defines the whether to open/close the drop-down list.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // toggles the open state of the drop-down list.
             combobox.toggle();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the combobox. If the value is undefined, text of the data item will be used.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ComboBox.value">
             <summary>
             Gets the value of the combobox. If the value is undefined, text of the data item will be used.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ComboBox.change">
             <summary>
             Fires when the value has been changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ComboBox.closeEvent">
             <summary>
             Fires when the drop-down list is closed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ComboBox.openEvent">
             <summary>
             Fires when the drop-down list is opened
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ComboBox.selectEvent">
             <summary>
             Triggered when a Li element is selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
             var onSelect = function(e) {
                 // access the selected item via e.item (jQuery object)
             };
             
             // attach select event handler during initialization
             var combobox = $("#combobox").kendoComboBox({
                 select: onSelect
             });
             
             // detach select event handler via unbind()
             combobox.data("kendoComboBox").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.animation">
             <summary>
             Animations to be used for opening/closing the popup. Setting to false will turn off the animation.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                animation: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.autoBind">
             <summary>
             Controls whether to bind the widget to the DataSource on initialization.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                autoBind: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.cascadeFrom">
             <summary>
             Use it to set the Id of the parent DropDownList.
             </summary>
            <example>
            usage
            <code>
            $("#dropdownlist1").kendoDropDownList();
            $("#dropdownlist2").kendoDropDownList({
                cascadeFrom: "dropdownlist1"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.dataSource">
             <summary>
             A local JavaScript object or instance of DataSource or the data that the ComboBox will be bound to.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: items
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.dataSourceObject">
             <summary>
             A local JavaScript object or instance of DataSource or the data that the ComboBox will be bound to.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: items
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.dataTextField">
             <summary>
             (default: "") Sets the field of the data item that provides the text content of the list items.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                dataTextField: "Name",
                dataValueField: "ID"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.dataValueField">
             <summary>
             (default: "") Sets the field of the data item that provides the value content of the list items.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                dataTextField: "Name",
                dataValueField: "ID"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.delay">
             <summary>
             (default: 200) Specifies the delay in ms after which the ComboBox will start filtering dataSource.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                delay: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.enable">
             <summary>
             (default: true) Controls whether the ComboBox should be initially enabled.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                enable: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.filter">
             <summary>
             (default: "none") Defines the type of filtration. If "none" the ComboBox will not filter the items.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                filter: "startswith"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.height">
             <summary>
             (default: 200) Define the height of the drop-down list in pixels.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                height: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.highlightFirst">
             <summary>
             (default: true) Controls whether the first item will be automatically highlighted.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                highLightFirst: true
            });
            </code>
            </example>   
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.ignoreCase">
             <summary>
             (default: true) Defines whether the filtration should be case sensitive.
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                filter: 'contains',
                ignoreCase: false //now filtration will be case sensitive
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.index">
             <summary>
             (default: -1) Defines the initial selected item.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataSource: items,
                index: 1 // 0 based from the start of the collection of objects. this selects "Item 2".
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.minLength">
             <summary>
             (default: 1) Specifies the minimum characters that should be typed before the ComboBox activates
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                minLength: 3
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.placeholder">
             <summary>
             (default: "") A string that appears in the textbox when the combobox has no value.
             </summary>
            <example>
            usage
            <code>
             //combobox initialization
            &lt;script>
                $("#combobox").kendoComboBox({
                    dataSource: dataSource,
                    placeholder: "Select..."
                });
            &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.suggest">
             <summary>
             (default: false) Controls whether the ComboBox should automatically auto-type the rest of text.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                suggest: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.template">
             <summary>
             Template to be used for rendering the items in the list.
             </summary>
            <example>
            usage
            <code>
             //template
            &lt;script id="template" type="text/x-kendo-tmpl">
                  # if (data.BoxArt.SmallUrl) { #
                      &lt;img src="${ data.BoxArt.SmallUrl }" alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } else { #
                      &lt;img alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } #
             &lt;/script>
            
             //combobox initialization
             &lt;script>
                 $("#combobox").kendoComboBox({
                     dataSource: dataSource,
                     dataTextField: "Name",
                     dataValueField: "Id",
                     template: kendo.template($("#template").html())
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.text">
             <summary>
             (default: "") Define the text of the widget, when the autoBind is set to false.
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                 autoBind: false,
                 text: "Chai"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.value">
             <summary>
             (default: "") Define the value of the widget
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                 dataSource: ["Item1", "Item2"],
                 value: "Item1"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ComboBoxConfiguration.change">
             <summary>
             Fires when the value has been changed.
             </summary>
             <example>
             <code>
             $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
             });
             </code>
             To set after initialization
             <code>
             // get a reference to instance of the Kendo UI ComboBox
             var combobox = $("#comboBox").data("kendoComboBox");
             // bind to the change event
             combobox.bind("change", function(e) {
                // handle event
            });
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.ComboBoxConfiguration.select" -->
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.ComboBoxConfiguration.close" -->
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.ComboBoxConfiguration.open" -->
        <member name="P:SharpKit.KendoUI.Web.AnimationConfiguration.close">
             <summary>
             Animation to be used for closing of the popup
             </summary>
            <example>
            usage
            <code>
             //combobox initialization
            &lt;script>
                $("#combobox").kendoComboBox({
                    dataSource: dataSource,
                    animation: {
                       close: {
                           effects: "fadeOut",
                           duration: 300,
                           hide: true
                           show: false
                       }
                    }
                });
            &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.AnimationConfiguration.open">
             <summary>
             Animation to be used for opening of the popup.
             </summary>
            <example>
            usage
            <code>
             //combobox initialization
            &lt;script>
                 $("#combobox").kendoComboBox({
                     dataSource: dataSource,
                     animation: {
                        open: {
                            effects: "fadeIn",
                            duration: 300,
                            show: true
                        }
                     }
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.close">
             <summary>
             Closes the calendar.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
            autocomplete.close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.enable(System.Boolean)">
             <summary>
             Enable/Disable the datePicker widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // disables the autocomplete
            autocomplete.enable(false);
             // enables the autocomplete
            autocomplete.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.enable">
             <summary>
             Enable/Disable the datePicker widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // disables the autocomplete
            autocomplete.enable(false);
             // enables the autocomplete
            autocomplete.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.max(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the max value of the datePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.max(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the max value of the datePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.max">
             <summary>
             Gets the max value of the datePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.min(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the min value of the datePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            calendar.min(new Date(1900, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.min(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the min value of the datePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.min">
             <summary>
             Gets the min value of the datePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.open">
             <summary>
             Opens the calendar.
             </summary>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
            combobox.open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the datePicker.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DatePicker.value">
             <summary>
             Gets the value of the datePicker.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DatePicker.change">
             <summary>
             Fires when the selected date is changed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DatePicker.closeEvent">
             <summary>
             Fires when the calendar is closed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DatePicker.openEvent">
             <summary>
             Fires when the calendar is opened
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.animation">
             <summary>
             Animations to be used for opening/closing the popup. Setting to false will turn off the animation.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                animation: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.change">
            <summary>
            Fires when the selected date is changed.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDatePicker({
                change: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.open">
            <summary>
            Fires when the selected date is opened.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDatePicker({
                open: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.close">
            <summary>
            Fires when the selected date is closed.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDatePicker({
                close: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.culture">
             <summary>
             (default: en-US) Specifies the culture info used by the widget.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.depth">
             <summary>
             Specifies the navigation depth.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                start: "decade",
                depth: "year" // the datePicker will only go to the year level
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.footer">
             <summary>
             Template to be used for rendering the footer of the calendar.
             </summary>
            <example>
            usage
            <code>
             // DatePicker initialization
             &lt;script>
                 $("#datePicker").kendoDatePicker({
                     footer: "Today - #=kendo.toString(data, 'd') #"
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.format">
             <summary>
             (default: MM/dd/yyyy) Specifies the format, which is used to parse value set with value() method.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                format: "yyyy/MM/dd"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.max">
             <summary>
             (default: Date(2099, 11, 31)) Specifies the maximum date, which the calendar can show.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                max = new Date(2013, 0, 1);
            });
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.DatePickerConfiguration.min" -->
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.month">
            <summary>
            Templates for the cells rendered in the "month" view.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.parseFormats">
             <summary>
             Specifies the formats, which are used to parse the value set with value() method or by direct input.
             If not set the value of the format will be used. Note that value of the format option is always used.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                format: "yyyy/MM/dd",
                parseFormats: ["MMMM yyyy"] //format also will be added to parseFormats
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.start">
             <summary>
             (default: month) Specifies the start view.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                start: "decade" // the datePicker will start with a decade display
            });
            </code>
            </example> 
        </member>
        <member name="P:SharpKit.KendoUI.Web.DatePickerConfiguration.value">
             <summary>
             (default: null) Specifies the selected date.
             </summary>
            <example>
            usage
            <code>
             // set the selected value to January 1st, 2011
            $("#datePicker").kendoDatePicker({
             value: new Date(2011, 0, 1)
            });
            </code>
            </example>
        </member>
        <member name="F:SharpKit.KendoUI.Web.StartDepthOptions.month">
            <summary>
            shows the days of the month
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.StartDepthOptions.year">
            <summary>
            shows the months of the year
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.StartDepthOptions.decade">
            <summary>
            shows the years of the decade
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.StartDepthOptions.century">
            <summary>
            shows the decades from the centery
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.close">
             <summary>
             Closes the calendar or the time drop-down list.
             </summary>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.close(SharpKit.KendoUI.Web.ViewOptions)">
             <summary>
             Closes the calendar or the time drop-down list.
             </summary>
             <param name="view">The view of the DateTimePicker, expressed as a string. Available views are "time" and "date".</param>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").close("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.close(SharpKit.JavaScript.JsString)">
             <summary>
             Closes the calendar or the time drop-down list.
             </summary>
             <param name="view">The view of the DateTimePicker, expressed as a string. Available views are "time" and "date".</param>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").close("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.enable(System.Boolean)">
             <summary>
             Enables or disables a DateTimePicker.
             </summary>
             <param name="enable">Enables (true or undefined) or disables (false) a DateTimePicker.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // disables the autocomplete
            autocomplete.enable(false);
             // enables the autocomplete
            autocomplete.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.enable">
             <summary>
             Enables or disables a DateTimePicker.
             </summary>
             <param name="enable">Enables (true or undefined) or disables (false) a DateTimePicker.</param>
            <example>
            usage
            <code>
             // get a reference to the autocomplete widget
            var autocomplete = $("autocomplete").data("kendoAutoComplete");
             // disables the autocomplete
            autocomplete.enable(false);
             // enables the autocomplete
            autocomplete.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.max(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the max value of the DateTimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.max(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the max value of the DateTimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.max">
             <summary>
             Gets the max value of the DateTimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.min(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the min value of the DateTimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            calendar.min(new Date(1900, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.min(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the min value of the DateTimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.min">
             <summary>
             Gets the min value of the DateTimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.open">
             <summary>
             Opens the calendar or the time drop-down list.
             </summary>
            <example>
            usage
            <code>
             $("dateTimePicker").data("kendoDateTimePicker").open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.open(SharpKit.KendoUI.Web.ViewOptions)">
             <summary>
             Opens the calendar or the time drop-down list.
             </summary>
             <param name="view">The view of the DateTimePicker, expressed as a string. Available views are "time" and "date"</param>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").open("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.open(SharpKit.JavaScript.JsString)">
             <summary>
             Opens the calendar or the time drop-down list.
             </summary>
             <param name="view">The view of the DateTimePicker, expressed as a string. Available views are "time" and "date"</param>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").open("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.toggle">
             <summary>
             Toggles the calendar or the time drop-down list.
             </summary>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").toggle("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.toggle(SharpKit.KendoUI.Web.ViewOptions)">
             <summary>
             Toggles the calendar or the time drop-down list.
             </summary>
             <param name="view">The view of the DateTimePicker, expressed as a string. Available views are "time" and "date".</param>
            <example>
            usage
            <code>
            $("dateTimePicker").data("kendoDateTimePicker").toggle("date");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the DateTimePicker.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DateTimePicker.value">
             <summary>
             Gets the value of the DateTimePicker.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DateTimePicker.change">
             <summary>
             Triggered when the underlying value of a DateTimePicker is changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DateTimePicker.closeEvent">
             <summary>
             Fires when the calendar or the time drop-down list is closed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DateTimePicker.openEvent">
             <summary>
             Fires when the calendar or the time drop-down list is opened
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.animation">
             <summary>
             Animations to be used for opening/closing the popup. Setting to false will turn off the animation.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                animation: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.culture">
             <summary>
             (default: en-US) Specifies the culture info used by the widget.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.dates">
             <summary>
             Specifies a list of dates, which are shown in the time drop-down list. If not set, the DateTimePicker will auto-generate the available times.
             </summary>
            <example>
            usage
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                dates: [new Date(2000, 10, 10, 10, 0, 0), new Date(2000, 10, 10, 30, 0)] //the drop-down list will consist only two entries - "10:00 AM" and "10:30 AM"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.depth">
             <summary>
             Specifies the navigation depth.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                start: "decade",
                depth: "year" // the datePicker will only go to the year level
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.footer">
             <summary>
             Template to be used for rendering the footer of the calendar.
             </summary>
            <example>
            usage
            <code>
             // DatePicker initialization
             &lt;script>
                 $("#datePicker").kendoDatePicker({
                     footer: "Today - #=kendo.toString(data, 'd') #"
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.format">
             <summary>
             (default: MM/dd/yyyy) Specifies the format, which is used to parse value set with value() method.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                format: "yyyy/MM/dd"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.interval">
             <summary>
             (default: 30) Specifies the interval, between values in the popup list, in minutes.
             </summary>
            <example>
            usage
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                interval: 15
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.max">
             <summary>
             (default: Date(2099, 11, 31)) Specifies the maximum date, which the calendar can show.
             </summary>
            <example>
            usage
            <code>
            $("#calendar").kendoCalendar({
                max = new Date(2013, 0, 1);
            });
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.min" -->
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.month">
            <summary>
            Templates for the cells rendered in the "month" view.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.parseFormats">
             <summary>
             Specifies the formats, which are used to parse the value set with value() method or by direct input.
             If not set the value of the format will be used. Note that value of the format option is always used.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                format: "yyyy/MM/dd",
                parseFormats: ["MMMM yyyy"] //format also will be added to parseFormats
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.start">
             <summary>
             (default: month) Specifies the start view.
             </summary>
            <example>
            usage
            <code>
            $("#datePicker").kendoDatePicker({
                start: "decade" // the datePicker will start with a decade display
            });
            </code>
            </example> 
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.timeFormat">
             <summary>
             (default: h:mm tt) Specifies the format, which is used to format the values in the time drop-down list.
             </summary>
            <example>
            usage
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                timeFormat: "HH:mm" //24 hours format
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.value">
             <summary>
             (default: null) Specifies the selected date.
             </summary>
            <example>
            usage
            <code>
             // set the selected value to January 1st, 2011
            $("#datePicker").kendoDatePicker({
             value: new Date(2011, 0, 1)
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.change">
            <summary>
            Fires when the selected date is changed.
            </summary>
            <example>
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                change: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.open">
            <summary>
            Fires when the selected date is opened.
            </summary>
            <example>
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                open: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DateTimePickerConfiguration.close">
            <summary>
            Fires when the selected date is closed.
            </summary>
            <example>
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                close: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.close">
             <summary>
             Closes the drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
            combobox.close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.dataItem(SharpKit.JavaScript.JsNumber)">
             <summary>
             Returns the raw data record at the specified index. If the index is not specified, the selected index will be used.
             </summary>
             <param name="index">The zero-based index of the data record</param>
             <returns>Object The raw data record. Returns undefined if no data.</returns>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the dataItem corresponding to the selectedIndex.
             var dataItem = combobox.dataItem();
             // get the dataItem corresponding to the passed index.
             var dataItem = combobox.dataItem(1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.enable(System.Boolean)">
             <summary>
             Enables/disables the dropdownlist widget
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.enable">
             <summary>
             Enables/disables the dropdownlist widget
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.open">
             <summary>
             Opens the drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
            combobox.open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.refresh">
             <summary>
             Re-render the items in drop-down list.
             </summary>
            <example>
            usage
            <code>
             // get a referenence to the Kendo UI ComboBox
            var combobox = $("#combobox").data("kendoComboBox");
             // re-render the items of the drop-down list.
            combobox.refresh();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.search(SharpKit.JavaScript.JsString)">
             <summary>
             Selects item, which starts with the provided parameter.
             </summary>
             <param name="word">The search value.</param>
            <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // Searches for item which has "In" in the name.
             combobox.search("In");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.select(SharpKit.jQuery.jQuery,SharpKit.jQuery.jQuery)">
             <summary>
             Selects drop-down list item and sets the value and the text of the dropdownlist.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
             <returns>The index of the selected LI element.</returns>
             <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.select(SharpKit.JavaScript.JsNumber,SharpKit.jQuery.jQuery)">
             <summary>
             Selects drop-down list item and sets the value and the text of the dropdownlist.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
             <returns>The index of the selected LI element.</returns>
             <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.select(SharpKit.JavaScript.JsString,SharpKit.jQuery.jQuery)">
             <summary>
             Selects drop-down list item and sets the value and the text of the dropdownlist.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
             <returns>The index of the selected LI element.</returns>
             <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.select(SharpKit.JavaScript.JsNumber)">
             <summary>
             Selects drop-down list item and sets the value and the text of the dropdownlist.
             </summary>
             <param name="li">The LI element.</param>
             <param name="item">The selected item chosen by a user.</param>
             <returns>The index of the selected LI element.</returns>
             <example>
            usage
            <code>
             var combobox = $("#combobox").data("kendoComboBox");
             // selects by jQuery object
             combobox.select(combobox.ul.children().eq(0));
             // selects by index
             combobox.select(1);
             // selects item if its text is equal to "test" using predicate function
             combobox.select(function(dataItem) {
                 return dataItem.text === "test";
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.text(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the text of the dropdownlist.
             </summary>
             <param name="text">The text to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the text of the combobox.
             var text = combobox.text();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.text">
             <summary>
             Gets the text of the dropdownlist.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the text of the combobox.
             var text = combobox.text();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.toggle(System.Boolean)">
             <summary>
             Toggles the drop-down list between opened and closed state.
             </summary>
             <param name="toggle">Defines the whether to open/close the drop-down list.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // toggles the open state of the drop-down list.
             combobox.toggle();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the dropdownlist. The value will not be set if there is no item with such value. If value is undefined, text of the data item is used.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.DropDownList.value">
             <summary>
             Gets the value of the dropdownlist. The value will not be set if there is no item with such value. If value is undefined, text of the data item is used.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DropDownList.change">
             <summary>
             Fires when the value has been changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DropDownList.closeEvent">
             <summary>
             Fires when the drop-down list is closed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DropDownList.openEvent">
             <summary>
             Fires when the drop-down list is opened
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.DropDownList.selectEvent">
             <summary>
             Triggered when a Li element is selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
             var onSelect = function(e) {
                 // access the selected item via e.item (jQuery object)
             };
             
             // attach select event handler during initialization
             var combobox = $("#combobox").kendoComboBox({
                 select: onSelect
             });
             
             // detach select event handler via unbind()
             combobox.data("kendoComboBox").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.animation">
             <summary>
             Animations to be used for opening/closing the popup. Setting to false will turn off the animation.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                animation: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.autoBind">
             <summary>
             (default: true) Controls whether to bind the widget on initialization.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                autoBind: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.cascadeFrom">
             <summary>
             Use it to set the Id of the parent DropDownList.
             </summary>
            <example>
            usage
            <code>
            $("#dropdownlist1").kendoDropDownList();
            $("#dropdownlist2").kendoDropDownList({
                cascadeFrom: "dropdownlist1"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.change">
             <summary>
             Fires when the value has been changed.
             </summary>
             <example>
             <code>
             $("#dropdownlist").kendoDropDownList({
                change: function(e) {
                    // handle event
                }
            });
             </code>
             </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.dataSource">
             <summary>
             Instance of DataSource or the data that the DropDownList will be bound to.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: items
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.dataSourceObject">
             <summary>
             Instance of DataSource or the data that the DropDownList will be bound to.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: items
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.dataTextField">
             <summary>
             (default: "") Sets the field of the data item that provides the text content of the list items.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                dataTextField: "Name",
                dataValueField: "ID"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.dataValueField">
             <summary>
             (default: "") Sets the field of the data item that provides the value content of the list items.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                dataTextField: "Name",
                dataValueField: "ID"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.delay">
             <summary>
             (default: 500) Specifies the delay in ms before the search text typed by the end user is cleared.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                delay: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.enable">
             <summary>
             (default: true) Controls whether the DropDownList  should be initially enabled.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                enable: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.height">
             <summary>
             (default: 200) Define the height of the drop-down list in pixels.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                height: 500
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.ignoreCase">
             <summary>
             (default: true) Defines whether the filtration should be case sensitive.
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                filter: 'contains',
                ignoreCase: false //now filtration will be case sensitive
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.index">
             <summary>
             (default: 0) Defines the initial selected item.
             </summary>
            <example>
            usage
            <code>
            var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
            $("#comboBox").kendoComboBox({
                dataSource: items,
                index: 1 // 0 based from the start of the collection of objects. this selects "Item 2".
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.optionLabel">
             <summary>
             Define the text of the default empty item. If the value is an object, then the widget will use it directly.
             </summary>
            <example>
            usage
            <code>
            $("#dropdownlist").kendoDropDownList({
                optionLabel: "Select An Option"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.optionLabelString">
             <summary>
             Define the text of the default empty item. If the value is an object, then the widget will use it directly.
             </summary>
            <example>
            usage
            <code>
            $("#dropdownlist").kendoDropDownList({
                optionLabel: "Select An Option"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.template">
             <summary>
             Template to be used for rendering the items in the list.
             </summary>
            <example>
            usage
            <code>
             //template
            &lt;script id="template" type="text/x-kendo-tmpl">
                  # if (data.BoxArt.SmallUrl) { #
                      &lt;img src="${ data.BoxArt.SmallUrl }" alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } else { #
                      &lt;img alt="${ data.Name }" />Title:${ data.Name }, Year: ${ data.Name }
                  # } #
             &lt;/script>
            
             //combobox initialization
             &lt;script>
                 $("#combobox").kendoComboBox({
                     dataSource: dataSource,
                     dataTextField: "Name",
                     dataValueField: "Id",
                     template: kendo.template($("#template").html())
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.text">
             <summary>
             (default: "") Define the text of the widget, when the autoBind is set to false.
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                 autoBind: false,
                 text: "Chai"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.value">
             <summary>
             (default: "") Define the value of the widget
             </summary>
            <example>
            usage
            <code>
            $("#combobox").kendoComboBox({
                 dataSource: ["Item1", "Item2"],
                 value: "Item1"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.select">
            <summary>
            Fires when the selected date is selected.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDropDownList({
                select: function(e) {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.open">
            <summary>
            Fires when the selected date is opened.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDropDownList({
                open: function() {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.DropDownListConfiguration.close">
            <summary>
            Fires when the selected date is closed.
            </summary>
            <example>
            <code>
            $("#datePicker").kendoDropDownList({
                close: function() {
                   // handle event
               }
            });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.createRange(SharpKit.Html4.HtmlDocument)">
             <summary>
             Creates a W3C-compatible Range object.
             </summary>
             <param name="document">The document that the range is associated with. If ommited, the document of the editor editing area will be used.</param>
             <returns>Range. The created Range object.</returns>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor");
            var range = editor.createRange();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.encodedValue">
            <summary>
            Gets the HTML encoded value of the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.exec(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Executes an editor command on the currently selected text.
             </summary>
             <param name="name">The name of the command to be executed.</param>
             <param name="params">The parameters for the executed command.</param>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor");
            editor.exec("bold");
            editor.exec("undo");
            editor.exec("foreColor", { value: "#ff0000" });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.exec(SharpKit.JavaScript.JsString)">
             <summary>
             Executes an editor command on the currently selected text.
             </summary>
             <param name="name">The name of the command to be executed.</param>
             <param name="params">The parameters for the executed command.</param>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor");
            editor.exec("bold");
            editor.exec("undo");
            editor.exec("foreColor", { value: "#ff0000" });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.focus">
            <summary>
            Focuses the editable area.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.getRange">
             <summary>
             Gets a Range object form the editable area.
             </summary>
             <returns>Range A W3C-compatible Range object that represents the currently selected text in the editor area.</returns>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor");
            var range = editor.getRange();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.getSelection">
            <summary>
            Gets a W3C-compatible Selection object form the editable area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.paste(SharpKit.JavaScript.JsString)">
             <summary>
             Pastes HTML into the editable area.
             </summary>
             <param name="html">The HTML to be pasted.</param>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor");
            editor.paste("<p>new content</p>");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.selectedHtml">
            <summary>
            Serializes the currently selected text to a XHTML string.
            </summary>
            <returns>String The selectied text as valid XHTML.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.selectRange(SharpKit.Html4.HtmlTextRange)">
             <summary>
             Focuses the editable area and selects the range described by the range parameter.
             </summary>
             <param name="range">The Range object that describes the new selection.</param>
            <example>
            usage
            <code>
            var editor = $("#editor").data("kendoEditor"),
                range = editor.createRange();
            range.selectNodeContents(editor.body);
            editor.selectRange(range);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.value(SharpKit.JavaScript.JsString)">
            <summary>
            Gets or sets the Editor value.
            </summary>
            <param name="value">
            The value to set.
            String The value of the Editor as HTML string.
            </param>
            <returns> String The value of the Editor as HTML string.</returns>
            <example>
            <code>
            var editor = $("#editor").data("kendoEditor");
            // set value
            editor.value("<p>new content</p>");
            // get value
            var htmlValue = editor.value();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Editor.value">
            <summary>
            Gets or sets the Editor value.
            </summary>
            <returns> String The value of the Editor as HTML string.</returns>
            <example>
            <code>
            var editor = $("#editor").data("kendoEditor");
            // set value
            editor.value("<p>new content</p>");
            // get value
            var htmlValue = editor.value();
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.EditorConfiguration.encoded">
             <summary>
             (default: true) Indicates whether the Editor should submit encoded HTML tags.
             </summary>
            <example>
            usage
            <code>
            $("#editor").kendoEditor({
                encoded: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.EditorConfiguration.stylesheets">
             <summary>
             Allows custom stylesheets to be included within the editing area.
             </summary>
            <example>
            usage
            <code>
            $("#editor").kendoEditor({
                 stylesheets: [
                     "common-styles.css",
                     "green-theme.css",
                 ]
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.EditorConfiguration.tools">
             <summary>
             A collection of tools that should render a button, combobox, etc, to interact with the Editor.
             Custom tools are defined as a collection of required properties, while the insertHtml tool requires a collection of text-value pairs
             </summary>
            <example>
            usage
            <code>
            $("#editor").kendoEditor({
                tools: [
                    "bold",
                    "italic",
                    "underline",
                    "strikethrough",
                    "fontName",
                    "fontSize",
                    "foreColor",
                    "backColor",
                    "justifyLeft",
                    "justifyCenter",
                    "justifyRight",
                    "justifyFull",
                    "insertUnorderedList",
                    "insertOrderedList",
                    "indent",
                    "outdent",
                    "formatBlock",
                    "createLink",
                    "unlink",
                    "insertImage",
                    "insertHtml",
                    "viewHtml",
                    {
                        name: "customTool",
                        tooltip: "Custom Tool",
                        exec: function(e) {
                            var editor = $(this).data("kendoEditor");
                            // ...
                        }
                    }
                ],
                insertHtml: [
                    { text: "label 1", value: "<p>snippet 1</p>" },
                    { text: "label 2", value: "<p>snippet 2</p>" }
                ]
            });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.addRow">
             <summary>
             Adds a new empty table row in edit mode. The addRow method triggers edit event.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
            grid.addRow();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.cancelChanges">
             <summary>
             Cancels any pending changes during. Deleted rows are restored. Inserted rows are removed. Updated rows are restored to their original values.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
            grid.cancelChanges();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.cancelRow">
             <summary>
             Switch the current edited row into display mode and revert changes made to the data
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
            grid.cancelRow();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.cellIndex(SharpKit.JavaScript.JsString)">
             <summary>
             Returns the index of the cell in the grid item skipping group and hierarchy cells.
             </summary>
             <param name="cell">Target cell.</param>
             <returns></returns>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // get the index of the row
             // TODO: add specific function call here
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.cellIndex(SharpKit.Html4.HtmlElement)">
             <summary>
             Returns the index of the cell in the grid item skipping group and hierarchy cells.
             </summary>
             <param name="cell">Target cell.</param>
             <returns></returns>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // get the index of the row
             // TODO: add specific function call here
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.clearSelection">
             <summary>
             Clears currently selected items.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
             // clear the selection of items in the grid
            grid.clearSelection();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.closeCell">
             <summary>
             Closes current edited cell.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
             // close the cell being edited
            grid.closeCell();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.collapseGroup(SharpKit.JavaScript.JsString)">
             <summary>
             Collapses specified group.
             </summary>
             <param name="group">Target group item to collapse.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // collapses first group item
             grid.collapseGroup(grid.tbody.find(">tr.k-grouping-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.collapseGroup(SharpKit.Html4.HtmlElement)">
             <summary>
             Collapses specified group.
             </summary>
             <param name="group">Target group item to collapse.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // collapses first group item
             grid.collapseGroup(grid.tbody.find(">tr.k-grouping-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.collapseRow(SharpKit.JavaScript.JsString)">
             <summary>
             Collapses specified master row.
             </summary>
             <param name="row ">Target master row to collapse.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // collapses first master row
             grid.collapseRow(grid.tbody.find(">tr.k-master-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.collapseRow(SharpKit.Html4.HtmlElement)">
             <summary>
             Collapses specified master row.
             </summary>
             <param name="row ">Target master row to collapse.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // collapses first master row
             grid.collapseRow(grid.tbody.find(">tr.k-master-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.dataItem(SharpKit.JavaScript.JsString)">
             <summary>
             Returns the data item to which a given table row (tr DOM element) is bound.
             </summary>
             <param name="tr  ">Target row.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // returns the data item for first row
             grid.dataItem(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.dataItem(SharpKit.Html4.HtmlElement)">
             <summary>
             Returns the data item to which a given table row (tr DOM element) is bound.
             </summary>
             <param name="tr  ">Target row.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // returns the data item for first row
             grid.dataItem(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.dataItem(SharpKit.jQuery.jQuery)">
             <summary>
             Returns the data item to which a given table row (tr DOM element) is bound.
             </summary>
             <param name="tr  ">Target row.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // returns the data item for first row
             grid.dataItem(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.editCell(SharpKit.JavaScript.JsString)">
             <summary>
             Puts the specified table cell in edit mode. It requires a jQuery object representing the cell. The editCell method triggers edit event.
             </summary>
             <param name="cell">Cell to be edited.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
             // edit first table cell
            grid.editCell(grid.tbody.find(">tr>td:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.editRow(SharpKit.JavaScript.JsString)">
             <summary>
             Switches the specified row from the grid into edit mode. The editRow method triggers edit event.
             </summary>
             <param name="row ">Row to be edited.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // edit first table row
             grid.editRow(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.editRow(SharpKit.Html4.HtmlElement)">
             <summary>
             Switches the specified row from the grid into edit mode. The editRow method triggers edit event.
             </summary>
             <param name="row ">Row to be edited.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // edit first table row
             grid.editRow(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.expandGroup(SharpKit.JavaScript.JsString)">
             <summary>
             Expands specified group.
             </summary>
             <param name="group">Target group item to expand.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // expands first group item
             grid.expandGroup(grid.tbody.find(">tr.k-grouping-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.expandGroup(SharpKit.Html4.HtmlElement)">
             <summary>
             Expands specified group.
             </summary>
             <param name="group">Target group item to expand.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // expands first group item
             grid.expandGroup(grid.tbody.find(">tr.k-grouping-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.expandRow(SharpKit.JavaScript.JsString)">
             <summary>
             Expands specified master row.
             </summary>
             <param name="row ">Target master row to expand.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // expands first master row
             grid.expandRow(grid.tbody.find(">tr.k-master-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.expandRow(SharpKit.Html4.HtmlElement)">
             <summary>
             Expands specified master row.
             </summary>
             <param name="row ">Target master row to expand.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // expands first master row
             grid.expandRow(grid.tbody.find(">tr.k-master-row:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.refresh">
             <summary>
             Redraws the grid using the current data of the DataSource.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // refreshes the grid
             grid.refresh();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.removeRow(SharpKit.JavaScript.JsString)">
             <summary>
             Removes the specified row from the grid. The removeRow method triggers remove event. (Note: In inline or popup edit modes the changes will be automatically synced)
             </summary>
             <param name="row ">Row to be removed.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // remove first table row
             grid.removeRow(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.removeRow(SharpKit.Html4.HtmlElement)">
             <summary>
             Removes the specified row from the grid. The removeRow method triggers remove event. (Note: In inline or popup edit modes the changes will be automatically synced)
             </summary>
             <param name="row ">Row to be removed.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // remove first table row
             grid.removeRow(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.saveChanges">
             <summary>
             Calls DataSource sync to submit any pending changes if state is valid. The saveChanges method triggers saveChanges event.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
            grid.saveChanges();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.saveRow">
             <summary>
             Switch the current edited row into dislay mode and save changes made to the data (Note: the changes will be automatically synced)
             </summary>
            <example>
            usage
            <code>
             // get a reference to the grid widget
            var grid = $("#grid").data("kendoGrid");
            grid.saveRow();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.select(SharpKit.JavaScript.JsString)">
             <summary>
             Selects the specified Grid rows/cells. If called without arguments - returns the selected rows/cells.
             </summary>
             <param name="items ">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // selects first grid item
             grid.select(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.select(SharpKit.Html4.HtmlElement)">
             <summary>
             Selects the specified Grid rows/cells. If called without arguments - returns the selected rows/cells.
             </summary>
             <param name="items ">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // selects first grid item
             grid.select(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Grid.select">
             <summary>
             Selects the specified Grid rows/cells. If called without arguments - returns the selected rows/cells.
             </summary>
             <param name="items ">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the grid widget
             var grid = $("#grid").data("kendoGrid");
             // selects first grid item
             grid.select(grid.tbody.find(">tr:first"));
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.change">
             <summary>
             Fires when the grid selection has changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.dataBound">
             <summary>
             Fires when the grid has received data from the data source.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 dataBound: function(e) {
                     // handle event
                 }
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.detailCollapse">
             <summary>
             Fires when the grid detail row is collapsed.
             </summary>
            <example>
            usage
            <code>
              $("#grid").kendoGrid({
                 detailCollapse: function(e) {
                     // handle event
                 }
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.detailExpand">
             <summary>
             Fires when the grid detail row is expanded.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 detailExpand: function(e) {
                     // handle event
                 }
             });
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.detailInit">
             <summary>
             Fires when the grid detail is initialized.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 detailInit: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.edit">
             <summary>
             Fires when the grid enters edit mode.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 edit: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.remove">
             <summary>
             Fires before the grid item is removed.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 remove: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.save">
             <summary>
             Fires before the grid item is changed.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 save: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Grid.saveChangesEvent">
             <summary>
             Fires before the grid calls DataSource sync.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 saveChanges: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.autoBind">
             <summary>
             Indicates whether the grid will call read on the DataSource initially.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: sharedDataSource,
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 autoBind: false // the grid will not be populated with data until read() is called on the sharedDataSource
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.columns">
             <summary>
             A collection of column objects or collection of strings that represents the name of the fields.
             </summary>
            <example>
            usage
            <code>
            var sharedDataSource = new kendo.data.DataSource({
                 data: [{title: "Star Wars: A New Hope", year: 1977}, {title: "Star Wars: The Empire Strikes Back", year: 1980}],
                 pageSize: 1
            });
            $("#grid").kendoGrid({
                dataSource: sharedDataSource,
                columns: [ { title: "Action", command: "destroy" }, // creates a column with delete buttons
                           { title: "Title", field: "title", width: 200, template: "<div id='title'>${ title }</div>" },
                           { title: "Year", field: "year", filterable: false, sortable: true, format: "{0:dd/MMMM/yyyy}" } ];
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.columnMenu">
            <summary>
            Undocument property. Add by Lee
            (Default: false). 
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.dataSource">
             <summary>
             Instance of DataSource or Object with DataSource configuration.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.dataSourceObject">
             <summary>
             Instance of DataSource or Object with DataSource configuration.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.detailTemplate">
            <summary>
            Template to be used for rendering the detail rows in the grid. See the Detail Template example.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpKit.KendoUI.Web.GridConfiguration.change" -->
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.dataBound">
            <summary>
            Fires when the grid has received data from the data source.
            </summary>
            <example>
            <code>
             $("#grid").kendoGrid({
                dataBound: function(e) {
                // handle event
                }
            });
            </code>
            To set after initialization
            <code>
            // get a reference to the grid
            var grid = $("#grid").data("kendoGrid");
            // bind to the dataBound event
            grid.bind("dataBound", function(e) {
                // handle event
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.editable">
             <summary>
             Indicates whether editing is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ]
                 toolbar: [
                     "create",
                     { name: "save", text: "Save This Record" },
                     { name: "cancel", template: "&lt;img src="icons/cancel.png' rel='cancel' />" }
                 ],
                 editable: {
                     update: true, // puts the row in edit mode when it is clicked
                     destroy: false, // does not remove the row when it is deleted, but marks it for deletion
                     confirmation: "Are you sure you want to remove this item?"
                 }
             });
            </code>
            </example>   
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.editableBoolean">
            <summary>
            Undocument property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.editableString">
            <summary>
            Undocument property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.filterable">
            <summary>
            Undocument property added by Lee
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.groupable">
             <summary>
             (default: false) Indicates whether grouping is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 groupable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.height">
            <summary>
            Undocument property added by Lee
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.navigatable">
             <summary>
             (default: false) Indicates whether keyboard navigation is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 navigatable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.pageableBoolean">
             <summary>
             (default: false) Indicates whether paging is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 pageable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.pageableObject">
             <summary>
             (default: false) Indicates whether paging is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 pageable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.pageable">
             <summary>
             (default: false) Indicates whether paging is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 pageable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.reorderable">
            <summary>
            Undocument property. Added by Lee
            (Default: false). Specifies whether given column is reorderable.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.resizable">
            <summary>
            Undocument property, add by Lee
            default: false
            Specifies whether given column is resizeable.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.rowTemplate">
             <summary>
             Template to be used for rendering the rows in the grid.
             </summary>
            <example>
            usage
            <code>
             //template
             &lt;script id="rowTemplate" type="text/x-kendo-tmpl">
                 &lt;tr>
                     &lt;td>
                         &lt;img src="${ BoxArt.SmallUrl }" alt="${ Name }" />
                     &lt;/td>
                     &lt;td>
                         ${ Name }
                     &lt;/td>
                     &lt;td>
                         ${ AverageRating }
                     &lt;/td>
                 &lt;/tr>
             &lt;/script>
            
             //grid intialization
             &lt;script>PO details informaiton
                 $("#grid").kendoGrid({
                     dataSource: dataSource,
                     rowTemplate: kendo.template($("#rowTemplate").html()),
                     height: 200
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.scrollable">
             <summary>
             (default: true) Enable/disable grid scrolling. Possible values:
             true
            Enables grid vertical scrolling
            false
            Disables grid vertical scrolling
            { virtual: false }
            Enables grid vertical scrolling without data virtualization. Same as first option.
            { virtual: true }
            Enables grid vertical scrolling with data virtualization.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 scrollable: {
                     virtual: true //false
                 }
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.scrollableObject">
             <summary>
             (default: true) Enable/disable grid scrolling. Possible values:
             true
            Enables grid vertical scrolling
            false
            Disables grid vertical scrolling
            { virtual: false }
            Enables grid vertical scrolling without data virtualization. Same as first option.
            { virtual: true }
            Enables grid vertical scrolling with data virtualization.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 scrollable: {
                     virtual: true //false
                 }
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.selectable">
            <summary>
            Indicates whether selection is enabled/disabled. 
            "row": Single row selection.
            "cell": Single cell selection.
            "multiple, row": Multiple row selection.
            "multiple, cell": Multiple cell selection.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.sortableConfiguration">
             <summary>
             Defines whether grid columns are sortable.
             </summary>
             <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 sortable: true
             });
             //
             // or
             //
             $("#grid").kendoGrid({
                 sortable: {
                     mode: "multiple", // enables multi-column sorting
                     allowUnsort: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.sortableBoolean">
            <summary>
            Undocument property
            Default: false
            Specifies whether given column is sortable.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.sortable">
            <summary>
            Can be boolean or configuration, please use the typed property instead
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.toolbar">
            <summary>
            This is a list of commands for which the corresponding buttons will be rendered. The supported built-in commands are: "create", "cancel", "save", "destroy".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridConfiguration.toolbarBuildInCommands">
            <summary>
            This is a list of commands for which the corresponding buttons will be rendered. The supported built-in commands are: "create", "cancel", "save", "destroy".
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSelectableOptions.row">
            <summary>
            Single row selection.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSelectableOptions.cell">
            <summary>
            Single cell selection.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSelectableOptions.multipleRow">
            <summary>
            Multiple row selection.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSelectableOptions.multipleCell">
            <summary>
            Multiple cell selection.
            </summary>
        </member>
        <member name="T:SharpKit.KendoUI.Web.GridColumnsEditorCallback">
            <summary>
            Provides a way to specify custom editor for this column.
            </summary>
            <param name="container">The container in which the editor must be added.</param>
            <param name="options">Additional options.</param>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.command">
            <summary>
            Definition of command column. The supported built-in commands are: "create", "cancel", "save", "destroy".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.commandString">
            <summary>
            Definition of command column. The supported built-in commands are: "create", "cancel", "save", "destroy".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.commandStringArray">
            <summary>
            Definition of command column. The supported built-in commands are: "create", "cancel", "save", "destroy".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.editor">
            <summary>
            Provides a way to specify custom editor for this column.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.encoded">
            <summary>
            (default: true) Specified whether the column content is escaped. Disable encoding if the data contains HTML markup.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.field">
            <summary>
            The field from the datasource that will be displayed in the column.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.filterable">
            <summary>
            (default: true) Specifies whether given column is filterable.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.format">
             <summary>
             The format that will be applied on the column cells.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         format: "{0:dd/MMMM/yyyy}"
                    }
                 ]
              });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.sortable">
            <summary>
            (default: true) Specifies whether given column is sortable.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.template">
             <summary>
             The template for column's cells.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ]
              });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.title">
            <summary>
            The text that will be displayed in the column header.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.widthString">
            <summary>
            The width of the column.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.widthNumber">
            <summary>
            Undocument property type. Add by Lee
            The width of the column.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnConfiguration.width">
            <summary>
            The width of the column.
            Please use the correct type. 
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnsEditorOptionsConfiguration.field">
            <summary>
            The field for the editor.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridColumnsEditorOptionsConfiguration.model">
            <summary>
            The model for the editor.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.confirmation">
            <summary>
            Defines the text that will be used in confirmation box when delete an item.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.confirmationString">
            <summary>
            Defines the text that will be used in confirmation box when delete an item.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.destroy">
            <summary>
            Indicates whether item should be deleted when click on delete button.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.mode">
            <summary>
            Indicates which of the available edit modes(incell(default)/inline/popup) will be used
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.template">
            <summary>
            Template which will be use during popup editing
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditableConfiguration.update">
            <summary>
            Indicates whether item should be switched to edit mode on click.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.pageSize">
            <summary>
            Defines the number of records which will be displyed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.previousNext">
            <summary>
            (default: true) Defines if buttons for navigating to the first, last, previous and next pages will be shown.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.numeric">
            <summary>
            (default: true) Defines if numeric portion of the pager will be shown.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.buttonCount">
            <summary>
            (default: 10) Defines the number of buttons displayed in the numeric pager.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.input">
            <summary>
            (default: false) Defines if an input element which allows the user to navigate to given page will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.pageSizes">
            <summary>
            (default: false)Displayes a list with predefined page sizes. An array of values to be displayed can be provided.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.pageSizesArray">
            <summary>
            (default: [5,10,20])Displayes a list with predefined page sizes. An array of values to be displayed can be provided.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.refresh">
            <summary>
            (default: false) Defines if a refresh button will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.info">
            <summary>
            (default: true) Defines if a label showing current paging information will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableConfiguration.messages">
            <summary>
            Defines texts shown within the pager.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.display">
            <summary>
            (default: "{0} - {1} of {2} items"), Defines the info text.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.empty">
            <summary>
            (default: "No items to display"), Defines the info text shown when there are no records to be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.page">
            <summary>
            (default: "Page"), Defines the first part of the text of the input option.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.of">
            <summary>
            (default: "of {0}"), Defines the last part of the text of the input option.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.itemsPerPage">
            <summary>
            (default: "items per page"), Defines the text displayed after the select element of the pageSizes mode.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.first">
            <summary>
            (default: "Go to the first page"), Defines the text of the first page button tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.previous">
            <summary>
            (default: "Go to the previous page"), Defines the text of the previous page button tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.next">
            <summary>
            (default: "Go to the next page"), Defines the text of the next page button tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.last">
            <summary>
            (default: "Go to the last page"), Defines the text of the last page button tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridPageableMessagesConfiguration.refresh">
            <summary>
            (default: "Refresh"), Defines the text of the refresh button tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSortableConfiguration.allowUnsort">
            <summary>
            (default: false) Defines whether column can have unsorted state.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSortableModeOptions.single">
            <summary>
            Defines that only once column can be sorted at a time.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.GridSortableModeOptions.multiple">
            <summary>
            Defines that multiple columns can be sorted at a time.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSortableToolbarConfiguration.name">
            <summary>
            The name of the command. One of the predefined or a custom.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSortableToolbarConfiguration.template">
            <summary>
            The template for the command button.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSortableToolbarConfiguration.text">
            <summary>
            The text of the command that will be set on the button.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailCollapseEventData.masterRow">
            <summary>
            The jQuery element representing master row.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailCollapseEventData.detailRow">
            <summary>
            The jQuery element representing detail row.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailInitEventData.masterRow">
            <summary>
            The jQuery element representing master row.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailInitEventData.detailRow">
            <summary>
            The jQuery element representing detail row.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailInitEventData.detailCell">
            <summary>
            The jQuery element representing detail cell.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridDetailInitEventData.data">
            <summary>
            The data for the master row.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditEventData.container">
            <summary>
            The jQuery element to be edited.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridEditEventData.model">
            <summary>
            The model to be edited.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridRemoveEventData.row">
            <summary>
            The row element to be deleted.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridRemoveEventData.model">
            <summary>
            The model which to be deleted.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSaveEventData.values">
            <summary>
            The values entered by the user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSaveEventData.container">
            <summary>
            The jQuery element which is in edit mode.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.GridSaveEventData.model">
            <summary>
            The edited model.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.add">
             <summary>
             Inserts empty item as first item on the current view and prepare it for editing.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the list view widget
            var listView = $("#listView").data("kendoListView");
             // add item
            listView.add();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.cancel">
             <summary>
             Cancels changes in currently edited item.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // cancel changes in currently edited item
             listView.cancel();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.clearSelection">
            <summary>
            Clears ListView selected items and triggers change event.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.edit(SharpKit.jQuery.jQuery)">
             <summary>
             Edit specified ListView item. Triggers edit event.
             </summary>
             <param name="item">jQuery object containing the item to be edited.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // edit first list view item
             listView.edit(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.edit(SharpKit.KendoUI.Model)">
             <summary>
             Edit specified ListView item. Triggers edit event.
             </summary>
             <param name="item">jQuery object containing the item to be edited.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // edit first list view item
             listView.edit(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.refresh">
             <summary>
             Reloads the data and repaints the list view.
             </summary>
            <example>
            usage
            <code>
            var listView = $("#listView").data("kendoListView");
             // refreshes the list view
             listView.refresh();
            </code>
            </example>   
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.remove(SharpKit.jQuery.jQuery)">
             <summary>
             Removes specified ListView item. Triggers remove event and if not prevented calls DataSource sync method.
             </summary>
             <param name="item">jQuery object containing the item to be removed.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // edit first list view item
             listView.remove(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.remove(SharpKit.KendoUI.Model)">
             <summary>
             Removes specified ListView item. Triggers remove event and if not prevented calls DataSource sync method.
             </summary>
             <param name="item">jQuery object containing the item to be removed.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // edit first list view item
             listView.remove(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.save">
             <summary>
             Saves edited ListView item. If validation succeeds will call DataSource sync method.
             </summary>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // edit first list view item
             listView.edit(listView.element.children().first());
             // save edited item
             listView.save();
            </code>
            </example>   
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.select(SharpKit.JavaScript.JsString)">
             <summary>
             Selects the specified ListView item. If called without arguments - returns the selected items.
             </summary>
             <param name="items">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // selects first list view item
             listView.select(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.select(SharpKit.JavaScript.JsArray)">
             <summary>
             Selects the specified ListView item. If called without arguments - returns the selected items.
             </summary>
             <param name="items">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // selects first list view item
             listView.select(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.ListView.select">
             <summary>
             Selects the specified ListView item. If called without arguments - returns the selected items.
             </summary>
             <param name="items">Items to select.</param>
            <example>
            usage
            <code>
             // get a reference to the list view widget
             var listView = $("#listView").data("kendoListView");
             // selects first list view item
             listView.select(listView.element.children().first());
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ListView.change">
             <summary>
             Fires when the list view selection has changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ListView.dataBound">
             <summary>
             Fires when the list view has received data from the data source. and is about to render it.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 dataBound: function(e) {
                     // handle event
                 }
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ListView.editEvent">
             <summary>
             Fires when the grid enters edit mode.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 edit: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.ListView.removeEvent">
             <summary>
             Fires when the list view  item is removed.
             </summary>
            <example>
            usage
            <code>
             $("#grid").kendoGrid({
                 remove: function(e) {
                     // handle event
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.autoBind">
             <summary>
             (default: true) Indicates whether the list view will call read on the DataSource initially.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: sharedDataSource,
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 autoBind: false // the grid will not be populated with data until read() is called on the sharedDataSource
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.dataSource">
             <summary>
             Instance of DataSource or Object with DataSource configuration.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.dataSourceObject">
             <summary>
             Instance of DataSource or Object with DataSource configuration.
             </summary>
            <example>
            usage
            <code>
            var items = [ { Name: "Item 1" }, { Name: "Item 2"} ];
            $("#autoComplete").kendoAutoComplete({ dataSource: items });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.editTemplate">
             <summary>
             Specifies ListView item template in edit mode.
             </summary>
            <example>
            usage
            <code>
            $("#listView").kendoListView({
                 dataSource: {
                     data: createRandomData(50)
                 },
                 template: kendo.template($("#template").html()),
                 editTemplate: kendo.template($("#editTemplate").html())
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.navigatable">
             <summary>
             (default: false) Indicates whether keyboard navigation is enabled/disabled.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: {
                     data: createRandomData(50),
                     pageSize: 10
                 },
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 navigatable: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.selectableBool">
            <summary>
            (default: false) Indicates whether selection is enabled/disabled.  Possible values:
            true
            Single item selection.
            "single"
            Single item selection.
            "multiple"
            Multiple item selection.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.selectableString">
            <summary>
            (default: false) Indicates whether selection is enabled/disabled.  Possible values:
            true
                Single item selection.
            "single"
                Single item selection.
            "multiple"
                Multiple item selection.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.selectable">
            <summary>
            (default: false) Indicates whether selection is enabled/disabled.
            Please use the right type: bool or string.  
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.template">
            <summary>
            Specifies ListView item template.
            </summary>
            <example>
            <code>
            <script type="text/x-kendo-tmpl" id="template">
            <div>
            <dl>
            <dt>Name</dt> <dd>${Name}</dd>
            <dt>Birth Date</dt> <dd>${BirdthDate}</dd>
            </dl>
            </div>
            </script>
            </code>
            </example>
            <example>
            <code>
            $("#listView").kendoListView({
                dataSource: {
                    data: createRandomData(50)
                },
                template: kendo.template($("#template").html())
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.change">
            <summary>
            Fires when the list view selection has changed.
            </summary>
            <example>
            <code>
            $("#listView").kendoListView({
                change: function(e) {
                    // handle event
                }
             });    
            </code>
            To set after initialization
            <code>
             // get a reference to the list view
             var listView = $("#listView").data("kendoListView");
             // bind to the change event
             listView.bind("change", function(e) {
                 // handle event
             }
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewConfiguration.dataBound">
            <summary>
            Fires when the list view has received data from the data source. and is about to render it.
            </summary>
            <example>
            <code>
            function onDataBound(e) {
                // handle event
            }
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewEditEventData.item">
            <summary>
            The jQuery element to be edited.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewEditEventData.model">
            <summary>
            The model to be edited.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewRemoveEventData.item">
            <summary>
            The item element to be deleted.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.ListViewRemoveEventData.model">
            <summary>
            The model which to be deleted.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.append(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Appends an item to a Menu in the specified referenceItem's sub menu.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.append(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.append(SharpKit.JavaScript.JsArray,System.Object)">
             <summary>
             Appends an item to a Menu in the specified referenceItem's sub menu.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.append(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.close(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlElement)">
             <summary>
             Closes a sub-menu of a specified item(s) in a Menu.
             </summary>
             <param name="element">Target item selector.</param>
             <param name="item">The closed item</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // close the sub menu of "Item1"
             menu.close("#Item1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.close(SharpKit.jQuery.jQuery)">
             <summary>
             Closes a sub-menu of a specified item(s) in a Menu.
             </summary>
             <param name="element">Target item selector.</param>
             <param name="item">The closed item</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // close the sub menu of "Item1"
             menu.close("#Item1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.enable(SharpKit.JavaScript.JsString,System.Boolean)">
             <summary>
             Enables or disables an item of a Menu. This can optionally be accomplished on initialization by setting the disabled="disabled" on the desired menu item html element.
             </summary>
             <param name="element">Target element</param>
             <param name="enable">Desired state</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // disable the li menu item with the id "secondItem"
             menu.enable("#secondItem", false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.insertAfter(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts an item into a Menu after the specified referenceItem.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.insertAfter(System.Object,System.Object)">
             <summary>
             Inserts an item into a Menu after the specified referenceItem.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.insertAfter(SharpKit.JavaScript.JsArray{System.Object},System.Object)">
             <summary>
             Inserts an item into a Menu after the specified referenceItem.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.insertBefore(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts an item into a Menu before the specified referenceItem.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.insertBefore(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsArray)">
             <summary>
             Inserts an item into a Menu before the specified referenceItem.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.open(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlElement)">
             <summary>
             Opens a sub-menu of a specified item(s) in a Menu.
             </summary>
             <param name="element">Target item selector.</param>
             <param name="item">The opened item</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // open the sub menu of "Item1"
             menu.open("#Item1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Menu.remove(SharpKit.JavaScript.JsString)">
             <summary>
             Removes a specified item(s) from a Menu.
             </summary>
             <param name="element">Target item selector.</param>
             <returns>Returns the Menu object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // remove the item with the id "Item1"
             menu.remove("#Item1");
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Menu.closeEvent">
             <summary>
             Fires after a sub menu gets closed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Menu.openEvent">
             <summary>
             Fires before a sub menu gets opened.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Menu.selectEvent">
             <summary>
             Fires when a menu item gets selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
             var onSelect = function(e) {
                 // access the selected item via e.item (jQuery object)
             };
             
             // attach select event handler during initialization
             var combobox = $("#combobox").kendoComboBox({
                 select: onSelect
             });
             
             // detach select event handler via unbind()
             combobox.data("kendoComboBox").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.animation">
             <summary>
             A collection of Animation objects, used to change default animations. A value of false will disable all animations in the widget.
             Available animations for the Menu are listed below. Each animation has a reverse options which is used for the close effect by default,
             but can be over-ridden by setting the close animation. Each animation also has a direction which can be set off the animation (i.e. slideIn:Down).
             slideIn:
             Menu content slides in from the top
             fadeIn:
             Menu content fades in
             expand:
             Menu content expands from the top down. Similar to slideIn.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 animation: { open: { effects: "fadeIn" } }
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.closeOnClick">
             <summary>
             (default: true) Specifies that sub menus should close after item selection (provided they won't navigate).
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                closeOnClick: false
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.dataSource">
            <summary>
            Undocument property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.direction">
             <summary>
             (default: "default") Specifies Menu opening direction. Can be "top", "bottom", "left", "right".
             You can also specify different direction for root and sub menu items, separating them with space.
             The example below will initialize the root menu to open upwards and its sub menus to the left.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 direction: "top left"
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.hoverDelay">
             <summary>
             (default: 100) Specifies the delay in ms before the menu is opened/closed - used to avoid accidental closure on leaving.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 hoverDelay: 200
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.openOnClick">
             <summary>
             (default: false) Specifies that the root sub menus will be opened on item click.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 openOnClick: true
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.orientation">
             <summary>
             (default: "horizontal") Root menu orientation. Could be horizontal or vertical.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 orientation: "vertical"
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.MenuConfiguration.popupCollision">
             <summary>
             Specifies how Menu should adjust to screen boundaries. By default the strategy is "fit" for a sub menu with a horizontal parent,
             meaning it will move to fit in screen boundaries in all directions, and "fit flip" for a sub menu with vertical parent,
             meaning it will fit vertically and flip over its parent horizontally.]
             You can also switch off the screen boundary detection completely if you set the popupCollision to false.
             </summary>
            <example>
            usage
            <code>
            $("#menu").kendoMenu({
                 popupCollision: false
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.enable(System.Boolean)">
             <summary>
             Enable/Disable the numerictextbox widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.enable">
             <summary>
             Enable/Disable the numerictextbox widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the autocomplete.</param>
            <example>
            usage
            <code>
             // get a reference to instance of the Kendo UI ComboBox
            var combobox = $("#comboBox").data("kendoComboBox");
             // disables the combobox
            combobox.enable(false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.max(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the max value of the NumericTextBox.
             </summary>
             <param name="value">The max value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.max">
             <summary>
             Sets the max value of the NumericTextBox.
             </summary>
             <param name="value">The max value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.min(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the min value of the NumericTextBox.
             </summary>
             <param name="value">The min value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.min">
             <summary>
             Sets the min value of the NumericTextBox.
             </summary>
             <param name="value">The min value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.step(SharpKit.JavaScript.JsNumber)">
             <summary>
             Sets the step value of the NumericTextBox.
             </summary>
             <param name="value">The step value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the NumericTextBox widget
             var numerictextbox = $("#numerictextbox").data("kendoNumericTextBox");
             
             // get the step value of the numerictextbox.
             var step = numerictextbox.step();
             
             // set the step value of the numerictextbox.
             numerictextbox.step(0.1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.step(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the step value of the NumericTextBox.
             </summary>
             <param name="value">The step value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the NumericTextBox widget
             var numerictextbox = $("#numerictextbox").data("kendoNumericTextBox");
             
             // get the step value of the numerictextbox.
             var step = numerictextbox.step();
             
             // set the step value of the numerictextbox.
             numerictextbox.step(0.1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.step">
             <summary>
             Gets the step value of the NumericTextBox.
             </summary>
             <param name="value">The step value to set.</param>
            <example>
            usage
            <code>
             // get a reference to the NumericTextBox widget
             var numerictextbox = $("#numerictextbox").data("kendoNumericTextBox");
             
             // get the step value of the numerictextbox.
             var step = numerictextbox.step();
             
             // set the step value of the numerictextbox.
             numerictextbox.step(0.1);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.value(SharpKit.JavaScript.JsNumber)">
             <summary>
             Sets the value of the numerictextbox.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
             // get a referene to the numeric textbox
             var numerictextbox = $("#textbox").data("kendoNumericTextBox");
             
             // get the value of the numerictextbox.
             var value = numerictextbox.value();
             
             // set the value of the numerictextbox.
             numerictextbox.value("10.20");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the numerictextbox.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
             // get a referene to the numeric textbox
             var numerictextbox = $("#textbox").data("kendoNumericTextBox");
             
             // get the value of the numerictextbox.
             var value = numerictextbox.value();
             
             // set the value of the numerictextbox.
             numerictextbox.value("10.20");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.NumericTextBox.value">
             <summary>
             Gets the value of the numerictextbox.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
             // get a referene to the numeric textbox
             var numerictextbox = $("#textbox").data("kendoNumericTextBox");
             
             // get the value of the numerictextbox.
             var value = numerictextbox.value();
             
             // set the value of the numerictextbox.
             numerictextbox.value("10.20");
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.NumericTextBox.change">
             <summary>
             Fires when the value is changed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.NumericTextBox.spin">
             <summary>
             Fires when the value is changed from the spin buttons
             </summary>
            <example>
            usage
            <code>
            $("#numeric").kendoNumericTextBox({
                 spin: function(e) {
                     // handle event
                 }
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.culture">
             <summary>
             (default: en-US) Specifies the culture info used by the NumericTextBox widget.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.decimals">
             <summary>
             (default: null) Specifies the number precision. If not set precision defined by current culture is used.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 1,
                 step: 0.1,
                 decimals: 1
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.downArrowText">
             <summary>
             (default: Decrease value) Specifies the text of the tooltip on the down arrow.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50,
                 upArrowText: "More",
                 downArrowText: "Less"
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.format">
             <summary>
             (default: n) Specifies the format of the number. Any valid number format is allowed.
             </summary>
            <example>
            usage
            <code>
            $("#numeric").kendoNumericTextBox({
                format: "p0", // format as percentage with % sign
                min: 0,
                max: 1,
                step: 0.01
             });
            </code>
            </example>   
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.max">
             <summary>
             (default: null) Specifies the largest value the user can enter.
             </summary>
            <example>
            usage
            <code>
             // specify in the HTML
             &lt;input id="numeric" value="10" type="number" min="-100" max="100" step="10"/>
             &lt;br />
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.min">
             <summary>
             (default: null) Specifies the smallest value the user can enter.
             </summary>
            <example>
            usage
            <code>
             // specify in the HTML
             &lt;input id="numeric" value="10" type="number" min="-100" max="100" step="10"/>
             &lt;br />
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.placeholder">
             <summary>
             (default: "") Specifies the text displayed when the input is empty.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50,
                 placeholder: "Select A Value"
             });
            </code>
            </example>   
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.step">
             <summary>
             (default: 1) Specifies the increment/decrement step.
             </summary>
            <example>
            usage
            <code>
             // specify in the HTML
             &lt;input id="numeric" value="10" type="number" />
             &lt;br />
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 1,
                 step: 0.1
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.upArrowText">
             <summary>
             (default: Increase value) Specifies the text of the tooltip on the up arrow.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50,
                 upArrowText: "More",
                 downArrowText: "Less"
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.value">
             <summary>
             (default: null) Specifies the value of the NumericTextBox widget.
             </summary>
            <example>
            usage
            <code>
             // specify in the HTML
             &lt;input id="numeric" value="10" type="number" min="-100" max="100" step="10"/>
             
             // specify on widget initialization
             $("#numeric").kendoNumericTextBox({
                 min: 0,
                 max: 100,
                 value: 50
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.change">
             <summary>
             Fires when the value has been changed.
             </summary>
             <example>
             <code>
             $("#comboBox").kendoNumericTextBox({
                change: function(e) {
                    // handle event
                }
             });
             </code>
             To set after initialization
             <code>
             // get a reference to instance of the Kendo UI ComboBox
             var numeric = $("#numeric").data("kendoNumericTextBox");
             // bind to the change event
             numeric.bind("change", function(e) {
                // handle event
            });
             </code>
             </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.NumericTextBoxConfiguration.spin">
            <summary>
            Fires when the value is changed from the spin buttons.
            </summary>
            <example>
            <code>
            $("#numeric").kendoNumericTextBox({
            spin: function(e) {
                // handle event
                }
            });
            </code>
            To set after initialization
            <code>
            // get a reference to the numeric textbox widget
            var numeric = $("#numeric").data("kendoNumericTextBox");
            // bind to the spin event
            numeric.bind("spin", function(e) {
                // handle event
            });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.totalPages">
            <summary>
            Returns the number of pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.pageSize">
            <summary>
            Returns the page size - maximum number of items allowed on one page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.page">
             <summary>
             Set the specified page as a current page. If called without arguments - returns the current page.
             </summary>
             <returns></returns>
            <example>
            usage
            <code>
            var currentPage = pager.page();
            </code>
            </example>   
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.page(SharpKit.JavaScript.JsNumber)">
             <summary>
             Set the specified page as a current page. If called without arguments - returns the current page.
             </summary>
             <example>
            usage
            <code>
            pager.page(2);
            </code>
            </example>   
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.refresh">
            <summary>
            Updates all values of pager elements so that these values fit the values of DataSource.
            This method is automaticaly called after DataSource change event is fired.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Pager.destroy">
            <summary>
            Unbinds all callbacks created within pager initialization. This method doesn't remove pager element from DOM.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Pager.change">
             <summary>
             Fires when the current page has changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.autoBind">
             <summary>
             (default: true) Indicates whether the pager refresh method will be called within its initialization.
             </summary>
            <example>
            usage
            <code>
            $("#grid").kendoGrid({
                 dataSource: sharedDataSource,
                 columns: [
                     {
                         field: "Name"
                     },
                     {
                         field: "BirthDate",
                         title: "Birth Date",
                         template: '#= kendo.toString(BirthDate,"dd MMMM yyyy") #'
                    }
                 ],
                 autoBind: false // the grid will not be populated with data until read() is called on the sharedDataSource
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.buttonCount">
            <summary>
            (default: 10) Defines the number of buttons displayed in the numeric pager.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.dataSource">
             <summary>
             Instance of kendo DataSource. See the kendo.data.DataSource. This option is mandatory because the Pager is tightly connected with DataSource.
             The pager is UI widget for managing paging over the DataSource. The Pager gets values like page size or total count of items from DataSource.
             </summary>
            <example>
            usage
            <code>
            $("#pager").kendoPager({
                 dataSource: new kendo.data.DataSource({
                     data: [
                         {title: "Star Wars: A New Hope", year: 1977},
                         {title: "Star Wars: The Empire Strikes Back", year: 1980}
                     ],
                     pageSize: 25
                 });
                 pageSizes: [10, 25, 50]
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.selectTemplate">
             <summary>
             The template for selectbox with predefined page sizes.
             </summary>
            <example>
            usage
            <code>
            $("#pager").kendoPager({
                 dataSource: sharedDataSource,
                 selectTemplate: '&lt;li>&lt;span class="k-state-selected">#=text#&lt;/span>&lt;/li>'
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.linkTemplate">
             <summary>
             The template for page number links.
             </summary>
            <example>
            usage
            <code>
            $("#pager").kendoPager({
                 dataSource: sharedDataSource,
                 linkTemplate: '&lt;li>&lt;a href="\\#" class="k-link" data-#=ns#page="#=idx#">#=text#&lt;/a>&lt;/li>'
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.info">
            <summary>
            (default: true) Defines if a label showing current paging information will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.input">
            <summary>
            (default: false) Defines if an input element which allows the user to navigate to given page will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.numeric">
            <summary>
            (default: true) Defines if numeric portion of the pager will be shown.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.pageSizes">
            <summary>
            (default: false)Displayes a list with predefined page sizes. An array of values to be displayed can be provided.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.pageSizesArray">
            <summary>
            (default: [5,10,20])Displayes a list with predefined page sizes. An array of values to be displayed can be provided.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.previousNext">
            <summary>
            (default: true) Defines if buttons for navigating to the first, last, previous and next pages will be shown.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.refresh">
            <summary>
            (default: false) Defines if a refresh button will be displayed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PagerConfiguration.messages">
             <summary>
             Defines texts shown within the pager.
             </summary>
            <example>
            usage
            <code>
            $("#pager").kendoPager({
                dataSource: sharedDataSource,
                messages: {
                    display: "{0} - {1} of {2} items",
                    empty: "No items to display",
                    page: "Page",
                    of: "of {0}",
                    itemsPerPage: "items per page",
                    first: "Go to the first page",
                    previous: "Go to the previous page",
                    next: "Go to the next page",
                    last: "Go to the last page",
                    refresh: "Refresh"
                }
            });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.append(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Appends an item to the PanelBar.
             </summary>
             <param name="item">Target item, specified as the JSON representation of an object. You can pass item text, content or contentUrl here.
             Can handle an HTML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns> Returns the PanelBar object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.append(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.append(SharpKit.JavaScript.JsArray,System.Object)">
             <summary>
             Appends an item to the PanelBar.
             </summary>
             <param name="item">Target item, specified as the JSON representation of an object. You can pass item text, content or contentUrl here.
             Can handle an HTML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns> Returns the PanelBar object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.append(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.collapse(SharpKit.JavaScript.JsString,System.Boolean,SharpKit.Html4.HtmlElement)">
            <summary>
            Collapses the specified item(s) of a PanelBar. Temporarily enables (true) or disables (false) any visual animation(s) when collapsing items.
            </summary>
            <param name="element">The PanelBar item(s) to be collapsed, expressed as a string containing a selector expression or represented by a jQuery selector.</param>
            <param name="useAnimation">_optional, default: _</param>
            <param name="item">The collapsing item of the PanelBar.</param>
            <returns>Returns the PanelBar object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.collapse(SharpKit.jQuery.jQuery)">
            <summary>
            Collapses the specified item(s) of a PanelBar. Temporarily enables (true) or disables (false) any visual animation(s) when collapsing items.
            </summary>
            <param name="element">The PanelBar item(s) to be collapsed, expressed as a string containing a selector expression or represented by a jQuery selector.</param>
            <returns>Returns the PanelBar object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.data(SharpKit.JavaScript.JsString)">
            <summary>
            Undocument method. Add by Lee.
            </summary>
            <param name="str"></param>
            <returns>d</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.replaceWith(SharpKit.jQuery.jQuery)">
            <summary>
            Undocunment method. Add by Lee
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.enable(SharpKit.JavaScript.JsString,System.Boolean)">
             <summary>
            Enables (true) or disables (false) the specified item(s) of the PanelBar.
             </summary>
             <param name="element">The PanelBar item(s) to be enabled (true) or disabled (false),
             expressed as a string containing a selector expression or represented by a jQuery selector.</param>
             <param name="enable">The desired state - enabled (true) or disabled (false) - of the target element(s).</param>
            <example>
            usage
            <code>
             // access an existing PanelBar instance
             var panelBar = $("#panelBar").data("kendoPanelBar");
             // enable the item of the PanelBar with ID, "item1"
             panelBar.enable($("#item1"), true);
             // disable the currently selected item of the PanelBar
             var item = panelBar.select();
             panelBar.enable(item, false);
             // disable all list items that start with ID, "item"
             panelBar.enable($('[id^="item"]'), false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.expand(SharpKit.JavaScript.JsString,System.Boolean,SharpKit.Html4.HtmlElement)">
             <summary>
             Expands the specified item(s) of a PanelBar. Temporariliy enables (true) or disables (false) any visual animation(s) when expanding items.
             </summary>
             <param name="element">The PanelBar item(s) to be expanded, expressed as a selector.</param>
             <param name="useAnimation">_optional, default: _</param>
             <param name="item">The expanding item of the PanelBar.</param>
             <returns>Returns the PanelBar object to support chaining.</returns>
            <example>
            usage
            <code>
             // access an existing PanelBar instance
             var panelBar = $("#panelBar").data("kendoPanelBar");
             // expand the element with ID, "item1"
             panelBar.expand($("#item1"));
             // expand the element with ID, "item2" without visual animations
             panelBar.expand($("#item2"), false);
             // expand all list items that start with ID, "item"
             panelBar.expand($('[id^="item"]'));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.insertAfter(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts a PanelBar item after the specified referenceItem
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an HTML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to insert the new item after</param>
            <example>
            usage
            <code>
            panelBar.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.insertAfter(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},System.Object)">
             <summary>
             Inserts a PanelBar item after the specified referenceItem
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an HTML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to insert the new item after</param>
            <example>
            usage
            <code>
            panelBar.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.insertBefore(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts a PanelBar item before the specified referenceItem
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an TML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the PanelBar object to support chaining.</returns>
            <example>
            usage
            <code>
            panelBar.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.insertBefore(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},System.Object)">
             <summary>
             Inserts a PanelBar item before the specified referenceItem
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an TML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the PanelBar object to support chaining.</returns>
            <example>
            usage
            <code>
            panelBar.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.reload(SharpKit.JavaScript.JsString)">
             <summary>
             Reloads the content of a PanelBar from an AJAX request.
             </summary>
             <param name="element">Target element</param>
            <example>
            usage
            <code>
             // get a reference to the panel bar
             var panelBar = $("#panelBar").data("kendoPanelBar");
             // reload the panel basr
             panelBar.reload();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.remove(SharpKit.JavaScript.JsString)">
             <summary>
             Removes the specified PanelBar item(s).
             </summary>
             <param name="element">Target item selector.</param>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             // remove the item with the id "Item1"
             menu.remove("#Item1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.PanelBar.select(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlElement)">
             <summary>
             Selects the specified item of the PanelBar. If this method is invoked without arguments, it returns the currently selected item.
             </summary>
             <param name="element">The PanelBar item to be selected, expressed as a string containing a selector expression or represented by a jQuery selector.</param>
             <param name="item">The selected item of the PanelBar.</param>
            <example>
            usage
            <code>
             // access an existing PanelBar instance
             var panelBar = $("#panelBar").data("kendoPanelBar");
             // select the item with ID, "item1"
             panelBar.select("#item1");
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.activate">
             <summary>
             Triggered when an item of a PanelBar is activated.
             </summary>
            <example>
            usage
            <code>
             // event handler for activate
             var onActivate = function(e) {
                 // access the activated item via e.item (HTMLElement)
             };
             
             // attach activate event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 activate: onActivate
             });
             
             // detach activate event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("activate", onActivate);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.collapseEvent">
             <summary>
             Triggered when an item of a PanelBar is collapsed.
             </summary>
            <example>
            usage
            <code>
             // event handler for collapse
             var onCollapse = function(e) {
                 // access the collapsed item via e.item (HTMLElement)
             };
             
             // attach collapse event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 collapse: onCollapse
             });
             
             // detach collapse event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("collapse", onCollapse);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.contentLoad">
             <summary>
             Fires when content is fetched from an AJAX request.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                contentLoad: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.error">
             <summary>
             Fires when AJAX request results in an error.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                error: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.expandEvent">
             <summary>
             Triggered when an item of a PanelBar is expanded.
             </summary>
            <example>
            usage
            <code>
             // event handler for expand
             var onExpand = function(e) {
                 // access the expanded item via e.item (HTMLElement)
             };
             
             // attach expand event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 expand: onExpand
             });
             
             // detach expand event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("expand", onExpand);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.PanelBar.selectEvent">
             <summary>
             Triggered when an item of a PanelBar is selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
             var onSelect = function(e) {
                 // access the selected item via e.item (jQuery object)
             };
             
             // attach select event handler during initialization
             var combobox = $("#combobox").kendoComboBox({
                 select: onSelect
             });
             
             // detach select event handler via unbind()
             combobox.data("kendoComboBox").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.animation">
             <summary>
             A collection of visual animations used when PanelBar items are opened or closed through user interactions. Setting this option to false will disable all animations.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    // fade-out closing items over 1000 milliseconds
                    close: {
                        duration: 1000,
                        effects: "fadeOut"
                    },
                   // fade-in and expand opening items over 500 milliseconds
                   open: {
                       duration: 500,
                       effects: "expandVertical fadeIn"
                   }
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.expandMode">
             <summary>
             Specifies how the PanelBar items are displayed when opened and closed. The following values are available:
             "single"
             Display one item at a time when an item is opened; opening an item will close the previously opened item.
             "multiple"
             Display multiple values at one time; opening an item has no visual impact on any other items in the PanelBar.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                expandMode: "single"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.contentUrls">
            <summary>
            Undocument property. Add by Lee. 
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.select">
            <summary>
            Triggered when an item of a PanelBar is selected.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.expand">
            <summary>
            Triggered when an item of a PanelBar is expanded.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.collapse">
            <summary>
            Triggered when an item of a PanelBar is collapsed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.activate">
            <summary>
            Triggered when an item of a PanelBar is activated.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.contentLoad">
            <summary>
            Fires when content is fetched from an AJAX request.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarConfiguration.error">
            <summary>
            ires when AJAX request results in an error.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationConfiguration.close">
             <summary>
             The visual animation(s) that will be used when PanelBar items are closed.
             </summary>
            <example>
            usage
            <code>
             //combobox initialization
            &lt;script>
                $("#combobox").kendoComboBox({
                    dataSource: dataSource,
                    animation: {
                       close: {
                           effects: "fadeOut",
                           duration: 300,
                           hide: true
                           show: false
                       }
                    }
                });
            &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationConfiguration.open">
             <summary>
             Animation to be used for opening of the popup.
             </summary>
            <example>
            usage
            <code>
             //combobox initialization
            &lt;script>
                 $("#combobox").kendoComboBox({
                     dataSource: dataSource,
                     animation: {
                        open: {
                            effects: "fadeIn",
                            duration: 300,
                            show: true
                        }
                     }
                 });
             &lt;/script>
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationCloseConfiguration.duration">
             <summary>
             (default: 200) The number of milliseconds used for the visual animation when a PanelBar item is closed.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    close: {
            
                               duration: 1000
            
                           }
              }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationCloseConfiguration.effects">
             <summary>
             A whitespace-delimited string of animation effects that are utilized when a PanelBar item is closed. Options include "fadeOut".
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    close: {
                        duration: 1000,
                        effects: "fadeOut"
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationOpenConfiguration.duration">
             <summary>
             (default: 200) The number of milliseconds used for the visual animation when an item is opened.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    open: {
            
                               duration: 1000
            
                           }
              }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationOpenConfiguration.effects">
             <summary>
             (default: "expandVertical") A whitespace-delimited string of animation effects that are used when an item is expanded. Options include "expandVertical" and "fadeIn".
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    close: {
                        duration: 1000,
                        effects: "fadeOut"
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarAnimationOpenConfiguration.show">
            <summary>
            (default: true)
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.PanelBarExpandModeOptions.single">
            <summary>
            Display one item at a time when an item is opened; opening an item will close the previously opened item.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.PanelBarExpandModeOptions.multiple">
            <summary>
            Display multiple values at one time; opening an item has no visual impact on any other items in the PanelBar.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarContentLoadEventData.item">
            <summary>
            The selected item
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarContentLoadEventData.contentElement">
            <summary>
            The loaded content element
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarErrorEventData.xhr">
            <summary>
            The jqXHR object used to load the content
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.PanelBarErrorEventData.status">
            <summary>
            The returned status.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.RangeSlider.destroy">
             <summary>
             Prepares the RangeSlider for safe removal from the DOM.
             Detaches event handlers and removes data entries in order to avoid memory leaks.
             </summary>
            <example>
            usage
            <code>
             // deatach events
             $("#rangeSlider").data("kendoRangeSlider").destroy();
             
             // remove slider html from DOM
             $("#rangeSlider").closest(".k-slider").remove();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.RangeSlider.enable(System.Boolean)">
             <summary>
             Enable/Disable the RangeSlider widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the RangeSlider.</param>
            <example>
            usage
            <code>
             // get a reference to the range slider widget
             var rangeSlider = $("#rangeSlider").data("kendoRangeSlider");
             
             // disables the range slider
             rangeSlider.enable(false);
             
             // enables the range slider
             rangeSlider.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.RangeSlider.value">
             <summary>
             The value method gets or sets the start and end values of the RangeSlider.
             It accepts an array as parameter, and returns an object array with the start and end selection values.
             </summary>
             <returns></returns>
            <example>
            usage
            <code>
            var rangeSider = $("#rangeSlider").data("kendoRangeSlider");
             rangeSlider.value();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.RangeSlider.value(SharpKit.JavaScript.JsArray)">
             <summary>
             The value method gets or sets the start and end values of the RangeSlider.
             It accepts an array as parameter, and returns an object array with the start and end selection values.
             </summary>
            <example>
            usage
            <code>
            var rangeSider = $("#rangeSlider").data("kendoRangeSlider");
             rangeSlider.value();
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.RangeSlider.change">
            <summary>
            Fires when the rangeSlider value changes as a result of selecting a new value with one of the drag handles or the keyboard.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.RangeSlider.slide">
            <summary>
            Fires when the user drags the drag handle to a new position.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.largeStep">
            <summary>
            (default: 5) The delta with which the value will change when the user presses the Page Up or Page Down key (the drag handle must be focused).
            Note: The allied largeStep will also set large tick for every large step.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.max">
            <summary>
            (default: 10) The maximum value of the RangeSlider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.min">
            <summary>
            (default: 0) The minimum value of the RangeSlider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.orientation">
            <summary>
            (default: "horizontal") F The orientation of a RangeSlider; "horizontal" or "vertical".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.selectionEnd">
            <summary>
            The selection end value of the RangeSlider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.selectionStart">
            <summary>
            The selection start value of the RangeSlider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.smallStep">
            <summary>
            (default: 1) The small step value of the RangeSlider. The underlying value will be changed when the end user (1) clicks on the increase
            or decrease buttons of the RangeSlider, (2) presses the arrow keys (the drag handle must be focused), or (3) drags the drag handle.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.tickPlacement">
            <summary>
            (default: "both")
            Denotes the location of the tick marks in the RangeSlider. The available options are:
            "topLeft"
            Tick marks are located on the top of the horizontal widget or on the left of the vertical widget.
            "bottomRight"
            Tick marks are located on the bottom of the horizontal widget or on the right side of the vertical widget.
            "both"
            Tick marks are located on both sides of the widget.
            "none"
            Tick marks are not visible.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderConfiguration.tooltip">
            <summary>
            Configuration of the RangeSlider tooltip.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.RangeSliderTickPlacementOptions.topLeft">
            <summary>
            Tick marks are located on the top of the horizontal widget or on the left of the vertical widget.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.RangeSliderTickPlacementOptions.bottomRight">
            <summary>
            Tick marks are located on the bottom of the horizontal widget or on the right side of the vertical widget.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.RangeSliderTickPlacementOptions.both">
            <summary>
            Tick marks are located on both sides of the widget.
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.RangeSliderTickPlacementOptions.none">
            <summary>
            Tick marks are not visible.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderTooltipConfiguration.enabled">
            <summary>
            (default: true) Disables (false) or enables (true) the tooltip of the RangeSlider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderTooltipConfiguration.format">
            <summary>
            (default: "{0}") Format string for the text of the tooltip. Note: The applied format will also influence the appearance of the RangeSlider tick labels.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.RangeSliderEventData.value">
            <summary>
            Represents the updated array of values of the first and second drag handle.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Slider.destroy">
             <summary>
             Prepares the Slider for safe removal from the DOM.
             Detaches event handlers and removes data entries in order to avoid memory leaks.
             </summary>
            <example>
            usage
            <code>
             // deatach events
             $("#rangeSlider").data("kendoRangeSlider").destroy();
             
             // remove slider html from DOM
             $("#rangeSlider").closest(".k-slider").remove();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Slider.enable(System.Boolean)">
             <summary>
             Enable/Disable the Slider widget.
             </summary>
             <param name="enable">The argument, which defines whether to enable/disable the Slider.</param>
            <example>
            usage
            <code>
             // get a reference to the slider widget
             var Slider = $("#Slider").data("kendoSlider");
             
             // disables the range slider
             Slider.enable(false);
             
             // enables the range slider
             Slider.enable(true);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Slider.value">
             <summary>
             Gets the value of a Slider. It accepts a string or number as parameters and returns a number representing the underlying value.
             </summary>
             <returns></returns>
            <example>
            usage
            <code>
            var rangeSider = $("#rangeSlider").data("kendoRangeSlider");
             rangeSlider.value();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Slider.value(SharpKit.JavaScript.JsNumber)">
             <summary>
             Sets the value of a Slider. It accepts a string or number as parameters and returns a number representing the underlying value.
             </summary>
            <example>
            usage
            <code>
            var rangeSider = $("#rangeSlider").data("kendoRangeSlider");
             rangeSlider.value();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Slider.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of a Slider. It accepts a string or number as parameters and returns a number representing the underlying value.
             </summary>
            <example>
            usage
            <code>
            var rangeSider = $("#rangeSlider").data("kendoRangeSlider");
             rangeSlider.value();
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Slider.change">
            <summary>
            Fires when the slider value changes as a result of selecting a new value with the drag handle, buttons or keyboard.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Slider.slide">
            <summary>
            Fires when the user drags the drag handle to a new position.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.decreaseButtonTitle">
            <summary>
            (default: "Decrease") The title of the decrease button of the Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.increaseButtonTitle">
            <summary>
            (default: "Increase") The title of the increase button of the Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.largeStep">
            <summary>
            (default: 5) The delta with which the value will change when the user presses the Page Up or Page Down key (the drag handle must be focused).
            Note: The allied largeStep will also set large tick for every large step.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.max">
            <summary>
            (default: 10) The maximum value of the Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.min">
            <summary>
            (default: 0) The minimum value of the Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.orientation">
            <summary>
            (default: "horizontal") F The orientation of a Slider; "horizontal" or "vertical".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.showButtons">
            <summary>
            (default: true) Can be used to show (true) or hide (false) the increase and decrease buttons of a Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.smallStep">
            <summary>
            (default: 1) The small step value of the Slider. The underlying value will be changed when the end user (1) clicks on the increase
            or decrease buttons of the Slider, (2) presses the arrow keys (the drag handle must be focused), or (3) drags the drag handle.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.tickPlacement">
            <summary>
            (default: "both")
            Denotes the location of the tick marks in the Slider. The available options are:
            "topLeft"
            Tick marks are located on the top of the horizontal widget or on the left of the vertical widget.
            "bottomRight"
            Tick marks are located on the bottom of the horizontal widget or on the right side of the vertical widget.
            "both"
            Tick marks are located on both sides of the widget.
            "none"
            Tick marks are not visible.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.tooltip">
            <summary>
            Configuration of the Slider tooltip.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.value">
            <summary>
            The underlying value of the Slider.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.change">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SliderConfiguration.slide">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.OrientationOptions.horizontal">
            <summary>
            Define horizontal orientation
            </summary>
        </member>
        <member name="F:SharpKit.KendoUI.Web.OrientationOptions.vertical">
            <summary>
            Define vertical orientation of the splitter.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.ajaxRequest(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Loads the content of a pane from a local or remote URL.
             </summary>
             <param name="pane">The targetted pane whose content is to be loaded via a URL.</param>
             <param name="url">A local or remote URL from which the content of the pane is to be loaded.</param>
             <param name="data">Any data that is necessary to be sent to the server.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // load content into the pane with ID, pane1
             splitter.ajaxRequest("#pane1", "/customer/profile", { id: 42 });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.ajaxRequest(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Loads the content of a pane from a local or remote URL.
             </summary>
             <param name="pane">The targetted pane whose content is to be loaded via a URL.</param>
             <param name="url">A local or remote URL from which the content of the pane is to be loaded.</param>
             <param name="data">Any data that is necessary to be sent to the server.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // load content into the pane with ID, pane1
             splitter.ajaxRequest("#pane1", "/customer/profile", { id: 42 });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.ajaxRequest(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
             <summary>
             Loads the content of a pane from a local or remote URL.
             </summary>
             <param name="pane">The targetted pane whose content is to be loaded via a URL.</param>
             <param name="url">A local or remote URL from which the content of the pane is to be loaded.</param>
             <param name="data">Any data that is necessary to be sent to the server.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // load content into the pane with ID, pane1
             splitter.ajaxRequest("#pane1", "/customer/profile", { id: 42 });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.ajaxRequest(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
             <summary>
             Loads the content of a pane from a local or remote URL.
             </summary>
             <param name="pane">The targetted pane whose content is to be loaded via a URL.</param>
             <param name="url">A local or remote URL from which the content of the pane is to be loaded.</param>
             <param name="data">Any data that is necessary to be sent to the server.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // load content into the pane with ID, pane1
             splitter.ajaxRequest("#pane1", "/customer/profile", { id: 42 });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.collapse(SharpKit.JavaScript.JsString)">
             <summary>
             Collapses a specified pane. Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger a collapse event.
             </summary>
             <param name="pane">The pane to be collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // collapse the pane with ID, pane1
             splitter.collapse("#pane1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.collapse(SharpKit.Html4.HtmlElement)">
             <summary>
             Collapses a specified pane. Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger a collapse event.
             </summary>
             <param name="pane">The pane to be collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // collapse the pane with ID, pane1
             splitter.collapse("#pane1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.expand(SharpKit.JavaScript.JsString)">
             <summary>
             Expands a specified pane. Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger an expand event.
             </summary>
             <param name="pane">The pane to be expanded.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // expand the pane with ID, pane1
             splitter.expand("#pane1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.expand(SharpKit.Html4.HtmlElement)">
             <summary>
             Expands a specified pane. Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger an expand event.
             </summary>
             <param name="pane">The pane to be expanded.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // expand the pane with ID, pane1
             splitter.expand("#pane1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.max(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
             <summary>
             Sets the maximum size of a pane. Setting this value will not cause the Splitter to redraw, nor will it trigger any events.
             </summary>
             <param name="pane">The pane being targetted for a new minimum size configuration value.</param>
             <param name="value">The maximum size value of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the maximum size of the pane with ID, pane1
             splitter.max("#pane1", "300px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.max(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString)">
             <summary>
             Sets the maximum size of a pane. Setting this value will not cause the Splitter to redraw, nor will it trigger any events.
             </summary>
             <param name="pane">The pane being targetted for a new minimum size configuration value.</param>
             <param name="value">The maximum size value of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").</param>
             <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the maximum size of the pane with ID, pane1
             splitter.max("#pane1", "300px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.min(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
             <summary>
             Sets the minimum size of a pane. Setting this value will not cause the Splitter to redraw, nor will it trigger any events.
             </summary>
             <param name="pane">The pane being targetted for a new minimum size configuration value.</param>
             <param name="value">The minimum size value of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the minimum size of the pane with ID, pane1
             splitter.min("#pane1", "100px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.min(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString)">
             <summary>
             Sets the minimum size of a pane. Setting this value will not cause the Splitter to redraw, nor will it trigger any events.
             </summary>
             <param name="pane">The pane being targetted for a new minimum size configuration value.</param>
             <param name="value">The minimum size value of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the minimum size of the pane with ID, pane1
             splitter.min("#pane1", "100px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.size(SharpKit.JavaScript.JsString,SharpKit.JavaScript.JsString)">
             <summary>
             Set the size of the pane. Setting this value will cause the Splitter to redraw and it will trigger layoutChange and resize events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="value">The new size of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").
             Note: This value must not exceed panes.max or be less then panes.min.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the size of the pane with ID, pane1
             splitter.size("#pane1", "200px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.size(SharpKit.Html4.HtmlElement,SharpKit.JavaScript.JsString)">
             <summary>
             Set the size of the pane. Setting this value will cause the Splitter to redraw and it will trigger layoutChange and resize events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="value">The new size of the pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%").
             Note: This value must not exceed panes.max or be less then panes.min.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // set the size of the pane with ID, pane1
             splitter.size("#pane1", "200px");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.toggle(SharpKit.JavaScript.JsString,System.Boolean)">
             <summary>
             Toggles the state of a specified pane (i.e. collapsed or expanded). Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger collapse or expand events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="expand ">(Optional) Represents the desired state of the specified pane; to be expanded (true) or collapsed (false).
             If undefined, toggle() will collapse the pane if it is expanded or will expand the pane if it is collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // toggle the state of the pane with ID, pane1
             splitter.toggle("#pane1");
             // toggle the state of the pane with ID, pane1 to be expanded
             splitter.toggle("#pane1", true);
             // toggle the state of the pane with ID, pane1 to be collapsed
             splitter.toggle("#pane1", false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.toggle(SharpKit.Html4.HtmlElement,System.Boolean)">
             <summary>
             Toggles the state of a specified pane (i.e. collapsed or expanded). Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger collapse or expand events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="expand ">(Optional) Represents the desired state of the specified pane; to be expanded (true) or collapsed (false).
             If undefined, toggle() will collapse the pane if it is expanded or will expand the pane if it is collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // toggle the state of the pane with ID, pane1
             splitter.toggle("#pane1");
             // toggle the state of the pane with ID, pane1 to be expanded
             splitter.toggle("#pane1", true);
             // toggle the state of the pane with ID, pane1 to be collapsed
             splitter.toggle("#pane1", false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.toggle(SharpKit.JavaScript.JsString)">
             <summary>
             Toggles the state of a specified pane (i.e. collapsed or expanded). Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger collapse or expand events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="expand ">(Optional) Represents the desired state of the specified pane; to be expanded (true) or collapsed (false).
             If undefined, toggle() will collapse the pane if it is expanded or will expand the pane if it is collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // toggle the state of the pane with ID, pane1
             splitter.toggle("#pane1");
             // toggle the state of the pane with ID, pane1 to be expanded
             splitter.toggle("#pane1", true);
             // toggle the state of the pane with ID, pane1 to be collapsed
             splitter.toggle("#pane1", false);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Splitter.toggle(SharpKit.Html4.HtmlElement)">
             <summary>
             Toggles the state of a specified pane (i.e. collapsed or expanded). Invoking this method will force the Splitter to redraw and it will trigger layoutChange and resize events.
             Note: Invoking the method will not trigger collapse or expand events.
             </summary>
             <param name="pane">The pane to be resized.</param>
             <param name="expand ">(Optional) Represents the desired state of the specified pane; to be expanded (true) or collapsed (false).
             If undefined, toggle() will collapse the pane if it is expanded or will expand the pane if it is collapsed.</param>
            <example>
            usage
            <code>
             // get a reference to the splitter
             var splitter = $("#splitter").data("kendoSplitter");
             // toggle the state of the pane with ID, pane1
             splitter.toggle("#pane1");
             // toggle the state of the pane with ID, pane1 to be expanded
             splitter.toggle("#pane1", true);
             // toggle the state of the pane with ID, pane1 to be collapsed
             splitter.toggle("#pane1", false);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Splitter.collapseEvent">
             <summary>
             Triggered when a pane of a Splitter is collapsed.
             </summary>
            <example>
            usage
            <code>
             // event handler for collapse
             var onCollapse = function(e) {
                 // access the collapsed item via e.item (HTMLElement)
             };
             
             // attach collapse event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 collapse: onCollapse
             });
             
             // detach collapse event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("collapse", onCollapse);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Splitter.contentLoad">
             <summary>
             Triggered when the content for a pane has finished loading.
             </summary>
            <example>
            usage
            <code>
             // event handler for contentLoad
             var onContentLoad = function(e) {
                 // access the loaded pane via e.pane (HTMLElement)
             };
             
             // attach contentLoad event handler during initialization
             var splitter = $("#splitter").kendoSplitter({
                 contentLoad: onContentLoad
             });
             
             // detach contentLoad event handler via unbind()
             splitter.data("kendoSplitter").unbind("contentLoad", onContentLoad);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Splitter.expandEvent">
             <summary>
             Triggered when a pane of a Splitter is expanded.
             </summary>
            <example>
            usage
            <code>
             // event handler for expand
             var onExpand = function(e) {
                 // access the expanded item via e.item (HTMLElement)
             };
             
             // attach expand event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 expand: onExpand
             });
             
             // detach expand event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("expand", onExpand);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Splitter.layoutChange">
             <summary>
             Fires when the splitter layout has changed
             </summary>
            <example>
            usage
            <code>
             // event handler for resize
             var onLayoutChange = function(e) {
                 // ...
             };
             
             $("#splitter").kendoSplitter({
                 layoutChange: onLayoutChange
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Splitter.resize">
             <summary>
             Triggered when a pane is resized.
             </summary>
            <example>
            usage
            <code>
             // event handler for resize
             var onResize = function(e) {
                 // ...
             };
             
             // attach resize event handler during initialization
             var splitter = $("#splitter").kendoSplitter({
                 resize: onResize
             });
             
             // detach resize event handler via unbind()
             splitter.data("kendoSplitter").unbind("resize", onResize);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.Splitter.element">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.orientation">
            <summary>
            (default: horizontal) Specifies the orientation of the Splitter.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.panes">
             <summary>
             An array of pane definitions.
             </summary>
            <example>
            usage
            <code>
            $("#splitter").kendoSplitter({
                panes: [
                    { size: "200px", min: "100px", max: "300px" },
                    { size: "20%", resizable: false },
                    { collapsed: true, collapsible: true }
                ]
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.expand">
            <summary>
            Triggered when a pane of a Splitter is expanded.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.collapse">
            <summary>
            Triggered when a pane of a Splitter is collapsed.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.contentLoad">
            <summary>
            Triggered when the content for a pane has finished loading.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterConfiguration.resize">
            <summary>
            Triggered when a pane is resized.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.collapsed">
            <summary>
            (default: false) Specifies whether a pane is initially collapsed (true) or expanded (true).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.collapsible">
            <summary>
            (default: false) Specifies whether a pane is collapsible (true) or not collapsible (false).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.contentUrl">
            <summary>
            (default: true) Specifies the URL from which to load the content of a pane.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.contentUrlString">
            <summary>
            (default: true) Specifies the URL from which to load the content of a pane.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.max">
            <summary>
            Specifies the maximum size of a pane defined as pixels
            (i.e. "200px") or as a percentage (i.e. "50%"). The size of a resized pane cannot exceed the defined maximum size.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.min">
            <summary>
            Specifies the minimum size of a pane defined as pixels
            (i.e. "200px") or as a percentage (i.e. "50%"). The size of a resized pane cannot be less than the defined minimum size.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.resizable">
            <summary>
            (default: true) Specifies whether a pane is resizable (true) or not resizable (false).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.scrollable">
            <summary>
            (default: true) Specifies whether a pane is scrollable (true) or not scrollable (false).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SplitterPaneConfiguration.size">
            <summary>
            Specifies the size of a pane defined as pixels (i.e. "200px") or as a percentage (i.e. "50%"). Note: This value must not exceed panes.max or be less then panes.min
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.activateTab(SharpKit.JavaScript.JsString)">
             <summary>
             Activates a tab specified as a selector. Note: Invoking this method will not trigger any events.
             </summary>
             <param name="item">The target tab, specified as a selector, to be activated.</param>
             <returns> Returns true if successful; otherwise, false.</returns>
            <example>
            usage
            <code>
            var tabToActivate = $("#tab1");
             $("#tabStrip").data("kendoTabStrip").activateTab(tabToActivate);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.append(SharpKit.JavaScript.JsString)">
            <summary>
            Appends a tab to the collection of tabs in a TabStrip.
            </summary>
            <param name="tab">Target tab, specified as a JSON object. You can pass tab text, content or contentUrl here.
            Can handle an HTML string or array of such strings or JSON.</param>
            <returns>Returns the TabStrip object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.contentElement(SharpKit.JavaScript.JsNumber)">
             <summary>
             Obtains the DOM element representing a tab by its index in the TabStrip.
             </summary>
             <param name="itemIndex">The index of the tab in the TabStrip.</param>
             <returns>The DOM element representing a tab by its index in the TabStrip.</returns>
            <example>
            usage
            <code>
            var tabContent = $("#tabStrip").data("kendoTabStrip").contentElement(0);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.deactivateTab(SharpKit.JavaScript.JsString)">
             <summary>
             Deactivates a tab specified as a selector. Note: Invoking this method will not trigger any events.
             </summary>
             <param name="item">The target tab, specified as a selector, to be deactivated.</param>
            <example>
            usage
            <code>
            var tabToDeactivate = $("#tab1");
             $("#tabStrip").data("kendoTabStrip").deactivateTab(tabToActivate);
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.disable(SharpKit.JavaScript.JsString)">
            <summary>
            Disables a tab(s) of a TabStrip.
            </summary>
            <param name="element">The target tab(s), specified as a selector, to be disabled.</param>
            <returns>Returns the TabStrip object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.enable(SharpKit.JavaScript.JsString,System.Boolean)">
            <summary>
            Disables (false) or enables (true) a tab(s) of a TabStrip.
            </summary>
            <param name="element">The target tab(s), specified as a selector, to be enabled (true) or disabled (false).</param>
            <param name="enable">Desired state of the tab(s) specified by the selector; enabled (true) or disabled (false).</param>
            <returns>Returns the TabStrip object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.insertAfter(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts a newly-created tab after a specified tab.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.insertAfter(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},System.Object)">
             <summary>
             Inserts a newly-created tab after a specified tab.
             </summary>
             <param name="item">Target item, specified as a JSON object. Can also handle an array of such objects.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
             // get a reference to the menu widget
             var menu = $("#menu").data("kendoMenu");
             //
             menu.insertAfter(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                                 // Allows use of HTML for item text
                     content: "text"                                 // content within an item
                 },
                 {
                     text: "Item 3",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     items: [{                                    // Sub item collection
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 4",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.insertBefore(SharpKit.JavaScript.JsString,System.Object)">
             <summary>
             Inserts a newly-created tab before a specified tab.
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an TML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>TabStrip Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            panelBar.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.insertBefore(SharpKit.JavaScript.JsArray{SharpKit.JavaScript.JsString},System.Object)">
             <summary>
             Inserts a newly-created tab before a specified tab.
             </summary>
             <param name="item">Target item, specified as a JSON object. You can pass item text, content or contentUrl here. Can handle an TML string or array of such strings or JSON.</param>
             <param name="referenceItem">A reference item to append the new item in.</param>
             <returns>TabStrip Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            panelBar.insertBefore(
                 [{
                     text: "Item 1",
                     url: "http://www.kendoui.com"                // Link URL if navigation is needed, optional.
                 },
                 {
                     text: "<b>Item 2</b>",
                     encoded: false,                              // Allows use of HTML for item text
                     content: "text"                              // Content for the content element
                 },
                 {
                     text: "Item 3",
                     contentUrl: "partialContent.html"            // From where to load the item content
                 },
                 {
                     text: "Item 4",
                     imageUrl: "http://www.kendoui.com/test.jpg", // Item image URL, optional.
                     expanded: true,                              // item is rendered expanded
                     items: [{                                    // Sub item collection.
                          text: "Sub Item 1"
                     },
                     {
                          text: "Sub Item 2"
                     }]
                 },
                 {
                     text: "Item 5",
                     spriteCssClass: "imageClass3"                // Item image sprite CSS class, optional.
                 }],
                 referenceItem
             );
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.reload(SharpKit.JavaScript.JsString)">
            <summary>
            Reloads TabStrip tab(s) via AJAX.
            </summary>
            <param name="element">The target tab(s), specified as a selector, to be reloaded via AJAX.</param>
            <returns>Returns the TabStrip object to support chaining.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.remove(SharpKit.JavaScript.JsString)">
             <summary>
             Removes a specified tab from a TabStrip.
             </summary>
             <param name="element">The target tab(s), specified as a selector, to be removed.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            tabStrip.remove("#tab1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.select(SharpKit.JavaScript.JsString)">
             <summary>
             Selects the specified tab(s) within a TabStrip. If called without arguments, it returns the currently selected tab.
             </summary>
             <param name="element">or index The target tab(s), specified as a selector or index in the tab group.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            tabStrip.select("#tab1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.select(SharpKit.JavaScript.JsNumber)">
             <summary>
             Selects the specified tab(s) within a TabStrip. If called without arguments, it returns the currently selected tab.
             </summary>
             <param name="element">or index The target tab(s), specified as a selector or index in the tab group.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            tabStrip.select("#tab1");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TabStrip.select">
             <summary>
             Selects the specified tab(s) within a TabStrip. If called without arguments, it returns the currently selected tab.
             </summary>
             <param name="element">or index The target tab(s), specified as a selector or index in the tab group.</param>
             <returns>Returns the TabStrip object to support chaining.</returns>
            <example>
            usage
            <code>
            tabStrip.select("#tab1");
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TabStrip.activate">
             <summary>
             Triggered just after a tab is being made visible, but before the end of the animation
             </summary>
            <example>
            usage
            <code>
             // event handler for activate
             var onActivate = function(e) {
                 // access the activated item via e.item (HTMLElement)
             };
             
             // attach activate event handler during initialization
             var panelBar = $("#panelBar").kendoPanelBar({
                 activate: onActivate
             });
             
             // detach activate event handler via unbind()
             panelBar.data("kendoPanelBar").unbind("activate", onActivate);
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TabStrip.contentLoad">
             <summary>
             Fires when content is fetched from an AJAX request.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                contentLoad: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TabStrip.error">
             <summary>
             Triggered when an AJAX request results in an error.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                error: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TabStrip.selectEvent">
             <summary>
             Triggered before a tab is selected.
             </summary>
            <example>
            usage
            <code>
             // event handler for select
             var onSelect = function(e) {
                 // access the selected item via e.item (jQuery object)
             };
             
             // attach select event handler during initialization
             var combobox = $("#combobox").kendoComboBox({
                 select: onSelect
             });
             
             // detach select event handler via unbind()
             combobox.data("kendoComboBox").unbind("select", onSelect);
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.animation">
             <summary>
             A collection of visual animations used when TabStrip tab are selected through user interactions. Setting this option to false will disable all animations.
             </summary>
            <example>
            usage
            <code>
            $("#panelBar").kendoPanelBar({
                animation: {
                    // fade-out closing items over 1000 milliseconds
                    close: {
                        duration: 1000,
                        effects: "fadeOut"
                    },
                   // fade-in and expand opening items over 500 milliseconds
                   open: {
                       duration: 500,
                       effects: "expandVertical fadeIn"
                   }
               }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.collapsible">
            <summary>
            (default: false) Specifies whether the TabStrip should be able to collapse completely when clicking an expanded tab.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.contentUrls">
            <summary>
            Undocument property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataContentField">
             <summary>
             (default: "") Sets the field of the data item that provides the text content of the tab content element.
             </summary>
            <example>
            usage
            <code>
             $("#tabstrip").kendoTabStrip({
                 dataTextField: "Name",
                 dataContentField: "Content",
                 dataSource: data
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataContentUrlField">
             <summary>
             (default: "") Sets the field of the data item that provides the URL for the ajax loaded tab content.
             </summary>
            <example>
            usage
            <code>
             $("#tabstrip").kendoTabStrip({
                 dataTextField: "Name",
                 dataContentUrlField: "ContentUrl",
                 dataSource: data
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataImageUrlField">
             <summary>
             (default: "") Sets the field of the data item that provides the image URL of the tab.
             </summary>
            <example>
            usage
            <code>
             $("#tabstrip").kendoTabStrip({
                 dataTextField: "Name",
                 dataImageUrlField: "ImageUrl",
                 dataSource: data
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataSpriteCssClass">
             <summary>
             (default: "") Sets the field of the data item that provides the CSS class of the tab.
             </summary>
            <example>
            usage
            <code>
             $("#tabstrip").kendoTabStrip({
                 dataTextField: "Name",
                 dataSpriteCssClass: "CssClass ",
                 dataSource: data
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataTextField">
             <summary>
             (default: "") Sets the field of the data item that provides the text name of the tab.
             </summary>
            <example>
            usage
            <code>
            $("#tabstrip").kendoTabStrip({
                dataTextField: "Name",
                dataSource: data
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.dataUrlField">
             <summary>
             (default: "") Sets the field of the data item that provides the link URL for the tab.
             </summary>
            <example>
            usage
            <code>
            $("#tabstrip").kendoTabStrip({
                dataTextField: "Name",
                dataUrlField: "Url",
                dataSource: data
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.select">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.activate">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.contentLoad">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripConfiguration.error">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripSelectEventData.item">
            <summary>
            The selected item chosen by a user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripSelectEventData.contentElement">
            <summary>
            The content element of the tab going to be selected.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripErroEventData.xhr">
            <summary>
            The jqXHR object used to load the content
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TabStripErroEventData.status">
            <summary>
            The returned status.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.close">
             <summary>
             Closes the drop-down list of a TimePicker
             </summary>
            <example>
            usage
            <code>
            $("timepicker").data("kendoTimePicker").close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.enable(System.Boolean)">
             <summary>
             Enables or disables a TimePicker.
             </summary>
             <param name="enable">Enables (true or undefined) or disables (false) a DateTimePicker.</param>
            <example>
            usage
            <code>
            $("timepicker").data("kendoTimePicker").enable();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.enable">
             <summary>
             Enables or disables a TimePicker.
             </summary>
             <param name="enable">Enables (true or undefined) or disables (false) a DateTimePicker.</param>
            <example>
            usage
            <code>
            $("timepicker").data("kendoTimePicker").enable();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.max(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the max value of the TimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.max(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the max value of the TimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.max">
             <summary>
             Gets the max value of the TimePicker.
             </summary>
             <param name="value">The max date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
             // get the max value of the calendar.
            var max = calendar.max();
             // set the max value of the calendar.
            calendar.max(new Date(2100, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.min(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the min value of the TimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            calendar.min(new Date(1900, 0, 1));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.min(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the min value of the TimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.min">
             <summary>
             Gets the min value of the TimePicker.
             </summary>
             <param name="value">The min  date to set.</param>
            <example>
            usage
            <code>
             // get a reference to the calendar widget
            var calendar = $("#calendar").data("kendoCalendar");
            
             // get the min value of the calendar.
            var min = calendar.min();
            
             // set the min value of the calendar.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.open">
             <summary>
             Opens the drop-down list of a TimePicker.
             </summary>
            <example>
            usage
            <code>
             $("timepicker").data("kendoTimePicker").open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.value(SharpKit.JavaScript.JsString)">
             <summary>
             Sets the value of the TimePicker.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.value(SharpKit.JavaScript.JsDate)">
             <summary>
             Sets the value of the TimePicker.
             </summary>
             <param name="value">The value to set.</param>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TimePicker.value">
             <summary>
             Gets the value of the TimePicker.
             </summary>
            <example>
            usage
            <code>
            var combobox = $("#combobox").data("kendoComboBox");
             // get the value of the combobox.
             var value = combobox.value();
             // set the value of the combobox.
             combobox.value("1"); //looks for item which has value "1"
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TimePicker.change">
             <summary>
             Triggered when the underlying value of a TimePicker is changed.
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                change: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TimePicker.closeEvent">
             <summary>
             Fires when the time drop-down list is closed
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                close: function(e) {
                    // handle event
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TimePicker.openEvent">
             <summary>
             Fires when the time drop-down list is opened
             </summary>
            <example>
            usage
            <code>
            $("#comboBox").kendoComboBox({
                open: function(e) {
                        // handle event
                    }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.animation">
             <summary>
             Animations to be used for opening/closing the popup. Setting to false will turn of the animation.
             </summary>
            <example>
            usage
            <code>
             $("#timepicker").kendoTimePicker({
                 animation: {
                     close: {
                         effects: "fadeOut",
                         duration: 300,
                         hide: true
                         show: false
                     }
                 }
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.change">
             <summary>
             Triggered when the underlying value of a TimePicker is changed.
             </summary>
             <example>
             Attach change event handler during initialization; detach via unbind()
             <code>
             // event change for expand
             var onChange = function(e) {
                 // ...
             };
             // attach change event handler during initialization
             var timePicker = $("#timePicker").kendoTimePicker({
                change: onChange
            });
             // detach change event handler via unbind()
             timePicker.data("kendoTimePicker").unbind("change", onChange);
             </code>
             </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.culture">
             <summary>
             (default: en-US) Specifies the culture info used by the widget.
             </summary>
            <example>
            usage
            <code>
             // specify on widget initialization
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.dates">
             <summary>
             Specifies a list of dates, which are shown in the time drop-down list. If not set, the DateTimePicker will auto-generate the available times.
             </summary>
            <example>
            usage
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                dates: [new Date(2000, 10, 10, 10, 0, 0), new Date(2000, 10, 10, 30, 0)] //the drop-down list will consist only two entries - "10:00 AM" and "10:30 AM"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.format">
            <summary>
            (default: h:mm tt) Specifies the format, which is used to format the value of the TimePicker displayed in the input. The format also will be used to parse the input.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.interval">
             <summary>
             (default: 30) Specifies the interval, between values in the popup list, in minutes.
             </summary>
            <example>
            usage
            <code>
            $("#dateTimePicker").kendoDateTimePicker({
                interval: 15
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.max">
            <summary>
            (default: 00:00) Specifies the end value in the popup list.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.min">
            <summary>
            (default: 00:00) Specifies the start value in the popup list.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.parseFormats">
             <summary>
             Specifies the formats, which are used to parse the value set with the value method or by direct input.
             If not set the value of the options.format will be used. Note that value of the format option is always used.
             </summary>
            <example>
            usage
            <code>
            $("#timePicker").kendoTimePicker({
                format: "h:mm tt",
                parseFormats: ["HH:mm"] //format also will be added to parseFormats
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TimePickerConfiguration.value">
            <summary>
            (default: null) Specifies the selected time.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.append(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlNode)">
             <summary>
             Appends a node to a group of a TreeView. This method may also be used to reorder the nodes of a TreeView.
             </summary>
             <param name="nodeData">A JSON-formatted string or selector that specifies the node to be appended.</param>
             <param name="parentNode">The node that will contain the newly appended node. If not specified, the new node will be appended to the root group of the TreeView.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.append({ text: "HTML5" }, $("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.append(SharpKit.JavaScript.JsString)">
             <summary>
             Appends a node to a group of a TreeView. This method may also be used to reorder the nodes of a TreeView.
             </summary>
             <param name="nodeData">A JSON-formatted string or selector that specifies the node to be appended.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.append({ text: "HTML5" }, $("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.collapse(SharpKit.JavaScript.JsString)">
             <summary>
             Collapses nodes.
             </summary>
             <param name="nodes">The nodes that are to be collapsed.</param>
            <example>
            usage
            <code>
            var treeview = $("#treeview").data("kendoTreeView");
            
             // collapse the node with id="firstItem"
            treeview.collapse(document.getElementById("firstItem"));
            
             // collapse all nodes
            treeview.collapse(".k-item");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.dataItem(SharpKit.jQuery.jQuery)">
            <summary>
            Returns the model dataItem that corresponds to a TreeView node
            </summary>
            <param name="node">The element or selector that specifies a node.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.dataItem(SharpKit.Html4.HtmlElement)">
            <summary>
            Returns the model dataItem that corresponds to a TreeView node
            </summary>
            <param name="node">The element or selector that specifies a node.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.dataItem(SharpKit.JavaScript.JsString)">
            <summary>
            Returns the model dataItem that corresponds to a TreeView node
            </summary>
            <param name="node">The element or selector that specifies a node.</param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.detach(SharpKit.JavaScript.JsString)">
             <summary>
             Removes a node from a TreeView, but keeps its jQuery.data() objects.
             </summary>
             <param name="node">The node that is to be detached.</param>
             <returns>The node that has been detached.</returns>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            var firstItem = $("#firstItem");
            firstItem.data("id", 1);
            treeview.detach(firstItem);
            firstItem.data("id") == 1;
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.enable(SharpKit.JavaScript.JsString,System.Boolean)">
             <summary>
             Enables or disables nodes.
             </summary>
             <param name="nodes">The nodes that are to be enabled/disabled.</param>
             <param name="enable">(optional, default: true) Whether the nodes should be enabled or disabled.</param>
            <example>
            usage
            <code>
            var treeview = $("#treeview").data("kendoTreeView");
             
             // disable the node with id="firstItem"
             treeview.enable(document.getElementById("firstItem"), false);
             
             // enable all nodes
             treeview.enable(".k-item");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.enable(SharpKit.JavaScript.JsString)">
             <summary>
             Enables or disables nodes.
             </summary>
             <param name="nodes">The nodes that are to be enabled/disabled.</param>
             <param name="enable">(optional, default: true) Whether the nodes should be enabled or disabled.</param>
            <example>
            usage
            <code>
            var treeview = $("#treeview").data("kendoTreeView");
             
             // disable the node with id="firstItem"
             treeview.enable(document.getElementById("firstItem"), false);
             
             // enable all nodes
             treeview.enable(".k-item");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.expand(SharpKit.JavaScript.JsString)">
             <summary>
             Expands nodes.
             </summary>
             <param name="nodes">The nodes that are to be expanded..</param>
            <example>
            usage
            <code>
             var treeview = $("#treeview").data("kendoTreeView");
             
             // expands the node with id="firstItem"
             treeview.expand(document.getElementById("firstItem"));
             
             // expands all nodes
             treeview.expand(".k-item");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.findByText(SharpKit.JavaScript.JsString)">
             <summary>
             Searches a TreeView for a node that has specific text.
             </summary>
             <param name="text">The text that is being searched for.</param>
             <returns>All nodes that have the text.</returns>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            var foundNode = treeView.findByText("CSS3 is da bomb!");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.findByUid(SharpKit.JavaScript.JsString)">
             <summary>
             Searches a TreeView for a node with the given unique identifier. Applicable when the widget is bound to a HierarchicalDataSource.
             </summary>
             <param name="text">The text that is being searched for.</param>
             <returns>All nodes that have the text.</returns>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            var node = treeView.findByUid("95c1925d-a779-47fc-8420-b4274f01c037");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.insertAfter(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlNode)">
             <summary>
             Inserts a node after a specified node in a TreeView. This method may also be used to reorder the nodes of a TreeView.
             </summary>
             <param name="nodeData">A JSON-formatted string or selector that specifies the node to be inserted.</param>
             <param name="referenceNode">The node that will be preceed the newly-appended node.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.insertAfter({ text: "JavaScript" }, $("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.insertBefore(SharpKit.JavaScript.JsString,SharpKit.Html4.HtmlNode)">
             <summary>
             Inserts a node before another node. This method may also be used to reorder the nodes of a TreeView.
             </summary>
             <param name="nodeData">A JSON-formatted string or selector that specifies the node to be inserted.</param>
             <param name="referenceNode">The node that will be preceed the newly-appended node.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.insertBefore({ text: "CSS3" }, $("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.remove(SharpKit.JavaScript.JsString)">
             <summary>
             Removes a node from a TreeView.
             </summary>
             <param name="node">The node that is to be removed.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.remove($("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.select">
            <summary>
            Gets the selected node of a TreeView.
            </summary>
            <returns>The selected node of a TreeView.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.select(SharpKit.JavaScript.JsString)">
            <summary>
            Sets the selected node of a TreeView.
            </summary>
            <param name="node">If provided, the node of a TreeView that should be selected.</param>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.text(SharpKit.JavaScript.JsString)">
             <summary>
             Gets the text of a node in a TreeView.
             </summary>
             <param name="node">The node of which the text is being retrieved.</param>
             <returns>The text of a node.</returns>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            var nodeText = treeView.text($("#firstItem"));
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.TreeView.toggle(SharpKit.JavaScript.JsString)">
             <summary>
             Toggles the node of a TreeView between its expanded and collapsed states.
             </summary>
             <param name="node">The node that should be toggled.</param>
            <example>
            usage
            <code>
            var treeView = $("#treeView").data("kendoTreeView");
            treeView.toggle($("#firstItem"));
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.collapseEvent">
            <summary>
            Triggered before a subgroup gets collapsed.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.drag">
            <summary>
            Triggered while a node is being dragged.
            Pre-defined status classes are:
            k-insert-top - Indicates that the item will be inserted on top.
            k-insert-middle - Indicates that the item will be inserted in the middle.
            k-insert-bottom - Indicates that the item will be inserted at the bottom.
            k-add - Indicates that the item will be added/appended.
            k-denied - Indicates an invalid operation
            Using this class will automatically make the drop operation invalid, so there will be no need to call setValid(false) in the drop event.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.dragend">
            <summary>
            Triggered after a node has been dropped.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.dragstart">
             <summary>
             Triggered before the dragging of a node starts.
             </summary>
            <example>
            usage
            <code>
            treeview.data("kendoTreeView").bind("dragstart", function(e) {
                if ($(e.sourceNode).parentsUntil(".k-treeview", ".k-item").length == 0) {
                    e.preventDefault();
                }
            });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.drop">
            <summary>
            Triggered when a node is being dropped.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.expandEvent">
            <summary>
            Triggered before a subgroup gets expanded.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.TreeView.selectEvent">
            <summary>
            Triggered when a node gets selected.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.animation">
            <summary>
            A collection of visual animations used when items are expanded or collapsed through user interaction. Setting this option to false will disable all animations.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dataImageUrlField">
             <summary>
             (default: null) Sets the field of the data item that provides the image URL of the treeview nodes.
             </summary>
            <example>
            usage
            <code>
             $("#tabstrip").kendoTabStrip({
                 dataTextField: "Name",
                 dataImageUrlField: "ImageUrl",
                 dataSource: data
             });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dataSource">
            <summary>
            The data that the TreeView will be bound to.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dataSpriteCssClassField">
             <summary>
             (default: null) Sets the field of the data item that provides the sprite CSS class of the treeview nodes.
             </summary>
            <example>
            usage
            <code>
            var items = [
                { id: 1, text: "Tea", sprite: "icon-tea" },
                { id: 2, text: "Coffee", sprite: "icon-coffee" }
            ];
            
            $("#treeview").kendoTreeView({
                dataSource: items,
                dataSpriteCssClassField: "sprite"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dataTextField">
             <summary>
             (default: null) Sets the field of the data item that provides the text content of the treeview nodes.
             </summary>
            <example>
            usage
            <code>
            $("#tabstrip").kendoTabStrip({
                dataTextField: "Name",
                dataSource: data
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dataUrlField">
             <summary>
             (default: null) Sets the field of the data item that provides the link URL of the treeview nodes.
             </summary>
            <example>
            usage
            <code>
            $("#tabstrip").kendoTabStrip({
                dataTextField: "Name",
                dataUrlField: "Url",
                dataSource: data
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.dragAndDrop">
            <summary>
            (default: false) Disables (false) or enables (true) drag-and-drop on the nodes of a TreeView.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.loadOnDemand">
            <summary>
            (default: true) Indicates whether the child datasources should be fetched lazily, when parent groups get expanded.
            Setting this to false causes all child dataSources to be loaded at initialization time.
            Note: when initializing a TreeView from array (rather than from a HierarchicalDataSource instance), the default value of this option is false.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.template">
             <summary>
             Template for rendering of the nodes of the treeview.
             </summary>
            <example>
            usage
            <code>
            $("#treeview").kendoTreeView({
                template: "#= item.text # <a href='\\#'>Delete</a>"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewConfiguration.templateFunction">
             <summary>
             Template for rendering of the nodes of the treeview.
             </summary>
            <example>
            usage
            <code>
            $("#treeview").kendoTreeView({
                template: "#= item.text # <a href='\\#'>Delete</a>"
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationConfiguration.collapse">
            <summary>
            The animation that will be used when collapsing items.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationConfiguration.expand">
            <summary>
            The animation that will be used when expanding items.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationCollapseConfiguration.duration">
             <summary>
             (default: 200) The number of milliseconds used for the animation when a node is expanded.
             </summary>
            <example>
            usage
            <code>
            $("#treeView").kendoTreeView({
                animation: {
                    collapse: {
                        duration: 1000
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationCollapseConfiguration.effects">
             <summary>
             A whitespace-delimited string of animation effects that are utilized when a TreeView node is collapsed. Options include "fadeOut".
             </summary>
            <example>
            usage
            <code>
            $("#treeView").kendoTreeView({
                animation: {
                    collapse: {
                        duration: 5000,
                        effects: "fadeOut"
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationExpandConfiguration.duration">
             <summary>
             (default: 200) The number of milliseconds used for the animation when a node is expanded.
             </summary>
            <example>
            usage
            <code>
            $("#treeView").kendoTreeView({
                animation: {
                    collapse: {
                        duration: 1000
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationExpandConfiguration.effects">
             <summary>
             (default: "expandVertical") A whitespace-delimited string of animation effects that are utilized when a TreeView node is expanded. Options include "expandVertical" and "fadeIn".
             </summary>
            <example>
            usage
            <code>
            $("#treeView").kendoTreeView({
                animation: {
                    collapse: {
                        duration: 5000,
                        effects: "fadeOut"
                    }
                }
            });
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewAnimationExpandConfiguration.show">
            <summary>
            (default: true)
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.sourceNode">
            <summary>
            The node that is being dragged.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.dropTarget">
            <summary>
            The element that the node is placed over.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.pageX">
            <summary>
            The x coordinate of the mouse.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.pageY">
            <summary>
            The y coordinate of the mouse.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.statusClass">
            <summary>
            The status that the drag clue shows.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragEventData.setStatusClass">
            <summary>
            Allows a custom drag clue status to be set.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragendEventData.sourceNode">
            <summary>
            The node that is being dropped.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragendEventData.destinationNode">
            <summary>
            The node that the sourceNode is being dropped upon.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragendEventData.dropPosition">
            <summary>
            Shows where the source has been dropped. One of the values over, before, or after.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDragstartEventData.sourceNode">
            <summary>
            The node that will be dragged.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.sourceNode">
            <summary>
            The node that is being dropped.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.destinationNode">
            <summary>
            The node that the sourceNode is being dropped upon.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.valid">
            <summary>
            Whether this drop operation is permitted.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.setValid">
            <summary>
            Allows the drop to be prevented.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.dropTarget">
            <summary>
            The element that the node is placed over.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.TreeViewDropEventData.dropPosition">
            <summary>
            Shows where the source will be dropped. One of the values over, before, or after.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Upload.disable">
             <summary>
             Disables the upload.
             </summary>
            <example>
            usage
            <code>
            var upload = $("#upload").data("kendoUpload");
             
             // disables the upload
             upload.enable();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Upload.destroy">
             <summary>
             Prepares the Upload for safe removal from the DOM. Detaches event handlers and removes data entries in order to avoid memory leaks.
             </summary>
            <example>
            usage
            <code>
             // Destroy widget and detach events
             $("#upload").data("kendoUpload").destroy();
             
             // Remove widget element from DOM
             $("#upload").closest(".k-upload").remove();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Upload.enable">
             <summary>
             Enables the upload.
             </summary>
            <example>
            usage
            <code>
             var upload = $("#upload").data("kendoUpload");
             
             // enables the upload
             upload.enable();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Upload.toggle(System.Boolean)">
             <summary>
             Toggles the upload enabled state.
             </summary>
             <param name="enable">(Optional) The new enabled state.</param>
            <example>
            usage
            <code>
            var upload = $("#upload").data("kendoUpload");
             
             // toggles the upload enabled state
             upload.toggle();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Upload.toggle">
             <summary>
             Toggles the upload enabled state.
             </summary>
             <param name="enable">(Optional) The new enabled state.</param>
            <example>
            usage
            <code>
            var upload = $("#upload").data("kendoUpload");
             
             // toggles the upload enabled state
             upload.toggle();
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.cancel">
             <summary>
             Fires when the upload has been cancelled while in progress.
             Note: The cancel event fires only when the upload is in async mode.
             </summary>
            <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 cancel: onCancel
             });
             
             function onCancel(e) {
                 // Array with information about the uploaded files
                 var files = e.files;
             
                 // Process the Cancel event
             }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.complete">
             <summary>
             Fires when all active uploads have completed either successfully or with errors.
             Note: The complete event fires only when the upload is in async mode.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 complete: onComplete
             });
             
             function onComplete(e) {
                 // The upload is now idle
             }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.error">
             <summary>
             Fires when an upload / remove operation has failed.
             Note: The error event fires only when the upload is in async mode.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 error: onError
             });
             
             function onError(e) {
                 // Array with information about the uploaded files
                 var files = e.files;
             
                 if (e.operation == "upload") {
                     alert("Failed to uploaded " + files.length + " files");
                 }
             }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.progress">
             <summary>
             Fires when upload progress data is available.
             Note: The progress event fires only when the upload is in async mode.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 progress: onProgress
             });
             
             function onProgress(e) {
                 // Array with information about the uploaded files
                 var files = e.files;
             
                 console.log(e.percentComplete);
             }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.remove">
             <summary>
             Fires when an uploaded file is about to be removed. Cancelling the event will prevent the remove.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                // ...
                remove: onRemove
            });
            
            function onRemove(e) {
                // Array with information about the removed files
                var files = e.files;
            
                // Process the Remove event
                // Optionally cancel the remove operation by calling
                // e.preventDefault()
            }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.select">
             <summary>
             Triggered when a file(s) is selected. Note: Cancelling this event will prevent the selection from occurring.
             </summary>
             <example>
            usage
            <code>
            var onSelect = function(e) {
                 $.each(e.files, function(index, value) {
                     console.log("Name: " + value.name);
                     console.log("Size: " + value.size + " bytes");
                     console.log("Extension: " + value.extension);
                 });
             };
             
             // initialize and configure an Upload widget with a select event handler
             $("#photos").kendoUpload({
                 // ...
                 select: onSelect
             });
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.success">
             <summary>
             Fires when an upload / remove operation has been completed successfully.
             Note: The success event fires only when the upload is in async mode.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 success: onSuccess
             });
             
             function onSuccess(e) {
                 // Array with information about the uploaded files
                 var files = e.files;
             
                 if (e.operation == "upload") {
                     alert("Successfully uploaded " + files.length + " files");
                 }
             }
            </code>
            </example>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Upload.upload">
             <summary>
             Fires when one or more files are about to be uploaded. Cancelling the event will prevent the upload.
             Note: The upload event fires only when the upload is in async mode.
             </summary>
             <example>
            usage
            <code>
            $("#photos").kendoUpload({
                 // ...
                 upload: onUpload
             });
             
             function onUpload(e) {
                 // Array with information about the uploaded files
                 var files = e.files;
             
                 // Check the extension of each file and abort the upload if it is not .jpg
                 $.each(files, function() {
                     if (this.extension != ".jpg") {
                         alert("Only .jpg files can be uploaded")
                         e.preventDefault();
                     }
                 });
             }
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadConfiguration.async">
            <summary>
            Configures the ability to upload a file(s) in an asynchronous manner. Please refer to the async mode help topic for more details.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadConfiguration.localization">
            <summary>
            Sets the strings rendered by the Upload.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadConfiguration.enabled">
            <summary>
            (default: true) Enables (true) or disables (false) an Upload. A disabled Upload may be re-enabled via enable().
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadConfiguration.multiple">
            <summary>
            (default: true) Enables (true) or disables (false) the ability to select multiple files. If false, users will be able to select only one file at a time.
            Note: This option does not limit the total number of uploaded files in an asynchronous configuration.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadConfiguration.showFileList">
            <summary>
            (default: true)Enables (true) or disables (false) the ability to display a file listing for uploading a file(s).
            Disabling a file listing may be useful you wish to customize the UI; use the client-side events to build your own UI..
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.autoUpload">
            <summary>
            (default: true) The selected files will be uploaded immediately by default. You can change this behavior by setting autoUpload to false.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.batch">
            <summary>
            (default: false) The selected files will be uploaded in separate requests, if this is supported by the browser. You can change this behavior by setting batch to true.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.removeField">
            <summary>
            (default: "fileNames") The name of the form field submitted to the Remove URL.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.removeUrl">
            <summary>
            The URL of the handler responsible for removing uploaded files (if any).
            The handler must accept POST requests containing one or more "fileNames" fields specifying the files to be deleted.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.removeVerb">
            <summary>
            (default: "DELETE") The HTTP verb to be used by the remove action.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.saveField">
            <summary>
            The name of the form field submitted to the save URL. The default value is the input name.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadAsyncConfiguration.saveUrl">
             <summary>
            The URL of the handler that will receive the submitted files.
            The handler must accept POST requests containing one or more fields with the same name as the original input name.
             </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.cancel">
            <summary>
            Sets the text of the cancel button text.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.dropFilesHere">
            <summary>
            (default: "drop files here to upload") Sets the drop zone hint.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.remove">
            <summary>
            Sets the text of the remove button text.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.retry">
            <summary>
            Sets the text of the retry button text.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.select">
            <summary>
            Sets the "Select..." button text.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.statusFailed">
            <summary>
            Sets the status message for failed uploads.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.statusUploaded">
            <summary>
            Sets the status message for uploaded files.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.statusUploading">
            <summary>
            Sets the status message for files that are being uploaded.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadLocalizationConfiguration.uploadSelectedFiles">
            <summary>
            Sets the text of the "Upload files" button.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadCancelSelectEventData.filesArray">
            <summary>
            List of the files that were uploaded or removed .
            Each file has:
            name
            extension - the file extension inlcuding the leading dot - ".jpg", ".png", etc.
            size - the file size in bytes (null if not available)
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadCancelSelectEventData.files">
            <summary>
            List of the files that were uploaded or removed .
            Each file has:
            name
            extension - the file extension inlcuding the leading dot - ".jpg", ".png", etc.
            size - the file size in bytes (null if not available)
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadFileConfig.extension">
            <summary>
             the file extension inlcuding the leading dot - ".jpg", ".png", etc.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadFileConfig.size">
            <summary>
            the file size in bytes (null if not available)
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadErrorEventData.files">
            <summary>
            List of the files that were uploaded or removed
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadErrorEventData.XMLHttpRequest">
            <summary>
            This is either the original XHR used for the operation or a stub containing:
            responseText
            status
            statusText Verify that this is an actual XHR before accessing any other fields.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadProgressEventData.files">
            <summary>
            List of the files that are being uploaded. Each file has:
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadProgressEventData.percentComplete">
            <summary>
            Upload progress (0 - 100)
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadUploadRemoveEventData.files">
            <summary>
            List of the files that were uploaded or removed .
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadUploadRemoveEventData.data">
            <summary>
            Optional object that will be sent to the save handler in the form of key/value pairs.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadSuccessEventData.files">
            <summary>
            List of the files that were uploaded or removed .
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadSuccessEventData.operation">
            <summary>
            "upload" or "remove".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadSuccessEventData.response">
            <summary>
            the response object returned by the server.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.UploadSuccessEventData.XMLHttpRequest">
            <summary>
            This is either the original XHR used for the operation or a stub containing:
            responseText
            status
            statusText Verify that this is an actual XHR before accessing any other fields.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.center">
             <summary>
             Centers a Window within the viewport.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow");
            kendoWindow.center();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.close">
             <summary>
             Closes a Window.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").close();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.content(SharpKit.JavaScript.JsString)">
             <summary>
             set the content of a Window.
             </summary>
             <param name="content">_optional, default: _</param>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").content("Kendo UI for all the things!");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.content">
            <summary>
            Gets the content of a Window.
            </summary>
            <returns>If content is provided, this method will return the (Kendo UI) Window object to support chaining.
            Otherwise, it will return the current content of the (Kendo UI) Window.</returns>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.destroy">
            <summary>
            Destroys the window and its modal overlay, if necessary. Removes the Window HTML elements from the DOM.
            </summary>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.maximize">
             <summary>
             Maximizes a Window to the entire viewing area of the user agent. Triggers the resize event.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            $("#window").data("kendoWindow").maximize();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.minimize">
             <summary>
             Maximizes a Window to its title bar.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            $("#window").data("kendoWindow").minimize();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.open">
             <summary>
             Opens a Window.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").open();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.refresh(SharpKit.KendoUI.Web.WindowRefreshOptions)">
             <summary>
             Refreshes the content of a Window from a remote URL.
             </summary>
             <param name="options">Options for requesting data from the server. If omitted, the window uses the content property that was supplied when the window was created.
             Any options specified here are passed to jQuery.ajax().</param>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var windowObject = $("#window").data("kendoWindow");
             windowObject.refresh("/feedbackForm");
             
             windowObject.refresh({
                 url: "/feedbackForm",
                 data: { userId: 42 }
             });
             
             windowObject.refresh({
                 url: "/userInfo",
                 data: { userId: 42 },
                 template: "Hello, #= firstName # #= lastName #"
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.refresh(System.Object)">
             <summary>
             Refreshes the content of a Window from a remote URL.
             </summary>
             <param name="options">Options for requesting data from the server. If omitted, the window uses the content property that was supplied when the window was created.
             Any options specified here are passed to jQuery.ajax().</param>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var windowObject = $("#window").data("kendoWindow");
             windowObject.refresh("/feedbackForm");
             
             windowObject.refresh({
                 url: "/feedbackForm",
                 data: { userId: 42 }
             });
             
             windowObject.refresh({
                 url: "/userInfo",
                 data: { userId: 42 },
                 template: "Hello, #= firstName # #= lastName #"
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.refresh(SharpKit.JavaScript.JsString)">
             <summary>
             Refreshes the content of a Window from a remote URL.
             </summary>
             <param name="options">Options for requesting data from the server. If omitted, the window uses the content property that was supplied when the window was created.
             Any options specified here are passed to jQuery.ajax().</param>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var windowObject = $("#window").data("kendoWindow");
             windowObject.refresh("/feedbackForm");
             
             windowObject.refresh({
                 url: "/feedbackForm",
                 data: { userId: 42 }
             });
             
             windowObject.refresh({
                 url: "/userInfo",
                 data: { userId: 42 },
                 template: "Hello, #= firstName # #= lastName #"
             });
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.restore">
             <summary>
             Restores a maximized or minimized Window to its previous state. Triggers the resize event.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").restore();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.title(SharpKit.JavaScript.JsString)">
             <summary>
             set the title of a Window.
             </summary>
             <param name="text">_optional, default: _</param>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").title("Do a barrel roll!");
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.title">
             <summary>
             Get the title of a Window.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
             var kendoWindow = $("#window").data("kendoWindow");
             var windowTitle = kendoWindow.title();
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.toFront">
             <summary>
             Brings forward a Window to the top of the z-index.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            Brings forward a Window to the top of the z-index.
            </code>
            </example>
        </member>
        <member name="M:SharpKit.KendoUI.Web.Window.toggleMaximization">
             <summary>
             Toggles a Window between a maximized and restored state. Triggers the resize event.
             </summary>
             <returns>Returns the (Kendo UI) Window object to support chaining.</returns>
            <example>
            usage
            <code>
            var kendoWindow = $("#window").data("kendoWindow").toggleMaximization();
            </code>
            </example>
        </member>
        <member name="P:SharpKit.KendoUI.Web.Window.wrapper">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.activate">
            <summary>
            Triggered when a Window has finished its opening animation.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.closeEvent">
            <summary>
            Triggered when a Window is closed (by a user or through the close() method).
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.deactivate">
            <summary>
            Triggered when a Window has finished its closing animation.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.dragend">
            <summary>
            Triggered when a Window has been moved by a user.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.dragstart">
            <summary>
            Triggered when the user starts to move the window.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.error">
            <summary>
            Triggered when an AJAX request for content fails.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.openEvent">
            <summary>
            Triggered when a Window is opened (i.e. the open() method is called).
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.refreshEvent">
            <summary>
            Triggered when the content of a Window have been refreshed via AJAX.
            </summary>
        </member>
        <member name="E:SharpKit.KendoUI.Web.Window.resize">
            <summary>
            Triggered when a Window has been resized by a user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowRefreshOptions.url">
            <summary>
            The server URL that will be requested.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowRefreshOptions.data">
            <summary>
            A JSON object containing the data that will be passed to the server.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowRefreshOptions.type">
            <summary>
            The HTTP request method ("GET", "POST").
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowRefreshOptions.template">
            <summary>
            A template to be used for displaying the requested data.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.actions">
            <summary>
            (default: ["Close"]) The buttons for interacting with the window. Predefined array values are "Close", "Refresh", "Minimize", and "Maximize".
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.animation">
            <summary>
            A collection of {Animation} objects, used to change default animations. A value of false will disable all animations in the widget.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.appendTo">
            <summary>
            (default: document.body) The element that the Window will be appended to.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.content">
            <summary>
            Specifies a URL or request options that the window should load its content from. For remote URLs, a container iframe element is automatically created.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.contentObject">
            <summary>
            Specifies a URL or request options that the window should load its content from. For remote URLs, a container iframe element is automatically created.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.contentString">
            <summary>
            Specifies a URL or request options that the window should load its content from. For remote URLs, a container iframe element is automatically created.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.draggable">
            <summary>
            (default: true) Enables (true) or disables (false) the ability for users to move/drag a Window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.height">
            <summary>
            Undocument Property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.iframe">
            <summary>
            Explicitly states whether content iframe should be created.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.maxHeight">
            <summary>
            (default: Infinity) The maximum height (in pixels) that may be achieved by resizing the window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.maxWidth">
            <summary>
            (default: Infinity) The maximum width (in pixels) that may be achieved by resizing the window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.minHeight">
            <summary>
            (default: 50) The minimum height (in pixels) that may be achieved by resizing the window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.minWidth">
            <summary>
            (default: 50) The minimum width (in pixels) that may be achieved by resizing the window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.modal">
            <summary>
            (default: false) Specifies whether the window should show a modal overlay over the page.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.resizable">
            <summary>
            (default: true) Enables (true) or disables (false) the ability for users to resize a Window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.title">
            <summary>
            The text in the window title bar.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.visible">
            <summary>
            (default: true) Specifies whether the window will be initially visible.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.width">
            <summary>
            Undocument property. Add by Lee.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.close">
             /// <summary>
            Triggered when a Window is closed (by a user or through the close() method).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.open">
            <summary>
            Triggered when a Window is opened (i.e. the open() method is called).
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.activate">
            <summary>
            riggered when a Window has finished its opening animation.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.deactivate">
            <summary>
            Triggered when a Window has finished its closing animation.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.refresh">
            <summary>
            Triggered when the content of a Window has finished loading via AJAX, when the window iframe has finished loading, or when the refresh button has been clicked on a window with static content.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.resize">
            <summary>
            Triggered when a Window has been resized by a user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.dragend">
            <summary>
            Triggered when a Window has been moved by a user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowConfiguration.dragstart">
            <summary>
            Triggered when the user starts to move the window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.WindowContentConfiguration.template">
            <summary>
            Template for the content of a Window.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.SelectEventData.item">
            <summary>
            The selected item chosen by a user.
            </summary>
        </member>
        <member name="P:SharpKit.KendoUI.Web.OneItemEventData.item">
            <summary>
            The selected  item
            </summary>
        </member>
    </members>
</doc>
