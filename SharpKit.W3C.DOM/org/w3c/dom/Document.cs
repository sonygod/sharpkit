using SharpKit.JavaScript;
//AutoGenerated

namespace org.w3c.dom
{

    using Window = org.w3c.dom.html.Window;
    using StyleSheet = org.w3c.dom.stylesheets.StyleSheet;

    public interface Document : Node
    {
        // Document
        DocumentType doctype {get;}
        DOMImplementation implementation {get;}
        Element documentElement {get;}
//TODO:
//ORIGINAL LINE: public Element createElement(String tagName) throws DOMException;
        Element createElement(string tagName);
        DocumentFragment createDocumentFragment();
        Text createTextNode(string data);
        Comment createComment(string data);
//TODO:
//ORIGINAL LINE: public CDATASection createCDATASection(String data) throws DOMException;
        CDATASection createCDATASection(string data);
//TODO:
//ORIGINAL LINE: public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException;
        ProcessingInstruction createProcessingInstruction(string target, JsString data);
//TODO:
//ORIGINAL LINE: public Attr createAttribute(String name) throws DOMException;
        Attr createAttribute(string name);
//TODO:
//ORIGINAL LINE: public EntityReference createEntityReference(String name) throws DOMException;
        EntityReference createEntityReference(string name);
        NodeList getElementsByTagName(string tagname);
//TODO:
//ORIGINAL LINE: public Node importNode(Node importedNode, boolean deep) throws DOMException;
        Node importNode(Node importedNode, bool deep);
//TODO:
//ORIGINAL LINE: public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException;
        Element createElementNS(string namespaceURI, JsString qualifiedName);
//TODO:
//ORIGINAL LINE: public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException;
        Attr createAttributeNS(string namespaceURI, JsString qualifiedName);
        NodeList getElementsByTagNameNS(string namespaceURI, JsString localName);
        Element getElementById(string elementId);
        JsString inputEncoding {get;}
        JsString xmlEncoding {get;}
        bool xmlStandalone {get;set;}
//TODO:
//ORIGINAL LINE: public void setXmlStandalone(boolean xmlStandalone) throws DOMException;
        JsString xmlVersion {get;set;}
//TODO:
//ORIGINAL LINE: public void setXmlVersion(String xmlVersion) throws DOMException;
        bool strictErrorChecking {get;set;}
        JsString documentURI {get;set;}
//TODO:
//ORIGINAL LINE: public Node adoptNode(Node source) throws DOMException;
        Node adoptNode(Node source);
        DOMConfiguration domConfig {get;}
        void normalizeDocument();
//TODO:
//ORIGINAL LINE: public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException;
        Node renameNode(Node n, JsString namespaceURI, JsString qualifiedName);
        // Document-39
        StyleSheet[] styleSheets {get;}
        JsString selectedStyleSheetSet {get;set;}
        JsString lastStyleSheetSet {get;}
        JsString preferredStyleSheetSet {get;}
        DOMStringList styleSheetSets {get;}
        void enableStyleSheetsForSet(string name);
        // Document-40
        Window defaultView {get;}
        Element elementFromPoint(float x, float y);
        CaretPosition caretPositionFromPoint(float x, float y);
        // NodeSelector
        Element querySelector(string selectors);
        NodeList querySelectorAll(string selectors);
    }

}
