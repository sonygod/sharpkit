//Generated by a tool of Sebastian Loncar

namespace org.w3c.dom.svg
{

using SharpKit.JavaScript;
using DOMException = org.w3c.dom.DOMException;
using Element = org.w3c.dom.Element;
using NodeList = org.w3c.dom.NodeList;
using DocumentCSS = org.w3c.dom.css.DocumentCSS;
using ViewCSS = org.w3c.dom.css.ViewCSS;
using DocumentEvent = org.w3c.dom.events.DocumentEvent;

[JsType(JsMode.Prototype, Export = false, PropertiesAsFields=true, OmitCasts = true)]
public partial class SVGSVGElement : SVGElement
{

	// SVGSVGElement
	public SVGAnimatedLength x {get { return default(SVGAnimatedLength); } }
	public SVGAnimatedLength y {get { return default(SVGAnimatedLength); } }
	public SVGAnimatedLength width {get { return default(SVGAnimatedLength); } }
	public SVGAnimatedLength height {get { return default(SVGAnimatedLength); } }
	public string contentScriptType {get { return default(string); } set {}}
	public string contentStyleType {get { return default(string); } set {}}
	public SVGRect viewport {get { return default(SVGRect); } }
	public float pixelUnitToMillimeterX {get { return default(float); } }
	public float pixelUnitToMillimeterY {get { return default(float); } }
	public float screenPixelToMillimeterX {get { return default(float); } }
	public float screenPixelToMillimeterY {get { return default(float); } }
	public bool useCurrentView {get { return default(bool); } set {}}
	public SVGViewSpec currentView {get { return default(SVGViewSpec); } }
	public float currentScale {get { return default(float); } set {}}
	public SVGPoint currentTranslate {get { return default(SVGPoint); } }
	public int suspendRedraw(int max_wait_milliseconds) { return default(int); }
	public void unsuspendRedraw(int suspend_handle_id) {}
	public void unsuspendRedrawAll() {}
	public void forceRedraw() {}
	public void pauseAnimations() {}
	public void unpauseAnimations() {}
	public bool animationsPaused() { return default(bool); }
	public float currentTime {get { return default(float); } set {}}
	public NodeList getIntersectionList(SVGRect rect, SVGElement referenceElement) { return default(NodeList); }
	public NodeList getEnclosureList(SVGRect rect, SVGElement referenceElement) { return default(NodeList); }
	public bool checkIntersection(SVGElement element, SVGRect rect) { return default(bool); }
	public bool checkEnclosure(SVGElement element, SVGRect rect) { return default(bool); }
	public void deselectAll() {}
	public SVGNumber createSVGNumber() { return default(SVGNumber); }
	public SVGLength createSVGLength() { return default(SVGLength); }
	public SVGAngle createSVGAngle() { return default(SVGAngle); }
	public SVGPoint createSVGPoint() { return default(SVGPoint); }
	public SVGMatrix createSVGMatrix() { return default(SVGMatrix); }
	public SVGRect createSVGRect() { return default(SVGRect); }
	public SVGTransform createSVGTransform() { return default(SVGTransform); }
	public SVGTransform createSVGTransformFromMatrix(SVGMatrix matrix) { return default(SVGTransform); }
	public Element getElementById(string elementId) { return default(Element); }
}

}