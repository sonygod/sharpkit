using SharpKit.JavaScript;
//AutoGenerated

namespace org.w3c.dom.html
{

    using Element = org.w3c.dom.Element;

    public interface CanvasRenderingContext2D
    {
        // CanvasRenderingContext2D
        HTMLCanvasElement canvas {get;}
        void save();
        void restore();
        void scale(float x, float y);
        void rotate(float angle);
        void translate(float x, float y);
        void transform(float m11, float m12, float m21, float m22, float dx, float dy);
        void setTransform(float m11, float m12, float m21, float m22, float dx, float dy);
        float globalAlpha {get;set;}
        JsString globalCompositeOperation {get;set;}
        object strokeStyle {get;set;}
        object fillStyle {get;set;}
        CanvasGradient createLinearGradient(float x0, float y0, float x1, float y1);
        CanvasGradient createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1);
        CanvasPattern createPattern(HTMLImageElement image, JsString repetition);
        CanvasPattern createPattern(HTMLCanvasElement image, JsString repetition);
        CanvasPattern createPattern(HTMLVideoElement image, JsString repetition);
        float lineWidth {get;set;}
        JsString lineCap {get;set;}
        JsString lineJoin {get;set;}
        float miterLimit {get;set;}
        float shadowOffsetX {get;set;}
        float shadowOffsetY {get;set;}
        float shadowBlur {get;set;}
        JsString shadowColor {get;set;}
        void clearRect(float x, float y, float w, float h);
        void fillRect(float x, float y, float w, float h);
        void strokeRect(float x, float y, float w, float h);
        void beginPath();
        void closePath();
        void moveTo(float x, float y);
        void lineTo(float x, float y);
        void quadraticCurveTo(float cpx, float cpy, float x, float y);
        void bezierCurveTo(float cp1x, float cp1y, float cp2x, float cp2y, float x, float y);
        void arcTo(float x1, float y1, float x2, float y2, float radius);
        void rect(float x, float y, float w, float h);
        void arc(float x, float y, float radius, float startAngle, float endAngle, bool anticlockwise);
        void fill();
        void stroke();
        void clip();
        bool isPointInPath(float x, float y);
        bool drawFocusRing(Element element, float xCaret, float yCaret);
        bool drawFocusRing(Element element, float xCaret, float yCaret, bool canDrawCustom);
        JsString font {get;set;}
        JsString textAlign {get;set;}
        JsString textBaseline {get;set;}
        void fillText(string text, float x, float y);
        void fillText(string text, float x, float y, float maxWidth);
        void strokeText(string text, float x, float y);
        void strokeText(string text, float x, float y, float maxWidth);
        TextMetrics measureText(string text);
        void drawImage(HTMLImageElement image, float dx, float dy);
        void drawImage(HTMLImageElement image, float dx, float dy, float dw, float dh);
        void drawImage(HTMLImageElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh);
        void drawImage(HTMLCanvasElement image, float dx, float dy);
        void drawImage(HTMLCanvasElement image, float dx, float dy, float dw, float dh);
        void drawImage(HTMLCanvasElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh);
        void drawImage(HTMLVideoElement image, float dx, float dy);
        void drawImage(HTMLVideoElement image, float dx, float dy, float dw, float dh);
        void drawImage(HTMLVideoElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh);
        ImageData createImageData(float sw, float sh);
        ImageData createImageData(ImageData imagedata);
        ImageData getImageData(float sx, float sy, float sw, float sh);
        void putImageData(ImageData imagedata, float dx, float dy);
        void putImageData(ImageData imagedata, float dx, float dy, float dirtyX, float dirtyY, float dirtyWidth, float dirtyHeight);
    }

}
