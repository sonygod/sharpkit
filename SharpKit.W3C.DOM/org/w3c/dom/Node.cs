using SharpKit.JavaScript;
//AutoGenerated

namespace org.w3c.dom
{

    public interface Node
    {
        // Node
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short ELEMENT_NODE = 1;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short ATTRIBUTE_NODE = 2;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short TEXT_NODE = 3;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short CDATA_SECTION_NODE = 4;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short ENTITY_REFERENCE_NODE = 5;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short ENTITY_NODE = 6;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short PROCESSING_INSTRUCTION_NODE = 7;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short COMMENT_NODE = 8;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_NODE = 9;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_TYPE_NODE = 10;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_FRAGMENT_NODE = 11;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short NOTATION_NODE = 12;
        JsString nodeName {get;}
//TODO:
//ORIGINAL LINE: public String getNodeValue() throws DOMException;
        JsString nodeValue {get;set;}
//TODO:
//ORIGINAL LINE: public void setNodeValue(String nodeValue) throws DOMException;
        short nodeType {get;}
        Node parentNode {get;}
        NodeList childNodes {get;}
        Node firstChild {get;}
        Node lastChild {get;}
        Node previousSibling {get;}
        Node nextSibling {get;}
        NamedNodeMap attributes {get;}
        Document ownerDocument {get;}
//TODO:
//ORIGINAL LINE: public Node insertBefore(Node newChild, Node refChild) throws DOMException;
        Node insertBefore(Node newChild, Node refChild);
//TODO:
//ORIGINAL LINE: public Node replaceChild(Node newChild, Node oldChild) throws DOMException;
        Node replaceChild(Node newChild, Node oldChild);
//TODO:
//ORIGINAL LINE: public Node removeChild(Node oldChild) throws DOMException;
        Node removeChild(Node oldChild);
//TODO:
//ORIGINAL LINE: public Node appendChild(Node newChild) throws DOMException;
        Node appendChild(Node newChild);
        bool hasChildNodes();
        Node cloneNode(bool deep);
        void normalize();
        bool isSupported(string feature, JsString version);
        JsString namespaceURI {get;}
        JsString prefix {get;set;}
//TODO:
//ORIGINAL LINE: public void setPrefix(String prefix) throws DOMException;
        JsString localName {get;}
        bool hasAttributes();
        JsString baseURI {get;}
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_DISCONNECTED = 0x01;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_PRECEDING = 0x02;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_FOLLOWING = 0x04;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_CONTAINS = 0x08;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_CONTAINED_BY = 0x10;
//TODO: Interfaces cannot contain fields in .NET:
//        public static final short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
//TODO:
//ORIGINAL LINE: public short compareDocumentPosition(Node other) throws DOMException;
        short compareDocumentPosition(Node other);
//TODO:
//ORIGINAL LINE: public String getTextContent() throws DOMException;
        JsString textContent {get;set;}
//TODO:
//ORIGINAL LINE: public void setTextContent(String textContent) throws DOMException;
        bool isSameNode(Node other);
        JsString lookupPrefix(string namespaceURI);
        bool isDefaultNamespace(string namespaceURI);
        JsString lookupNamespaceURI(string prefix);
        bool isEqualNode(Node arg);
        object getFeature(string feature, JsString version);
        object setUserData(string key, object data, UserDataHandler handler);
        object getUserData(string key);
    }

}
