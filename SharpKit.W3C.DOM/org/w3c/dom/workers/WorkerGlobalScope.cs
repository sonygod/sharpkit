//Generated by a tool of Sebastian Loncar

namespace org.w3c.dom.workers
{

using SharpKit.JavaScript;
using ApplicationCache = org.w3c.dom.html.ApplicationCache;
using MessagePort = org.w3c.dom.html.MessagePort;
using Database = org.w3c.dom.webdatabase.Database;
using DatabaseCallback = org.w3c.dom.webdatabase.DatabaseCallback;
using DatabaseSync = org.w3c.dom.webdatabase.DatabaseSync;

[JsType(JsMode.Prototype, Export = false, PropertiesAsFields=true, OmitCasts = true)]
public partial class WorkerGlobalScope
{

	// WorkerGlobalScope
	public WorkerGlobalScope self {get { return default(WorkerGlobalScope); } }
	public WorkerLocation location {get { return default(WorkerLocation); } }
	public void close() {}
	public JsAction onerror {get { return default(JsAction); } set {}}

	// WorkerUtils
	public void importScripts(params string[] urls) {}
	public WorkerNavigator navigator {get { return default(WorkerNavigator); } }

	// WorkerUtilsDatabase
	public Database openDatabase(string name, string version, string displayName, int estimatedSize) { return default(Database); }
	public Database openDatabase(string name, string version, string displayName, int estimatedSize, DatabaseCallback creationCallback) { return default(Database); }
	public DatabaseSync openDatabaseSync(string name, string version, string displayName, int estimatedSize) { return default(DatabaseSync); }
	public DatabaseSync openDatabaseSync(string name, string version, string displayName, int estimatedSize, DatabaseCallback creationCallback) { return default(DatabaseSync); }

	// WindowTimers
	public int setTimeout(object handler) { return default(int); }
	public int setTimeout(object handler, object timeout, params object[] args) { return default(int); }
	public void clearTimeout(int handle) {}
	public int setInterval(object handler) { return default(int); }
	public int setInterval(object handler, object timeout, params object[] args) { return default(int); }
	public void clearInterval(int handle) {}

	// DedicatedWorkerGlobalScope
	public void postMessage(object message) {}
	public void postMessage(object message, MessagePort[] ports) {}
	public JsAction onmessage {get { return default(JsAction); } set {}}

	// SharedWorkerGlobalScope
	public string name {get { return default(string); } }
	public ApplicationCache applicationCache {get { return default(ApplicationCache); } }
	public JsAction onconnect {get { return default(JsAction); } set {}}
}

}