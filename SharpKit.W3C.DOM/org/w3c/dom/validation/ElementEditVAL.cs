//Generated by a tool of Sebastian Loncar

namespace org.w3c.dom.validation
{

using SharpKit.JavaScript;
using Attr = org.w3c.dom.Attr;
using NameList = org.w3c.dom.NameList;
using Node = org.w3c.dom.Node;

[JsType(JsMode.Prototype, Export = false, PropertiesAsFields=true, OmitCasts = true)]
public partial class ElementEditVAL : NodeEditVAL
{

	// ElementEditVAL
	public static short VAL_EMPTY_CONTENTTYPE = 1;
	public static short VAL_ANY_CONTENTTYPE = 2;
	public static short VAL_MIXED_CONTENTTYPE = 3;
	public static short VAL_ELEMENTS_CONTENTTYPE = 4;
	public static short VAL_SIMPLE_CONTENTTYPE = 5;
	public NameList allowedChildren {get { return default(NameList); } }
	public NameList allowedFirstChildren {get { return default(NameList); } }
	public NameList allowedParents {get { return default(NameList); } }
	public NameList allowedNextSiblings {get { return default(NameList); } }
	public NameList allowedPreviousSiblings {get { return default(NameList); } }
	public NameList allowedAttributes {get { return default(NameList); } }
	public NameList requiredAttributes {get { return default(NameList); } }
	public short contentType {get { return default(short); } }
	public short canSetTextContent(string possibleTextContent) { return default(short); }
	public short canSetAttribute(string attrname, string attrval) { return default(short); }
	public short canSetAttributeNode(Attr attrNode) { return default(short); }
	public short canSetAttributeNS(string namespaceURI, string qualifiedName, string value) { return default(short); }
	public short canRemoveAttribute(string attrname) { return default(short); }
	public short canRemoveAttributeNS(string namespaceURI, string localName) { return default(short); }
	public short canRemoveAttributeNode(Node attrNode) { return default(short); }
	public short isElementDefined(string name) { return default(short); }
	public short isElementDefinedNS(string namespaceURI, string name) { return default(short); }
}

}