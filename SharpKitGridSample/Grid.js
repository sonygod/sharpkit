/*Generated by SharpKit 5 v4.27.9000*/
if(typeof(SharpKitGridSample) == "undefined")
    SharpKitGridSample = {};
SharpKitGridSample.Grid = function()
{
    this.Element = null;
    this.GridBody = null;
    this.Rows = null;
    this.Rows =  [];
};
SharpKitGridSample.Grid.prototype.Render = function()
{
    if(this.Element == null)
        return;
    this.Element["_Grid"] = this;
    if(this.GridBody == null || this.GridBody.nodeName != "TBODY")
    {
        this.GridBody = document.createElement("TBODY");
        this.Element.appendChild(this.GridBody);
    }
};
SharpKitGridSample.Grid.FindGridRow = function(el)
{
    var row=SharpKitGridSample.Extensions.FindExtension(el,"_GridRow");
    return row;
};
SharpKitGridSample.Grid.prototype.DeleteAllRows = function()
{
    if(this.GridBody != null)
        SharpKitGridSample.Extensions.EmptyFast(this.GridBody);
    if(this.Rows != null)
    {
        for(var $i2=0,$t2=this.Rows,$l2=$t2.length,gr=$t2[$i2];$i2 < $l2;$i2++,gr = $t2[$i2])
        {
            if(gr.Element != null)
                gr.Element["_GridRow"] = null;
        }
        SharpKitGridSample.Extensions.Clear(this.Rows);
    }
};
SharpKitGridSample.Grid.prototype.CreateRowElement = function(template)
{
    return template.cloneNode(true);
};
SharpKitGridSample.Grid.prototype.AddRow = function(gr)
{
    var body=this.GridBody;
    var lastRow=SharpKitGridSample.Extensions.GetLast(this.Rows);
    var lastChild=lastRow != null?lastRow.Element:null;
    SharpKitGridSample.Extensions.AppendChildFast(body,gr.Element,lastChild);
    gr.Element["_GridRow"] = gr;
    this.Rows.push(gr);
    gr.IsVisible = true;
};
SharpKitGridSample.Grid.prototype.DeleteRow = function(gr)
{
    gr.Element.parentNode.removeChild(gr.Element);
    SharpKitGridSample.Extensions.Remove(this.Rows,gr);
    gr.Element["_GridRow"] = null;
};
SharpKitGridSample.Grid.prototype.ShowHideRows = function(rows,isVisible)
{
    for(var i=0;i < rows.length;i++)
    {
        var row=rows[i];
        if(row.IsVisible == isVisible)
            continue;
        row.IsVisible = isVisible;
        if(isVisible)
            row.Element.style.display = "";
        else
            row.Element.style.display = "none";
    }
};
SharpKitGridSample.Extensions = function()
{
};
SharpKitGridSample.Extensions.HasInnerText = false;
SharpKitGridSample.Extensions.HasInsertAdjacentElement = false;
window.setTimeout(function()
{
    var el=document.createElement("a");
    SharpKitGridSample.Extensions.HasInsertAdjacentElement = el.insertAdjacentElement != null;
    SharpKitGridSample.Extensions.HasInnerText = typeof(el.innerText) != "undefined";
},0);
SharpKitGridSample.Extensions.SetExtension = function(el,name,value)
{
    el[name] = value;
};
SharpKitGridSample.Extensions.GetExtension = function(el,name)
{
    return el[name];
};
SharpKitGridSample.Extensions.FindExtension = function(el,name)
{
    var el2=SharpKitGridSample.Extensions.FindParent(el,function(t)
    {
        return t[name] != null;
    });
    if(el2 == null)
        return el2;
    return el2[name];
};
SharpKitGridSample.Extensions.InnerTextFast = function(el,text)
{
    if(SharpKitGridSample.Extensions.HasInnerText)
        el.innerText = text;
    else
        el.textContent = text;
};
SharpKitGridSample.Extensions.EmptyFast = function(el)
{
    var ch=el.firstChild;
    while(ch != null)
    {
        el.removeChild(ch);
        ch = el.firstChild;
    }
};
SharpKitGridSample.Extensions.AppendChildFast = function(el,newElement,lastChild)
{
    if(lastChild != null && SharpKitGridSample.Extensions.HasInsertAdjacentElement)
        lastChild.insertAdjacentElement("afterEnd",newElement);
    else
        el.appendChild(newElement);
};
SharpKitGridSample.Extensions.AppendAfterSelf = function(el,newElement)
{
    el.parentNode.insertBefore(newElement,el.nextSibling);
};
SharpKitGridSample.Extensions.AppendBeforeSelf = function(el,newElement)
{
    el.parentNode.insertBefore(newElement,el);
};
SharpKitGridSample.Extensions.FindParent = function(el,selector)
{
    while(el != null)
    {
        if(selector(el))
            return el;
        el = el.parentNode;
    }
    return null;
};
SharpKitGridSample.Extensions.GetLast = function(list)
{
    var length=list.length;
    if(length == 0)
        return null;
    return list[length - 1];
};
SharpKitGridSample.Extensions.Insert = function(list,index,item)
{
    list.splice(index,0,item);
};
SharpKitGridSample.Extensions.Remove = function(list,item)
{
    for(var i=0;i < list.length;i++)
    {
        if(list[i] == item)
        {
            list.splice(i,1);
            return i;
        }
    }
    return -1;
};
SharpKitGridSample.Extensions.IndexOf = function(list,item)
{
    for(var i=0;i < list.length;i++)
    {
        if(list[i] == item)
            return i;
    }
    return -1;
};
SharpKitGridSample.Extensions.Clear = function(list)
{
    list.splice(0,list.length);
};
