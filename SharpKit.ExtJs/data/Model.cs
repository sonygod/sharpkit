//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region Model
    /// <summary>
    /// A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
    /// Cars, or any other real-world object that we want to model in the system. Models are registered via the model manager,
    /// and are used by stores, which are in turn used by many of the data-bound components in Ext. Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [
    /// {name: &#39;name&#39;,  type: &#39;string&#39;},
    /// {name: &#39;age&#39;,   type: &#39;int&#39;},
    /// {name: &#39;phone&#39;, type: &#39;string&#39;},
    /// {name: &#39;alive&#39;, type: &#39;boolean&#39;, defaultValue: true}
    /// ],
    /// changeName: function() {
    /// var oldName = this.get(&#39;name&#39;),
    /// newName = oldName + &quot; The Barbarian&quot;;
    /// this.set(&#39;name&#39;, newName);
    /// }
    /// });
    /// The fields array is turned into a MixedCollection automatically by the ModelManager, and all
    /// other functions and properties are copied to the new Model&#39;s prototype. Now we can create instances of our User model and call any model logic we defined: var user = Ext.ModelManager.create({
    /// name : &#39;Conan&#39;,
    /// age  : 24,
    /// phone: &#39;555-555-5555&#39;
    /// }, &#39;User&#39;);
    /// user.changeName();
    /// user.get(&#39;name&#39;); //returns &quot;Conan The Barbarian&quot;
    /// Validations Models have built-in support for validations, which are executed against the validator functions in
    /// Ext.data.validations (see all validation functions). Validations are easy to add to models: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [
    /// {name: &#39;name&#39;,     type: &#39;string&#39;},
    /// {name: &#39;age&#39;,      type: &#39;int&#39;},
    /// {name: &#39;phone&#39;,    type: &#39;string&#39;},
    /// {name: &#39;gender&#39;,   type: &#39;string&#39;},
    /// {name: &#39;username&#39;, type: &#39;string&#39;},
    /// {name: &#39;alive&#39;,    type: &#39;boolean&#39;, defaultValue: true}
    /// ],
    /// validations: [
    /// {type: &#39;presence&#39;,  field: &#39;age&#39;},
    /// {type: &#39;length&#39;,    field: &#39;name&#39;,     min: 2},
    /// {type: &#39;inclusion&#39;, field: &#39;gender&#39;,   list: [&#39;Male&#39;, &#39;Female&#39;]},
    /// {type: &#39;exclusion&#39;, field: &#39;username&#39;, list: [&#39;Admin&#39;, &#39;Operator&#39;]},
    /// {type: &#39;format&#39;,    field: &#39;username&#39;, matcher: /([a-z]+)[0-9]{2,3}/}
    /// ]
    /// });
    /// The validations can be run by simply calling the validate function, which returns a Ext.data.Errors
    /// object: var instance = Ext.ModelManager.create({
    /// name: &#39;Ed&#39;,
    /// gender: &#39;Male&#39;,
    /// username: &#39;edspencer&#39;
    /// }, &#39;User&#39;);
    /// var errors = instance.validate();
    /// Associations Models can have associations with other Models via belongsTo and
    /// hasMany associations. For example, let&#39;s say we&#39;re writing a blog administration
    /// application which deals with Users, Posts and Comments. We can express the relationships between these models like this: Ext.define(&#39;Post&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;user_id&#39;],
    /// belongsTo: &#39;User&#39;,
    /// hasMany  : {model: &#39;Comment&#39;, name: &#39;comments&#39;}
    /// });
    /// Ext.define(&#39;Comment&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;user_id&#39;, &#39;post_id&#39;],
    /// belongsTo: &#39;Post&#39;
    /// });
    /// Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;],
    /// hasMany: [
    /// &#39;Post&#39;,
    /// {model: &#39;Comment&#39;, name: &#39;comments&#39;}
    /// ]
    /// });
    /// See the docs for Ext.data.BelongsToAssociation and Ext.data.HasManyAssociation for details on the usage
    /// and configuration of associations. Note that associations can also be specified like this: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;],
    /// associations: [
    /// {type: &#39;hasMany&#39;, model: &#39;Post&#39;,    name: &#39;posts&#39;},
    /// {type: &#39;hasMany&#39;, model: &#39;Comment&#39;, name: &#39;comments&#39;}
    /// ]
    /// });
    /// Using a Proxy Models are great for representing types of data and relationships, but sooner or later we&#39;re going to want to
    /// load or save that data somewhere. All loading and saving of data is handled via a Proxy,
    /// which can be set directly on the Model: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
    /// proxy: {
    /// type: &#39;rest&#39;,
    /// url : &#39;/users&#39;
    /// }
    /// });
    /// Here we&#39;ve set up a Rest Proxy, which knows how to load and save data to and from a
    /// RESTful backend. Let&#39;s see how this works: var user = Ext.ModelManager.create({name: &#39;Ed Spencer&#39;, email: &#39;ed@sencha.com&#39;}, &#39;User&#39;);
    /// user.save(); //POST /users
    /// Calling save on the new Model instance tells the configured RestProxy that we wish to persist this
    /// Model&#39;s data onto our server. RestProxy figures out that this Model hasn&#39;t been saved before because it doesn&#39;t
    /// have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
    /// (/users). We configure any Proxy on any Model and always follow this API - see Ext.data.proxy.Proxy for a full
    /// list. Loading data via the Proxy is equally easy: //get a reference to the User model class
    /// var User = Ext.ModelManager.getModel(&#39;User&#39;);
    /// //Uses the configured RestProxy to make a GET request to /users/123
    /// User.load(123, {
    /// success: function(user) {
    /// console.log(user.getId()); //logs 123
    /// }
    /// });
    /// Models can also be updated and destroyed easily: //the user Model we loaded in the last snippet:
    /// user.set(&#39;name&#39;, &#39;Edward Spencer&#39;);
    /// //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
    /// user.save({
    /// success: function() {
    /// console.log(&#39;The User was updated&#39;);
    /// }
    /// });
    /// //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
    /// user.destroy({
    /// success: function() {
    /// console.log(&#39;The User was destroyed!&#39;);
    /// }
    /// });
    /// Usage in Stores It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
    /// by creating a Store: var store = new Ext.data.Store({
    /// model: &#39;User&#39;
    /// });
    /// //uses the Proxy we set up on Model to load the Store data
    /// store.load();
    /// A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
    /// a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
    /// Store docs for more information on Stores.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Model : Ext.Base, Ext.util.Observable
    {
        /// <summary>
        /// ...
        /// </summary>
        public Model(object data, JsNumber id=null){}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire. ...
        /// </summary>
        public object addEvents(object o, JsString more){return null;}
        /// <summary>
        /// Appends an event handler to this object. ...
        /// </summary>
        public object addListener(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Adds listeners to any Observable object (or Element) which are automatically removed when this Component is
        /// destroyed. ...
        /// </summary>
        public object addManagedListener(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Begin an edit. ...
        /// </summary>
        public object beginEdit(){return null;}
        /// <summary>
        /// Cancels all changes made in the current edit operation. ...
        /// </summary>
        public object cancelEdit(){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners ...
        /// </summary>
        public object clearListeners(){return null;}
        /// <summary>
        /// Removes all managed listeners for this object. ...
        /// </summary>
        public object clearManagedListeners(){return null;}
        /// <summary>
        /// Usually called by the Ext.data.Store which owns the model instance. ...
        /// </summary>
        public object commit(bool silent=false){return null;}
        /// <summary>
        /// Creates a copy (clone) of this Model instance. ...
        /// </summary>
        public Record copy(JsString id=null){return null;}
        /// <summary>
        /// Destroys the model using the configured proxy ...
        /// </summary>
        public Ext.data.Model destroy(object options){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. ...
        /// </summary>
        public object enableBubble(object events){return null;}
        /// <summary>
        /// End an edit. ...
        /// </summary>
        public object endEdit(bool silent){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addList...
        /// </summary>
        public bool fireEvent(JsString eventName, object args){return false;}
        /// <summary>
        /// Returns the value of the given field ...
        /// </summary>
        public object get(JsString fieldName){return null;}
        /// <summary>
        /// Gets all of the data from this Models loaded associations. ...
        /// </summary>
        public object getAssociatedData(){return null;}
        /// <summary>
        /// Gets a hash of only the fields that have been modified since this Model was created or commited. ...
        /// </summary>
        public object getChanges(){return null;}
        /// <summary>
        /// Returns the unique ID allocated to this model instance as defined by idProperty ...
        /// </summary>
        public JsNumber getId(){return null;}
        /// <summary>
        /// Returns the configured Proxy for this Model ...
        /// </summary>
        public Ext.data.proxy.Proxy getProxy(){return null;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event ...
        /// </summary>
        public bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Returns true if the passed field name has been modified
        /// since the load or last commit. ...
        /// </summary>
        public bool isModified(JsString fieldName){return false;}
        /// <summary>
        /// Checks if the model is valid. ...
        /// </summary>
        public bool isValid(){return false;}
        /// <summary>
        /// Tells this model instance that it has been added to a store ...
        /// </summary>
        public object join(Ext.data.Store store){return null;}
        /// <summary>
        /// Shorthand for addManagedListener. ...
        /// </summary>
        public object mon(object item, object ename, JsAction fn=null, object scope=null, object opt=null){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener. ...
        /// </summary>
        public object mun(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Shorthand for addListener. ...
        /// </summary>
        public object on(JsString eventName, JsAction handler, object scope=null, object options=null){return null;}
        /// <summary>
        /// Usually called by the Ext.data.Store to which this model instance has been joined. ...
        /// </summary>
        public object reject(bool silent=false){return null;}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this. ...
        /// </summary>
        public object relayEvents(object origin, JsString events, object prefix){return null;}
        /// <summary>
        /// Removes an event handler. ...
        /// </summary>
        public object removeListener(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Removes listeners that were added by the mon method. ...
        /// </summary>
        public object removeManagedListener(object item, object ename, JsAction fn, object scope){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents). ...
        /// </summary>
        public object resumeEvents(){return null;}
        /// <summary>
        /// Saves the model instance using the configured proxy ...
        /// </summary>
        public Ext.data.Model save(object options){return null;}
        /// <summary>
        /// Sets the given field to the given value, marks the instance as dirty ...
        /// </summary>
        public object set(object fieldName, object value){return null;}
        /// <summary>
        /// Marks this Record as dirty. ...
        /// </summary>
        public object setDirty(){return null;}
        /// <summary>
        /// Sets the model instance's id field to the given id ...
        /// </summary>
        public object setId(JsNumber id){return null;}
        /// <summary>
        /// Suspends the firing of all events. ...
        /// </summary>
        public object suspendEvents(bool queueSuspended){return null;}
        /// <summary>
        /// Shorthand for removeListener. ...
        /// </summary>
        public object un(JsString eventName, JsAction handler, object scope=null){return null;}
        /// <summary>
        /// Tells this model instance that it has been removed from the store ...
        /// </summary>
        public object unjoin(){return null;}
        /// <summary>
        /// Validates the current data against all of its configured validations and returns an
        /// Errors object ...
        /// </summary>
        public Errors validate(){return null;}
        /// <summary>
        /// The string type of the default Model Proxy. ...
        /// </summary>
        public JsString defaultProxyType{get;set;}
        public bool dirty{get;set;}
        /// <summary>
        /// Internal flag used to track whether or not the model instance is currently being edited. ...
        /// </summary>
        public bool editing{get;set;}
        public JsArray fields{get;set;}
        public JsObject data { get; set; }
        public object modified{get;set;}
        /// <summary>
        /// true when the record does not yet exist in a server-side database (see
        /// setDirty). ...
        /// </summary>
        public bool phantom{get;set;}
        public object raw{get;set;}
        public Ext.data.Store store{get;set;}
        public Model(Ext.data.ModelConfig config){}
        public Model(){}
    }
    #endregion
    #region ModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelConfig : Ext.BaseConfig
    {
        public JsString idProperty{get;set;}
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. ...
        /// </summary>
        public object listeners{get;set;}
        /// <summary>
        /// The property on this Persistable object that its data is saved to. ...
        /// </summary>
        public JsString persistenceProperty{get;set;}
    }
    #endregion
    #region ModelEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelEvents : Ext.BaseEvents
    {
    }
    #endregion
}
#endregion
