/*Generated by SharpKit 5 v5.00.7000*/
if (typeof ($Inherit) == 'undefined') {
	var $Inherit = function (ce, ce2) {

		if (typeof (Object.getOwnPropertyNames) == 'undefined') {

			for (var p in ce2.prototype)
				if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p])
					ce.prototype[p] = ce2.prototype[p];
			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		} else {

			var props = Object.getOwnPropertyNames(ce2.prototype);
			for (var i = 0; i < props.length; i++)
				if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined')
					Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));

			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		}

	}
};
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(GreenRide) == "undefined")
    var GreenRide = {};
if (typeof(GreenRide.Website) == "undefined")
    GreenRide.Website = {};
if (typeof(GreenRide.Website.GoogleMaps) == "undefined")
    GreenRide.Website.GoogleMaps = {};
GreenRide.Website.GoogleMaps.GoogleMapsParser = function ()
{
    this.Writer = null;
    this.Assembly = null;
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.prototype.OnLoad = function ()
{
    this.Assembly = new GreenRide.Website.GoogleMaps.Assembly();
    this.Writer = new GreenRide.Website.GoogleMaps.CodeWriter();
    var body = $(document.body);
    for (var $i3 = 0, $t3 = body.children("h2"), $l3 = $t3.length, ch = $t3[$i3]; $i3 < $l3; $i3++, ch = $t3[$i3])
    {
        var ce = GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseClass(ch);
        this.Assembly.Classes.push(ce);
    }
    this.Writer.WriteLine("using System;\r\nusing SharpKit.JavaScript;\r\n\r\nnamespace GreenRide.Website.GoogleMaps\r\n{");
    this.GenerateCode();
    var code = this.Writer.toString();
    var pre = $("#Output");
    pre.val(code).remove();
    body[0].insertBefore(pre[0], body[0].firstChild);
    this.Writer.WriteLine("}");
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.prototype.GetDefaultValueCode = function (ce)
{
    if (ce == null || ce.Name == "void")
        return "";
    if (ce.Name == "bool")
        return "false";
    return "null";
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.prototype.GenerateCode = function ()
{
    for (var $i4 = 0, $t4 = this.Assembly.Classes, $l4 = $t4.length, ce = $t4[$i4]; $i4 < $l4; $i4++, ce = $t4[$i4])
    {
        this.WriteAttributes(ce);
        this.Writer.WriteLine("class " + ce.Name);
        this.Writer.BeginBlock();
        for (var $i5 = 0, $t5 = ce.Members, $l5 = $t5.length, me = $t5[$i5]; $i5 < $l5; $i5++, me = $t5[$i5])
        {
            if (me instanceof GreenRide.Website.GoogleMaps.Method)
            {
                var me2 = me;
                this.WriteDescription(me);
                this.Writer.Write("public " + me.Type.Name + " " + me.Name + "(");
                this.Writer.Write(GreenRide.Website.GoogleMaps.Extensions.JsSelect(me2.Parameters, $CreateAnonymousDelegate(this, function (t)
                {
                    return t.Type.Name + " " + t.Name + (t.IsOptional ? ("=" + this.GetDefaultValueCode(t.Type)) : "");
                })).join(", "));
                this.Writer.Write(")");
                if (me2.IsConstructor || me2.Type == null || me2.Type.Name == "void")
                    this.Writer.WriteLine("{}");
                else
                    this.Writer.WriteLine("{return " + this.GetDefaultValueCode(me2.Type) + ";}");
            }
            else if (me instanceof GreenRide.Website.GoogleMaps.Property)
            {
                var pe = me;
                this.WriteDescription(pe);
                this.Writer.WriteLine("public " + me.Type.Name + " " + me.Name + "{get; set;}");
            }
        }
        this.Writer.EndBlock();
    }
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.prototype.WriteAttributes = function (ce)
{
    for (var $i6 = 0, $t6 = ce.Attributes, $l6 = $t6.length, att = $t6[$i6]; $i6 < $l6; $i6++, att = $t6[$i6])
        this.Writer.WriteLine(att.Code);
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.prototype.WriteDescription = function (me)
{
    if (me.Description == null || me.Description.length == 0)
        return;
    this.Writer.WriteLine("/// <summary>");
    for (var $i7 = 0, $t7 = me.Description.split("\n"), $l7 = $t7.length, line = $t7[$i7]; $i7 < $l7; $i7++, line = $t7[$i7])
    {
        this.Writer.WriteLine("///" + line);
    }
    this.Writer.WriteLine("/// </summary>");
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseClass = function (ch)
{
    var name = $(ch).text();
    var isClass = GreenRide.Website.GoogleMaps.Extensions.Contains(name, "class");
    var isJson = GreenRide.Website.GoogleMaps.Extensions.Contains(name, "object specification");
    name = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace(GreenRide.Website.GoogleMaps.Extensions.RemoveLast(GreenRide.Website.GoogleMaps.Extensions.RemoveLast(name, "class"), "object specification"));
    var tokens = name.split(".");
    name = tokens[tokens.length - 1];
    var ce = (function ()
    {
        var $v2 = new GreenRide.Website.GoogleMaps.Class();
        $v2.Name = name;
        $v2.Members =  [];
        return $v2;
    }).call(this);
    if (isJson)
        ce.Attributes.push((function ()
        {
            var $v3 = new GreenRide.Website.GoogleMaps.Attribute();
            $v3.Code = "[JsType(JsMode.Json)]";
            return $v3;
        }).call(this));
    else
        ce.Attributes.push((function ()
        {
            var $v4 = new GreenRide.Website.GoogleMaps.Attribute();
            $v4.Code = "[JsType(JsMode.Prototype)]";
            return $v4;
        }).call(this));
    var tables = $(ch).nextUntil("h2").filter("table");
    for (var $i8 = 0, $l8 = tables.length, tbl = tables[$i8]; $i8 < $l8; $i8++, tbl = tables[$i8])
    {
        if (GreenRide.Website.GoogleMaps.Extensions.Contains(tbl.summary, "Constructor"))
        {
            for (var $i9 = 0, $t9 = GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseMethods(tbl, true), $l9 = $t9.length, me = $t9[$i9]; $i9 < $l9; $i9++, me = $t9[$i9])
                ce.Members.push(me);
        }
        else if (GreenRide.Website.GoogleMaps.Extensions.Contains(tbl.summary, "Method"))
        {
            for (var $i10 = 0, $t10 = GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseMethods(tbl, false), $l10 = $t10.length, me = $t10[$i10]; $i10 < $l10; $i10++, me = $t10[$i10])
                ce.Members.push(me);
        }
        else if (GreenRide.Website.GoogleMaps.Extensions.Contains(tbl.summary, "Prop"))
        {
            for (var $i11 = 0, $t11 = GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseProperties(tbl), $l11 = $t11.length, me = $t11[$i11]; $i11 < $l11; $i11++, me = $t11[$i11])
                ce.Members.push(me);
        }
        else if (GreenRide.Website.GoogleMaps.Extensions.Contains(tbl.summary, "Event"))
        {
            for (var $i12 = 0, $t12 = GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseEvents(tbl), $l12 = $t12.length, me = $t12[$i12]; $i12 < $l12; $i12++, me = $t12[$i12])
                ce.Members.push(me);
        }
    }
    for (var $i13 = 0, $t13 = ce.Members, $l13 = $t13.length, me = $t13[$i13]; $i13 < $l13; $i13++, me = $t13[$i13])
    {
        GreenRide.Website.GoogleMaps.GoogleMapsParser.FixType(me.Type);
        if (me instanceof GreenRide.Website.GoogleMaps.Method)
        {
            var me2 = me instanceof GreenRide.Website.GoogleMaps.Method || me == null ? me : (function ()
            {
                throw new Error("InvalidCastException");
            }());
            for (var $i14 = 0, $t14 = me2.Parameters, $l14 = $t14.length, prm = $t14[$i14]; $i14 < $l14; $i14++, prm = $t14[$i14])
            {
                GreenRide.Website.GoogleMaps.GoogleMapsParser.FixType(prm.Type);
            }
        }
    }
    return ce;
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.FixType = function (ce)
{
    if (GreenRide.Website.GoogleMaps.Extensions.Contains(ce.Name, "|"))
        ce.Name = "object";
    if (ce.Name == "number")
        ce.Name = "JsNumber";
    if (ce.Name == "*")
        ce.Name = "object";
    if (ce.Name == "boolean")
        ce.Name = "bool";
    if (ce.Name == "None")
        ce.Name = "void";
    if (GreenRide.Website.GoogleMaps.Extensions.Contains(ce.Name, "Array."))
        ce.Name = ce.Name.replace(new RegExp("Array\\.", "g"), "JsArray");
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseProperties = function (tbl)
{
    var list =  [];
    var trs = $(tbl).find("tbody > tr");
    for (var $i15 = 0, $l15 = trs.length, tr = trs[$i15]; $i15 < $l15; $i15++, tr = trs[$i15])
    {
        var cells = $(tr).find("td");
        var sig = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[0]).text());
        var type = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[1]).text());
        var desc = $(cells[2]).text();
        var name = sig;
        var me = (function ()
        {
            var $v5 = new GreenRide.Website.GoogleMaps.Property();
            $v5.Name = name;
            $v5.Type = (function ()
            {
                var $v6 = new GreenRide.Website.GoogleMaps.Class();
                $v6.Name = type;
                return $v6;
            }).call(this);
            $v5.Description = desc;
            return $v5;
        }).call(this);
        list.push(me);
    }
    return list;
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseEvents = function (tbl)
{
    var list =  [];
    var trs = $(tbl).find("tbody > tr");
    for (var $i16 = 0, $l16 = trs.length, tr = trs[$i16]; $i16 < $l16; $i16++, tr = trs[$i16])
    {
        var cells = $(tr).find("td");
        var sig = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[0]).text());
        var type = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[1]).text());
        var desc = $(cells[2]).text();
        if (GreenRide.Website.GoogleMaps.Extensions.Contains(type, "None"))
            type = "JsAction";
        else
            type = "JsAction<" + type + ">";
        var name = sig;
        var me = (function ()
        {
            var $v7 = new GreenRide.Website.GoogleMaps.Property();
            $v7.Name = name;
            $v7.Type = (function ()
            {
                var $v8 = new GreenRide.Website.GoogleMaps.Class();
                $v8.Name = type;
                return $v8;
            }).call(this);
            $v7.Description = desc;
            return $v7;
        }).call(this);
        list.push(me);
    }
    return list;
};
GreenRide.Website.GoogleMaps.GoogleMapsParser.ParseMethods = function (tbl, isCtor)
{
    var list =  [];
    var trs = $(tbl).find("tbody > tr");
    for (var $i17 = 0, $l17 = trs.length, tr = trs[$i17]; $i17 < $l17; $i17++, tr = trs[$i17])
    {
        var cells = $(tr).find("td");
        var sig = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[0]).text());
        var type;
        var desc;
        if (isCtor)
        {
            type = "";
            desc = $(cells[1]).text();
        }
        else
        {
            type = GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace($(cells[1]).text());
            desc = $(cells[2]).text();
        }
        var name = sig.substr(0, sig.indexOf("("));
        var me = (function ()
        {
            var $v9 = new GreenRide.Website.GoogleMaps.Method();
            $v9.Name = name;
            $v9.Type = (function ()
            {
                var $v10 = new GreenRide.Website.GoogleMaps.Class();
                $v10.Name = type;
                return $v10;
            }).call(this);
            $v9.Description = desc;
            $v9.IsConstructor = isCtor;
            return $v9;
        }).call(this);
        var prms = sig.substr(sig.indexOf("(") + 1);
        prms = prms.substr(0, prms.indexOf(")"));
        if (prms.length > 0)
        {
            if (!GreenRide.Website.GoogleMaps.Extensions.Contains(prms, "function"))
            {
                var prms2 = prms.split(",");
                for (var $i18 = 0, $l18 = prms2.length, prm = prms2[$i18]; $i18 < $l18; $i18++, prm = prms2[$i18])
                {
                    var tokens = prm.split(":");
                    var prmTypeName = (tokens[1] != null ? tokens[1] : "").trim();
                    var prmName = tokens[0].trim();
                    var prm3 = (function ()
                    {
                        var $v11 = new GreenRide.Website.GoogleMaps.Parameter();
                        $v11.Type = (function ()
                        {
                            var $v12 = new GreenRide.Website.GoogleMaps.Class();
                            $v12.Name = (prmTypeName != null ? prmTypeName : "object");
                            return $v12;
                        }).call(this);
                        return $v11;
                    }).call(this);
                    if (GreenRide.Website.GoogleMaps.Extensions.EndsWith(prmName, "?"))
                    {
                        prmName = prmName.substr(0, prmName.length - 1);
                        prm3.IsOptional = true;
                    }
                    prm3.Name = prmName;
                    me.Parameters.push(prm3);
                }
            }
        }
        list.push(me);
    }
    return list;
};
GreenRide.Website.GoogleMaps.CodeWriter = function ()
{
    this.Writer = null;
    this.Writer =  [];
};
GreenRide.Website.GoogleMaps.CodeWriter.prototype.BeginBlock = function ()
{
    this.WriteLine("{");
};
GreenRide.Website.GoogleMaps.CodeWriter.prototype.EndBlock = function ()
{
    this.WriteLine("}");
};
GreenRide.Website.GoogleMaps.CodeWriter.prototype.WriteLine = function (obj)
{
    if (obj == null)
        return;
    this.Write(obj + "\n");
};
GreenRide.Website.GoogleMaps.CodeWriter.prototype.toString = function ()
{
    return this.Writer.join("");
};
GreenRide.Website.GoogleMaps.CodeWriter.prototype.Write = function (s)
{
    this.Writer.push(s);
};
GreenRide.Website.GoogleMaps.Extensions = function ()
{
};
GreenRide.Website.GoogleMaps.Extensions.Contains = function (s, find)
{
    return s.indexOf(find) >= 0;
};
GreenRide.Website.GoogleMaps.Extensions.EndsWith = function (s, find)
{
    return s.lastIndexOf(find) == s.length - find.length;
};
GreenRide.Website.GoogleMaps.Extensions.JsSelect = function (list, selector)
{
    var list2 =  [];
    for (var $i19 = 0, $l19 = list.length, item = list[$i19]; $i19 < $l19; $i19++, item = list[$i19])
        list2.push(selector(item));
    return list2;
};
GreenRide.Website.GoogleMaps.Extensions.RemoveWhitespace = function (s)
{
    return s.replace(new RegExp("\\s", "g"), "");
};
GreenRide.Website.GoogleMaps.Extensions.RemoveLast = function (s, find)
{
    var index = s.lastIndexOf(find);
    if (index >= 0)
        return s.substring(0, index) + s.substring(index + find.length);
    return s;
};
GreenRide.Website.GoogleMaps.Assembly = function ()
{
    this.Classes = null;
    this.Classes =  [];
};
GreenRide.Website.GoogleMaps.Member = function ()
{
    this.Type = null;
    this.Name = null;
    this.Description = null;
    this.Attributes = null;
    this.Attributes =  [];
};
GreenRide.Website.GoogleMaps.Attribute = function ()
{
    this.Code = null;
};
GreenRide.Website.GoogleMaps.Method = function ()
{
    this.IsConstructor = false;
    this.Parameters = null;
    GreenRide.Website.GoogleMaps.Member.call(this);
    this.Parameters =  [];
};
$Inherit(GreenRide.Website.GoogleMaps.Method, GreenRide.Website.GoogleMaps.Member);
GreenRide.Website.GoogleMaps.Property = function ()
{
    GreenRide.Website.GoogleMaps.Member.call(this);
};
$Inherit(GreenRide.Website.GoogleMaps.Property, GreenRide.Website.GoogleMaps.Member);
GreenRide.Website.GoogleMaps.Parameter = function ()
{
    this.IsOptional = false;
    GreenRide.Website.GoogleMaps.Member.call(this);
};
$Inherit(GreenRide.Website.GoogleMaps.Parameter, GreenRide.Website.GoogleMaps.Member);
GreenRide.Website.GoogleMaps.Class = function ()
{
    this.Members = null;
    GreenRide.Website.GoogleMaps.Member.call(this);
};
$Inherit(GreenRide.Website.GoogleMaps.Class, GreenRide.Website.GoogleMaps.Member);
