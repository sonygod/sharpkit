/*Generated by SharpKit 5 v4.29.9000*/
"use strict";
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Activator =
{
    fullname: "System.Activator",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        CreateInstance$$Type: function (type)
        {
            return new type._JsType.ctor();
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo: function (type, bindingAttr, binder, args, culture)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo$$Object$Array: function (type, bindingAttr, binder, args, culture, activationAttributes)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array: function (type, args)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array$$Object$Array: function (type, args, activationAttributes)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Boolean: function (type, nonPublic)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$1: function (T)
        {
            return Cast(System.Activator.CreateInstance$$Type(Typeof(T)), T);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Activator);
var System$Attribute =
{
    fullname: "System.Attribute",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Attribute);
var System$Collections$Generic$IEnumerator$1 = {fullname: "System.Collections.Generic.IEnumerator$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IEnumerator$1);
var System$Collections$Generic$IEnumerable$1 = {fullname: "System.Collections.Generic.IEnumerable$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IEnumerable$1);
var System$Collections$Generic$IList$1 = {fullname: "System.Collections.Generic.IList$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.ICollection$1"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IList$1);
var System$Collections$Generic$ICollection$1 = {fullname: "System.Collections.Generic.ICollection$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.IEnumerable$1"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$ICollection$1);
var System$Collections$Generic$IDictionary$2 = {fullname: "System.Collections.Generic.IDictionary$2", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IDictionary$2);
var System$Collections$Generic$ISet$1 = {fullname: "System.Collections.Generic.ISet$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$ISet$1);
var System$Collections$IDictionary = {fullname: "System.Collections.IDictionary", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.ICollection", "System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$IDictionary);
var System$Collections$IEnumerable = {fullname: "System.Collections.IEnumerable", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$IEnumerable);
var System$Collections$IEnumerator = {fullname: "System.Collections.IEnumerator", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$IEnumerator);
var System$Collections$ICollection = {fullname: "System.Collections.ICollection", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$ICollection);
var System$Collections$IList = {fullname: "System.Collections.IList", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.ICollection"], Kind: "Interface"};
JsTypes.push(System$Collections$IList);
var System$Comparison$1 =
{
    fullname: "System.Comparison$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Comparison$1);
var System$ComponentModel$CancelEventHandler =
{
    fullname: "System.ComponentModel.CancelEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventHandler);
var System$ComponentModel$CancelEventArgs =
{
    fullname: "System.ComponentModel.CancelEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = false;
        },
        ctor$$Boolean: function (cancel)
        {
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = cancel;
        },
        Cancel$$: "System.Boolean",
        get_Cancel: function ()
        {
            return this._Cancel;
        },
        set_Cancel: function (value)
        {
            this._Cancel = value;
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventArgs);
var System$ComponentModel$INotifyPropertyChanging = {fullname: "System.ComponentModel.INotifyPropertyChanging", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$ComponentModel$INotifyPropertyChanging);
var System$ComponentModel$INotifyPropertyChanged = {fullname: "System.ComponentModel.INotifyPropertyChanged", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$ComponentModel$INotifyPropertyChanged);
var System$ComponentModel$PropertyChangedEventHandler =
{
    fullname: "System.ComponentModel.PropertyChangedEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventHandler);
var System$ComponentModel$PropertyChangedEventArgs =
{
    fullname: "System.ComponentModel.PropertyChangedEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (propertyName)
        {
            this._PropertyName = null;
            System.EventArgs.ctor.call(this);
            this._PropertyName = propertyName;
        },
        PropertyName$$: "System.String",
        get_PropertyName: function ()
        {
            return this._PropertyName;
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventArgs);
var System$DateTime =
{
    fullname: "System.DateTime",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.DateTime.MinValue = null;
        },
        Parse$$String: function (str)
        {
            return new System.DateTime.ctor$$Int64(Date.parse(str));
        },
        DaysInMonth: function (year, month)
        {
            return 32 - new Date(year, month-1, 32).getDate();
        },
        Compare: function (t1, t2)
        {
            return t1.date.valueOf() - t2.date.valueOf();
        },
        Now$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Now: function ()
        {
            return new System.DateTime.ctor$$Date(new Date());
        },
        op_Equality: function (t1, t2)
        {
            if (t1 == t2)
                return true;
            if (t1 == null || t2 == null)
                return false;
            return t1.date.getTime() == t2.date.getTime();
        },
        op_Inequality: function (t1, t2)
        {
            if (t1 != t2)
                return true;
            if (t1 == null || t2 == null)
                return false;
            return t1.date.getTime() != t2.date.getTime();
        },
        op_Subtraction$$DateTime$$DateTime: function (t1, t2)
        {
            return System.TimeSpan.FromMilliseconds(t1.date.getTime() - t2.date.getTime());
        },
        op_Subtraction$$DateTime$$TimeSpan: function (t1, t2)
        {
            return new System.DateTime.ctor$$Date(new Date(t1.date.getDate() - Cast(t2.get_TotalMilliseconds(), System.Int64.ctor)));
        },
        op_Addition$$DateTime$$DateTime: function (t1, t2)
        {
            return System.TimeSpan.FromMilliseconds(t1.date.getTime() + t2.date.getTime());
        },
        op_Addition$$DateTime$$TimeSpan: function (t1, t2)
        {
            return new System.DateTime.ctor$$Date(new Date(t1.date.getDate() + Cast(t2.get_TotalMilliseconds(), System.Int64.ctor)));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = System.DateTime.MinValue.date;
        },
        ToJsDate: function ()
        {
            return this.date;
        },
        ctor$$Int32$$Int32$$Int32: function (year, month, day)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date();
            this.set_Year(year);
            this.set_Month(month);
            this.set_Day(day);
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32: function (year, month, day, hour, minute, second)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date();
            this.set_Year(year);
            this.set_Month(month);
            this.set_Day(day);
            this.set_Hour(hour);
            this.set_Minute(minute);
            this.set_Second(second);
        },
        ctor$$Date: function (jsDate)
        {
            this.date = null;
            System.Object.ctor.call(this);
            if (jsDate != null)
                this.date = jsDate;
            else
                this.date = System.DateTime.MinValue.date;
        },
        ctor$$Int64: function (jsDate)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date(jsDate);
        },
        CompareTo: function (value)
        {
            return this.date.valueOf() - value.date.valueOf();
        },
        Year$$: "System.Int32",
        get_Year: function ()
        {
            return this.date.getFullYear();
        },
        set_Year: function (value)
        {
            this.date.setFullYear(value);
        },
        Month$$: "System.Int32",
        get_Month: function ()
        {
            return this.date.getMonth() + 1;
        },
        set_Month: function (value)
        {
            this.date.setMonth(value - 1);
        },
        Day$$: "System.Int32",
        get_Day: function ()
        {
            return this.date.getDate();
        },
        set_Day: function (value)
        {
            this.date.setDate(value);
        },
        Hour$$: "System.Int32",
        get_Hour: function ()
        {
            return this.date.getHours();
        },
        set_Hour: function (value)
        {
            this.date.setHours(value);
        },
        Minute$$: "System.Int32",
        get_Minute: function ()
        {
            return this.date.getMinutes();
        },
        set_Minute: function (value)
        {
            this.date.setMinutes(value);
        },
        Second$$: "System.Int32",
        get_Second: function ()
        {
            return this.date.getSeconds();
        },
        set_Second: function (value)
        {
            this.date.setSeconds(value);
        },
        Millisecond$$: "System.Int32",
        get_Millisecond: function ()
        {
            return this.date.getMilliseconds();
        },
        set_Millisecond: function (value)
        {
            this.date.setMilliseconds(value);
        },
        DayOfWeek$$: "System.Int32",
        get_DayOfWeek: function ()
        {
            return this.date.getDay();
        },
        toString: function ()
        {
            return this.date.toString();
        },
        AddDays: function (days)
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.addDays(this.date, days));
        },
        AddMonths: function (months)
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.addMonths(this.date, months));
        },
        Today$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Today: function ()
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.removeTime(new Date()));
        },
        Subtract$$DateTime: function (value)
        {
            var diff = this.date.valueOf() - value.date.valueOf();
            return new System.TimeSpan.ctor$$Int64(diff * System.TimeSpan.TicksPerMillisecond);
        },
        Subtract$$TimeSpan: function (value)
        {
            var newDate = new Date(this.date.valueOf());
            newDate.setMilliseconds(this.date.getMilliseconds() + value.get_TotalMilliseconds());
            return new System.DateTime.ctor$$Date(newDate);
        },
        ToString$$String: function (format)
        {
            format = format.Replace$$String$$String("yyyy", this.get_Year().ToString$$String("0000"));
            format = format.Replace$$String$$String("yyyy", this.get_Year().ToString$$String("00"));
            format = format.Replace$$String$$String("y", this.get_Year().toString());
            format = format.Replace$$String$$String("MM", this.get_Month().ToString$$String("00"));
            format = format.Replace$$String$$String("M", this.get_Month().toString());
            format = format.Replace$$String$$String("dd", this.get_Day().ToString$$String("00"));
            format = format.Replace$$String$$String("d", this.get_Day().toString());
            format = format.Replace$$String$$String("HH", this.get_Hour().ToString$$String("00"));
            format = format.Replace$$String$$String("H", this.get_Hour().toString());
            format = format.Replace$$String$$String("mm", this.get_Minute().ToString$$String("00"));
            format = format.Replace$$String$$String("m", this.get_Minute().toString());
            format = format.Replace$$String$$String("ss", this.get_Second().ToString$$String("00"));
            format = format.Replace$$String$$String("s", this.get_Second().toString());
            return format;
        }
    }
};
JsTypes.push(System$DateTime);
var SharpKit$JavaScript$Private$Extensions =
{
    fullname: "SharpKit.JavaScript.Private.Extensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        addDays: function (date, days)
        {
            var date2 = new Date(date.valueOf());
            date2.setDate(date2.getDate() + days);
            return date2;
        },
        addMonths: function (date, months)
        {
            var date2 = new Date(date.valueOf());
            date2.setMonth(date2.getMonth() + months);
            return date2;
        },
        removeTime: function (date)
        {
            var date2 = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            return date2;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$Extensions);
var System$Delegate =
{
    fullname: "System.Delegate",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Combine$$Delegate$Array: function (delegates)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Combine$$Delegate$$Delegate: function (delegate1, delegate2)
        {
            return CombineDelegates(delegate1, delegate2);
        },
        Remove: function (delegate1, delegate2)
        {
            return RemoveDelegate(delegate1, delegate2);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        DynamicInvoke: function (args)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$Delegate);
var System$MulticastDelegate =
{
    fullname: "System.MulticastDelegate",
    baseTypeName: "System.Delegate",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Delegate.ctor.call(this);
        },
        GetInvocationList: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Equals$$MulticastDelegate: function (del)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Invoke: function (varargs)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$MulticastDelegate);
var System$Action =
{
    fullname: "System.Action",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action);
var System$Action$1 =
{
    fullname: "System.Action$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$1);
var System$Action$2 =
{
    fullname: "System.Action$2",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$2);
var System$Action$3 =
{
    fullname: "System.Action$3",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, T3, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$3);
var System$Func$1 =
{
    fullname: "System.Func$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (TResult, obj, func)
        {
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$1);
var System$Func$2 =
{
    fullname: "System.Func$2",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, TResult, obj, func)
        {
            this.T = T;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$2);
var System$Func$3 =
{
    fullname: "System.Func$3",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, TResult, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$3);
var System$Func$4 =
{
    fullname: "System.Func$4",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, T3, TResult, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$4);
var System$EventHandler =
{
    fullname: "System.EventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler);
var System$EventHandler$1 =
{
    fullname: "System.EventHandler$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (TEventArgs, obj, func)
        {
            this.TEventArgs = TEventArgs;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler$1);
var System$Predicate$1 =
{
    fullname: "System.Predicate$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Predicate$1);
var System$Enum =
{
    fullname: "System.Enum",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetNames: function (type)
        {
            var jsType = type._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
            {
                array.push(p);
            }
            return array;
        },
        GetValues: function (type)
        {
            var jsType = type._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
            {
                array.push(jsType.staticDefinition[p]);
            }
            return array;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Enum);
var System$Environment =
{
    fullname: "System.Environment",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetResourceString: function (p)
        {
            return p;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Environment);
var System$EventArgs =
{
    fullname: "System.EventArgs",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$EventArgs);
var System$Exception =
{
    fullname: "System.Exception",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor$$String$$Exception: function (message, innerException)
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
            this._InnerException = innerException;
        },
        ctor$$String: function (message)
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
        },
        ctor: function ()
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
        },
        InnerException$$: "System.Exception",
        get_InnerException: function ()
        {
            return this._InnerException;
        },
        Message$$: "System.String",
        get_Message: function ()
        {
            return this._Message;
        },
        toString: function ()
        {
            var ie = this.get_InnerException();
            if (ie == null)
                return this.get_Message();
            return this.get_Message() + ", " + this.get_InnerException();
        },
        SetErrorCode: function (hr)
        {
        }
    }
};
JsTypes.push(System$Exception);
var System$NotImplementedException =
{
    fullname: "System.NotImplementedException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Exception.ctor$$String.call(this, "NotImplementedException");
        },
        ctor$$String: function (s)
        {
            System.Exception.ctor$$String.call(this, "NotImplementedException: " + s);
        }
    }
};
JsTypes.push(System$NotImplementedException);
var System$SystemException =
{
    fullname: "System.SystemException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Exception.ctor$$String.call(this, System.Environment.GetResourceString("Arg_SystemException"));
            this.SetErrorCode(-2146233087);
        },
        ctor$$String: function (message)
        {
            System.Exception.ctor$$String.call(this, message);
            this.SetErrorCode(-2146233087);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            System.Exception.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233087);
        }
    }
};
JsTypes.push(System$SystemException);
var System$ArgumentException =
{
    fullname: "System.ArgumentException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, System.Environment.GetResourceString("Arg_ArgumentException"));
            this.SetErrorCode(-2147024809);
        },
        ctor$$String: function (message)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        },
        ctor$$String$$String: function (message, paramName)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$String$$Exception: function (message, paramName, innerException)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ParamName$$: "System.String",
        get_ParamName: function ()
        {
            return this.m_paramName;
        }
    }
};
JsTypes.push(System$ArgumentException);
var System$NullReferenceException =
{
    fullname: "System.NullReferenceException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.SystemException.ctor$$String.call(this, "Object reference not set to an instance of object");
        },
        ctor$$String: function (message)
        {
            System.SystemException.ctor$$String.call(this, message);
        }
    }
};
JsTypes.push(System$NullReferenceException);
var System$NotSupportedException =
{
    fullname: "System.NotSupportedException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.SystemException.ctor$$String.call(this, "Arg_NotSupportedException");
        },
        ctor$$String: function (message)
        {
            System.SystemException.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        }
    }
};
JsTypes.push(System$NotSupportedException);
var System$ArgumentOutOfRangeException =
{
    fullname: "System.ArgumentOutOfRangeException",
    baseTypeName: "System.ArgumentException",
    staticDefinition:
    {
        cctor: function ()
        {
            System.ArgumentOutOfRangeException._rangeMessage = null;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String.call(this, "Arg_ArgumentOutOfRangeException");
            this.SetErrorCode(-2146233086);
        },
        ctor$$String: function (paramName)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, "Arg_ArgumentOutOfRangeException", paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$String: function (paramName, message)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Object$$String: function (paramName, actualValue, message)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.m_actualValue = actualValue;
            this.SetErrorCode(-2146233086);
        },
        ActualValue$$: "System.Object",
        get_ActualValue: function ()
        {
            return this.m_actualValue;
        },
        RangeMessage$$: "System.String",
        get_RangeMessage: function ()
        {
            if (System.ArgumentOutOfRangeException._rangeMessage == null)
            {
                System.ArgumentOutOfRangeException._rangeMessage = "Arg_ArgumentOutOfRangeException";
            }
            return System.ArgumentOutOfRangeException._rangeMessage;
        }
    }
};
JsTypes.push(System$ArgumentOutOfRangeException);
var System$IDisposable = {fullname: "System.IDisposable", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$IDisposable);
var System$Nullable$1 =
{
    fullname: "System.Nullable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (T, value)
        {
            this.T = T;
            this.hasValue = false;
            this.value = null;
            System.Object.ctor.call(this);
            this.value = value;
            this.hasValue = true;
        },
        HasValue$$: "System.Boolean",
        get_HasValue: function ()
        {
            return this.hasValue;
        },
        Value$$: "`0",
        get_Value: function ()
        {
            if (!this.get_HasValue())
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("InvalidOperation_NoValue"), new Error());
            }
            return this.value;
        },
        GetValueOrDefault: function ()
        {
            return this.value;
        },
        GetValueOrDefault$$T: function (defaultValue)
        {
            if (!this.get_HasValue())
            {
                return defaultValue;
            }
            return this.value;
        },
        Equals$$Object: function (other)
        {
            if (!this.get_HasValue())
            {
                return (other == null);
            }
            if (other == null)
            {
                return false;
            }
            return this.value.Equals$$Object(other);
        },
        GetHashCode: function ()
        {
            if (!this.get_HasValue())
            {
                return 0;
            }
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            if (!this.get_HasValue())
            {
                return "";
            }
            return this.value.toString();
        }
    }
};
JsTypes.push(System$Nullable$1);
var System$StringSplitOptions =
{
    fullname: "System.StringSplitOptions",
    staticDefinition: {None: "None", RemoveEmptyEntries: "RemoveEmptyEntries"},
    Kind: "Enum"
};
JsTypes.push(System$StringSplitOptions);
var System$Char =
{
    fullname: "System.Char",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        IsWhiteSpace: function (c)
        {
            return /\s/.test(c);
        },
        IsUpper: function (c)
        {
            return c.toUpperCase() == c;
        },
        IsDigit$$Char: function (s)
        {
            return /[0-9]/.test(s);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Char);
var System$CharEnumerator =
{
    fullname: "System.CharEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.IEnumerator"],
    Kind: "Class",
    definition:
    {
        ctor: function (str2)
        {
            this.currentElement = "\0";
            this.index = 0;
            this.str = null;
            System.Object.ctor.call(this);
            this.str = str2;
            this.index = -1;
        },
        MoveNext: function ()
        {
            if (this.index < (this.str.length - 1))
            {
                this.index++;
                this.currentElement = this.str.charAt(this.index);
                return true;
            }
            this.index = this.str.length;
            return false;
        },
        Reset: function ()
        {
            this.currentElement = "\0";
            this.index = -1;
        },
        Current$$: "System.Char",
        get_Current: function ()
        {
            if (this.index == -1)
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Not Started"), new Error());
            }
            if (this.index >= this.str.length)
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Ended"), new Error());
            }
            return this.currentElement;
        }
    }
};
JsTypes.push(System$CharEnumerator);
var System$StringComparison =
{
    fullname: "System.StringComparison",
    staticDefinition: {CurrentCulture: "CurrentCulture", CurrentCultureIgnoreCase: "CurrentCultureIgnoreCase", InvariantCulture: "InvariantCulture", InvariantCultureIgnoreCase: "InvariantCultureIgnoreCase", Ordinal: "Ordinal", OrdinalIgnoreCase: "OrdinalIgnoreCase"},
    Kind: "Enum"
};
JsTypes.push(System$StringComparison);
var System$TimeSpan =
{
    fullname: "System.TimeSpan",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.TimeSpan.TicksPerMillisecond = 10000;
            System.TimeSpan.MillisecondsPerTick = 0.0001;
            System.TimeSpan.TicksPerSecond = 10000000;
            System.TimeSpan.SecondsPerTick = 1E-07;
            System.TimeSpan.TicksPerMinute = 600000000;
            System.TimeSpan.MinutesPerTick = 1.66666666666667E-09;
            System.TimeSpan.TicksPerHour = 36000000000;
            System.TimeSpan.HoursPerTick = 2.77777777777778E-11;
            System.TimeSpan.TicksPerDay = 864000000000;
            System.TimeSpan.DaysPerTick = 1.15740740740741E-12;
            System.TimeSpan.MillisPerSecond = 1000;
            System.TimeSpan.MillisPerMinute = 60000;
            System.TimeSpan.MillisPerHour = 3600000;
            System.TimeSpan.MillisPerDay = 86400000;
            System.TimeSpan.MaxSeconds = 922337203685;
            System.TimeSpan.MinSeconds = -922337203685;
            System.TimeSpan.MaxMilliSeconds = 922337203685477;
            System.TimeSpan.MinMilliSeconds = -922337203685477;
            System.TimeSpan.TicksPerTenthSecond = 1000000;
            System.TimeSpan.Zero = new System.TimeSpan.ctor$$Int64(0);
            System.TimeSpan.MaxValue = new System.TimeSpan.ctor$$Int64(9223372036854775807);
            System.TimeSpan.MinValue = new System.TimeSpan.ctor$$Int64(-9223372036854775808);
        },
        Compare: function (t1, t2)
        {
            if (t1._ticks > t2._ticks)
            {
                return 1;
            }
            if (t1._ticks < t2._ticks)
            {
                return -1;
            }
            return 0;
        },
        FromDays: function (value)
        {
            return System.TimeSpan.Interval(value, 86400000);
        },
        Equals$$TimeSpan$$TimeSpan: function (t1, t2)
        {
            return t1._ticks == t2._ticks;
        },
        FromHours: function (value)
        {
            return System.TimeSpan.Interval(value, 3600000);
        },
        Interval: function (value, scale)
        {
            if (System.Double.IsNaN(value))
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_CannotBeNaN"), new Error());
            }
            var num = value * scale;
            var num2 = num + ((value >= 0) ? 0.5 : -0.5);
            if (num2 > 922337203685477 || num2 < -922337203685477)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((num2 * 10000));
        },
        FromMilliseconds: function (value)
        {
            return System.TimeSpan.Interval(value, 1);
        },
        FromMinutes: function (value)
        {
            return System.TimeSpan.Interval(value, 60000);
        },
        FromSeconds: function (value)
        {
            return System.TimeSpan.Interval(value, 1000);
        },
        FromTicks: function (value)
        {
            return new System.TimeSpan.ctor$$Int64(value);
        },
        TimeToTicks: function (hour, minute, second)
        {
            var num = hour * 3600 + minute * 60 + second;
            if (num > 922337203685 || num < -922337203685)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null , "Overflow_TimeSpanTooLong"), new Error());
            }
            return num * 10000000;
        },
        op_UnaryNegation: function (t)
        {
            if (t._ticks == System.TimeSpan.MinValue._ticks)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-t._ticks);
        },
        op_Subtraction: function (t1, t2)
        {
            return t1.Subtract(t2);
        },
        op_UnaryPlus: function (t)
        {
            return t;
        },
        op_Addition: function (t1, t2)
        {
            return t1.Add(t2);
        },
        op_Equality: function (t1, t2)
        {
            return t1._ticks == t2._ticks;
        },
        op_Inequality: function (t1, t2)
        {
            return t1._ticks != t2._ticks;
        },
        op_LessThan: function (t1, t2)
        {
            return t1._ticks < t2._ticks;
        },
        op_LessThanOrEqual: function (t1, t2)
        {
            return t1._ticks <= t2._ticks;
        },
        op_GreaterThan: function (t1, t2)
        {
            return t1._ticks > t2._ticks;
        },
        op_GreaterThanOrEqual: function (t1, t2)
        {
            return t1._ticks >= t2._ticks;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
        },
        Ticks$$: "System.Int64",
        get_Ticks: function ()
        {
            return this._ticks;
        },
        Days$$: "System.Int32",
        get_Days: function ()
        {
            return (this._ticks / 864000000000);
        },
        Hours$$: "System.Int32",
        get_Hours: function ()
        {
            return (this._ticks / 36000000000 % 24);
        },
        Milliseconds$$: "System.Int32",
        get_Milliseconds: function ()
        {
            return (this._ticks / 10000 % 1000);
        },
        Minutes$$: "System.Int32",
        get_Minutes: function ()
        {
            return (this._ticks / 600000000 % 60);
        },
        Seconds$$: "System.Int32",
        get_Seconds: function ()
        {
            return (this._ticks / 10000000 % 60);
        },
        TotalDays$$: "System.Double",
        get_TotalDays: function ()
        {
            return this._ticks * 1.15740740740741E-12;
        },
        TotalHours$$: "System.Double",
        get_TotalHours: function ()
        {
            return this._ticks * 2.77777777777778E-11;
        },
        TotalMilliseconds$$: "System.Double",
        get_TotalMilliseconds: function ()
        {
            var num = this._ticks * 0.0001;
            if (num > 922337203685477)
            {
                return 922337203685477;
            }
            if (num < -922337203685477)
            {
                return -922337203685477;
            }
            return num;
        },
        TotalMinutes$$: "System.Double",
        get_TotalMinutes: function ()
        {
            return this._ticks / System.TimeSpan.TicksPerMillisecond / 1000 / 60;
        },
        TotalSeconds$$: "System.Double",
        get_TotalSeconds: function ()
        {
            return this._ticks * 1E-07;
        },
        ctor$$Int64: function (ticks)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            this._ticks = ticks;
        },
        ctor$$Int32$$Int32$$Int32: function (hours, minutes, seconds)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            this._ticks = System.TimeSpan.TimeToTicks(hours, minutes, seconds);
        },
        ctor$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds)
        {
            this._ticks = 0;
            System.TimeSpan.ctor$$Int32$$Int32$$Int32$$Int32$$Int32.call(this, days, hours, minutes, seconds, 0);
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds, milliseconds)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            var num = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;
            if (num > 922337203685477 || num < -922337203685477)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null , "Overflow_TimeSpanTooLong"), new Error());
            }
            this._ticks = num * 10000;
        },
        Add: function (ts)
        {
            var num = this._ticks + ts._ticks;
            if (this._ticks >> 63 == ts._ticks >> 63 && this._ticks >> 63 != num >> 63)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(num);
        },
        CompareTo$$Object: function (value)
        {
            if (value == null)
            {
                return 1;
            }
            if (!(Is(value, System.TimeSpan.ctor)))
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_MustBeTimeSpan"), new Error());
            }
            var ticks = (Cast(value, System.TimeSpan.ctor))._ticks;
            if (this._ticks > ticks)
            {
                return 1;
            }
            if (this._ticks < ticks)
            {
                return -1;
            }
            return 0;
        },
        CompareTo$$TimeSpan: function (value)
        {
            var ticks = value._ticks;
            if (this._ticks > ticks)
            {
                return 1;
            }
            if (this._ticks < ticks)
            {
                return -1;
            }
            return 0;
        },
        Duration: function ()
        {
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks())
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_Duration"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((this._ticks >= 0) ? this._ticks : (-this._ticks));
        },
        Equals$$Object: function (value)
        {
            return Is(value, System.TimeSpan.ctor) && this._ticks == (Cast(value, System.TimeSpan.ctor))._ticks;
        },
        Equals$$TimeSpan: function (obj)
        {
            return this._ticks == obj._ticks;
        },
        GetHashCode: function ()
        {
            return (this._ticks ^ (this._ticks >> 32));
        },
        Negate: function ()
        {
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks())
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-this._ticks);
        },
        Subtract: function (ts)
        {
            var num = this._ticks - ts._ticks;
            if (this._ticks >> 63 != ts._ticks >> 63 && this._ticks >> 63 != num >> 63)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(num);
        }
    }
};
JsTypes.push(System$TimeSpan);
var System$Uri =
{
    fullname: "System.Uri",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (uri)
        {
            this._OriginalString = null;
            System.Object.ctor.call(this);
            this._OriginalString = uri;
        },
        OriginalString$$: "System.String",
        get_OriginalString: function ()
        {
            return this._OriginalString;
        },
        toString: function ()
        {
            return this._OriginalString;
        }
    }
};
JsTypes.push(System$Uri);
var System$ValueType =
{
    fullname: "System.ValueType",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$ValueType);
var SharpKit$Html4$HtmlDomEventHandler =
{
    fullname: "SharpKit.Html4.HtmlDomEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(SharpKit$Html4$HtmlDomEventHandler);
var JsRuntime = function ()
{
};
JsRuntime.Start = function ()
{
    Compile();
};
