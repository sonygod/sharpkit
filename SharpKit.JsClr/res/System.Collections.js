/*Generated by SharpKit v4.25.2000*/
if(typeof(JsTypes) == "undefined")
    JsTypes = [];
var System$Collections$ArrayList=
{
    fullname:"System.Collections.ArrayList",
    baseTypeName:"System.Collections.Generic.List$1",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Collections.Generic.List$1.ctor.call(this,System.Object);
        }
    }
};
JsTypes.push(System$Collections$ArrayList);
var System$Collections$Generic$Dictionary$2=
{
    fullname:"System.Collections.Generic.Dictionary$2",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IDictionary$2"],
    Kind:"Class",
    definition:
    {
        ctor:function(TKey,TValue)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
        },
        ctor$$IEqualityComparer$1:function(TKey,TValue,comparer)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
            this.Comparer = comparer;
        },
        GetHashKey:function(key)
        {
            if(this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add:function(key,value)
        {
            var hashKey=this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        },
        Remove:function(key)
        {
            var hashKey=this.GetHashKey(key);
            delete this._table[hashKey];
            delete this._keys[hashKey];
            this._version++;
            return true;
        },
        ContainsKey:function(key)
        {
            var hashKey=this.GetHashKey(key);
            return typeof(this._table[hashKey]) != "undefined";
        },
        Keys$$:"System.Collections.Generic.ICollection`1",
        get_Keys:function()
        {
            var keys=new Array();
            for(var p in this._keys)
            {
                keys.push(this._keys[p]);
            }
            return keys;
        },
        Values$$:"System.Collections.Generic.ICollection`1",
        get_Values:function()
        {
            var values=new Array();
            for(var p in this._table)
            {
                values.push(this._table[p]);
            }
            return values;
        },
        GetEnumerator:function()
        {
            var array=new Array();
            for(var hashKey in this._table)
            {
                array.push(new System.Collections.Generic.KeyValuePair$2.ctor(this.TKey,this.TValue,this._keys[hashKey],this._table[hashKey]));
            }
            return array.GetEnumerator();
        },
        Clear:function()
        {
            for(var hashKey in this._table)
            {
                this._keys = new Object();
                this._table = new Object();
                this._version++;
                return;
            }
        },
        TryGetValue:function(key,value)
        {
            throw new System.NotImplementedException.ctor();
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            throw new System.NotImplementedException.ctor();
        },
        IsReadOnly$$:"System.Boolean",
        get_IsReadOnly:function()
        {
            throw new System.NotImplementedException.ctor();
        },
        Item$$:"TValue",
        get_Item$$TKey:function(key)
        {
            var hashKey=this.GetHashKey(key);
            return this._table[hashKey];
        },
        set_Item$$TKey:function(key,value)
        {
            var hashKey=this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        }
    }
};
JsTypes.push(System$Collections$Generic$Dictionary$2);
var System$Collections$Generic$HashSet$1=
{
    fullname:"System.Collections.Generic.HashSet$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.ISet$1","System.Collections.Generic.ICollection$1","System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],
    Kind:"Class",
    definition:
    {
        ctor:function(T)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
        },
        ctor$$IEqualityComparer$1:function(T,comparer)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
            this.Comparer = comparer;
        },
        GetHashKey:function(key)
        {
            if(this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] != null)
                return false;
            this.Hashtable[key] = item;
            this._Count++;
            return true;
        },
        UnionWith:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        IntersectWith:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        ExceptWith:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        SymmetricExceptWith:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        IsSubsetOf:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        IsSupersetOf:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        IsProperSupersetOf:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        IsProperSubsetOf:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        Overlaps:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        SetEquals:function(other)
        {
            throw new System.NotImplementedException.ctor();
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            return this._Count;
        },
        IsReadOnly$$:"System.Boolean",
        get_IsReadOnly:function()
        {
            return false;
        },
        Clear:function()
        {
            this.Hashtable = new Object();
            this._Count = 0;
        },
        Contains:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] === item)
                return true;
            return false;
        },
        CopyTo:function(array,arrayIndex)
        {
            throw new System.NotImplementedException.ctor();
        },
        Remove:function(item)
        {
            var key=this.GetHashKey(item);
            if(this.Hashtable[key] === item)
            {
                delete this.Hashtable[key];
                this._Count--;
                return true;
            }
            return false;
        },
        GetEnumerator:function()
        {
            var array=new Array();
            for(var hashKey in this.Hashtable)
            {
                array.push(this.Hashtable[hashKey]);
            }
            return new System.Collections.Generic.JsArrayEnumerator$1.ctor(this.T,array);
        }
    }
};
JsTypes.push(System$Collections$Generic$HashSet$1);
var System$StringComparer=
{
    fullname:"System.StringComparer",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            System.StringComparer._InvariantCultureIgnoreCase = null;
        },
        InvariantCultureIgnoreCase$$:"SharpKit.JavaScript.Private.StringComparer",
        get_InvariantCultureIgnoreCase:function()
        {
            if(System.StringComparer._InvariantCultureIgnoreCase == null)
                System.StringComparer._InvariantCultureIgnoreCase = new SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase.ctor();
            return System.StringComparer._InvariantCultureIgnoreCase;
        }
    },
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collection.Generic.IEqualityComparer"],
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$StringComparer);
var SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase=
{
    fullname:"SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase",
    baseTypeName:"System.StringComparer",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.StringComparer.ctor.call(this);
        },
        Equals$$T$$T:function(x,y)
        {
            if(x == y)
                return true;
            if(x == null || y == null)
                return false;
            return x.toLowerCase() == y.toLowerCase();
        },
        GetHashCode$$T:function(obj)
        {
            if(obj == null)
                return "null";
            return obj.toLowerCase();
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase);
var System$Collections$Generic$KeyValuePair$2=
{
    fullname:"System.Collections.Generic.KeyValuePair$2",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    Kind:"Class",
    definition:
    {
        ctor:function(K,T,key,value)
        {
            this.K = K;
            this.T = T;
            this._Key = null;
            this._Value = null;
            System.Object.ctor.call(this);
            this._Key = key;
            this._Value = value;
        },
        Key$$:"K",
        get_Key:function()
        {
            return this._Key;
        },
        Value$$:"T",
        get_Value:function()
        {
            return this._Value;
        }
    }
};
JsTypes.push(System$Collections$Generic$KeyValuePair$2);
var System$Collections$Generic$Stack$1=
{
    fullname:"System.Collections.Generic.Stack$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.ICollection"],
    Kind:"Class",
    definition:
    {
        ctor:function(T)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
        },
        Clear:function()
        {
            this._list.Clear();
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            return this._list.length;
        },
        GetEnumerator:function()
        {
            return this._list.GetEnumerator();
        },
        ToArray:function()
        {
            return this._list.Clone();
        },
        Push:function(item)
        {
            this._list.push(item);
        },
        Pop:function()
        {
            if(this._list.length == 0)
                throw new Error("Cannot pop from stack - stack is empty");
            return this._list.pop();
        },
        Contains:function(item)
        {
            return this._list.contains(item);
        }
    }
};
JsTypes.push(System$Collections$Generic$Stack$1);
var System$Collections$Generic$JsArrayEnumerator$1=
{
    fullname:"System.Collections.Generic.JsArrayEnumerator$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IEnumerator$1"],
    Kind:"Class",
    definition:
    {
        ctor:function(T,list)
        {
            this.T = T;
            this.List = null;
            this.Index = 0;
            this.ListCount = 0;
            System.Object.ctor.call(this);
            this.List = list;
            this.Index = -1;
            this.ListCount = list.length;
        },
        Current$$:"T",
        get_Current:function()
        {
            return this.List[this.Index];
        },
        Dispose:function()
        {
            this.List = null;
        },
        MoveNext:function()
        {
            this.Index++;
            return this.Index < this.ListCount;
        },
        Reset:function()
        {
            this.Index = -1;
        }
    }
};
JsTypes.push(System$Collections$Generic$JsArrayEnumerator$1);
var System$Collections$Generic$List$1=
{
    fullname:"System.Collections.Generic.List$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IList$1","System.Collections.IList"],
    Kind:"Class",
    definition:
    {
        ctor:function(T)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
        },
        ctor$$IEnumerable$1:function(T,collection)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
            this.AddRange(collection);
        },
        RemoveRange:function(index,count)
        {
            this._list.splice(index,count);
        },
        Clear:function()
        {
            this._list.Clear();
        },
        Count$$:"System.Int32",
        get_Count:function()
        {
            return this._list.length;
        },
        GetEnumerator:function()
        {
            return new System.Collections.IListEnumerator$1.ctor(this.T,this);
        },
        ToArray:function()
        {
            return this._list.Clone();
        },
        AddRange:function(items)
        {
            var $it1=items.GetEnumerator();
            while($it1.MoveNext())
            {
                var item=$it1.get_Current();
                this.Add(item);
            }
        },
        Add:function(item)
        {
            this._list.push(item);
        },
        Remove:function(item)
        {
            var index=this._list.indexOf(item);
            if(index == -1)
                return false;
            this._list.RemoveAt(index);
            return true;
        },
        Contains:function(item)
        {
            return this._list.contains(item);
        },
        SetItems:function(items)
        {
            this.Clear();
            if(items != null)
                this.AddRange(items);
        },
        IndexOf:function(item)
        {
            return this._list.indexOf(item);
        },
        Insert:function(index,item)
        {
            this._list.insert(index,item);
        },
        RemoveAt:function(index)
        {
            this._list.RemoveAt(index);
        },
        TryRemove:function(item)
        {
            throw new System.NotImplementedException.ctor$$String("TryRemove");
        },
        CopyTo:function(array,arrayIndex)
        {
            throw new System.NotImplementedException.ctor$$String("JsImplList$T");
        },
        IsReadOnly$$:"System.Boolean",
        get_IsReadOnly:function()
        {
            throw new System.NotImplementedException.ctor$$String("JsImplList$T");
        },
        Sort:function(comparison)
        {
            this._list.sort(SharpKit.JavaScript.Utils.Js.ToJsFunction(comparison));
        },
        Item$$:"T",
        get_Item$$Int32:function(index)
        {
            if(index >= this._list.length || index < 0)
                throw new System.ArgumentOutOfRangeException.ctor$$String("index");
            return this._list[index];
        },
        set_Item$$Int32:function(index,value)
        {
            if(index >= this._list.length || index < 0)
                throw new System.ArgumentOutOfRangeException.ctor$$String("index");
            this._list[index] = value;
        }
    }
};
JsTypes.push(System$Collections$Generic$List$1);
var System$Collections$IListEnumerator$1=
{
    fullname:"System.Collections.IListEnumerator$1",
    baseTypeName:"System.Object",
    assemblyName:"SharpKit.JsClr",
    interfaceNames:["System.Collections.Generic.IEnumerator$1"],
    Kind:"Class",
    definition:
    {
        ctor:function(T,list)
        {
            this.T = T;
            this.List = null;
            this.Index = 0;
            this.ListCount = 0;
            System.Object.ctor.call(this);
            this.List = list;
            this.Index = -1;
            this.ListCount = list.get_Count();
        },
        Current$$:"T",
        get_Current:function()
        {
            return this.List.get_Item$$Int32(this.Index);
        },
        Dispose:function()
        {
            this.List = null;
        },
        MoveNext:function()
        {
            this.Index++;
            return this.Index < this.ListCount;
        },
        Reset:function()
        {
            this.Index = -1;
        }
    }
};
JsTypes.push(System$Collections$IListEnumerator$1);
