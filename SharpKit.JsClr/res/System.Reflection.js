//@AutoGenerated
Enum("System.Reflection.BindingFlags", null,
{
	CreateInstance:"CreateInstance",
	DeclaredOnly:"DeclaredOnly",
	Default:"Default",
	ExactBinding:"ExactBinding",
	FlattenHierarchy:"FlattenHierarchy",
	GetField:"GetField",
	GetProperty:"GetProperty",
	IgnoreCase:"IgnoreCase",
	IgnoreReturn:"IgnoreReturn",
	Instance:"Instance",
	InvokeMethod:"InvokeMethod",
	NonPublic:"NonPublic",
	OptionalParamBinding:"OptionalParamBinding",
	Public:"Public",
	PutDispProperty:"PutDispProperty",
	PutRefDispProperty:"PutRefDispProperty",
	SetField:"SetField",
	SetProperty:"SetProperty",
	Static:"Static",
	SuppressChangeType:"SuppressChangeType"});
Class("System.Reflection.MemberInfo", "System.Object",
{ //Instance members
	ctor:function()
	{
		System.Object.ctor.call(this);
	}
	,
	Name$$:"System.String",
	get_Name:function System$Reflection$MemberInfo$get_Name()
	{
		return this._Name;
	},
	DeclaringType$$:"SharpKit.JavaScript.Private.JsImplType",
	get_DeclaringType:function System$Reflection$MemberInfo$get_DeclaringType()
	{
		return this._DeclaringType;
	},
	VerifyCustomAttributes:function System$Reflection$MemberInfo$VerifyCustomAttributes()
	{
		this.get_DeclaringType().VerifyCustomAttributesOnTypeAndMembers();
	},
	GetBaseMember:function System$Reflection$MemberInfo$GetBaseMember()
	{
		return null;
	},
	AddCustomAttributes:function System$Reflection$MemberInfo$AddCustomAttributes(list, attributeType, inherit)
	{
		this.VerifyCustomAttributes();
		if (this._CustomAttributes != null)
		{
			for (var i = 0;i < this._CustomAttributes.length;i++)
			{
				var att = this._CustomAttributes[i];
				if (attributeType.IsInstanceOfType(att))
					list.Add(att);
			}
		}
		if (inherit)
		{
			var bm = this.GetBaseMember();
			if (bm != null)
				bm.AddCustomAttributes(list, attributeType, inherit);
		}
	},
	GetCustomAttributes$$Type$$Boolean:function System$Reflection$MemberInfo$GetCustomAttributes(attributeType, inherit)
	{
		var list = new System.Collections.Generic.List$1.ctor(System.Object);
		this.AddCustomAttributes(list, attributeType, inherit);
		return list.ToArray();
	},
	GetCustomAttributes$$Boolean:function System$Reflection$MemberInfo$GetCustomAttributes(inherit)
	{
		if (inherit)
			throw new System.NotImplementedException.ctor$$String("GetCustomAttributes with inherit=true is not implemented");
		this.VerifyCustomAttributes();
		return this._CustomAttributes;
	}
},
{ //Static members
	
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Reflection.MethodBase", "System.Reflection.MemberInfo",
{ //Instance members
	ctor:function()
	{
		System.Reflection.MemberInfo.ctor.call(this);
	}
	
},
{ //Static members
	
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Reflection.MethodInfo", "System.Reflection.MethodBase",
{ //Instance members
	ctor:function()
	{
		this._IsStatic = false;
		this.JsFunction = null;
		this.JsName = null;
		System.Reflection.MethodBase.ctor.call(this);
	}
	,
	Invoke:function System$Reflection$MethodInfo$Invoke(obj, parameters)
	{
		var func;
		if (this._IsStatic)
			func = this.JsFunction;
		else
		{
			if (obj == null)
				throw new System.Exception.ctor$$String("Cannot invoke non static method without a target object");
			func = obj[this.JsName];
		}
		var res;
		if (parameters == null)
			res = func.apply(obj);
		else
			res = func.apply(obj, parameters);
		return res;
	}
},
{ //Static members
	
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Reflection.PropertyInfo", "System.Reflection.MemberInfo",
{ //Instance members
	ctor:function()
	{
		this._IsStatic = false;
		System.Reflection.MemberInfo.ctor.call(this);
	}
	,
	Name$$:"System.String",
	get_Name:function System$Reflection$PropertyInfo$get_Name()
	{
		return this._Name;
	},
	PropertyType$$:"SharpKit.JavaScript.Private.JsImplType",
	get_PropertyType:function System$Reflection$PropertyInfo$get_PropertyType()
	{
		return this._PropertyType;
	},
	GetBaseMember:function System$Reflection$PropertyInfo$GetBaseMember()
	{
		return null;
	},
	GetValue:function System$Reflection$PropertyInfo$GetValue(obj, indexes)
	{
		if (this._Getter == null)
			throw new System.Exception.ctor$$String("Property " + this._Name + " doesn't have a getter");
		var value = this._Getter.apply(obj, (indexes!=null ? indexes : new Array()));
		return value;
	},
	SetValue:function System$Reflection$PropertyInfo$SetValue(obj, value, indexes)
	{
		if (this._Setter == null)
			throw new System.Exception.ctor$$String("Property " + this._Name + " doesn't have a setter");
		if (indexes == null || indexes.get_Length() == 0)
		{
			this._Setter.call(obj, value);
		}
		else
		{
			var arr = new Array(indexes);
			arr.push(value);
			this._Setter.apply(obj, (indexes!=null ? indexes : new Array()));
		}
	}
},
{ //Static members
	
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Type", "System.Reflection.MemberInfo",
{ //Instance members
	ctor:function(jsType)
	{
		this.allPropertiesVerified = false;
		this.verifiedCustomAttributesOnTypeAndMembers = false;
		System.Reflection.MemberInfo.ctor.call(this);
		this._JsType = jsType;
		this._Name = this._JsType.name;
		if (System.Type.EmptyTypes == null)
			System.Type.EmptyTypes = [];
	}
	,
	IsEnum$$:"System.Boolean",
	get_IsEnum:function System$Type$get_IsEnum()
	{
		return this._JsType.isEnum;
	},
	BaseType$$:"SharpKit.JavaScript.Private.JsImplType",
	get_BaseType:function System$Type$get_BaseType()
	{
		if (this._JsType.baseType == null)
			return null;
		return System.Type._TypeOf(this._JsType.baseType);
	},
	Name$$:"System.String",
	get_Name:function System$Type$get_Name()
	{
		return this._JsType.get_Name();
	},
	FullName$$:"System.String",
	get_FullName:function System$Type$get_FullName()
	{
		return this._JsType.get_FullName();
	},
	AssemblyQualifiedName$$:"System.String",
	get_AssemblyQualifiedName:function System$Type$get_AssemblyQualifiedName()
	{
		return this._JsType.get_AssemblyQualifiedName();
	},
	GetBaseMember:function System$Type$GetBaseMember()
	{
		return this.get_BaseType();
	},
	FillProperties:function System$Type$FillProperties(def)
	{
		for(var funcName in def)
		{
			var isGetter = funcName.startsWith("get_");
			var isSetter = funcName.startsWith("set_");
			if (isGetter || isSetter)
				this.FillProperty(def, funcName, isSetter);
		}
	},
	FillProperty:function System$Type$FillProperty(def, funcName, isSetter)
	{
		var member = def[funcName];
		var func = member;
		var propName = funcName.Substring$$Int32(4);
		var prop = this._PropertiesByName[propName];
		if (prop == null)
		{
			prop = new System.Reflection.PropertyInfo.ctor();
			this._PropertiesByName[propName] = prop;
			this._Properties.push(prop);
			prop._Name = propName;
			prop._DeclaringType = this;
			prop._IsStatic = this._JsType.staticDefinition != null && this._JsType.staticDefinition[funcName] != null;
			var propTypeName = VM.getMemberTypeName(def, propName);
			if (propTypeName != null)
				prop._PropertyType = System.Type.GetType$$String(propTypeName);
			else
			{
			}
		}
		if (isSetter)
			prop._Setter = func;
		else
			prop._Getter = func;
	},
	TryFillProperty:function System$Type$TryFillProperty(def, name)
	{
		if (def == null)
			return false;
		var getterName = "get_" + name;
		var setterName = "set_" + name;
		if (def.hasOwnProperty(getterName))
			this.FillProperty(def, getterName, false);
		if (def.hasOwnProperty(setterName))
			this.FillProperty(def, setterName, true);
		return this._PropertiesByName[name] != null;
	},
	GetProperty:function System$Type$GetProperty(name)
	{
		this.VerifyProperty(name);
		return this._PropertiesByName[name];
	},
	VerifyProperty:function System$Type$VerifyProperty(name)
	{
		if (this._PropertiesByName == null)
		{
			this._PropertiesByName = new Object();
			this._Properties = new Array();
		}
		if (this._PropertiesByName.hasOwnProperty(name))
			return;
		if (this.TryFillProperty(this._JsType.definition, name))
			return;
		if (this.TryFillProperty(this._JsType.staticDefinition, name))
			return;
		var baseType = this.get_BaseType();
		if (baseType != null)
		{
			var pe = baseType.GetProperty(name);
			this._PropertiesByName[name] = pe;
			this._Properties.push(pe);
			return;
		}
		this._PropertiesByName[name] = null;
	},
	VerifyProperties:function System$Type$VerifyProperties()
	{
		if (!this.allPropertiesVerified)
		{
			this.allPropertiesVerified = true;
			if (this._PropertiesByName == null)
			{
				this._PropertiesByName = new Object();
				this._Properties = new Array();
			}
			this.FillProperties(this._JsType.definition);
			this.FillProperties(this._JsType.staticDefinition);
			var baseType = this.get_BaseType();
			if (baseType != null)
			{
				var $it9 = baseType.GetProperties().GetEnumerator();
				while ($it9.MoveNext())
				{
					var pe = $it9.get_Current();
					if (!this._PropertiesByName.hasOwnProperty(pe._Name))
					{
						this._PropertiesByName[pe._Name] = pe;
						this._Properties.push(pe);
					}
				}
			}
		}
	},
	GetProperties:function System$Type$GetProperties()
	{
		this.VerifyProperties();
		return this._Properties;
	},
	FillMethods:function System$Type$FillMethods(def)
	{
		var isStatic = def == this._JsType.staticDefinition;
		for(var funcName in def)
		{
			if (funcName == "toString")
				continue;
			var func = def[funcName];
			if (SharpKit.JavaScript.Utils.Js.Typeof(func) != "function")
				continue;
			var methodName = SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(funcName);
			var methods = this._MethodsByName[methodName];
			if (methods == null)
			{
				methods = new Array();
				this._MethodsByName[methodName] = methods;
			}
			var method = new System.Reflection.MethodInfo.ctor();
			methods.push(method);
			this._Methods.push(method);
			method._Name = methodName;
			method.JsName = funcName;
			method.JsFunction = func;
			method._DeclaringType = this;
			method._IsStatic = this._JsType.staticDefinition != null && this._JsType.staticDefinition[funcName] == func;
		}
	},
	GetMethod:function System$Type$GetMethod(name)
	{
		this.VerifyMethods();
		var methods = this._MethodsByName[name];
		if (methods == null)
			return null;
		return methods[0];
	},
	VerifyMethods:function System$Type$VerifyMethods()
	{
		if (this._MethodsByName == null)
		{
			this._MethodsByName = new Object();
			this._Methods = new Array();
			this.FillMethods(this._JsType.definition);
			this.FillMethods(this._JsType.staticDefinition);
			var baseType = this.get_BaseType();
			if (baseType != null)
			{
				var $it10 = baseType.GetMethods().GetEnumerator();
				while ($it10.MoveNext())
				{
					var pe = $it10.get_Current();
					if (this._MethodsByName[pe._Name] == null)
					{
						this._MethodsByName[pe._Name] = pe;
						this._Methods.push(pe);
					}
				}
			}
		}
	},
	GetMethods:function System$Type$GetMethods()
	{
		this.VerifyMethods();
		var arr = new Array();
		for (var i = 0;i < this._Methods.length;i++)
		{
			arr.push(this._Methods[i]);
		}
		return arr;
	},
	GetMethods$$String:function System$Type$GetMethods(name)
	{
		this.VerifyMethods();
		return this._MethodsByName[name];
	},
	GetMethods$$BindingFlags:function System$Type$GetMethods(bindingFlags)
	{
		return this.GetMethods();
	},
	VerifyCustomAttributes:function System$Type$VerifyCustomAttributes()
	{
		this.VerifyCustomAttributesOnTypeAndMembers();
	},
	VerifyCustomAttributesOnTypeAndMembers:function System$Type$VerifyCustomAttributesOnTypeAndMembers()
	{
		if (this.verifiedCustomAttributesOnTypeAndMembers)
			return;
		this.verifiedCustomAttributesOnTypeAndMembers = true;
		if (this._JsType.customAttributes == null)
			return;
		for (var i = 0;i < this._JsType.customAttributes.length;i++)
		{
			var attDef = this._JsType.customAttributes[i];
			var attType = JsType.GetType(attDef.typeName);
			var jsCtor = attType[attDef.ctorName];
			var att = SharpKit.JavaScript.Utils.Js.ApplyNew(jsCtor, attDef.positionalArguments);
			if (attDef.namedArguments != null)
			{
				for(var propName in attDef.namedArguments)
				{
					var value = attDef.namedArguments[propName];
					if (SharpKit.JavaScript.Utils.Js.Typeof(value) == "function")
						value = value.call(null);
					att["set_" + propName].call(att, value);
				}
			}
			var target = this.GetAttributeTarget(attDef.targetType, attDef.targetMemberName);
			if (target._CustomAttributes == null)
				target._CustomAttributes = new Array();
			target._CustomAttributes.push(att);
		}
	},
	GetAttributeTarget:function System$Type$GetAttributeTarget(memberType, memberName)
	{
		if (memberType == "type")
			return this;
		else if (memberType == "method")
		{
			var methodName = SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(memberName);
			var $it11 = this.GetMethods$$String(methodName).GetEnumerator();
			while ($it11.MoveNext())
			{
				var method = $it11.get_Current();
				if (method.JsName == memberName)
					return method;
			}
			return null;
		}
		else if (memberType == "property")
		{
			return this.GetProperty(memberName);
		}
		else
			throw new System.NotImplementedException.ctor$$String("GetAttributeTarget not supported yet for memberType: " + memberType);
	},
	IsAssignableFrom:function System$Type$IsAssignableFrom(type)
	{
		return TypeIs(type._JsType, this._JsType);
	},
	IsInstanceOfType:function System$Type$IsInstanceOfType(obj)
	{
		return Is(obj, this._JsType);
	},
	ToString:function System$Type$ToString()
	{
		return System.String.Format("{Name = " + this.get_Name() + " FullName = " + this.get_FullName() + "}");
	},
	MakeGenericType:function System$Type$MakeGenericType(typeArguments)
	{
		
var x = []; 
for(var i=0;i<arguments.length;i++) 
	x.push(arguments[i]|| null);
return this._MakeGenericType(x);
	},
	GetGenericTypeDefinition:function System$Type$GetGenericTypeDefinition()
	{
		return this._GenericTypeDefinition;
	},
	GetGenericArguments:function System$Type$GetGenericArguments()
	{
		if (this._TypeArguments == null)
			return System.Type.EmptyTypes;
		return this._TypeArguments;
	},
	_MakeGenericType:function System$Type$_MakeGenericType(typeArguments)
	{
		if (this._MakeGenericTypeCache == null)
			this._MakeGenericTypeCache = new Object();
		var key = "";
		for (var i = 0;i < typeArguments.length;i++)
		{
			var typeArg = typeArguments[i];
			key += typeArg._Name;
		}
		var t = this._MakeGenericTypeCache[key];
		if (t == null)
		{
			t = new System.Type.ctor(this._JsType);
			this._MakeGenericTypeCache[key] = t;
			t._Name = this._Name;
			t._GenericTypeDefinition = this;
			t._TypeArguments = typeArguments;
			t._Properties = this._Properties;
			t._PropertiesByName = this._PropertiesByName;
			t._Methods = this._Methods;
			t._MethodsByName = this._MethodsByName;
			t._DeclaringType = this._DeclaringType;
			t._CustomAttributes = this._CustomAttributes;
		}
		return t;
	}
},
{ //Static members
	_TypeOf:function System$Type$_TypeOf(jsType)
	{
		if (jsType == null)
			throw new System.Exception.ctor$$String("Cannot resovle type");
		if (jsType._ClrType == null)
			jsType._ClrType = new System.Type.ctor(jsType);
		return jsType._ClrType;
	},
	GetType$$String:function System$Type$GetType(name)
	{
		return System.Type.GetType$$String$$Boolean(name, false);
	},
	GetType$$String$$Boolean:function System$Type$GetType(name, throwOnError)
	{
		if (JsType._HasTypeArguments(name))
		{
			var jsTypeAndArgs = JsType._GetTypeWithArguments(name, throwOnError);
			if (jsTypeAndArgs == null)
				return null;
			var genericType = System.Type._TypeOf(jsTypeAndArgs[0]);
			var jsTypeArgs = jsTypeAndArgs[1];
			for (var i = 0;i < jsTypeArgs.length;i++)
			{
				jsTypeArgs[i] = System.Type._TypeOf(jsTypeArgs[i]);
			}
			var type = genericType._MakeGenericType(jsTypeArgs);
			return type;
		}
		var jsType = JsType.GetType(name);
		if (jsType == null)
		{
			if (throwOnError)
				throw new System.Exception.ctor$$String("Type " + name + " was not found");
			return null;
		}
		return System.Type._TypeOf(jsType);
	},
	GetType$$String$$Boolean$$Boolean:function System$Type$GetType(name, throwOnError, ignoreCase)
	{
		if (ignoreCase)
			throw new System.NotImplementedException.ctor();
		return System.Type.GetType$$String$$Boolean(name, throwOnError);
	}
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
