//@AutoGenerated
Class("System.Linq.Enumerable", "System.Object",
{ //Instance members
	ctor:function()
	{
		System.Object.ctor.call(this);
	}
	
},
{ //Static members
	First$$IEnumerable$1:function System$Linq$Enumerable$First(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var list = As(source, System.Collections.Generic.IList$1);
		if (list != null)
		{
			if (list.get_Count() > 0)
			{
				return list.get_Item(0);
			}
		}
		else
		{
			var enumerator = source.GetEnumerator();
			try
			{
				if (enumerator.MoveNext())
				{
					return enumerator.get_Current();
				}
			}
			finally
			{
				enumerator.Dispose();
			}
		}
		throw System.Linq.Error.NoElements();
	},
	First$$IEnumerable$1$$Func$2:function System$Linq$Enumerable$First(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		var $it3 = source.GetEnumerator();
		while ($it3.MoveNext())
		{
			var local = $it3.get_Current();
			if (predicate.Invoke(local))
			{
				return local;
			}
		}
		throw System.Linq.Error.NoMatch();
	},
	FirstOrDefault$$IEnumerable$1:function System$Linq$Enumerable$FirstOrDefault(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var list = As(source, System.Collections.Generic.IList$1);
		if (list != null)
		{
			if (list.get_Count() > 0)
			{
				return list.get_Item(0);
			}
		}
		else
		{
			var enumerator = source.GetEnumerator();
			try
			{
				if (enumerator.MoveNext())
				{
					return enumerator.get_Current();
				}
			}
			finally
			{
				enumerator.Dispose();
			}
		}
		return Default(TSource);
	},
	FirstOrDefault$$IEnumerable$1$$Func$2:function System$Linq$Enumerable$FirstOrDefault(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		var $it4 = source.GetEnumerator();
		while ($it4.MoveNext())
		{
			var local = $it4.get_Current();
			if (predicate.Invoke(local))
			{
				return local;
			}
		}
		return Default(TSource);
	},
	Last$$IEnumerable$1:function System$Linq$Enumerable$Last(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var list = As(source, System.Collections.Generic.IList$1);
		if (list != null)
		{
			var count = list.get_Count();
			if (count > 0)
			{
				return list.get_Item(count - 1);
			}
		}
		else
		{
			var enumerator = source.GetEnumerator();
			try
			{
				if (enumerator.MoveNext())
				{
					var current;
					do 
					{
						current = enumerator.get_Current();
					}
					while (enumerator.MoveNext());
					return current;
				}
			}
			finally
			{
				enumerator.Dispose();
			}
		}
		throw System.Linq.Error.NoElements();
	},
	Last$$IEnumerable$1$$Func$2:function System$Linq$Enumerable$Last(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		var local = Default(TSource);
		var flag = false;
		var $it5 = source.GetEnumerator();
		while ($it5.MoveNext())
		{
			var local2 = $it5.get_Current();
			if (predicate.Invoke(local2))
			{
				local = local2;
				flag = true;
			}
		}
		if (!flag)
		{
			throw System.Linq.Error.NoMatch();
		}
		return local;
	},
	LastOrDefault$$IEnumerable$1:function System$Linq$Enumerable$LastOrDefault(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var list = As(source, System.Collections.Generic.IList$1);
		if (list != null)
		{
			var count = list.get_Count();
			if (count > 0)
			{
				return list.get_Item(count - 1);
			}
		}
		else
		{
			var enumerator = source.GetEnumerator();
			try
			{
				if (enumerator.MoveNext())
				{
					var current;
					do 
					{
						current = enumerator.get_Current();
					}
					while (enumerator.MoveNext());
					return current;
				}
			}
			finally
			{
				enumerator.Dispose();
			}
		}
		return Default(TSource);
	},
	LastOrDefault$$IEnumerable$1$$Func$2:function System$Linq$Enumerable$LastOrDefault(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		var local = Default(TSource);
		var $it6 = source.GetEnumerator();
		while ($it6.MoveNext())
		{
			var local2 = $it6.get_Current();
			if (predicate.Invoke(local2))
			{
				local = local2;
			}
		}
		return local;
	},
	Where$$IEnumerable$1$$Func$2:function System$Linq$Enumerable$Where(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		return new System.Linq.WhereIterator$1.ctor(TSource, source, predicate);
	},
	Where$$IEnumerable$1$$Func$3:function System$Linq$Enumerable$Where(TSource, source, predicate)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (predicate == null)
		{
			throw System.Linq.Error.ArgumentNull("predicate");
		}
		throw new System.NotImplementedException.ctor();
	},
	Contains$$IEnumerable$1$$TSource:function System$Linq$Enumerable$Contains(TSource, source, value)
	{
		var is2 = As(source, System.Collections.Generic.ICollection$1);
		if (is2 != null)
		{
			return is2.Contains(value);
		}
		return System.Linq.Enumerable.Contains$$IEnumerable$1$$TSource$$IEqualityComparer$1(TSource, source, value, null);
	},
	Contains$$IEnumerable$1$$TSource$$IEqualityComparer$1:function System$Linq$Enumerable$Contains(TSource, source, value, comparer)
	{
		if (comparer == null)
		{
			comparer = System.Collections.Generic.EqualityComparer$1.get_Default();
		}
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var $it7 = source.GetEnumerator();
		while ($it7.MoveNext())
		{
			var local = $it7.get_Current();
			if (comparer.Equals$$T$$T(local, value))
			{
				return true;
			}
		}
		return false;
	},
	Count:function System$Linq$Enumerable$Count(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var is2 = As(source, System.Collections.Generic.ICollection$1);
		if (is2 != null)
		{
			return is2.get_Count();
		}
		var num = 0;
		var enumerator = source.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				num++;
			}
		}
		finally
		{
			enumerator.Dispose();
		}
		return num;
	},
	OfType:function System$Linq$Enumerable$OfType(TResult, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		return new System.Linq.OfTypeIterator$1.ctor(TResult, source);
	},
	Select:function System$Linq$Enumerable$Select(TSource, TResult, source, selector)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		if (selector == null)
		{
			throw System.Linq.Error.ArgumentNull("selector");
		}
		return new System.Linq.SelectIterator$2.ctor(TSource, TResult, source, selector);
	},
	Take:function System$Linq$Enumerable$Take(TSource, source, count)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.TakeIterator(TSource, source, count);
	},
	TakeIterator:function System$Linq$Enumerable$TakeIterator(TSource, source, count)
	{
		var d__ = new SharpKit.JavaScript.Private.JsImplTakeIterator$1.ctor(TSource, -2);
		d__._Source = source;
		d__._Count = count;
		return d__;
	},
	ToArray:function System$Linq$Enumerable$ToArray(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		var arr = new Array();
		var $it8 = source.GetEnumerator();
		while ($it8.MoveNext())
		{
			var obj = $it8.get_Current();
			arr.push(obj);
		}
		return arr;
	},
	ToList:function System$Linq$Enumerable$ToList(TSource, source)
	{
		if (source == null)
		{
			throw System.Linq.Error.ArgumentNull("source");
		}
		return new System.Collections.Generic.List$1.ctor$$IEnumerable$1(TSource, source);
	}
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Linq.Error", "System.Object",
{ //Instance members
	ctor:function()
	{
		System.Object.ctor.call(this);
	}
	
},
{ //Static members
	ArgumentNull:function System$Linq$Error$ArgumentNull(p)
	{
		return new System.Exception.ctor$$String("ArgumentNull " + p);
	},
	NoElements:function System$Linq$Error$NoElements()
	{
		return new System.Exception.ctor$$String("NoElements");
	},
	NoMatch:function System$Linq$Error$NoMatch()
	{
		return new System.Exception.ctor$$String("NoMatch");
	}
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Linq.WhereIterator$1", "System.Object",
{ //Instance members
	ctor:function(T, source, predicate)
	{
		this.T = T;
		System.Object.ctor.call(this);
		this.Source = source;
		this.Predicate = predicate;
	}
	,
	Current$$:"T",
	get_Current:function System$Linq$WhereIterator$get_Current()
	{
		return this.SourceEnumerator.get_Current();
	},
	Reset:function System$Linq$WhereIterator$Reset()
	{
		if (this.SourceEnumerator != null)
			this.SourceEnumerator.Reset();
	},
	MoveNext:function System$Linq$WhereIterator$MoveNext()
	{
		if (this.SourceEnumerator == null)
			this.SourceEnumerator = this.Source.GetEnumerator();
		while (true)
		{
			if (!this.SourceEnumerator.MoveNext())
				return false;
			var item = this.SourceEnumerator.get_Current();
			if (this.Predicate.Invoke(item))
				return true;
		}
	},
	Dispose:function System$Linq$WhereIterator$Dispose()
	{
		this.Source = null;
		this.Predicate = null;
		this.SourceEnumerator = null;
	},
	GetEnumerator:function System$Linq$WhereIterator$GetEnumerator()
	{
		return this;
	}
},
{ //Static members
	
}, //Interfaces
["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Linq.OfTypeIterator$1", "System.Object",
{ //Instance members
	ctor:function(T, source)
	{
		this.T = T;
		System.Object.ctor.call(this);
		this.Source = source;
	}
	,
	Current$$:"T",
	get_Current:function System$Linq$OfTypeIterator$get_Current()
	{
		return this.SourceEnumerator.get_Current();
	},
	Reset:function System$Linq$OfTypeIterator$Reset()
	{
		if (this.SourceEnumerator != null)
			this.SourceEnumerator.Reset();
	},
	MoveNext:function System$Linq$OfTypeIterator$MoveNext()
	{
		if (this.SourceEnumerator == null)
			this.SourceEnumerator = this.Source.GetEnumerator();
		while (true)
		{
			if (!this.SourceEnumerator.MoveNext())
				return false;
			var item = this.SourceEnumerator.get_Current();
			if (Is(item, this.T))
				return true;
		}
	},
	Dispose:function System$Linq$OfTypeIterator$Dispose()
	{
		this.Source = null;
		this.SourceEnumerator = null;
	},
	GetEnumerator:function System$Linq$OfTypeIterator$GetEnumerator()
	{
		return this;
	}
},
{ //Static members
	
}, //Interfaces
["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
"SharpKit.JsClr", 
//Metadata
[
]
);
Class("System.Linq.SelectIterator$2", "System.Object",
{ //Instance members
	ctor:function(TSource, TResult, source, selector)
	{
		this.TSource = TSource;
		this.TResult = TResult;
		System.Object.ctor.call(this);
		this.Source = source;
		this.Selector = selector;
	}
	,
	Current$$:"TResult",
	get_Current:function System$Linq$SelectIterator$get_Current()
	{
		return this.Selector.Invoke(this.SourceEnumerator.get_Current());
	},
	Reset:function System$Linq$SelectIterator$Reset()
	{
		if (this.SourceEnumerator != null)
			this.SourceEnumerator.Reset();
	},
	MoveNext:function System$Linq$SelectIterator$MoveNext()
	{
		if (this.SourceEnumerator == null)
			this.SourceEnumerator = this.Source.GetEnumerator();
		while (true)
		{
			if (!this.SourceEnumerator.MoveNext())
				return false;
			return true;
		}
	},
	Dispose:function System$Linq$SelectIterator$Dispose()
	{
		this.Selector = null;
		this.Source = null;
		this.SourceEnumerator = null;
	},
	GetEnumerator:function System$Linq$SelectIterator$GetEnumerator()
	{
		return this;
	}
},
{ //Static members
	
}, //Interfaces
["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
"SharpKit.JsClr", 
//Metadata
[
]
);
