//@AutoGenerated
Enum("System.ComponentModel.ListSortDirection", null,
{
	Ascending:"Ascending",
	Descending:"Descending"});
Class("System.Math", "System.Object",
{ //Instance members
	ctor:function()
	{
		System.Object.ctor.call(this);
	}
	
},
{ //Static members
	Abs$$Number:function System$Math$Abs(value)
	{
		return Math.abs(value);
	},
	Abs$$Double:function System$Math$Abs(value)
	{
		return Math.abs(value);
	},
	Abs$$Int32:function System$Math$Abs(value)
	{
		return Math.abs(value);
	},
	Abs$$Int64:function System$Math$Abs(value)
	{
		return Math.abs(Cast(value, "System.Decimal"));
	},
	Abs$$Float:function System$Math$Abs(value)
	{
		return Math.abs(value);
	},
	AbsHelper$$Short:function System$Math$AbsHelper(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	AbsHelper$$Int32:function System$Math$AbsHelper(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	AbsHelper$$Int64:function System$Math$AbsHelper(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	AbsHelper$$SByte:function System$Math$AbsHelper(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Acos:function System$Math$Acos(d)
	{
		return Math.acos(d);
	},
	Asin:function System$Math$Asin(d)
	{
		return Math.asin(d);
	},
	Atan:function System$Math$Atan(d)
	{
		return Math.atan(d);
	},
	Atan2:function System$Math$Atan2(y, x)
	{
		return Math.atan2(y, x);
	},
	BigMul:function System$Math$BigMul(a, b)
	{
		throw new System.NotImplementedException.ctor();
	},
	Ceiling$$Decimal:function System$Math$Ceiling(d)
	{
		return Math.ceil(d);
	},
	Ceiling$$Double:function System$Math$Ceiling(a)
	{
		return Math.ceil(a);
	},
	Cos:function System$Math$Cos(d)
	{
		return Math.cos(d);
	},
	Cosh:function System$Math$Cosh(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	DivRem$$Int32$$Int32$$Int32:function System$Math$DivRem(a, b, result)
	{
		throw new System.NotImplementedException.ctor();
	},
	DivRem$$Int64$$Int64$$Int64:function System$Math$DivRem(a, b, result)
	{
		throw new System.NotImplementedException.ctor();
	},
	Exp:function System$Math$Exp(d)
	{
		return Math.exp(d);
	},
	Floor$$Decimal:function System$Math$Floor(d)
	{
		return Math.floor(d);
	},
	Floor$$Double:function System$Math$Floor(d)
	{
		return Math.floor(d);
	},
	IEEERemainder:function System$Math$IEEERemainder(x, y)
	{
		throw new System.NotImplementedException.ctor();
	},
	InternalRound:function System$Math$InternalRound(value, digits, mode)
	{
		throw new System.NotImplementedException.ctor();
	},
	InternalTruncate:function System$Math$InternalTruncate(d)
	{
		throw new System.NotImplementedException.ctor();
	},
	Log$$Double:function System$Math$Log(d)
	{
		return Math.log(d);
	},
	Log$$Double$$Double:function System$Math$Log(a, newBase)
	{
		throw new System.NotImplementedException.ctor();
	},
	Log10:function System$Math$Log10(d)
	{
		throw new System.NotImplementedException.ctor();
	},
	Max$$Decimal$$Decimal:function System$Math$Max(val1, val2)
	{
		return Math.max(val1, val2);
	},
	Max$$Double$$Double:function System$Math$Max(val1, val2)
	{
		return Math.max(val1, val2);
	},
	Max$$Int32$$Int32:function System$Math$Max(val1, val2)
	{
		return Math.max(val1, val2);
	},
	Max$$Int64$$Int64:function System$Math$Max(val1, val2)
	{
		return Math.max(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Max$$SByte$$SByte:function System$Math$Max(val1, val2)
	{
		return Math.max(val1, val2);
	},
	Max$$Float$$Float:function System$Math$Max(val1, val2)
	{
		return Math.max(val1, val2);
	},
	Max$$UInt32$$UInt32:function System$Math$Max(val1, val2)
	{
		return Math.max(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Max$$UInt64$$UInt64:function System$Math$Max(val1, val2)
	{
		return Math.max(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Min$$Decimal$$Decimal:function System$Math$Min(val1, val2)
	{
		return Math.min(val1, val2);
	},
	Min$$Double$$Double:function System$Math$Min(val1, val2)
	{
		return Math.min(val1, val2);
	},
	Min$$Int32$$Int32:function System$Math$Min(val1, val2)
	{
		return Math.min(val1, val2);
	},
	Min$$Int64$$Int64:function System$Math$Min(val1, val2)
	{
		return Math.min(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Min$$SByte$$SByte:function System$Math$Min(val1, val2)
	{
		return Math.min(val1, val2);
	},
	Min$$Float$$Float:function System$Math$Min(val1, val2)
	{
		return Math.min(val1, val2);
	},
	Min$$UInt32$$UInt32:function System$Math$Min(val1, val2)
	{
		return Math.min(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Min$$UInt64$$UInt64:function System$Math$Min(val1, val2)
	{
		return Math.min(Cast(val1, "System.Decimal"), Cast(val2, "System.Decimal"));
	},
	Pow:function System$Math$Pow(x, y)
	{
		return Math.pow(x, y);
	},
	Round$$Decimal:function System$Math$Round(d)
	{
		return Math.round(d);
	},
	Round$$Double:function System$Math$Round(a)
	{
		return Math.round(a);
	},
	Round$$Decimal$$Int32:function System$Math$Round(d, decimals)
	{
		return Math.round(d);
	},
	Round$$Decimal$$MidpointRounding:function System$Math$Round(d, mode)
	{
		throw new System.NotImplementedException.ctor();
	},
	Round$$Double$$Int32:function System$Math$Round(value, digits)
	{
		throw new System.NotImplementedException.ctor();
	},
	Round$$Double$$MidpointRounding:function System$Math$Round(value, mode)
	{
		throw new System.NotImplementedException.ctor();
	},
	Round$$Decimal$$Int32$$MidpointRounding:function System$Math$Round(d, decimals, mode)
	{
		throw new System.NotImplementedException.ctor();
	},
	Round$$Double$$Int32$$MidpointRounding:function System$Math$Round(value, digits, mode)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Decimal:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Double:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Short:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Int32:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Int64:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$SByte:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sign$$Float:function System$Math$Sign(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sin:function System$Math$Sin(a)
	{
		return Math.sin(a);
	},
	Sinh:function System$Math$Sinh(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Sqrt:function System$Math$Sqrt(d)
	{
		return Math.sqrt(d);
	},
	Tan:function System$Math$Tan(a)
	{
		return Math.tan(a);
	},
	Tanh:function System$Math$Tanh(value)
	{
		throw new System.NotImplementedException.ctor();
	},
	Truncate$$Decimal:function System$Math$Truncate(d)
	{
		throw new System.NotImplementedException.ctor();
	},
	Truncate$$Double:function System$Math$Truncate(d)
	{
		throw new System.NotImplementedException.ctor();
	}
}, //Interfaces
null,
"SharpKit.JsClr", 
//Metadata
[
]
);
