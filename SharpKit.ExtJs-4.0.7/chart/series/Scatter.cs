//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.chart.series
namespace Ext.chart.series
{
    #region Scatter
    /// <summary>
    /// Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.
    /// These variables can be mapped into x, y coordinates and also to an element&#39;s radius/size, color, etc.
    /// As with all other series, the Scatter Series must be appended in the series Chart array configuration. See the Chart
    /// documentation for more information on creating charts. A typical configuration object for the scatter could be:  var store = Ext.create(&#39;Ext.data.JsonStore&#39;, {
    /// fields: [&#39;name&#39;, &#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;, &#39;data4&#39;, &#39;data5&#39;],
    /// data: [
    /// {&#39;name&#39;:&#39;metric one&#39;, &#39;data1&#39;:10, &#39;data2&#39;:12, &#39;data3&#39;:14, &#39;data4&#39;:8, &#39;data5&#39;:13},
    /// {&#39;name&#39;:&#39;metric two&#39;, &#39;data1&#39;:7, &#39;data2&#39;:8, &#39;data3&#39;:16, &#39;data4&#39;:10, &#39;data5&#39;:3},
    /// {&#39;name&#39;:&#39;metric three&#39;, &#39;data1&#39;:5, &#39;data2&#39;:2, &#39;data3&#39;:14, &#39;data4&#39;:12, &#39;data5&#39;:7},
    /// {&#39;name&#39;:&#39;metric four&#39;, &#39;data1&#39;:2, &#39;data2&#39;:14, &#39;data3&#39;:6, &#39;data4&#39;:1, &#39;data5&#39;:23},
    /// {&#39;name&#39;:&#39;metric five&#39;, &#39;data1&#39;:27, &#39;data2&#39;:38, &#39;data3&#39;:36, &#39;data4&#39;:13, &#39;data5&#39;:33}
    /// ]
    /// });
    /// Ext.create(&#39;Ext.chart.Chart&#39;, {
    /// renderTo: Ext.getBody(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// theme:&#39;Category2&#39;,
    /// store: store,
    /// axes: [{
    /// type: &#39;Numeric&#39;,
    /// position: &#39;bottom&#39;,
    /// fields: [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;],
    /// title: &#39;Sample Values&#39;,
    /// grid: true,
    /// minimum: 0
    /// }, {
    /// type: &#39;Category&#39;,
    /// position: &#39;left&#39;,
    /// fields: [&#39;name&#39;],
    /// title: &#39;Sample Metrics&#39;
    /// }],
    /// series: [{
    /// type: &#39;scatter&#39;,
    /// markerConfig: {
    /// radius: 5,
    /// size: 5
    /// },
    /// axis: &#39;left&#39;,
    /// xField: &#39;name&#39;,
    /// yField: &#39;data2&#39;
    /// }, {
    /// type: &#39;scatter&#39;,
    /// markerConfig: {
    /// radius: 5,
    /// size: 5
    /// },
    /// axis: &#39;left&#39;,
    /// xField: &#39;name&#39;,
    /// yField: &#39;data3&#39;
    /// }]
    /// });
    /// In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,
    /// data1, data2 and data3 respectively. All x-fields for the series must be the same field, in this case name.
    /// Each scatter series has a different styling configuration for markers, specified by the markerConfig object. Finally we set the left axis as
    /// axis to show the current values of the elements.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Scatter : Cartesian, Ext.util.Observable, Ext.chart.Label, Highlight, Ext.chart.Tip, Callout
    {
        /// <summary>
        /// Draws the series for the current chart. ...
        /// </summary>
        public object drawSeries(){return null;}
        public Scatter(ScatterConfig config){}
        public Scatter(){}
    }
    #endregion
    #region ScatterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ScatterConfig : CartesianConfig
    {
        public object markerConfig{get;set;}
        public object style{get;set;}
    }
    #endregion
    #region ScatterEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class ScatterEvents : CartesianEvents
    {
    }
    #endregion
}
#endregion
