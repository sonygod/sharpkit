//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data.proxy
namespace Ext.data.proxy
{
    #region SessionStorage
    /// <summary>
    /// Proxy which uses HTML5 session storage as its data storage/retrieval mechanism.
    /// If this proxy is used in a browser where session storage is not supported, the constructor will throw an error.
    /// A session storage proxy requires a unique ID which is used as a key in which all record data are stored in the
    /// session storage object. It&#39;s important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
    /// but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
    /// throw an error. Proxies are almost always used with a store: new Ext.data.Store({
    /// proxy: {
    /// type: &#39;sessionstorage&#39;,
    /// id  : &#39;myProxyKey&#39;
    /// }
    /// });
    /// Alternatively you can instantiate the Proxy directly: new Ext.data.proxy.SessionStorage({
    /// id  : &#39;myOtherProxyKey&#39;
    /// });
    /// Note that session storage is different to local storage (see Ext.data.proxy.LocalStorage) - if a browser
    /// session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
    /// don&#39;t affect the Ext.data.proxy.LocalStorage - the data are preserved.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SessionStorage : WebStorage, Ext.util.Observable
    {
        public SessionStorage(SessionStorageConfig config) : base(null){}
        public SessionStorage() : base(null){}
    }
    #endregion
    #region SessionStorageConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SessionStorageConfig : WebStorageConfig
    {
    }
    #endregion
    #region SessionStorageEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class SessionStorageEvents : WebStorageEvents
    {
    }
    #endregion
}
#endregion
