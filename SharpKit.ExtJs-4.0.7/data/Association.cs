//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
#region Ext.data
namespace Ext.data
{
    #region Association
    /// <summary>
    /// Associations enable you to express relationships between different Models. Let&#39;s say we&#39;re
    /// writing an ecommerce system where Users can make Orders - there&#39;s a relationship between these Models that we can
    /// express like this: Ext.define(&#39;User&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;name&#39;, &#39;email&#39;],
    /// hasMany: {model: &#39;Order&#39;, name: &#39;orders&#39;}
    /// });
    /// Ext.define(&#39;Order&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;user_id&#39;, &#39;status&#39;, &#39;price&#39;],
    /// belongsTo: &#39;User&#39;
    /// });
    /// We&#39;ve set up two models - User and Order - and told them about each other. You can set up as many associations on
    /// each Model as you need using the two default types - hasMany and
    /// belongsTo. There&#39;s much more detail on the usage of each of those inside their
    /// documentation pages. If you&#39;re not familiar with Models already, there is plenty on those too. Further Reading  hasMany associations belongsTo associations using Models  Self association models We can also have models that create parent/child associations between the same type. Below is an example, where
    /// groups can be nested inside other groups:
    /// // Server Data
    /// {
    /// &quot;groups&quot;: {
    /// &quot;id&quot;: 10,
    /// &quot;parent_id&quot;: 100,
    /// &quot;name&quot;: &quot;Main Group&quot;,
    /// &quot;parent_group&quot;: {
    /// &quot;id&quot;: 100,
    /// &quot;parent_id&quot;: null,
    /// &quot;name&quot;: &quot;Parent Group&quot;
    /// },
    /// &quot;child_groups&quot;: [{
    /// &quot;id&quot;: 2,
    /// &quot;parent_id&quot;: 10,
    /// &quot;name&quot;: &quot;Child Group 1&quot;
    /// },{
    /// &quot;id&quot;: 3,
    /// &quot;parent_id&quot;: 10,
    /// &quot;name&quot;: &quot;Child Group 2&quot;
    /// },{
    /// &quot;id&quot;: 4,
    /// &quot;parent_id&quot;: 10,
    /// &quot;name&quot;: &quot;Child Group 3&quot;
    /// }]
    /// }
    /// }
    /// // Client code
    /// Ext.define(&#39;Group&#39;, {
    /// extend: &#39;Ext.data.Model&#39;,
    /// fields: [&#39;id&#39;, &#39;parent_id&#39;, &#39;name&#39;],
    /// proxy: {
    /// type: &#39;ajax&#39;,
    /// url: &#39;data.json&#39;,
    /// reader: {
    /// type: &#39;json&#39;,
    /// root: &#39;groups&#39;
    /// }
    /// },
    /// associations: [{
    /// type: &#39;hasMany&#39;,
    /// model: &#39;Group&#39;,
    /// primaryKey: &#39;id&#39;,
    /// foreignKey: &#39;parent_id&#39;,
    /// autoLoad: true,
    /// associationKey: &#39;child_groups&#39; // read child data from child_groups
    /// }, {
    /// type: &#39;belongsTo&#39;,
    /// model: &#39;Group&#39;,
    /// primaryKey: &#39;id&#39;,
    /// foreignKey: &#39;parent_id&#39;,
    /// autoLoad: true,
    /// associationKey: &#39;parent_group&#39; // read parent data from parent_group
    /// }]
    /// });
    /// Ext.onReady(function(){
    /// Group.load(10, {
    /// success: function(group){
    /// console.log(group.getGroup().get(&#39;name&#39;));
    /// group.groups().each(function(rec){
    /// console.log(rec.get(&#39;name&#39;));
    /// });
    /// }
    /// });
    /// });
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Association
    {
        /// <summary>
        /// Creates the Association object. ...
        /// </summary>
        public Association(object config=null){}
        /// <summary>
        /// Get a specialized reader for reading associated data ...
        /// </summary>
        public Ext.data.reader.Reader getReader(){return null;}
        /// <summary>
        /// The name of the model is on the other end of the association (e.g. ...
        /// </summary>
        public JsString associatedName{get;set;}
        public JsString ownerName{get;set;}
        public Association(AssociationConfig config){}
    }
    #endregion
    #region AssociationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AssociationConfig
    {
        /// <summary>
        /// The string name of the model that is being associated with. ...
        /// </summary>
        public JsString associatedModel{get;set;}
        /// <summary>
        /// The name of the property in the data to read the association from. ...
        /// </summary>
        public JsString associationKey{get;set;}
        /// <summary>
        /// The string name of the model that owns the association. ...
        /// </summary>
        public JsString ownerModel{get;set;}
        /// <summary>
        /// The name of the primary key on the associated model. ...
        /// </summary>
        public JsString primaryKey{get;set;}
        public Ext.data.reader.Reader reader{get;set;}
    }
    #endregion
    #region AssociationEvents
    [JsType(JsMode.Json, Export=false)]
    public partial class AssociationEvents
    {
    }
    #endregion
}
#endregion
