//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs.events
{
    /// <summary>
    /// <p>To access the EventEmitter class, <code>require(&apos;events&apos;).EventEmitter</code>.
    /// </p>
    /// <p>When an <code>EventEmitter</code> instance experiences an error, the typical action is
    /// to emit an <code>&apos;error&apos;</code> event.  Error events are treated as a special case in node.
    /// If there is no listener for it, then the default action is to print a stack
    /// trace and exit the program.
    /// </p>
    /// <p>All EventEmitters emit the event <code>&apos;newListener&apos;</code> when new listeners are
    /// added.
    /// </p>
    /// </summary>
    public partial class EventEmitter
    {
        /// <summary>
        /// <p>Adds a listener to the end of the listeners array for the specified event.
        /// </p>
        /// <pre><code>server.on(&apos;connection&apos;, function (stream) {
        /// console.log(&apos;someone connected!&apos;);
        /// });</code></pre>
        /// </summary>
        public object addListener(object @event, object listener){return null;}
        /// <summary>
        /// <p>Execute each of the listeners in order with the supplied arguments.
        /// </p>
        /// </summary>
        public object emit(object @event){return null;}
        /// <summary>
        /// <p>Execute each of the listeners in order with the supplied arguments.
        /// </p>
        /// </summary>
        public object emit(object @event, object ___){return null;}
        /// <summary>
        /// <p>Execute each of the listeners in order with the supplied arguments.
        /// </p>
        /// </summary>
        public object emit(object @event, object arg2, object ___){return null;}
        /// <summary>
        /// <p>Execute each of the listeners in order with the supplied arguments.
        /// </p>
        /// </summary>
        public object emit(object @event, object arg1, object arg2, object ___){return null;}
        /// <summary>
        /// <p>Returns an array of listeners for the specified event. This array can be
        /// manipulated, e.g. to remove listeners.
        /// </p>
        /// <pre><code>server.on(&apos;connection&apos;, function (stream) {
        /// console.log(&apos;someone connected!&apos;);
        /// });
        /// console.log(util.inspect(server.listeners(&apos;connection&apos;))); // [ [Function] ]</code></pre>
        /// </summary>
        public object listeners(object @event){return null;}
        /// <summary>
        /// <p>Adds a listener to the end of the listeners array for the specified event.
        /// </p>
        /// <pre><code>server.on(&apos;connection&apos;, function (stream) {
        /// console.log(&apos;someone connected!&apos;);
        /// });</code></pre>
        /// </summary>
        public object on(object @event, object listener){return null;}
        /// <summary>
        /// <p>Adds a <strong>one time</strong> listener for the event. This listener is
        /// invoked only the next time the event is fired, after which
        /// it is removed.
        /// </p>
        /// <pre><code>server.once(&apos;connection&apos;, function (stream) {
        /// console.log(&apos;Ah, we have our first user!&apos;);
        /// });</code></pre>
        /// </summary>
        public object once(object @event, object listener){return null;}
        /// <summary>
        /// <p>Removes all listeners, or those of the specified event.
        /// </p>
        /// </summary>
        public object removeAllListeners(){return null;}
        /// <summary>
        /// <p>Removes all listeners, or those of the specified event.
        /// </p>
        /// </summary>
        public object removeAllListeners(object @event){return null;}
        /// <summary>
        /// <p>Remove a listener from the listener array for the specified event.
        /// <strong>Caution</strong>: changes array indices in the listener array behind the listener.
        /// </p>
        /// <pre><code>var callback = function(stream) {
        /// console.log(&apos;someone connected!&apos;);
        /// };
        /// server.on(&apos;connection&apos;, callback);
        /// // ...
        /// server.removeListener(&apos;connection&apos;, callback);</code></pre>
        /// </summary>
        public object removeListener(object @event, object listener){return null;}
        /// <summary>
        /// <p>By default EventEmitters will print a warning if more than 10 listeners are
        /// added for a particular event. This is a useful default which helps finding memory leaks.
        /// Obviously not all Emitters should be limited to 10. This function allows
        /// that to be increased. Set to zero for unlimited.
        /// </p>
        /// </summary>
        public object setMaxListeners(object n){return null;}
    }
}
