//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs.tls
{
    /// <summary>
    /// <p>This is a stream on top of the <em>Encrypted</em> stream that makes it possible to
    /// read/write an encrypted data as a cleartext data.
    /// </p>
    /// <p>This instance implements a duplex <a href="stream.html">Stream</a> interfaces.
    /// It has all the common stream methods and events.
    /// </p>
    /// <p>A ClearTextStream is the <code>clear</code> member of a SecurePair object.
    /// </p>
    /// </summary>
    public partial class CleartextStream
    {
        /// <summary>
        /// <p>Returns the bound address and port of the underlying socket as reported by the
        /// operating system. Returns an object with two properties, e.g.
        /// <code>{&quot;address&quot;:&quot;192.168.57.1&quot;, &quot;port&quot;:62053}</code>
        /// </p>
        /// </summary>
        public object address(){return null;}
        /// <summary>
        /// <p>Returns an object representing the peer&apos;s certificate. The returned object has
        /// some properties corresponding to the field of the certificate.
        /// </p>
        /// <p>Example:
        /// </p>
        /// <pre><code>{ subject:
        /// { C: &apos;UK&apos;,
        /// ST: &apos;Acknack Ltd&apos;,
        /// L: &apos;Rhys Jones&apos;,
        /// O: &apos;node.js&apos;,
        /// OU: &apos;Test TLS Certificate&apos;,
        /// CN: &apos;localhost&apos; },
        /// issuer:
        /// { C: &apos;UK&apos;,
        /// ST: &apos;Acknack Ltd&apos;,
        /// L: &apos;Rhys Jones&apos;,
        /// O: &apos;node.js&apos;,
        /// OU: &apos;Test TLS Certificate&apos;,
        /// CN: &apos;localhost&apos; },
        /// valid_from: &apos;Nov 11 09:52:22 2009 GMT&apos;,
        /// valid_to: &apos;Nov  6 09:52:22 2029 GMT&apos;,
        /// fingerprint: &apos;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&apos; }</code></pre>
        /// <p>If the peer does not provide a certificate, it returns <code>null</code> or an empty
        /// object.
        /// </p>
        /// </summary>
        public object getPeerCertificate(){return null;}
    }
}
