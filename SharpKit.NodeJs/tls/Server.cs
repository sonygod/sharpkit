//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs.tls
{
    /// <summary>
    /// <p>This class is a subclass of <code>net.Server</code> and has the same methods on it.
    /// Instead of accepting just raw TCP connections, this accepts encrypted
    /// connections using TLS or SSL.
    /// </p>
    /// </summary>
    public partial class Server
    {
        /// <summary>
        /// <p>Add secure context that will be used if client request&apos;s SNI hostname is
        /// matching passed <code>hostname</code> (wildcards can be used). <code>credentials</code> can contain
        /// <code>key</code>, <code>cert</code> and <code>ca</code>.
        /// </p>
        /// </summary>
        public object addContext(object hostname, object credentials){return null;}
        /// <summary>
        /// <p>Returns the bound address and port of the server as reported by the operating
        /// system.
        /// See <a href="net.html#server.address">net.Server.address()</a> for more information.
        /// </p>
        /// </summary>
        public object address(){return null;}
        /// <summary>
        /// <p>Stops the server from accepting new connections. This function is
        /// asynchronous, the server is finally closed when the server emits a <code>&apos;close&apos;</code>
        /// event.
        /// </p>
        /// </summary>
        public object close(){return null;}
        /// <summary>
        /// <p>Begin accepting connections on the specified <code>port</code> and <code>host</code>.  If the
        /// <code>host</code> is omitted, the server will accept connections directed to any
        /// IPv4 address (<code>INADDR_ANY</code>).
        /// </p>
        /// <p>This function is asynchronous. The last parameter <code>callback</code> will be called
        /// when the server has been bound.
        /// </p>
        /// <p>See <code>net.Server</code> for more information.
        /// </p>
        /// </summary>
        public object listen(object port){return null;}
        /// <summary>
        /// <p>Begin accepting connections on the specified <code>port</code> and <code>host</code>.  If the
        /// <code>host</code> is omitted, the server will accept connections directed to any
        /// IPv4 address (<code>INADDR_ANY</code>).
        /// </p>
        /// <p>This function is asynchronous. The last parameter <code>callback</code> will be called
        /// when the server has been bound.
        /// </p>
        /// <p>See <code>net.Server</code> for more information.
        /// </p>
        /// </summary>
        public object listen(object port, object callback){return null;}
        /// <summary>
        /// <p>Begin accepting connections on the specified <code>port</code> and <code>host</code>.  If the
        /// <code>host</code> is omitted, the server will accept connections directed to any
        /// IPv4 address (<code>INADDR_ANY</code>).
        /// </p>
        /// <p>This function is asynchronous. The last parameter <code>callback</code> will be called
        /// when the server has been bound.
        /// </p>
        /// <p>See <code>net.Server</code> for more information.
        /// </p>
        /// </summary>
        public object listen(object port, object host, object callback){return null;}
    }
}
