//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs
{
    /// <summary>
    /// <p>Class for verifying signatures.
    /// </p>
    /// <p>Returned by <code>crypto.createVerify</code>.
    /// </p>
    /// </summary>
    public partial class Verify
    {
        /// <summary>
        /// <p>Updates the verifier object with data.
        /// This can be called many times with new data as it is streamed.
        /// </p>
        /// </summary>
        public object update(object data){return null;}
        /// <summary>
        /// <p>Verifies the signed data by using the <code>object</code> and <code>signature</code>. <code>object</code> is  a
        /// string containing a PEM encoded object, which can be one of RSA public key,
        /// DSA public key, or X.509 certificate. <code>signature</code> is the previously calculated
        /// signature for the data, in the <code>signature_format</code> which can be <code>&#39;binary&#39;</code>,
        /// <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. Defaults to <code>&#39;binary&#39;</code>.
        /// </p>
        /// <p>Returns true or false depending on the validity of the signature for the data and public key.
        /// </p>
        /// <p>Note: <code>verifier</code> object can not be used after <code>verify()</code> method been called.
        /// </p>
        /// </summary>
        public object verify(object @object, object signature){return null;}
        /// <summary>
        /// <p>Verifies the signed data by using the <code>object</code> and <code>signature</code>. <code>object</code> is  a
        /// string containing a PEM encoded object, which can be one of RSA public key,
        /// DSA public key, or X.509 certificate. <code>signature</code> is the previously calculated
        /// signature for the data, in the <code>signature_format</code> which can be <code>&#39;binary&#39;</code>,
        /// <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. Defaults to <code>&#39;binary&#39;</code>.
        /// </p>
        /// <p>Returns true or false depending on the validity of the signature for the data and public key.
        /// </p>
        /// <p>Note: <code>verifier</code> object can not be used after <code>verify()</code> method been called.
        /// </p>
        /// </summary>
        public object verify(object @object, object signature, object signature_format){return null;}
    }
}
