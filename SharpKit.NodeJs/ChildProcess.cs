//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs
{
    /// <summary>
    /// <p><code>ChildProcess</code> is an <code>EventEmitter</code>.
    /// </p>
    /// <p>Child processes always have three streams associated with them. <code>child.stdin</code>,
    /// <code>child.stdout</code>, and <code>child.stderr</code>.  These may be shared with the stdio
    /// streams of the parent process, or they may be separate stream objects
    /// which can be piped to and from.
    /// </p>
    /// <p>The ChildProcess class is not intended to be used directly.  Use the
    /// <code>spawn()</code> or <code>fork()</code> methods to create a Child Process instance.
    /// </p>
    /// </summary>
    public partial class ChildProcess
    {
        /// <summary>
        /// <p>Send a signal to the child process. If no argument is given, the process will
        /// be sent <code>&apos;SIGTERM&apos;</code>. See <code>signal(7)</code> for a list of available signals.
        /// </p>
        /// <pre><code>var spawn = require(&apos;child_process&apos;).spawn,
        /// grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);
        /// grep.on(&apos;exit&apos;, function (code, signal) {
        /// console.log(&apos;child process terminated due to receipt of signal &apos;+signal);
        /// });
        /// // send SIGHUP to process
        /// grep.kill(&apos;SIGHUP&apos;);</code></pre>
        /// <p>Note that while the function is called <code>kill</code>, the signal delivered to the child
        /// process may not actually kill it.  <code>kill</code> really just sends a signal to a process.
        /// </p>
        /// <p>See <code>kill(2)</code>
        /// </p>
        /// </summary>
        public object kill(){return null;}
        /// <summary>
        /// <p>Send a signal to the child process. If no argument is given, the process will
        /// be sent <code>&apos;SIGTERM&apos;</code>. See <code>signal(7)</code> for a list of available signals.
        /// </p>
        /// <pre><code>var spawn = require(&apos;child_process&apos;).spawn,
        /// grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);
        /// grep.on(&apos;exit&apos;, function (code, signal) {
        /// console.log(&apos;child process terminated due to receipt of signal &apos;+signal);
        /// });
        /// // send SIGHUP to process
        /// grep.kill(&apos;SIGHUP&apos;);</code></pre>
        /// <p>Note that while the function is called <code>kill</code>, the signal delivered to the child
        /// process may not actually kill it.  <code>kill</code> really just sends a signal to a process.
        /// </p>
        /// <p>See <code>kill(2)</code>
        /// </p>
        /// </summary>
        public object kill(object signal){return null;}
        /// <summary>
        /// <p>Send a message (and, optionally, a handle object) to a child process.
        /// </p>
        /// <p>See <code>child_process.fork()</code> for details.
        /// </p>
        /// </summary>
        public object send(object message){return null;}
        /// <summary>
        /// <p>Send a message (and, optionally, a handle object) to a child process.
        /// </p>
        /// <p>See <code>child_process.fork()</code> for details.
        /// </p>
        /// </summary>
        public object send(object message, object sendHandle){return null;}
    }
}
