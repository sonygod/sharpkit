//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.NodeJs
{
    /// <summary>
    /// <p>A <code>Writable Stream</code> has the following methods, members, and events.
    /// </p>
    /// </summary>
    public partial class Writable_Stream
    {
        /// <summary>
        /// <p>Closes the underlying file descriptor. Stream is no longer <code>writable</code>
        /// nor <code>readable</code>.  The stream will not emit any more &#39;data&#39;, or &#39;end&#39;
        /// events. Any queued write data will not be sent.  The stream should emit
        /// &#39;close&#39; event once its resources have been disposed of.
        /// </p>
        /// </summary>
        public object destroy(){return null;}
        /// <summary>
        /// <p>After the write queue is drained, close the file descriptor.
        /// <code>destroySoon()</code> can still destroy straight away, as long as there is no
        /// data left in the queue for writes.
        /// </p>
        /// </summary>
        public object destroySoon(){return null;}
        /// <summary>
        /// <p>Terminates the stream with EOF or FIN.  This call will allow queued
        /// write data to be sent before closing the stream.
        /// </p>
        /// </summary>
        public object end(){return null;}
        /// <summary>
        /// <p>Same as above but with a <code>buffer</code>.
        /// </p>
        /// </summary>
        public object end(object buffer){return null;}
        /// <summary>
        /// <p>Sends <code>string</code> with the given <code>encoding</code> and terminates the stream with
        /// EOF or FIN. This is useful to reduce the number of packets sent.
        /// </p>
        /// </summary>
        public object end(object @string, object encoding){return null;}
        /// <summary>
        /// <p>Same as the above except with a raw buffer.
        /// </p>
        /// </summary>
        public object write(object buffer){return null;}
        /// <summary>
        /// <p>Writes <code>string</code> with the given <code>encoding</code> to the stream.  Returns <code>true</code>
        /// if the string has been flushed to the kernel buffer.  Returns <code>false</code> to
        /// indicate that the kernel buffer is full, and the data will be sent out
        /// in the future. The <code>&#39;drain&#39;</code> event will indicate when the kernel buffer
        /// is empty again. The <code>encoding</code> defaults to <code>&#39;utf8&#39;</code>.
        /// </p>
        /// </summary>
        public object write(object @string, object encoding){return null;}
    }
}
